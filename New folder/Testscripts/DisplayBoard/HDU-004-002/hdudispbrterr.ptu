HEADER hdudispbrterr, Source Code Ver : 1.4 , TestScript Ver : 1.4
--------------------------------------------------------------------------------
-- Author Name         : Priyanka N
--
-- File Name 	       : hdudispbrterr.ptu	
--
-- Test Creation Date  : 11.09.2017
--
-- Tested Functions    : RterrFunc
--
-- Version History     :
--
--  TEST-VERSION        TEST-DATE        TESTER NAME       	MODIFICATIONS
--  ------------        ---------       -----------        	-------------
--  1.1             	11.09.2017       Priyanka N     	Created the PTU file.
--  1.2                 11.11.2017       Priyanka N         Updated as per #PR100171
--  1.3                 14.11.2017       Priyanka N         Updated as per #PR100171
--	1.4					10.04.2018		 Bhanuprakash E		Updated as per #PR100201
--------------------------------------------------------------------------------
--
-- TESTED FILE INCLUDE DIRECTIVES 
--
--------------------------------------------------------------------------------

#/*============================================================================*/
#/* Module specific includes                                                   */
#/*============================================================================*/

##include "hdudispbbinascii.h"           
##include "hdudispbpanel.h"              
##include "hdudispbrterr.h"              
##include "hdudispbtext.h"               
##include "hdulibbasictypes.h"           

--------------------------------------------------------------------------------
--
-- TESTED FILE DECLARATIONS 
--
--------------------------------------------------------------------------------

-- Declarations of the global variables of the tested file
	
    --None
	
-- Declarations of the temporary variable
			
    -- Temporary variables created to verify stub parameters 
    # T_UINT32 PTU_src;
    # T_CHAR PTU_dest[9];
	
    -- Temporary variables used for loop usage
    # T_UINT32 PTU_i,PTU_j;
	
    -- Temporary variables created to verify the parameter 'pu8_string' character by character.  
    # T_UINT8 PTU_pu8_string1[2];
    # T_UINT8 PTU_pu8_string2[3];
    # T_UINT8 PTU_pu8_string3[8];
    # T_UINT8 PTU_pu8_string4[4];
    # T_UINT8 PTU_pu8_string5[9];
    # T_UINT8 PTU_pu8_string6[9];
    # T_UINT8 PTU_pu8_string7[2];
    # T_UINT8 PTU_pu8_string8[11];
	
    -- Temporary variable used as a flag value for all the stub calls "TextPrintString"
    # static T_UINT32 flag;

--------------------------------------------------------------------------------

BEGIN

    COMMENT Author Name      : Priyanka N 
    COMMENT
    COMMENT File Name        : hdudispbrterr.ptu
    COMMENT
    COMMENT Tested Functions : RterrFunc
    COMMENT
    COMMENT Assumptions and Constraints
    COMMENT <AC>
    COMMENT Assumption(s):
    COMMENT None
    COMMENT 
    COMMENT Constraint(s):
    COMMENT Snippet of code is added in function 'RterrFunc' to terminate the infinite loop
    COMMENT T_UINT16 PTU_count =0; /*local variable declared for testing purpose*/
    COMMENT while(ONE)
    COMMENT	{
    COMMENT    /*Modified for testing purpose to terminate infinite loop*/
    COMMENT    PTU_count++;
    COMMENT    if(PTU_count == 4)
    COMMENT    {
    COMMENT         break;
    COMMENT    } 
    COMMENT    else
    COMMENT    {
    COMMENT         /*nothing*/
    COMMENT    }
    COMMENT }   
    COMMENT Hence while loop cannot be covered for 0 and 1 times and coverage cannot be obtained for the FALSE part of while condition .
    COMMENT </AC>
	
    COMMENT Equivalence Class Description
    COMMENT <ECD>
    COMMENT 
    COMMENT Valid Class(es)
    COMMENT Class 1
    COMMENT Function "RterrFunc", calls the function "BspLcdSetPenColor".
    COMMENT
    COMMENT Class 2
    COMMENT Function "RterrFunc", calls the function "BinAscii".
    COMMENT	
    COMMENT Class 3
    COMMENT Function 'RterrFunc', calls the function 'TextPrintString'.	
    COMMENT
    COMMENT Invalid class(es)
    COMMENT Class 4
    COMMENT In the function "RterrFunc", invalid reference is passed to the function parameter ptr_file.
    COMMENT
    COMMENT Class 5
    COMMENT In the function "RterrFunc", invalid reference is passed to the function parameter ptr_message.
    COMMENT </ECD>
	
--------------------------------------------------------------------------------
--
-- STUB DECLARATIONS OF THE TESTED OR INTEGRATED UNITS
--
--------------------------------------------------------------------------------

SIMUL
	
    DEFINE STUB hdudispbrterr_c
	
           -- Parameter 'pu8_string' is made as _no since local variable address is passing to 
           --	stub "TextPrintString" as a parameter and hence verified explicitly.
           # void  TextPrintString ( T_UINT8 _no *pu8_string)
           # {
           #   if(flag == 1)
           #	{
           # 		for(PTU_i=0;PTU_i<2;PTU_i++)
           #  		PTU_pu8_string1[PTU_i] = pu8_string[PTU_i];
           #	}
           #   else if(flag == 2)
           #	{
           # 		for(PTU_i=0;PTU_i<3;PTU_i++)
           #  		PTU_pu8_string2[PTU_i] = pu8_string[PTU_i];
           #	}
           #   else if(flag == 3)
           #	{
           # 		for(PTU_i=0;PTU_i<8;PTU_i++)
           #  		PTU_pu8_string3[PTU_i] = pu8_string[PTU_i];
           #	}
           #   else if(flag == 4)
           #	{
           # 		for(PTU_i=0;PTU_i<4;PTU_i++)
           #  		PTU_pu8_string4[PTU_i] = pu8_string[PTU_i];
           #	}
           #   else if(flag == 5)
           #	{
           # 		for(PTU_i=0;PTU_i<9;PTU_i++)
           #  		PTU_pu8_string5[PTU_i] = pu8_string[PTU_i];
           #	}
           #   else if(flag == 6)
           #	{
           # 		for(PTU_i=0;PTU_i<9;PTU_i++)
           #  		PTU_pu8_string6[PTU_i] = pu8_string[PTU_i];
           #	}
           #   else if(flag == 7)
           #	{
           # 		for(PTU_i=0;PTU_i<2;PTU_i++)
           #  		PTU_pu8_string7[PTU_i] = pu8_string[PTU_i];
           #	}
           #   else if(flag == 8)
           #	{
           # 		for(PTU_i=0;PTU_i<11;PTU_i++)
           #		{
           #  		PTU_pu8_string8[PTU_i] = pu8_string[PTU_i];
           #		flag = 1;
           #   		}
           #	}
           # flag=flag+1;
           # }
	
           -- Parameter src and dest are made as _no since address is passing as a parameter 
           --  hence verified explicitly.
           #T_CHAR* BinAscii(void _no *src, T_USHORT _in format, char _no *dest[200])
           # {
           # PTU_src=100;
           # src = &PTU_src;
           # for(PTU_j=0;PTU_j<9;PTU_j++)
           #	 {
           #	PTU_dest[PTU_j]=dest[PTU_j];
           #  }
           # }
	
           #void BspLcdSetPenColor(T_EPEN_COLOR _in ePenColor); 
	
    END DEFINE


ELSE_SIMUL

           -- No action defined as of now if the module is not simulated

END SIMUL

--------------------------------------------------------------------------------
--
-- ENVIRONMENTS DECLARATIONS
--
--------------------------------------------------------------------------------
--IF HOST

-- No special things that have to be done on the host to run the test.

--ELSE

-- No action defined for the target execution as of now

--END IF
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
-- TESTED FILE ENVIRONNEMENT
--------------------------------------------------------------------------------

--Environment of the file hdudispbrterr.c

--ENVIRONMENT ENV_hdudispbrterr_c

    --None

--END ENVIRONMENT -- ENV_hdudispbrterr_c

--USE ENV_hdudispbrterr_c

--------------------------------------------------------------------------------
--
-- SERVICES DECLARATIONS
--
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
-- Declaration of the service RterrFunc
--------------------------------------------------------------------------------
SERVICE RterrFunc
SERVICE_TYPE extern

    -- Tested service parameters declarations
    #T_UINT8 ptr_file[4];
    #T_INT32 s32_line_number;
    #T_UINT8 ptr_message[3];

    ENVIRONMENT ENV_RterrFunc
	
	-- Parameter 'ptr_file' initialized before usage 
        VAR ptr_file,		init = 'A' ,		ev = init
        
        -- Parameter 's32_line_number' initialized before usage
        VAR s32_line_number,		init = 0,		ev = init
        
        -- Parameter 'ptr_message' initialized before usage
        VAR ptr_message,		init = 'B' ,		ev = init
	
    END ENVIRONMENT -- ENV_RterrFunc
	
    USE ENV_RterrFunc

TEST 1
FAMILY nominal

      COMMENT Test Description 
      COMMENT <TD>
      COMMENT [hdudispbrterr-RterrFunc-DB-LLR-001]
      COMMENT Function sets the display colour by calling "BspLcdSetPenColor" with parameter RED_BPC.
      COMMENT Equivalence Class 1
      COMMENT 
      COMMENT [hdudispbrterr-RterrFunc-DB-LLR-002]
      COMMENT Function calls "BinAscii" with below parameters  
      COMMENT	1. Reference to s32_linenumber, 2.sum of FOURB and FOURW and 3.Ascii Number.
      COMMENT Equivalence Class 2
      COMMENT 
      COMMENT [hdudispbrterr-RterrFunc-DB-LLR-003]
      COMMENT Function does the following:
      COMMENT	- "TextPrintString" with '\r\n' as its parameter and prints the Text.
      COMMENT	- "TextPrintString" with ptr_message as its parameter and prints the Text.
      COMMENT	- "TextPrintString" with "\r\nFile: " as its parameter and prints the Text.
      COMMENT	- "TextPrintString" with ptr_file as its parameter and prints the Text.
      COMMENT	- "TextPrintString" with "\r\nLine #:" as its parameter and prints the Text.
      COMMENT	- "TextPrintString" with Ascii Number as its parameter and prints the Text.
      COMMENT	- "TextPrintString" with '\r\n' as its parameter and prints the Text.
      COMMENT	- "TextPrintString" with "\r\nHalted!!!" as its parameter and prints the Text.
      COMMENT Equivalence Class 3
      COMMENT </TD>
	
      ELEMENT
	
        COMMENT INPUT SECTION:
        
        	-- Parameter "ptr_file" initialized before usage. 
        	VAR ptr_file[0] ,	  init = 'A' ,	     ev = init
        	VAR ptr_file[1] ,	  init = 'B' ,	     ev = init
        	VAR ptr_file[2] ,	  init = 'C' ,	     ev = init
        	VAR ptr_file[3] ,	  init = 'Z' ,	     ev = init
			
        	-- Parameter "ptr_message" initialized before usage.
        	VAR ptr_message[0] ,  	  init = 'X' , 	     ev = init
        	VAR ptr_message[1] ,      init = 'Y' ,       ev = init
        	VAR ptr_message[2] ,      init = 'Z' ,       ev = init
			
        	-- Specifies Line Number
        	VAR s32_line_number,      init = 100  ,        ev = init 
	
        COMMENT INPUT/OUTPUT SECTION:	

        	-- Variable 'flag' is initialized before usage
        	VAR flag , 		  init = 1 , 	     ev = 2
			
        COMMENT OUTPUT SECTION:

        	-- Holds the source value
        	VAR PTU_src,		  init = 20 ,        ev = 100  
			
        	-- 'PTU_dest' holds the 'Ascii_num' value
        	VAR PTU_dest[0],     	  init = ONE ,       ev = ZERO
        	VAR PTU_dest[1],     	  init = ONE ,       ev = ZERO
        	VAR PTU_dest[2],     	  init = ONE ,       ev = ZERO
        	VAR PTU_dest[3],     	  init = TWO ,       ev = ZERO
        	VAR PTU_dest[4],     	  init = ONE ,       ev = ZERO
        	VAR PTU_dest[5],     	  init = ONE ,       ev = ZERO
        	VAR PTU_dest[6],     	  init = TWO ,       ev = ZERO
        	VAR PTU_dest[7],     	  init = ONE ,       ev = ZERO
        	VAR PTU_dest[8],     	  init = ONE ,       ev = ZERO

        	-- Prints the ASCII values of character '\r'
        	VAR PTU_pu8_string1[0],   init = 15 ,        ev = 13
        	
        	-- Prints the ASCII values of character '\n'
        	VAR PTU_pu8_string1[1],   init = 14 ,        ev = 10

        	-- Prints the ASCII values of character stored in parameter 'ptr_message' as 'x'
        	VAR PTU_pu8_string2[0],   init = 10 ,        ev = 88
        	
        	-- Prints the ASCII values of character stored in parameter 'ptr_message' as 'y'
        	VAR PTU_pu8_string2[1],   init = 10 ,        ev = 89
        	
        	-- Prints the ASCII values of character stored in parameter 'ptr_message' as 'z'
        	VAR PTU_pu8_string2[2],   init = 10 ,        ev = 90

        	-- Prints the ASCII values of character '\r'
        	VAR PTU_pu8_string3[0],   init = 10 ,        ev = 13
        	
        	-- Prints the ASCII values of character '\n'
        	VAR PTU_pu8_string3[1],   init = 14 ,        ev = 10
        	
        	-- Prints the ASCII values of character 'F'
        	VAR PTU_pu8_string3[2],   init = 10 ,        ev = 70
        	
        	-- Prints the ASCII values of character 'i'
        	VAR PTU_pu8_string3[3],   init = 10 ,        ev = 105
        	
        	-- Prints the ASCII values of character 'l'
        	VAR PTU_pu8_string3[4],   init = 10 ,        ev = 108
        	
        	-- Prints the ASCII values of character 'e'
        	VAR PTU_pu8_string3[5],   init = 10 ,        ev = 101
        	
        	-- Prints the ASCII values of character ':'
        	VAR PTU_pu8_string3[6],   init = 10 ,        ev = 58
        	
        	-- Prints the ASCII values of character ' (space)'
        	VAR PTU_pu8_string3[7],   init = 10 ,        ev = 32

        	-- Prints the ASCII values of character stored in parameter 'ptr_file' as 'A'
        	VAR PTU_pu8_string4[0],   init = 10 ,        ev = 65
        	
        	-- Prints the ASCII values of character stored in parameter 'ptr_file' as 'B'
        	VAR PTU_pu8_string4[1],   init = 10 ,        ev = 66
        	
        	-- Prints the ASCII values of character stored in parameter 'ptr_file' as 'C'
        	VAR PTU_pu8_string4[2],   init = 10 ,        ev = 67
        	
        	-- Prints the ASCII values of character stored in parameter 'ptr_file' as 'Z'
        	VAR PTU_pu8_string4[3],   init = 10 ,        ev = 90

        	-- Prints the ASCII values of character '\r'
        	VAR PTU_pu8_string5[0],   init = 10 ,        ev = 13
        	
        	-- Prints the ASCII values of character '\n'
        	VAR PTU_pu8_string5[1],   init = 14 ,        ev = 10
        	
        	-- Prints the ASCII values of character 'L'
        	VAR PTU_pu8_string5[2],   init = 10 ,        ev = 76
        	
        	-- Prints the ASCII values of character 'i'
        	VAR PTU_pu8_string5[3],   init = 10 ,        ev = 105
        	
        	-- Prints the ASCII values of character 'n'
        	VAR PTU_pu8_string5[4],   init = 10 ,        ev = 110
        	
        	-- Prints the ASCII values of character 'e'
        	VAR PTU_pu8_string5[5],   init = 10 ,        ev = 101
        	
        	-- Prints the ASCII values of character ' (space)'
        	VAR PTU_pu8_string5[6],   init = 10 ,        ev = 32
        	
        	-- Prints the ASCII values of character '#'
        	VAR PTU_pu8_string5[7],   init = 10 ,        ev = 35
        	
        	-- Prints the ASCII values of character ':'
        	VAR PTU_pu8_string5[8],   init = 10 ,        ev = 58

        	-- Prints the ASCII values of character stored in static variable 'Ascii_num' 
        	VAR PTU_pu8_string6,      init = { others =>10} , ev = { others =>ZERO}

        	-- Prints the ASCII values of character '\r'
        	VAR PTU_pu8_string7[0],   init = 15 ,        ev = 13
        	
        	-- Prints the ASCII values of character '\n'
        	VAR PTU_pu8_string7[1],   init = 14 ,        ev = 10

        	-- Prints the ASCII values of character '\r'
        	VAR PTU_pu8_string8[0],   init = 10 ,        ev = 13
        	
        	-- Prints the ASCII values of character '\n'
        	VAR PTU_pu8_string8[1],   init = 14 ,        ev = 10
        	
        	-- Prints the ASCII values of character '\H'
        	VAR PTU_pu8_string8[2],   init = 10 ,        ev = 72
        	
        	-- Prints the ASCII values of character 'a'
        	VAR PTU_pu8_string8[3],   init = 10 ,        ev = 97
        	
        	-- Prints the ASCII values of character 'l'
        	VAR PTU_pu8_string8[4],   init = 10 ,        ev = 108
        	
        	-- Prints the ASCII values of character 't'
        	VAR PTU_pu8_string8[5],   init = 10 ,        ev = 116
        	
        	-- Prints the ASCII values of character 'e'
        	VAR PTU_pu8_string8[6],   init = 10 ,        ev = 101
        	
        	-- Prints the ASCII values of character 'd'
        	VAR PTU_pu8_string8[7],   init = 10 ,        ev = 100
        	
        	-- Prints the ASCII values of character '!'
        	VAR PTU_pu8_string8[8],   init = 10 ,        ev = 33
        	
        	-- Prints the ASCII values of character '!'
        	VAR PTU_pu8_string8[9],   init = 10 ,        ev = 33
        	
        	-- Prints the ASCII values of character '!'
        	VAR PTU_pu8_string8[10],  init = 10 ,        ev = 33
          	
        --- Stub Calls :
        SIMUL
			
        	-- Sets display's colour
        	STUB BspLcdSetPenColor (RED_BPC)
			
        	-- Converting a binary number to ascii
        	STUB BinAscii (772)(T_CHAR *)0
			
        	-- Prints the characters
        	STUB TextPrintString ()

        	-- Prints the characters
        	STUB TextPrintString ()

        	-- Prints the characters
        	STUB TextPrintString ()

        	-- Prints the characters
        	STUB TextPrintString ()

        	-- Prints the characters
        	STUB TextPrintString ()

        	-- Prints the characters
        	STUB TextPrintString ()

        	-- Prints the characters
        	STUB TextPrintString ()

        	-- Prints the characters
        	STUB TextPrintString ()

        END SIMUL
		
        -- Calling the Unit Under Test :
        #RterrFunc(ptr_file, s32_line_number, ptr_message);
        
        END ELEMENT

END TEST -- TEST 1

--TEST 2
--FAMILY robustness
--
--      COMMENT Test Description 
--      COMMENT <TD>
--      COMMENT [hdudispbrterr-RterrFunc-DB-LLR-003]
--      COMMENT The function is tested by passing NULL Value to the formal pointer parameter ptr_file.
--      COMMENT Equivalence Class 4
--      COMMENT </TD>
--	
--      ELEMENT
--
--        COMMENT INPUT SECTION:	
--	
--        	-- Parameter "ptr_message" initialized before usage.
--        	VAR ptr_message[0] ,  	  init = 'X' , 	     ev = init
--        	VAR ptr_message[1] ,      init = 'Y' ,       ev = init
--        	VAR ptr_message[2] ,      init = 'Z' ,       ev = init
--			
--        	-- Specifies Line Number
--        	VAR s32_line_number,      init = 100  ,        ev = init 
--	
--        COMMENT INPUT/OUTPUT SECTION:	
--
--        	-- Variable 'flag' is initialized before usage
--        	VAR flag , 		  init = 1 , 	     ev = 2
--			
--        COMMENT OUTPUT SECTION:
--
--        	-- None
--          	
--        --- Stub Calls :
--        SIMUL
--			
--        	-- None
--
--        END SIMUL
--		
--        -- Calling the Unit Under Test :
--        #RterrFunc(NULL, s32_line_number, &ptr_message);
--        
--        END ELEMENT
--
--END TEST -- TEST 2
--
--TEST 3
--FAMILY robustness
--
--      COMMENT Test Description 
--      COMMENT <TD>
--      COMMENT [hdudispbrterr-RterrFunc-DB-LLR-003]
--      COMMENT The function is tested by passing NULL Value to the formal pointer parameter ptr_message.
--      COMMENT Equivalence Class 5
--      COMMENT </TD>
--	
--      ELEMENT
--	
--        COMMENT INPUT SECTION:
--
--        	-- Parameter "ptr_file" initialized before usage. 
--        	VAR ptr_file[0] ,	  init = 'A' ,	     ev = init
--        	VAR ptr_file[1] ,	  init = 'B' ,	     ev = init
--        	VAR ptr_file[2] ,	  init = 'C' ,	     ev = init
--        	VAR ptr_file[3] ,	  init = 'Z' ,	     ev = init
--			
--        	-- Specifies Line Number
--        	VAR s32_line_number,      init = 101  ,        ev = init 
--	
--        COMMENT INPUT/OUTPUT SECTION:	
--
--        	-- Variable 'flag' is initialized before usage
--        	VAR flag , 		  init = 1 , 	     ev = 2
--			
--        COMMENT OUTPUT SECTION:
--
--        	-- None
--          	
--        --- Stub Calls :
--        SIMUL
--			
--        	-- None
--
--        END SIMUL
--		
--        -- Calling the Unit Under Test :
--        #RterrFunc(&ptr_file, s32_line_number, NULL);
--        
--        END ELEMENT
--
--END TEST -- TEST 3

END SERVICE -- RterrFunc

