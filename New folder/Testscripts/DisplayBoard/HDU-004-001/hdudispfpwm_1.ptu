HEADER hdudispfpwm,Source Code Ver : 1.7,TestScript Ver : 1.5
--------------------------------------------------------------------------------
-- Author Name          : Pallavi V N
--
-- File Name            : hdudispfpwm_1.ptu
--
-- Test Creation Date   : 10.10.2017
--
-- Tested Functions     : ErrorHandler 
--                        PwmLcdBackLightPcnt 
--                        PwmLcdBezelLightPcnt
--                        PwmBackLightStepTo 
--                        PwmBackLightNewMode 
-- 
-- Version History      :
--
-- TEST-VERSION        TEST-DATE       TESTER NAME        MODIFICATIONS
--  ------------       ---------       -----------        -------------
--     1.1             10.10.2017      Pallavi V N        Created the ptu file 
--     1.2             10.11.2017      Pallavi V N        Updated as per #PR100171 
--     1.3             14.11.2017      Pallavi V N        Updated as per #PR100171  
--	   1.4 			   28.07.2020	   Harshitha R 		  Updated as per #PR100267
--	   1.5 			   15.09.2020	   Harshitha R 		  Updated as per #PR100281


-------------------------------------------------------------------------------
--
-- TESTED FILE INCLUDE DIRECTIVES 
--
--------------------------------------------------------------------------------

##include "hdudispfglobalsettings.h"    
##include "hdudispfpolygon1.h"          
##include "hdudispfpwm.h"               
##include "hdudispfstmadc.h"            
##include "hdudispftimer.h"             
##include "hdulibstm32f7xxhalrccex.h"   
##include "hdulibstm32f7xxhaltim.h"     
##include "hdulibstm32f7xxhalgpio.h"    
##include "hdulibstm32f7xxhal.h"        
##include "hdudispflookup.h"            
##include "hdudispfparams.h"            
##include "hdulibstm32hallegacy.h" 

--------------------------------------------------------------------------------
--
-- TESTED FILE DECLARATIONS 
--
--------------------------------------------------------------------------------

-- Declarations of the global variables of the tested file

    #extern void PwmLcdBezelLightPcnt(T_UINT16 u16_pcnt_onx100);
    #T_INT16 Manual_brightness;                                                                                           
    #T_BRIGHTNESS_MODE Brightness_mode; 
    #T_INT16 Auto_brightness;                                                                                             
    #T_INT16 S16_adc_reading[ 2U ]; 
    #volatile  T_INT32 Itm_rx_buffer;   
	#T_UINT8 Back_light;

    ##define TIM5_PERIOD     5000U
    ##define TIM2_PRESCALER  (T_INT16)(216/5)
    ##define TIM2_PERIOD  10000
    ##define TIM2_INIT_DC    0U
    ##define TIM5_INIT_DC    500U
    ##define DELAY_DSTB    -200
    ##define DEC_64         64U
    ##define DEC_500        500U
    ##define DEC_100K       100000U
    ##define POINT_FIVE_PERCNT  50U
    
-- Declaration of local variables

    --This variable is created to verify parameter htim  of 'HalTimPwmStart' function.
    #T_TIM_HANDLE  PTU_htim;
    --This variable is created to verify parameter htim of 'HalTimPwmConfigChannel' function.
    #T_TIM_HANDLE  PTU_htim_2;
    #T_TIM_HANDLE  PTU_htim_3;
    #T_TIM_HANDLE  PTU_htim_5;
    --This variable is created to verify parameter stat of 'LookupTableLookup' function.
    #T_PARAM_STAT PTU_stat;
    --This variable is created to verify parameter GPIO_Init of 'HalGpioInit' function.
    #T_GPIO_INIT PTU_GPIO_Init_2;
    #T_GPIO_INIT PTU_GPIO_Init_3;
    #T_GPIO_INIT PTU_GPIO_Init_5;
    --This variable is created to verify parameter sConfig of 'HalTimPwmConfigChannel' function.
    #T_TIM_OC_INIT  PTU_sConfig_2;
    #T_TIM_OC_INIT  PTU_sConfig_3;
    #T_TIM_OC_INIT  PTU_sConfig_5;
    --This variable is created to verify parameter timer of 'TimerInstall' function.
    #T_TIMER PTU_timer;
    --This variable is created to verify parameter count of 'HalGpioInit' function.
    #T_UINT8 PTU_count;
    #T_UINT8 PTU_count_1;
    #T_UINT8 PTU_count_2;  
    --This variable is created to handle loop index.  
    #T_INT32 PTU_i;
    --This variable is created to verify parameter table of 'LookupTableLookup' function.
    #T_INT32 PTU_x[4], PTU_y[3];
    -- Local variable is created to provide the minimum value of T_INT16
    # T_INT16 PTU_int16_min = (T_INT16)-32768;
--------------------------------------------------------------------------------

BEGIN

    COMMENT Author name      : Pallavi V N
    COMMENT
    COMMENT File name        : hdudispfpwm_1.ptu
    COMMENT
    COMMENT Tested functions : ErrorHandler 
    COMMENT                    PwmLcdBackLightPcnt 
    COMMENT                    PwmLcdBezelLightPcnt 
    COMMENT                    PwmBackLightStepTo 
    COMMENT                    PwmBackLightNewMode 
    COMMENT
    COMMENT Assumptions and Constraints
    COMMENT <AC>
    COMMENT Assumption(s):
    COMMENT None
    COMMENT
    COMMENT Constraint(s):
    COMMENT
    COMMENT 1) PTU has been split as 1 to 8 due to static dependency.
    COMMENT
    COMMENT 2) Source file "hdudispfpwm.c" is modified for testing purpose in function "ErrorHandler". 
    COMMENT  The while(TRUE)
    COMMENT  is modified for terminating the infinite loop.Hence while loop cannot be covered for 0 and 1 times .
    COMMENT 
    COMMENT 3) In header file hdulibstm32f746xx.h below mentioned macros are modified due to hardware stubbing.
    COMMENT     - TIM2
    COMMENT     - TIM3
    COMMENT     - TIM4
    COMMENT     - TIM5
    COMMENT     - GPIOA
    COMMENT     - RCC
    COMMENT
    COMMENT  4) In function PwmInit ‘do while’ loop cannot be covered for '2 or more' times since it is controlled by value '0' 
    COMMENT     in function ‘PwmInit’ for following macros:
    COMMENT     __HAL_RCC_TIM2_CLK_ENABLE()
    COMMENT     __HAL_RCC_GPIOA_CLK_ENABLE()
    COMMENT     __HAL_RCC_TIM3_CLK_ENABLE()
    COMMENT     __HAL_RCC_TIM5_CLK_ENABLE() 
    COMMENT
    COMMENT
    COMMENT 6) Following Test script related warnings are observed during Target 
    COMMENT     Execution for volatile keyword member/variable:
    COMMENT     warning #191-D: type qualifier is meaningless on cast type
    COMMENT
    COMMENT</AC>
    
    COMMENT Equivalence Class Description
    COMMENT <ECD>
    COMMENT
    COMMENT Valid Class(es)
    COMMENT 
    COMMENT Class 1
    COMMENT In function 'PwmInit', macro "__HAL_RCC_TIM2_CLK_ENABLE" is called.
    COMMENT     
    COMMENT Class 2
    COMMENT In function 'PwmInit','ErrorHandler' function is called.
    COMMENT
    COMMENT Class 3
    COMMENT In function 'PwmInit','ErrorHandler' function is not called.
    COMMENT
    COMMENT Class 4
    COMMENT In function 'PwmInit', return value from function 'HalTimPwmInit' is not equal to HAL_OK. 
    COMMENT
    COMMENT Class 5
    COMMENT In function 'PwmInit', return value from function 'HalTimPwmInit' is equal to HAL_OK.   
    COMMENT   
    COMMENT Class 6
    COMMENT In function 'PwmInit', return value from function 'HalTimPwmConfigChannel' is not equal to HAL_OK.    
    COMMENT      
    COMMENT Class 7
    COMMENT In function 'PwmInit', return value from function 'HalTimPwmConfigChannel' is equal to HAL_OK.   
    COMMENT   
    COMMENT Class 8
    COMMENT In function 'PwmInit', return value from function 'HalTimPwmStart' is not equal to HAL_OK. 
    COMMENT   
    COMMENT Class 9
    COMMENT In function 'PwmInit', return value from function 'HalTimPwmStart' is equal to HAL_OK.    
    COMMENT   
    COMMENT Class 10
    COMMENT In function 'PwmInit', macro "__HAL_RCC_GPIOA_CLK_ENABLE" is called.     
    COMMENT   
    COMMENT Class 11
    COMMENT In function 'PwmInit', 'HalGpioInit' function is called.    
    COMMENT   
    COMMENT Class 12
    COMMENT In function 'PwmInit', macro "__HAL_RCC_TIM3_CLK_ENABLE" is called.    
    COMMENT   
    COMMENT Class 13
    COMMENT In function 'PwmInit', macro "__HAL_RCC_TIM5_CLK_ENABLE" is called.       
    COMMENT   
    COMMENT Class 14
    COMMENT In function 'PwmInit', "TimerInstall" function is called.   
    COMMENT     
    COMMENT Class 15 
    COMMENT In function 'PwmLcdBackLightPcnt', parameter u32_pcnt_onx1000 is equal to DEC_100K     
    COMMENT   
    COMMENT Class 16 
    COMMENT In function 'PwmLcdBackLightPcnt', parameter u32_pcnt_onx1000 is less than DEC_100K     
    COMMENT   
    COMMENT Class 17
    COMMENT In function 'PwmLcdBackLightPcnt', parameter u32_pcnt_onx1000 is greater than DEC_100K     
    COMMENT   
    COMMENT Class 18
    COMMENT In function 'PwmLcdBackLightPcnt', parameter u32_pcnt_onx1000 is equal to POINT_FIVE_PERCNT  
    COMMENT   
    COMMENT Class 19
    COMMENT In function 'PwmLcdBackLightPcnt', parameter u32_pcnt_onx1000 is less than POINT_FIVE_PERCNT  
    COMMENT   
    COMMENT Class 20 
    COMMENT In function 'PwmLcdBackLightPcnt', parameter u32_pcnt_onx1000 is greater than POINT_FIVE_PERCNT 
    COMMENT   
    COMMENT Class 21
    COMMENT In function 'PwmLcdBackLightPcnt', when return value of macro ABS is not equal to ZERO   
    COMMENT   
    COMMENT Class 22
    COMMENT In function 'PwmLcdBackLightPcnt', when return value of macro ABS is equal to ZERO   
    COMMENT   
    COMMENT Class 23
    COMMENT In function 'PwmLcdBackLightPcnt', when temp variable  is equal to DEC_64 
    COMMENT   
    COMMENT Class 24
    COMMENT In function 'PwmLcdBackLightPcnt', when temp variable  is less than DEC_64   
    COMMENT   
    COMMENT Class 25
    COMMENT In function 'PwmLcdBackLightPcnt', when temp variable  is greater than DEC_64    
    COMMENT   
    COMMENT Class 26
    COMMENT In function 'PwmLcdBackLightPcnt', when target percentage value subtracted by percentage counter is equal to ZERO    
    COMMENT   
    COMMENT Class 27
    COMMENT In function 'PwmLcdBackLightPcnt', when target percentage value subtracted by percentage counter is less than ZERO    
    COMMENT   
    COMMENT Class 28
    COMMENT In function 'PwmLcdBackLightPcnt', when target percentage value subtracted by percentage counter is greater than ZERO    
    COMMENT   
    COMMENT Class 29
    COMMENT In function 'PwmLcdBackLightPcnt', when percentage counter is equal to TIM2_PERIOD    
    COMMENT  
    COMMENT Class 30
    COMMENT In function 'PwmLcdBackLightPcnt', when percentage counter is less than TIM2_PERIOD    
    COMMENT  
    COMMENT Class 31
    COMMENT In function 'PwmLcdBackLightPcnt', when percentage counter is greater than TIM2_PERIOD    
    COMMENT  
    COMMENT Class 32
    COMMENT In function 'PwmLcdBezelLightPcnt', u16_pcnt_onx100 is equal to TIM2_PERIOD.  
    COMMENT  
    COMMENT Class 33
    COMMENT In function 'PwmLcdBezelLightPcnt', u16_pcnt_onx100 is less than TIM2_PERIOD.  
    COMMENT  
    COMMENT Class 34
    COMMENT In function 'PwmLcdBezelLightPcnt', u16_pcnt_onx100 is greater than TIM2_PERIOD.  
    COMMENT
    COMMENT Class 35
    COMMENT In function 'PwmLcdBezelLightPcnt', Return value of macro ABS is not equal to ZERO
    COMMENT
    COMMENT Class 36
    COMMENT In function 'PwmLcdBezelLightPcnt', Return value of macro ABS is equal to ZERO
    COMMENT
    COMMENT Class 37
    COMMENT In function 'PwmLcdBezelLightPcnt', temp variable  is equal to THIRTY_TWO  
    COMMENT
    COMMENT Class 38
    COMMENT In function 'PwmLcdBezelLightPcnt', temp variable  is less than THIRTY_TWO   
    COMMENT
    COMMENT Class 39
    COMMENT In function 'PwmLcdBezelLightPcnt', temp variable  is greater than THIRTY_TWO  
    COMMENT
    COMMENT Class 40
    COMMENT In function 'PwmLcdBezelLightPcnt', target percentage value subtracted by percentage counter is equal to ZERO  
    COMMENT
    COMMENT Class 41
    COMMENT In function 'PwmLcdBezelLightPcnt', target percentage value subtracted by percentage counter is less than ZERO   
    COMMENT
    COMMENT Class 42
    COMMENT In function 'PwmLcdBezelLightPcnt', target percentage value subtracted by percentage counter is greater than ZERO   
    COMMENT 
    COMMENT Class 43
    COMMENT In function 'PwmBackLightDriver', Back light timer is equal to ZERO.
    COMMENT  
    COMMENT Class 44
    COMMENT In function 'PwmBackLightDriver', Back light timer is less than ZERO.
    COMMENT  
    COMMENT Class 45
    COMMENT In function 'PwmBackLightDriver', Back light timer is greater than ZERO.
    COMMENT  
    COMMENT Class 46
    COMMENT In function 'PwmBackLightDriver', Brightness_mode is equal EBRIGHTNESS_MANUAL
    COMMENT  
    COMMENT Class 47
    COMMENT In function 'PwmBackLightDriver', Brightness_mode is not equal EBRIGHTNESS_MANUAL
    COMMENT    
    COMMENT Class 48
    COMMENT In function 'PwmBackLightDriver', calls PwmLcdBackLightPcnt function.
    COMMENT     
    COMMENT Class 49
    COMMENT In function 'PwmBackLightDriver', calls PwmLcdBezelLightPcnt function.
    COMMENT  
    COMMENT Class 50
    COMMENT In function 'PwmBackLightStepTo', Brightness_mode is equal to EBRIGHTNESS_MANUAL 
    COMMENT 
    COMMENT Class 51
    COMMENT In function 'PwmBackLightStepTo', Brightness_mode is not equal EBRIGHTNESS_MANUAL
    COMMENT 
    COMMENT Class 52
    COMMENT In function 'PwmBackLightStepTo', percentage variable is equal to DEC_100K
    COMMENT
    COMMENT Class 53
    COMMENT In function 'PwmBackLightStepTo', percentage variable is less than DEC_100K
    COMMENT
    COMMENT Class 54
    COMMENT In function 'PwmBackLightStepTo', percentage variable is greater than DEC_100K
    COMMENT 
    COMMENT Class 55
    COMMENT In function 'PwmBackLightStepTo', percentage variable is equal to POINT_FIVE_PERCNT
    COMMENT
    COMMENT Class 56
    COMMENT In function 'PwmBackLightStepTo', percentage variable is less than POINT_FIVE_PERCNT
    COMMENT
    COMMENT Class 57
    COMMENT In function 'PwmBackLightStepTo', percentage variable is greater than POINT_FIVE_PERCNT
    COMMENT
    COMMENT Class 58
    COMMENT In function 'PwmBackLightNewMode', Brightness_mode is equal to EBRIGHTNESS_AUTO 
    COMMENT
    COMMENT Class 59
    COMMENT In function 'PwmBackLightNewMode', Brightness_mode is not equal to EBRIGHTNESS_AUTO 
    COMMENT
    COMMENT Class 60
    COMMENT In function 'PwmBackLightNewMode', percentage variable is equal to DEC_100K 
    COMMENT
    COMMENT Class 61
    COMMENT In function 'PwmBackLightNewMode', percentage variable is less than DEC_100K 
    COMMENT
    COMMENT Class 62
    COMMENT In function 'PwmBackLightNewMode', percentage variable is greater than DEC_100K 
    COMMENT
    COMMENT Class 63
    COMMENT In function 'PwmBackLightNewMode', percentage variable is equal to POINT_FIVE_PERCNT 
    COMMENT
    COMMENT Class 64
    COMMENT In function 'PwmBackLightNewMode', percentage variable is less than POINT_FIVE_PERCNT 
    COMMENT
    COMMENT Class 65
    COMMENT In function 'PwmBackLightNewMode', percentage variable is greater than POINT_FIVE_PERCNT
    COMMENT
	COMMENT	Class 66
	COMMENT	In function 'PwmLcdBackLightPcnt',Back_light value is equal to one
    COMMENT
	COMMENT	Class 67
	COMMENT	In function 'PwmLcdBackLightPcnt',Back_light value is other than one
    COMMENT Invalid Class(es)
    COMMENT  
    COMMENT </ECD>
--------------------------------------------------------------------------------
--
-- STUB DECLARATIONS OF THE TESTED OR INTEGRATED UNITS
--
--------------------------------------------------------------------------------
SIMUL

DEFINE STUB hdudispfpwm_c  
    -- Parameter table is made as _no and verified explicitly.
    -- Parameter stat is made as _no and verified explicitly.
    #T_INT32 LookupTableLookup( const  T_LOOKUP_TABLE _no *table, T_INT32 _in ind_var, T_PARAM_STAT _no *stat)
    #{
    #for(PTU_i=0;PTU_i<4;PTU_i++)
    # PTU_x[PTU_i] = table ->x[PTU_i];
    #
    #for(PTU_i=0;PTU_i<3;PTU_i++)
    # PTU_y[PTU_i] = table ->y[PTU_i];
    # 
    # PTU_stat = *stat;
    #}
    
    -- Parameter timer is made as _no and verified explicitly.
    #void TimerInstall( volatile  T_TIMER _no *timer)
    #{
    # PTU_timer = *timer;
    #}
    
    -- Parameter GPIO_Init is made as _no and verified explicitly.
    #void HalGpioInit(T_GPIO _in *GPIOx, T_GPIO_INIT _no *GPIO_Init)
    #{
    # PTU_count_2++;
    # if (PTU_count_2 == 1)
    #   PTU_GPIO_Init_2 = *GPIO_Init;
    # if (PTU_count_2 == 2)
    #   PTU_GPIO_Init_3 = *GPIO_Init;
    # if (PTU_count_2 == 3)
    #   PTU_GPIO_Init_5 = *GPIO_Init;
    #}
    
    -- Parameter htim is made as _no and verified explicitly.
    #T_HAL_STATUS HalTimPwmStart(T_TIM_HANDLE _no *htim, T_UINT32 _in Channel)
    #{
    # htim = &PTU_htim;
    #}
    
    -- Parameter htim and sConfig are made as _no and verified explicitly.
    #T_HAL_STATUS HalTimPwmConfigChannel(T_TIM_HANDLE _no *htim, T_TIM_OC_INIT _no *sConfig, T_UINT32 _in Channel)
    #{
    # PTU_count_1++;
    # if (PTU_count_1 == 1)
    # {
    #   PTU_htim_2 = *htim;
    #   PTU_sConfig_2 = *sConfig;
    # }
    # if (PTU_count_1 == 2)
    # {
    #   PTU_htim_3 = *htim;
    #   PTU_sConfig_3 = *sConfig;
    # }
    # if (PTU_count_1 == 3)
    # {
    #   PTU_htim_5 = *htim;
    #   PTU_sConfig_5 = *sConfig;
    # }
    #}
    
    -- Parameter htim is made as _no and verified explicitly.
    #T_HAL_STATUS HalTimPwmInit(T_TIM_HANDLE _no *htim)
    #{
    # PTU_count++;
    # if (PTU_count == 1)
    #   PTU_htim_2 = *htim;
    # if (PTU_count == 2)
    #   PTU_htim_3 = *htim;
    # if (PTU_count == 3)
    #   PTU_htim_5 = *htim;
    #}                                                                                               
END DEFINE

ELSE_SIMUL

        -- No action defined as of now if the module is not simulated

END SIMUL
--------------------------------------------------------------------------------
--
-- ENVIRONMENTS DECLARATIONS
--
--------------------------------------------------------------------------------
--IF HOST

-- No special things that have to be done on the host to run the test.

--ELSE

-- No action defined for the targetexecution as of now

--END IF
--------------------------------------------------------------------------------
-- TESTED FILE ENVIRONNEMENT
--------------------------------------------------------------------------------

--Environment of the hdudispfpwm.c

--ENVIRONMENT ENV_hdudispfpwm_c

    --None

--END ENVIRONMENT -- ENV_hdudispfpwm_c

--USE ENV_hdudispfpwm_c
--------------------------------------------------------------------------------
--
-- SERVICES DECLARATIONS
--
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
-- Declaration of the service PwmLcdBackLightPcnt
--------------------------------------------------------------------------------
SERVICE PwmLcdBackLightPcnt
SERVICE_TYPE extern

    -- Tested service parameters declarations
    #T_UINT32 u32_pcnt_onx1000 ;
    #T_INT16 new_auto_brightness;

    ENVIRONMENT ENV_PwmLcdBackLightPcnt
    
        VAR u32_pcnt_onx1000,           init =  0,  ev = init
        
    END ENVIRONMENT -- ENV_PwmLcdBackLightPcnt
    USE ENV_PwmLcdBackLightPcnt

TEST 1
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD>
    COMMENT [hdudispfpwm-PwmLcdBackLightPcnt-DB-LLR-001]
    COMMENT The function 'PwmLcdBackLightPcnt' does nothing when 
    COMMENT u32_pcnt_onx1000 is equal to DEC_100K.
    COMMENT Equivalence Class 15
    COMMENT
    COMMENT [hdudispfpwm-PwmLcdBackLightPcnt-DB-LLR-003]
    COMMENT The function 'PwmLcdBackLightPcnt' sets target percentage to u32_pcnt_onx1000.  
    COMMENT Equivalence Class None 
    COMMENT
    COMMENT [hdudispfpwm-PwmLcdBackLightPcnt-DB-LLR-006]
    COMMENT The function 'PwmLcdBackLightPcnt' sets temp variable to right shifted by SIX value of target 
    COMMENT percentage value subtracted by percentage counter when following conditions are met:
    COMMENT a) Return value of macro ABS with target percentage value subtracted by percentage 
    COMMENT    counter as parameter  is not equal to ZERO
    COMMENT b) temp variable  is greater than DEC_64 
    COMMENT Equivalence Class 21,25
    COMMENT
    COMMENT [hdudispfpwm-PwmLcdBackLightPcnt-DB-LLR-007]
    COMMENT The function 'PwmLcdBackLightPcnt' sets percentage counter value with sum of percentage
    COMMENT counter and temp variable.  
    COMMENT Equivalence Class None 
    COMMENT 
    COMMENT [hdudispfpwm-PwmLcdBackLightPcnt-DB-LLR-008]
    COMMENT The function 'PwmLcdBackLightPcnt' sets timer2 duty with DEC_500 and timer12 duty with percentage 
    COMMENT counter value when percentage counter is not greater than TIM2_PERIOD.  
    COMMENT Equivalence Class 29 
    COMMENT
    COMMENT [hdudispfpwm-PwmLcdBackLightPcnt-DB-LLR-009]
    COMMENT The function 'PwmLcdBackLightPcnt' sets register CCR3 of TIM2 with timer12 duty and 
    COMMENT register CCR4 of TIM5 with timer2 duty,if Back_light is equal to one
    COMMENT Equivalence Class :66
    COMMENT
    COMMENT </TD>
    
    ELEMENT
        
        COMMENT INPUT SECTION:
            
		
			VAR Back_light,					init = 1,					ev = init 
		
            -- desired duty percent x 1000 is initialized
            VAR u32_pcnt_onx1000,           init = DEC_100K,           ev = init
                
        COMMENT OUTPUT SECTION:
        
            -- Holds value of TIM capture/compare register 3
            VAR TIM2->CCR3,                 init = DEC_100K,            ev = 1660
            
            -- Holds value of TIM capture/compare register 4
            VAR TIM5->CCR4,                 init = DEC_100K,            ev = DEC_500
        
        COMMENT INPUT/OUTPUT SECTION: 
            --None
            
        --Stub Calls:
        SIMUL   
            --None
        
        END SIMUL 
        
        -- Calling the Unit Under Test:        
        #PwmLcdBackLightPcnt(u32_pcnt_onx1000);
    
    END ELEMENT

END TEST -- TEST 1

TEST 2
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD>
    COMMENT [hdudispfpwm-PwmLcdBackLightPcnt-DB-LLR-001]
    COMMENT The function 'PwmLcdBackLightPcnt' does nothing when 
    COMMENT u32_pcnt_onx1000 is less than DEC_100K.(DEC_100K - 1)
    COMMENT Equivalence Class 16
    COMMENT
    COMMENT [hdudispfpwm-PwmLcdBackLightPcnt-DB-LLR-006]
    COMMENT The function 'PwmLcdBackLightPcnt' sets temp variable to right shifted by SIX value of target 
    COMMENT percentage value subtracted by percentage counter when following conditions are met:
    COMMENT a) Return value of macro ABS with target percentage value subtracted by percentage 
    COMMENT    counter as parameter  is not equal to ZERO
    COMMENT b) temp variable  is greater than DEC_64 
    COMMENT Equivalence Class 21,25
    COMMENT
    COMMENT 
    COMMENT [hdudispfpwm-PwmLcdBackLightPcnt-DB-LLR-008]
    COMMENT The function 'PwmLcdBackLightPcnt' sets timer2 duty with DEC_500 and timer12 duty with percentage 
    COMMENT counter value when percentage counter is not greater than TIM2_PERIOD.  
    COMMENT Equivalence Class 30 
    COMMENT
    COMMENT
    COMMENT </TD>
    
    ELEMENT
        
        COMMENT INPUT SECTION:
            -- desired duty percent x 1000 is initialized
            VAR u32_pcnt_onx1000,           init = DEC_100K - 1,           ev = init
                
        COMMENT OUTPUT SECTION:
            -- Holds value of TIM capture/compare register 3            
            VAR TIM2->CCR3,                 init = DEC_100K,                ev = 3196
            -- Holds value of TIM capture/compare register 4
            VAR TIM5->CCR4,                 init = DEC_100K,                ev = DEC_500
        
        COMMENT INPUT/OUTPUT SECTION: 
            --None
        
        
        --Stub Calls:
        SIMUL   
            --None
        
        END SIMUL 
        
        -- Calling the Unit Under Test:        
        #PwmLcdBackLightPcnt(u32_pcnt_onx1000);
    
    END ELEMENT

END TEST -- TEST 2

TEST 3
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD>
    COMMENT [hdudispfpwm-PwmLcdBackLightPcnt-DB-LLR-001]
    COMMENT The function 'PwmLcdBackLightPcnt' parameter u32_pcnt_onx1000 is set to TIM2_PERIOD when 
    COMMENT u32_pcnt_onx1000 is greater than DEC_100K.(DEC_100K + 1)
    COMMENT Equivalence Class 17
    COMMENT
    COMMENT [hdudispfpwm-PwmLcdBackLightPcnt-DB-LLR-003]
    COMMENT The function 'PwmLcdBackLightPcnt' sets target percentage to u32_pcnt_onx1000.  
    COMMENT Equivalence Class None 
    COMMENT
    COMMENT [hdudispfpwm-PwmLcdBackLightPcnt-DB-LLR-006]
    COMMENT The function 'PwmLcdBackLightPcnt'sets temp variable to right shifted by SIX value of target 
    COMMENT percentage value subtracted by percentage counter when following conditions are met:
    COMMENT a) Return value of macro ABS with target percentage value subtracted by percentage 
    COMMENT    counter as parameter  is not equal to ZERO
    COMMENT b) temp variable  is greater than DEC_64 
    COMMENT Equivalence Class 21,25
    COMMENT
    COMMENT [hdudispfpwm-PwmLcdBackLightPcnt-DB-LLR-007]
    COMMENT The function 'PwmLcdBackLightPcnt' sets percentage counter value with sum of percentage
    COMMENT counter and temp variable.  
    COMMENT Equivalence Class None 
    COMMENT 
    COMMENT [hdudispfpwm-PwmLcdBackLightPcnt-DB-LLR-008]
    COMMENT The function 'PwmLcdBackLightPcnt' sets timer2 duty with DEC_500 and timer12 duty with percentage 
    COMMENT counter value when percentage counter is not greater than TIM2_PERIOD.  
    COMMENT Equivalence Class 30 
    COMMENT
    COMMENT [hdudispfpwm-PwmLcdBackLightPcnt-DB-LLR-009]
    COMMENT The function 'PwmLcdBackLightPcnt' sets register CCR3 of TIM2 with zero and 
    COMMENT register CCR4 of TIM5 with zero duty,if Back_light valuse is equal to one
    COMMENT Equivalence Class :67 
    COMMENT
    COMMENT </TD>
    
    ELEMENT
        
        COMMENT INPUT SECTION:
		
			VAR Back_light,					init = 10,					ev = init 

		
            -- desired duty percent x 1000 is initialized
            VAR u32_pcnt_onx1000,           init = DEC_100K + 1,     ev = init
                
        COMMENT OUTPUT SECTION:
        
            -- Holds value of TIM capture/compare register 3
            VAR TIM2->CCR3,                 init = DEC_100K,            ev = 0
            -- Holds value of TIM capture/compare register 4
            VAR TIM5->CCR4,                 init = DEC_100K,            ev = 0
        
        COMMENT INPUT/OUTPUT SECTION: 
            --None
            
        
        --Stub Calls:
        SIMUL   
            --None
        
        END SIMUL 
        
        -- Calling the Unit Under Test:        
        #PwmLcdBackLightPcnt(u32_pcnt_onx1000);
    
    END ELEMENT

END TEST -- TEST 3

TEST 4
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD>
    COMMENT
    COMMENT [hdudispfpwm-PwmLcdBackLightPcnt-DB-LLR-002]
    COMMENT The function 'PwmLcdBackLightPcnt' does nothing when 
    COMMENT u32_pcnt_onx1000 is equal to POINT_FIVE_PERCNT.
    COMMENT Equivalence Class 18
    COMMENT
    COMMENT [hdudispfpwm-PwmLcdBackLightPcnt-DB-LLR-003]
    COMMENT The function 'PwmLcdBackLightPcnt' sets target percentage to u32_pcnt_onx1000.  
    COMMENT Equivalence Class None 
    COMMENT
    COMMENT [hdudispfpwm-PwmLcdBackLightPcnt-DB-LLR-006]
    COMMENT The function 'PwmLcdBackLightPcnt' sets temp variable to right shifted by SIX value of target 
    COMMENT percentage value subtracted by percentage counter when following conditions are met:
    COMMENT a) Return value of macro ABS with target percentage value subtracted by percentage 
    COMMENT    counter as parameter  is not equal to ZERO
    COMMENT b) temp variable  is greater than DEC_64 
    COMMENT Equivalence Class 21,25
    COMMENT
    COMMENT [hdudispfpwm-PwmLcdBackLightPcnt-DB-LLR-007]
    COMMENT The function 'PwmLcdBackLightPcnt' sets percentage counter value with sum of percentage
    COMMENT counter and temp variable.  
    COMMENT Equivalence Class None 
    COMMENT </TD>
    
    ELEMENT
        
        COMMENT INPUT SECTION:
			VAR Back_light,					init = 1,					ev = init 

            -- desired duty percent x 1000 is initialized
            VAR u32_pcnt_onx1000,           init = POINT_FIVE_PERCNT,     ev = init
                
        COMMENT OUTPUT SECTION:
            
            -- Holds value of TIM capture/compare register 3
            VAR TIM2->CCR3,                 init = DEC_100K,            ev = 4635
            -- Holds value of TIM capture/compare register 4
            VAR TIM5->CCR4,                 init = DEC_100K,            ev = DEC_500
        
        COMMENT INPUT/OUTPUT SECTION: 
            --None
            
        
        --Stub Calls:
        SIMUL   
            --None
        
        END SIMUL 
        
        -- Calling the Unit Under Test:        
        #PwmLcdBackLightPcnt(u32_pcnt_onx1000);
    
    END ELEMENT

END TEST -- TEST 4

TEST 5
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD>
    COMMENT
    COMMENT [hdudispfpwm-PwmLcdBackLightPcnt-DB-LLR-002]
    COMMENT The function 'PwmLcdBackLightPcnt' parameter u32_pcnt_onx1000 sets to POINT_FIVE_PERCNT when 
    COMMENT u32_pcnt_onx1000 is less than POINT_FIVE_PERCNT. (POINT_FIVE_PERCNT - 1)
    COMMENT Equivalence Class 19
    COMMENT
    COMMENT [hdudispfpwm-PwmLcdBackLightPcnt-DB-LLR-003]
    COMMENT The function 'PwmLcdBackLightPcnt' sets target percentage to u32_pcnt_onx1000.  
    COMMENT Equivalence Class None 
    COMMENT
    COMMENT [hdudispfpwm-PwmLcdBackLightPcnt-DB-LLR-006]
    COMMENT The function 'PwmLcdBackLightPcnt' temp variable to right shifted by SIX value of target 
    COMMENT percentage value subtracted by percentage counter when following conditions are met:
    COMMENT a) Return value of macro ABS with target percentage value subtracted by percentage 
    COMMENT    counter as parameter  is not equal to ZERO
    COMMENT b) temp variable  is greater than DEC_64 
    COMMENT Equivalence Class 21,25
    COMMENT
    COMMENT [hdudispfpwm-PwmLcdBackLightPcnt-DB-LLR-007]
    COMMENT The function 'PwmLcdBackLightPcnt' sets percentage counter value with sum of percentage
    COMMENT counter and temp variable.  
    COMMENT Equivalence Class None 
    COMMENT
    COMMENT </TD>
    
    ELEMENT
        
        COMMENT INPUT SECTION:
			VAR Back_light,					init = 1,					ev = init 

            -- desired duty percent x 1000 is initialized
            VAR u32_pcnt_onx1000,           init = POINT_FIVE_PERCNT - 1,     ev = init
                
        COMMENT OUTPUT SECTION:
            
            -- Holds value of TIM capture/compare register 3
            VAR TIM2->CCR3,                 init = DEC_100K,            ev = 4563
            -- Holds value of TIM capture/compare register 4
            VAR TIM5->CCR4,                 init = DEC_100K,            ev = DEC_500
        
        COMMENT INPUT/OUTPUT SECTION: 
            --None
            
        
        --Stub Calls:
        SIMUL   
            --None
        
        END SIMUL 
        
        -- Calling the Unit Under Test:        
        #PwmLcdBackLightPcnt(u32_pcnt_onx1000);
    
    END ELEMENT

END TEST -- TEST 5

TEST 6
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD>
    COMMENT [hdudispfpwm-PwmLcdBackLightPcnt-DB-LLR-002]
    COMMENT The function 'PwmLcdBackLightPcnt' parameter does nothing when 
    COMMENT u32_pcnt_onx1000 is greater than POINT_FIVE_PERCNT.(POINT_FIVE_PERCNT + 1)
    COMMENT Equivalence Class 20
    COMMENT
    COMMENT [hdudispfpwm-PwmLcdBackLightPcnt-DB-LLR-003]
    COMMENT The function 'PwmLcdBackLightPcnt' sets target percentage to u32_pcnt_onx1000.  
    COMMENT Equivalence Class None 
    COMMENT
    COMMENT [hdudispfpwm-PwmLcdBackLightPcnt-DB-LLR-006]
    COMMENT The function 'PwmLcdBackLightPcnt' temp variable to right shifted by SIX value of target 
    COMMENT percentage value subtracted by percentage counter when following conditions are met:
    COMMENT a) Return value of macro ABS with target percentage value subtracted by percentage 
    COMMENT    counter as parameter  is not equal to ZERO
    COMMENT b) temp variable  is greater than DEC_64 
    COMMENT Equivalence Class 21
    COMMENT
    COMMENT [hdudispfpwm-PwmLcdBackLightPcnt-DB-LLR-007]
    COMMENT The function 'PwmLcdBackLightPcnt' sets percentage counter value with sum of percentage
    COMMENT counter and temp variable.  
    COMMENT Equivalence Class :66
    COMMENT
    COMMENT </TD>
    
    ELEMENT
        
        COMMENT INPUT SECTION:
			VAR Back_light,					init = 1,					ev = init 

            -- desired duty percent x 1000 is initialized
            VAR u32_pcnt_onx1000,           init = POINT_FIVE_PERCNT + 1,     ev = init
                
        COMMENT OUTPUT SECTION:
            
            -- Holds value of TIM capture/compare register 3
            VAR TIM2->CCR3,                 init = DEC_100K,            ev = 4492
            -- Holds value of TIM capture/compare register 4
            VAR TIM5->CCR4,                 init = DEC_100K,            ev = DEC_500
        
        COMMENT INPUT/OUTPUT SECTION: 
            --None
            
        
        --Stub Calls:
        SIMUL   
            --None
        
        END SIMUL 
        
        -- Calling the Unit Under Test:        
        #PwmLcdBackLightPcnt(u32_pcnt_onx1000);
    
    END ELEMENT

END TEST -- TEST 6

TEST 7 
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD>
    COMMENT
    COMMENT [hdudispfpwm-PwmLcdBackLightPcnt-DB-LLR-004]
    COMMENT The function 'PwmLcdBackLightPcnt' does nothing when 
    COMMENT a) Return value of macro ABS with target percentage value subtracted by percentage 
    COMMENT    counter as parameter is equal to ZERO
    COMMENT Equivalence Class 22
    COMMENT
    COMMENT [hdudispfpwm-PwmLcdBackLightPcnt-DB-LLR-007]
    COMMENT The function 'PwmLcdBackLightPcnt' sets percentage counter value with sum of percentage
    COMMENT counter and temp variable.  
    COMMENT Equivalence Class None 
    COMMENT 
    COMMENT [hdudispfpwm-PwmLcdBackLightPcnt-DB-LLR-008]
    COMMENT The function 'PwmLcdBackLightPcnt' sets timer2 duty with DEC_500 and timer12 duty with percentage 
    COMMENT counter value when percentage counter is not greater than TIM2_PERIOD.  
    COMMENT Equivalence Class None 
    COMMENT
    COMMENT [hdudispfpwm-PwmLcdBackLightPcnt-DB-LLR-009]
    COMMENT The function 'PwmLcdBackLightPcnt' sets register CCR3 of TIM2 with timer12 duty and 
    COMMENT register CCR4 of TIM5 with timer2 duty,If Back_light value is equal to 1
    COMMENT Equivalence Class :66
    COMMENT
    COMMENT </TD>
    
    ELEMENT
    
        COMMENT INPUT SECTION:
		
			VAR Back_light,					init = 1,					ev = init 

		
            -- desired duty percent x 1000 is initialized
            VAR u32_pcnt_onx1000,           init = 4492,                 ev = init
                
        COMMENT OUTPUT SECTION:
            
            -- Holds value of TIM capture/compare register 3
            VAR TIM2->CCR3,                 init = DEC_100K,            ev = 4492
            -- Holds value of TIM capture/compare register 4
            VAR TIM5->CCR4,                 init = DEC_100K,            ev = DEC_500
        
        COMMENT INPUT/OUTPUT SECTION: 
            --None
            
        
        --Stub Calls:
        SIMUL   
            --None
        
        END SIMUL 
        
        -- Calling the Unit Under Test:  

        #PwmLcdBackLightPcnt(u32_pcnt_onx1000);

    END ELEMENT

END TEST -- TEST 7

TEST 8
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD>
    COMMENT
    COMMENT [hdudispfpwm-PwmLcdBackLightPcnt-DB-LLR-006]
    COMMENT The function 'PwmLcdBackLightPcnt' temp variable to right shifted by SIX value of  target
    COMMENT percentage value subtracted by percentage counter when following conditions are met
    COMMENT a)  Return variable of macro ABS with target percentage value subtracted by percentage 
    COMMENT counter as parameter  is not equal to ZERO
    COMMENT b)  temp variable  is equal to DEC_64
    COMMENT Equivalence Class 21,23
    COMMENT
    COMMENT [hdudispfpwm-PwmLcdBackLightPcnt-DB-LLR-007]
    COMMENT The function 'PwmLcdBackLightPcnt' sets percentage counter value with sum of percentage
    COMMENT counter and temp variable.  
    COMMENT Equivalence Class None 
    COMMENT 
    COMMENT [hdudispfpwm-PwmLcdBackLightPcnt-DB-LLR-008]
    COMMENT The function 'PwmLcdBackLightPcnt' sets timer2 duty with DEC_500 and timer12 duty with percentage 
    COMMENT counter value when percentage counter is not greater than TIM2_PERIOD.  
    COMMENT Equivalence Class None 
    COMMENT
    COMMENT [hdudispfpwm-PwmLcdBackLightPcnt-DB-LLR-009]
    COMMENT The function 'PwmLcdBackLightPcnt' sets register CCR3 of TIM2 with timer12 duty and 
    COMMENT register CCR4 of TIM5 with timer2 duty,if Back_light is equal to one
    COMMENT Equivalence Class :66
    COMMENT
    COMMENT </TD>
    
    ELEMENT
        
        COMMENT INPUT SECTION:
			VAR Back_light,					init = 1,					ev = init 

		
            -- desired duty percent x 1000 is initialized
            VAR u32_pcnt_onx1000,           init = 4428,                 ev = init
                
        COMMENT OUTPUT SECTION:
            
            -- Holds value of TIM capture/compare register 3
            VAR TIM2->CCR3,                 init = DEC_100K,            ev = 4491
            -- Holds value of TIM capture/compare register 4
            VAR TIM5->CCR4,                 init = DEC_100K,            ev = DEC_500
        
        COMMENT INPUT/OUTPUT SECTION: 
            --None
            
        
        --Stub Calls:
        SIMUL   
            --None
        
        END SIMUL 
        
        -- Calling the Unit Under Test:        
        #PwmLcdBackLightPcnt(u32_pcnt_onx1000);
    
    END ELEMENT

END TEST -- TEST 8

TEST 9
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD>
    COMMENT [hdudispfpwm-PwmLcdBackLightPcnt-DB-LLR-005]
    COMMENT The function 'PwmLcdBackLightPcnt' temp variable to MINUS_ONE when following conditions are met:
    COMMENT a) Return value of macro ABS with target percentage value subtracted by percentage 
    COMMENT    counter as parameter  is not equal to ZERO
    COMMENT b) temp variable  is less than DEC_64 
    COMMENT c) target percentage value subtracted by percentage counter is not greater than ZERO
    COMMENT Equivalence Class 21,24
    COMMENT
    COMMENT [hdudispfpwm-PwmLcdBackLightPcnt-DB-LLR-007]
    COMMENT The function 'PwmLcdBackLightPcnt' sets percentage counter value with sum of percentage
    COMMENT counter and temp variable.  
    COMMENT Equivalence Class None 
    COMMENT 
    COMMENT [hdudispfpwm-PwmLcdBackLightPcnt-DB-LLR-008]
    COMMENT The function 'PwmLcdBackLightPcnt' sets timer2 duty with DEC_500 and timer12 duty with percentage 
    COMMENT counter value when percentage counter is not greater than TIM2_PERIOD.  
    COMMENT Equivalence Class None 
    COMMENT
    COMMENT [hdudispfpwm-PwmLcdBackLightPcnt-DB-LLR-009]
    COMMENT The function 'PwmLcdBackLightPcnt' sets register CCR3 of TIM2 with timer12 duty and 
    COMMENT register CCR4 of TIM5 with timer2 duty,if Back_light is equal to one
    COMMENT Equivalence Class :66
    COMMENT
    COMMENT </TD>
    
    ELEMENT
        
        COMMENT INPUT SECTION:
			VAR Back_light,					init = 1,					ev = init 

		
            -- desired duty percent x 1000 is initialized
            VAR u32_pcnt_onx1000,           init = 4428,                 ev = init
                
        COMMENT OUTPUT SECTION:
            
            -- Holds value of TIM capture/compare register 3
            VAR TIM2->CCR3,                 init = DEC_100K,            ev = 4490
            -- Holds value of TIM capture/compare register 4
            VAR TIM5->CCR4,                 init = DEC_100K,            ev = DEC_500
        
        COMMENT INPUT/OUTPUT SECTION: 
            --None
            
        
        --Stub Calls:
        SIMUL   
            --None
        
        END SIMUL 
        
        -- Calling the Unit Under Test:        
        #PwmLcdBackLightPcnt(u32_pcnt_onx1000);
    
    END ELEMENT

END TEST -- TEST 9
    
TEST 10
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD>
    COMMENT
    COMMENT [hdudispfpwm-PwmLcdBackLightPcnt-DB-LLR-006]
    COMMENT The function 'PwmLcdBackLightPcnt' temp variable to right shifted by SIX value of  target
    COMMENT percentage value subtracted by percentage counter when following conditions are met
    COMMENT a)  Return variable of macro ABS with target percentage value subtracted by percentage 
    COMMENT counter as parameter  is not equal to ZERO
    COMMENT b)  temp variable  is greater than DEC_64 
    COMMENT Equivalence Class 21,25
    COMMENT
    COMMENT [hdudispfpwm-PwmLcdBackLightPcnt-DB-LLR-007]
    COMMENT The function 'PwmLcdBackLightPcnt' sets percentage counter value with sum of percentage
    COMMENT counter and temp variable.  
    COMMENT Equivalence Class None 
    COMMENT 
    COMMENT [hdudispfpwm-PwmLcdBackLightPcnt-DB-LLR-008]
    COMMENT The function 'PwmLcdBackLightPcnt' sets timer2 duty with DEC_500 and timer12 duty with percentage 
    COMMENT counter value when percentage counter is not greater than TIM2_PERIOD.  
    COMMENT Equivalence Class None 
    COMMENT
    COMMENT [hdudispfpwm-PwmLcdBackLightPcnt-DB-LLR-009]
    COMMENT The function 'PwmLcdBackLightPcnt' sets register CCR3 of TIM2 with timer12 duty and 
    COMMENT register CCR4 of TIM5 with timer2 duty,if Back_light value is equal to 1
    COMMENT Equivalence Class :66 
    COMMENT
    COMMENT </TD>
    
    ELEMENT
        
        COMMENT INPUT SECTION:
		
			VAR Back_light,					init = 1,					ev = init 

            -- desired duty percent x 1000 is initialized
            VAR u32_pcnt_onx1000,           init = 4425,                 ev = init
                
        COMMENT OUTPUT SECTION:
            
            -- Holds value of TIM capture/compare register 3
            VAR TIM2->CCR3,                 init = DEC_100K,            ev = 4488
            -- Holds value of TIM capture/compare register 4
            VAR TIM5->CCR4,                 init = DEC_100K,            ev = DEC_500
        
        COMMENT INPUT/OUTPUT SECTION: 
            --None
            
        
        --Stub Calls:
        SIMUL   
            --None
        
        END SIMUL 
        
        -- Calling the Unit Under Test:        
        #PwmLcdBackLightPcnt(u32_pcnt_onx1000);
    
    END ELEMENT

END TEST -- TEST 10

TEST 11
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD>
    COMMENT
    COMMENT [hdudispfpwm-PwmLcdBackLightPcnt-DB-LLR-005]
    COMMENT The function 'PwmLcdBackLightPcnt' temp variable to MINUS_ONE when following conditions are met:
    COMMENT a) Return value of macro ABS with target percentage value subtracted by percentage 
    COMMENT    counter as parameter  is not equal to ZERO
    COMMENT b) temp variable  is less than DEC_64 
    COMMENT c) target percentage value subtracted by percentage counter is not greater than ZERO
    COMMENT Equivalence Class 21,24,27
    COMMENT
    COMMENT [hdudispfpwm-PwmLcdBackLightPcnt-DB-LLR-007]
    COMMENT The function 'PwmLcdBackLightPcnt' sets percentage counter value with sum of percentage
    COMMENT counter and temp variable.  
    COMMENT Equivalence Class None 
    COMMENT 
    COMMENT [hdudispfpwm-PwmLcdBackLightPcnt-DB-LLR-008]
    COMMENT The function 'PwmLcdBackLightPcnt' sets timer2 duty with DEC_500 and timer12 duty with percentage 
    COMMENT counter value when percentage counter is not greater than TIM2_PERIOD.  
    COMMENT Equivalence Class None 
    COMMENT
    COMMENT [hdudispfpwm-PwmLcdBackLightPcnt-DB-LLR-009]
    COMMENT The function 'PwmLcdBackLightPcnt' sets register CCR3 of TIM2 with timer12 duty and 
    COMMENT register CCR4 of TIM5 with timer2 duty,if Back_light is equal to one
    COMMENT Equivalence Class :66
    COMMENT
    COMMENT </TD>
    
    ELEMENT
        
        COMMENT INPUT SECTION:
		
			VAR Back_light,					init = 1,					ev = init 

            -- desired duty percent x 1000 is initialized
            VAR u32_pcnt_onx1000,           init = 4487,                 ev = init
                
        COMMENT OUTPUT SECTION:
            
            -- Holds value of TIM capture/compare register 3
            VAR TIM2->CCR3,                 init = DEC_100K,            ev = 4487
            -- Holds value of TIM capture/compare register 4
            VAR TIM5->CCR4,                 init = DEC_100K,            ev = DEC_500
        
        COMMENT INPUT/OUTPUT SECTION: 
            --None
            
        
        --Stub Calls:
        SIMUL   
            --None
        
        END SIMUL 
        
        -- Calling the Unit Under Test:        
        #PwmLcdBackLightPcnt(u32_pcnt_onx1000);
    
    END ELEMENT

END TEST -- TEST 11

TEST 12
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD>
    COMMENT [hdudispfpwm-PwmLcdBackLightPcnt-DB-LLR-004]
    COMMENT The function 'PwmLcdBackLightPcnt' sets temp variable to ONE when following conditions are met,
    COMMENT a)  Return value of macro ABS with target percentage value subtracted by  target percentage 
    COMMENT as parameter  is not equal to ZERO
    COMMENT b)  temp variable  is less than DEC_64
    COMMENT c)  target percentage value subtracted by percentage counter is greater than ZERO
    COMMENT Equivalence Class 21,24,28
    COMMENT
    COMMENT [hdudispfpwm-PwmLcdBackLightPcnt-DB-LLR-007]
    COMMENT The function 'PwmLcdBackLightPcnt' sets percentage counter value with sum of percentage
    COMMENT counter and temp variable.  
    COMMENT Equivalence Class None 
    COMMENT 
    COMMENT [hdudispfpwm-PwmLcdBackLightPcnt-DB-LLR-008]
    COMMENT The function 'PwmLcdBackLightPcnt' sets timer2 duty with DEC_500 and timer12 duty with percentage 
    COMMENT counter value when percentage counter is not greater than TIM2_PERIOD.  
    COMMENT Equivalence Class None 
    COMMENT
    COMMENT [hdudispfpwm-PwmLcdBackLightPcnt-DB-LLR-009]
    COMMENT The function 'PwmLcdBackLightPcnt' sets register CCR3 of TIM2 with timer12 duty and 
    COMMENT register CCR4 of TIM5 with timer2 duty,if Back_light is equal to 1
    COMMENT Equivalence Class None 
    COMMENT
    COMMENT </TD>
    
    ELEMENT
        
        COMMENT INPUT SECTION:
		

			VAR Back_light,					init = 1,					ev = init 
		
            -- desired duty percent x 1000 is initialized
            VAR u32_pcnt_onx1000,           init = 4488,                 ev = init
                
        COMMENT OUTPUT SECTION:
            
            -- Holds value of TIM capture/compare register 3
            VAR TIM2->CCR3,                 init = DEC_100K,            ev = 4488
            -- Holds value of TIM capture/compare register 4
            VAR TIM5->CCR4,                 init = DEC_100K,            ev = DEC_500
        
        COMMENT INPUT/OUTPUT SECTION: 
            --None
            
        
        --Stub Calls:
        SIMUL   
            --None
        
        END SIMUL 
        
        -- Calling the Unit Under Test:        
        #PwmLcdBackLightPcnt(u32_pcnt_onx1000);
    
    END ELEMENT

END TEST -- TEST 12
       
END SERVICE -- PwmLcdBackLightPcnt

--------------------------------------------------------------------------------
-- Declaration of the service PwmBackLightStepTo
--------------------------------------------------------------------------------
SERVICE PwmBackLightStepTo
SERVICE_TYPE extern
    
    -- Tested service parameters declarations
    #T_INT16 new_auto_brightness;
    #T_UINT32 u32_pcnt_onx1000 ;

    ENVIRONMENT ENV_PwmBackLightStepTo
    VAR new_auto_brightness,        init = 0,       ev = init
    VAR u32_pcnt_onx1000,           init = 0,  ev = init
    END ENVIRONMENT -- ENV_PwmBackLightStepTo
    USE ENV_PwmBackLightStepTo

TEST 1
FAMILY nominal   
    
    COMMENT Test Description
    COMMENT <TD>
    COMMENT [hdudispfpwm-PwmBackLightStepTo-DB-LLR-001]
    COMMENT The function 'PwmBackLightStepTo' sets percentage variable to Manual_brightness multiplied 
    COMMENT by TEN when EBRIGHTNESS_MANUAL is equal to Brightness_mode
    COMMENT Equivalence Class 50
    COMMENT
    COMMENT [hdudispfpwm-PwmBackLightStepTo-DB-LLR-003]
    COMMENT The function 'PwmBackLightStepTo' does nothing when is
    COMMENT percentage variable is equal to DEC_100K
    COMMENT Equivalence Class 52
    COMMENT
    COMMENT [hdudispfpwm-PwmBackLightStepTo-DB-LLR-005]
    COMMENT The function 'PwmBackLightStepTo' sets percentage counter with percentage variable.
    COMMENT Equivalence Class None
    COMMENT
    COMMENT [hdudispfpwm-PwmLcdBackLightPcnt-DB-LLR-001]
    COMMENT The function 'PwmLcdBackLightPcnt' does nothing when 
    COMMENT u32_pcnt_onx1000 is equal to DEC_100K.
    COMMENT Equivalence Class 15
    COMMENT
    COMMENT [hdudispfpwm-PwmLcdBackLightPcnt-DB-LLR-002]
    COMMENT The function 'PwmLcdBackLightPcnt' does nothing when 
    COMMENT u32_pcnt_onx1000 is equal to DEC_100K.
    COMMENT Equivalence Class 20
    COMMENT
    COMMENT [hdudispfpwm-PwmLcdBackLightPcnt-DB-LLR-003]
    COMMENT The function 'PwmLcdBackLightPcnt' sets target percentage to u32_pcnt_onx1000.  
    COMMENT Equivalence Class None
    COMMENT
    COMMENT[hdudispfpwm-PwmLcdBackLightPcnt-DB-LLR-004]
    COMMENT The function 'PwmLcdBackLightPcnt' does nothing when 
    COMMENT a) Return value of macro ABS with target percentage value subtracted by percentage 
    COMMENT    counter as parameter is equal to ZERO
    COMMENT Equivalence Class 22
    COMMENT
    COMMENT [hdudispfpwm-PwmLcdBackLightPcnt-DB-LLR-007]
    COMMENT The function 'PwmLcdBackLightPcnt' sets percentage counter value with sum of percentage
    COMMENT counter and temp variable.  
    COMMENT Equivalence Class None 
    COMMENT 
    COMMENT [hdudispfpwm-PwmLcdBackLightPcnt-DB-LLR-008]
    COMMENT The function 'PwmLcdBackLightPcnt' sets timer2 duty with DEC_500 and timer12 duty with percentage 
    COMMENT counter value when percentage counter is not greater than TIM2_PERIOD.  
    COMMENT Equivalence Class None 
    COMMENT
    COMMENT [hdudispfpwm-PwmLcdBackLightPcnt-DB-LLR-009]
    COMMENT The function 'PwmLcdBackLightPcnt' sets register CCR3 of TIM2 with timer12 duty and 
    COMMENT register CCR4 of TIM5 with timer2 duty,if Back_light is equal to 1
    COMMENT Equivalence Class :66 
    COMMENT </TD>    
    
    ELEMENT
    
        COMMENT INPUT SECTION:
        
			VAR Back_light,					init = 1,					ev = init 

            --Holds the brightness mode
            VAR Brightness_mode,            init = EBRIGHTNESS_MANUAL,  ev = init
            --Holds the manual brightness value
            VAR Manual_brightness,          init = 10000,                ev = init   
                   
        COMMENT INPUT/OUTPUT SECTION:
            -- Variable of function PwmLcdBackLightPcnt
            -- desired duty percent x 1000 is initialized
            VAR u32_pcnt_onx1000,           init = DEC_100K,            ev = init 
            -- Holds value of TIM capture/compare register 3      
            VAR TIM2->CCR3,                 init = DEC_100K,            ev = 10000
            -- Holds value of TIM capture/compare register 4
            VAR TIM5->CCR4,                 init = DEC_100K,            ev = 5000    
        
        COMMENT OUTPUT SECTION:
            --None 
        
        --Stub Calls:
        SIMUL   
            --None  
        
        END SIMUL
        
        -- Calling the Unit Under Test:
        #PwmBackLightStepTo(new_auto_brightness);
         -- Calling to verify the output of static variable "S32_present_pcnt1"
        #PwmLcdBackLightPcnt(u32_pcnt_onx1000);
        
    END ELEMENT

END TEST -- TEST 1

TEST 2
FAMILY nominal   
    
    COMMENT Test Description
    COMMENT <TD>
    COMMENT [hdudispfpwm-PwmBackLightStepTo-DB-LLR-001]
    COMMENT The function 'PwmBackLightStepTo' sets percentage variable to Manual_brightness multiplied 
    COMMENT by TEN when EBRIGHTNESS_MANUAL is equal to Brightness_mode
    COMMENT Equivalence Class 50
    COMMENT
    COMMENT [hdudispfpwm-PwmBackLightStepTo-DB-LLR-003]
    COMMENT The function 'PwmBackLightStepTo' does nothing when is
    COMMENT percentage variable is less than DEC_100K
    COMMENT Equivalence Class 53
    COMMENT
    COMMENT </TD>    
    
    ELEMENT
    
        COMMENT INPUT SECTION:
            --Holds the brightness mode
            VAR Brightness_mode,            init = EBRIGHTNESS_MANUAL,  ev = init
            --Holds the manual brightness value
            VAR Manual_brightness,          init = 9999,                 ev = init   
                   
        COMMENT INPUT/OUTPUT SECTION: 
            -- Variable of function PwmLcdBackLightPcnt
            VAR u32_pcnt_onx1000,           init = 99990,                ev = init  
            -- Holds value of TIM capture/compare register 3     
            VAR TIM2->CCR3,                 init = DEC_100K,            ev = TIM2_PERIOD
            -- Holds value of TIM capture/compare register 4
            VAR TIM5->CCR4,                 init = DEC_100K,            ev = 4999    
        
        COMMENT OUTPUT SECTION:
            --None 
        
        --Stub Calls:
        SIMUL   
            --None  
        
        END SIMUL
        
        -- Calling the Unit Under Test:
        #PwmBackLightStepTo(new_auto_brightness);
         -- Calling to verify the output of static variable "S32_present_pcnt1"
        #PwmLcdBackLightPcnt(u32_pcnt_onx1000);
        
    END ELEMENT

END TEST -- TEST 2

TEST 3
FAMILY nominal   
    
    COMMENT Test Description
    COMMENT <TD>
    COMMENT [hdudispfpwm-PwmBackLightStepTo-DB-LLR-001]
    COMMENT The function 'PwmBackLightStepTo' sets percentage variable to Manual_brightness multiplied 
    COMMENT by TEN when EBRIGHTNESS_MANUAL is equal to Brightness_mode
    COMMENT Equivalence Class 50
    COMMENT
    COMMENT [hdudispfpwm-PwmBackLightStepTo-DB-LLR-003]
    COMMENT The function 'PwmBackLightStepTo' sets percentage variable with TIM2_PERIOD 
    COMMENT when percentage variable is greater than DEC_100K
    COMMENT Equivalence Class 54
    COMMENT
    COMMENT </TD>    
    
    ELEMENT
    
        COMMENT INPUT SECTION:
            --Holds the brightness mode
            VAR Brightness_mode,            init = EBRIGHTNESS_MANUAL,      ev = init
            --Holds the manual brightness value
            VAR Manual_brightness,          init = 10001,                    ev = init   
                   
        COMMENT INPUT/OUTPUT SECTION: 
            -- Variable of function PwmLcdBackLightPcnt
            VAR u32_pcnt_onx1000,           init = 100001,               ev = init  
            -- Holds value of TIM capture/compare register 3     
            VAR TIM2->CCR3,                 init = DEC_100K,            ev = 10000
            -- Holds value of TIM capture/compare register 4
            VAR TIM5->CCR4,                 init = DEC_100K,            ev = 5000

        COMMENT OUTPUT SECTION:
            --None 
        
        --Stub Calls:
        SIMUL   
            --None  
        
        END SIMUL
        
        -- Calling the Unit Under Test:
        #PwmBackLightStepTo(new_auto_brightness);
         -- Calling to verify the output of static variable "S32_present_pcnt1"
        #PwmLcdBackLightPcnt(u32_pcnt_onx1000);
        
    END ELEMENT

END TEST -- TEST 3

TEST 4
FAMILY nominal   
    
    COMMENT Test Description
    COMMENT <TD>
    COMMENT
    COMMENT [hdudispfpwm-PwmBackLightStepTo-DB-LLR-004]
    COMMENT The function 'PwmBackLightStepTo' does nothing when percentage variable  
    COMMENT percentage variable is equal to POINT_FIVE_PERCNT
    COMMENT Equivalence Class 55
    COMMENT
    COMMENT [hdudispfpwm-PwmBackLightStepTo-DB-LLR-005]
    COMMENT The function 'PwmBackLightStepTo' sets percentage counter with percentage variable.
    COMMENT Equivalence Class None
    COMMENT </TD>    
    
    ELEMENT
    
        COMMENT INPUT SECTION:
            --Holds the brightness mode
            VAR Brightness_mode,            init = EBRIGHTNESS_MANUAL,      ev = init
            --Holds the manual brightness value
            VAR Manual_brightness,          init = 5,                       ev = init   
                   
        COMMENT INPUT/OUTPUT SECTION: 
            -- Variable of function PwmLcdBackLightPcnt
            VAR u32_pcnt_onx1000,           init = 50,                  ev = init  
            -- Holds value of TIM capture/compare register 3     
            VAR TIM2->CCR3,                 init = DEC_100K,            ev = 50
            -- Holds value of TIM capture/compare register 4
            VAR TIM5->CCR4,                 init = DEC_100K,            ev = DEC_500    
        
        COMMENT OUTPUT SECTION:
            --None 
        
        --Stub Calls:
        SIMUL   
            --None  
        
        END SIMUL
        
        -- Calling the Unit Under Test:
        #PwmBackLightStepTo(new_auto_brightness);
         -- Calling to verify the output of static variable "S32_present_pcnt1"
        #PwmLcdBackLightPcnt(u32_pcnt_onx1000);
        
    END ELEMENT

END TEST -- TEST 4

TEST 5
FAMILY nominal   
    
    COMMENT Test Description
    COMMENT <TD>
    COMMENT
    COMMENT [hdudispfpwm-PwmBackLightStepTo-DB-LLR-004]
    COMMENT The function 'PwmBackLightStepTo' percentage variable with POINT_FIVE_PERCNT 
    COMMENT when percentage variable is less than POINT_FIVE_PERCNT
    COMMENT Equivalence Class 56
    COMMENT </TD>    
    
    ELEMENT
    
        COMMENT INPUT SECTION:
            --Holds the brightness mode
            VAR Brightness_mode,            init = EBRIGHTNESS_MANUAL,      ev = init
            --Holds the manual brightness value
            VAR Manual_brightness,          init = 4,                       ev = init   
                   
        COMMENT INPUT/OUTPUT SECTION: 
            -- Variable of function PwmLcdBackLightPcnt
            VAR u32_pcnt_onx1000,           init = 40,                  ev = init  
            -- Holds value of TIM capture/compare register 3     
            VAR TIM2->CCR3,                 init = DEC_100K,            ev = 50
            -- Holds value of TIM capture/compare register 4
            VAR TIM5->CCR4,                 init = DEC_100K,            ev = DEC_500    
        
        COMMENT OUTPUT SECTION:
            --None 
        
        --Stub Calls:
        SIMUL   
            --None  
        
        END SIMUL
        
        -- Calling the Unit Under Test:
        #PwmBackLightStepTo(new_auto_brightness);
         -- Calling to verify the output of static variable "S32_present_pcnt1"
        #PwmLcdBackLightPcnt(u32_pcnt_onx1000);
        
    END ELEMENT

END TEST -- TEST 5

TEST 6
FAMILY nominal   

    COMMENT Test Description
    COMMENT <TD>
    COMMENT
    COMMENT [hdudispfpwm-PwmBackLightStepTo-DB-LLR-004]
    COMMENT The function 'PwmBackLightStepTo' does nothing when percentage variable  
    COMMENT percentage variable is greater than POINT_FIVE_PERCNT
    COMMENT Equivalence Class 57
    COMMENT </TD>    
    
    ELEMENT
    
        COMMENT INPUT SECTION:
            --Holds the brightness mode
            VAR Brightness_mode,            init = EBRIGHTNESS_MANUAL,      ev = init
            --Holds the manual brightness value
            VAR Manual_brightness,          init = 6,                       ev = init   
                   
        COMMENT INPUT/OUTPUT SECTION: 
            -- Variable of function PwmLcdBackLightPcnt
            VAR u32_pcnt_onx1000,           init = 60,                  ev = init    
            -- Holds value of TIM capture/compare register 3   
            VAR TIM2->CCR3,                 init = DEC_100K,            ev = 60
            -- Holds value of TIM capture/compare register 4
            VAR TIM5->CCR4,                 init = DEC_100K,            ev = DEC_500    

        COMMENT OUTPUT SECTION:
            --None 
        
        --Stub Calls:
        SIMUL   
            --None  
        
        END SIMUL
        
        -- Calling the Unit Under Test:
        #PwmBackLightStepTo(new_auto_brightness);
         -- Calling to verify the output of static variable "S32_present_pcnt1"
        #PwmLcdBackLightPcnt(u32_pcnt_onx1000);
        
    END ELEMENT

END TEST -- TEST 6

TEST 7
FAMILY nominal   
    
    COMMENT Test Description
    COMMENT <TD>
    COMMENT [hdudispfpwm-PwmBackLightStepTo-DB-LLR-002]
    COMMENT The function 'PwmBackLightStepTo' sets percentage variable with value (percentage counter multiplied 
    COMMENT with new_auto_brightness) divided by Auto_brightness and set Auto_brightness with new_auto_brightness 
    COMMENT when EBRIGHTNESS_MANUAL is not equal to Brightness_mode.
    COMMENT new_auto_brightness = minimum value
    COMMENT Auto_brightness     = nominal value
    COMMENT Equivalence Class 51
    COMMENT </TD>    
    
    ELEMENT
    
        COMMENT INPUT SECTION:
            --Holds the brightness mode
            VAR Brightness_mode,            init = EBRIGHTNESS_AUTO,        ev = init
            --Holds the manual brightness value
            VAR Manual_brightness,          init = 6,                       ev = init  
            --Holds the new auto brightness value
            VAR new_auto_brightness,        init = PTU_int16_min,           ev = init 
            --Holds the auto brightness value
            VAR Auto_brightness,            init = 102,                     ev = PTU_int16_min 
                   
        COMMENT INPUT/OUTPUT SECTION:
            --None
        
        COMMENT OUTPUT SECTION:
            --None 
        
        --Stub Calls:
        SIMUL   
            --None  
        
        END SIMUL
        
        -- Calling the Unit Under Test:
        #PwmBackLightStepTo(new_auto_brightness);
        
    END ELEMENT

END TEST -- TEST 7

TEST 8
FAMILY nominal   

    COMMENT Test Description
    COMMENT <TD>
    COMMENT [hdudispfpwm-PwmBackLightStepTo-DB-LLR-002]
    COMMENT The function 'PwmBackLightStepTo' sets percentage variable with value (percentage counter multiplied 
    COMMENT with new_auto_brightness) divided by Auto_brightness and set Auto_brightness with new_auto_brightness 
    COMMENT when EBRIGHTNESS_MANUAL is not equal to Brightness_mode.
    COMMENT new_auto_brightness = nominal value
    COMMENT Auto_brightness     = maximum value
    COMMENT </TD>    
    
    ELEMENT
    
        COMMENT INPUT SECTION:
            --Holds the brightness mode
            VAR Brightness_mode,            init = EBRIGHTNESS_AUTO,        ev = init
            --Holds the manual brightness value
            VAR Manual_brightness,          init = 6,                       ev = init   
            --Holds the new auto brightness value 
            VAR new_auto_brightness,        init = 1578,                    ev = init 
            --Holds the auto brightness value
            VAR Auto_brightness,            init = (T_INT16)32767,          ev = 1578 
                   
        COMMENT INPUT/OUTPUT SECTION: 
            --None    
        
        COMMENT OUTPUT SECTION:
            --None 
        
        --Stub Calls:
        SIMUL   
            --None  
        
        END SIMUL
        
        -- Calling the Unit Under Test:
        #PwmBackLightStepTo(new_auto_brightness);
        
    END ELEMENT

END TEST -- TEST 8

TEST 9
FAMILY nominal   
    
    COMMENT Test Description
    COMMENT <TD>
    COMMENT [hdudispfpwm-PwmBackLightStepTo-DB-LLR-002]
    COMMENT The function 'PwmBackLightStepTo' sets percentage variable with value (percentage counter multiplied 
    COMMENT with new_auto_brightness) divided by Auto_brightness and set Auto_brightness with new_auto_brightness 
    COMMENT when EBRIGHTNESS_MANUAL is not equal to Brightness_mode.
    COMMENT new_auto_brightness = maximum value
    COMMENT Auto_brightness     = minimum value
    COMMENT Equivalence Class 51
    COMMENT </TD>    
    
    ELEMENT
    
        COMMENT INPUT SECTION:
            --Holds the brightness mode
            VAR Brightness_mode,            init = EBRIGHTNESS_AUTO,        ev = init
            --Holds the manual brightness value
            VAR Manual_brightness,          init = 6,                       ev = init   
            --Holds the new auto brightness value 
            VAR new_auto_brightness,        init = (T_INT16)32767,          ev = init 
            --Holds the auto brightness value
            VAR Auto_brightness,            init = (T_INT16)-32768,         ev = (T_INT16)32767 
                   
        COMMENT INPUT/OUTPUT SECTION:
            --None    
        
        COMMENT OUTPUT SECTION:
            --None 
        
        --Stub Calls:
        SIMUL   
            --None  
        
        END SIMUL
        
        -- Calling the Unit Under Test:
        #PwmBackLightStepTo(new_auto_brightness);
        
    END ELEMENT

END TEST -- TEST 9

-- TEST 10
-- FAMILY nominal   
--    
--    COMMENT Test Description
--    COMMENT <TD>
--    COMMENT [hdudispfpwm-PwmBackLightStepTo-DB-LLR-002]
--    COMMENT The function 'PwmBackLightStepTo' sets percentage variable with value (percentage counter multiplied 
--    COMMENT with new_auto_brightness) divided by Auto_brightness and set Auto_brightness with new_auto_brightness 
--    COMMENT when EBRIGHTNESS_MANUAL is not equal to Brightness_mode.
--    COMMENT new_auto_brightness = maximum value
--    COMMENT Auto_brightness     = 0 value
--    COMMENT Equivalence Class 51
--    COMMENT </TD>    
--    
--    ELEMENT
--    
--        COMMENT INPUT SECTION:
--            --Holds the brightness mode
--            VAR Brightness_mode,            init = EBRIGHTNESS_AUTO,        ev = init
--            --Holds the manual brightness value
--            VAR Manual_brightness,          init = 6,                       ev = init  
--            --Holds the new auto brightness value  
--            VAR new_auto_brightness,        init = 32768,                   ev = init
--            --Holds the auto brightness value 
--            VAR Auto_brightness,            init = 0,                       ev = 32768 
--                   
--        COMMENT INPUT/OUTPUT SECTION: 
--            --None   
--        
--        COMMENT OUTPUT SECTION:
--            --None 
--        
--        --Stub Calls:
--        SIMUL   
--            --None  
--        
--        END SIMUL
--        
--        -- Calling the Unit Under Test:
--        #PwmBackLightStepTo(new_auto_brightness);
--        
--    END ELEMENT
--
--END TEST -- TEST 10

END SERVICE -- PwmBackLightStepTo


--------------------------------------------------------------------------------
-- Declaration of the service PwmBackLightNewMode
--------------------------------------------------------------------------------
SERVICE PwmBackLightNewMode
SERVICE_TYPE extern
    
    -- Tested service parameters declarations
    #T_INT16 new_auto_brightness;
    #T_UINT32 u32_pcnt_onx1000 ;

    ENVIRONMENT ENV_PwmBackLightNewMode
        VAR u32_pcnt_onx1000,           init = 0,       ev = init
        VAR new_auto_brightness,        init = 0,       ev = init
    END ENVIRONMENT -- ENV_PwmBackLightNewMode
    USE ENV_PwmBackLightNewMode

    TEST 1
    FAMILY nominal

    COMMENT Test Description
    COMMENT <TD>
    COMMENT [hdudispfpwm-PwmBackLightNewMode-DB-LLR-001]
    COMMENT The function 'PwmBackLightNewMode' does the following when Brightness_mode is equal EBRIGHTNESS_AUTO.
    COMMENT a)  Sets percentage variable to return value of function LookupTableLookup 
    COMMENT     with reference to Photo_table, S16_adc_reading with index 0 and reference of stat as parameters.
    COMMENT b)  Sets percentage variable to  percentage variable multiplied by new_auto_brightness
    COMMENT c)  Sets percentage variable to percentage variable divided by TEN.  
    COMMENT d)  Sets Auto_brightness to new_auto_brightness
    COMMENT Equivalence Class 58
    COMMENT
    COMMENT [hdudispfpwm-PwmBackLightNewMode-DB-LLR-002]
    COMMENT The function 'PwmBackLightNewMode' does not sets percentage variable with value TIM2_PERIOD when
    COMMENT percentage variable is not greater than DEC_100K (Equal to)
    COMMENT Equivalence Class 60
    COMMENT
    COMMENT [hdudispfpwm-PwmBackLightNewMode-DB-LLR-005]
    COMMENT The function 'PwmBackLightNewMode' sets S32_present_pcnt1 with percentage variable.
    COMMENT Equivalence Class None
    COMMENT </TD>
    
    ELEMENT
    
        COMMENT INPUT SECTION:  
            --Holds the auto brightness value
            VAR new_auto_brightness,        init = 10000,                   ev = init
            --Holds the brightness mode
            VAR Brightness_mode,            init = EBRIGHTNESS_AUTO,        ev = init  
            --Holds the adc reading
            VAR S16_adc_reading[0],         init = 32767,                   ev = init  
           
        COMMENT OUTPUT SECTION:
            --Holds the auto brightness value
            VAR Auto_brightness,            init = 1245,               ev = 10000 
            -- Verifies the value of parameter table of 'LookupTableLookup' function
            ARRAY PTU_x,                    init = {others=>10},        ev = {0 => 2,1 => 20, 2 => 2048, 3 => 4096}
            -- Verifies the value of parameter table of 'LookupTableLookup' function
            ARRAY PTU_y,                    init = {others=>10},        ev = {0 => 2,1 => 15, 2 => 10000}
            -- Verifies the value of parameter stat of 'LookupTableLookup' function
            VAR PTU_stat,                   init = NCD,                 ev = PARAM_OK
        
        COMMENT INPUT/OUTPUT SECTION: 
            -- desired duty percent x 1000 is initialized
            VAR u32_pcnt_onx1000,           init = DEC_100K,            ev = init    
            -- Holds value of TIM capture/compare register 3   
            VAR TIM2->CCR3,                 init = DEC_100K,            ev = 10000
            -- Holds value of TIM capture/compare register 4
            VAR TIM5->CCR4,                 init = DEC_100K,            ev = 570 
        
        --Stub Calls:
        SIMUL   
        
            STUB LookupTableLookup(32767)10
            
        END SIMUL
        
        -- Calling the Unit Under Test:
        #PwmBackLightNewMode(new_auto_brightness);
         -- Calling to verify the output of static variable "S32_present_pcnt1"
        #PwmLcdBackLightPcnt(u32_pcnt_onx1000);
    
    END ELEMENT

END TEST -- TEST 1

TEST 2
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD>
    COMMENT [hdudispfpwm-PwmBackLightNewMode-DB-LLR-001]
    COMMENT The function 'PwmBackLightNewMode' does the following when Brightness_mode is equal EBRIGHTNESS_AUTO.
    COMMENT a)  Sets percentage variable to return value of function LookupTableLookup 
    COMMENT     with reference to Photo_table, S16_adc_reading with index 0 and reference of stat as parameters.
    COMMENT b)  Sets percentage variable to  percentage variable multiplied by new_auto_brightness
    COMMENT c)  Sets percentage variable to percentage variable divided by TEN.  
    COMMENT d)  Sets Auto_brightness to new_auto_brightness
    COMMENT Equivalence Class 58
    COMMENT
    COMMENT [hdudispfpwm-PwmBackLightNewMode-DB-LLR-002]
    COMMENT The function 'PwmBackLightNewMode' does not sets percentage variable with value TIM2_PERIOD when
    COMMENT percentage variable is not greater than DEC_100K (Less than)
    COMMENT Equivalence Class 61
    COMMENT
    COMMENT [hdudispfpwm-PwmBackLightNewMode-DB-LLR-005]
    COMMENT The function 'PwmBackLightNewMode' sets S32_present_pcnt1 with percentage variable.
    COMMENT Equivalence Class None
    COMMENT </TD>
    
    ELEMENT
        COMMENT INPUT SECTION:  
            --Holds the auto brightness value
            VAR new_auto_brightness,        init = 9999,                    ev = init
            --Holds the brightness mode
            VAR Brightness_mode,            init = EBRIGHTNESS_AUTO,        ev = init 
            --Holds the adc reading 
            VAR S16_adc_reading[0],         init = 32767,                   ev = init  
           
        COMMENT OUTPUT SECTION:
            --Holds the auto brightness value
            VAR Auto_brightness,            init = 1254,                ev = 9999 
            -- Verifies the value of parameter table of 'LookupTableLookup' function
            ARRAY PTU_x,                    init = {others=>10},        ev = {0 => 2,1 => 20, 2 => 2048, 3 => 4096}
            -- Verifies the value of parameter table of 'LookupTableLookup' function
            ARRAY PTU_y,                    init = {others=>10},        ev = {0 => 2,1 => 15, 2 => 10000}
            -- Verifies the value of parameter stat of 'LookupTableLookup' function
            VAR PTU_stat,                   init = NCD,                 ev = PARAM_OK
        
        COMMENT INPUT/OUTPUT SECTION: 
            -- Variable of function PwmLcdBackLightPcnt
            -- desired duty percent x 1000 is initialized
            VAR u32_pcnt_onx1000,           init = DEC_100K - 1,        ev = init     
            -- Holds value of TIM capture/compare register 3  
            VAR TIM2->CCR3,                 init = DEC_100K,            ev = TIM2_PERIOD
            -- Holds value of TIM capture/compare register 4
            VAR TIM5->CCR4,                 init = DEC_100K,            ev = 570 
        
        --Stub Calls:
        SIMUL   
        
            STUB LookupTableLookup(32767)10
            
        END SIMUL
        
        -- Calling the Unit Under Test:
        #PwmBackLightNewMode(new_auto_brightness);
         -- Calling to verify the output of static variable "S32_present_pcnt1"
        #PwmLcdBackLightPcnt(u32_pcnt_onx1000);
    
    END ELEMENT

END TEST -- TEST 2

TEST 3
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD>
    COMMENT [hdudispfpwm-PwmBackLightNewMode-DB-LLR-001]
    COMMENT The function 'PwmBackLightNewMode' does the following when Brightness_mode is equal EBRIGHTNESS_AUTO.
    COMMENT a)  Sets percentage variable to return value of function LookupTableLookup 
    COMMENT     with reference to Photo_table, S16_adc_reading with index 0 and reference of stat as parameters.
    COMMENT b)  Sets percentage variable to  percentage variable multiplied by new_auto_brightness
    COMMENT c)  Sets percentage variable to percentage variable divided by TEN.  
    COMMENT d)  Sets Auto_brightness to new_auto_brightness
    COMMENT Equivalence Class 58
    COMMENT
    COMMENT [hdudispfpwm-PwmBackLightNewMode-DB-LLR-002]
    COMMENT The function 'PwmBackLightNewMode' sets percentage variable with value TIM2_PERIOD when
    COMMENT percentage variable is greater than DEC_100K 
    COMMENT Equivalence Class 62
    COMMENT
    COMMENT [hdudispfpwm-PwmBackLightNewMode-DB-LLR-005]
    COMMENT The function 'PwmBackLightNewMode' sets S32_present_pcnt1 with percentage variable.
    COMMENT Equivalence Class None
    COMMENT </TD>
    
    ELEMENT
        COMMENT INPUT SECTION:  
            --Holds the auto brightness value
            VAR new_auto_brightness,        init = 10001,                   ev = init
            --Holds the brightness mode
            VAR Brightness_mode,            init = EBRIGHTNESS_AUTO,        ev = init 
            --Holds the adc reading 
            VAR S16_adc_reading[0],         init = 32767,                   ev = init  
           
        COMMENT OUTPUT SECTION:
            --Holds the auto brightness value
            VAR Auto_brightness,            init = 1254,                ev = 10001 
            -- Verifies the value of parameter table of 'LookupTableLookup' function
            ARRAY PTU_x,                    init = {others=>10},        ev = {0 => 2,1 => 20, 2 => 2048, 3 => 4096}
            -- Verifies the value of parameter table of 'LookupTableLookup' function
            ARRAY PTU_y,                    init = {others=>10},        ev = {0 => 2,1 => 15, 2 => 10000}
            -- Verifies the value of parameter stat of 'LookupTableLookup' function
            VAR PTU_stat,                   init = NCD,                 ev = PARAM_OK
        
        COMMENT INPUT/OUTPUT SECTION: 
            -- Variable of function PwmLcdBackLightPcnt
            -- desired duty percent x 1000 is initialized
            VAR u32_pcnt_onx1000,           init = DEC_100K + 1,        ev = init    
            -- Holds value of TIM capture/compare register 3   
            VAR TIM2->CCR3,                 init = DEC_100K,            ev = TIM2_PERIOD
            -- Holds value of TIM capture/compare register 4
            VAR TIM5->CCR4,                 init = DEC_100K,            ev = 570 
        
        --Stub Calls:
        SIMUL   
        
            STUB LookupTableLookup(32767)10
            
        END SIMUL
        
        -- Calling the Unit Under Test:
        #PwmBackLightNewMode(new_auto_brightness);
         -- Calling to verify the output of static variable "S32_present_pcnt1"
        #PwmLcdBackLightPcnt(u32_pcnt_onx1000);
    
    END ELEMENT

END TEST -- TEST 3

TEST 4
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD>
    COMMENT [hdudispfpwm-PwmBackLightNewMode-DB-LLR-001]
    COMMENT The function 'PwmBackLightNewMode' does the following when Brightness_mode is equal EBRIGHTNESS_AUTO.
    COMMENT a)  Sets percentage variable to return value of function LookupTableLookup 
    COMMENT     with reference to Photo_table, S16_adc_reading with index 0 and reference of stat as parameters.
    COMMENT b)  Sets percentage variable to  percentage variable multiplied by new_auto_brightness
    COMMENT c)  Sets percentage variable to percentage variable divided by TEN.  
    COMMENT d)  Sets Auto_brightness to new_auto_brightness
    COMMENT Equivalence Class 58
    COMMENT
    COMMENT [hdudispfpwm-PwmBackLightNewMode-DB-LLR-003]
    COMMENT The function 'PwmBackLightNewMode' does not sets percentage variable with POINT_FIVE_PERCNT when
    COMMENT percentage variable is not lesser than POINT_FIVE_PERCNT (Equal to)
    COMMENT Equivalence Class 63
    COMMENT
    COMMENT [hdudispfpwm-PwmBackLightNewMode-DB-LLR-005]
    COMMENT The function 'PwmBackLightNewMode' sets S32_present_pcnt1 with percentage variable.
    COMMENT Equivalence Class None
    COMMENT </TD>
    
    ELEMENT
        COMMENT INPUT SECTION:  
            --Holds the auto brightness value
            VAR new_auto_brightness,        init = 50,                      ev = init
            --Holds the brightness mode
            VAR Brightness_mode,            init = EBRIGHTNESS_AUTO,        ev = init 
            --Holds the adc reading 
            VAR S16_adc_reading[0],         init = 32767,                   ev = init  
           
        COMMENT OUTPUT SECTION:
            --Holds the auto brightness value
            VAR Auto_brightness,            init = 1254,                ev = 50 
            -- Verifies the value of parameter table of 'LookupTableLookup' function
            ARRAY PTU_x,                    init = {others=>10},        ev = {0 => 2,1 => 20, 2 => 2048, 3 => 4096}
            -- Verifies the value of parameter table of 'LookupTableLookup' function
            ARRAY PTU_y,                    init = {others=>10},        ev = {0 => 2,1 => 15, 2 => 10000}
            -- Verifies the value of parameter stat of 'LookupTableLookup' function
            VAR PTU_stat,                   init = NCD,                 ev = PARAM_OK
        
        COMMENT INPUT/OUTPUT SECTION: 
            -- Variable of function PwmLcdBackLightPcnt
            -- desired duty percent x 1000 is initialized
            VAR u32_pcnt_onx1000,       init = 50,                  ev = init       
            -- Holds value of TIM capture/compare register 3
            VAR TIM2->CCR3,                 init = DEC_100K,            ev = 50
            -- Holds value of TIM capture/compare register 4
            VAR TIM5->CCR4,                 init = DEC_100K,            ev = DEC_500 
        
        --Stub Calls:
        SIMUL   
        
            STUB LookupTableLookup(32767)10
            
        END SIMUL
        
        -- Calling the Unit Under Test:
        #PwmBackLightNewMode(new_auto_brightness);
         -- Calling to verify the output of static variable "S32_present_pcnt1"
        #PwmLcdBackLightPcnt(u32_pcnt_onx1000);
    
    END ELEMENT

END TEST -- TEST 4

TEST 5
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD>
    COMMENT [hdudispfpwm-PwmBackLightNewMode-DB-LLR-001]
    COMMENT The function 'PwmBackLightNewMode' does the following when Brightness_mode is equal EBRIGHTNESS_AUTO.
    COMMENT a)  Sets percentage variable to return value of function LookupTableLookup 
    COMMENT     with reference to Photo_table, S16_adc_reading with index 0 and reference of stat as parameters.
    COMMENT b)  Sets percentage variable to  percentage variable multiplied by new_auto_brightness
    COMMENT c)  Sets percentage variable to percentage variable divided by TEN.  
    COMMENT d)  Sets Auto_brightness to new_auto_brightness
    COMMENT Equivalence Class 58
    COMMENT
    COMMENT [hdudispfpwm-PwmBackLightNewMode-DB-LLR-003]
    COMMENT The function 'PwmBackLightNewMode' sets percentage variable with POINT_FIVE_PERCNT when
    COMMENT percentage variable is lesser than POINT_FIVE_PERCNT 
    COMMENT Equivalence Class 64
    COMMENT
    COMMENT [hdudispfpwm-PwmBackLightNewMode-DB-LLR-005]
    COMMENT The function 'PwmBackLightNewMode' sets S32_present_pcnt1 with percentage variable.
    COMMENT Equivalence Class None
    COMMENT </TD>
    
    ELEMENT
        COMMENT INPUT SECTION:  
            --Holds the auto brightness value
            VAR new_auto_brightness,        init = 49,                      ev = init
            --Holds the brightness mode
            VAR Brightness_mode,            init = EBRIGHTNESS_AUTO,        ev = init 
            --Holds the adc reading 
            VAR S16_adc_reading[0],         init = 32767,                   ev = init  
           
        COMMENT OUTPUT SECTION:
            --Holds the auto brightness value
            VAR Auto_brightness,            init = 1254,                ev = 49 
            -- Verifies the value of parameter table of 'LookupTableLookup' function
            ARRAY PTU_x,                    init = {others=>10},        ev = {0 => 2,1 => 20, 2 => 2048, 3 => 4096}
            -- Verifies the value of parameter table of 'LookupTableLookup' function
            ARRAY PTU_y,                    init = {others=>10},        ev = {0 => 2,1 => 15, 2 => 10000}
            -- Verifies the value of parameter stat of 'LookupTableLookup' function
            VAR PTU_stat,                   init = NCD,                 ev = PARAM_OK

        COMMENT INPUT/OUTPUT SECTION: 
            -- Variable of function PwmLcdBackLightPcnt
            -- desired duty percent x 1000 is initialized
            VAR u32_pcnt_onx1000,           init = 49,                  ev = init    
            -- Holds value of TIM capture/compare register 3   
            VAR TIM2->CCR3,                 init = DEC_100K,            ev = 50
            -- Holds value of TIM capture/compare register 4
            VAR TIM5->CCR4,                 init = DEC_100K,            ev = DEC_500 
        
        --Stub Calls:
        SIMUL   
        
            STUB LookupTableLookup(32767)10
            
        END SIMUL
        
        -- Calling the Unit Under Test:
        #PwmBackLightNewMode(new_auto_brightness);
         -- Calling to verify the output of static variable "S32_present_pcnt1"
        #PwmLcdBackLightPcnt(u32_pcnt_onx1000);
    
    END ELEMENT

END TEST -- TEST 5

TEST 6
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD>
    COMMENT [hdudispfpwm-PwmBackLightNewMode-DB-LLR-001]
    COMMENT The function 'PwmBackLightNewMode' does the following when Brightness_mode is equal EBRIGHTNESS_AUTO.
    COMMENT a)  Sets percentage variable to return value of function LookupTableLookup 
    COMMENT     with reference to Photo_table, S16_adc_reading with index 0 and reference of stat as parameters.
    COMMENT b)  Sets percentage variable to  percentage variable multiplied by new_auto_brightness
    COMMENT c)  Sets percentage variable to percentage variable divided by TEN.  
    COMMENT d)  Sets Auto_brightness to new_auto_brightness
    COMMENT Equivalence Class 58
    COMMENT
    COMMENT [hdudispfpwm-PwmBackLightNewMode-DB-LLR-003]
    COMMENT The function 'PwmBackLightNewMode' does not sets percentage variable with POINT_FIVE_PERCNT when
    COMMENT percentage variable is not lesser than POINT_FIVE_PERCNT (greater than)
    COMMENT Equivalence Class 65
    COMMENT
    COMMENT [hdudispfpwm-PwmBackLightNewMode-DB-LLR-005]
    COMMENT The function 'PwmBackLightNewMode' sets S32_present_pcnt1 with percentage variable.
    COMMENT Equivalence Class None
    COMMENT </TD>
    
    ELEMENT
        COMMENT INPUT SECTION:  
            --Holds the auto brightness value
            VAR new_auto_brightness,        init = 51,                      ev = init
            --Holds the brightness mode
            VAR Brightness_mode,            init = EBRIGHTNESS_AUTO,        ev = init 
            --Holds the adc reading 
            VAR S16_adc_reading[0],         init = 32767,                   ev = init  
           
        COMMENT OUTPUT SECTION:
            --Holds the auto brightness value
            VAR Auto_brightness,            init = 1254,                ev = 51 
            -- Verifies the value of parameter table of 'LookupTableLookup' function
            ARRAY PTU_x,                    init = {others=>10},        ev = {0 => 2,1 => 20, 2 => 2048, 3 => 4096}
            -- Verifies the value of parameter table of 'LookupTableLookup' function
            ARRAY PTU_y,                    init = {others=>10},        ev = {0 => 2,1 => 15, 2 => 10000}
            -- Verifies the value of parameter stat of 'LookupTableLookup' function
            VAR PTU_stat,                   init = NCD,                 ev = PARAM_OK
        
        COMMENT INPUT/OUTPUT SECTION: 
            -- Variable of function PwmLcdBackLightPcnt
            -- desired duty percent x 1000 is initialized
            VAR u32_pcnt_onx1000,           init = 51,                  ev = init    
            -- Holds value of TIM capture/compare register 3   
            VAR TIM2->CCR3,                 init = DEC_100K,            ev = 51
            -- Holds value of TIM capture/compare register 4
            VAR TIM5->CCR4,                 init = DEC_100K,            ev = DEC_500 
        
        --Stub Calls:
        SIMUL   
        
            STUB LookupTableLookup(32767)10
            
        END SIMUL
        
        -- Calling the Unit Under Test:
        #PwmBackLightNewMode(new_auto_brightness);
         -- Calling to verify the output of static variable "S32_present_pcnt1"
        #PwmLcdBackLightPcnt(u32_pcnt_onx1000);
    
    END ELEMENT

END TEST -- TEST 6

TEST 10
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD>
    COMMENT [hdudispfpwm-PwmBackLightNewMode-DB-LLR-001]
    COMMENT The function 'PwmBackLightNewMode' does the following when Brightness_mode is equal EBRIGHTNESS_AUTO.
    COMMENT a)  Sets percentage variable to return value of function LookupTableLookup 
    COMMENT     with reference to Photo_table, S16_adc_reading with index 0 and reference of stat as parameters.
    COMMENT b)  Sets percentage variable to  percentage variable multiplied by new_auto_brightness (minimum value)
    COMMENT c)  Sets percentage variable to percentage variable divided by TEN.  
    COMMENT d)  Sets Auto_brightness to new_auto_brightness
    COMMENT Equivalence Class 58
    COMMENT
    COMMENT [hdudispfpwm-PwmBackLightNewMode-DB-LLR-003]
    COMMENT The function 'PwmBackLightNewMode' does not sets percentage variable with POINT_FIVE_PERCNT when
    COMMENT percentage variable is not lesser than POINT_FIVE_PERCNT (greater than)
    COMMENT Equivalence Class 65
    COMMENT
    COMMENT [hdudispfpwm-PwmBackLightNewMode-DB-LLR-005]
    COMMENT The function 'PwmBackLightNewMode' sets S32_present_pcnt1 with percentage variable.
    COMMENT Equivalence Class None
    COMMENT </TD>
    
    ELEMENT
    
        COMMENT INPUT SECTION:  
            --Holds the auto brightness value
            VAR new_auto_brightness,        init = PTU_int16_min,           ev = init
            --Holds the brightness mode
            VAR Brightness_mode,            init = EBRIGHTNESS_AUTO,        ev = init 
            --Holds the adc reading 
            VAR S16_adc_reading[0],         init = 32767,                   ev = init  
           
        COMMENT OUTPUT SECTION:
            --Holds the auto brightness value
            VAR Auto_brightness,            init = 1254,                ev = PTU_int16_min 
            -- Verifies the value of parameter table of 'LookupTableLookup' function
            ARRAY PTU_x,                    init = {others=>10},        ev = {0 => 2,1 => 20, 2 => 2048, 3 => 4096}
            -- Verifies the value of parameter table of 'LookupTableLookup' function
            ARRAY PTU_y,                    init = {others=>10},        ev = {0 => 2,1 => 15, 2 => 10000}
            -- Verifies the value of parameter stat of 'LookupTableLookup' function
            VAR PTU_stat,                   init = NCD,                 ev = PARAM_OK
        
        COMMENT INPUT/OUTPUT SECTION: 
            -- Variable of function PwmLcdBackLightPcnt
            -- desired duty percent x 1000 is initialized
            VAR u32_pcnt_onx1000,           init = 51,                  ev = init    
            -- Holds value of TIM capture/compare register 3   
            VAR TIM2->CCR3,                 init = DEC_100K,            ev = TIM2_PERIOD
            -- Holds value of TIM capture/compare register 4
            VAR TIM5->CCR4,                 init = DEC_100K,            ev = 4921 
        
        --Stub Calls:
        SIMUL   
        
            STUB LookupTableLookup(32767)PTU_int16_min
            
        END SIMUL
        
        -- Calling the Unit Under Test:
        #PwmBackLightNewMode(new_auto_brightness);
         -- Calling to verify the output of static variable "S32_present_pcnt1"
        #PwmLcdBackLightPcnt(u32_pcnt_onx1000);
    
    END ELEMENT

END TEST -- TEST 10

TEST 11
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD>
    COMMENT [hdudispfpwm-PwmBackLightNewMode-DB-LLR-001]
    COMMENT The function 'PwmBackLightNewMode' does the following when Brightness_mode is equal EBRIGHTNESS_AUTO.
    COMMENT a)  Sets percentage variable to return value of function LookupTableLookup 
    COMMENT     with reference to Photo_table, S16_adc_reading with index 0 and reference of stat as parameters.
    COMMENT b)  Sets percentage variable to  percentage variable multiplied by new_auto_brightness (maximum value)
    COMMENT c)  Sets percentage variable to percentage variable divided by TEN.  
    COMMENT d)  Sets Auto_brightness to new_auto_brightness
    COMMENT Equivalence Class 58
    COMMENT
    COMMENT [hdudispfpwm-PwmBackLightNewMode-DB-LLR-003]
    COMMENT The function 'PwmBackLightNewMode' does not sets percentage variable with POINT_FIVE_PERCNT when
    COMMENT percentage variable is not lesser than POINT_FIVE_PERCNT (greater than)
    COMMENT Equivalence Class 65
    COMMENT
    COMMENT [hdudispfpwm-PwmBackLightNewMode-DB-LLR-005]
    COMMENT The function 'PwmBackLightNewMode' sets S32_present_pcnt1 with percentage variable.
    COMMENT Equivalence Class None
    COMMENT </TD>
    
    ELEMENT
    
        COMMENT INPUT SECTION:  
            --Holds the auto brightness value
            VAR new_auto_brightness,        init = 32767,                  ev = init
            --Holds the brightness mode
            VAR Brightness_mode,            init = EBRIGHTNESS_AUTO,        ev = init 
            --Holds the adc reading 
            VAR S16_adc_reading[0],         init = 32767,                   ev = init  
           
        COMMENT OUTPUT SECTION:
            --Holds the auto brightness value
            VAR Auto_brightness,            init = 1254,                ev = 32767 
            -- Verifies the value of parameter table of 'LookupTableLookup' function
            ARRAY PTU_x,                    init = {others=>10},        ev = {0 => 2,1 => 20, 2 => 2048, 3 => 4096}
            -- Verifies the value of parameter table of 'LookupTableLookup' function
            ARRAY PTU_y,                    init = {others=>10},        ev = {0 => 2,1 => 15, 2 => 10000}
            -- Verifies the value of parameter stat of 'LookupTableLookup' function
            VAR PTU_stat,                   init = NCD,                 ev = PARAM_OK
        
        COMMENT INPUT/OUTPUT SECTION: 
            -- Variable of function PwmLcdBackLightPcnt
            -- desired duty percent x 1000 is initialized
            VAR u32_pcnt_onx1000,           init = 51,                  ev = init    
            -- Holds value of TIM capture/compare register 3   
            VAR TIM2->CCR3,                 init = DEC_100K,            ev = TIM2_PERIOD
            -- Holds value of TIM capture/compare register 4
            VAR TIM5->CCR4,                 init = DEC_100K,            ev = 4921 
        
        --Stub Calls:
        SIMUL   
        
            STUB LookupTableLookup(32767)32767
            
        END SIMUL
        
        -- Calling the Unit Under Test:
        #PwmBackLightNewMode(new_auto_brightness);
         -- Calling to verify the output of static variable "S32_present_pcnt1"
        #PwmLcdBackLightPcnt(u32_pcnt_onx1000);
    
    END ELEMENT

END TEST -- TEST 11

TEST 7
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD>
    COMMENT [hdudispfpwm-PwmBackLightNewMode-DB-LLR-004]
    COMMENT The function 'PwmBackLightNewMode' sets percentage variable with Manual_brightness (minimum value)
    COMMENT multiplied with TEN when Brightness_mode is not equal EBRIGHTNESS_AUTO
    COMMENT Equivalence Class 59
    COMMENT
    COMMENT [hdudispfpwm-PwmBackLightNewMode-DB-LLR-005]
    COMMENT The function 'PwmBackLightNewMode' sets S32_present_pcnt1 with percentage variable.
    COMMENT Equivalence Class None
    COMMENT </TD>
    
    ELEMENT
    
        COMMENT INPUT SECTION:
            VAR Manual_brightness,          init = PTU_int16_min,                  ev = init
            --Holds the brightness mode
            VAR Brightness_mode,            init = EBRIGHTNESS_MANUAL,      ev = init 
           
        COMMENT OUTPUT SECTION:
            --None
        
        COMMENT INPUT/OUTPUT SECTION: 
            -- Variable of function PwmLcdBackLightPcnt
            -- desired duty percent x 1000 is initialized
            VAR u32_pcnt_onx1000,           init = 51,                  ev = init    
            -- Holds value of TIM capture/compare register 3   
            VAR TIM2->CCR3,                 init = DEC_100K,            ev = 5120
            -- Holds value of TIM capture/compare register 4
            VAR TIM5->CCR4,                 init = DEC_100K,            ev = DEC_500 

        --Stub Calls:
        SIMUL   
        
            --None
            
        END SIMUL
        
        -- Calling the Unit Under Test:
        #PwmBackLightNewMode(new_auto_brightness);
         -- Calling to verify the output of static variable "S32_present_pcnt1"
        #PwmLcdBackLightPcnt(u32_pcnt_onx1000);
    
    END ELEMENT

END TEST -- TEST 7

TEST 8
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD>
    COMMENT [hdudispfpwm-PwmBackLightNewMode-DB-LLR-004]
    COMMENT The function 'PwmBackLightNewMode' sets percentage variable with Manual_brightness (nominal value)
    COMMENT multiplied with TEN when Brightness_mode is not equal EBRIGHTNESS_AUTO
    COMMENT Equivalence Class 59
    COMMENT
    COMMENT [hdudispfpwm-PwmBackLightNewMode-DB-LLR-005]
    COMMENT The function 'PwmBackLightNewMode' sets S32_present_pcnt1 with percentage variable.
    COMMENT Equivalence Class None
    COMMENT </TD>
    
    ELEMENT
    
        COMMENT INPUT SECTION:
        
            VAR Manual_brightness,          init = 1579,                    ev = init
            --Holds the brightness mode
            VAR Brightness_mode,            init = EBRIGHTNESS_MANUAL,      ev = init 
           
        COMMENT OUTPUT SECTION:
            --None
        
        COMMENT INPUT/OUTPUT SECTION: 
            -- Variable of function PwmLcdBackLightPcnt
            -- desired duty percent x 1000 is initialized
            VAR u32_pcnt_onx1000,       init = 5120,                ev = init       
            -- Holds value of TIM capture/compare register 3
            VAR TIM2->CCR3,                 init = DEC_100K,            ev = 10000
            -- Holds value of TIM capture/compare register 4
            VAR TIM5->CCR4,                 init = DEC_100K,            ev = 781 
        
        --Stub Calls:
        SIMUL   
        
            --None
            
        END SIMUL
        
        -- Calling the Unit Under Test:
        #PwmBackLightNewMode(new_auto_brightness);
         -- Calling to verify the output of static variable "S32_present_pcnt1"
        #PwmLcdBackLightPcnt(u32_pcnt_onx1000);
    
    END ELEMENT

END TEST -- TEST 8

TEST 9
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD>
    COMMENT [hdudispfpwm-PwmBackLightNewMode-DB-LLR-004]
    COMMENT The function 'PwmBackLightNewMode' sets percentage variable with Manual_brightness (maximum value)
    COMMENT multiplied with TEN when Brightness_mode is not equal EBRIGHTNESS_AUTO
    COMMENT Equivalence Class 59
    COMMENT
    COMMENT [hdudispfpwm-PwmBackLightNewMode-DB-LLR-005]
    COMMENT The function 'PwmBackLightNewMode' sets S32_present_pcnt1 with percentage variable.
    COMMENT Equivalence Class None
    COMMENT </TD>
    
    ELEMENT
    
        COMMENT INPUT SECTION:
            VAR Manual_brightness,          init = 32767,                   ev = init
            --Holds the brightness mode
            VAR Brightness_mode,            init = EBRIGHTNESS_MANUAL,      ev = init 
           
        COMMENT OUTPUT SECTION:
            --None
        
        COMMENT INPUT/OUTPUT SECTION: 
            -- Variable of function PwmLcdBackLightPcnt
            -- desired duty percent x 1000 is initialized
            VAR u32_pcnt_onx1000,           init = 100,                 ev = init    
            -- Holds value of TIM capture/compare register 3   
            VAR TIM2->CCR3,                 init = DEC_100K,            ev = 10000
            -- Holds value of TIM capture/compare register 4
            VAR TIM5->CCR4,                 init = DEC_100K,            ev = 16127 
        
        --Stub Calls:
        SIMUL   
        
            --None
            
        END SIMUL
        
        -- Calling the Unit Under Test:
        #PwmBackLightNewMode(new_auto_brightness);
         -- Calling to verify the output of static variable "S32_present_pcnt1"
        #PwmLcdBackLightPcnt(u32_pcnt_onx1000);
    
    END ELEMENT

END TEST -- TEST 9

END SERVICE -- PwmBackLightNewMode


--------------------------------------------------------------------------------
-- Declaration of the service PwmLcdBezelLightPcnt
--------------------------------------------------------------------------------
SERVICE PwmLcdBezelLightPcnt
SERVICE_TYPE extern
   
    -- Tested service parameters declarations
    #T_UINT16 u16_pcnt_onx100;

      ENVIRONMENT ENV_PwmLcdBezelLightPcnt
    
        VAR u16_pcnt_onx100,        init = 0,       ev = init
    
     END ENVIRONMENT -- ENV_PwmLcdBezelLightPcnt
     USE ENV_PwmLcdBezelLightPcnt

TEST 1
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD>
    COMMENT [hdudispfpwm-PwmLcdBezelLightPcnt-DB-LLR-001]
    COMMENT The function 'PwmLcdBezelLightPcnt' does nothing
    COMMENT when u16_pcnt_onx100 is equal to TIM2_PERIOD.
    COMMENT Equivalence Class 32
    COMMENT
    COMMENT [hdudispfpwm-PwmLcdBezelLightPcnt-DB-LLR-002]
    COMMENT The function 'PwmLcdBezelLightPcnt' sets target percentage to u16_pcnt_onx100
    COMMENT Equivalence Class None
    COMMENT
    COMMENT [hdudispfpwm-PwmLcdBezelLightPcnt-DB-LLR-005]
    COMMENT The function 'PwmLcdBezelLightPcnt' sets temp variable to right shifted by FIVE value of  
    COMMENT target percentage value subtracted by percentage counter when following conditions are met,
    COMMENT a)  Return variable of macro ABS with target percentage value subtracted by percentage 
    COMMENT counter as parameter is not equal to ZERO
    COMMENT b)  temp variable  is greater than THIRTY_TWO     
    COMMENT Equivalence Class 35,39
    COMMENT
    COMMENT [hdudispfpwm-PwmLcdBezelLightPcnt-DB-LLR-006]
    COMMENT The function 'PwmLcdBezelLightPcnt' sets percentage counter with sum of percentage counter and temp variable  
    COMMENT Equivalence Class None
    COMMENT
    COMMENT [hdudispfpwm-PwmLcdBezelLightPcnt-DB-LLR-007]
    COMMENT The function 'PwmLcdBezelLightPcnt' sets register CCR1 of TIM3 with percentage counter
    COMMENT Equivalence Class None
    COMMENT </TD>  
    
    ELEMENT

        COMMENT INPUT SECTION:
        
            -- desired duty percent x 1000 is initialized
            VAR u16_pcnt_onx100,            init = TIM2_PERIOD,         ev = init
                    
        COMMENT OUTPUT SECTION:
        
            -- Holds value of TIM capture/compare register 1
            VAR TIM3->CCR1,                 init = DEC_100K,            ev = 312
        
        COMMENT INPUT/OUTPUT SECTION: 
            
            --None            
        
        --Stub Calls:
        SIMUL 
        
            --None  
        
        END SIMUL 
        
        -- Calling the Unit Under Test:
        #PwmLcdBezelLightPcnt(u16_pcnt_onx100);
        
END ELEMENT

END TEST -- TEST 1

TEST 2
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD>
    COMMENT [hdudispfpwm-PwmLcdBezelLightPcnt-DB-LLR-001]
    COMMENT The function 'PwmLcdBezelLightPcnt' does nothing
    COMMENT when u16_pcnt_onx100 is less than TIM2_PERIOD.
    COMMENT Equivalence Class 33
    COMMENT </TD>  
    
    ELEMENT

        COMMENT INPUT SECTION:
        
            -- desired duty percent x 1000 is initialized
            VAR u16_pcnt_onx100,            init = 9999,         ev = init
        
            
        COMMENT OUTPUT SECTION:
            
            -- Holds value of TIM capture/compare register 1
            VAR TIM3->CCR1,                 init = DEC_100K,            ev = 614
        
        COMMENT INPUT/OUTPUT SECTION: 
        
            --None   
        
        --Stub Calls:
        SIMUL  
            --None   
        
        END SIMUL 
        
        -- Calling the Unit Under Test:
        #PwmLcdBezelLightPcnt(u16_pcnt_onx100);
        
    END ELEMENT

END TEST -- TEST 2

TEST 3
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD>
    COMMENT [hdudispfpwm-PwmLcdBezelLightPcnt-DB-LLR-001]
    COMMENT The function 'PwmLcdBezelLightPcnt' sets u16_pcnt_onx100 to TIM2_PERIOD 
    COMMENT when u16_pcnt_onx100 is greater than TIM2_PERIOD. 
    COMMENT Equivalence Class 34
    COMMENT </TD>  
    
    ELEMENT

        COMMENT INPUT SECTION:
            
            -- desired duty percent x 1000 is initialized
            VAR u16_pcnt_onx100,            init = 10001,         ev = init
        
            
        COMMENT OUTPUT SECTION:
            
            -- Holds value of TIM capture/compare register 1
            VAR TIM3->CCR1,                 init = DEC_100K,            ev = 907
        
        COMMENT INPUT/OUTPUT SECTION: 
        
            --None   
        
        --Stub Calls:
        SIMUL 
        
            --None   
        
        END SIMUL 
        
        -- Calling the Unit Under Test:
        #PwmLcdBezelLightPcnt(u16_pcnt_onx100);
    END ELEMENT

END TEST -- TEST 3

TEST 4
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD>
    COMMENT [hdudispfpwm-PwmLcdBezelLightPcnt-DB-LLR-001]
    COMMENT The function 'PwmLcdBezelLightPcnt' does not set u16_pcnt_onx100 to TIM2_PERIOD 
    COMMENT when u16_pcnt_onx100 is equal to 907. 
    COMMENT Equivalence Class 34
    COMMENT
    COMMENT [hdudispfpwm-PwmLcdBezelLightPcnt-DB-LLR-002]
    COMMENT The function 'PwmLcdBezelLightPcnt' sets target percentage to u16_pcnt_onx100
    COMMENT Equivalence Class 5
    COMMENT
    COMMENT [hdudispfpwm-PwmLcdBezelLightPcnt-DB-LLR-005]
    COMMENT The function 'PwmLcdBezelLightPcnt' does nothing when following conditions are met,
    COMMENT a)  Return variable of macro ABS with target percentage value subtracted by percentage 
    COMMENT counter as parameter is equal to ZERO    
    COMMENT Equivalence Class 36
    COMMENT
    COMMENT [hdudispfpwm-PwmLcdBezelLightPcnt-DB-LLR-006]
    COMMENT The function 'PwmLcdBezelLightPcnt' sets percentage counter with sum of percentage counter and temp variable  
    COMMENT Equivalence Class None
    COMMENT
    COMMENT [hdudispfpwm-PwmLcdBezelLightPcnt-DB-LLR-007]
    COMMENT The function 'PwmLcdBezelLightPcnt' sets register CCR1 of TIM3 with percentage counter
    COMMENT Equivalence Class None
    COMMENT </TD>  
    
    ELEMENT

        COMMENT INPUT SECTION:
            
            -- desired duty percent x 1000 is initialized
            VAR u16_pcnt_onx100,        init = 907,         ev = init
        
            
        COMMENT OUTPUT SECTION:
            
            -- Holds value of TIM capture/compare register 1
            VAR TIM3->CCR1,                 init = DEC_100K,            ev = 907
        
        COMMENT INPUT/OUTPUT SECTION: 
        
            --None   
        
        --Stub Calls:
        SIMUL  
            --None   
        
        END SIMUL 
        
        -- Calling the Unit Under Test:
        #PwmLcdBezelLightPcnt(u16_pcnt_onx100);
        
END ELEMENT

END TEST -- TEST 4

TEST 5
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD>
    COMMENT [hdudispfpwm-PwmLcdBezelLightPcnt-DB-LLR-001]
    COMMENT The function 'PwmLcdBezelLightPcnt' does not set u16_pcnt_onx100 to TIM2_PERIOD 
    COMMENT when u16_pcnt_onx100 is greater than TIM2_PERIOD. 
    COMMENT Equivalence Class 34
    COMMENT
    COMMENT [hdudispfpwm-PwmLcdBezelLightPcnt-DB-LLR-002]
    COMMENT The function 'PwmLcdBezelLightPcnt' sets target percentage to u16_pcnt_onx100
    COMMENT Equivalence Class 5
    COMMENT
    COMMENT [hdudispfpwm-PwmLcdBezelLightPcnt-DB-LLR-005]
    COMMENT The function 'PwmLcdBezelLightPcnt' sets temp variable to right shifted by FIVE value of  
    COMMENT target percentage value subtracted by percentage counter when following conditions are met,
    COMMENT a)  Return variable of macro ABS with target percentage value subtracted by percentage 
    COMMENT counter as parameter is not equal to ZERO
    COMMENT b)  temp variable  is not less than THIRTY_TWO ( equal to 32)  
    COMMENT Equivalence Class 37
    COMMENT
    COMMENT [hdudispfpwm-PwmLcdBezelLightPcnt-DB-LLR-006]
    COMMENT The function 'PwmLcdBezelLightPcnt' sets percentage counter with sum of percentage counter and temp variable  
    COMMENT Equivalence Class None
    COMMENT
    COMMENT [hdudispfpwm-PwmLcdBezelLightPcnt-DB-LLR-007]
    COMMENT The function 'PwmLcdBezelLightPcnt' sets register CCR1 of TIM3 with percentage counter
    COMMENT Equivalence Class None
    COMMENT </TD>  
    
    ELEMENT

        COMMENT INPUT SECTION:
            
            -- desired duty percent x 1000 is initialized
            VAR u16_pcnt_onx100,        init = 940,         ev = init
        
            
        COMMENT OUTPUT SECTION:
            
            -- Holds value of TIM capture/compare register 1
            VAR TIM3->CCR1,                 init = DEC_100K,            ev = 908
        
        COMMENT INPUT/OUTPUT SECTION: 
        
            --None   
        
        --Stub Calls:
        SIMUL  
        
            --None   
        
        END SIMUL 
        
        -- Calling the Unit Under Test:
        #PwmLcdBezelLightPcnt(u16_pcnt_onx100);
        
    END ELEMENT

END TEST -- TEST 5

TEST 6
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD>
    COMMENT [hdudispfpwm-PwmLcdBezelLightPcnt-DB-LLR-001]
    COMMENT The function 'PwmLcdBezelLightPcnt' does not set u16_pcnt_onx100 to TIM2_PERIOD 
    COMMENT when u16_pcnt_onx100 is greater than TIM2_PERIOD. 
    COMMENT Equivalence Class 34
    COMMENT
    COMMENT [hdudispfpwm-PwmLcdBezelLightPcnt-DB-LLR-002]
    COMMENT The function 'PwmLcdBezelLightPcnt' sets target percentage to u16_pcnt_onx100
    COMMENT Equivalence Class 5
    COMMENT
    COMMENT [hdudispfpwm-PwmLcdBezelLightPcnt-DB-LLR-003]
    COMMENT The function 'PwmLcdBezelLightPcnt' sets temp variable to ONE when following conditions are met
    COMMENT a)  Return value of macro ABS with target percentage value subtracted by 
    COMMENT    percentage counter as parameter is not equal to ZERO
    COMMENT b)  temp variable  is less than THIRTY_TWO
    COMMENT c)  target percentage value subtracted by percentage counter is greater than ZERO    
    COMMENT Equivalence Class 38
    COMMENT
    COMMENT [hdudispfpwm-PwmLcdBezelLightPcnt-DB-LLR-006]
    COMMENT The function 'PwmLcdBezelLightPcnt' sets percentage counter with sum of percentage counter and temp variable  
    COMMENT Equivalence Class None
    COMMENT
    COMMENT [hdudispfpwm-PwmLcdBezelLightPcnt-DB-LLR-007]
    COMMENT The function 'PwmLcdBezelLightPcnt' sets register CCR1 of TIM3 with percentage counter
    COMMENT Equivalence Class None
    COMMENT </TD>  
    
    ELEMENT

        COMMENT INPUT SECTION:
            
            -- desired duty percent x 1000 is initialized
            VAR u16_pcnt_onx100,        init = 939,         ev = init
        
            
        COMMENT OUTPUT SECTION:
            
            -- Holds value of TIM capture/compare register 1
            VAR TIM3->CCR1,                 init = DEC_100K,            ev = 909
        
        COMMENT INPUT/OUTPUT SECTION:
        
            --None    
        
        --Stub Calls:
        SIMUL  
            --None   
        
        END SIMUL 
        
        -- Calling the Unit Under Test:
        #PwmLcdBezelLightPcnt(u16_pcnt_onx100);
        
    END ELEMENT

END TEST -- TEST 6

TEST 7
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD>
    COMMENT [hdudispfpwm-PwmLcdBezelLightPcnt-DB-LLR-001]
    COMMENT The function 'PwmLcdBezelLightPcnt' does not set u16_pcnt_onx100 to TIM2_PERIOD 
    COMMENT when u16_pcnt_onx100 is greater than TIM2_PERIOD. 
    COMMENT Equivalence Class 34
    COMMENT
    COMMENT [hdudispfpwm-PwmLcdBezelLightPcnt-DB-LLR-002]
    COMMENT The function 'PwmLcdBezelLightPcnt' sets target percentage to u16_pcnt_onx100
    COMMENT Equivalence Class 5
    COMMENT
    COMMENT [hdudispfpwm-PwmLcdBezelLightPcnt-DB-LLR-004]
    COMMENT The function 'PwmLcdBezelLightPcnt' sets temp variable to MINUS_ONE when following conditions are met,
    COMMENT a)  Return variable of macro ABS with target percentage value subtracted by
    COMMENT     percentage counter as parameter is not equal to ZERO
    COMMENT b)  temp variable  is less than THIRTY_TWO
    COMMENT c)  target percentage value subtracted by percentage counter is not greater than ZERO (-1 value)
    COMMENT Equivalence Class 41
    COMMENT
    COMMENT [hdudispfpwm-PwmLcdBezelLightPcnt-DB-LLR-006]
    COMMENT The function 'PwmLcdBezelLightPcnt' sets percentage counter with sum of percentage counter and temp variable  
    COMMENT Equivalence Class None
    COMMENT
    COMMENT [hdudispfpwm-PwmLcdBezelLightPcnt-DB-LLR-007]
    COMMENT The function 'PwmLcdBezelLightPcnt' sets register CCR1 of TIM3 with percentage counter
    COMMENT Equivalence Class None
    COMMENT </TD>  
    
    ELEMENT

        COMMENT INPUT SECTION:
            
            -- desired duty percent x 1000 is initialized
            VAR u16_pcnt_onx100,        init = 907,         ev = init
        
            
        COMMENT OUTPUT SECTION:
            
            -- Holds value of TIM capture/compare register 1
            VAR TIM3->CCR1,                 init = DEC_100K,            ev = 908
        
        COMMENT INPUT/OUTPUT SECTION:
        
            --None    
        
        --Stub Calls:
        SIMUL  
        
            --None   
        
        END SIMUL 
        
        -- Calling the Unit Under Test:
        #PwmLcdBezelLightPcnt(u16_pcnt_onx100);
        
    END ELEMENT

END TEST -- TEST 7

TEST 8
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD>
    COMMENT [hdudispfpwm-PwmLcdBezelLightPcnt-DB-LLR-001]
    COMMENT The function 'PwmLcdBezelLightPcnt' does not set u16_pcnt_onx100 to TIM2_PERIOD 
    COMMENT when u16_pcnt_onx100 is greater than TIM2_PERIOD. 
    COMMENT Equivalence Class 34
    COMMENT
    COMMENT [hdudispfpwm-PwmLcdBezelLightPcnt-DB-LLR-002]
    COMMENT The function 'PwmLcdBezelLightPcnt' sets target percentage to u16_pcnt_onx100
    COMMENT Equivalence Class 5
    COMMENT
    COMMENT [hdudispfpwm-PwmLcdBezelLightPcnt-DB-LLR-003]
    COMMENT The function 'PwmLcdBezelLightPcnt' sets temp variable to ONE when following conditions are met
    COMMENT a)  Return value of macro ABS with target percentage value subtracted by 
    COMMENT    percentage counter as parameter is not equal to ZERO
    COMMENT b)  temp variable  is less than THIRTY_TWO
    COMMENT c)  target percentage value subtracted by percentage counter is greater than ZERO  ( 1 value)  
    COMMENT Equivalence Class 42
    COMMENT
    COMMENT [hdudispfpwm-PwmLcdBezelLightPcnt-DB-LLR-006]
    COMMENT The function 'PwmLcdBezelLightPcnt' sets percentage counter with sum of percentage counter and temp variable  
    COMMENT Equivalence Class None
    COMMENT
    COMMENT [hdudispfpwm-PwmLcdBezelLightPcnt-DB-LLR-007]
    COMMENT The function 'PwmLcdBezelLightPcnt' sets register CCR1 of TIM3 with percentage counter
    COMMENT Equivalence Class None
    COMMENT </TD>  
    
    ELEMENT

        COMMENT INPUT SECTION:
            
            -- desired duty percent x 1000 is initialized
            VAR u16_pcnt_onx100,        init = 909,         ev = init
        
            
        COMMENT OUTPUT SECTION:
            
            -- Holds value of TIM capture/compare register 1
            VAR TIM3->CCR1,                 init = DEC_100K,            ev = 909
        
        COMMENT INPUT/OUTPUT SECTION: 
        
            --None   
        
        --Stub Calls:
        SIMUL  
        
            --None   
        
        END SIMUL 
        
        -- Calling the Unit Under Test:
        #PwmLcdBezelLightPcnt(u16_pcnt_onx100);
    END ELEMENT

END TEST -- TEST 8

TEST 9
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD>
    COMMENT [hdudispfpwm-PwmLcdBezelLightPcnt-DB-LLR-001]
    COMMENT The function 'PwmLcdBezelLightPcnt' does not set u16_pcnt_onx100 to TIM2_PERIOD 
    COMMENT when u16_pcnt_onx100 is greater than TIM2_PERIOD. 
    COMMENT Equivalence Class 34
    COMMENT
    COMMENT [hdudispfpwm-PwmLcdBezelLightPcnt-DB-LLR-002]
    COMMENT The function 'PwmLcdBezelLightPcnt' sets target percentage to u16_pcnt_onx100
    COMMENT Equivalence Class 5
    COMMENT
    COMMENT [hdudispfpwm-PwmLcdBezelLightPcnt-DB-LLR-005]
    COMMENT The function 'PwmLcdBezelLightPcnt' sets temp variable to right shifted by FIVE value of  
    COMMENT target percentage value subtracted by percentage counter when following conditions are met,
    COMMENT a)  Return variable of macro ABS with target percentage value subtracted by percentage 
    COMMENT counter as parameter is not equal to ZERO
    COMMENT b)  temp variable  is not less than THIRTY_TWO (greater than 32)      
    COMMENT Equivalence Class 39
    COMMENT
    COMMENT [hdudispfpwm-PwmLcdBezelLightPcnt-DB-LLR-006]
    COMMENT The function 'PwmLcdBezelLightPcnt' sets percentage counter with sum of percentage counter and temp variable  
    COMMENT Equivalence Class None
    COMMENT
    COMMENT [hdudispfpwm-PwmLcdBezelLightPcnt-DB-LLR-007]
    COMMENT The function 'PwmLcdBezelLightPcnt' sets register CCR1 of TIM3 with percentage counter
    COMMENT Equivalence Class None
    COMMENT </TD>  
    
    ELEMENT

        COMMENT INPUT SECTION:
            
            -- desired duty percent x 1000 is initialized
            VAR u16_pcnt_onx100,        init = 941,         ev = init
        
            
        COMMENT OUTPUT SECTION:
            
            -- Holds value of TIM capture/compare register 1
            VAR TIM3->CCR1,                 init = DEC_100K,            ev = 910
        
        COMMENT INPUT/OUTPUT SECTION: 
        
            --None   
        
        --Stub Calls:
        SIMUL  
        
            --None   
        
        END SIMUL 
        
        -- Calling the Unit Under Test:
        #PwmLcdBezelLightPcnt(u16_pcnt_onx100);
    END ELEMENT

END TEST -- TEST 9

END SERVICE -- PwmLcdBezelLightPcnt

