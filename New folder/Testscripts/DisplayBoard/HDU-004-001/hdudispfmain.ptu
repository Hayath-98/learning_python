HEADER hdudispfmain, Source Code Ver : 1.4, TestScript Ver : 1.4
--------------------------------------------------------------------------------
-- Author Name          : Hemalatha S		
--
-- File Name            : hdudispfmain.ptu
--
-- Test Creation Date   : 30.10.2016
--
-- Tested Functions     : SystemClockConfig
--						  CpuCacheEnable
--						  MpuCacheEnable
--						  DisplayMain
--						  SysTickHandler
--
-- Version History		:
--
--  TEST-VERSION        TEST-DATE               TESTER NAME        MODIFICATIONS
--  ------------        ---------               -----------        -------------
--     1.1              30.10.2017              Hemalatha S       Created the ptu file.
--     1.2              11.11.2017              Hemalatha S       Updated as per #PR100171
--     1.3              14.11.2017              Hemalatha S       Updated as per #PR100171
--     1.4              27.07.2020              Swaroopa N       Updated as per #PR100267
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
--
-- TESTED FILE INCLUDE DIRECTIVES 
--
--------------------------------------------------------------------------------

#/*============================================================================*/
#/* Module specific includes                                                   */
#/*============================================================================*/  

##include "hdudispfbspnor.h" 
##include "hdudispfinit.h"   
##include "hdudispfmain.h"              
##include "hdulibstm32756gevalsdram.h"  
##include "hdulibstm32f7xxhalcortex.h"  
##include "hdulibstm32f7xxhalflashex.h" 
##include "hdulibstm32f7xxhalpwrex.h"   
##include "hdulibstm32f7xxhalrcc.h"     
##include "hdulibstm32f7xxhalrccex.h"   
##include "hdulibstm32f7xxhaldef.h"     
##include "hdudispfpanel.h"             
##include "hdudispfucos.h"              
##include "hdulibcorecm7.h"       
##include "hdulibstm32f7xxhal.h"  
##include "hdudispftbase.h" 
##include "hdudispfpbit.h"

--Macros are made available in the PTU for testing purpose
##define MPU_BASEADDR    				0x20010000U
##define ZERO            				0U
##define PLLSAIN_CONFIG  				192U
##define PLLSAIR_CONFIG  				4U
##define RCC_PLLM_CONFIG 				24U
##define RCC_PLLN_CONFIG 				432U
##define RCC_PLLQ_CONFIG 				9U
--------------------------------------------------------------------------------
--
-- TESTED FILE DECLARATIONS 
--
--------------------------------------------------------------------------------

-- Declarations of the global variables of the tested file

    #volatile T_INT32 Itm_rx_buffer;
    
-- Declarations of the temporary variable
  
    --Variable created to be used in HalMpuConfigRegion
    #T_MPU_REGION_INIT PTU_MPU_Init;
    
    --Variable created to be used in HalRccExPeriphCLKConfig
    #T_RCC_PERIPH_CLK PTU_PeriphClkInit;
    
    --Variable created to be used in HalRccClockConfig
    #T_RCC_CLK_INIT PTU_RCC_ClkInitStruct;
    
    --Variable created to be used in HalRccOscConfig
    #T_RCC_OSC_INIT PTU_RCC_OscInitStruct;

--------------------------------------------------------------------------------
BEGIN

    COMMENT Author Name      : Hemalatha S
    COMMENT
    COMMENT File Name        : hdudispfmain.ptu
    COMMENT
    COMMENT Tested Functions : SystemClockConfig
    COMMENT 				   CpuCacheEnable
    COMMENT 				   MpuCacheEnable
    COMMENT                    DisplayMain
    COMMENT 				   SysTickHandler
    COMMENT
    COMMENT Assumptions and Constraints
    COMMENT <AC>
    COMMENT
    COMMENT Constraint(s)
    COMMENT 
	COMMENT 1. Source file "hdudispfmain.c" is modified for testing LLR hdudispfmain-SystemClockConfig-DB-LLR-002
	COMMENT	The "while(TRUE)" is modified 
    COMMENT for terminating the infinite loop.
    COMMENT 
    COMMENT Snippet of code is added in function 'SystemClockConfig':
    COMMENT 
    COMMENT T_UINT16 PTU1_count=0; /*local variable declared for testing purpose*/
    COMMENT 
    COMMENT /*Modified for testing purpose to terminate infinite loop*/
    COMMENT PTU1_count=0;/*local variable initialised to 0 for testing purpose*/
    COMMENT while(TRUE)
    COMMENT {
    COMMENT .................
    COMMENT /*Modified for testing purpose to terminate infinite loop*/
    COMMENT PTU1_count++;
    COMMENT if(PTU1_count == 4)
    COMMENT {
    COMMENT     break;
    COMMENT }
    COMMENT else
    COMMENT {
    COMMENT     /*nothing*/
    COMMENT }  
    COMMENT }
	COMMENT	while loop cannot be covered for 0 and 1 times and FALSE part of the while condition
	COMMENT	
	COMMENT 2. Source file "hdudispfmain.c" is modified for testing LLR hdudispfmain-SystemClockConfig-DB-LLR-003
	COMMENT	The "while(TRUE)" is modified 56
    COMMENT for terminating the infinite loop.
    COMMENT 
    COMMENT Snippet of code is added in function 'SystemClockConfig':
    COMMENT 
    COMMENT T_UINT16 PTU2_count=0; /*local variable declared for testing purpose*/
    COMMENT 
    COMMENT /*Modified for testing purpose to terminate infinite loop*/
    COMMENT PTU2_count=0;/*local variable initialised to 0 for testing purpose*/
    COMMENT while(TRUE)
    COMMENT {
    COMMENT .................
    COMMENT /*Modified for testing purpose to terminate infinite loop*/
    COMMENT PTU2_count++;
    COMMENT if(PTU2_count == 4)
    COMMENT {
    COMMENT     break;
    COMMENT }
    COMMENT else
    COMMENT {
    COMMENT     /*nothing*/
    COMMENT }  
    COMMENT }
	COMMENT	while loop cannot be covered for 0 and 1 times and FALSE part of the while condition
	COMMENT	
	COMMENT 3. Source file "hdudispfmain.c" is modified for testing LLR hdudispfmain-SystemClockConfig-DB-LLR-005
	COMMENT	The "while(TRUE)" is modified 
    COMMENT for terminating the infinite loop.
    COMMENT 
    COMMENT Snippet of code is added in function 'SystemClockConfig':
    COMMENT 
    COMMENT T_UINT16 PTU3_count=0; /*local variable declared for testing purpose*/
    COMMENT 
    COMMENT /*Modified for testing purpose to terminate infinite loop*/
    COMMENT PTU3_count=0;/*local variable initialised to 0 for testing purpose*/
    COMMENT while(TRUE)
    COMMENT {
    COMMENT .................
    COMMENT /*Modified for testing purpose to terminate infinite loop*/
    COMMENT PTU3_count++;
    COMMENT if(PTU3_count == 4)
    COMMENT {
    COMMENT     break;
    COMMENT }
    COMMENT else
    COMMENT {
    COMMENT     /*nothing*/
    COMMENT }  
    COMMENT }
	COMMENT	while loop cannot be covered for 0 and 1 times and FALSE part of the while condition
	COMMENT	
	COMMENT 4. Header file "hdudispfpanel.h" is modified for testing purpose. The macro 'VIDEO_RAM' is modified for 
    COMMENT stubbing hardware address.
	COMMENT			/*Commented for testing purpose*/
	COMMENT			/*#define VIDEO_RAM       0xc0000000*/
	COMMENT			/* Modified macro by stubbing hardware address for testing purpose*/
	COMMENT			T_UINT32 PTU_VIDEO_RAM[100];
	COMMENT			#define VIDEO_RAM	((T_UINT32 *)&PTU_VIDEO_RAM)
    COMMENT
	COMMENT 5. Header file "hdulibcorecm7.h" is modified for testing purpose. The macro 'SCB' is modified for 
    COMMENT stubbing hardware address.
	COMMENT
	COMMENT			/*Commented for testing purpose*/
	COMMENT			/*#define SCB	((T_SCB	*)	SCB_BASE) */
	COMMENT
	COMMENT			/*Modified macro by stubbing hardware address for testing purpose*/
	COMMENT			T_SCB PTU_SCB_BASE;
	COMMENT			#define SCB	((T_SCB	*)	&PTU_SCB_BASE)  /* SCB configuration struct */
	COMMENT
	COMMENT 6. Header file "hdudispfpanel.h" is modified for testing purpose. The macro 'FG_FB_SIZE1' is modified for 
    COMMENT stubbing hardware address.
	COMMENT		
	COMMENT		/* Commented for tested purpose */
	COMMENT 	/*#define FG_FB_SIZE1 (PANEL_WIDTH*PANEL_HEIGHT*2)*/
	COMMENT	 	/* Modified for testing purpose */
	COMMENT	 	#define FG_FB_SIZE1 100
	COMMENT
	COMMENT 7. Header file "hdulibcorecm7.h" is modified for testing purpose. This is to Store the Mask values
	COMMENT    for SCB Register.
	COMMENT
    COMMENT     /* Modified macro by stubbing hardware address for testing purpose */
    COMMENT     T_UINT32 PTU_SCB_E,PTU_VARj,PTU_VARl;
    COMMENT
    COMMENT 	/*Modified to store Enable Mask value for testing purpose*/
    COMMENT 	PTU_SCB_E=SCB->CCR;
    COMMENT 
    COMMENT 	/*Modified to store Mask value for testing purpose*/
	COMMENT 	PTU_VARl=SCB->CCR;
    COMMENT 
	COMMENT 	/*Modified to store Disable Mask value for testing purpose*/
	COMMENT 	PTU_VARj=SCB->CCR;
	COMMENT
	COMMENT 8. Header file "hdulibcorecm7.h" is modified for testing purpose. __IOM is modified as __OM 
	COMMENT    for SCB->CCR Register interrupts
	COMMENT 
	COMMENT	/*Commented for testing purpose*/
	COMMENT	  __IOM T_UINT32 CCR;            /* Offset: 0x014 (R/W)  Configuration Control Register */
	COMMENT
	COMMENT	  /*Modified __IOM to __OM for testing purpose*/
	COMMENT	   __OM T_UINT32 CCR;            /* Offset: 0x014 (R/W)  Configuration Control Register */
	COMMENT
    COMMENT 9. Following Test script related warnings are observed during Target Execution for volatile
    COMMENT keyword member/variable:
   	COMMENT	 	
   	COMMENT	 		warning #191-D: type qualifier is meaningless on cast type
   	COMMENT
   	COMMENT 10. for loop cannot be covered for 0 and 1 times in the "DisplayMain" function since
   	COMMENT it is controlled by the macro "FG_FB_SIZE1"
	COMMENT
	COMMENT </AC> 
    
	COMMENT Equivalence Class
	COMMENT <ECD> 
	COMMENT
	COMMENT Valid Class(es) 
	COMMENT
	COMMENT Class 1 
	COMMENT The function "DisplayMain", calls "MpuCacheEnable" function
	COMMENT 
	COMMENT Class 2
	COMMENT The function "DisplayMain", calls "CpuCacheEnable" function
	COMMENT  
	COMMENT Class 3
	COMMENT The function "DisplayMain", calls "HalInit" function
	COMMENT 
	COMMENT Class 4
	COMMENT The function "DisplayMain", calls "BspSdramInit" function
	COMMENT 
	COMMENT Class 5
	COMMENT The function "DisplayMain", calls "BspNorInit" function
	COMMENT 
	COMMENT Class 6
	COMMENT The function "DisplayMain", calls "SystemClockConfig" function
	COMMENT
	COMMENT Class 7
	COMMENT The function "DisplayMain", calls "HalRccExPeriphCLKConfig" function
	COMMENT 
	COMMENT Class 8
	COMMENT The function "DisplayMain", calls "LCDConfig" function
	COMMENT 
	COMMENT Class 9
	COMMENT The function "DisplayMain", calls "PbitCheck" function
	COMMENT 
	COMMENT Class 10
	COMMENT The function "DisplayMain", calls "OsInit" function
	COMMENT
	COMMENT Class 11
	COMMENT The function "DisplayMain", calls "InitInit" function
	COMMENT 
	COMMENT Class 12
	COMMENT The function "DisplayMain", calls "OsStart" function
	COMMENT 
	COMMENT Class 13
	COMMENT In function "SystemClockConfig", return value of function HalRccOscConfig is equal to HAL_OK.
	COMMENT 
	COMMENT Class 14
	COMMENT In function "SystemClockConfig", return value of function HalRccOscConfig is not equal to HAL_OK.
	COMMENT 
	COMMENT Class 15
	COMMENT In function "SystemClockConfig", return value of function HalPwrExEnableOverDrive 
	COMMENT is equal to HAL_OK
	COMMENT 
	COMMENT Class 16 
	COMMENT In function "SystemClockConfig", return value of function HalPwrExEnableOverDrive 
	COMMENT is not equal to HAL_OK
	COMMENT 
	COMMENT Class 17
	COMMENT In function "SystemClockConfig",  return value of function HalRccClockConfig is equal to HAL_OK
	COMMENT 
	COMMENT Class 18
	COMMENT In function "SystemClockConfig", return value of function HalRccClockConfig is not equal to HAL_OK
	COMMENT 
	COMMENT Class 19
	COMMENT The function "CpuCacheEnable", calls ScbEnableICache function
	COMMENT 
	COMMENT Class 20
	COMMENT The function "CpuCacheEnable", calls ScbEnableDCache function
	COMMENT 
	COMMENT Class 21
	COMMENT The function "MpuCacheEnable", calls "HalMpuDisable" function
	COMMENT 
	COMMENT Class 22
	COMMENT The function "MpuCacheEnable", calls "HalMpuConfigRegion" function
	COMMENT 
	COMMENT Class 23
	COMMENT The function "MpuCacheEnable", calls "HalMpuEnable" function
	COMMENT 
	COMMENT Class 24
	COMMENT The function "SysTickHandler", calls "HalIncTick" function
	COMMENT 
	COMMENT Class 25
	COMMENT The function "SysTickHandler", calls "HalSystickCallback" function
	COMMENT 
	COMMENT Invalid Class(es)
	COMMENT None
    COMMENT </ECD>
--------------------------------------------------------------------------------
--
-- STUB DECLARATIONS OF THE TESTED OR INTEGRATED UNITS
--
--------------------------------------------------------------------------------

SIMUL

DEFINE STUB hdudispfmain_c

    #void HalSystickCallback(void); 
    
    #void HalIncTick(void); 
    
    #void OsStart(void); 
    
    #void InitInit(void); 
    
    #void OsInit(void); 
    
    #void PbitCheck(); 
    
    #void LCDConfig(void); 
    
    -- Parameter PeriphClkInit is made as _no since the address of local variable is passed and it is verified 
    #T_HAL_STATUS HalRccExPeriphCLKConfig(T_RCC_PERIPH_CLK  _no *PeriphClkInit)
    #{
    #	PTU_PeriphClkInit = *PeriphClkInit;
    #}
    
    #T_UINT8 BspNorInit(void); 
    
    #T_UINT8 BspSdramInit(void);
    
    #T_HAL_STATUS HalInit(void); 
    
    #void HalMpuEnable(T_UINT32  _in MPU_Control); 
    
    -- Parameter MPU_Init is made as _no since the address of local variable is passed and it is verified 
    #void HalMpuConfigRegion(T_MPU_REGION_INIT  _no *MPU_Init)
    #{
    #	PTU_MPU_Init = *MPU_Init;
    #}
    
    #void HalMpuDisable(void); 
    
    -- Parameter RCC_ClkInitStruct is made as _no since the address of local variable is passed and it is verified 
    #T_HAL_STATUS HalRccClockConfig(T_RCC_CLK_INIT  _no *RCC_ClkInitStruct, T_UINT32  _in FLatency)  
    #{
    #	PTU_RCC_ClkInitStruct = *RCC_ClkInitStruct;
    #}
    
    #T_HAL_STATUS HalPwrExEnableOverDrive(void); 
    
    -- Parameter RCC_OscInitStruct is made as _no since the address of local variable is passed and it is verified 
    #T_HAL_STATUS HalRccOscConfig(T_RCC_OSC_INIT  _no *RCC_OscInitStruct)
    #{
    # 	PTU_RCC_OscInitStruct = *RCC_OscInitStruct;
    #}
   
END DEFINE

ELSE_SIMUL

    -- No action defined as of now if the module is not simulated

END SIMUL
--------------------------------------------------------------------------------
--
-- ENVIRONMENTS DECLARATIONS
--
--------------------------------------------------------------------------------
--IF HOST

	-- No special things that have to be done on the host to run the test.

--ELSE

	-- No action defined for the target execution as of now

--END IF
--------------------------------------------------------------------------------
-- TESTED FILE ENVIRONNEMENT
--------------------------------------------------------------------------------
-- Environment of the file hdudispfmain.c
--ENVIRONMENT ENV_hdudispfmain_c

	--None
	
--END ENVIRONMENT -- ENV_hdudispfmain_c
--USE ENV_hdudispfmain_c
--------------------------------------------------------------------------------
--
-- SERVICES DECLARATIONS
--
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
-- Declaration of the service DisplayMain
--------------------------------------------------------------------------------
SERVICE DisplayMain
SERVICE_TYPE extern

-- By function returned type declaration
#T_INT32 ret_DisplayMain;

TEST 1
FAMILY nominal

	COMMENT Test Description
	COMMENT <TD>
	COMMENT [hdudispfmain-DisplayMain-DB-LLR-001]
	COMMENT The function "DisplayMain",
	COMMENT a)	Calls the function MpuCacheEnable to enable MPU cache
	COMMENT b)	Calls the function CpuCacheEnable to enable CPU cache
	COMMENT c)	Calls the function HalInit to intialize library.
	COMMENT d)	Calls the function BspSdramInit to intialize SDRAM.
	COMMENT e)	Calls the function BspNorInit to intialize NOR.
	COMMENT f)	Calls the function SystemClockConfig to configure the system clock.
    COMMENT Equivalence Class 1,2,3,4,5,6
	COMMENT 
	COMMENT [hdudispfmain-MpuCacheEnable-DB-LLR-001]
	COMMENT The function does the following,
	COMMENT a)	Calls function "HalMpuDisable" to Disable the MPU.
	COMMENT b)	Sets Enable of mpu init structure to MPU_REGION_ENABLE
	COMMENT c)	Sets BaseAddress of mpu init structure to MPU_BASEADDR
	COMMENT d)	Sets Size of mpu init structure to MPU_REGION_SIZE_256KB
	COMMENT e)	Sets AccessPermission of mpu init structure to MPU_REGION_FULL_ACCESS
	COMMENT f)	Sets IsBufferable of mpu init structure to MPU_ACCESS_NOT_BUFFERABLE
	COMMENT g)	Sets IsCacheable of mpu init structure to MPU_ACCESS_CACHEABLE
	COMMENT h)	Sets IsShareable of mpu init structure to MPU_ACCESS_NOT_SHAREABLE
	COMMENT i)	Sets Number of mpu init structure to MPU_REGION_NUMBER0
	COMMENT j)	Sets TypeExtField of mpu init structure to MPU_TEX_LEVEL0
	COMMENT k)	Sets SubRegionDisable of mpu init structure to ZERO
	COMMENT l)	Sets DisableExec of mpu init structure to MPU_INSTRUCTION_ACCESS_ENABLE
	COMMENT m)	Calls function "HalMpuConfigRegion" with reference to mpu_init_struct as parameter
	COMMENT 	to initialize and configure the Region and the memory to be protected.
	COMMENT n)	Calls function "HalMpuEnable" with MPU_PRIVILEGED_DEFAULT as parameter 
	COMMENT 	to enable memory protection unit.
    COMMENT Equivalence Class 21,22,23
	COMMENT 
	COMMENT [hdudispfmain-CpuCacheEnable-DB-LLR-001]
	COMMENT The function calls "ScbEnableICache" to enable I-Cache and "ScbEnableDCache" to enable D-Cache
    COMMENT Equivalence Class 19,20
	COMMENT 
	COMMENT [hdudispfmain-SystemClockConfig-DB-LLR-001]
	COMMENT The function does the following,
	COMMENT a)	Set OscillatorType of rcc init structure to RCC_OSCILLATORTYPE_HSE
	COMMENT b)	Set HSEState of rcc init structure to RCC_HSE_ON
	COMMENT c)	Set PLLState of PLL of rcc init structure to RCC_PLL_ON
	COMMENT d)	Set PLLSource of PLL of rcc init structure to RCC_PLLSOURCE_HSE
	COMMENT e)	Set PLLM of PLL of rcc init structure to RCC_PLLM_CONFIG
	COMMENT f)	Set PLLN of PLL of rcc init structure to RCC_PLLN_CONFIG
	COMMENT g)	Set PLLP of PLL of rcc init structure to RCC_PLLP_DIV2
	COMMENT h)	Set PLLQ of PLL of rcc init structure to RCC_PLLQ_CONFIG
    COMMENT Equivalence Class None
	COMMENT 
	COMMENT [hdudispfmain-SystemClockConfig-DB-LLR-002]
	COMMENT The function "SystemClockConfig" does nothing when  HalRccOscConfig with 
	COMMENT reference to rcc init structure as parameter is equal to HAL_OK.
    COMMENT Equivalence Class 17
    COMMENT </TD>
    
	ELEMENT

		COMMENT INPUT SECTION:

			VAR ret_DisplayMain,							init = 0,		ev = init
			
			VAR PTU_RCC_OscInitStruct.LSEState,				init = 0,		ev = init
			
			VAR PTU_RCC_OscInitStruct.HSIState,				init = 0,		ev = init
			
			VAR PTU_RCC_OscInitStruct.HSICalibrationValue,	init = 0,		ev = init
			
			VAR PTU_RCC_OscInitStruct.LSIState,				init = 0,		ev = init
			
			VAR SCB->CCR,									init = 196608,		ev = init

		COMMENT OUTPUT SECTION:

			--None

		COMMENT INPUT/OUTPUT SECTION:
			
			--Checking MPU attributes
			VAR PTU_MPU_Init.Enable, 						init = 0,		ev = MPU_REGION_ENABLE

			VAR PTU_MPU_Init.BaseAddress, 					init = 0,		ev = MPU_BASEADDR

			VAR PTU_MPU_Init.Size, 							init = 0,		ev = MPU_REGION_SIZE_256KB

			VAR PTU_MPU_Init.AccessPermission, 				init = 0,		ev = MPU_REGION_FULL_ACCESS

			VAR PTU_MPU_Init.IsBufferable,					init = 0,		ev = MPU_ACCESS_NOT_BUFFERABLE

			VAR PTU_MPU_Init.IsCacheable, 					init = 0,		ev = MPU_ACCESS_CACHEABLE

			VAR PTU_MPU_Init.IsShareable, 					init = 0,		ev = MPU_ACCESS_NOT_SHAREABLE
															
			VAR PTU_MPU_Init.Number, 						init = 0,		ev = MPU_REGION_NUMBER0

			VAR PTU_MPU_Init.TypeExtField, 					init = 0,		ev = MPU_TEX_LEVEL0

			VAR PTU_MPU_Init.SubRegionDisable,				init = 0,		ev = ZERO

			VAR PTU_MPU_Init.DisableExec, 					init = 0,		ev = MPU_INSTRUCTION_ACCESS_ENABLE
			
			--To enable HSE Oscillator and activate PLL with HSE as source			
			VAR PTU_RCC_OscInitStruct.OscillatorType,		init = 0,		ev = RCC_OSCILLATORTYPE_HSE
			
			VAR PTU_RCC_OscInitStruct.HSEState,				init = 0,		ev = RCC_HSE_ON
						
			VAR PTU_RCC_OscInitStruct.PLL.PLLState,			init = 0,		ev = RCC_PLL_ON
						
			VAR PTU_RCC_OscInitStruct.PLL.PLLSource,		init = 0,		ev = RCC_PLLSOURCE_HSE
					
			VAR PTU_RCC_OscInitStruct.PLL.PLLM,				init = 0,		ev = RCC_PLLM_CONFIG
					
			VAR PTU_RCC_OscInitStruct.PLL.PLLN,				init = 0,		ev = RCC_PLLN_CONFIG
					
			VAR PTU_RCC_OscInitStruct.PLL.PLLP,				init = 0,		ev = RCC_PLLP_DIV2
					
			VAR PTU_RCC_OscInitStruct.PLL.PLLQ,				init = 0,		ev = RCC_PLLQ_CONFIG
			
			VAR SCB->ICIALLU,								init = 5,		ev = ZERO
			
			VAR SCB->CSSELR,								init = 5,		ev = ZERO
			
			VAR SCB->DCISW,									init = 5,		ev = ZERO
			
			VAR PTU_SCB_E,										init = 10,		ev = 196608
			
			VAR PTU_VARj,										init = 0x81C0DB,		ev = 196608
			
	--Stub Calls :
	SIMUL

		--To disable fault exceptions and clear the control register
		STUB HalMpuDisable()
		
		--To initialize and configure the Region and the memory to be protected
		STUB HalMpuConfigRegion()
		
		--To enable fault exceptions
		STUB HalMpuEnable(MPU_PRIVILEGED_DEFAULT)
		
		--To initialize HAL Library
		STUB HalInit()HAL_OK
		
		--To initialize SDRAM device
		STUB BspSdramInit()ZERO
		
		--To initialize NOR device
		STUB BspNorInit()ZERO
		
		--To initialize the RCC Oscillators
		STUB HalRccOscConfig()HAL_OK
		
		--To activate Over-Drive mode
		STUB HalPwrExEnableOverDrive()HAL_OK
		
		--To initialize CPU, AHB and APB busses clocks
		STUB HalRccClockConfig(FLASH_LATENCY_7)HAL_OK
		
		--To call when unexpected interrupt is received
		STUB HalRccExPeriphCLKConfig()HAL_OK
		
		--To configure the LTDC peripheral
		STUB LCDConfig()
		
		--To perform the Power-on Built in test
		STUB PbitCheck()
		
		--To initialize uC/OS
		STUB OsInit()
		
		--To install Semaphore into timebase and to create init OS task
		STUB InitInit()
		
		--To start the highest priority task
		STUB OsStart()

	END SIMUL

	-- Calling Unit Under Test
	#ret_DisplayMain = DisplayMain();
	
	END ELEMENT

END TEST -- TEST 1

TEST 2
FAMILY nominal

	COMMENT Test Description
	COMMENT <TD>
	COMMENT [hdudispfmain-SystemClockConfig-DB-LLR-002]
	COMMENT The function goes into infinite loop if return value of function "HalRccOscConfig" with reference to 
	COMMENT rcc init structure as parameter is not equal to HAL_OK.
    COMMENT Equivalence Class 14
    COMMENT
	COMMENT [hdudispfmain-SystemClockConfig-DB-LLR-003]
	COMMENT The function goes into infinite loop if return value of
	COMMENT function HalPwrExEnableOverDrive is not equal to HAL_OK
    COMMENT Equivalence Class 16
    COMMENT
	COMMENT [hdudispfmain-SystemClockConfig-DB-LLR-004]
	COMMENT The function does the following,
	COMMENT a)	Set ClockType of rcc clock init structure to value got of RCC_CLOCKTYPE_SYSCLK bitwise OR with RCC_CLOCKTYPE_HCLK bitwise OR with RCC_CLOCKTYPE_PCLK1 bitwise OR with RCC_CLOCKTYPE_PCLK2.
	COMMENT b)	Set SYSCLKSource of rcc clock init structure to RCC_SYSCLKSOURCE_PLLCLK
	COMMENT c)	Set AHBCLKDivider rcc clock init structure to RCC_SYSCLK_DIV1
	COMMENT d)	Set APB1CLKDivider rcc clock init structure to RCC_HCLK_DIV4
	COMMENT e)	Set APB2CLKDivider rcc clock init structure to RCC_HCLK_DIV2
    COMMENT Equivalence Class None
    COMMENT
	COMMENT [hdudispfmain-SystemClockConfig-DB-LLR-005]
	COMMENT The function goes into infinite loop when return value of function "HalRccClockConfig" with reference to
	COMMENT rcc_clk_init_struct and FLASH_LATENCY_7 as parameters is not equal to HAL_OK.
    COMMENT Equivalence Class 18 
    COMMENT
    COMMENT </TD>
    
	ELEMENT

		COMMENT INPUT SECTION:

			--Holds return value of DisplayMain function
			VAR ret_DisplayMain,				init = 0,		ev = init

		COMMENT OUTPUT SECTION:

			--None

		COMMENT INPUT/OUTPUT SECTION:

		--To set values for rcc_clk_init_struct
		VAR PTU_RCC_ClkInitStruct.ClockType,				init = 0,		ev = 15

		VAR PTU_RCC_ClkInitStruct.SYSCLKSource,				init = 0,		ev = 2

		VAR PTU_RCC_ClkInitStruct.AHBCLKDivider,			init = 0,		ev = 0

		VAR PTU_RCC_ClkInitStruct.APB1CLKDivider,			init = 0,		ev = 5120

		VAR PTU_RCC_ClkInitStruct.APB2CLKDivider,			init = 0,		ev = 4096


	--Stub Calls :
	SIMUL

		--To disable fault exceptions and clear the control register
		STUB HalMpuDisable()
		
		--To initialize and configure the Region and the memory to be protected
		STUB HalMpuConfigRegion()
		
		--To enable fault exceptions
		STUB HalMpuEnable(MPU_PRIVILEGED_DEFAULT)
		
		--To initialize HAL Library
		STUB HalInit()HAL_OK
		
		--To initialize SDRAM device
		STUB BspSdramInit()ZERO
		
		--To initialize NOR device
		STUB BspNorInit()ZERO
		
		--To initialize the RCC Oscillators
		STUB HalRccOscConfig()HAL_ERROR
		
		--To activate Over-Drive mode
		STUB HalPwrExEnableOverDrive()HAL_ERROR
		
		--To initialize CPU, AHB and APB busses clocks
		STUB HalRccClockConfig(FLASH_LATENCY_7)HAL_ERROR
		
		--To call when unexpected interrupt is received
		STUB HalRccExPeriphCLKConfig()HAL_OK
		
		--To configure the LTDC peripheral
		STUB LCDConfig()
		
		--To perform the Power-on Built in test
		STUB PbitCheck()
		
		--To initialize uC/OS
		STUB OsInit()
		
		--To install Semaphore into timebase and to create init OS task
		STUB InitInit()
		
		--To start the highest priority task
		STUB OsStart()

	END SIMUL

	-- Calling Unit Under Test
	#ret_DisplayMain = DisplayMain();
	
	END ELEMENT

END TEST -- TEST 2

TEST 3
FAMILY nominal

	COMMENT Test Description
	COMMENT <TD>
	COMMENT [hdudispfmain-DisplayMain-DB-LLR-002]
	COMMENT The function "DisplayMain",
	COMMENT a) Sets PeriphClockSelection of periph clk init structure to RCC_PERIPHCLK_LTDC
	COMMENT b) Sets PLLSAIN of PLLSAI of periph clk init structure to PLLSAIN_CONFIG
	COMMENT c) Sets PLLSAIR of PLLSAI of periph clk init structure to PLLSAIR_CONFIG
	COMMENT d) Sets PLLSAIDivR of periph clk init structure to RCC_PLLSAIDIVR_2
	COMMENT e) Calls "HalRccExPeriphCLKConfig" with reference to periph_clk_init_struct as parameter.
	COMMENT Equivalence Class 7
	COMMENT 
	COMMENT [hdudispfmain-DisplayMain-DB-LLR-003]
	COMMENT The function loops from ZERO to FG_FB_SIZE multiplies by TWO 
	COMMENT and resets the contents of VIDEO_RAM to ZERO.
	COMMENT Equivalence Class None
	COMMENT 
	COMMENT [hdudispfmain-DisplayMain-DB-LLR-004]
	COMMENT The function does the following,
	COMMENT a)	Calls "LCDConfig" to initialize the LCD
	COMMENT b)  Calls "PbitCheck" to start power on built-in test
	COMMENT c)	Calls "OsInit" to initialize the OS
	COMMENT d)	Calls "InitInit" to set up the initialization task.
	COMMENT e)	Calls "OsStart" to start the scheduler
	COMMENT Equivalence Class 8,9,10,11,12
	COMMENT 
	COMMENT [hdudispfmain-SystemClockConfig-DB-LLR-002]
	COMMENT The function does nothing when return value of function "HalRccOscConfig" with reference to 
	COMMENT rcc init structure as parameter is equal to HAL_OK.
    COMMENT Equivalence Class 13
    COMMENT
	COMMENT [hdudispfmain-SystemClockConfig-DB-LLR-003]
	COMMENT The function does nothing when return value of
	COMMENT function "HalPwrExEnableOverDrive" is equal to HAL_OK
    COMMENT Equivalence Class 15
    COMMENT
	COMMENT [hdudispfmain-SystemClockConfig-DB-LLR-005]
	COMMENT The function goes into infinite loop when return value of function "HalRccClockConfig" with reference to
	COMMENT rcc_clk_init_struct and FLASH_LATENCY_7 as parameters is equal to HAL_OK.
    COMMENT Equivalence Class 17 
	COMMENT 
    COMMENT </TD>
    
	ELEMENT

		COMMENT INPUT SECTION:
		
			--Holds return value of DisplayMain function
			VAR ret_DisplayMain,							init = 0,		ev = init

		COMMENT OUTPUT SECTION:

			--None

		COMMENT INPUT/OUTPUT SECTION:

			VAR PTU_PeriphClkInit.PeriphClockSelection, 	init = 0,		ev = RCC_PERIPHCLK_LTDC
			
			VAR PTU_PeriphClkInit.PLLSAI.PLLSAIN, 			init = 0,		ev = PLLSAIN_CONFIG
			
			VAR PTU_PeriphClkInit.PLLSAI.PLLSAIR, 			init = 0,		ev = PLLSAIR_CONFIG
			
			VAR PTU_PeriphClkInit.PLLSAIDivR, 				init = 0,		ev = RCC_PLLSAIDIVR_2

	--Stub Calls :
	SIMUL

		--To disable fault exceptions and clear the control register
		STUB HalMpuDisable()
		
		--To initialize and configure the Region and the memory to be protected
		STUB HalMpuConfigRegion()
		
		--To enable fault exceptions
		STUB HalMpuEnable(MPU_PRIVILEGED_DEFAULT)
		
		--To initialize HAL Library
		STUB HalInit()HAL_OK
		
		--To initialize SDRAM device
		STUB BspSdramInit()ZERO
		
		--To initialize NOR device
		STUB BspNorInit()ZERO
		
		--To call when unexpected interrupt is received
		STUB HalRccExPeriphCLKConfig()HAL_OK

		--To configure the LTDC peripheral
		STUB LCDConfig()
		
		--To perform the Power-on Built in test
		STUB PbitCheck()
		
		--To initialize uC/OS
		STUB OsInit()
		
		--To install Semaphore into timebase and to create init OS task
		STUB InitInit()
		
		--To start the highest priority task
		STUB OsStart()
		
		--To initialize the RCC Oscillators
		STUB HalRccOscConfig()HAL_OK
		
		--To activate Over-Drive mode
		STUB HalPwrExEnableOverDrive()HAL_OK
		
		--To initialize CPU, AHB and APB busses clocks
		STUB HalRccClockConfig(FLASH_LATENCY_7)HAL_OK

	END SIMUL

	-- Calling Unit Under Test
	#ret_DisplayMain = DisplayMain();
	
	END ELEMENT

END TEST -- TEST 3

END SERVICE -- DisplayMain

--------------------------------------------------------------------------------
-- Declaration of the service SysTickHandler
--------------------------------------------------------------------------------
SERVICE SysTickHandler
SERVICE_TYPE extern


TEST 1
FAMILY nominal
    
	COMMENT Test Description
	COMMENT <TD>
	COMMENT [hdudispfmain-SysTickHandler-DB-LLR-001]
	COMMENT In function "SysTickHandler", "HalIncTick" and "HalSystickCallback" are 
	COMMENT called during SYSTICK interrupt request.
    COMMENT Equivalence Class 24,25
    COMMENT </TD>

	ELEMENT

        COMMENT INPUT SECTION:

            --None

        COMMENT OUTPUT SECTION:

            --None

        COMMENT INPUT/OUTPUT SECTION:

            --None

        --Stub Calls :        
        SIMUL
        
        	STUB HalIncTick()
        	STUB HalSystickCallback()
        
        END SIMUL

    -- Calling the Unit Under Test 
	#SysTickHandler();
	END ELEMENT

    END TEST -- TEST 1

END SERVICE -- SysTickHandler






