HEADER Tested hdudispfapp, Source Code Ver : 1.10 , TestScript Ver : 1.7
--------------------------------------------------------------------------------
-- Author Name          : Manju Kiran M
--
-- File Name            : hdudispfapp_1.ptu
--
-- Test Creation Date   : 25.10.2017
--
-- Tested Functions     : AppInit
--                        AppTask
--                        CheckMsgCtrlArea
--                        AppU32NOC
--                        AppU32NSC
--
-- Version History      :
--
-- TEST-VERSION         TEST-DATE           TESTER NAME         MODIFICATIONS
--  ------------        ---------           -----------         -------------
--      1.1             25.10.2017         Manju Kiran M        Created the PTU file.
--      1.2             10.11.2017         Manju Kiran M        Updated as per #PR100171
--      1.3             14.11.2017         Manju Kiran M        Updated as per #PR100171
--      1.4             10.04.2018         Hemalatha S          Updated as per #PR100201
--      1.5             27.07.2020         Vignesh Sunil        Updated as per #PR100267
--      1.6             15.09.2020         Vignesh Sunil        Updated as per #PR100281
--      1.7             28.04.2021         Vignesh Sunil        Updated as per #PR100338
--------------------------------------------------------------------------------
--
-- TESTED FILE INCLUDE DIRECTIVES
--
--------------------------------------------------------------------------------

#/*============================================================================*/
#/* Module specific includes                                                   */
#/*============================================================================*/

##include "hdudispfa429.h"            /* Routines for arinc 429 */
##include "hdudispfapp.h"             /* contains Engine Information System application */
##include "hdudispfbspnor.h" /* contains the common defines and functions prototypes bspnor*/
##include "hdudispfcas.h"             /* defines and functions prototypes for CAS */
##include "hdudispfdma2.h"   /* contains the common defines and functions prototypes for dma */
##include "hdudispfdma2d.h"  /* contains the common defines and functions prototypes for dma2d */
##include "hdudispfglobalsettings.h"  /* contains prototype for Global settings module*/
##include "hdudispfgrapp.h"           /* routines for all graph */
##include "hdudispfmenu.h"            /* contains prototype for menu module*/
##include "hdudispfoffside.h"         /* contains prototype for offside modules*/
##include "hdudispfpbit.h"            /* contains prototypes for PBIT test. */
##include "hdudispfpbs.h"             /* Contains functions prototypes of pbs.*/
##include "hdudispfresource.h"        /* provides central location to use of On Chip Peripherals*/
##include "hdudispfstandard.h"        /* Standard definitions */
##include "hdudispfucos.h"            /* uC/OS routines for the real-time kernel */
##include "hdulibbasictypes.h"      /* Standard basic data type definitions */
##include "hdudispfpara.h"     /* prototype for builds faults, message and system information */
##include "hdudispfpanel.h"           /* Contains functions prototypes of panel.*/
##include "hdudispfrtd.h"             /* Provide mapping for all A825 incoming parameters */
##include "hdudispfforeground.h"     /* contains the routines for foreground layer of the display */
##include "hdudispfarinc825.h"        /* Define the structure for an ARINC 825 Message. */
##include "hdudispfa825comm.h"        /* Routines for arinc 825 communication */
##include "hdudispfoscpu.h"           /* OS function declarations */
##include "hdudispfparams.h"     /* provides the tags for various parameters and parameter units */

#/* Updated as per PR100083*/
##include "hdudispfwdog.h"            /* Watch dog timer declarations */
##include "hdudispfdauprofile.h"   /* defines the constants for ARINC 825  Message Traffic.*/
##include "hdudispfpdidata.h" /* provides pdi declarations */
##include "hdulibcorecm7.h"  /* Cortex-M7 processor and core peripherals */
##include "hdudispfpdicheck.h" /* Provides PDI check declarations */
##include "hdudispfrterror.h"       /*provides stub routine for run time errors.*/
##include "hdudispfmdff.h"            /*  Description contains Fuel flow functionalities */
##include "hdudispflmsscu.h"  /* SCU rtd processing and error codes  */

##define STK_DEF_VAL   0xDEADDEADU
##define ZERO_TIME_OUT 0U
##define SEM_CNT_VAL   0U
##define MAX_FRAME_VAL 25U
##define BIT_15_SET    16384U
##define DU_POSITION_SFC 49169U
--------------------------------------------------------------------------------
--
-- TESTED FILE DECLARATIONS 
--
--------------------------------------------------------------------------------

-- Declarations of the global variables of the tested file

    #extern T_UINT8 Engine_count_app;
    
    #T_STEXTBOXDATA *Top_menu[10];
    #T_BOOL New_message;
    #T_UINT32 Can1_msg_cntr;
    #T_BOOL Both_dau_fail;
    #T_UINT16 Port1_label_count;
    #T_EIU Active_eiu;
    #T_BOOL Cool_down_select;
    #T_EPAGE_NUM Page_num;
    #T_UINT8 Splash_done;
    #T_BOOL Du_identified;
    #T_UINT16 U16_message_words[3]; 
    #T_UINT16 Pbit_test_result;
    #T_BOOL Data_received;
    #T_UINT8 Du_position;
    #T_BOOL Long_press;
    # volatile  T_INT32 Itm_rx_buffer;
    #T_BOOL Demo_mode;
    #T_BOOL Fuel_flow_select;
	

-- Declarations of the temporary variable

    --Variable created to verify function OsSemPend    
    #T_OS_EVENT *PTU_ps_semaphore;    
    #T_UINT8 PTU_err;
    
    --Variable created to verify function OsSemAccept
    #T_OS_EVENT PTU_param_event;
    
    --Variable created to verify function RTDGetParam
    #T_PARAM_READING PTU_ps_dest[10];
    #T_UINT32 PTU_index =0;
    
    --Variable created to verify function OffsideProcessA825NSC
    #T_A825_MESSAGE PTU1_s_mess;
    
    --Variable created to verify function GlobalSettingsProcessNSC
    #T_A825_MESSAGE PTU2_s_mess;
    
    --Variable created to verify function OffsideProcessA825NOC
    #T_A825_MESSAGE PTU3_s_mess;
    
    --Variable created to verify function A429ProcessA825
    #T_A825_MESSAGE PTU4_s_mess;
    
    #T_PARAM_READING PTU_psdest;
    #T_STEXTBOXDATA PTU_ps_this_box;
    #T_A825_MESSAGE PTU_ps_xm;
    #T_UINT32 PTU_i = 0;
--------------------------------------------------------------------------------

BEGIN

    COMMENT Author Name      : Manju Kiran M
    COMMENT
    COMMENT File Name        : hdudispfapp_1.ptu
    COMMENT
    COMMENT Tested Functions : AppTask
    COMMENT                    CheckMsgCtrlArea
    COMMENT                    AppU32NOC
    COMMENT                    AppU32NSC
    COMMENT                    AppInit
    COMMENT
    COMMENT Assumptions and Constraints
    COMMENT <AC>
    COMMENT
    COMMENT Assumption(s):
    COMMENT None
    COMMENT
    COMMENT Constraint(s):
    COMMENT
    COMMENT 1. Source file "hdudispfapp.c" is modified for testing LLR "hdudispfapp-AppTask-DB-LLR-009". 
    COMMENT The while(TRUE) is modified for terminating the infinite loop.
    COMMENT 
    COMMENT Snippet of code is added in function 'AppTask':
    COMMENT
    COMMENT T_UINT16 PTU_count =0; /*local variable declared for testing purpose*/
    COMMENT ....
    COMMENT while(TRUE)
    COMMENT {
    COMMENT     .................
    COMMENT
    COMMENT   /*Modified for testing purpose to terminate infinite loop*/
    COMMENT   PTU_count++;
    COMMENT   if(PTU_count == 4)
    COMMENT   {
    COMMENT    break;
    COMMENT   } 
    COMMENT   else
    COMMENT   {
    COMMENT                                /*nothing*/
    COMMENT   }
    COMMENT     .................
    COMMENT     
    COMMENT }/*End of while loop*/
    COMMENT hence the loop cannot be verified for 0 and 1 time and FALSE condition.
    COMMENT
    COMMENT 2. Header file "hdulibcorecm7.h" is modified for testing "hdudispfapp-AppTask-DB-LLR-010".
    COMMENT The for(;;) is modified for terminating the infinite loop as "__NOP" is commented.
    COMMENT
    COMMENT Snippet of code is added in function 'NVICSystemReset':
    COMMENT 
    COMMENT T_UINT16 PTU_count =0; /*local variable declared for testing purpose*/
    COMMENT ....
    COMMENT  for(;;)      /*wait until reset */
    COMMENT  {
    COMMENT     /*__NOP();*/
    COMMENT     /*Modified for testing purpose to terminate infinite loop*/
    COMMENT     PTU_count++;
    COMMENT     if(PTU_count == 4)
    COMMENT      {
    COMMENT       break;
    COMMENT      } 
    COMMENT      else
    COMMENT      {
    COMMENT              /*nothing*/
    COMMENT      }
    COMMENT ....
    COMMENT
    COMMENT 3. The for loop in function 'AppInit' cannot be covered for 0 and 1 loops as it is controlled
    COMMENT   by macros 'ZERO' and 'APP_TASK_STK_SIZE'
    COMMENT
    COMMENT 4. The ptu is split into 4 parts due to static dependency.
    COMMENT
    COMMENT 5. Header file "hdulibcorecm7.h" is modified for stubbing hardware address
    COMMENT     /*Commented for testing purpose*/
    COMMENT     /*#define SCB                 ((T_SCB       *)     SCB_BASE      ) */
    COMMENT     /* modified macro by stubbing hardware address for testing purpose*/
    COMMENT     T_SCB PTU_SCB;
    COMMENT </AC>

    COMMENT Equivalence Class Description
    COMMENT <ECD>
    COMMENT
    COMMENT Valid Class(es)
    COMMENT
    COMMENT Class 1
    COMMENT The function 'AppInit', calls the function 'OsSemCreate'.
    COMMENT
    COMMENT Class 2
    COMMENT The function 'AppInit', calls the function 'OsTaskCreate', to create a semaphore.
    COMMENT
    COMMENT Class 3
    COMMENT The function 'AppTask', calls the function 'Dma2dInit' to 
    COMMENT initialize the DMA2D.
    COMMENT
    COMMENT Class 4
    COMMENT The function 'AppTask', calls the function 'Dma2Init' to 
    COMMENT initialize the DMA2.
    COMMENT
    COMMENT Class 5
    COMMENT The function 'AppTask', calls the function 'ForegroundInit' to
    COMMENT initialize foreground draw routines.
    COMMENT
    COMMENT Class 6
    COMMENT The function 'AppTask', calls the function 'GrappInit' to
    COMMENT initialize the graphic draw routines.
    COMMENT
    COMMENT Class 7
    COMMENT The function 'AppTask', calls the function 'PdiDataInit' to
    COMMENT initialize the Pdi Data routines.
    COMMENT
    COMMENT Class 8
    COMMENT The function 'AppTask', calls the function 'CasInit' to
    COMMENT initialize the CAS draw routines.
    COMMENT
    COMMENT Class 9
    COMMENT In function 'AppTask', Pbit_Test_result is equal to ZERO.
    COMMENT
    COMMENT Class 10
    COMMENT In function 'AppTask', Pbit_Test_result is not equal to ZERO.
    COMMENT
    COMMENT Class 11
    COMMENT The function 'AppTask', calls the function 'OsSemAccept' to check the semaphore.
    COMMENT
    COMMENT Class 12
    COMMENT The function 'OsSemAccept', returns ZERO.
    COMMENT
    COMMENT Class 13
    COMMENT The function 'OsSemAccept', returns other than ZERO.
    COMMENT
    COMMENT Class 14
    COMMENT The function 'AppTask', calls the function 'OsSemPend' to 
    COMMENT pend on semaphore.
    COMMENT
    COMMENT Class 15
    COMMENT In function 'AppTask', toggle is equal to ZERO.
    COMMENT
    COMMENT Class 16
    COMMENT In function 'AppTask', toggle is not equal to ZERO.
    COMMENT
    COMMENT Class 17
    COMMENT The function 'AppTask', calls the function 'ForegroundReDraw1' to
    COMMENT re-draw the foreground.
    COMMENT 
    COMMENT Class 18
    COMMENT The function 'AppTask', calls the function 'PbsGet' to
    COMMENT update the PBS reading.
    COMMENT
    COMMENT Class 19
    COMMENT The function 'AppTask', calls the function 'GrappApp' to
    COMMENT execute graphic application.
    COMMENT
    COMMENT Class 20
    COMMENT The function 'AppTask', calls the function 'ForegroundReDraw2' to
    COMMENT update all widget positions and draw the widgets.
    COMMENT
    COMMENT Class 21
    COMMENT The function 'AppTask', calls the function 'ForegroundReDraw3' to
    COMMENT update all widget positions and draw the widgets.
    COMMENT
    COMMENT Class 22
    COMMENT In function 'AppTask', Data_received is equal to ZERO.
    COMMENT
    COMMENT Class 23
    COMMENT In function 'AppTask', Data_received is not equal to ZERO.
    COMMENT
    COMMENT Class 24
    COMMENT The function 'AppTask', calls the function 'GlobalSettingsPush' to
    COMMENT to backup any global setting changes.
    COMMENT
    COMMENT Class 25
    COMMENT The function 'AppTask', calls the function 'OffsideHeartBeat' to
    COMMENT send the heartbeat message.
    COMMENT
    COMMENT Class 28
    COMMENT The function 'AppTask', calls the function 'CheckMsgCtrlArea' to
    COMMENT check for Message Control area.
    COMMENT
    COMMENT Class 29
    COMMENT The function 'CheckMsgCtrlArea',calls the function 'RTDGetParam' to read
    COMMENT the message from RTD.
    COMMENT
    COMMENT Class 30
    COMMENT In function 'CheckMsgCtrlArea',stat of T_PARAM_READING variable is equal
    COMMENT to MISSING.
    COMMENT
    COMMENT Class 31
    COMMENT In function 'CheckMsgCtrlArea',stat of T_PARAM_READING variable is not 
    COMMENT equal to MISSING.
    COMMENT
    COMMENT Class 33
    COMMENT The function 'CheckMsgCtrlArea',calls the function 'RTDGetParamDdw'
    COMMENT
    COMMENT Class 34
    COMMENT The function 'CheckMsgCtrlArea',calls the function 'OffsideSwitchScreen'
    COMMENT
    COMMENT Class 35
    COMMENT The function 'CheckMsgCtrlArea',calls the function 'TextBoxOn'
    COMMENT
    COMMENT Class 36
    COMMENT In function 'CheckMsgCtrlArea',count value is not equal to Port1_label_count.
    COMMENT
    COMMENT Class 37
    COMMENT In function 'CheckMsgCtrlArea',count value is equal to Port1_label_count.
    COMMENT 
    COMMENT Class 40
    COMMENT In function 'CheckMsgCtrlArea',heartbeat status is equal to TRUE.
    COMMENT
    COMMENT Class 41
    COMMENT In function 'CheckMsgCtrlArea',heartbeat status is equal to FALSE.
    COMMENT
    COMMENT Class 42
    COMMENT In function 'CheckMsgCtrlArea',Du_identified is equal to TRUE.
    COMMENT
    COMMENT Class 43
    COMMENT In function 'CheckMsgCtrlArea',Du_identified is equal to FALSE.
    COMMENT
    COMMENT Class 44
    COMMENT The function 'AppTask', calls 'WdogKickWatchDog'.
    COMMENT 
    COMMENT Class 45
    COMMENT In function 'AppU32NOC', a825_bus is equal to A825_1.
    COMMENT
    COMMENT Class 46
    COMMENT In function 'AppU32NOC', a825_bus is not equal to A825_1.
    COMMENT
    COMMENT Class 47
    COMMENT The function 'AppU32NOC', calls the function 'A429ProcessA825'.
    COMMENT
    COMMENT Class 48
    COMMENT The function 'AppU32NOC', calls the function 'OffsideProcessA825NOC'.
    COMMENT
    COMMENT Class 49
    COMMENT In function 'AppU32NSC', a825_bus is equal to A825_1.
    COMMENT
    COMMENT Class 50
    COMMENT In function 'AppU32NSC', a825_bus is not equal to A825_1.
    COMMENT
    COMMENT Class 51
    COMMENT The function 'AppU32NSC', calls the function 'OffsideProcessA825NSC'.
    COMMENT
    COMMENT Class 52
    COMMENT The function 'AppU32NSC', calls the function 'GlobalSettingsProcessNSC'.
    COMMENT
    COMMENT Class 53
    COMMENT In function 'CheckMsgCtrlArea',Data_received is equal to zero.
    COMMENT
    COMMENT Class 54
    COMMENT In function 'CheckMsgCtrlArea',Data_received is not equal to zero.
    COMMENT
    COMMENT Class 55
    COMMENT In function 'CheckMsgCtrlArea',Splash_done is equal to TRUE.
    COMMENT
    COMMENT Class 56
    COMMENT In function 'CheckMsgCtrlArea',Splash_done is equal to FALSE.
    COMMENT
    COMMENT Class 57
    COMMENT In function 'CheckMsgCtrlArea',Du_position is equal to one.
    COMMENT
    COMMENT Class 58
    COMMENT In function 'CheckMsgCtrlArea',Du_position is equal to other than one.
    COMMENT
    COMMENT Class 59
    COMMENT In function 'CheckMsgCtrlArea',Both_dau_fail is equal to TRUE.
    COMMENT
    COMMENT Class 60
    COMMENT In function 'CheckMsgCtrlArea',Both_dau_fail is equal to FALSE.
    COMMENT
    COMMENT Class 61
    COMMENT In function 'CheckMsgCtrlArea',Can1_msg_cntr is equal to four.
    COMMENT
    COMMENT Class 62
    COMMENT In function 'CheckMsgCtrlArea',Can1_msg_cntr is greater than four.
    COMMENT
    COMMENT Class 63
    COMMENT In function 'CheckMsgCtrlArea',Can1_msg_cntr is less than four.
    COMMENT
    COMMENT Class 64
    COMMENT The function 'CheckMsgCtrlArea',calls 'CheckforNewMessages'.
    COMMENT
    COMMENT Class 65
    COMMENT In the function 'CheckMsgCtrlArea', function 'CheckforNewMessages' returns zero.
    COMMENT
    COMMENT Class 66
    COMMENT In the function 'CheckMsgCtrlArea', function 'CheckforNewMessages' returns other than zero.
    COMMENT
    COMMENT Class 67
    COMMENT The function 'AppTask', calls 'A429Init'.
    COMMENT 
    COMMENT Class 68
    COMMENT In function 'AppTask', Long_press is equal to TRUE.
    COMMENT 
    COMMENT Class 69
    COMMENT In function 'AppTask', Long_press is equal to FALSE.
    COMMENT 
    COMMENT Class 70
    COMMENT The function 'AppTask', calls 'A8251Xmit'.
    COMMENT 
    COMMENT Class 71
    COMMENT The function 'AppTask', calls 'OsTimeDly'.
    COMMENT 
    COMMENT Class 72
    COMMENT The function 'AppTask', calls 'NVICSystemReset'.
    COMMENT 
    COMMENT Class 73
    COMMENT In function 'AppTask', frame counter is equal to MAX_FRAME_VAL.
    COMMENT 
    COMMENT Class 74
    COMMENT In function 'AppTask', frame counter is not equal to MAX_FRAME_VAL.
    COMMENT
    COMMENT Class 75
    COMMENT The function 'AppTask', calls 'A8251Init'.
    COMMENT
    COMMENT Class 76
    COMMENT The function 'AppTask', calls 'A8252Init'.
    COMMENT
    COMMENT Class 77
    COMMENT The function 'AppTask', calls 'A825CommInit1'.
    COMMENT
    COMMENT Class 78
    COMMENT The function 'AppTask', calls 'A825CommInit2'.
    COMMENT
    COMMENT Class 79
    COMMENT The function 'AppTask', calls 'GlobalSettingsPull'.
    COMMENT
    COMMENT Class 82
    COMMENT The function 'CheckMsgCtrlArea', calls 'OffsideCoolTimer'.
    COMMENT
    COMMENT Class 83
    COMMENT The function 'CheckMsgCtrlArea', calls 'GlobalSettingsSetEIU'
    COMMENT
    COMMENT Class 84
    COMMENT In function 'CheckMsgCtrlArea',counter value is greater than Port1_label_count.
    COMMENT
    COMMENT Class 85
    COMMENT In function 'CheckMsgCtrlArea',counter value is equal to Port1_label_count.
    COMMENT
    COMMENT Class 86
    COMMENT In function 'CheckMsgCtrlArea',counter value is less than Port1_label_count.
    COMMENT
    COMMENT Class 87
    COMMENT In function 'AppTask', 'GlobalSettingsCheckTrig' is called
    COMMENT
    COMMENT Class 88
    COMMENT In function 'AppTask', 'GlobalSettingsPushPeakLog' is called
    COMMENT
    COMMENT Class 89
    COMMENT In function "AppTask", Demo_mode is equal to TRUE 
    COMMENT
    COMMENT Class 90
    COMMENT In function "AppTask", Demo_mode is equal to FALSE 
    COMMENT    
    COMMENT Class 91
    COMMENT In function "AppTask", toggle log value is equal to PEAK_PICKER_RATE 
    COMMENT
    COMMENT Class 92
    COMMENT In function "AppTask", toggle log value is not equal to PEAK_PICKER_RATE
    COMMENT
    COMMENT Class 93
    COMMENT In function "AppTask", re pull counter is less than TEN
    COMMENT    
    COMMENT Class 94
    COMMENT In function "AppTask",  re pull counter is greater than TEN
    COMMENT 
    COMMENT Invalid Class(es)
    COMMENT Class 80
    COMMENT In function 'AppU32NSC', NULL is passed as parameter for s_mess.
    COMMENT
    COMMENT Class 81
    COMMENT In function 'AppU32NOC', NULL is passed as parameter for s_mess.
    COMMENT
    COMMENT Class 95
    COMMENT The function 'AppTask', calls the function 'MenuInitialize' to Initialize the Menu Items
    COMMENT
    COMMENT Class 96
    COMMENT The function 'AppTask', calls the function 'PdiDataCheck' Function to check PDI parameters 
    COMMENT
    COMMENT Class 97
    COMMENT The function 'AppTask', calls the function 'CalibrationLabels' Calibration labels conversion
    COMMENT 
    COMMENT Class 98
    COMMENT The function 'AppTask', calls the function 'OffsideCalibration'
    COMMENT
    COMMENT Class 99
    COMMENT The function 'AppTask', Engine_count_app greaterthan (NUMBEROFENGINES-1)
    COMMENT
    COMMENT Class 100
    COMMENT The function 'AppTask', Engine_count_app equal to (NUMBEROFENGINES-1)
    COMMENT
    COMMENT Class 101
    COMMENT The function 'AppTask', Engine_count_app lessthan (NUMBEROFENGINES-1)   
    COMMENT 
    COMMENT Class 102
    COMMENT The function 'CheckMsgCtrlArea', calls 'OffsideFuelFlow'.
    COMMENT 
    COMMENT Class 103
    COMMENT The function 'AppTask', calls 'PushFaultLog'.		
    COMMENT	
    COMMENT
    COMMENT </ECD>

--------------------------------------------------------------------------------
--
-- STUB DECLARATIONS OF THE TESTED OR INTEGRATED UNITS
--
--------------------------------------------------------------------------------
SIMUL

    DEFINE STUB hdudispfapp_c 200
        
        -- Parameter *task is made _no since address of static function cannot be expected
        #T_UBYTE OsTaskCreate(void _no(  *task)(void* pd), void _in *pdata, void _in *pstk, T_UBYTE _in prio)
        #{
        #   (*task)(pdata);
        #}
        
        #T_OS_EVENT* OsSemCreate(T_UWORD _in count);
    
        #void OffsideProcessA825NSC(T_A825_MESSAGE _no *s_mess)
        #{
        #   PTU1_s_mess = *s_mess;
        #}
        
        #void GlobalSettingsProcessNSC(T_A825_MESSAGE _no *s_mess)
        #{
        #   PTU2_s_mess = *s_mess;
        #}
            
        #void OffsideProcessA825NOC(T_A825_MESSAGE _no *s_mess)
        #{
        #   PTU3_s_mess = *s_mess;
        #}
            
        #void A429ProcessA825(T_A825_MESSAGE _no *s_mess)
        #{
        #   PTU4_s_mess = *s_mess;
        #}
            
        #void TextBoxOn(T_STEXTBOXDATA _no *ps_this_box)
        #{
        #   PTU_ps_this_box = *ps_this_box;
        #}
        
        #T_UINT32 CheckforNewMessages(void);
        
        --Parameter '*ps_dest' is made _no since it is address of a Local variable
        #void RTDGetParam(T_UINT16 _in a429_tag, T_PARAM_READING _no *ps_dest)
        #{
        #   *ps_dest = PTU_ps_dest[PTU_index++];
        #}
            
        #void GlobalSettingsSetEIU(T_EIU  _in eiu);
        #void OffsideCoolTimer(T_UINT8  _in cool_timer_state);
        #void OffsideSwitchScreen(T_UINT8 _in u8_page_num);
        
        --Parameter '*ps_dest' is made _no since it is address of a Local variable
        #void RTDGetParamDdw(T_UINT16 _in a429_tag, T_PARAM_READING _no *ps_dest)
        #{
        #   *ps_dest = PTU_psdest;
        #}
        
        #void OffsideHeartBeat(void);
        #void GlobalSettingsPush(void);
        #void ForegroundReDraw3(void);
        #void ForegroundReDraw2(void);
        #void GrappApp(void);
        #void OsTimeDly(T_UWORD _in ticks);
        
        --Parameter '*ps_xm' is made _no since it is address of a Local variable
        #T_A825_XMITRESULT A8251Xmit(T_A825_MESSAGE _no *ps_xm)
        #{
        #   PTU_ps_xm = *ps_xm;
        #}
        
        #void PbsGet(void);
        #void ForegroundReDraw1(void);
        
        --Parameter '*p_event' is made _no since it is address of a Local variable
        --Parameter '*error' is made _no since it is address of a Local variable 
        #void OsSemPend(T_OS_EVENT _no *p_event, T_UWORD _in time_out, T_UBYTE _no *error)
        #{
        #   PTU_ps_semaphore = p_event;
        #   PTU_err = *error;
        #}
            
        #T_INT16 OsSemAccept(T_OS_EVENT _no *param_event)
        #{
        #   PTU_param_event = *param_event; 
        #}
            
        #void GlobalSettingsPull(void);
        #void A825CommInit2(void);
        #void A825CommInit1(void);
        #void A8252Init(void);
        #void A8251Init(void);
        #void CasInit(void);
        #void PdiDataInit();
        #void A429Init();
        #void GrappInit(void);
        #void ForegroundInit(void);
        #void Dma2Init(void);
        #void WdogKickWatchDog(void);
        #void Dma2dInit(void);
        #void GlobalSettingsCheckTrig(void);
        #void GlobalSettingsPushPeakLog(void);
		#void CalibrationLabels(); 
		#void PdiDataCheck();
		#void MenuInitialize(); 	
	    #void OffsideCalibration(T_UINT8  _in loop_i); 
        #void PushFaultLog(void);		
        #void OffsideFuelFlow(T_UINT8  _in Fuel_flow_state);		
    
    END DEFINE
    
ELSE_SIMUL

    -- No action defined as of now if the module is not simulated

END SIMUL

--------------------------------------------------------------------------------
--
-- ENVIRONMENTS DECLARATIONS
--
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
-- TESTED FILE ENVIRONNEMENT
--------------------------------------------------------------------------------

-- Environment of the file hdudispfapp.c
ENVIRONMENT ENV_hdudispfapp_c

  ARRAY App_task_stk,       init = { others => 0 },     ev = init

  VAR Sem_app_task,         init = NIL,                 ev = init

END ENVIRONMENT -- ENV_hdudispfapp_c

USE ENV_hdudispfapp_c

--------------------------------------------------------------------------------
--
-- SERVICES DECLARATIONS
--
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
-- Declaration of the service AppInit
--------------------------------------------------------------------------------
SERVICE AppInit
SERVICE_TYPE extern


TEST 1
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD>
    COMMENT [hdudispfapp-AppInit-DB-LLR-001]
    COMMENT The function 'AppInit' sets Sem_app_task to return value obtained by calling the function
    COMMENT 'OsSemCreate' with SEM_CNT_VAL as its parameter to initialize semaphore for application task. 
    COMMENT Equivalence Class 1  
    COMMENT
    COMMENT [hdudispfapp-AppInit-DB-LLR-002]
    COMMENT The function 'AppInit' initializes all the members of App stack of application task stack
    COMMENT to STK_DEF_VAL.
    COMMENT Equivalence Class None 
    COMMENT
    COMMENT [hdudispfapp-AppInit-DB-LLR-003]
    COMMENT The function 'AppInit' create the application Task by calling function OsTaskCreate with parameters
    COMMENT pointer to function AppTask, NULL, reference to top of stack of application task stack and APP_TASK_PRIO. 
    COMMENT Equivalence Class 2
    COMMENT
    COMMENT [hdudispfapp-AppTask-DB-LLR-014]
    COMMENT The function 'AppTask' sets p_data to sum of p_data and 0.
    COMMENT Equivalence Class None
    COMMENT
    COMMENT [hdudispfapp-AppTask-DB-LLR-002]
    COMMENT The function 'AppTask' calls the function 'Dma2dInit' to initialize the DMA2D and calls the function 
    COMMENT 'WdogKickWatchDog'.
    COMMENT Equivalence Class 3,44
    COMMENT
    COMMENT [hdudispfapp-AppTask-DB-LLR-003]
    COMMENT The function 'AppTask' calls the function 'Dma2Init' to initialize the DMA2 and calls the function 
    COMMENT 'WdogKickWatchDog'.
    COMMENT Equivalence Class 4,44
    COMMENT
    COMMENT [hdudispfapp-AppTask-DB-LLR-012]
    COMMENT The function 'AppTask' calls the function 'ForegroundInit' to initialize the foreground draw
    COMMENT routines and calls the function 'WdogKickWatchDog'.
    COMMENT Equivalence Class 5,44
    COMMENT
    COMMENT [hdudispfapp-AppTask-DB-LLR-004]
    COMMENT The function 'AppTask' calls the function 'GrappInit' to initialize the graphic draw routines
    COMMENT and calls the function 'WdogKickWatchDog'.
    COMMENT Equivalence Class 6,44
    COMMENT
    COMMENT [hdudispfapp-AppTask-DB-LLR-013]
    COMMENT The function 'AppTask' calls the function 'A429Init' and calls the function 'WdogKickWatchDog'.
    COMMENT Equivalence Class 44,67
    COMMENT
    COMMENT [hdudispfapp-AppTask-DB-LLR-005]
    COMMENT The function 'AppTask' calls the function 'PdiDataInit' to initialize the Pdi Data routines
    COMMENT and calls the function 'WdogKickWatchDog'.
    COMMENT Equivalence Class 7,44
    COMMENT
    COMMENT [hdudispfapp-AppTask-DB-LLR-006]
    COMMENT The function 'AppTask' calls the function 'CasInit' to initialize the CAS draw routines
    COMMENT and calls the function 'WdogKickWatchDog'.
    COMMENT Equivalence Class 8,44
    COMMENT
    COMMENT [hdudispfapp-AppTask-DB-LLR-007]
    COMMENT The function 'AppTask' does the following 
    COMMENT 1. Calls the function 'A8251Init' to initialize the A825 HW channel and calls the function 'WdogKickWatchDog'.
    COMMENT 2. Calls the function 'A8252Init' to initialize the A825 HW channel and calls the function 'WdogKickWatchDog'.
    COMMENT 3. Calls the function 'A825CommInit1' and calls the function 'WdogKickWatchDog'.
    COMMENT 4. Calls the function 'A825CommInit2' and calls the function 'WdogKickWatchDog'. 
    COMMENT 5. Calls the function 'GlobalSettingsPull' to Request Global settings from the 429 Interface board.
    COMMENT 6.calls the function 'MenuInitialize' to Initialize the Menu Items
    COMMENT 7.calls the function 'PdiDataCheck' Function to check PDI parameters 
    COMMENT 8.calls the function 'CalibrationLabels' Calibration labels conversion
    COMMENT Equivalence Class 44,75,76,77,78,79,95,96,97
    COMMENT
    COMMENT [hdudispfapp-AppTask-DB-LLR-008]
    COMMENT The function 'AppTask' does the following
    COMMENT
    COMMENT In 1st and 2nd iteration calls function 'WdogKickWatchDog' when return value from the function 'OsSemAccept'
    COMMENT with parameter Sem_app_task is not equal to zero
    COMMENT
    COMMENT In 3rd iteration does nothing when return value from the function 'OsSemAccept'
    COMMENT with parameter Sem_app_task is equal to zero(Two or more loops coverage)
    COMMENT Equivalence Class 11,12,13,44
    COMMENT
    COMMENT [hdudispfapp-AppTask-DB-LLR-009]
    COMMENT The function 'AppTask' loops forever and in each loop does the following
    COMMENT 1. Pends on semaphore by calling the function 'OsSemPend' with the parameters Sem_app_task,
    COMMENT  ZERO_TIME_OUT and address of local error code.
    COMMENT 2. Calls the function 'WdogKickWatchDog'
    COMMENT 3. Calls the function 'GlobalSettingsCheckTrig'
    COMMENT 4. Toggle log value is incremented by one.
    COMMENT 5. Toggle log value is set to zero and GlobalSettingsPushPeakLog is called 
    COMMENT    when Data_received is not equal to ZERO and Demo_mode is equal to FALSE 
    COMMENT    and toggle log value is equal to PEAK_PICKER_RATE.
    COMMENT 6. Toggle log value is reset when PEAK_PICKER_RATE is equal to toggle log value
    COMMENT   This checks FXX MCDC coverage.
    COMMENT 7.Call the function PushFaultLog
    COMMENT Equivalence Class 14,44,87,88,91,23,90,103
    COMMENT
    COMMENT [hdudispfapp-AppTask-DB-LLR-010]
    COMMENT In function 'AppTask',
    COMMENT
    COMMENT for 0th and 2nd iteration toggle value is not equal to zero :
    COMMENT 1.Increments frame counter by 1.
    COMMENT 2.Calls the function 'ForegroundReDraw1' to re draw the foreground.
    COMMENT 3.Calls the function 'PbsGet' to update the PBS reading.
    COMMENT 4.Does nothing when Long_press is equal to FALSE.
    COMMENT 5.Calls the function 'GrappApps to execute graphic application (Menu).
    COMMENT 6.Calls the function 'ForegroundReDraw2' and 'ForegroundReDraw3' to update all widget positions
    COMMENT  and draw the widgets.
    COMMENT 7.Calls GlobalSettingsPush to backup any global setting changes when
    COMMENT   Data_received is not equal to zero AND  Demo_Mode is FALSE.
    COMMENT 8. Does the following when Data_received is equal to zero ,
    COMMENT    a. Sets the value of re pull counter(counter variable used to read global settings ) to ELEVEN 
    COMMENT    b. Calls  GlobalSettingsPull to read global settings when re pull counter is greater     
    COMMENT than TEN otherwise increment the re pull counter by one
    COMMENT 9.Calls the function OffsideHeartBeat to send the heartbeat message and set frame counter 
    COMMENT to 0 when frame counter is equal to MAX_FRAME_VAL.
    COMMENT 10.Calls CheckMsgCtrlArea to check for Message Control area when Pbit_test_result is equal to ZERO.
    COMMENT toggle is a local variable, hence it is not expected in the Output section and 
    COMMENT the functionality of the requirement is verified implicitly.
    COMMENT 11. calls the function 'OffsideCalibration' with Engine_count_app as parameter
    COMMENT 12. if Engine_count_app is greaterthan (NUMBEROFENGINES-1)
    COMMENT     set Engine_count_app to zero
    COMMENT 13.Engine_count_app is set to Enginecout plus one
    COMMENT Equivalence Class 16,17,18,19,20,21,22,10,69,74,79,98,99
    COMMENT
    COMMENT [hdudispfapp-AppTask-DB-LLR-011]
    COMMENT In function 'AppTask',
    COMMENT 
    COMMENT for 1st and 3rd iteration toggle value is equal to zero :
    COMMENT i)Does nothing when the return value from the function 'OsSemAccept' with Sem_app_task as its parameter 
    COMMENT is other than zero.
    COMMENT ii)Does nothing when the return value from the function 'OsSemAccept' with Sem_app_task as its parameter 
    COMMENT is  equal to zero.
    COMMENT (Loop branches: 0 and 2 or more time)
    COMMENT toggle is a local variable, hence it is not expected in the Output section and 
    COMMENT the functionality of the requirement is verified implicitly.
    COMMENT Equivalence Class 11,12,13,15
    COMMENT
    COMMENT </TD>

    ELEMENT

        COMMENT INPUT SECTION:
        
            --sets the value of 'Data_received'
            VAR Data_received,                              init = FALSE,                   ev = init
            
            --sets the value of global variable 'Long_press'
            VAR Long_press,                                 init = FALSE,                   ev = init
            
            --sets the value of global variable 'Pbit_test_result'
            VAR Pbit_test_result,                           init = 5,                       ev = init
            
        COMMENT INPUT/OUTPUT SECTION:
        
            --sets the value of global variable 'Engine_count_app'
			VAR Engine_count_app,								init = 4,						ev = 2
        
        COMMENT OUTPUT SECTION:
        
            --holds the address of 'ps_semaphore'
            VAR Sem_app_task,                               init = NULL,                    ev = &PTU_ps_semaphore

            --holds the value of 'App_task_stk'
            ARRAY App_task_stk,                             init = { others => 0 },         ev = { others => STK_DEF_VAL }
                
        -- Stub Calls :
        SIMUL
            
            --Creates a Semaphore
            STUB OsSemCreate (SEM_CNT_VAL) &PTU_ps_semaphore
            
            --Creates the application Task
            STUB OsTaskCreate (NULL, &App_task_stk[APP_TASK_STK_SIZE], APP_TASK_PRIO) OS_NO_ERR
            
            --Initializes the DMA2D
            STUB Dma2dInit()
            
            --reloads watchdog counter
            STUB WdogKickWatchDog 1..17 => ()
            
            -- To check exceedance log trigger condition
            STUB GlobalSettingsCheckTrig 1..4 => ()
            
            --Initializes the DMA2
            STUB Dma2Init()
            
            --Initializes foreground draw routines
            STUB ForegroundInit()
            
            --Initializes the graphic draw routines
            STUB GrappInit()
            
            --creates the ARINC 429 task
            STUB A429Init ()
            
            --initializes the Pdi Data routines
            STUB PdiDataInit()
            
            --Initializes the CAS draw routines
            STUB CasInit()
            
            --Initializes ARINC 825 communication
            STUB A8251Init ()
            
            --Initializes ARINC 825 communication
            STUB A8252Init ()
            
            --Initializes the task to handle commands coming across the arinc 825 bus
            STUB A825CommInit1 ()
            
            --Initializes the task to handle commands coming across the arinc 825 bus
            STUB A825CommInit2()
			
			--Initialize the Menu Items
			STUB MenuInitialize()
			
			--Function to check PDI parameters
			STUB PdiDataCheck()
			
			--Calibration labels conversion
			STUB CalibrationLabels()
            
            --checks the semaphore
            STUB OsSemAccept() ONE
            STUB OsSemAccept() ONE
            STUB OsSemAccept() ZERO
            
            --pends an semaphore
            STUB OsSemPend 1..4 => (ZERO_TIME_OUT)
			
			--Calibration
			STUB OffsideCalibration 1 => (0)
			STUB OffsideCalibration 2 => (1)
            
            --toggles active frame buffer
            STUB ForegroundReDraw1 1..2 =>()
            
            --Update the PBS reading
            STUB PbsGet 1..2 => ()
            
            --Triggers the transmission of global settings from 429 board
            STUB GlobalSettingsPull ()
            
            --Execute graphic application
            STUB GrappApp 1..2 => ()
            
            --Update all widget positions
            STUB ForegroundReDraw2 1..2 => ()
            
            --Draw the widgets
            STUB ForegroundReDraw3 1..2 => ()
        
            --checks the semaphore
            STUB OsSemAccept () ONE
            STUB OsSemAccept () ONE
            STUB OsSemAccept () ZERO
            STUB OsSemAccept () ZERO
            
        END SIMUL
                
        -- Calling the Unit Under Test :
        #AppInit();
    
    END ELEMENT

END TEST -- TEST 1  

TEST 2
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD>
    COMMENT [hdudispfapp-AppTask-DB-LLR-010]
    COMMENT In function 'AppTask',
    COMMENT for 0th and 2nd iteration toggle value is not equal to zero :
    COMMENT 1.Increments frame counter by 1.
    COMMENT 2.Calls the function 'ForegroundReDraw1' to re draw the foreground.
    COMMENT 3.Calls the function 'PbsGet' to update the PBS reading.
    COMMENT 4.Does nothing when Long_press is equal to FALSE.
    COMMENT 5.Calls the function 'GrappApps to execute graphic application (Menu).
    COMMENT 6.Calls the function 'ForegroundReDraw2' and 'ForegroundReDraw3' to update all widget positions
    COMMENT  and draw the widgets.
    COMMENT 7.Calls 'GlobalSettingsPush' to backup any global setting changes when Data_received is not 
    COMMENT   equal to zero.
    COMMENT 8.Does nothing when frame counter is not equal to MAX_FRAME_VAL.
    COMMENT 9.Calls 'CheckMsgCtrlArea' to check for Message Control area when Pbit_test_result is equal to ZERO.
    COMMENT toggle is a local variable, hence it is not expected in the Output section and 
    COMMENT the functionality of the requirement is verified implicitly.
    COMMENT 11. calls the function 'OffsideCalibration' with Engine_count_app as parameter
    COMMENT 12. set Engine_count_app equal to (NUMBEROFENGINES-1)
    COMMENT set Engine_count_app plus one
    COMMENT Equivalence Class 17,18,19,20,21,23,24,9,28,69,74,100
    COMMENT
    COMMENT [hdudispfapp-AppTask-DB-LLR-011]
    COMMENT In function 'AppTask',
    COMMENT 
    COMMENT for 1st and 3rd iteration toggle value is equal to zero :
    COMMENT i)Does nothing when the return value from the function 'OsSemAccept' with Sem_app_task as its parameter 
    COMMENT is other than zero.
    COMMENT ii)Does nothing when the return value from the function 'OsSemAccept' with Sem_app_task as its parameter 
    COMMENT is  equal to zero.
    COMMENT (Loop branches: 0 and 1 time)
    COMMENT Equivalence Class 11,12,13,15
    COMMENT
    COMMENT [hdudispfapp-CheckMsgCtrlArea-DB-LLR-001]
    COMMENT The function 'CheckMsgCtrlArea' calls the function 'RTDGetParamDdw' with 0 and address of 
    COMMENT T_PARAM_READING variable as its parameter to check for heart beat message status and
    COMMENT sets U16_message_words with index zero to U16_message_words with index zero bitwise OR with one
    COMMENT and set previous heartbeat status to TRUE when stat of T_PARAM_READING variable is equal to MISSING
    COMMENT Equivalence Class 33,30
    COMMENT
    COMMENT [hdudispfapp-CheckMsgCtrlArea-DB-LLR-002]
    COMMENT The function 'CheckMsgCtrlArea' does nothing when counter is greater than Port1_label_count
    COMMENT (loop covered for ZERO times)
    COMMENT Equivalence Class 84
    COMMENT
    COMMENT [hdudispfapp-CheckMsgCtrlArea-DB-LLR-003]
    COMMENT The function 'CheckMsgCtrlArea' sets U16_message_words with index 0 to result of bitwise OR of 
    COMMENT U16_message_words with index 0 and TWO when Port1_label_count is equal to count. 
    COMMENT Equivalence Class 37
    COMMENT
    COMMENT [hdudispfapp-CheckMsgCtrlArea-DB-LLR-004]
    COMMENT The function 'CheckMsgCtrlArea' sets U16_message_words with index 0 to result of bitwise OR of 
    COMMENT U16_message_words with index 0 and BIT_15_SET when Both_dau_fail is TRUE.
    COMMENT Equivalence Class 59
    COMMENT
    COMMENT [hdudispfapp-CheckMsgCtrlArea-DB-LLR-005]
    COMMENT The function 'CheckMsgCtrlArea' sets Can1_msg_cntr to FOUR and U16_message_words with index 1 to bitwise OR 
    COMMENT of U16_message_words with index 1 and TWO when Can1_msg_cntr is equal to FOUR.
    COMMENT Equivalence Class 61
    COMMENT
    COMMENT [hdudispfapp-CheckMsgCtrlArea-DB-LLR-006]
    COMMENT The function 'CheckMsgCtrlArea' does nothing when return value of CheckforNewMessages is equal to zero.
    COMMENT Equivalence Class 64,65
    COMMENT </TD>

    ELEMENT

        COMMENT INPUT SECTION:
        
            --sets the value of 'Data_received'
            VAR Data_received,                              init = TRUE,                    ev = init
            
            --sets the value of global variable 'Long_press'
            VAR Long_press,                                 init = FALSE,                   ev = init
            
            --sets the value of global variable 'Pbit_test_result'
            VAR Pbit_test_result,                           init = 0,                       ev = init
            
            --variable 'PTU_psdest'is used to verify 'ps_dest' of function 'RTDGetParamDdw'
            VAR PTU_psdest.stat,                            init = MISSING,                 ev = init
            
            --sets the value of global variable 'Port1_label_count'
            VAR Port1_label_count,                          init = 0,                       ev = init
            
            --sets the value of global variable 'Both_dau_fail'
            VAR Both_dau_fail,                              init = TRUE,                    ev = init
            
        COMMENT INPUT/OUTPUT SECTION:
        
            --sets the value of global variable 'Can1_msg_cntr'
            VAR Can1_msg_cntr,                              init = 4,                       ev = 4
			
			--sets the value of global variable 'Engine_count_app'
			VAR Engine_count_app,								init = 3,						ev = 1
        
        COMMENT OUTPUT SECTION:
        
            --holds the address of 'ps_semaphore'
            VAR Sem_app_task,                               init = NULL,                    ev = &PTU_ps_semaphore

            --holds the value of 'App_task_stk'
            ARRAY App_task_stk,                             init = { others => 0 },         ev = { others => STK_DEF_VAL }
                
            --holds the value of global array 'U16_message_words'   
            VAR U16_message_words[0],                       init = 0,                       ev = 16387
            VAR U16_message_words[1],                       init = 0,                       ev = 2
            
        -- Stub Calls :
        SIMUL
            
            --Creates a Semaphore
            STUB OsSemCreate (SEM_CNT_VAL) &PTU_ps_semaphore
            
            --Creates the application Task
            STUB OsTaskCreate (NULL, &App_task_stk[APP_TASK_STK_SIZE], APP_TASK_PRIO) OS_NO_ERR
            
            --Initializes the DMA2D
            STUB Dma2dInit()
            
            --reloads watchdog counter
            STUB WdogKickWatchDog 1..16 => ()
            
            -- To check exceedance log trigger condition
            STUB GlobalSettingsCheckTrig 1..4 => ()
            
            -- To Transmit and save peak log data in NVRAM.
            STUB GlobalSettingsPushPeakLog()
            
            --Initializes the DMA2
            STUB Dma2Init()
            
            --Initializes foreground draw routines
            STUB ForegroundInit()
            
            --Initializes the graphic draw routines
            STUB GrappInit()
            
            --creates the ARINC 429 task
            STUB A429Init ()
            
            --Triggers the transmission of global settings from 429 board
            STUB GlobalSettingsPull ()
            
            --initializes the Pdi Data routines
            STUB PdiDataInit()
            
            --Initializes the CAS draw routines
            STUB CasInit()
            
            --Initializes ARINC 825 communication
            STUB A8251Init ()
            STUB  A8252Init ()
            
            --Initializes the task to handle commands coming across the arinc 825 bus
            STUB A825CommInit1 ()
            STUB A825CommInit2()
			
			--Initialize the Menu Items
			STUB MenuInitialize()
			
			--Function to check PDI parameters
			STUB PdiDataCheck()
			
			--Calibration labels conversion
			STUB CalibrationLabels()
            
            --checks the semaphore
            STUB OsSemAccept() ONE
            STUB OsSemAccept() ZERO
            
            --pends an semaphore
            STUB OsSemPend 1..4 => (ZERO_TIME_OUT)
			
			--Calibration
			STUB OffsideCalibration 1 => (3)
			STUB OffsideCalibration 2 => (0)
            
            --toggles active frame buffer
            STUB ForegroundReDraw1 1..2 =>()
            
            --Update the PBS reading
            STUB PbsGet 1..2 => ()
            
            --Execute graphic application
            STUB GrappApp 1..2 => ()
            
            --Update all widget positions
            STUB ForegroundReDraw2 1..2 => ()
            
            --copies the global settings to backup structure
            STUB GlobalSettingsPush 1..2 => ()
            
            --Draw the widgets
            STUB ForegroundReDraw3 1..2 => ()
        
            --reads the discrete word
            STUB RTDGetParamDdw 1..2 => (0)
            
            --checks for new messages
            STUB CheckforNewMessages 1..2 => () 0
            
            --checks the semaphore
            STUB OsSemAccept () ONE
            STUB OsSemAccept () ZERO
            STUB OsSemAccept () ZERO
			
            STUB PushFaultLog()
            
        END SIMUL
                
        -- Calling the Unit Under Test :
        #AppInit();
    
    END ELEMENT

END TEST -- TEST 2

TEST 3
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD>
    COMMENT
    COMMENT [hdudispfapp-CheckMsgCtrlArea-DB-LLR-002]
    COMMENT The function 'CheckMsgCtrlArea' does the following when counter is equal to Port1_label_count:
    COMMENT 1.Calls the function 'RTDGetParam' with counter and address of address of T_PARAM_READING variable
    COMMENT as its parameter.
    COMMENT 2.Increments the count by 1 when stat of T_PARAM_READING variable is equal to MISSING.
    COMMENT (Loop branches: 1 time)
    COMMENT Equivalence Class 29,31,85
    COMMENT
    COMMENT
    COMMENT [hdudispfapp-CheckMsgCtrlArea-DB-LLR-003]
    COMMENT The function 'CheckMsgCtrlArea' sets U16_message_words with index 0 to result of bitwise OR of 
    COMMENT U16_message_words with index 0 and negation  of TWO when Port1_label_count is not equal to count. 
    COMMENT Equivalence Class 36
    COMMENT 
    COMMENT [hdudispfapp-CheckMsgCtrlArea-DB-LLR-004]
    COMMENT The function 'CheckMsgCtrlArea' sets U16_message_words with index 0 to result of bitwise OR of 
    COMMENT U16_message_words with index 0 and negation when BIT_15_SET Both_dau_fail is FALSE.
    COMMENT Equivalence Class 60
    COMMENT
    COMMENT [hdudispfapp-CheckMsgCtrlArea-DB-LLR-005]
    COMMENT The function 'CheckMsgCtrlArea' sets Can1_msg_cntr to FOUR and U16_message_words with index 1 to bitwise OR 
    COMMENT of U16_message_words with index 1 and TWO when Can1_msg_cntr is greater than FOUR.
    COMMENT Equivalence Class 62
    COMMENT
    COMMENT
    COMMENT [hdudispfapp-CheckMsgCtrlArea-DB-LLR-006]
    COMMENT The function 'CheckMsgCtrlArea' sets New_message to TRUE and calls the function 'TextBoxOn' with Top_menu with
    COMMENT index5 as parameter when return value of CheckforNewMessages is greater than zero.
    COMMENT Equivalence Class 35,64,66
    COMMENT </TD>

    ELEMENT

        COMMENT INPUT SECTION:
        
            --sets the value of 'Data_received'
            VAR Data_received,                              init = FALSE,                   ev = init
            
            --sets the value of global variable 'Long_press'
            VAR Long_press,                                 init = FALSE,                   ev = init
            
            --sets the value of global variable 'Pbit_test_result'
            VAR Pbit_test_result,                           init = 0,                       ev = init
            
            --variable 'PTU_psdest'is used to verify 'ps_dest' of function 'RTDGetParamDdw'
            VAR PTU_psdest.stat,                            init = MISSING,                 ev = init
            
            --sets the value of global variable 'Port1_label_count'
            VAR Port1_label_count,                          init = 1,                       ev = init
            
            --sets the value of global variable 'Both_dau_fail'
            VAR Both_dau_fail,                              init = FALSE,                   ev = init
            
            --Function 'RTDGetParam' is verified through the variable 'PTU_ps_dest'
            VAR PTU_ps_dest[0].stat,                        init = PARAM_OK ,               ev = init
            
            --sets the value of global array 'Top_menu'
            VAR Top_menu[5],                                init = &PTU_ps_this_box,        ev = init
            
        COMMENT INPUT/OUTPUT SECTION:
        
            --sets the value of global variable 'Can1_msg_cntr'
            VAR Can1_msg_cntr,                              init = 5,                       ev = 4

            --Variable to verify function RTDGetParam
            VAR PTU_index,                                  init = 0,                       ev = 2
			
			--sets the value of global variable 'Engine_count_app'
			VAR Engine_count_app,								init = 1,						ev = 3
        
        COMMENT OUTPUT SECTION:
        
            --holds the address of 'ps_semaphore'
            VAR Sem_app_task,                               init = NULL,                    ev = &PTU_ps_semaphore

            --holds the value of 'App_task_stk'
            ARRAY App_task_stk,                             init = { others => 0 },         ev = { others => STK_DEF_VAL }
            
            --holds the value of global array 'U16_message_words'
            VAR U16_message_words[0],                       init = 0,                       ev = 1
            VAR U16_message_words[1],                       init = 0,                       ev = 2
            
            --holds the value of global variable 'New_message'
            VAR New_message,                                init = FALSE,                   ev = TRUE
            
        -- Stub Calls :
        SIMUL
            
            --Creates a Semaphore
            STUB OsSemCreate (SEM_CNT_VAL) &PTU_ps_semaphore
            
            --Creates the application Task
            STUB OsTaskCreate (NULL, &App_task_stk[APP_TASK_STK_SIZE], APP_TASK_PRIO) OS_NO_ERR
            
            --Initializes the DMA2D
            STUB Dma2dInit()
            
            --reloads watchdog counter
            STUB WdogKickWatchDog 1..17 => ()
            
            -- To check exceedance log trigger condition
            STUB GlobalSettingsCheckTrig 1..4 => ()
            
            --Initializes the DMA2
            STUB Dma2Init()
            
            --Initializes foreground draw routines
            STUB ForegroundInit()
            
            --Initializes the graphic draw routines
            STUB GrappInit()
            
            --creates the ARINC 429 task
            STUB A429Init ()
            
            --initializes the Pdi Data routines
            STUB PdiDataInit()
            
            --Initializes the CAS draw routines
            STUB CasInit()
            
            --Triggers the transmission of global settings from 429 board
            STUB GlobalSettingsPull()
            
            --Initializes ARINC 825 communication
            STUB A8251Init ()
            STUB  A8252Init ()
            
            --Initializes the task to handle commands coming across the arinc 825 bus
            STUB A825CommInit1 ()
            STUB A825CommInit2 ()
			
			--Initialize the Menu Items
			STUB MenuInitialize()
			
			--Function to check PDI parameters
			STUB PdiDataCheck()
			
			--Calibration labels conversion
			STUB CalibrationLabels()
            
            --checks the semaphore
            STUB OsSemAccept() ONE
            STUB OsSemAccept() ONE
            STUB OsSemAccept() ZERO
            
            --pends an semaphore
            STUB OsSemPend 1..4 => (ZERO_TIME_OUT)
			
			--Calibration
			STUB OffsideCalibration 1 => (1)
			STUB OffsideCalibration 2 => (2)
            
            --toggles active frame buffer
            STUB ForegroundReDraw1 1..2 =>()
            
            --Update the PBS reading
            STUB PbsGet 1..2 => ()
            
            --Execute graphic application
            STUB GrappApp 1..2 => ()
            
            --Update all widget positions
            STUB ForegroundReDraw2 1..2 => ()
            
            --Draw the widgets
            STUB ForegroundReDraw3 1..2 => ()
        
            --reads the discrete word
            STUB RTDGetParamDdw 1..2 => (0)
            
            --checks for new messages
            STUB CheckforNewMessages 1..2 => () 2
            
            --enables the text box
            STUB TextBoxOn 1..2 => ()
            
            --reads the message from RTD
            STUB RTDGetParam 1..2 => (1)
            
            --checks the semaphore
            STUB OsSemAccept 4..5  => () ZERO
            
        END SIMUL
                
        -- Calling the Unit Under Test :
        #AppInit();
    
    END ELEMENT

END TEST -- TEST 3

TEST 4
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD>
    COMMENT
    COMMENT [hdudispfapp-CheckMsgCtrlArea-DB-LLR-002]
    COMMENT i)The function 'CheckMsgCtrlArea' loop from counter 1 till counter is less than Port1_label_count
    COMMENT and does the following:
    COMMENT 1.Calls the function 'RTDGetParam' with counter and address of address of T_PARAM_READING variable
    COMMENT as its parameter.
    COMMENT 2.Increments the count by 1 when stat of T_PARAM_READING variable is equal to MISSING.
    COMMENT 
    COMMENT ii)The function 'CheckMsgCtrlArea' does the following when counter is equal to Port1_label_count:
    COMMENT 1.Calls the function 'RTDGetParam' with counter and address of address of T_PARAM_READING variable
    COMMENT as its parameter.
    COMMENT 2.Increments the count by 1 when stat of T_PARAM_READING variable is equal to MISSING.
    COMMENT Equivalence Class 29,30,85,86
    COMMENT
    COMMENT [hdudispfapp-CheckMsgCtrlArea-DB-LLR-005]
    COMMENT The function 'CheckMsgCtrlArea' sets U16_message_words with index 0 to result of bitwise AND of
    COMMENT U16_message_words with index 0 and negation of BIT_15_SET when Can1_msg_cntr is less than FOUR.
    COMMENT Equivalence Class 63
    COMMENT
    COMMENT </TD>

    ELEMENT

        COMMENT INPUT SECTION:
        
            --sets the value of 'Data_received'
            VAR Data_received,                              init = FALSE,                   ev = init
            
            --sets the value of global variable 'Long_press'
            VAR Long_press,                                 init = FALSE,                   ev = init
            
            --sets the value of global variable 'Pbit_test_result'
            VAR Pbit_test_result,                           init = 0,                       ev = init
            
            --variable 'PTU_psdest'is used to verify 'ps_dest' of function 'RTDGetParamDdw'
            VAR PTU_psdest.stat,                            init = MISSING,                 ev = init
            
            --sets the value of global variable 'Port1_label_count'
            VAR Port1_label_count,                          init = 5,                       ev = init
            
            --sets the value of global variable 'Both_dau_fail'
            VAR Both_dau_fail,                              init = FALSE,                   ev = init
            
            --sets the value of global variable 'Can1_msg_cntr'
            VAR Can1_msg_cntr,                              init = 2,                       ev = init
            
            --Function 'RTDGetParam' is verified through the variable 'PTU_ps_dest'
            VAR PTU_ps_dest[0..9].stat,                     init = MISSING ,                ev = init
            
        COMMENT INPUT/OUTPUT SECTION:
        
            --Variable to verify function RTDGetParam
            VAR PTU_index,                                  init = 0,                       ev = 10
			
			--sets the value of global variable 'Engine_count_app'
			VAR Engine_count_app,								init = 1,						ev = 3
        
        COMMENT OUTPUT SECTION:
        
            --holds the address of 'ps_semaphore'
            VAR Sem_app_task,                               init = NULL,                    ev = &PTU_ps_semaphore

            --holds the value of 'App_task_stk'
            ARRAY App_task_stk,                             init = { others => 0 },         ev = { others => STK_DEF_VAL }
            
            --holds the value of global array 'U16_message_words'
            VAR U16_message_words[0],                       init = 0,                       ev = 3
            VAR U16_message_words[1],                       init = 0,                       ev = 0
        
            
        -- Stub Calls :
        SIMUL
            
            --Creates a Semaphore
            STUB OsSemCreate (SEM_CNT_VAL) &PTU_ps_semaphore
            
            --Creates the application Task
            STUB OsTaskCreate (NULL, &App_task_stk[APP_TASK_STK_SIZE], APP_TASK_PRIO) OS_NO_ERR
            
            --Initializes the DMA2D
            STUB Dma2dInit()
            
            --reloads watchdog counter
            STUB WdogKickWatchDog 1..17 => ()
            
            -- To check exceedance log trigger condition
            STUB GlobalSettingsCheckTrig 1..4 => ()
            
            --Initializes the DMA2
            STUB Dma2Init()
            
            --Initializes foreground draw routines
            STUB ForegroundInit()
            
            --Initializes the graphic draw routines
            STUB GrappInit()
            
            --creates the ARINC 429 task
            STUB A429Init ()
            
            --initializes the Pdi Data routines
            STUB PdiDataInit()
            
            --Initializes the CAS draw routines
            STUB CasInit()
            
            --Initializes ARINC 825 communication
            STUB A8251Init ()
            STUB  A8252Init ()
            
            --Initializes the task to handle commands coming across the arinc 825 bus
            STUB A825CommInit1 ()
            STUB A825CommInit2 ()
			
			--Initialize the Menu Items
			STUB MenuInitialize()
			
			--Function to check PDI parameters
			STUB PdiDataCheck()
			
			--Calibration labels conversion
			STUB CalibrationLabels()
            
            --checks the semaphore
            STUB OsSemAccept() ONE
            STUB OsSemAccept() ONE
            STUB OsSemAccept() ZERO
            
            --pends an semaphore
            STUB OsSemPend 1..4 => (ZERO_TIME_OUT)
			
			--Calibration
			STUB OffsideCalibration 1 => (1)
			STUB OffsideCalibration 2 => (2)
            
            --toggles active frame buffer
            STUB ForegroundReDraw1 1..2 =>()
            
            --Update the PBS reading
            STUB PbsGet 1..2 => ()
            
            --Execute graphic application
            STUB GrappApp 1..2 => ()
            
            --Triggers the transmission of global settings from 429 board
            STUB GlobalSettingsPull ()
            
            --Update all widget positions
            STUB ForegroundReDraw2 1..2 => ()
            
            --Draw the widgets
            STUB ForegroundReDraw3 1..2 => ()
        
            --reads the discrete word
            STUB RTDGetParamDdw 1..2 => (0)
            
            --checks for new messages
            STUB CheckforNewMessages 1..2 => () 0
            
            --reads the message from RTD
            STUB RTDGetParam (1)
            STUB RTDGetParam (2)
            STUB RTDGetParam (3)
            STUB RTDGetParam (4)
            STUB RTDGetParam (5)
            STUB RTDGetParam (1)
            STUB RTDGetParam (2)
            STUB RTDGetParam (3)
            STUB RTDGetParam (4)
            STUB RTDGetParam (5)
            
            --checks the semaphore
            STUB OsSemAccept 4..5  => () ZERO
            
        END SIMUL
                
        -- Calling the Unit Under Test :
        #AppInit();
    
    END ELEMENT

END TEST -- TEST 4

TEST 5
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD>
    COMMENT
    COMMENT [hdudispfapp-CheckMsgCtrlArea-DB-LLR-001]
    COMMENT The function 'CheckMsgCtrlArea'does nothing when stat of T_PARAM_READING variable is not equal to MISSING.
    COMMENT Equivalence Class 31
    COMMENT
    COMMENT [hdudispfapp-CheckMsgCtrlArea-DB-LLR-016]
    COMMENT The function 'CheckMsgCtrlArea' does the following when stat of T_PARAM_READING variable is not equal to MISSING
    COMMENT i.Does nothing when Du_identified is FALSE.
    COMMENT ii.sets U16_message_words with index zero to U16_message_words with index zero bitwise AND with negation of one
    COMMENT (MCDC TFXX)
    COMMENT Equivalence Class 31,40,43,54,55 
    COMMENT
    COMMENT </TD>

    ELEMENT

        COMMENT INPUT SECTION:
        
            --sets the value of 'Data_received'
            VAR Data_received,                              init = TRUE,                    ev = init
                
            --sets the value of global variable 'Long_press'
            VAR Long_press,                                 init = FALSE,                   ev = init
            
            --sets the value of global variable 'Pbit_test_result'
            VAR Pbit_test_result,                           init = 0,                       ev = init
            
            --variable 'PTU_psdest'is used to verify 'ps_dest' of function 'RTDGetParamDdw'
            VAR PTU_psdest.stat,                            init = PARAM_OK,                ev = init
            
            --sets the value of global variable 'Port1_label_count'
            VAR Port1_label_count,                          init = 0,                       ev = init
            
            --sets the value of global variable 'Both_dau_fail'
            VAR Both_dau_fail,                              init = FALSE,                   ev = init
            
            --sets the value of global variable 'Can1_msg_cntr'
            VAR Can1_msg_cntr,                              init = 2,                       ev = init
            
            --sets the value of global variable 'Du_identified'
            VAR Du_identified,                              init = FALSE,                   ev = init
            
            --sets the value of global variable 'Splash_done'
            VAR Splash_done,                                init = TRUE,                    ev = init
            
            --sets the value of global variable 'Du_position'
            VAR Du_position,                                init = 2,                       ev = init
            
        COMMENT INPUT/OUTPUT SECTION:
        
            --sets the value of global variable 'Engine_count_app'
			VAR Engine_count_app,								init = 1,						ev = 3
        
        COMMENT OUTPUT SECTION:
        
            --holds the address of 'ps_semaphore'
            VAR Sem_app_task,                               init = NULL,                    ev = &PTU_ps_semaphore

            --holds the value of 'App_task_stk'
            ARRAY App_task_stk,                             init = { others => 0 },         ev = { others => STK_DEF_VAL }
            
            --holds the value of global array 'U16_message_words'
            VAR U16_message_words[0],                       init = 0,                       ev = 2
            VAR U16_message_words[1],                       init = 0,                       ev = 0
            
        -- Stub Calls :
        SIMUL
            
            --Creates a Semaphore
            STUB OsSemCreate (SEM_CNT_VAL) &PTU_ps_semaphore
            
            --Creates the application Task
            STUB OsTaskCreate (NULL, &App_task_stk[APP_TASK_STK_SIZE], APP_TASK_PRIO) OS_NO_ERR
            
            --Initializes the DMA2D
            STUB Dma2dInit()
            
            --reloads watchdog counter
            STUB WdogKickWatchDog 1..17 => ()
            
            -- To check exceedance log trigger condition
            STUB GlobalSettingsCheckTrig 1..4 => ()
            
            -- To Transmit and save peak log data in NVRAM.
            STUB GlobalSettingsPushPeakLog()
            
            --Initializes the DMA2
            STUB Dma2Init()
            
            --Initializes foreground draw routines
            STUB ForegroundInit()
            
            --Initializes the graphic draw routines
            STUB GrappInit()
            
            --creates the ARINC 429 task
            STUB A429Init ()
            
            --initializes the Pdi Data routines
            STUB PdiDataInit()
            
            --Initializes the CAS draw routines
            STUB CasInit()
            
            --Initializes ARINC 825 communication
            STUB A8251Init ()
            STUB  A8252Init ()
            
            --Initializes the task to handle commands coming across the arinc 825 bus
            STUB A825CommInit1 ()
            STUB A825CommInit2()
			
			--Initialize the Menu Items
			STUB MenuInitialize()
			
			--Function to check PDI parameters
			STUB PdiDataCheck()
			
			--Calibration labels conversion
			STUB CalibrationLabels()
            
            --checks the semaphore
            STUB OsSemAccept() ONE
            STUB OsSemAccept() ONE
            STUB OsSemAccept() ZERO
            
            --pends an semaphore
            STUB OsSemPend 1..4 => (ZERO_TIME_OUT)
            
            --Triggers the transmission of global settings from 429 board
            STUB GlobalSettingsPull ()
            
			--Calibration
			STUB OffsideCalibration 1 => (1)
			STUB OffsideCalibration 2 => (2)
			
            --toggles active frame buffer
            STUB ForegroundReDraw1 1..2 =>()
            
            --Update the PBS reading
            STUB PbsGet 1..2 => ()
            
            --copies the global settings to backup structure
            STUB GlobalSettingsPush 1..2 => ()
            
            --Execute graphic application
            STUB GrappApp 1..2 => ()
            
            --Update all widget positions
            STUB ForegroundReDraw2 1..2 => ()
            
            --Draw the widgets
            STUB ForegroundReDraw3 1..2 => ()
            
            --reads the discrete word
            STUB RTDGetParamDdw 1..2 => (0)
            
            --checks for new messages
            STUB CheckforNewMessages 1..2 => () 0
            
            --checks the semaphore
            STUB OsSemAccept 4..5  => () ZERO
			
            STUB PushFaultLog ()
            
        END SIMUL
                
        -- Calling the Unit Under Test :
        #AppInit();
    
    END ELEMENT

END TEST -- TEST 5

TEST 6
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD>
    COMMENT
    COMMENT [hdudispfapp-CheckMsgCtrlArea-DB-LLR-016]
    COMMENT The function 'CheckMsgCtrlArea' does the following when stat of T_PARAM_READING variable is not equal to MISSING
    COMMENT i. Does nothing heartbeat status is TRUE AND Du_identified is TRUE AND 
    COMMENT Data_received is equal to zero AND Splash_done is TRUE.
    COMMENT ii.sets U16_message_words with index zero to U16_message_words with index zero bitwise AND with negation of one
    COMMENT (MCDC TTFX)
    COMMENT Equivalence Class 31,42,53,55,40
    COMMENT
    COMMENT </TD>

    ELEMENT

        COMMENT INPUT SECTION:
        
            --sets the value of 'Data_received'
            VAR Data_received,                              init = FALSE,                   ev = init
            
            --sets the value of global variable 'Long_press'
            VAR Long_press,                                 init = FALSE,                   ev = init
            
            --sets the value of global variable 'Pbit_test_result'
            VAR Pbit_test_result,                           init = 0,                       ev = init
            
            --variable 'PTU_psdest'is used to verify 'ps_dest' of function 'RTDGetParamDdw'
            VAR PTU_psdest.stat,                            init = PARAM_OK,                ev = init
            
            --sets the value of global variable 'Port1_label_count'
            VAR Port1_label_count,                          init = 0,                       ev = init
            
            --sets the value of global variable 'Both_dau_fail'
            VAR Both_dau_fail,                              init = FALSE,                   ev = init
            
            --sets the value of global variable 'Can1_msg_cntr'
            VAR Can1_msg_cntr,                              init = 2,                       ev = init
            
            --sets the value of global variable 'Du_identified'
            VAR Du_identified,                              init = TRUE,                    ev = init
            
            --sets the value of global variable 'Splash_done'
            VAR Splash_done,                                init = TRUE,                    ev = init
            
            --sets the value of global variable 'Du_position'
            VAR Du_position,                                init = 2,                       ev = init
            
        COMMENT INPUT/OUTPUT SECTION:
        
            --sets the value of global variable 'Engine_count_app'
			VAR Engine_count_app,								init = 1,						ev = 3
        
        COMMENT OUTPUT SECTION:
        
            --holds the address of 'ps_semaphore'
            VAR Sem_app_task,                               init = NULL,                    ev = &PTU_ps_semaphore

            --holds the value of 'App_task_stk'
            ARRAY App_task_stk,                             init = { others => 0 },         ev = { others => STK_DEF_VAL }
                
            --holds the value of global array 'U16_message_words'
            VAR U16_message_words[0],                       init = 0,                       ev = 2
            VAR U16_message_words[1],                       init = 0,                       ev = 0
            
        -- Stub Calls :
        SIMUL
            
            --Creates a Semaphore
            STUB OsSemCreate (SEM_CNT_VAL) &PTU_ps_semaphore
            
            --Creates the application Task
            STUB OsTaskCreate (NULL, &App_task_stk[APP_TASK_STK_SIZE], APP_TASK_PRIO) OS_NO_ERR
            
            --Initializes the DMA2D
            STUB Dma2dInit()
            
            --reloads watchdog counter
            STUB WdogKickWatchDog 1..17 => ()
            
            -- To check exceedance log trigger condition
            STUB GlobalSettingsCheckTrig 1..4 => ()
            
            --Initializes the DMA2
            STUB Dma2Init()
            
            --Initializes foreground draw routines
            STUB ForegroundInit()
            
            --Initializes the graphic draw routines
            STUB GrappInit()
            
            --creates the ARINC 429 task
            STUB A429Init ()
            
            --initializes the Pdi Data routines
            STUB PdiDataInit()
            
            --Initializes the CAS draw routines
            STUB CasInit()
            
            --Initializes ARINC 825 communication
            STUB A8251Init ()
            STUB  A8252Init ()
            
            --Initializes the task to handle commands coming across the arinc 825 bus
            STUB A825CommInit1 ()
            STUB A825CommInit2()
            
			--Initialize the Menu Items
			STUB MenuInitialize()
			
			--Function to check PDI parameters
			STUB PdiDataCheck()
			
			--Calibration labels conversion
			STUB CalibrationLabels()
			
            --checks the semaphore
            STUB OsSemAccept() ONE
            STUB OsSemAccept() ONE
            STUB OsSemAccept() ZERO
            
            --pends an semaphore
            STUB OsSemPend 1..4 => (ZERO_TIME_OUT)
            
            --Triggers the transmission of global settings from 429 board
            STUB GlobalSettingsPull ()
			
			--Calibration
			STUB OffsideCalibration 1 => (1)
			STUB OffsideCalibration 2 => (2)
            
            --toggles active frame buffer
            STUB ForegroundReDraw1 1..2 =>()
            
            --Update the PBS reading
            STUB PbsGet 1..2 => ()
            
            --Execute graphic application
            STUB GrappApp 1..2 => ()
            
            --Update all widget positions
            STUB ForegroundReDraw2 1..2 => ()
            
            --Draw the widgets
            STUB ForegroundReDraw3 1..2 => ()
        
            --reads the discrete word
            STUB RTDGetParamDdw 1..2 => (0)
            
            --checks for new messages
            STUB CheckforNewMessages 1..2 => () 0
            
            --checks the semaphore
            STUB OsSemAccept 4..5  => () ZERO
            
        END SIMUL
                
        -- Calling the Unit Under Test :
        #AppInit();
    
    END ELEMENT

END TEST -- TEST 6

TEST 7
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD>
    COMMENT
    COMMENT [hdudispfapp-CheckMsgCtrlArea-DB-LLR-016]
    COMMENT The function 'CheckMsgCtrlArea' does the following when stat of T_PARAM_READING variable is not equal to MISSING
    COMMENT i. sets previous heartbeat status to FALSE when previous heartbeat status is TRUE AND Du_identified is TRUE AND 
    COMMENT Data_received is not equal to zero AND Splash_done is FALSE.
    COMMENT ii.sets U16_message_words with index zero to U16_message_words with index zero bitwise AND with negation of one
    COMMENT (MCDC TTTF)
    COMMENT Equivalence Class 31,42,54,56,40,41
    COMMENT
    COMMENT </TD>

    ELEMENT

        COMMENT INPUT SECTION:
        
            --sets the value of 'Data_received'
            VAR Data_received,                              init = TRUE,                    ev = init
            
            --sets the value of global variable 'Long_press'
            VAR Long_press,                                 init = FALSE,                   ev = init
            
            --sets the value of global variable 'Pbit_test_result'
            VAR Pbit_test_result,                           init = 0,                       ev = init
            
            --variable 'PTU_psdest'is used to verify 'ps_dest' of function 'RTDGetParamDdw'
            VAR PTU_psdest.stat,                            init = PARAM_OK,                ev = init
            
            --sets the value of global variable 'Port1_label_count'
            VAR Port1_label_count,                          init = 0,                       ev = init
            
            --sets the value of global variable 'Both_dau_fail'
            VAR Both_dau_fail,                              init = FALSE,                   ev = init
            
            --sets the value of global variable 'Can1_msg_cntr'
            VAR Can1_msg_cntr,                              init = 2,                       ev = init
            
            --sets the value of global variable 'Du_identified'
            VAR Du_identified,                              init = TRUE,                    ev = init
            
            --sets the value of global variable 'Splash_done'
            VAR Splash_done,                                init = FALSE,                   ev = init
            
            --sets the value of global variable 'Du_position'
            VAR Du_position,                                init = 2,                       ev = init
            
        COMMENT INPUT/OUTPUT SECTION:
        
           --sets the value of global variable 'Engine_count_app'
			VAR Engine_count_app,								init = 1,						ev = 3
        
        COMMENT OUTPUT SECTION:
        
            --holds the address of 'ps_semaphore'
            VAR Sem_app_task,                               init = NULL,                    ev = &PTU_ps_semaphore

            --holds the value of 'App_task_stk'
            ARRAY App_task_stk,                             init = { others => 0 },         ev = { others => STK_DEF_VAL }
            
            --holds the value of global array 'U16_message_words'           
            VAR U16_message_words[0],                       init = 0,                       ev = 2
            VAR U16_message_words[1],                       init = 0,                       ev = 0
            
        -- Stub Calls :
        SIMUL
            
            --Creates a Semaphore
            STUB OsSemCreate (SEM_CNT_VAL) &PTU_ps_semaphore
            
            --Creates the application Task
            STUB OsTaskCreate (NULL, &App_task_stk[APP_TASK_STK_SIZE], APP_TASK_PRIO) OS_NO_ERR
            
            --Initializes the DMA2D
            STUB Dma2dInit()
            
            --reloads watchdog counter
            STUB WdogKickWatchDog 1..17 => ()
            
            -- To check exceedance log trigger condition
            STUB GlobalSettingsCheckTrig 1..4 => ()
            
            -- To Transmit and save peak log data in NVRAM.
            STUB GlobalSettingsPushPeakLog()
            
            --Initializes the DMA2
            STUB Dma2Init()
            
            --Initializes foreground draw routines
            STUB ForegroundInit()
            
            --Initializes the graphic draw routines
            STUB GrappInit()
            
            --creates the ARINC 429 task
            STUB A429Init ()
            
            --initializes the Pdi Data routines
            STUB PdiDataInit()
            
            --Initializes the CAS draw routines
            STUB CasInit()
            
            --Initializes ARINC 825 communication
            STUB A8251Init ()
            STUB  A8252Init ()
            
            --Initializes the task to handle commands coming across the arinc 825 bus
            STUB A825CommInit1 ()
            STUB A825CommInit2()
			
			--Initialize the Menu Items
			STUB MenuInitialize()
			
			--Function to check PDI parameters
			STUB PdiDataCheck()
			
			--Calibration labels conversion
			STUB CalibrationLabels()
            
            --checks the semaphore
            STUB OsSemAccept() ONE
            STUB OsSemAccept() ONE
            STUB OsSemAccept() ZERO
            
            --pends an semaphore
            STUB OsSemPend 1..4 => (ZERO_TIME_OUT)
            
            --Triggers the transmission of global settings from 429 board
            STUB GlobalSettingsPull ()
            
			--Calibration
			STUB OffsideCalibration 1 => (1)
			STUB OffsideCalibration 2 => (2)
			
            --toggles active frame buffer
            STUB ForegroundReDraw1 1..2 =>()
            
            --Update the PBS reading
            STUB PbsGet 1..2 => ()
            
            --copies the global settings to backup structure
            STUB GlobalSettingsPush 1..2 => ()
            
            --Execute graphic application
            STUB GrappApp 1..2 => ()
            
            --Update all widget positions
            STUB ForegroundReDraw2 1..2 => ()
            
            --Draw the widgets
            STUB ForegroundReDraw3 1..2 => ()
        
            --reads the discrete word
            STUB RTDGetParamDdw 1..2 => (0)
            
            --checks for new messages
            STUB CheckforNewMessages 1..2 => () 0
            
            --checks the semaphore
            STUB OsSemAccept 4..5  => () ZERO
			
            STUB PushFaultLog ()			
            
        END SIMUL
                
        -- Calling the Unit Under Test :
        #AppInit();
    
    END ELEMENT

END TEST -- TEST 7

TEST 8
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD>
    COMMENT
    COMMENT [hdudispfapp-CheckMsgCtrlArea-DB-LLR-016]
    COMMENT The function 'CheckMsgCtrlArea' does the following when stat of T_PARAM_READING variable is not equal to MISSING
    COMMENT i. sets previous heartbeat status to FALSE when previous heartbeat status is TRUE AND Du_identified is TRUE AND 
    COMMENT Data_received is not equal to zero AND Splash_done is TRUE.
    COMMENT ii.does the following when previous heartbeat status is TRUE AND Du_identified is TRUE AND Data_received
    COMMENT is not equal to zero AND Splash_done is TRUE AND Du_position is ONE.
    COMMENT   -calls the function 'OffsideSwitchScreen' with Page_num as parameter to send command to offside DU to switch 
    COMMENT     the screen
    COMMENT   -Calls the function 'OffsideCoolTimer' with Cool_down_select as its parameter to transmit cool down timer status
    COMMENT   -Calls the function 'GlobalSettingsSetEIU' with Active_eiu as its parameter  to transmit EIU selection status
    COMMENT    of DU1 to DU2.
    COMMENT    - Call OffsideFuelFlow with Fuel_flow_select as its parameter to transmit fuel flow timer status
    COMMENT iii.sets U16_message_words with index zero to U16_message_words with index zero bitwise AND with negation of one
    COMMENT (MCDC TTTT)
    COMMENT Equivalence Class 31,43,54,55,57,34,40,82,83,102
    COMMENT 
    COMMENT </TD>

    ELEMENT

        COMMENT INPUT SECTION:
        
            --sets the value of 'Data_received'
            VAR Data_received,                              init = TRUE,                    ev = init
            
            --sets the value of global variable 'Long_press'
            VAR Long_press,                                 init = FALSE,                   ev = init
            
            --sets the value of global variable 'Pbit_test_result'
            VAR Pbit_test_result,                           init = 0,                       ev = init
            
            --variable 'PTU_psdest'is used to verify 'ps_dest' of function 'RTDGetParamDdw'
            VAR PTU_psdest.stat,                            init = PARAM_OK,                ev = init
            
            --sets the value of global variable 'Port1_label_count'
            VAR Port1_label_count,                          init = 0,                       ev = init
            
            --sets the value of global variable 'Both_dau_fail'
            VAR Both_dau_fail,                              init = FALSE,                   ev = init
            
            --sets the value of global variable 'Can1_msg_cntr'
            VAR Can1_msg_cntr,                              init = 2,                       ev = init
            
            --sets the value of global variable 'Du_identified'
            VAR Du_identified,                              init = TRUE,                    ev = init
            
            --sets the value of global variable 'Splash_done'
            VAR Splash_done,                                init = TRUE,                    ev = init
            
            --sets the value of global variable 'Du_position'
            VAR Du_position,                                init = 1,                       ev = init
            
            --sets the value of global variable 'Page_num'
            VAR Page_num,                                   init = EPAGE10,                 ev = init
            
            --sets the value of global variable 'Cool_down_select'
            VAR Cool_down_select,                           init = TRUE,                    ev = init
            
            --sets the value of global variable 'Active_eiu'
            VAR Active_eiu,                                 init = EIU1,                    ev = init
			
            VAR Fuel_flow_select,                                 init = 1,                    ev = init
            
        COMMENT INPUT/OUTPUT SECTION:
        
            --sets the value of global variable 'Engine_count_app'
			VAR Engine_count_app,								init = 1,						ev = 3
        
        COMMENT OUTPUT SECTION:
        
            --holds the address of 'ps_semaphore'
            VAR Sem_app_task,                               init = NULL,                    ev = &PTU_ps_semaphore

            --holds the value of 'App_task_stk'
            ARRAY App_task_stk,                             init = { others => 0 },         ev = { others => STK_DEF_VAL }
            
            --holds the value of global array 'U16_message_words'
            VAR U16_message_words[0],                       init = 0,                       ev = 2
            VAR U16_message_words[1],                       init = 0,                       ev = 0
            
        -- Stub Calls :
        SIMUL
            
            --Creates a Semaphore
            STUB OsSemCreate (SEM_CNT_VAL) &PTU_ps_semaphore
            
            --Creates the application Task
            STUB OsTaskCreate (NULL, &App_task_stk[APP_TASK_STK_SIZE], APP_TASK_PRIO) OS_NO_ERR
            
            --Initializes the DMA2D
            STUB Dma2dInit()
            
            --reloads watchdog counter
            STUB WdogKickWatchDog 1..17 => ()
            
            -- To check exceedance log trigger condition
            STUB GlobalSettingsCheckTrig 1..4 => ()
            
            -- To Transmit and save peak log data in NVRAM.
            STUB GlobalSettingsPushPeakLog()
            
            --Initializes the DMA2
            STUB Dma2Init()
            
            --Initializes foreground draw routines
            STUB ForegroundInit()
            
            --Initializes the graphic draw routines
            STUB GrappInit()
            
            --creates the ARINC 429 task
            STUB A429Init ()
            
            --initializes the Pdi Data routines
            STUB PdiDataInit()
            
            --Initializes the CAS draw routines
            STUB CasInit()
            
            --Initializes ARINC 825 communication
            STUB A8251Init ()
            STUB  A8252Init ()
            
            --Initializes the task to handle commands coming across the arinc 825 bus
            STUB A825CommInit1 ()
            STUB A825CommInit2()
			
			--Initialize the Menu Items
			STUB MenuInitialize()
			
			--Function to check PDI parameters
			STUB PdiDataCheck()
			
			--Calibration labels conversion
			STUB CalibrationLabels()
            
            --checks the semaphore
            STUB OsSemAccept() ONE
            STUB OsSemAccept() ONE
            STUB OsSemAccept() ZERO
            
            --pends an semaphore
            STUB OsSemPend 1..4 => (ZERO_TIME_OUT)
            
            --Triggers the transmission of global settings from 429 board
            STUB GlobalSettingsPull ()
			
			--Calibration
			STUB OffsideCalibration 1 => (1)
			STUB OffsideCalibration 2 => (2)
            
            --toggles active frame buffer
            STUB ForegroundReDraw1 1..2 =>()
            
            --Update the PBS reading
            STUB PbsGet 1..2 => ()
            
            --copies the global settings to backup structure
            STUB GlobalSettingsPush 1..2 => ()
            
            --Execute graphic application
            STUB GrappApp 1..2 => ()
            
            --Update all widget positions
            STUB ForegroundReDraw2 1..2 => ()
            
            --Draw the widgets
            STUB ForegroundReDraw3 1..2 => ()
        
            --reads the discrete word
            STUB RTDGetParamDdw 1..2 => (0)
            
            --triggers the transmission of switch screen service code
            STUB OffsideSwitchScreen(Page_num)
            
            --triggers the transmission of start timer service code
            STUB OffsideCoolTimer(Cool_down_select)
            
            --sets Active EIU
            STUB GlobalSettingsSetEIU(Active_eiu)
             
            --checks for new messages
            STUB CheckforNewMessages 1..2 => () 0
            
            --checks the semaphore
            STUB OsSemAccept 4..5  => () ZERO
			
            STUB PushFaultLog ()			
			
            STUB OffsideFuelFlow(Fuel_flow_select)			
            
        END SIMUL
                
        -- Calling the Unit Under Test :
        #AppInit();
    
    END ELEMENT

END TEST -- TEST 8

TEST 9
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD>
    COMMENT
    COMMENT [hdudispfapp-AppTask-DB-LLR-010]
    COMMENT In function 'AppTask',
    COMMENT
    COMMENT for 0th and 2nd iteration toggle value is not equal to zero :
    COMMENT 1.Increments frame counter by 1.
    COMMENT 2.Calls the function 'ForegroundReDraw1' to re draw the foreground.
    COMMENT 3.Calls the function 'PbsGet' to update the PBS reading.
    COMMENT 4.Does the following when Long_press is equal to TRUE.
    COMMENT   - Calls the macro INIT_NSC_REQUEST with transmit message as parameter.
    COMMENT   - Sets sid , paysize ,rci  and payload value to EISDSPLYGATEWAY_SID, TWO, last two bits of
    COMMENT     Du_position and DU_POSITION_SFC.
    COMMENT   - Transmits the message by calling 'A8251Xmit' with transmit messages as its parameter.
    COMMENT   - Calls the function 'OsTimeDly' with hundred as delay.
    COMMENT   - Calls the function 'NVICSystemReset'.
    COMMENT 5.Calls the function 'GrappApps to execute graphic application (Menu).
    COMMENT 6.Calls the function 'ForegroundReDraw2' and 'ForegroundReDraw3' to update all widget positions
    COMMENT  and draw the widgets.
    COMMENT 7.Does nothing when Data_received is equal to zero.
    COMMENT 8.Does nothing when frame counter is not equal to MAX_FRAME_VAL.
    COMMENT 9.Does nothing when Pbit_test_result is not equal to zero.
    COMMENT 11. calls the function 'OffsideCalibration' with Engine_count_app as parameter
    COMMENT 12. does nothing when Engine_count_app is lessthan (NUMBEROFENGINES-1)
    COMMENT 13.Engine_count_app is set to Engineout plus one
    COMMENT Equivalence Class 17,18,19,20,21,22,10,68,70,74,101
    COMMENT
    COMMENT </TD>

    ELEMENT

        COMMENT INPUT SECTION:
        
            --sets the value of 'Data_received'
            VAR Data_received,                              init = FALSE,                   ev = init
            
            --sets the value of global variable 'Long_press'
            VAR Long_press,                                 init = TRUE,                    ev = init
            
            --sets the value of global variable 'Pbit_test_result'
            VAR Pbit_test_result,                           init = 5,                       ev = init
            
            --sets the value of global variable 'Du_position'
            VAR Du_position,                                init = 2,                       ev = init
            
        COMMENT INPUT/OUTPUT SECTION:
        
            --Variable 'PTU_ps_xm' is used to verify the parameter 'ps_xm' of 'A8251Xmit'
            VAR PTU_ps_xm.lcc,                              init = EEC,                     ev = NSC
            VAR PTU_ps_xm.sID.PID.cfid,                     init = 0,                       ev = HOWELL_DAU_FID
            VAR PTU_ps_xm.sID.PID.smt,                      init = 0,                       ev = 1
            VAR PTU_ps_xm.sID.PID.lcl,                      init = 0,                       ev = 1
            VAR PTU_ps_xm.sID.PID.pvt,                      init = 0,                       ev = 1
            VAR PTU_ps_xm.sID.PID.sfid,                     init = 0,                       ev = HOWELL_DAU_FID
            VAR PTU_ps_xm.sID.PID.sid,                      init = 0,                       ev = EISDSPLYGATEWAY_SID
            VAR PTU_ps_xm.sID.PID.rci,                      init = 0,                       ev = 2
            VAR PTU_ps_xm.u8PaySize,                        init = 0,                       ev = 2
            VAR PTU_ps_xm.u8PayLoad[0],                     init = 0,                       ev = DU_POSITION_SFC
			
			--sets the value of global variable 'Engine_count_app'
			VAR Engine_count_app,								init = 1,						ev = 3
        
        COMMENT OUTPUT SECTION:
        
            --holds the address of 'ps_semaphore'
            VAR Sem_app_task,                               init = NULL,                    ev = &PTU_ps_semaphore

            --holds the value of 'App_task_stk'
            ARRAY App_task_stk,                             init = { others => 0 },         ev = { others => STK_DEF_VAL }
            
        -- Stub Calls :
        SIMUL
            
            --Creates a Semaphore
            STUB OsSemCreate (SEM_CNT_VAL) &PTU_ps_semaphore
            
            --Creates the application Task
            STUB OsTaskCreate (NULL, &App_task_stk[APP_TASK_STK_SIZE], APP_TASK_PRIO) OS_NO_ERR
            
            --Initializes the DMA2D
            STUB Dma2dInit()
            
            --reloads watchdog counter
            STUB WdogKickWatchDog 1..16 => ()
            
            -- To check exceedance log trigger condition
            STUB GlobalSettingsCheckTrig 1..4 => ()
            
            --Initializes the DMA2
            STUB Dma2Init()
            
            --Initializes foreground draw routines
            STUB ForegroundInit()
            
            --Initializes the graphic draw routines
            STUB GrappInit()
            
            --creates the ARINC 429 task
            STUB A429Init ()
            
            --initializes the Pdi Data routines
            STUB PdiDataInit()
            
            --Initializes the CAS draw routines
            STUB CasInit()
            
            --Initializes ARINC 825 communication
            STUB A8251Init ()
            STUB  A8252Init ()
            
            --Initializes the task to handle commands coming across the arinc 825 bus
            STUB A825CommInit1 ()
            STUB A825CommInit2()
			
			--Initialize the Menu Items
			STUB MenuInitialize()
			
			--Function to check PDI parameters
			STUB PdiDataCheck()
			
			--Calibration labels conversion
			STUB CalibrationLabels()
            
            STUB A8251Xmit 1..2 => () A825_XM_OK
            
            STUB OsTimeDly 1..2 => (ONE_HUNDRED)
            
            --checks the semaphore
            STUB OsSemAccept() ONE
            STUB OsSemAccept() ZERO
            
            --pends an semaphore
            STUB OsSemPend 1..4 => (ZERO_TIME_OUT)
			
			--Calibration
			STUB OffsideCalibration 1 => (1)
			STUB OffsideCalibration 2 => (2)
            
            --toggles active frame buffer
            STUB ForegroundReDraw1 1..2 =>()
            
            --Update the PBS reading
            STUB PbsGet 1..2 => ()
            
            --Triggers the transmission of global settings from 429 board
            STUB GlobalSettingsPull ()
            
            --Execute graphic application
            STUB GrappApp 1..2 => ()
            
            --Update all widget positions
            STUB ForegroundReDraw2 1..2 => ()
            
            --Draw the widgets
            STUB ForegroundReDraw3 1..2 => ()
            
            --checks the semaphore
            STUB OsSemAccept  () ONE
            STUB OsSemAccept  () ZERO
            STUB OsSemAccept  () ZERO
            
        END SIMUL
                
        -- Calling the Unit Under Test :
        #AppInit();
    
    END ELEMENT

END TEST -- TEST 9

TEST 10
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD>
    COMMENT
    COMMENT [hdudispfapp-AppTask-DB-LLR-010]
    COMMENT In function 'AppTask',
    COMMENT
    COMMENT for 0th and 2nd iteration toggle value is not equal to zero :
    COMMENT 1.Increments frame counter by 1.
    COMMENT 2.Calls the function 'ForegroundReDraw1' to re draw the foreground.
    COMMENT 3.Calls the function 'PbsGet' to update the PBS reading.
    COMMENT 4.Does the nothing when Long_press is equal to FALSE
    COMMENT 5.Calls the function 'GrappApp' to execute graphic application (Menu).
    COMMENT 6.Calls the function 'ForegroundReDraw2' and 'ForegroundReDraw3' to update all widget positions
    COMMENT  and draw the widgets.
    COMMENT 7.Does nothing when Data_received is equal to zero.
    COMMENT 8.Calls the function 'OffsideHeartBeat' to send the heartbeat message and set frame counter to 0 when frame 
    COMMENT   counter is equal to MAX_FRAME_VAL.
    COMMENT 9.Does nothing when Pbit_test_result is not equal to zero.
    COMMENT 11. calls the function 'OffsideCalibration' with Engine_count_app as parameter
    COMMENT 12. does nothing when Engine_count_app is lessthan (NUMBEROFENGINES-1)
    COMMENT 13.Engine_count_app is set to Engineout plus one
    COMMENT Equivalence Class 17,18,19,20,21,22,25,10,69,71,72,73,100
    COMMENT </TD>

    ELEMENT

        COMMENT INPUT SECTION:
        
            --sets the value of 'Data_received'
            VAR Data_received,                              init = FALSE,                   ev = init
            
            --sets the value of global variable 'Long_press'
            VAR Long_press,                                 init = FALSE,                   ev = init
            
            --sets the value of global variable 'Pbit_test_result'
            VAR Pbit_test_result,                           init = 5,                       ev = init
            
        COMMENT INPUT/OUTPUT SECTION:
        
            --sets the value of global variable 'Engine_count_app'
			VAR Engine_count_app,								init = 1,						ev = 3
        
        COMMENT OUTPUT SECTION:
        
            --holds the address of 'ps_semaphore'
            VAR Sem_app_task,                               init = NULL,                    ev = &PTU_ps_semaphore

            --holds the value of 'App_task_stk'
            ARRAY App_task_stk,                             init = { others => 0 },         ev = { others => STK_DEF_VAL }
                
        -- Stub Calls :
        SIMUL
            
            --Creates a Semaphore
            STUB OsSemCreate 1..13 => (SEM_CNT_VAL) &PTU_ps_semaphore
            
            --Creates the application Task
            STUB OsTaskCreate 1..13=> (NULL, &App_task_stk[APP_TASK_STK_SIZE], APP_TASK_PRIO) OS_NO_ERR
            
            --Initializes the DMA2D
            STUB Dma2dInit 1..13 => ()
            
            --reloads watchdog counter
            STUB WdogKickWatchDog 1..195 => ()
            
            -- To check exceedance log trigger condition
            STUB GlobalSettingsCheckTrig 1..52 => ()
            
            --Initializes the DMA2
            STUB Dma2Init 1..13 => ()
            
            --Initializes foreground draw routines
            STUB ForegroundInit 1..13 => ()
            
            --Initializes the graphic draw routines
            STUB GrappInit 1..13 =>()
            
            --creates the ARINC 429 task
            STUB A429Init 1..13 =>()
            
            --initializes the Pdi Data routines
            STUB PdiDataInit 1..13 => ()
            
            --Initializes the CAS draw routines
            STUB CasInit 1..13 => ()
            
            --Initializes ARINC 825 communication
            STUB A8251Init 1..13 => ()
            STUB  A8252Init 1..13 => ()
            
            --Initializes the task to handle commands coming across the arinc 825 bus
            STUB A825CommInit1 1..13 => ()
            STUB A825CommInit2 1..13 =>()
			
			--Initialize the Menu Items
			STUB MenuInitialize 1..13 => ()
			
			--Function to check PDI parameters
			STUB PdiDataCheck 1..13 => ()
			
			--Calibration labels conversion
			STUB CalibrationLabels 1..13 => ()
            
            --checks the semaphore
            STUB OsSemAccept 1..39 => () ZERO
            
            --pends an semaphore
            STUB OsSemPend 1..52 => (ZERO_TIME_OUT)
			
			--Calibration
			STUB OffsideCalibration 1 => (1)
			STUB OffsideCalibration 2 => (2)
			STUB OffsideCalibration 3 => (3)
			STUB OffsideCalibration 4 => (0)
			STUB OffsideCalibration 5 => (1)
			STUB OffsideCalibration 6 => (2)
			STUB OffsideCalibration 7 => (3)
			STUB OffsideCalibration 8 => (0)
			STUB OffsideCalibration 9 => (1)
			STUB OffsideCalibration 10 => (2)
			STUB OffsideCalibration 11 => (3)
			STUB OffsideCalibration 12 => (0)
			STUB OffsideCalibration 13 => (1)
			STUB OffsideCalibration 14 => (2)
			STUB OffsideCalibration 15 => (3)
			STUB OffsideCalibration 16 => (0)
			STUB OffsideCalibration 17 => (1)
			STUB OffsideCalibration 18 => (2)
			STUB OffsideCalibration 19 => (3)
			STUB OffsideCalibration 20 => (0)
			STUB OffsideCalibration 21=> (1)
			STUB OffsideCalibration 22 => (2)
			STUB OffsideCalibration 23 => (3)
			STUB OffsideCalibration 24 => (0)
			STUB OffsideCalibration 25 => (1)
			STUB OffsideCalibration 26 => (2)
            
            --toggles active frame buffer
            STUB ForegroundReDraw1 1..26 =>()
            
            --Update the PBS reading
            STUB PbsGet 1..26 => ()
            
            --Triggers the transmission of global settings from 429 board
            STUB GlobalSettingsPull 1..38 => ()
            
            --Execute graphic application
            STUB GrappApp 1..26 => ()
            
            --Update all widget positions
            STUB ForegroundReDraw2 1..26 => ()
            
            --Draw the widgets
            STUB ForegroundReDraw3 1..26 => ()
        
            --triggers the transmission of heart beat
            STUB OffsideHeartBeat()
            
        END SIMUL
                
        -- Calling the Unit Under Test 
        --the unit under test is called for 13 times to make frame counter equal to 'MAX_FRAME_VAL'
        #for(PTU_i=0;PTU_i<13;PTU_i++)
        #{
        #   AppInit();
        #}
        
    END ELEMENT

END TEST -- TEST 10

END SERVICE -- AppInit


--------------------------------------------------------------------------------
-- Declaration of the service AppU32NSC
--------------------------------------------------------------------------------
SERVICE AppU32NSC
SERVICE_TYPE extern

-- Tested service parameters declarations
#T_A825_MESSAGE s_mess;
 
#T_EA825BUS a825_bus;

-- By function returned type declaration
#T_UINT32 ret_AppU32NSC;

ENVIRONMENT ENV_AppU32NSC

    STRUCTURE s_mess,       init = { lcc => EEC, sID => { BID => { sfid => 0, rsd => 0, lcl => 0, pvt => 0,
    &                               doc => 0, rci => 0 }, PID => { cfid => 0, smt => 0, lcl => 0, pvt => 0, 
    &                               sfid => 0, sid => 0, rci => 0 }}, u8PaySize => 0, u8PayLoad => { others => 0 }},
    &                                                           ev = init

    VAR a825_bus,           init = A825_1,                      ev = init

    VAR ret_AppU32NSC,      init = 0,                           ev = init

END ENVIRONMENT -- ENV_AppU32NSC

USE ENV_AppU32NSC

TEST 1
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD>
    COMMENT [hdudispfapp-AppU32NSC-DB-LLR-001]
    COMMENT The function 'AppU32NSC' calls the function 'GlobalSettingsProcessNSC' with parameter s_mess
    COMMENT and returns ZERO when a825_bus is equal to A825_1.
    COMMENT Equivalence Class 49,51
    COMMENT
    COMMENT </TD>

    ELEMENT

        COMMENT INPUT SECTION:
        
            --'A825_2' bus is selected for A825 bus channel
            VAR a825_bus,           init = A825_1,                          ev = init
            
            --Structure members of 's_mess' is initialized
            STRUCTURE s_mess,       init = { lcc => NSC, sID => { BID => { sfid => 0, rsd => 0, lcl => 0, pvt => 0,
            &                               doc => 0, rci => 0 }, PID => { cfid => 0, smt => 0, lcl => 0, pvt => 0, 
            &                               sfid => 0, sid => 0, rci => 0 }}, u8PaySize => 0, u8PayLoad => { others => 0 }},
            &                                                               ev = init
        
        COMMENT INPUT/OUTPUT SECTION:
        
            --None

        COMMENT OUTPUT SECTION:
            
            --holds the return value of the function 'AppU32NSC'
            VAR ret_AppU32NSC,      init = 2,                               ev = ZERO
            
            --Function 'GlobalSettingsProcessNSC' is handled using structure variable 'PTU2_s_mess'
            STRUCTURE PTU2_s_mess,  init = { lcc => EEC, sID => { BID => { sfid => 0, rsd => 0, lcl => 0, pvt => 0,
            &                               doc => 0, rci => 0 }, PID => { cfid => 0, smt => 0, lcl => 0, pvt => 0, 
            &                               sfid => 0, sid => 0, rci => 0 }}, u8PaySize => 0, u8PayLoad => { others => 0 }},
            &                       ev = { lcc => NSC, sID => { BID => { sfid => 0, rsd => 0, lcl => 0, pvt => 0,
            &                               doc => 0, rci => 0 }, PID => { cfid => 0, smt => 0, lcl => 0, pvt => 0, 
            &                               sfid => 0, sid => 0, rci => 0 }}, u8PaySize => 0, u8PayLoad => { others => 0 }} 
        
        -- Stub Calls :
        SIMUL
            
            --processes the incoming GLOBAL Configuration Data
            STUB GlobalSettingsProcessNSC()

        END SIMUL

        -- Calling the Unit Under Test :    
        #ret_AppU32NSC = AppU32NSC(&s_mess, a825_bus);
        
    END ELEMENT

END TEST -- TEST 1

TEST 2
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD>
    COMMENT [hdudispfapp-AppU32NSC-DB-LLR-002]
    COMMENT The function 'AppU32NSC' calls the function 'OffsideProcessA825NSC' with parameter s_mess
    COMMENT and returns ZERO when a825_bus is not equal to A825_1.
    COMMENT Equivalence Class 50,52
    COMMENT
    COMMENT </TD>

    ELEMENT

        COMMENT INPUT SECTION:
        
            --'A825_2' bus is selected for A825 bus channel
            VAR a825_bus,           init = A825_2,                          ev = init
            
            --Structure members of 's_mess' is initalized
            STRUCTURE s_mess,       init = { lcc => NSC, sID => { BID => { sfid => 0, rsd => 0, lcl => 0, pvt => 0,
            &                               doc => 0, rci => 0 }, PID => { cfid => 0, smt => 0, lcl => 0, pvt => 0, 
            &                               sfid => 0, sid => 0, rci => 0 }}, u8PaySize => 0, u8PayLoad => { others => 0 }},
            &                                                               ev = init
        
        COMMENT INPUT/OUTPUT SECTION:
        
            --None

        COMMENT OUTPUT SECTION:
            
            --holds the return value of the function 'AppU32NSC'
            VAR ret_AppU32NSC,      init = 2,                               ev = ZERO
        
            --Function 'OffsideProcessA825NSC' is handled using structure variable 'PTU1_s_mess'
            STRUCTURE PTU1_s_mess,  init = { lcc => EEC, sID => { BID => { sfid => 0, rsd => 0, lcl => 0, pvt => 0,
            &                               doc => 0, rci => 0 }, PID => { cfid => 0, smt => 0, lcl => 0, pvt => 0, 
            &                               sfid => 0, sid => 0, rci => 0 }}, u8PaySize => 0, u8PayLoad => { others => 0 }},
            &                       ev = { lcc => NSC, sID => { BID => { sfid => 0, rsd => 0, lcl => 0, pvt => 0,
            &                               doc => 0, rci => 0 }, PID => { cfid => 0, smt => 0, lcl => 0, pvt => 0, 
            &                               sfid => 0, sid => 0, rci => 0 }}, u8PaySize => 0, u8PayLoad => { others => 0 }}
        
        -- Stub Calls :
        SIMUL
            
            --processes the requested user defined node service codes
            STUB OffsideProcessA825NSC()

        END SIMUL

        -- Calling the Unit Under Test :    
        #ret_AppU32NSC = AppU32NSC(&s_mess, a825_bus);
        
    END ELEMENT

END TEST -- TEST 2

--TEST 3
--FAMILY robustness
--
--    COMMENT Test Description
--    COMMENT <TD>
--    COMMENT [hdudispfapp-AppU32NSC-DB-LLR-001]
--    COMMENT This test case is evaluated by giving the invalid reference to input parameter s_mess.
--    COMMENT Equivalence Class 80
--    COMMENT
--    COMMENT </TD>
--
--    ELEMENT
--
--      COMMENT INPUT SECTION:
--        
--          --None
--        
--        COMMENT INPUT/OUTPUT SECTION:
--        
--          --None
--
--        COMMENT OUTPUT SECTION:
--          
--          --None
--        
--        -- Stub Calls :
--        SIMUL
--          
--          --None
--
--        END SIMUL
--
--        -- Calling the Unit Under Test :  
--        #ret_AppU32NSC = AppU32NSC(NULL, a825_bus);
--        
--  END ELEMENT
--
--END TEST -- TEST 3

END SERVICE -- AppU32NSC

--------------------------------------------------------------------------------
-- Declaration of the service AppU32NOC
--------------------------------------------------------------------------------

SERVICE AppU32NOC
SERVICE_TYPE extern

-- Tested service parameters declarations
#T_A825_MESSAGE s_mess;

#T_EA825BUS a825_bus;

-- By function returned type declaration
#T_UINT32 ret_AppU32NOC;

ENVIRONMENT ENV_AppU32NOC

    STRUCTURE s_mess,       init = { lcc => EEC, sID => { BID => { sfid => 0, rsd => 0, lcl => 0, pvt => 0,
    &                               doc => 0, rci => 0 }, PID => { cfid => 0, smt => 0, lcl => 0, pvt => 0, 
    &                               sfid => 0, sid => 0, rci => 0 }}, u8PaySize => 0, u8PayLoad => { others => 0 }},
    &                                                                   ev = init
    
    VAR a825_bus,           init = A825_1,                              ev = init
    
    VAR ret_AppU32NOC,      init = 0,                                   ev = init
    
END ENVIRONMENT -- ENV_AppU32NOC

USE ENV_AppU32NOC
    
TEST 1
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD>
    COMMENT [hdudispfapp-AppU32NOC-DB-LLR-001]
    COMMENT The function 'AppU32NOC' calls the function 'A429ProcessA825' with parameter s_mess and returns ZERO
    COMMENT when a825_bus is equal to A825_1. 
    COMMENT Equivalence Class 45,47
    COMMENT  
    COMMENT </TD>

    ELEMENT

        COMMENT INPUT SECTION:
       
            --'A825_2' bus is selected for A825 bus channel
            VAR a825_bus,           init = A825_1,                          ev = init
            
            --Structure members of 's_mess' is initialized
            STRUCTURE s_mess,       init = { lcc => NOC, sID => { BID => { sfid => 0, rsd => 0, lcl => 0, pvt => 0,
            &                               doc => 0, rci => 0 }, PID => { cfid => 0, smt => 0, lcl => 0, pvt => 0, 
            &                               sfid => 0, sid => 0, rci => 0 }}, u8PaySize => 0, u8PayLoad => { others => 0 }},
            &                                                               ev = init
        
        COMMENT INPUT/OUTPUT SECTION:
        
            --None

        COMMENT OUTPUT SECTION:
        
            --holds the return value of the function 'AppU32NOC'
            VAR ret_AppU32NOC,      init = 2,                               ev = ZERO
            
            --Function 'A429ProcessA825' is handled using structure variable 'PTU4_s_mess'
            STRUCTURE PTU4_s_mess,  init = { lcc => EEC, sID => { BID => { sfid => 0, rsd => 0, lcl => 0, pvt => 0,
            &                               doc => 0, rci => 0 }, PID => { cfid => 0, smt => 0, lcl => 0, pvt => 0, 
            &                               sfid => 0, sid => 0, rci => 0 }}, u8PaySize => 0, u8PayLoad => { others => 0 }},
            &                       ev = { lcc => NOC, sID => { BID => { sfid => 0, rsd => 0, lcl => 0, pvt => 0,
            &                               doc => 0, rci => 0 }, PID => { cfid => 0, smt => 0, lcl => 0, pvt => 0, 
            &                               sfid => 0, sid => 0, rci => 0 }}, u8PaySize => 0, u8PayLoad => { others => 0 }}

        
        -- Stub Calls :
        SIMUL
            
            --extracts A429 words
            STUB A429ProcessA825()

        END SIMUL

        -- Calling the Unit Under Test :
        #ret_AppU32NOC = AppU32NOC(&s_mess, a825_bus);
    
    END ELEMENT

END TEST -- TEST 1

TEST 2
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD>
    COMMENT [hdudispfapp-AppU32NOC-DB-LLR-002]
    COMMENT The function 'AppU32NOC' calls the function 'OffsideProcessA825NOC' with parameter s_mess 
    COMMENT and returns ZERO when a825_bus is not equal to A825_1. 
    COMMENT Equivalence Class 46,48
    COMMENT 
    COMMENT </TD>

    ELEMENT

        COMMENT INPUT SECTION:
        
            --'A825_2' bus is selected for A825 bus channel 
            VAR a825_bus,           init = A825_2,                      ev = init
            
            --Structure members of 's_mess' is initialized
            STRUCTURE s_mess,       init = { lcc => NOC, sID => { BID => { sfid => 0, rsd => 0, lcl => 0, pvt => 0,
            &                               doc => 0, rci => 0 }, PID => { cfid => 0, smt => 0, lcl => 0, pvt => 0, 
            &                               sfid => 0, sid => 0, rci => 0 }}, u8PaySize => 0, u8PayLoad => { others => 0 }},
            &                                                           ev = init
        
        COMMENT INPUT/OUTPUT SECTION:
        
            --None

        COMMENT OUTPUT SECTION:
        
            --holds the return value of the fonction 'AppU32NOC'
            VAR ret_AppU32NOC,      init = 2,                           ev = ZERO
            
            --Function 'OffsideProcessA825NOC' is handled using structure variable 'PTU3_s_mess'
            STRUCTURE PTU3_s_mess,  init = { lcc => EEC, sID => { BID => { sfid => 0, rsd => 0, lcl => 0, pvt => 0,
            &                               doc => 0, rci => 0 }, PID => { cfid => 0, smt => 0, lcl => 0, pvt => 0, 
            &                               sfid => 0, sid => 0, rci => 0 }}, u8PaySize => 0, u8PayLoad => { others => 0 }},
            &                       ev = { lcc => NOC, sID => { BID => { sfid => 0, rsd => 0, lcl => 0, pvt => 0,
            &                               doc => 0, rci => 0 }, PID => { cfid => 0, smt => 0, lcl => 0, pvt => 0, 
            &                               sfid => 0, sid => 0, rci => 0 }}, u8PaySize => 0, u8PayLoad => { others => 0 }}

        
        -- Stub Calls :
        SIMUL
            
            --processes the HEART_BEAT Data Object Code
            STUB OffsideProcessA825NOC()

        END SIMUL

        -- Calling the Unit Under Test :
        #ret_AppU32NOC = AppU32NOC(&s_mess, a825_bus);
    
    END ELEMENT

END TEST -- TEST 2

--TEST 3
--FAMILY robustness
--
--    COMMENT Test Description
--    COMMENT <TD>
--    COMMENT [hdudispfapp-AppU32NOC-DB-LLR-001]
--    COMMENT This test case is evaluated by giving the invalid reference to input parameter s_mess.
--    COMMENT Equivalence Class 81
--    COMMENT 
--    COMMENT </TD>
--
--    ELEMENT
--
--      COMMENT INPUT SECTION:
--        
--          --None
--        
--        COMMENT INPUT/OUTPUT SECTION:
--        
--          --None
--
--        COMMENT OUTPUT SECTION:
--        
--          --None
--
--        
--        -- Stub Calls :
--        SIMUL
--          
--          --None
--
--        END SIMUL
--
--        -- Calling the Unit Under Test :
--        #ret_AppU32NOC = AppU32NOC(NULL, a825_bus);
--    
--  END ELEMENT
--
--END TEST -- TEST 3

END SERVICE -- AppU32NOC


