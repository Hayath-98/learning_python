HEADER hdudispfpolygon1,Source Code Ver : 1.7,TestScript Ver : 1.5
--------------------------------------------------------------------------------
-- Author Name          : Hemalatha S
--
-- File Name            : hdudispfpolygon1_6.ptu
--
-- Test Creation Date   : 09.10.2017
--
-- Tested Functions     : PolygonDrawPoly
--                        VScanLines
--                        VRemoveEdges
--                        VCalculateIntersections
--                        VAddEdges
--                        VProcessPairsHR
--                        PsAllocEdge
--                        VEdgeInit
--                        VEdgeInsert
--                        VProcessMagLine
--                        PsAllocVert
-- 
-- Version History     :
--
-- TEST-VERSION        TEST-DATE       TESTER NAME        MODIFICATIONS
--  ------------       ---------       -----------        -------------
--     1.1             09.10.2017      Hemalatha S          Created the ptu file  
--     1.2             07.11.2017      Hemalatha S          Updated as per #PR100171
--     1.3             14.11.2017      Hemalatha S          Updated as per #PR100171   
--     1.4             27.07.2020      Swaroopa N           Updated as per #PR100267
--     1.5             03.10.2020      Vignesh Sunil    	Updated as per #PR100281
-------------------------------------------------------------------------------

--------------------------------------------------------------------------------
--
-- TESTED FILE INCLUDE DIRECTIVES 
--
--------------------------------------------------------------------------------

##include "hdudispfdma2d.h"  
##include "hdudispfpolygon1.h" 
##include "hdudispfrterror.h"  
##include "hdudispftext.h"     
##include "hdudispfconfig.h"   
##include "hdudispfwidgets.h"  
##include "hdulibbasictypes.h" 
##include "hdudispfpanel.h" 

--------------------------------------------------------------------------------
--
-- TESTED FILE DECLARATIONS 
--
--------------------------------------------------------------------------------

-- Declarations of the global variables of the tested file

    #extern T_CHAR glob_file_name[];

    -- Variable Chooses the active edge list
    #extern T_UINT8 U8_which_mag_line;
    
    -- Variable Scans min value
    #extern T_INT32 S16_scan_xmin;
    
    -- Variable holds Active Edge list line1
    #extern T_UINT8 U8_mag_line1[(   1024U +1)];
    
    -- Variable Scans max value
    #extern T_INT32 S16_scan_xmax;
    
    -- Variable holds Active Edge list line2
    #extern T_UINT8 U8_mag_line2[(   1024U +1)];
    
    -- Variable holds the panel width value
    #T_INT16 S16_panel_width; 
    
    -- Variable holds Foreground frame buffer
    #void *Vp_fgfb2;
    
    -- Variable holds the panel height value
    #T_INT16 S16_panel_height; 
    
    -- Variable holds the orientation value
    #T_ELANDSCAPEORPORTRIAT E_orientation;
    
    

-- Declarations of the temporary variables 

-- Created to verify the 1st parameter of RterrWidget
   # char PTU_pc_file_in_1[200];
   # char PTU_pc_file_in_2[200];
   # char PTU_pc_file_in_3[200];
   # char PTU_pc_file_in_4[200];
   # T_UINT8 PTU_temp, PTU_count;
   
-- Created to verify the 3rd parameter of RterrWidget
   # char PTU_pc_message_in_1[200];
   # char PTU_pc_message_in_2[200];
   # char PTU_pc_message_in_3[200];
   # char PTU_pc_message_in_4[200];
   
   
-- Created to verify the 1st and 2nd parameters of Dma2dScanLineBlend
   # T_UINT16 PTU_frame_data;
   # T_UINT16 *PTU_frame_data_1;
   # T_UINT8 PTU_scan_line;
   # T_UINT8 *PTU_scan_line_1;
   
-- Created to verify Vp_fgfb2   
   # T_UINT16 PTU_Vp_fgfb2[100];

-- Created to verify PolygonDrawPoly    
   # T_UINT32 PTU_index, PTU_i;   
   
--------------------------------------------------------------------------------

BEGIN

    COMMENT Author name      : Hemalatha S
    COMMENT
    COMMENT File name        : hdudispfpolygon1_6.ptu
    COMMENT
    COMMENT Tested functions : PolygonDrawPoly
    COMMENT                    VScanLines
    COMMENT                    VRemoveEdges
    COMMENT                    VCalculateIntersections
    COMMENT                    VAddEdges
    COMMENT                    VProcessPairsHR
    COMMENT                    PsAllocEdge
    COMMENT                    VEdgeInit
    COMMENT                    VEdgeInsert
    COMMENT                    VProcessMagLine
    COMMENT                    PsAllocVert
    COMMENT
    COMMENT Assumptions and Constraints
    COMMENT <AC>
    COMMENT Assumption(s):
    COMMENT None
    COMMENT
    COMMENT Constraint(s):
    COMMENT
    COMMENT 1. Test scripts are splitted into 1 to 7 due to static dependencies.
    COMMENT
    COMMENT 2. In function 'PolygonDrawPoly' the structure member 'ps_poly->s16Pts' cannot be exercised for minimum, maximum values 
    COMMENT    due to memory constraints.
    COMMENT
    COMMENT 3. In function 'VAddEdges' while loop cannot be covered for 0th loop. Since it is controlled by a local variable 'ps_lw'
    COMMENT    in the function 'VScanLines' which is acting as parameter 'ps_vert' in the function 'VAddEdges'. 
    COMMENT
    COMMENT 4. In function 'VProcessPairsHR' while loop cannot be covered for 0th loop. Since it is controlled by a local variable 'ps_this'.
    COMMENT
    COMMENT 5. In function 'VRemoveEdges' while loop cannot be covered for 1st loop. Since 'VRemoveEdges' is called twice. 
    COMMENT
    COMMENT 6. In function 'VScanLines' do-while loop cannot be covered for 1st loop. Since the value of 'S16_active_edges' is greater than 1.
    COMMENT
	COMMENT 7. Source file "hdudispfpolygon1.c" is modified for testing purpose to verify the file name
    COMMENT    T_CHAR glob_file_name[] = __FILE__;
	COMMENT
    COMMENT</AC>

    COMMENT Equivalence Class Description
    COMMENT <ECD>
    COMMENT
    COMMENT Valid Class(es)
    COMMENT 
    COMMENT Class 1
    COMMENT In function 'PolygonDrawPoly', the function 'VFreeVertList' is called.
    COMMENT 
    COMMENT Class 2
    COMMENT In function 'PolygonDrawPoly', the function 'VFreeEdgeList' is called.
    COMMENT 
    COMMENT Class 3
    COMMENT In function 'PolygonDrawPoly', the function 'VBuildVertList' is called.
    COMMENT 
    COMMENT Class 4
    COMMENT In function 'PolygonDrawPoly', the ps_poly is not equal to null.
    COMMENT
    COMMENT Class 5
    COMMENT In function 'PolygonDrawPoly', the ps_poly is equal to null.
    COMMENT 
    COMMENT Class 6
    COMMENT In function 'PolygonDrawPoly', the function 'VScanLines' is called.
    COMMENT 
    COMMENT Class 7
    COMMENT In function 'VBuildVertList', the function 'VInsertVert' is called.
    COMMENT 
    COMMENT Class 8
    COMMENT In function 'VBuildVertList', the point_count is not equal to zero.
    COMMENT 
    COMMENT Class 9
    COMMENT In function 'VBuildVertList', the point_count is equal to zero.
    COMMENT
    COMMENT Class 10
    COMMENT In function 'VInsertVert', the function 'SpFindLine' is called.
    COMMENT
    COMMENT Class 11
    COMMENT  In function 'VInsertVert', s32Y of ps_prev_p is greater than s32Y of ps_vert_p. 
    COMMENT
    COMMENT Class 12
    COMMENT  In function 'VInsertVert', s32Y of ps_prev_p is less than s32Y of ps_vert_p. 
    COMMENT
    COMMENT Class 13
    COMMENT  In function 'VInsertVert', s32Y of ps_prev_p is equal to s32Y of ps_vert_p.
    COMMENT
    COMMENT Class 14
    COMMENT  In function 'VInsertVert', s32Y of ps_next_p is greater than s32Y of ps_vert_p.
    COMMENT
    COMMENT Class 15
    COMMENT  In function 'VInsertVert', s32Y of ps_next_p is less than s32Y of ps_vert_p.
    COMMENT
    COMMENT Class 16
    COMMENT  In function 'VInsertVert', s32Y of ps_next_p is equal to s32Y of ps_vert_p.
    COMMENT
    COMMENT Class 17
    COMMENT  In function 'VInsertVert', the function 'PsAllocVert' is called.
    COMMENT
    COMMENT Class 18
    COMMENT  In function 'VInsertVert', psNextV of ps lw is not equal to null.
    COMMENT
    COMMENT Class 19
    COMMENT  In function 'VInsertVert', psNextV of ps lw is equal to null.
    COMMENT
    COMMENT Class 20
    COMMENT  In function 'VInsertVert', s32X of sVertP of ps new vertical is less than s32X of sVertP of ps lw.
    COMMENT
    COMMENT Class 21
    COMMENT  In function 'VInsertVert', s32X of sVertP of ps new vertical is greater than s32X of sVertP of ps lw.
    COMMENT
    COMMENT Class 22
    COMMENT  In function 'VInsertVert', s32X of sVertP of ps new vertical is equal to s32X of sVertP of ps lw.
    COMMENT
    COMMENT Class 23
    COMMENT  In function 'VInsertVert', psNextV of ps lw is not equal to ZERO.
    COMMENT
    COMMENT Class 24
    COMMENT  In function 'VInsertVert', psNextV of ps lw is equal to ZERO.
    COMMENT
    COMMENT Class 26
    COMMENT  In function 'SpFindLine', the function 'RterrWidget' is called.
    COMMENT
    COMMENT Class 27
    COMMENT  In function 'SpFindLine', s16_scan_line is less than ZERO.
    COMMENT
    COMMENT Class 28
    COMMENT  In function 'SpFindLine', s16_scan_line is greater than ZERO.
    COMMENT
    COMMENT Class 29
    COMMENT  In function 'SpFindLine', s16_scan_line is equal to ZERO.
    COMMENT
    COMMENT Class 30
    COMMENT  In function 'SpFindLine', s16_scan_line is greater than (S16_panel_height multiplied with MAG_FACTOR).
    COMMENT
    COMMENT Class 31
    COMMENT  In function 'SpFindLine', s16_scan_line is less than (S16_panel_height multiplied with MAG_FACTOR).
    COMMENT
    COMMENT Class 32
    COMMENT  In function 'SpFindLine', s16_scan_line is equal to (S16_panel_height multiplied with MAG_FACTOR).
    COMMENT
    COMMENT Class 34
    COMMENT  In function 'SpFindLine', psNextL of ps lw is not equal to null.
    COMMENT
    COMMENT Class 35
    COMMENT  In function 'SpFindLine', psNextL of ps lw is equal to null.
    COMMENT
    COMMENT Class 36
    COMMENT  In function 'SpFindLine', s16SlineNum of ps lw is equal to s16_scan_line.
    COMMENT
    COMMENT Class 37
    COMMENT  In function 'SpFindLine', s16SlineNum of ps lw is not equal to s16_scan_line.
    COMMENT
    COMMENT Class 38
    COMMENT  In function 'SpFindLine', s16SlineNum of ps lw is greater than s16_scan_line.
    COMMENT
    COMMENT Class 39
    COMMENT  In function 'SpFindLine', s16SlineNum of ps lw is less than s16_scan_line.
    COMMENT
    COMMENT Class 41
    COMMENT  In function 'SpFindLine', the function 'PsAllocVert' is called.
    COMMENT
    COMMENT Class 42
    COMMENT  In function 'SpFindLine', psNextL of ps lw is not eqaul to zero.
    COMMENT
    COMMENT Class 43
    COMMENT  In function 'SpFindLine', psNextL of ps lw is eqaul to zero.
    COMMENT
    COMMENT Class 44
    COMMENT  In function 'PsAllocVert', the function 'RterrWidget' is called.
    COMMENT
    COMMENT Class 45
    COMMENT  In function 'PsAllocVert', next vertical equal to MAX_VERTICES multiplied with TWO.
    COMMENT
    COMMENT Class 46
    COMMENT  In function 'PsAllocVert', next vertical not equal to MAX_VERTICES multiplied with TWO.
    COMMENT
    COMMENT Class 47
    COMMENT  In function 'VScanLines', next scan line is equal to ZERO.
    COMMENT
    COMMENT Class 48
    COMMENT  In function 'VScanLines', next scan line is not equal to ZERO.
    COMMENT
    COMMENT Class 49
    COMMENT  In function 'VScanLines', active edges is not equal to ZERO.
    COMMENT
    COMMENT Class 50
    COMMENT  In function 'VScanLines', active edges is equal to ZERO.
    COMMENT
    COMMENT Class 51
    COMMENT  In function 'VScanLines', the function 'VCalculateIntersections' is called.
    COMMENT
    COMMENT Class 52
    COMMENT  In function 'VScanLines', the function 'VAddEdges' is called.
    COMMENT
    COMMENT Class 53
    COMMENT  In function 'VScanLines', Y Scan line is equal to s16SlineNum of next scan line.
    COMMENT
    COMMENT Class 54
    COMMENT  In function 'VScanLines', Y Scan line is not equal to s16SlineNum of next scan line.
    COMMENT
    COMMENT Class 55
    COMMENT  In function 'VScanLines', psNextL of next scan line is not equal to NULL.
    COMMENT
    COMMENT Class 56
    COMMENT  In function 'VScanLines', psNextL of next scan line is equal to NULL.
    COMMENT
    COMMENT Class 57
    COMMENT  In function 'VScanLines', the function 'VProcessPairsHR' is called.
    COMMENT
    COMMENT Class 58
    COMMENT  In function 'VScanLines', the function 'VProcessMagLine' is called.
    COMMENT
    COMMENT Class 59
    COMMENT  In function 'VRemoveEdges', ps this is not equal to null.
    COMMENT
    COMMENT Class 60
    COMMENT  In function 'VRemoveEdges', ps this is equal to null.
    COMMENT
    COMMENT Class 61
    COMMENT  In function 'VRemoveEdges', decremented s32Ylength of ps this is equal to ZERO.
    COMMENT
    COMMENT Class 62
    COMMENT  In function 'VRemoveEdges', decremented s32Ylength of ps this is not equal to ZERO.
    COMMENT
    COMMENT Class 63
    COMMENT  In function 'VRemoveEdges', psNextE of ps this is not equal to ZERO.
    COMMENT
    COMMENT Class 64
    COMMENT  In function 'VRemoveEdges', psNextE of ps this is equal to ZERO.
    COMMENT
    COMMENT Class 65
    COMMENT  In function 'VCalculateIntersections', psNextE of active edge list not equal to null. 
    COMMENT
    COMMENT Class 66
    COMMENT  In function 'VCalculateIntersections', psNextE of active edge list is equal to null. 
    COMMENT
    COMMENT Class 67
    COMMENT  In function 'VAddEdges', psNextV of ps_vert is not equal to ZERO. 
    COMMENT
    COMMENT Class 68
    COMMENT  In function 'VAddEdges', psNextV of ps_vert is equal to ZERO. 
    COMMENT
    COMMENT Class 69
    COMMENT  In function 'VAddEdges', s32Y of sNextP of ps_vert is greater than s32Y of sVertP of ps_vert. 
    COMMENT
    COMMENT Class 70
    COMMENT  In function 'VAddEdges', s32Y of sNextP of ps_vert is less than s32Y of sVertP of ps_vert. 
    COMMENT
    COMMENT Class 71
    COMMENT  In function 'VAddEdges', s32Y of sNextP of ps_vert is equal to s32Y of sVertP of ps_vert. 
    COMMENT
    COMMENT Class 72
    COMMENT  In function 'VAddEdges', the function 'PsAllocEdge' is called. 
    COMMENT
    COMMENT Class 73
    COMMENT  In function 'VAddEdges', the function 'VEdgeInit' is called. 
    COMMENT
    COMMENT Class 74
    COMMENT  In function 'VAddEdges', the function 'VEdgeInsert' is called. 
    COMMENT
    COMMENT Class 75
    COMMENT  In function 'VAddEdges', s32Y of sPrevP of ps_vert is greater than s32Y of sVertP of ps_vert. 
    COMMENT
    COMMENT Class 76
    COMMENT  In function 'VAddEdges', s32Y of sPrevP of ps_vert is less than s32Y of sVertP of ps_vert. 
    COMMENT
    COMMENT Class 77
    COMMENT  In function 'VAddEdges', s32Y of sPrevP of ps_vert is equal to s32Y of sVertP of ps_vert. 
    COMMENT
    COMMENT Class 78
    COMMENT  In function 'VProcessPairsHR', active edges is not equal to ZERO. 
    COMMENT
    COMMENT Class 79
    COMMENT  In function 'VProcessPairsHR', active edges is equal to ZERO. 
    COMMENT
    COMMENT Class 80
    COMMENT  In function 'VProcessPairsHR', the function 'RterrWidget' is called. 
    COMMENT
    COMMENT Class 81
    COMMENT  In function 'VProcessPairsHR', active edges MOD TWO is not equal to ZERO. 
    COMMENT
    COMMENT Class 82
    COMMENT  In function 'VProcessPairsHR', active edges MOD TWO is equal to ZERO. 
    COMMENT
    COMMENT Class 83
    COMMENT  In function 'VProcessPairsHR', U8_which_mag_line is equal to ZERO. 
    COMMENT
    COMMENT Class 84
    COMMENT  In function 'VProcessPairsHR', U8_which_mag_line is not equal to ZERO. 
    COMMENT
    COMMENT Class 85
    COMMENT  In function 'VProcessPairsHR', ps this is not equal to ZERO.  
    COMMENT
    COMMENT Class 86
    COMMENT  In function 'VProcessPairsHR', ps this is equal to ZERO. 
    COMMENT
    COMMENT Class 87
    COMMENT  In function 'VProcessPairsHR', start scan X0 is less than end scan X1. 
    COMMENT
    COMMENT Class 88
    COMMENT  In function 'VProcessPairsHR', start scan X0 is greater than end scan X1. 
    COMMENT
    COMMENT Class 89
    COMMENT  In function 'VProcessPairsHR', start scan X0 is equal to end scan X1. 
    COMMENT
    COMMENT Class 90
    COMMENT  In function 'VProcessPairsHR', start scan X0 MOD FOUR is equal to TRUE. 
    COMMENT
    COMMENT Class 91
    COMMENT  In function 'VProcessPairsHR', start scan X0 MOD FOUR is not equal to TRUE. 
    COMMENT
    COMMENT Class 92
    COMMENT  In function 'VProcessPairsHR', the (end scan X1 minus start scan X0) is greater than SIXTEEN. 
    COMMENT
    COMMENT Class 93
    COMMENT  In function 'VProcessPairsHR', the (end scan X1 minus start scan X0) is less than SIXTEEN. 
    COMMENT
    COMMENT Class 94
    COMMENT  In function 'VProcessPairsHR', the (end scan X1 minus start scan X0) is equal to SIXTEEN. 
    COMMENT
    COMMENT Class 95
    COMMENT  In function 'VProcessPairsHR', the (end scan X1 minus start scan X0) is greater than EIGHT. 
    COMMENT
    COMMENT Class 96
    COMMENT  In function 'VProcessPairsHR', the (end scan X1 minus start scan X0) is less than EIGHT. 
    COMMENT
    COMMENT Class 97
    COMMENT  In function 'VProcessPairsHR', the (end scan X1 minus start scan X0) is equal to EIGHT. 
    COMMENT
    COMMENT Class 98
    COMMENT  In function 'VProcessPairsHR', the (end scan X1 minus start scan X0) is greater than FOUR. 
    COMMENT
    COMMENT Class 99
    COMMENT  In function 'VProcessPairsHR', the (end scan X1 minus start scan X0) is less than FOUR. 
    COMMENT
    COMMENT Class 100
    COMMENT  In function 'VProcessPairsHR', the (end scan X1 minus start scan X0) is equal to FOUR. 
    COMMENT
    COMMENT Class 101
    COMMENT  In function 'VProcessPairsHR', s16_scan_y MOD FOUR is equal to THREE. 
    COMMENT
    COMMENT Class 102
    COMMENT  In function 'VProcessPairsHR', s16_scan_y MOD FOUR is not equal to THREE. 
    COMMENT
    COMMENT Class 103
    COMMENT  In function 'VProcessPairsHR', the function 'VProcessMagLine' is called. 
    COMMENT
    COMMENT Class 104
    COMMENT  In function 'VProcessMagLine', S16_scan_xmin is greater than S16_scan_xmax. 
    COMMENT
    COMMENT Class 105
    COMMENT  In function 'VProcessMagLine', S16_scan_xmin is less than S16_scan_xmax. 
    COMMENT
    COMMENT Class 106
    COMMENT  In function 'VProcessMagLine', S16_scan_xmin is equal to S16_scan_xmax. 
    COMMENT
    COMMENT Class 107
    COMMENT  In function 'VProcessMagLine', U8_which_mag_line is equal to ZERO. 
    COMMENT
    COMMENT Class 108
    COMMENT  In function 'VProcessMagLine', U8_which_mag_line is not equal to ZERO. 
    COMMENT
    COMMENT Class 109
    COMMENT  In function 'VProcessMagLine', the function 'Dma2dScanLineBlend' is called. 
    COMMENT
    COMMENT Class 110
    COMMENT  In function 'PsAllocEdge', the function 'RterrWidget' is called. 
    COMMENT
    COMMENT Class 111
    COMMENT  In function 'PsAllocEdge', next edge is equal to MAX_EDGES. 
    COMMENT
    COMMENT Class 112
    COMMENT  In function 'PsAllocEdge', next edge is not equal to MAX_EDGES. 
    COMMENT
    COMMENT Class 113
    COMMENT  In function 'VEdgeInit', s32YLength  of ps_edge not equal to zero. 
    COMMENT
    COMMENT Class 114
    COMMENT  In function 'VEdgeInit', s32YLength  of ps_edge is equal to zero. 
    COMMENT
    COMMENT Class 115
    COMMENT  In function 'VEdgeInit', s32Slope of ps_edge is less than ZERO. 
    COMMENT
    COMMENT Class 116
    COMMENT  In function 'VEdgeInit', s32Slope of ps_edge is greater than ZERO. 
    COMMENT
    COMMENT Class 117
    COMMENT  In function 'VEdgeInit', s32Slope of ps_edge is equal to ZERO. 
    COMMENT
    COMMENT Class 118
    COMMENT  In function 'VEdgeInsert', the psNextE of ps lw is not equal to null. 
    COMMENT
    COMMENT Class 119
    COMMENT  In function 'VEdgeInsert', the psNextE of ps lw is equal to null. 
    COMMENT
    COMMENT Class 120
    COMMENT  In function 'VEdgeInsert', s32X of sFirstP of ps_this is equal to s32_x1 of ps lw. 
    COMMENT
    COMMENT Class 121
    COMMENT  In function 'VEdgeInsert', s32X of sFirstP of ps_this is not equal to s32_x1 of ps lw. 
    COMMENT
    COMMENT Class 122
    COMMENT  In function 'VEdgeInsert', s32Slope of ps_this is less than s32Slope of ps lw. 
    COMMENT
    COMMENT Class 123
    COMMENT  In function 'VEdgeInsert', s32Slope of ps_this is greater than s32Slope of ps lw. 
    COMMENT
    COMMENT Class 124
    COMMENT  In function 'VEdgeInsert', s32Slope of ps_this is equal to s32Slope of ps lw. 
    COMMENT
    COMMENT Class 125
    COMMENT  In function 'VEdgeInsert', s32X of sFirstP of ps_this is less than s32_x1 of ps lw. 
    COMMENT
    COMMENT Class 126
    COMMENT  In function 'VEdgeInsert', s32X of sFirstP of ps_this is greater than s32_x1 of ps lw. 
    COMMENT
    COMMENT Class 127
    COMMENT  In function 'VEdgeInsert', s32X of sFirstP of ps_this is equal to s32_x1 of ps lw. 
    COMMENT
    COMMENT Class 128
    COMMENT  In function 'VEdgeInsert', psNextE of ps lw is not equal to ZERO.  
    COMMENT
    COMMENT Class 129
    COMMENT  In function 'VEdgeInsert', psNextE of ps lw is equal to ZERO. 
    COMMENT
    COMMENT Class 130
    COMMENT  In function 'PolygonFillRect', the function 'PolygonFillRectTranslate' is called. 
    COMMENT
    COMMENT Class 131
    COMMENT  In function 'PolygonFillRectTranslate', E_orientation is equal to E_PORTRAIT.
    COMMENT
    COMMENT Class 132
    COMMENT  In function 'PolygonFillRectTranslate', E_orientation is not equal to E_PORTRAIT.
    COMMENT
    COMMENT Class 133
    COMMENT  In function 'PolygonFillRectTranslate', u8_translate is equal to ZERO.
    COMMENT
    COMMENT Class 134
    COMMENT  In function 'PolygonFillRectTranslate', u8_translate is not equal to ZERO.
    COMMENT
    COMMENT Class 135
    COMMENT  In function 'PolygonFillRectTranslate', s16_ulx plus s16_width is greater than S16_panel_width .
    COMMENT
    COMMENT Class 136
    COMMENT  In function 'PolygonFillRectTranslate', s16_ulx plus s16_width is less than S16_panel_width .
    COMMENT
    COMMENT Class 137
    COMMENT  In function 'PolygonFillRectTranslate', s16_ulx plus s16_width is equal S16_panel_width .
    COMMENT
    COMMENT Class 138
    COMMENT  In function 'PolygonFillRectTranslate', s16_uly plus s16_height is greater than S16_panel_height.
    COMMENT
    COMMENT Class 139
    COMMENT  In function 'PolygonFillRectTranslate', s16_uly plus s16_height is less than S16_panel_height.
    COMMENT
    COMMENT Class 140
    COMMENT  In function 'PolygonFillRectTranslate', s16_uly plus s16_height is equal to S16_panel_height.
    COMMENT
    COMMENT Class 141
    COMMENT  In function 'PolygonFillRectTranslate', s16_width is equal to ZERO.
    COMMENT
    COMMENT Class 142
    COMMENT  In function 'PolygonFillRectTranslate', s16_width is not equal to ZERO.
    COMMENT
    COMMENT Class 143
    COMMENT  In function 'PolygonFillRectTranslate', s16_height is equal to ZERO. 
    COMMENT
    COMMENT Class 144
    COMMENT  In function 'PolygonFillRectTranslate', s16_height is not equal to ZERO. 
    COMMENT
    COMMENT Class 145
    COMMENT  In function 'PolygonFillRectTranslate', the function 'Dma2dFillBox' is called. 
    COMMENT
    COMMENT Class 146
    COMMENT  In function 'PolygonFillRectNT', the function 'PolygonFillRectTranslate' is called. 
    COMMENT
    COMMENT Class 147
    COMMENT  In function 'PolygonDrawFrame', E_orientation is equal to E_PORTRAIT.
    COMMENT
    COMMENT Class 148
    COMMENT  In function 'PolygonDrawFrame', E_orientation is not equal to E_PORTRAIT.
    COMMENT
    COMMENT Class 149
    COMMENT  In function 'PolygonDrawFrame', the function 'WidgetsRGB444ToRGB888' is called
    COMMENT
    COMMENT Class 150
    COMMENT  In function 'PolygonDrawFrame', the function 'Dma2dFillBox' is called
    COMMENT
    COMMENT Class 153
    COMMENT  In function 'VScanLines', the function 'VRemoveEdges' is called.
    COMMENT 
    COMMENT Invalid Class(es)
    COMMENT
    COMMENT Class 151
    COMMENT In function 'VProcessMagLine', the Array size leads beyond the limit 
    COMMENT   
    COMMENT Class 152
    COMMENT  In function 'PsAllocEdge',  the Array size leads beyond the limit 
    COMMENT   
    COMMENT Class 154
    COMMENT  In function 'PsAllocVert',  the Array size leads beyond the limit 
    COMMENT     
    COMMENT </ECD>
--------------------------------------------------------------------------------
--
-- STUB DECLARATIONS OF THE TESTED OR INTEGRATED UNITS
--
--------------------------------------------------------------------------------
SIMUL
DEFINE STUB hdudispfpolygon1_c
    #T_UINT32 WidgetsRGB444ToRGB888(T_EPENCOLOR _in e_pen_color); 
    #void Dma2dFillBox(T_UINT16 _in u16_x_loc, T_UINT16 _in u16_y_loc, T_UINT16 _in width, T_UINT16 _in height, T_UINT32 _in u32_color); 
    --To verify the parameters scan_line, frame_data made as _no
    #void Dma2dScanLineBlend(void _no *scan_line, void _no *frame_data, T_UINT32 _in u32_width, T_UINT16 _in e_color)
    #{
    # 
    # PTU_scan_line_1  = (T_UINT8*)scan_line;
    # PTU_scan_line    =  *PTU_scan_line_1; //Verify value of scan_line
    # PTU_frame_data_1 = (T_UINT16 *)frame_data;   
    # PTU_frame_data   =  *PTU_frame_data_1;   //Verify value of frame_data
    #}
    
    --To verify the parameters pc_file, pc_message made as _no
    #void RterrWidget(char _no pc_file[200], T_INT32 _in s32_line_number, char _no pc_message[200])
    #{
    # PTU_count = PTU_count+1;
    # if(PTU_count==1)                                   // First call of RterrWidget
    # {
    #  PTU_temp = 0;
    #  while(pc_file[PTU_temp]!= ZERO)
    #  {
    #    PTU_pc_file_in_1[PTU_temp]= pc_file[PTU_temp];   //Verify pc_file path  
    #    PTU_temp = PTU_temp+1;
    #  }
    #    PTU_pc_file_in_1[PTU_temp]= ZERO;
    #
    #  PTU_temp = 0;
    #  while(pc_message[PTU_temp]!= ZERO)
    #  {
    #    PTU_pc_message_in_1[PTU_temp]= pc_message[PTU_temp];  //Verify pc_message
    #    PTU_temp = PTU_temp+1;
    #  }
    #    PTU_pc_message_in_1[PTU_temp]= ZERO;
    #
    # }
    #
    # if(PTU_count==2)                                   // Second call of RterrWidget
    # {
    #  PTU_temp = 0;
    #  while(pc_file[PTU_temp]!= ZERO)
    #  {
    #    PTU_pc_file_in_2[PTU_temp]= pc_file[PTU_temp];    //Verify pc_file path
    #    PTU_temp = PTU_temp+1;
    #  }
    #    PTU_pc_file_in_2[PTU_temp]= ZERO;
    #
    #  PTU_temp = 0;
    #  while(pc_message[PTU_temp]!= ZERO)
    #  {
    #    PTU_pc_message_in_2[PTU_temp]= pc_message[PTU_temp];  //Verify pc_message
    #    PTU_temp = PTU_temp+1;
    #  }
    #    PTU_pc_message_in_2[PTU_temp]= ZERO;
    #
    # }
    #
    # if(PTU_count==3)                                   // Third call of RterrWidget
    # {
    #  PTU_temp = 0;
    #  while(pc_file[PTU_temp]!= ZERO)
    #  {
    #    PTU_pc_file_in_3[PTU_temp]= pc_file[PTU_temp];    //Verify pc_file path
    #    PTU_temp = PTU_temp+1;
    #  }
    #    PTU_pc_file_in_3[PTU_temp]= ZERO;
    #
    #  PTU_temp = 0;
    #  while(pc_message[PTU_temp]!= ZERO)
    #  {
    #    PTU_pc_message_in_3[PTU_temp]= pc_message[PTU_temp];  //Verify pc_message
    #    PTU_temp = PTU_temp+1;
    #  }
    #    PTU_pc_message_in_3[PTU_temp]= ZERO;
    #
    # }
    #
    # if(PTU_count==4)                                   // Fourth call of RterrWidget
    # {
    #  PTU_temp = 0;
    #  while(pc_file[PTU_temp]!= ZERO)
    #  {
    #    PTU_pc_file_in_4[PTU_temp]= pc_file[PTU_temp];    //Verify pc_file path
    #    PTU_temp = PTU_temp+1;
    #  }
    #    PTU_pc_file_in_4[PTU_temp]= ZERO;
    #
    #  PTU_temp = 0;
    #  while(pc_message[PTU_temp]!= ZERO)
    #  {
    #    PTU_pc_message_in_4[PTU_temp]= pc_message[PTU_temp];  //Verify pc_message
    #    PTU_temp = PTU_temp+1;
    #  }
    #    PTU_pc_message_in_4[PTU_temp]= ZERO;
    #
    # }
    # 
    #}
    
END DEFINE
ELSE_SIMUL

    -- No action defined as of now if the module is not simulated
    
END SIMUL      

--------------------------------------------------------------------------------
--
-- ENVIRONMENTS DECLARATIONS
--
--------------------------------------------------------------------------------
--IF HOST

-- No special things that have to be done on the host to run the test.

--ELSE

-- No action defined for the target execution as of now

--END IF
--------------------------------------------------------------------------------
-- TESTED FILE ENVIRONNEMENT
--------------------------------------------------------------------------------

-- Environment of the file hdudispfpolygon1.c
ENVIRONMENT ENV_hdudispfpolygon1_c

  VAR U8_which_mag_line,    init = 0,                   ev = init
  
  VAR S16_scan_xmin,        init = 0,                   ev = init
  
  ARRAY U8_mag_line1,       init = { others => 0 },     ev = init
  
  VAR S16_scan_xmax,        init = 0,                   ev = init
  
  ARRAY U8_mag_line2,       init = { others => 0 },     ev = init
  
  VAR Vp_fgfb2,             init = 0 ,                    ev = init
  
  VAR S16_panel_width,      init = 0,                   ev = init
  
  VAR S16_panel_height,     init = 0,                   ev = init
  
END ENVIRONMENT -- ENV_hdudispfpolygon1_c
USE ENV_hdudispfpolygon1_c

--------------------------------------------------------------------------------
--
-- SERVICES DECLARATIONS
--
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
-- Declaration of the service PolygonDrawPoly
--------------------------------------------------------------------------------
SERVICE PolygonDrawPoly
SERVICE_TYPE extern

-- Tested service parameters declarations
#T_SPOLY ps_poly;
#T_EPENCOLOR e_color;

--Local variable declarations to provide inputs for ps_poly
# T_SRECTPOINT PTU_psRP[10], PTU_psRP_1[10],PTU_psRP_2[10],PTU_psRP_3[10],PTU_psRP_4[10],PTU_psRP_5[10];
# T_SRECTPOINT PTU_psRP_6[10],PTU_psRP_7[10],PTU_psRP_8[10],PTU_psRP_9[10],PTU_psRP_10[10];
# T_SRECTPOINT PTU_psRP_11[10],PTU_psRP_12[10],PTU_psRP_13[10],PTU_psRP_14[10],PTU_psRP_15[10];
# T_SRECTPOINT PTU_psRP_16[10],PTU_psRP_17[10],PTU_psRP_18[10],PTU_psRP_19[10],PTU_psRP_20[10];
# T_SRECTPOINT PTU_psRP_21[10],PTU_psRP_22[10],PTU_psRP_23[10],PTU_psRP_24[10],PTU_psRP_25[10];
# T_SRECTPOINT PTU_psRP_26[10],PTU_psRP_27[10],PTU_psRP_28[10],PTU_psRP_29[10],PTU_psRP_30[10];
# T_SRECTPOINT PTU_psRP_31[10],PTU_psRP_32[10],PTU_psRP_33[10],PTU_psRP_34[10],PTU_psRP_35[10];
# T_SRECTPOINT PTU_psRP_36[10],PTU_psRP_37[10],PTU_psRP_38[10],PTU_psRP_39[10],PTU_psRP_40[10];
# T_SRECTPOINT PTU_psRP_41[10],PTU_psRP_42[10],PTU_psRP_43[10],PTU_psRP_44[10],PTU_psRP_45[10];
# T_SRECTPOINT PTU_psRP_46[10],PTU_psRP_47[10],PTU_psRP_48[10],PTU_psRP_49[10],PTU_psRP_50[10];

# T_SPOLARPOINT PTU_psPP[10], PTU_psPP_1[10],PTU_psPP_2[10],PTU_psPP_3[10],PTU_psPP_4[10],PTU_psPP_5[10];
# T_SPOLARPOINT PTU_psPP_6[10],PTU_psPP_7[10],PTU_psPP_8[10],PTU_psPP_9[10],PTU_psPP_10[10];
# T_SPOLARPOINT PTU_psPP_11[10],PTU_psPP_12[10],PTU_psPP_13[10],PTU_psPP_14[10],PTU_psPP_15[10];
# T_SPOLARPOINT PTU_psPP_16[10],PTU_psPP_17[10],PTU_psPP_18[10],PTU_psPP_19[10],PTU_psPP_20[10];
# T_SPOLARPOINT PTU_psPP_21[10],PTU_psPP_22[10],PTU_psPP_23[10],PTU_psPP_24[10],PTU_psPP_25[10];
# T_SPOLARPOINT PTU_psPP_26[10],PTU_psPP_27[10],PTU_psPP_28[10],PTU_psPP_29[10],PTU_psPP_30[10];
# T_SPOLARPOINT PTU_psPP_31[10],PTU_psPP_32[10],PTU_psPP_33[10],PTU_psPP_34[10],PTU_psPP_35[10];
# T_SPOLARPOINT PTU_psPP_36[10],PTU_psPP_37[10],PTU_psPP_38[10],PTU_psPP_39[10],PTU_psPP_40[10];
# T_SPOLARPOINT PTU_psPP_41[10],PTU_psPP_42[10],PTU_psPP_43[10],PTU_psPP_44[10],PTU_psPP_45[10];
# T_SPOLARPOINT PTU_psPP_46[10],PTU_psPP_47[10],PTU_psPP_48[10],PTU_psPP_49[10],PTU_psPP_50[10];

# T_SPOLY PTU_psNext_1,PTU_psNext_2,PTU_psNext_3,PTU_psNext_4,PTU_psNext_5,PTU_psNext_6,PTU_psNext_7,PTU_psNext_8,PTU_psNext_9,PTU_psNext_10;
# T_SPOLY PTU_psNext_11,PTU_psNext_12,PTU_psNext_13,PTU_psNext_14,PTU_psNext_15,PTU_psNext_16,PTU_psNext_17,PTU_psNext_18,PTU_psNext_19,PTU_psNext_20;
# T_SPOLY PTU_psNext_21,PTU_psNext_22,PTU_psNext_23,PTU_psNext_24,PTU_psNext_25,PTU_psNext_26,PTU_psNext_27,PTU_psNext_28,PTU_psNext_29,PTU_psNext_30;
# T_SPOLY PTU_psNext_31,PTU_psNext_32,PTU_psNext_33,PTU_psNext_34,PTU_psNext_35,PTU_psNext_36,PTU_psNext_37,PTU_psNext_38,PTU_psNext_39,PTU_psNext_40;
# T_SPOLY PTU_psNext_41,PTU_psNext_42,PTU_psNext_43,PTU_psNext_44,PTU_psNext_45,PTU_psNext_46,PTU_psNext_47,PTU_psNext_48,PTU_psNext_49,PTU_psNext_50;

ENVIRONMENT ENV_PolygonDrawPoly

    STRUCTURE ps_poly,      init = { s16Pts => 0, psRP => NIL, psPP => NIL, psNext => NIL },        ev = init
    
    VAR e_color,            init = BLACK,                                                           ev = init
    
END ENVIRONMENT -- ENV_PolygonDrawPoly

USE ENV_PolygonDrawPoly

TEST 22
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT [hdudispfpolygon1-PolygonDrawPoly-DB-LLR-003]
    COMMENT The function "PolygonDrawPoly", calls the function VScanLines to fill the polygon using the scan line algorithm
    COMMENT Equivalence Class 6
    COMMENT 
    COMMENT [hdudispfpolygon1-VScanLines-DB-LLR-002]
    COMMENT In first iteration,
    COMMENT The function "VScanLines", returns when active edges is equal to ZERO.
    COMMENT  The function "VScanLines",loops till active edges is not equal to ZERO and does following 
    COMMENT     - Calls the function "VProcessPairsHR" with parameter Y Scan line to fill alternate pairs of lines.
    COMMENT Equivalence Class 49,50,57
    COMMENT 
    COMMENT [hdudispfpolygon1-PsAllocVert-DB-LLR-002]
    COMMENT The function 'PsAllocVert' performs the following:
    COMMENT  - Sets ps this to address of vertical pool with index next vertical.
    COMMENT  - Sets psPrevV of ps this, psNextV of ps this , psPrevL of ps this, psNextL of ps this to ZERO.
    COMMENT  - Sets s16SlineNum of ps this to minus One
    COMMENT  - Increments next vertical by one
    COMMENT  - returns ps this.
    COMMENT Equivalence Class none
    COMMENT 
    COMMENT [hdudispfpolygon1-VProcessPairsHR-DB-LLR-001]
    COMMENT In first iteration,
    COMMENT The function "VProcessPairsHR", returns when active edges is equal to ZERO.
    COMMENT From this, variable 'S16_active_edges' can be verified for the LLR 'hdudispfpolygon1-VFreeEdgeList-DB-LLR-001'
    COMMENT In the next iterations,
    COMMENT The function "VProcessPairsHR", does nothing when active edges is not equal to ZERO.
    COMMENT From this, variable 'S16_active_edges' can be verified for the LLR 'hdudispfpolygon1-VEdgeInsert-DB-LLR-002'
    COMMENT Equivalence Class 79,78
    COMMENT 
    COMMENT [hdudispfpolygon1-VProcessPairsHR-DB-LLR-002]
    COMMENT The function "VProcessPairsHR", does nothing when active edges MOD TWO is equal to ZERO.
    COMMENT Since 'S16_active_edges' variable gets updated to even values(0,2,4..) in each iteration.
    COMMENT MOD of active edges with TWO is ZERO.
    COMMENT Equivalence Class 82
    COMMENT
    COMMENT [hdudispfpolygon1-VProcessPairsHR-DB-LLR-003]
    COMMENT For the 1st iteration, 
    COMMENT The function "VProcessPairsHR" set mag line to U8_mag_line1 when U8_which_mag_line is equal to ZERO.(i.e.U8_mag_line1-minimum)
    COMMENT Since 'U8_mag_line1' variable is set to an local address(u8_mag_line), this cannot be verified.
    COMMENT Equivalence Class 83
    COMMENT
    COMMENT [hdudispfpolygon1-VProcessPairsHR-DB-LLR-005]
    COMMENT The function "VProcessPairsHR", for the 1st iteration, ps this equal to ZERO , Since it is set to NULL.
    COMMENT The function "VProcessPairsHR" initialize ps this to psNextE of active edge list and loop till ps this not equal to ZERO 
    COMMENT and does following (when the address is valid)
    COMMENT 1.Sets S16_scan_xmin to result of macro MIN with parameter s32_x1 of ps this and S16_scan_xmin.
    COMMENT 2.Sets S16_scan_xmax to result of macro MAX with parameter s32_x1 of psNextE of ps this and S16_scan_xmax.
    COMMENT 3.Sets start of scan X0 to s32_x1 of ps this.
    COMMENT 4.Sets end of scan X1 to s32_x1 of psNextE of ps this.
    COMMENT Variable "S16_scan_xmin", "S16_scan_xmax" are verifed in LLR "hdudispfpolygon1-VProcessMagLine-DB-LLR-001"
    COMMENT Equivalence Class 85,86
    COMMENT
    COMMENT [hdudispfpolygon1-VProcessPairsHR-DB-LLR-010]
    COMMENT The function 'VProcessPairsHR' sets mag line with index start scan X0 divided by FOUR to mag line with index 
    COMMENT start scan X0 divided by FOUR plus REM_PIXEL_BOUN multipled with difference of end scan X1 and start scan X0.
    COMMENT Set ps this to psNextE of ps this and ps this to psNextE of ps this. till ps this not equal to ZERO. 
    COMMENT Equivalence Class none
    COMMENT
    COMMENT
    COMMENT [hdudispfpolygon1-VProcessPairsHR-DB-LLR-011]
    COMMENT The function calls "VProcessMagLine" with parameter s16_scan_y to add edge members
    COMMENT for a given scan line when s16_scan_y MOD FOUR is equal to THREE else does nothing.
    COMMENT Equivalence Class 101, 102, 103
    COMMENT 
    COMMENT [hdudispfpolygon1-VProcessMagLine-DB-LLR-001]
    COMMENT The function "VProcessMagLine", does nothing S16_scan_xmin is less than S16_scan_xmax.
    COMMENT Equivalence Class 105
    COMMENT
    COMMENT [hdudispfpolygon1-VProcessMagLine-DB-LLR-002]
    COMMENT The function "VProcessMagLine", sets mag line to U8_mag_line1 and U8_which_mag_line to ONE 
    COMMENT when U8_which_mag_line is equal to ZERO.
    COMMENT Equivalence Class 107
    COMMENT
    COMMENT [hdudispfpolygon1-VProcessMagLine-DB-LLR-004]
    COMMENT The function "VProcessMagLine" does the following
    COMMENT 1.Sets scan pointer to address of u8_mag_line with index S16_scan_xmin divided by FOUR.
    COMMENT 2.Sets frame pointer to Vp_fgfb2 plus S16_scan_xmin divided by FOUR plus (s16_scan_y divided by FOUR multiply with S16_panel_width)
    COMMENT 3.Sets width to (S16_scan_xmax divided by FOUR minus S16_scan_xmin divided by FOUR) plus ONE.
    COMMENT 4.Calls function Dma2dScanLineBlend with parameters scan pointer, frame pointer, width and color  to be displayed .
    COMMENT 5.Sets S16_scan_xmin to S16_panel_width multiply with FOUR.
    COMMENT 6.Sets S16_scan_xmax to ZERO.
    COMMENT Equivalence Class 109   
    COMMENT </TD> 
    
    ELEMENT
        
        COMMENT INPUT SECTION:
        
            STRUCTURE ps_poly,          init = { s16Pts => 3, psRP => &PTU_psRP, 
            &                                  psPP => &PTU_psPP, psNext => NIL },              ev= init

            VAR PTU_psRP[0].s32X,       init=0,                                                 ev= init

            VAR PTU_psRP[0].s32Y,       init=4,                                                 ev= init

            VAR PTU_psRP[1].s32X,       init=0,                                                 ev= init

            VAR PTU_psRP[1].s32Y,       init=7,                                                 ev= init

            VAR PTU_psRP[2].s32X,       init=0,                                                 ev= init

            VAR PTU_psRP[2].s32Y,       init=5,                                                 ev= init

            VAR PTU_psRP[3..9].s32X,    init=0,                                                ev= init

            VAR PTU_psRP[3..9].s32Y,    init=0,                                                ev= init

            VAR PTU_psPP[0..9].s32R,    init=30,                                                ev= init

            VAR PTU_psPP[0..9].s32A,    init=40,                                                ev= init

            VAR e_color,                init = DARK_BLUE,                                          ev= init

            VAR U8_mag_line1,           init = {others=>0},                                     ev= init

            VAR U8_mag_line2,           init = {others=>6},                                     ev= init

            VAR Vp_fgfb2,               init = &PTU_Vp_fgfb2[0],                               ev= init
        
            ARRAY PTU_Vp_fgfb2,         init = {0=>10,1=>20,2=>30,3=>40,4=>50,5=>60,6=>70,
            &                                   7=>80,8=>90,9=>100,10=>110,11=>120,12=>130,
            &                                   13=>140, 14=>150, 15=>160,16=>170,others=>180},  ev= init  

            VAR S16_panel_width,        init = 4,                                               ev= init

            VAR S16_panel_height,       init = 1,                                               ev= init


        COMMENT OUTPUT SECTION:

            VAR PTU_count,              init = 0,                                               ev= 2

            VAR PTU_scan_line,          init=1,                                                 ev= 0

            VAR PTU_frame_data,         init=0,                                                 ev= 50

            VAR PTU_pc_file_in_1,       init="AA",                                              ev=glob_file_name

            VAR PTU_pc_message_in_1,    init= "AAA",                                            ev="Polly exceeds display size."

        COMMENT INPUT/OUTPUT SECTION:

            VAR U8_which_mag_line,      init= 0,                                                ev= 1

            VAR S16_scan_xmin,          init =50,                                                ev= 16

            VAR S16_scan_xmax,          init= 6,                                                ev= 0
        
        --Stub Calls:
        SIMUL
        
             STUB RterrWidget(195)  
             STUB RterrWidget(195)   
             STUB Dma2dScanLineBlend(2,DARK_BLUE)
                    
        END SIMUL
        
    #PolygonDrawPoly(&ps_poly, e_color);
    END ELEMENT

END TEST -- TEST 22   

TEST 23
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT [hdudispfpolygon1-VProcessPairsHR-DB-LLR-002]
    COMMENT The function "VProcessPairsHR", does nothing when U8_which_mag_line is not equal to ZERO.
    COMMENT Equivalence Class 108
    COMMENT 
    COMMENT [hdudispfpolygon1-VProcessPairsHR-DB-LLR-011]
    COMMENT The function calls "VProcessMagLine" with parameter s16_scan_y to add edge members
    COMMENT for a given scan line when s16_scan_y MOD FOUR is equal to THREE.
    COMMENT Equivalence Class 103
    COMMENT 
    COMMENT [hdudispfpolygon1-VProcessMagLine-DB-LLR-002]
    COMMENT The function sets mag line to U8_mag_line1 and U8_which_mag_line to ONE when U8_which_mag_line is equal to ZERO(nominal).
    COMMENT U8_which_mag_line is tested for nominal value.
    COMMENT Equivalence Class 107        
    COMMENT
    COMMENT [hdudispfpolygon1-VProcessMagLine-DB-LLR-004]
    COMMENT The function "VProcessMagLine" does the following
    COMMENT 1.Set scan pointer to address of u8_mag_line with index S16_scan_xmin divided by FOUR.
    COMMENT 2.Set frame pointer to Vp_fgfb2 plus S16_scan_xmin divided by FOUR plus (s16_scan_y divided by FOUR multiply with S16_panel_width)
    COMMENT 3.Set width to (S16_scan_xmax divided by FOUR minus S16_scan_xmin divided by FOUR) plus ONE.
    COMMENT 4.Call function Dma2dScanLineBlend with parameters scan pointer, frame pointer, width and color  to be displayed .
    COMMENT 5.Set S16_scan_xmin to S16_panel_width multiply with FOUR.
    COMMENT 6.Set S16_scan_xmax to ZERO.
    COMMENT Equivalence Class 109   
    COMMENT </TD> 
    
    ELEMENT
        
        COMMENT INPUT SECTION:
        
            STRUCTURE ps_poly,          init = { s16Pts => 3, psRP => &PTU_psRP, 
            &                                  psPP => &PTU_psPP, psNext => NIL },              ev= init

            VAR PTU_psRP[0].s32X,       init=0,                                                 ev= init

            VAR PTU_psRP[0].s32Y,       init=4,                                                 ev= init

            VAR PTU_psRP[1].s32X,       init=0,                                                 ev= init

            VAR PTU_psRP[1].s32Y,       init=7,                                                 ev= init

            VAR PTU_psRP[2].s32X,       init=0,                                                 ev= init

            VAR PTU_psRP[2].s32Y,       init=5,                                                 ev= init

            VAR PTU_psRP[3..9].s32X,    init=0,                                                ev= init

            VAR PTU_psRP[3..9].s32Y,    init=0,                                                ev= init

            VAR PTU_psPP[0..9].s32R,    init=30,                                                ev= init

            VAR PTU_psPP[0..9].s32A,    init=40,                                                ev= init

            VAR e_color,                init = DARK_BLUE,                                          ev= init

            VAR U8_mag_line1,           init = {others=>20},                                     ev= init

            VAR U8_mag_line2,           init = {others=>6},                                     ev= init

            VAR Vp_fgfb2,               init = &PTU_Vp_fgfb2[0],                               ev= init
        
            ARRAY PTU_Vp_fgfb2,         init = {0=>10,1=>20,2=>30,3=>40,4=>0,5=>60,6=>70,
            &                                   7=>80,8=>90,9=>100,10=>110,11=>120,12=>130,
            &                                   13=>140, 14=>150, 15=>160,16=>170,others=>180},  ev= init  

            VAR S16_panel_width,        init = 4,                                               ev= init

            VAR S16_panel_height,       init = 1,                                               ev= init


        COMMENT OUTPUT SECTION:

            VAR PTU_count,              init = 0,                                               ev= 2

            VAR PTU_scan_line,          init=0,                                                 ev= 20

            VAR PTU_frame_data,         init=1,                                                 ev= 0

            VAR PTU_pc_file_in_1,       init="AA",                                              ev=glob_file_name

            VAR PTU_pc_message_in_1,    init= "AAA",                                            ev="Polly exceeds display size."
        
        COMMENT INPUT/OUTPUT SECTION:

            VAR U8_which_mag_line,      init= 0,                                                ev= 1

            VAR S16_scan_xmin,          init =4,                                                ev= 16

            VAR S16_scan_xmax,          init= 5,                                                ev= 0
        
        --Stub Calls:
        SIMUL
        
             STUB RterrWidget(195)    
             STUB RterrWidget(195) 
             STUB Dma2dScanLineBlend(2,DARK_BLUE)
                    
        END SIMUL
        
    #PolygonDrawPoly(&ps_poly, e_color);
    END ELEMENT

END TEST -- TEST 23   
      
TEST 24
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT [hdudispfpolygon1-VProcessPairsHR-DB-LLR-001]
    COMMENT In first iteration,
    COMMENT The function "VProcessPairsHR", returns when active edges is not equal to ZERO.
    COMMENT In the next iterations,
    COMMENT The function "VProcessPairsHR", Otherwise does nothing when active edges is equal to ZERO.
    COMMENT Equivalence Class 79,78
    COMMENT
    COMMENT [hdudispfpolygon1-VProcessPairsHR-DB-LLR-002]
    COMMENT The function "VProcessPairsHR", does nothing when U8_which_mag_line is not equal to ZERO.
    COMMENT Equivalence Class 108
    COMMENT 
    COMMENT [hdudispfpolygon1-VProcessPairsHR-DB-LLR-003]
    COMMENT The function sets mag line to U8_mag_line1 when U8_which_mag_line(maximum) is equal to ZERO.
    COMMENT Equivalence Class 107
    COMMENT
    COMMENT [hdudispfpolygon1-VProcessMagLine-DB-LLR-002]
    COMMENT The function sets mag line to U8_mag_line1 and U8_which_mag_line to ONE when U8_which_mag_line is equal to ZERO
    COMMENT Equivalence Class 107  
    COMMENT
    COMMENT [hdudispfpolygon1-VProcessMagLine-DB-LLR-004]
    COMMENT The function "VProcessMagLine" does the following
    COMMENT 1.Sets scan pointer to address of u8_mag_line with index S16_scan_xmin divided by FOUR.
    COMMENT 2.Sets frame pointer to Vp_fgfb2 plus S16_scan_xmin divided by FOUR plus (s16_scan_y divided by FOUR multiply with S16_panel_width)
    COMMENT 3.Sets width to (S16_scan_xmax divided by FOUR minus S16_scan_xmin divided by FOUR) plus ONE.
    COMMENT 4.Calls function Dma2dScanLineBlend with parameters scan pointer, frame pointer, width and color  to be displayed .
    COMMENT 5.Sets S16_scan_xmin to S16_panel_width multiply with FOUR.
    COMMENT 6.Sets S16_scan_xmax to ZERO.
    COMMENT Equivalence Class 109  
    COMMENT </TD> 
    
    ELEMENT
        
        COMMENT INPUT SECTION:
        
            STRUCTURE ps_poly,          init = { s16Pts => 3, psRP => &PTU_psRP, 
            &                                  psPP => &PTU_psPP, psNext => NIL },              ev= init

            VAR PTU_psRP[0].s32X,       init=0,                                                 ev= init

            VAR PTU_psRP[0].s32Y,       init=4,                                                 ev= init

            VAR PTU_psRP[1].s32X,       init=0,                                                 ev= init

            VAR PTU_psRP[1].s32Y,       init=7,                                                 ev= init

            VAR PTU_psRP[2].s32X,       init=0,                                                 ev= init

            VAR PTU_psRP[2].s32Y,       init=5,                                                 ev= init

            VAR PTU_psRP[3..9].s32X,    init=0,                                                ev= init

            VAR PTU_psRP[3..9].s32Y,    init=0,                                                ev= init

            VAR PTU_psPP[0..9].s32R,    init=30,                                                ev= init

            VAR PTU_psPP[0..9].s32A,    init=40,                                                ev= init

            VAR e_color,                init = DARK_BLUE,                                          ev= init

            VAR U8_mag_line1,           init = {others=>0xFF},                                  ev= init

            VAR U8_mag_line2,           init = {others=>6},                                     ev= init

            VAR Vp_fgfb2,               init = &PTU_Vp_fgfb2[0],                               ev= init
        
            ARRAY PTU_Vp_fgfb2,         init = {0=>10,1=>20,2=>30,3=>40,4=>0xFFFF,5=>60,6=>70,
            &                                   7=>80,8=>90,9=>100,10=>110,11=>120,12=>130,
            &                                   13=>140, 14=>150, 15=>160,16=>170,others=>180},  ev= init  

            VAR S16_panel_width,        init = 4,                                               ev= init

            VAR S16_panel_height,       init = 1,                                               ev= init


        COMMENT OUTPUT SECTION:

            VAR PTU_count,              init = 0,                                               ev= 2

            VAR PTU_scan_line,          init=0,                                                 ev= 0xFF

            VAR PTU_frame_data,         init=0,                                                 ev= 0xFFFF

            VAR PTU_pc_file_in_1,       init="AA",                                              ev=glob_file_name

            VAR PTU_pc_message_in_1,    init= "AAA",                                            ev="Polly exceeds display size."

        COMMENT INPUT/OUTPUT SECTION:

            VAR U8_which_mag_line,      init= 0,                                                ev= 1

            VAR S16_scan_xmin,          init =4,                                                ev= 16

            VAR S16_scan_xmax,          init= 5,                                                ev= 0
        
        --Stub Calls:
        SIMUL
        
             STUB RterrWidget(195)    
             STUB RterrWidget(195)  
             STUB Dma2dScanLineBlend(2,DARK_BLUE)
                    
        END SIMUL
        
    #PolygonDrawPoly(&ps_poly, e_color);
    END ELEMENT

END TEST -- TEST 24    
    
TEST 25
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT [hdudispfpolygon1-VProcessPairsHR-DB-LLR-001]
    COMMENT In first iteration,
    COMMENT The function "VProcessPairsHR", returns when active edges is not equal to ZERO.
    COMMENT In the next iterations,
    COMMENT The function "VProcessPairsHR", Otherwise does nothing when active edges is equal to ZERO.
    COMMENT Equivalence Class 79,78
    COMMENT
    COMMENT [hdudispfpolygon1-VProcessPairsHR-DB-LLR-002]
    COMMENT The function "VProcessPairsHR", does nothing when U8_which_mag_line is not equal to ZERO.
    COMMENT Equivalence Class 107    
    COMMENT 
    COMMENT [hdudispfpolygon1-VProcessPairsHR-DB-LLR-004]
    COMMENT The function sets mag line to U8_mag_line2 when U8_which_mag_line(minimum) is not equal to ZERO.
    COMMENT Equivalence Class 107    
    COMMENT
    COMMENT [hdudispfpolygon1-VProcessMagLine-DB-LLR-003]
    COMMENT The function sets mag line to U8_mag_line2(minimum) and U8_which_mag_line to ZERO When
    COMMENT U8_which_mag_line is equal to ZERO.
    COMMENT Equivalence Class 107     
    COMMENT 
    COMMENT [hdudispfpolygon1-VProcessMagLine-DB-LLR-004]
    COMMENT The function "VProcessMagLine" does the following
    COMMENT 1.Sets scan pointer to address of u8_mag_line with index S16_scan_xmin divided by FOUR.
    COMMENT 2.Sets frame pointer to Vp_fgfb2 plus S16_scan_xmin divided by FOUR plus (s16_scan_y divided by FOUR multiply with S16_panel_width)
    COMMENT 3.Sets width to (S16_scan_xmax divided by FOUR minus S16_scan_xmin divided by FOUR) plus ONE.
    COMMENT 4.Calls function Dma2dScanLineBlend with parameters scan pointer, frame pointer, width and color  to be displayed .
    COMMENT 5.Sets S16_scan_xmin to S16_panel_width multiply with FOUR.
    COMMENT 6.Sets S16_scan_xmax to ZERO.
    COMMENT Equivalence Class 109     
    COMMENT </TD> 
    
    ELEMENT
        
        COMMENT INPUT SECTION:

            STRUCTURE ps_poly,          init = { s16Pts => 3, psRP => &PTU_psRP, 
            &                                  psPP => &PTU_psPP, psNext => NIL },              ev= init

            VAR PTU_psRP[0].s32X,       init=0,                                                 ev= init

            VAR PTU_psRP[0].s32Y,       init=4,                                                 ev= init

            VAR PTU_psRP[1].s32X,       init=0,                                                 ev= init

            VAR PTU_psRP[1].s32Y,       init=7,                                                 ev= init

            VAR PTU_psRP[2].s32X,       init=0,                                                 ev= init

            VAR PTU_psRP[2].s32Y,       init=5,                                                 ev= init

            VAR PTU_psRP[3..9].s32X,    init=0,                                                ev= init

            VAR PTU_psRP[3..9].s32Y,    init=0,                                                ev= init

            VAR PTU_psPP[0..9].s32R,    init=30,                                                ev= init

            VAR PTU_psPP[0..9].s32A,    init=40,                                                ev= init

            VAR e_color,                init = DARK_BLUE,                                          ev= init

            VAR U8_mag_line1,           init = {others=>7},                                  ev= init

            VAR U8_mag_line2,           init = {others=>0},                                     ev= init

            VAR Vp_fgfb2,               init = &PTU_Vp_fgfb2[0],                               ev= init
        
            ARRAY PTU_Vp_fgfb2,         init = {0=>10,1=>20,2=>30,3=>40,4=>50,5=>60,6=>70,
            &                                   7=>80,8=>90,9=>100,10=>110,11=>120,12=>130,
            &                                   13=>140, 14=>150, 15=>160,16=>170,others=>180},  ev= init  

            VAR S16_panel_width,        init = 4,                                               ev= init

            VAR S16_panel_height,       init = 1,                                               ev= init

        COMMENT OUTPUT SECTION:

            VAR PTU_count,              init = 0,                                               ev= 2

            VAR PTU_scan_line,          init=1,                                                 ev= 0

            VAR PTU_frame_data,         init=0,                                                 ev= 50

            VAR PTU_pc_file_in_1,       init="AA",                                              ev=glob_file_name

            VAR PTU_pc_message_in_1,    init= "AAA",                                            ev="Polly exceeds display size."

        COMMENT INPUT/OUTPUT SECTION:

            VAR U8_which_mag_line,      init= 1,                                                ev= 0

            VAR S16_scan_xmin,          init =4,                                                ev= 16

            VAR S16_scan_xmax,          init= 5,                                                ev= 0
        
        --Stub Calls:
        SIMUL
        
             STUB RterrWidget(195)    
             STUB RterrWidget(195)   
             STUB Dma2dScanLineBlend(2,DARK_BLUE)
                    
        END SIMUL
        
    #PolygonDrawPoly(&ps_poly, e_color);
    END ELEMENT

END TEST -- TEST 25    
    
   
TEST 26
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT [hdudispfpolygon1-VProcessPairsHR-DB-LLR-001]
    COMMENT In first iteration,
    COMMENT The function "VProcessPairsHR", returns when active edges is not equal to ZERO.
    COMMENT In the next iterations,
    COMMENT The function "VProcessPairsHR", Otherwise does nothing when active edges is equal to ZERO.
    COMMENT Equivalence Class 79,78
    COMMENT 
    COMMENT [hdudispfpolygon1-VProcessPairsHR-DB-LLR-002]
    COMMENT The function "VProcessPairsHR", does nothing when U8_which_mag_line is not equal to ZERO.
    COMMENT Equivalence Class 107    
    COMMENT 
    COMMENT [hdudispfpolygon1-VProcessPairsHR-DB-LLR-004]
    COMMENT The function shall set mag line to U8_mag_line2 when U8_which_mag_line is not equal to ZERO.(i.e U8_mag_line2-nominal)
    COMMENT Equivalence Class  84
    COMMENT
    COMMENT [hdudispfpolygon1-VProcessMagLine-DB-LLR-003]
    COMMENT The function sets mag line to U8_mag_line2(minimum) and U8_which_mag_line to ZERO When
    COMMENT U8_which_mag_line is equal to ZERO.
    COMMENT Equivalence Class 107     
    COMMENT
    COMMENT [hdudispfpolygon1-VProcessMagLine-DB-LLR-004]
    COMMENT The function "VProcessMagLine" does the following
    COMMENT 1.Sets scan pointer to address of u8_mag_line with index S16_scan_xmin divided by FOUR.
    COMMENT 2.Sets frame pointer to Vp_fgfb2 plus S16_scan_xmin divided by FOUR plus (s16_scan_y divided by FOUR multiply with S16_panel_width)
    COMMENT 3.Sets width to (S16_scan_xmax divided by FOUR minus S16_scan_xmin divided by FOUR) plus ONE.
    COMMENT 4.Calls function Dma2dScanLineBlend with parameters scan pointer, frame pointer, width and color  to be displayed .
    COMMENT 5.Sets S16_scan_xmin to S16_panel_width multiply with FOUR.
    COMMENT 6.Sets S16_scan_xmax to ZERO.
    COMMENT Equivalence Class 109   
    COMMENT </TD> 
    
    ELEMENT

        COMMENT INPUT SECTION:
        
            STRUCTURE ps_poly,          init = { s16Pts => 3, psRP => &PTU_psRP, 
            &                                  psPP => &PTU_psPP, psNext => NIL },              ev= init

            VAR PTU_psRP[0].s32X,       init=0,                                                 ev= init

            VAR PTU_psRP[0].s32Y,       init=4,                                                 ev= init

            VAR PTU_psRP[1].s32X,       init=0,                                                 ev= init

            VAR PTU_psRP[1].s32Y,       init=7,                                                 ev= init

            VAR PTU_psRP[2].s32X,       init=0,                                                 ev= init

            VAR PTU_psRP[2].s32Y,       init=5,                                                 ev= init

            VAR PTU_psRP[3..9].s32X,    init=0,                                                ev= init

            VAR PTU_psRP[3..9].s32Y,    init=0,                                                ev= init

            VAR PTU_psPP[0..9].s32R,    init=30,                                                ev= init

            VAR PTU_psPP[0..9].s32A,    init=40,                                                ev= init

            VAR e_color,                init = DARK_BLUE,                                          ev= init

            VAR U8_mag_line1,           init = {others=>7},                                  ev= init

            VAR U8_mag_line2,           init = {others=>20},                                     ev= init

            VAR Vp_fgfb2,               init = &PTU_Vp_fgfb2[0],                               ev= init
        
            ARRAY PTU_Vp_fgfb2,         init = {0=>10,1=>20,2=>30,3=>40,4=>50,5=>60,6=>70,
            &                                   7=>80,8=>90,9=>100,10=>110,11=>120,12=>130,
            &                                   13=>140, 14=>150, 15=>160,16=>170,others=>180},  ev= init  

            VAR S16_panel_width,        init = 4,                                               ev= init

            VAR S16_panel_height,       init = 1,                                               ev= init


        COMMENT OUTPUT SECTION:

            VAR PTU_count,              init = 0,                                               ev= 2

            VAR PTU_scan_line,          init=1,                                                 ev= 20

            VAR PTU_frame_data,         init=0,                                                 ev= 50

            VAR PTU_pc_file_in_1,       init="AA",                                              ev=glob_file_name

            VAR PTU_pc_message_in_1,    init= "AAA",                                            ev="Polly exceeds display size."

        COMMENT INPUT/OUTPUT SECTION:

            VAR U8_which_mag_line,      init= 1,                                                ev= 0

            VAR S16_scan_xmin,          init =4,                                                ev= 16

            VAR S16_scan_xmax,          init= 5,                                                ev= 0
        
        --Stub Calls:
        SIMUL
        
             STUB RterrWidget(195)    
             STUB RterrWidget(195)  
             STUB Dma2dScanLineBlend(2,DARK_BLUE)
                    
        END SIMUL
        
    #PolygonDrawPoly(&ps_poly, e_color);
    END ELEMENT

END TEST -- TEST 26    

TEST 27
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT [hdudispfpolygon1-VProcessPairsHR-DB-LLR-001]
    COMMENT In first iteration,
    COMMENT The function "VProcessPairsHR", returns when active edges is not equal to ZERO.
    COMMENT In the next iterations,
    COMMENT The function "VProcessPairsHR", does nothing when active edges is equal to ZERO.
    COMMENT Equivalence Class 79,78
    COMMENT 
    COMMENT [hdudispfpolygon1-VProcessPairsHR-DB-LLR-002]
    COMMENT The function "VProcessPairsHR", does nothing when U8_which_mag_line is not equal to ZERO.
    COMMENT Equivalence Class 107    
    COMMENT 
    COMMENT [hdudispfpolygon1-VProcessPairsHR-DB-LLR-004]
    COMMENT The function "VProcessMagLine" sets mag line to U8_mag_line2 when U8_which_mag_line is not equal to ZERO.(i.e U8_mag_line2-maximum)
    COMMENT Equivalence Class 84
    COMMENT
    COMMENT [hdudispfpolygon1-VProcessMagLine-DB-LLR-003]
    COMMENT The function "VProcessMagLine" set mag line to U8_mag_line2 and U8_which_mag_line to ZERO When
    COMMENT U8_which_mag_line is not equal to ZERO.(i.e U8_mag_line2-maximum)
    COMMENT Equivalence Class 108
    COMMENT    
    COMMENT [hdudispfpolygon1-VProcessMagLine-DB-LLR-004]
    COMMENT The function "VProcessMagLine" does the following
    COMMENT 1.Sets scan pointer to address of u8_mag_line with index S16_scan_xmin divided by FOUR.
    COMMENT 2.Sets frame pointer to Vp_fgfb2 plus S16_scan_xmin divided by FOUR plus (s16_scan_y divided by FOUR multiply with S16_panel_width)
    COMMENT 3.Sets width to (S16_scan_xmax divided by FOUR minus S16_scan_xmin divided by FOUR) plus ONE.
    COMMENT 4.Calls function Dma2dScanLineBlend with parameters scan pointer, frame pointer, width and color  to be displayed .
    COMMENT 5.Sets S16_scan_xmin to S16_panel_width multiply with FOUR.
    COMMENT 6.Sets S16_scan_xmax to ZERO.
    COMMENT Equivalence Class 109 
    COMMENT </TD> 
    
    ELEMENT
        
        COMMENT INPUT SECTION:
        
            STRUCTURE ps_poly,          init = { s16Pts => 3, psRP => &PTU_psRP, 
            &                                  psPP => &PTU_psPP, psNext => NIL },              ev= init

            VAR PTU_psRP[0].s32X,       init=0,                                                 ev= init

            VAR PTU_psRP[0].s32Y,       init=4,                                                 ev= init

            VAR PTU_psRP[1].s32X,       init=0,                                                 ev= init

            VAR PTU_psRP[1].s32Y,       init=7,                                                 ev= init

            VAR PTU_psRP[2].s32X,       init=0,                                                 ev= init

            VAR PTU_psRP[2].s32Y,       init=5,                                                 ev= init

            VAR PTU_psRP[3..9].s32X,    init=0,                                                 ev= init

            VAR PTU_psRP[3..9].s32Y,    init=0,                                                 ev= init

            VAR PTU_psPP[0..9].s32R,    init=30,                                                ev= init

            VAR PTU_psPP[0..9].s32A,    init=40,                                                ev= init

            VAR e_color,                init = DARK_BLUE,                                          ev= init

            VAR U8_mag_line1,           init = {others=>7},                                     ev= init

            VAR U8_mag_line2,           init = {others=>0xFF},                                  ev= init

            VAR Vp_fgfb2,               init = &PTU_Vp_fgfb2[0],                               ev= init
        
            ARRAY PTU_Vp_fgfb2,         init = {0=>10,1=>20,2=>30,3=>40,4=>50,5=>60,6=>70,
            &                                   7=>80,8=>90,9=>100,10=>110,11=>120,12=>130,
            &                                   13=>140, 14=>150, 15=>160,16=>170,others=>180},  ev= init  

            VAR S16_panel_width,        init = 4,                                               ev= init

            VAR S16_panel_height,       init = 1,                                               ev= init


        COMMENT OUTPUT SECTION:

            VAR PTU_count,              init = 0,                                               ev= 2

            VAR PTU_scan_line,          init=1,                                                 ev= 0xFF

            VAR PTU_frame_data,         init=0,                                                 ev= 50

            VAR PTU_pc_file_in_1,       init="AA",                                              ev=glob_file_name

            VAR PTU_pc_message_in_1,    init= "AAA",                                            ev="Polly exceeds display size."
        
        COMMENT INPUT/OUTPUT SECTION:

            VAR U8_which_mag_line,      init= 1,                                                ev= 0

            VAR S16_scan_xmin,          init =4,                                                ev= 16

            VAR S16_scan_xmax,          init= 5,                                                ev= 0
        
        --Stub Calls:
        SIMUL
        
             STUB RterrWidget(195)    
             STUB RterrWidget(195)  
             STUB Dma2dScanLineBlend(2,DARK_BLUE)
                    
        END SIMUL
        
    #PolygonDrawPoly(&ps_poly, e_color);
    END ELEMENT

END TEST -- TEST 27   
          
TEST 28
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT [hdudispfpolygon1-VProcessPairsHR-DB-LLR-005]
    COMMENT In first iteration, ps this is equal to ZERO and in next iterations,
    COMMENT The function "VProcessPairsHR", initialize ps this to psNextE of active edge list and 
    COMMENT loop till ps this not equal to ZERO and does following
    COMMENT 1.Set S16_scan_xmin to result of macro MIN with parameter s32_x1 of ps this and S16_scan_xmin.
    COMMENT 2.Set S16_scan_xmax to result of macro MAX with parameter s32_x1 of psNextE of ps this and S16_scan_xmax.
    COMMENT 3.Set start of scan X0 to s32_x1 of ps this.
    COMMENT 4.Set end of scan X1 to s32_x1 of psNextE of ps this.
    COMMENT Equivalence Class 104,78
    COMMENT </TD> 

    ELEMENT

        COMMENT INPUT SECTION:
                
            STRUCTURE ps_poly,          init = { s16Pts => 3, psRP => &PTU_psRP, 
            &                                  psPP => &PTU_psPP, psNext => NIL },              ev= init

            VAR PTU_psRP[0].s32X,       init=0,                                                 ev= init

            VAR PTU_psRP[0].s32Y,       init=4,                                                 ev= init

            VAR PTU_psRP[1].s32X,       init=0,                                                 ev= init

            VAR PTU_psRP[1].s32Y,       init=7,                                                 ev= init

            VAR PTU_psRP[2].s32X,       init=0,                                                 ev= init

            VAR PTU_psRP[2].s32Y,       init=5,                                                 ev= init

            VAR PTU_psRP[3..9].s32X,    init=0,                                                 ev= init

            VAR PTU_psRP[3..9].s32Y,    init=0,                                                 ev= init

            VAR PTU_psPP[0..9].s32R,    init=30,                                                ev= init

            VAR PTU_psPP[0..9].s32A,    init=40,                                                ev= init

            VAR e_color,                init = DARK_BLUE,                                          ev= init

            VAR U8_mag_line1,           init = {others=>7},                                     ev= init

            VAR U8_mag_line2,           init = {others=>0xFF},                                  ev= init

            VAR Vp_fgfb2,               init = &PTU_Vp_fgfb2[0],                               ev= init
        
            ARRAY PTU_Vp_fgfb2,         init = {0=>10,1=>20,2=>30,3=>40,4=>50,5=>60,6=>70,
            &                                   7=>80,8=>90,9=>100,10=>110,11=>120,12=>130,
            &                                   13=>140, 14=>150, 15=>160,16=>170,others=>180},  ev= init  

            VAR S16_panel_width,        init = 4,                                               ev= init

            VAR S16_panel_height,       init = 1,                                               ev= init


        COMMENT OUTPUT SECTION:

            VAR PTU_count,              init = 0,                                               ev= 2

            VAR PTU_scan_line,          init=1,                                                 ev= 0xFF

            VAR PTU_frame_data,         init=0,                                                 ev= 50

            VAR PTU_pc_file_in_1,       init="AA",                                              ev=glob_file_name

            VAR PTU_pc_message_in_1,    init= "AAA",                                            ev="Polly exceeds display size."

        COMMENT INPUT/OUTPUT SECTION:

            VAR U8_which_mag_line,      init= 1,                                                ev= 0

            VAR S16_scan_xmin,          init =4,                                                ev= 16

            VAR S16_scan_xmax,          init= 5,                                                ev= 0

        --Stub Calls:
        SIMUL

             STUB RterrWidget(195)    
             STUB RterrWidget(195)  
             STUB Dma2dScanLineBlend(2,DARK_BLUE)
                            
        END SIMUL

    #PolygonDrawPoly(&ps_poly, e_color);
    END ELEMENT

END TEST -- TEST 28
    
-- TEST 29
-- FAMILY robustness 
--  COMMENT Test Description
--  COMMENT <TD> 
--  COMMENT [hdudispfpolygon1-VProcessMagLine-DB-LLR-004]
--  COMMENT In function 'VProcessMagLine', for the variable "u8_mag_line" index value is beyond the array size
--  COMMENT when range of S16_scan_xmin is checked for maximum value 
--  COMMENT Equivalence Class 151,106
--  COMMENT </TD>
--  
--  ELEMENT
--
--      COMMENT INPUT SECTION:
--
--          STRUCTURE ps_poly,          init = { s16Pts => 3, psRP => &PTU_psRP, 
--          &                                  psPP => &PTU_psPP, psNext => NIL },              ev= init
--
--          VAR PTU_psRP[0].s32X,       init=1 ,                                                ev= init
--
--          VAR PTU_psRP[0].s32Y,       init=4,                                                 ev= init
--
--          VAR PTU_psRP[1].s32X,       init=2,                                                 ev= init
--
--          VAR PTU_psRP[1].s32Y,       init=7,                                                 ev= init
--
--          VAR PTU_psRP[2].s32X,       init=0,                                                 ev= init
--
--          VAR PTU_psRP[2].s32Y,       init=5,                                                 ev= init
--
--          VAR PTU_psRP[3..9].s32X,    init=0,                                                 ev= init
--
--          VAR PTU_psRP[3..9].s32Y,    init=0,                                                 ev= init
--
--          VAR PTU_psPP[0..9].s32R,    init=30,                                                ev= init
--
--          VAR PTU_psPP[0..9].s32A,    init=40,                                                ev= init
--
--          VAR e_color,                init = DARK_BLUE,                                          ev= init
--
--          VAR U8_mag_line1,           init = {others=>7},                                     ev= init
--
--          VAR U8_mag_line2,           init = {others=>0xFF},                                  ev= init
--
--            VAR Vp_fgfb2,               init = &PTU_Vp_fgfb2[0],                               ev= init
--        
--            ARRAY PTU_Vp_fgfb2,         init = {0=>10,1=>20,2=>30,3=>40,4=>50,5=>60,6=>70,
--            &                                   7=>80,8=>90,9=>100,10=>110,11=>120,12=>130,
--            &                                   13=>140, 14=>150, 15=>160,16=>170,others=>180},  ev= init  
--
--          VAR S16_panel_width,        init = 10,                                               ev= init
--
--          VAR S16_panel_height,       init = 1,                                               ev= init
--
--      COMMENT OUTPUT SECTION:
--
--          VAR PTU_count,              init = 0,                                               ev= 2
--
--          VAR PTU_scan_line,          init=1,                                                 ev= 0xFF
--
--          VAR PTU_frame_data,         init=0,                                                 ev= 50
--
--          VAR PTU_pc_file_in_1,       init="AA",                                              ev=glob_file_name
--
--          VAR PTU_pc_message_in_1,    init= "AAA",                                            ev="Polly exceeds display size."
--
--      COMMENT INPUT/OUTPUT SECTION:
--
--          VAR U8_which_mag_line,      init= 1,                                                ev= 0
--
--          VAR S16_scan_xmin,          init =0xFFFFFFF,                                        ev= 40
--
--          VAR S16_scan_xmax,          init= 5,                                                ev= 0
--
--      --Stub Calls:
--      SIMUL
--
--           STUB RterrWidget(192)    
--           STUB RterrWidget(192)  
--           STUB Dma2dScanLineBlend(2,DARK_BLUE)
--
--      END SIMUL
--
--  #PolygonDrawPoly(&ps_poly, e_color);
--  END ELEMENT
--
--END TEST -- TEST 29

TEST 30
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT [hdudispfpolygon1-VProcessPairsHR-DB-LLR-001]
    COMMENT In first iteration,
    COMMENT The function "VProcessPairsHR", returns when active edges is not equal to ZERO.
    COMMENT In the next iterations,
    COMMENT The function "VProcessPairsHR", does nothing when active edges is equal to ZERO.
    COMMENT Equivalence Class 79,78
    COMMENT 
    COMMENT [hdudispfpolygon1-VProcessPairsHR-DB-LLR-002]
    COMMENT The function "VProcessPairsHR", does nothing when U8_which_mag_line is not equal to ZERO.
    COMMENT Equivalence Class 107   
    COMMENT 
    COMMENT [hdudispfpolygon1-VProcessPairsHR-DB-LLR-004]
    COMMENT The function "VProcessMagLine" sets mag line to U8_mag_line2 when U8_which_mag_line is not equal to ZERO.(i.e U8_mag_line2-maximum)
    COMMENT Equivalence Class 84
    COMMENT
    COMMENT [hdudispfpolygon1-VProcessMagLine-DB-LLR-003]
    COMMENT The function "VProcessMagLine" set mag line to U8_mag_line2 and U8_which_mag_line to ZERO When
    COMMENT U8_which_mag_line is not equal to ZERO.
    COMMENT Equivalence Class 108
    COMMENT    
    COMMENT [hdudispfpolygon1-VProcessMagLine-DB-LLR-004]
    COMMENT The function "VProcessMagLine" does the following
    COMMENT 1.Sets scan pointer to address of u8_mag_line with index S16_scan_xmin divided by FOUR.
    COMMENT 2.Sets frame pointer to Vp_fgfb2 plus S16_scan_xmin divided by FOUR plus (s16_scan_y divided by FOUR multiply with S16_panel_width)
    COMMENT 3.Sets width to (S16_scan_xmax divided by FOUR minus S16_scan_xmin divided by FOUR) plus ONE.
    COMMENT 4.Calls function Dma2dScanLineBlend with parameters scan pointer, frame pointer, width and color  to be displayed .
    COMMENT 5.Sets S16_scan_xmin to S16_panel_width multiply with FOUR.
    COMMENT 6.Sets S16_scan_xmax to ZERO.
    COMMENT Equivalence Class 109 
    COMMENT </TD> 
    
    ELEMENT
        
        COMMENT INPUT SECTION:
        
            STRUCTURE ps_poly,          init = { s16Pts => 3, psRP => &PTU_psRP, 
            &                                  psPP => &PTU_psPP, psNext => NIL },              ev= init

            VAR PTU_psRP[0].s32X,       init=0,                                                 ev= init

            VAR PTU_psRP[0].s32Y,       init=4,                                                 ev= init

            VAR PTU_psRP[1].s32X,       init=0,                                                 ev= init

            VAR PTU_psRP[1].s32Y,       init=7,                                                 ev= init

            VAR PTU_psRP[2].s32X,       init=0,                                                 ev= init

            VAR PTU_psRP[2].s32Y,       init=5,                                                 ev= init

            VAR PTU_psRP[3..9].s32X,    init=0,                                                 ev= init

            VAR PTU_psRP[3..9].s32Y,    init=0,                                                 ev= init

            VAR PTU_psPP[0..9].s32R,    init=30,                                                ev= init

            VAR PTU_psPP[0..9].s32A,    init=40,                                                ev= init

            VAR e_color,                init = DARK_BLUE,                                          ev= init

            VAR U8_mag_line1,           init = {others=>7},                                     ev= init

            VAR U8_mag_line2,           init = {others=>0xFF},                                  ev= init

            VAR Vp_fgfb2,               init = &PTU_Vp_fgfb2[0],                               ev= init
        
            ARRAY PTU_Vp_fgfb2,         init = {0=>10,1=>20,2=>30,3=>40,4=>50,5=>60,6=>70,
            &                                   7=>80,8=>90,9=>100,10=>110,11=>120,12=>130,
            &                                   13=>140, 14=>150, 15=>160,16=>170,others=>180},  ev= init  

            VAR S16_panel_width,        init = 4,                                               ev= init

            VAR S16_panel_height,       init = 1,                                               ev= init


        COMMENT OUTPUT SECTION:

            VAR PTU_count,              init = 0,                                               ev= 2

            VAR PTU_scan_line,          init=1,                                                 ev= 0xFF

            VAR PTU_frame_data,         init=0,                                                 ev= 50

            VAR PTU_pc_file_in_1,       init="AA",                                              ev=glob_file_name

            VAR PTU_pc_message_in_1,    init= "AAA",                                            ev="Polly exceeds display size."
        
        COMMENT INPUT/OUTPUT SECTION:

            VAR U8_which_mag_line,      init= 1,                                                ev= 0

            VAR S16_scan_xmin,          init =4,                                                ev= 16

            VAR S16_scan_xmax,          init= 5,                                                ev= 0
        
        --Stub Calls:
        SIMUL
        
             STUB RterrWidget(195)    
             STUB RterrWidget(195)  
             STUB Dma2dScanLineBlend(2,DARK_BLUE)
                    
        END SIMUL
        
    #PolygonDrawPoly(&ps_poly, e_color);
    END ELEMENT

END TEST -- TEST 30 

 
--    TEST 31
--    FAMILY robustness
--
--    COMMENT Test Description
--    COMMENT <TD> 
--    COMMENT [hdudispfpolygon1-VScanLines-DB-LLR-002]
--    COMMENT  The function "VScanLines",loops till active edges is not equal to ZERO and does following 
--    COMMENT     - Calls the function "VAddEdges" with parameter Y Scan line to fill alternate pairs of lines.
--    COMMENT Equivalence Class 49,52
--    COMMENT 
--    COMMENT [hdudispfpolygon1-VAddEdges-DB-LLR-002]
--    COMMENT The function loops till psNextV of ps_vert is not equal to ZERO and does following when
--    COMMENT s32Y of sNextP of ps_vert is greater than s32Y of sVertP of ps_vert
--    COMMENT 1.Set ps_edge to return value of function PsAllocEdge
--    COMMENT Equivalence Class 72
--    COMMENT
--    COMMENT [hdudispfpolygon1-PsAllocEdge-DB-LLR-001]
--    COMMENT The function RterrWidget with parameters __FILE__, __LINE__ and string "Unable to allocate 
--    COMMENT poly edge." if next vertical equal to MAX_VERTICES.
--    COMMENT Equivalence Class 110,111
--    COMMENT
--    COMMENT [hdudispfpolygon1-PsAllocEdge-DB-LLR-002]
--    COMMENT In function 'PsAllocEdge', since "S_edge_pool" variable's index gets updated from "S16_next_edge"
--    COMMENT whenever the node is incremented, array size exceeds beyond the limit.
--    COMMENT Equivalence Class 152
--    COMMENT
--    COMMENT </TD> 
--        
--        ELEMENT
--            
--        COMMENT INPUT SECTION:
--        
--        STRUCTURE ps_poly,              init = { s16Pts => 3, psRP => &PTU_psRP, 
--        &                                  psPP => &PTU_psPP, psNext => &PTU_psNext_1 },       ev= init
--
--        STRUCTURE PTU_psNext_1,         init = { s16Pts => 5, psRP => &PTU_psRP_1, 
--        &                                  psPP => &PTU_psPP_1, psNext => &PTU_psNext_2 },      ev= init
--        
--        STRUCTURE PTU_psNext_2,         init = { s16Pts => 5, psRP => &PTU_psRP_2, 
--        &                                  psPP => &PTU_psPP_2, psNext => &PTU_psNext_3 },      ev= init
--
--        STRUCTURE PTU_psNext_3,         init = { s16Pts => 5, psRP => &PTU_psRP_3, 
--        &                                  psPP => &PTU_psPP_3, psNext => &PTU_psNext_4 },      ev= init
--        
--      STRUCTURE PTU_psNext_4,         init = { s16Pts => 5, psRP => &PTU_psRP_4, 
--        &                                  psPP => &PTU_psPP_4, psNext => &PTU_psNext_5 },      ev= init
--
--      STRUCTURE PTU_psNext_5,         init = { s16Pts => 5, psRP => &PTU_psRP_5, 
--        &                                  psPP => &PTU_psPP_5 , psNext => &PTU_psNext_6 },      ev= init
--        
--      STRUCTURE PTU_psNext_6,         init = { s16Pts => 5, psRP => &PTU_psRP_6, 
--        &                                  psPP => &PTU_psPP_6 , psNext => &PTU_psNext_7 },      ev= init
--        
--      STRUCTURE PTU_psNext_7,         init = { s16Pts => 5, psRP => &PTU_psRP_7, 
--        &                                  psPP => &PTU_psPP_7 , psNext => &PTU_psNext_8 },      ev= init
--        
--      STRUCTURE PTU_psNext_8,         init = { s16Pts => 5, psRP => &PTU_psRP_8, 
--        &                                  psPP => &PTU_psPP_8 , psNext => NIL },      ev= init
--        
--        VAR PTU_psRP[0..9].s32X,        init=8,                                                ev= init
--
--        VAR PTU_psRP[0].s32Y,           init=6,                                                ev= init
--        
--        VAR PTU_psRP[1].s32Y,           init=7,                                                ev= init
--        
--        VAR PTU_psRP[2].s32Y,           init=7,                                                ev= init
--        
--        VAR PTU_psRP[3..9].s32Y,        init=9,                                                ev= init
--
--        VAR PTU_psPP[0..9].s32R,        init=10,                                               ev= init
--
--        VAR PTU_psPP[0..9].s32A,        init=11,                                               ev= init
--
--        VAR PTU_psRP_1[0..9].s32X,      init=12,                                               ev= init
--
--        VAR PTU_psRP_1[0].s32Y,         init=14,                                               ev= init
--
--        VAR PTU_psRP_1[1..9].s32Y,      init=15,                                               ev= init
--        
--        VAR PTU_psRP_2[0..9].s32X,      init=17,                                               ev= init
--        
--        VAR PTU_psRP_2[0].s32Y,         init=7,                                               ev= init
--
--        VAR PTU_psRP_2[1..9].s32Y,      init=6,                                               ev= init
--
--        VAR PTU_psPP_1[0..9].s32R,      init=15,                                               ev= init
--
--        VAR PTU_psPP_1[0..9].s32A,      init=16,                                               ev= init
--
--        VAR PTU_psPP_2[0..9].s32R,      init=21,                                               ev= init
--
--        VAR PTU_psPP_2[0..9].s32A,      init=20,                                               ev= init
--        
--        VAR PTU_psRP_3[0..9].s32X,      init=17,                                               ev= init
--       
--        VAR PTU_psRP_3[0].s32Y,         init=7,                                               ev= init
--
--        VAR PTU_psRP_3[1..9].s32Y,      init=6,                                               ev= init        
--
--        VAR PTU_psPP_3[0..9].s32R,      init=21,                                               ev= init
--
--        VAR PTU_psPP_3[0..9].s32A,      init=7,                                               ev= init
--                         
--      VAR PTU_psRP_4[0].s32Y,         init=7,                                               ev= init
--
--      VAR PTU_psRP_4[1..9].s32Y,      init=6,                                               ev= init        
--
--      VAR PTU_psRP_5[0].s32Y,         init=7,                                               ev= init
--
--      VAR PTU_psRP_5[1..9].s32Y,      init=6,                                               ev= init    
--
--      VAR PTU_psRP_6[0].s32Y,         init=7,                                               ev= init
--
--      VAR PTU_psRP_6[1..9].s32Y,      init=6,                                               ev= init 
--
--      VAR PTU_psRP_7[0].s32Y,         init=7,                                               ev= init
--
--      VAR PTU_psRP_7[1..9].s32Y,      init=6,                                               ev= init 
--      
--      VAR PTU_psRP_8[0].s32Y,         init=7,                                               ev= init
--
--      VAR PTU_psRP_8[1..9].s32Y,      init=6,                                               ev= init      
--      
--        VAR e_color,                    init = BLACK,                                          ev= init
--        
--        VAR U8_mag_line1,               init = {others=>5},                                    ev= init
--
--        VAR U8_mag_line2,               init = {others=>6},                                    ev= init
--
--            VAR Vp_fgfb2,               init = &PTU_Vp_fgfb2[0],                               ev= init
--        
--            ARRAY PTU_Vp_fgfb2,         init = {0=>10,1=>20,2=>30,3=>40,4=>50,5=>60,6=>70,
--            &                                   7=>80,8=>90,9=>100,10=>110,11=>120,12=>130,
--            &                                   13=>140, 14=>150, 15=>160,16=>170,others=>180},  ev= init  
--
--        VAR S16_panel_width,            init = 4,                                              ev= init
--
--        VAR S16_panel_height,           init = 1,                                              ev= init
--        
--        COMMENT OUTPUT SECTION:
--        
--        VAR PTU_count,                  init = 0,                                              ev= 3
--
--        VAR PTU_scan_line,              init=0,                                                ev= 5
--
--        VAR PTU_frame_data,             init=0,                                                ev= 50
--
--        VAR PTU_pc_file_in_1,           init="AA",                                             ev=glob_file_name
--
--        VAR PTU_pc_message_in_1,        init= "AAA",                                           ev="Polly exceeds display size."
--
--        VAR PTU_pc_file_in_2,           init="AA",                                             ev=glob_file_name
--
--        VAR PTU_pc_message_in_2,        init= "AAA",                                           ev="Polly exceeds display size."
--        
--        COMMENT INPUT/OUTPUT SECTION:
--
--        VAR U8_which_mag_line,          init= 0,                                               ev= 1
--
--        VAR S16_scan_xmin,              init =4,                                               ev= 16
--
--        VAR S16_scan_xmax,              init= 5,                                               ev= 0
--        
--        --Stub Calls:
--        SIMUL
--        
--             STUB RterrWidget(192) 
--             STUB RterrWidget(192)   
--             STUB RterrWidget(192)    
--             STUB Dma2dScanLineBlend(2,BLACK)
--                    
--        END SIMUL
--        #PolygonDrawPoly(&ps_poly, e_color);
--        END ELEMENT
--        
--  
--    END TEST -- TEST 31

--	  TEST 34
--    FAMILY robustness
--
--    COMMENT Test Description
--    COMMENT <TD>
--    COMMENT [hdudispfpolygon1-PsAllocVert-DB-LLR-002]
--    COMMENT In function 'PsAllocVert', since "S_vert_pool" variable's index gets updated from "S16_next_vert"
--    COMMENT whenever the node is incremented, array size exceeds beyond the limit.
--    COMMENT Equivalence Class 154
--    COMMENT
--    COMMENT </TD> 
--        
--        ELEMENT
--            
--        COMMENT INPUT SECTION:
--        
--        STRUCTURE ps_poly,              init = { s16Pts => 3, psRP => &PTU_psRP, 
--        &                                  psPP => &PTU_psPP, psNext => &PTU_psNext_1 },       ev= init
--
--        STRUCTURE PTU_psNext_1,         init = { s16Pts => 5, psRP => &PTU_psRP_1, 
--        &                                  psPP => &PTU_psPP_1, psNext => &PTU_psNext_2 },      ev= init
--        
--        STRUCTURE PTU_psNext_2,         init = { s16Pts => 5, psRP => &PTU_psRP_2, 
--        &                                  psPP => &PTU_psPP_2, psNext => &PTU_psNext_3 },      ev= init
--
--        STRUCTURE PTU_psNext_3,         init = { s16Pts => 5, psRP => &PTU_psRP_3, 
--        &                                  psPP => &PTU_psPP_3, psNext => &PTU_psNext_4 },      ev= init
--        
--      STRUCTURE PTU_psNext_4,         init = { s16Pts => 5, psRP => &PTU_psRP_4, 
--        &                                  psPP => &PTU_psPP_4, psNext => &PTU_psNext_5 },      ev= init
--
--      STRUCTURE PTU_psNext_5,         init = { s16Pts => 5, psRP => &PTU_psRP_5, 
--        &                                  psPP => &PTU_psPP_5 , psNext => &PTU_psNext_6 },      ev= init
--        
--      STRUCTURE PTU_psNext_6,         init = { s16Pts => 5, psRP => &PTU_psRP_6, 
--        &                                  psPP => &PTU_psPP_6 , psNext => &PTU_psNext_7 },      ev= init
--        
--      STRUCTURE PTU_psNext_7,         init = { s16Pts => 5, psRP => &PTU_psRP_7, 
--        &                                  psPP => &PTU_psPP_7 , psNext => &PTU_psNext_8 },      ev= init
--        
--      STRUCTURE PTU_psNext_8,         init = { s16Pts => 5, psRP => &PTU_psRP_8, 
--        &                                  psPP => &PTU_psPP_8 , psNext => &PTU_psNext_9 },     			 ev= init
--        
--	  STRUCTURE PTU_psNext_9,         init = { s16Pts => 5, psRP => &PTU_psRP_9, 
--		&                                  psPP => &PTU_psPP_9, psNext => &PTU_psNext_10 },        ev= init
--
--	  STRUCTURE PTU_psNext_10,         init = { s16Pts => 5, psRP => &PTU_psRP_10, 
--		&                                  psPP => &PTU_psPP_10, psNext => &PTU_psNext_11 },       ev= init
--
--	  STRUCTURE PTU_psNext_11,         init = { s16Pts => 5, psRP => &PTU_psRP_11, 
--		&                                  psPP => &PTU_psPP_11, psNext => &PTU_psNext_12 },       ev= init
--
--	  STRUCTURE PTU_psNext_12,         init = { s16Pts => 5, psRP => &PTU_psRP_12, 
--		&                                  psPP => &PTU_psPP_12, psNext => &PTU_psNext_13 },       ev= init
--
--	  STRUCTURE PTU_psNext_13,         init = { s16Pts => 5, psRP => &PTU_psRP_13, 
--		&                                  psPP => &PTU_psPP_13 , psNext => &PTU_psNext_14 },      ev= init
--
--	  STRUCTURE PTU_psNext_14,         init = { s16Pts => 5, psRP => &PTU_psRP_14, 
--		&                                  psPP => &PTU_psPP_14 , psNext => &PTU_psNext_15 },      ev= init
--
--	  STRUCTURE PTU_psNext_15,         init = { s16Pts => 5, psRP => &PTU_psRP_15, 
--		&                                  psPP => &PTU_psPP_15 , psNext => &PTU_psNext_16 },      ev= init
--
--	  STRUCTURE PTU_psNext_16,         init = { s16Pts => 5, psRP => &PTU_psRP_16, 
--		&                                  psPP => &PTU_psPP_16 , psNext => &PTU_psNext_17 },      		   ev= init
--
--	  STRUCTURE PTU_psNext_17,         init = { s16Pts => 5, psRP => &PTU_psRP_17, 
--		&                                  psPP => &PTU_psPP_17, psNext => &PTU_psNext_18 },       ev= init
--
--	  STRUCTURE PTU_psNext_18,         init = { s16Pts => 5, psRP => &PTU_psRP_18, 
--		&                                  psPP => &PTU_psPP_18, psNext => &PTU_psNext_19 },       ev= init
--
--	  STRUCTURE PTU_psNext_19,         init = { s16Pts => 5, psRP => &PTU_psRP_19, 
--		&                                  psPP => &PTU_psPP_19, psNext => &PTU_psNext_20 },       ev= init
--
--	  STRUCTURE PTU_psNext_20,         init = { s16Pts => 5, psRP => &PTU_psRP_20, 
--		&                                  psPP => &PTU_psPP_20, psNext => &PTU_psNext_21 },       ev= init
--
--	  STRUCTURE PTU_psNext_21,         init = { s16Pts => 5, psRP => &PTU_psRP_21, 
--		&                                  psPP => &PTU_psPP_21 , psNext => &PTU_psNext_22 },      ev= init
--
--	  STRUCTURE PTU_psNext_22,         init = { s16Pts => 5, psRP => &PTU_psRP_22, 
--		&                                  psPP => &PTU_psPP_22 , psNext => &PTU_psNext_23 },      ev= init
--
--	  STRUCTURE PTU_psNext_23,         init = { s16Pts => 5, psRP => &PTU_psRP_23, 
--		&                                  psPP => &PTU_psPP_23 , psNext => &PTU_psNext_24 },      ev= init
--
--	  STRUCTURE PTU_psNext_24,         init = { s16Pts => 5, psRP => &PTU_psRP_24, 
--		&                                  psPP => &PTU_psPP_24 , psNext => &PTU_psNext_25 },      		   ev= init
--		
--	  STRUCTURE PTU_psNext_25,         init = { s16Pts => 5, psRP => &PTU_psRP_25, 
--		&                                  psPP => &PTU_psPP_25, psNext => &PTU_psNext_26 },        ev= init
--
--	  STRUCTURE PTU_psNext_26,         init = { s16Pts => 5, psRP => &PTU_psRP_26, 
--		&                                  psPP => &PTU_psPP_26, psNext => &PTU_psNext_27 },       ev= init
--
--	  STRUCTURE PTU_psNext_27,         init = { s16Pts => 5, psRP => &PTU_psRP_27, 
--		&                                  psPP => &PTU_psPP_27, psNext => &PTU_psNext_28},       ev= init
--
--	  STRUCTURE PTU_psNext_28,         init = { s16Pts => 5, psRP => &PTU_psRP_28, 
--		&                                  psPP => &PTU_psPP_28, psNext => &PTU_psNext_29 },       ev= init
--
--	  STRUCTURE PTU_psNext_29,         init = { s16Pts => 5, psRP => &PTU_psRP_29, 
--		&                                  psPP => &PTU_psPP_29 , psNext => &PTU_psNext_30 },      ev= init
--
--	  STRUCTURE PTU_psNext_30,         init = { s16Pts => 5, psRP => &PTU_psRP_30, 
--		&                                  psPP => &PTU_psPP_30, psNext => &PTU_psNext_31 },      ev= init
--
--	  STRUCTURE PTU_psNext_31,         init = { s16Pts => 5, psRP => &PTU_psRP_31, 
--		&                                  psPP => &PTU_psPP_31 , psNext => &PTU_psNext_32 },      ev= init
--
--	  STRUCTURE PTU_psNext_32,         init = { s16Pts => 5, psRP => &PTU_psRP_32, 
--		&                                  psPP => &PTU_psPP_32 , psNext => &PTU_psNext_33 },      ev= init
--
--	  STRUCTURE PTU_psNext_33,         init = { s16Pts => 5, psRP => &PTU_psRP_33, 
--		&                                  psPP => &PTU_psPP_33, psNext => &PTU_psNext_34 },       ev= init
--
--	  STRUCTURE PTU_psNext_34,         init = { s16Pts => 5, psRP => &PTU_psRP_34, 
--		&                                  psPP => &PTU_psPP_34, psNext => &PTU_psNext_35 },       ev= init
--
--	  STRUCTURE PTU_psNext_35,         init = { s16Pts => 5, psRP => &PTU_psRP_35, 
--		&                                  psPP => &PTU_psPP_35, psNext => &PTU_psNext_36 },       ev= init
--
--	  STRUCTURE PTU_psNext_36,         init = { s16Pts => 5, psRP => &PTU_psRP_36, 
--		&                                  psPP => &PTU_psPP_36, psNext => &PTU_psNext_37 },       ev= init
--
--	  STRUCTURE PTU_psNext_37,         init = { s16Pts => 5, psRP => &PTU_psRP_37, 
--		&                                  psPP => &PTU_psPP_37 , psNext => &PTU_psNext_38 },      ev= init
--
--	  STRUCTURE PTU_psNext_38,         init = { s16Pts => 5, psRP => &PTU_psRP_38, 
--		&                                  psPP => &PTU_psPP_38 , psNext => &PTU_psNext_39 },      ev= init
--
--	  STRUCTURE PTU_psNext_39,         init = { s16Pts => 5, psRP => &PTU_psRP_39, 
--		&                                  psPP => &PTU_psPP_39 , psNext => &PTU_psNext_40},      ev= init
--
--	  STRUCTURE PTU_psNext_40,         init = { s16Pts => 5, psRP => &PTU_psRP_40, 
--		&                                  psPP => &PTU_psPP_40 , psNext => &PTU_psNext_41 },       ev= init
--
--	  STRUCTURE PTU_psNext_41,         init = { s16Pts => 5, psRP => &PTU_psRP_41, 
--		&                                  psPP => &PTU_psPP_41, psNext => &PTU_psNext_42 },       ev= init
--
--	  STRUCTURE PTU_psNext_42,         init = { s16Pts => 5, psRP => &PTU_psRP_42, 
--		&                                  psPP => &PTU_psPP_42 , psNext => &PTU_psNext_43 },       ev= init
--
--	  STRUCTURE PTU_psNext_43,         init = { s16Pts => 5, psRP => &PTU_psRP_43, 
--		&                                  psPP => &PTU_psPP_43 , psNext => &PTU_psNext_44 },       ev= init
--
--	  STRUCTURE PTU_psNext_44,         init = { s16Pts => 5, psRP => &PTU_psRP_44, 
--		&                                  psPP => &PTU_psPP_44 , psNext => &PTU_psNext_45 },       ev= init
--
--	  STRUCTURE PTU_psNext_45,         init = { s16Pts => 5, psRP => &PTU_psRP_45, 
--		&                                  psPP => &PTU_psPP_45 , psNext => &PTU_psNext_46 },       ev= init
--
--	  STRUCTURE PTU_psNext_46,         init = { s16Pts => 5, psRP => &PTU_psRP_46, 
--		&                                  psPP => &PTU_psPP_46 , psNext => &PTU_psNext_47 },       ev= init
--
--	  STRUCTURE PTU_psNext_47,         init = { s16Pts => 5, psRP => &PTU_psRP_47, 
--		&                                  psPP => &PTU_psPP_47 , psNext => &PTU_psNext_48 },       ev= init
--
--	  STRUCTURE PTU_psNext_48,         init = { s16Pts => 5, psRP => &PTU_psRP_48, 
--		&                                  psPP => &PTU_psPP_48 , psNext => &PTU_psNext_49 },       ev= init
--
--	  STRUCTURE PTU_psNext_49,         init = { s16Pts => 5, psRP => &PTU_psRP_49, 
--		&                                  psPP => &PTU_psPP_49 , psNext => &PTU_psNext_50 },       ev= init
--
--	  STRUCTURE PTU_psNext_50,         init = { s16Pts => 5, psRP => &PTU_psRP_50, 
--		&                                  psPP => &PTU_psPP_50 , psNext => NIL },       ev= init
--        
--        VAR PTU_psRP[0..9].s32X,        init=8,                                                ev= init
--
--        VAR PTU_psRP[0].s32Y,           init=6,                                                ev= init
--        
--        VAR PTU_psRP[1].s32Y,           init=7,                                                ev= init
--        
--        VAR PTU_psRP[2].s32Y,           init=7,                                                ev= init
--        
--        VAR PTU_psRP[3..9].s32Y,        init=9,                                                ev= init
--
--        VAR PTU_psPP[0..9].s32R,        init=10,                                               ev= init
--
--        VAR PTU_psPP[0..9].s32A,        init=11,                                               ev= init
--
--        VAR PTU_psRP_1[0..9].s32X,      init=12,                                               ev= init
--
--        VAR PTU_psRP_1[0].s32Y,         init=14,                                               ev= init
--
--        VAR PTU_psRP_1[1..9].s32Y,      init=15,                                               ev= init
--        
--        VAR PTU_psRP_2[0..9].s32X,      init=17,                                               ev= init
--        
--        VAR PTU_psRP_2[0].s32Y,         init=7,                                               ev= init
--
--        VAR PTU_psRP_2[1..9].s32Y,      init=6,                                               ev= init
--
--        VAR PTU_psPP_1[0..9].s32R,      init=15,                                               ev= init
--
--        VAR PTU_psPP_1[0..9].s32A,      init=16,                                               ev= init
--
--        VAR PTU_psPP_2[0..9].s32R,      init=21,                                               ev= init
--
--        VAR PTU_psPP_2[0..9].s32A,      init=20,                                               ev= init
--        
--        VAR PTU_psRP_3[0..9].s32X,      init=17,                                               ev= init
--       
--        VAR PTU_psRP_3[0].s32Y,         init=7,                                               ev= init
--
--        VAR PTU_psRP_3[1..9].s32Y,      init=6,                                               ev= init        
--
--        VAR PTU_psPP_3[0..9].s32R,      init=21,                                               ev= init
--
--        VAR PTU_psPP_3[0..9].s32A,      init=7,                                               ev= init
--                         
--      VAR PTU_psRP_4[0].s32Y,         init=7,                                               ev= init
--
--      VAR PTU_psRP_4[1..9].s32Y,      init=6,                                               ev= init        
--
--      VAR PTU_psRP_5[0].s32Y,         init=7,                                               ev= init
--
--      VAR PTU_psRP_5[1..9].s32Y,      init=6,                                               ev= init    
--
--      VAR PTU_psRP_6[0].s32Y,         init=7,                                               ev= init
--
--      VAR PTU_psRP_6[1..9].s32Y,      init=6,                                               ev= init 
--
--      VAR PTU_psRP_7[0].s32Y,         init=7,                                               ev= init
--
--      VAR PTU_psRP_7[1..9].s32Y,      init=6,                                               ev= init 
--      
--      VAR PTU_psRP_8[0].s32Y,         init=7,                                               ev= init
--
--      VAR PTU_psRP_8[1..9].s32Y,      init=6,                                               ev= init   
--      
--      
--	VAR PTU_psRP_9[0].s32Y,         init=7,                                               ev= init
--
--	VAR PTU_psRP_9[1..9].s32Y,      init=6,                                               ev= init        
--
--	VAR PTU_psRP_10[0].s32Y,         init=7,                                               ev= init
--
--	VAR PTU_psRP_10[1..9].s32Y,      init=6,                                               ev= init    
--
--	VAR PTU_psRP_11[0].s32Y,         init=7,                                               ev= init
--
--	VAR PTU_psRP_11[1..9].s32Y,      init=6,                                               ev= init 
--
--	VAR PTU_psRP_12[0].s32Y,         init=7,                                               ev= init
--
--	VAR PTU_psRP_12[1..9].s32Y,      init=6,                                               ev= init 
--
--	VAR PTU_psRP_13[0].s32Y,         init=7,                                               ev= init
--
--	VAR PTU_psRP_13[1..9].s32Y,      init=6,                                               ev= init 
--      
--	VAR PTU_psRP_14[0].s32Y,         init=7,                                               ev= init
--
--	VAR PTU_psRP_14[1..9].s32Y,      init=6,                                               ev= init        
--
--	VAR PTU_psRP_15[0].s32Y,         init=7,                                               ev= init
--
--	VAR PTU_psRP_15[1..9].s32Y,      init=6,                                               ev= init    
--
--	VAR PTU_psRP_16[0].s32Y,         init=7,                                               ev= init
--
--	VAR PTU_psRP_16[1..9].s32Y,      init=6,                                               ev= init 
--
--	VAR PTU_psRP_17[0].s32Y,         init=7,                                               ev= init
--
--	VAR PTU_psRP_17[1..9].s32Y,      init=6,                                               ev= init 
--
--	VAR PTU_psRP_18[0].s32Y,         init=7,                                               ev= init
--
--	VAR PTU_psRP_18[1..9].s32Y,      init=6,                                               ev= init  
--	
--	VAR PTU_psRP_19[0].s32Y,         init=7,                                               ev= init
--
--	VAR PTU_psRP_19[1..9].s32Y,      init=6,                                               ev= init        
--
--	VAR PTU_psRP_20[0].s32Y,         init=7,                                               ev= init
--
--	VAR PTU_psRP_20[1..9].s32Y,      init=6,                                               ev= init    
--
--	VAR PTU_psRP_21[0].s32Y,         init=7,                                               ev= init
--
--	VAR PTU_psRP_21[1..9].s32Y,      init=6,                                               ev= init 
--
--	VAR PTU_psRP_22[0].s32Y,         init=7,                                               ev= init
--
--	VAR PTU_psRP_22[1..9].s32Y,      init=6,                                               ev= init 
--
--	VAR PTU_psRP_23[0].s32Y,         init=7,                                               ev= init
--
--	VAR PTU_psRP_23[1..9].s32Y,      init=6,                                               ev= init 
--	
--	VAR PTU_psRP_24[0].s32Y,         init=7,                                               ev= init
--
--	VAR PTU_psRP_24[1..9].s32Y,      init=6,                                               ev= init        
--
--	VAR PTU_psRP_25[0].s32Y,         init=7,                                               ev= init
--
--	VAR PTU_psRP_25[1..9].s32Y,      init=6,                                               ev= init    
--
--	VAR PTU_psRP_26[0].s32Y,         init=7,                                               ev= init
--
--	VAR PTU_psRP_26[1..9].s32Y,      init=6,                                               ev= init 
--
--	VAR PTU_psRP_27[0].s32Y,         init=7,                                               ev= init
--
--	VAR PTU_psRP_27[1..9].s32Y,      init=6,                                               ev= init 
--
--	VAR PTU_psRP_28[0].s32Y,         init=7,                                               ev= init
--
--	VAR PTU_psRP_28[1..9].s32Y,      init=6,                                               ev= init  
--	
--	VAR PTU_psRP_29[0].s32Y,         init=7,                                               ev= init
--
--	VAR PTU_psRP_29[1..9].s32Y,      init=6,                                               ev= init       
--
--	VAR PTU_psRP_30[0].s32Y,         init=7,                                               ev= init
--
--	VAR PTU_psRP_30[1..9].s32Y,      init=6,                                               ev= init    
--
--	VAR PTU_psRP_31[0].s32Y,         init=7,                                               ev= init
--
--	VAR PTU_psRP_31[1..9].s32Y,      init=6,                                               ev= init 
--
--	VAR PTU_psRP_32[0].s32Y,         init=7,                                               ev= init
--
--	VAR PTU_psRP_32[1..9].s32Y,      init=6,                                               ev= init 
--
--	VAR PTU_psRP_33[0].s32Y,         init=7,                                               ev= init
--
--	VAR PTU_psRP_33[1..9].s32Y,      init=6,                                               ev= init 
--	
--	VAR PTU_psRP_34[0].s32Y,         init=7,                                               ev= init
--
--	VAR PTU_psRP_34[1..9].s32Y,      init=6,                                               ev= init        
--
--	VAR PTU_psRP_35[0].s32Y,         init=7,                                               ev= init
--
--	VAR PTU_psRP_35[1..9].s32Y,      init=6,                                               ev= init    
--
--	VAR PTU_psRP_36[0].s32Y,         init=7,                                               ev= init
--
--	VAR PTU_psRP_36[1..9].s32Y,      init=6,                                               ev= init 
--
--	VAR PTU_psRP_37[0].s32Y,         init=7,                                               ev= init
--
--	VAR PTU_psRP_37[1..9].s32Y,      init=6,                                               ev= init 
--
--	VAR PTU_psRP_38[0].s32Y,         init=7,                                               ev= init
--
--	VAR PTU_psRP_38[1..9].s32Y,      init=6,                                               ev= init  
--	
--	VAR PTU_psRP_39[0].s32Y,         init=7,                                               ev= init
--
--	VAR PTU_psRP_39[1..9].s32Y,      init=6,                                               ev= init      
--
--	VAR PTU_psRP_40[0].s32Y,         init=7,                                               ev= init
--
--	VAR PTU_psRP_40[1..9].s32Y,      init=6,                                               ev= init    
--
--	VAR PTU_psRP_41[0].s32Y,         init=7,                                               ev= init
--
--	VAR PTU_psRP_41[1..9].s32Y,      init=6,                                               ev= init 
--
--	VAR PTU_psRP_42[0].s32Y,         init=7,                                               ev= init
--
--	VAR PTU_psRP_42[1..9].s32Y,      init=6,                                               ev= init 
--
--	VAR PTU_psRP_43[0].s32Y,         init=7,                                               ev= init
--
--	VAR PTU_psRP_43[1..9].s32Y,      init=6,                                               ev= init 
--	
--	VAR PTU_psRP_44[0].s32Y,         init=7,                                               ev= init
--
--	VAR PTU_psRP_44[1..9].s32Y,      init=6,                                               ev= init        
--
--	VAR PTU_psRP_45[0].s32Y,         init=7,                                               ev= init
--
--	VAR PTU_psRP_45[1..9].s32Y,      init=6,                                               ev= init    
--
--	VAR PTU_psRP_46[0].s32Y,         init=7,                                               ev= init
--
--	VAR PTU_psRP_46[1..9].s32Y,      init=6,                                               ev= init 
--
--	VAR PTU_psRP_47[0].s32Y,         init=7,                                               ev= init
--
--	VAR PTU_psRP_47[1..9].s32Y,      init=6,                                               ev= init 
--
--	VAR PTU_psRP_48[0].s32Y,         init=7,                                               ev= init
--
--	VAR PTU_psRP_48[1..9].s32Y,      init=6,                                               ev= init  
--	
--	VAR PTU_psRP_49[0].s32Y,         init=7,                                               ev= init
--
--	VAR PTU_psRP_49[1..9].s32Y,      init=6,                                               ev= init 
--	
--	VAR PTU_psRP_50[0].s32Y,         init=7,                                               ev= init
--
--	VAR PTU_psRP_50[1..9].s32Y,      init=6,                                               ev= init
--	
--        VAR e_color,                    init = BLACK,                                          ev= init
--        
--        VAR U8_mag_line1,               init = {others=>5},                                    ev= init
--
--        VAR U8_mag_line2,               init = {others=>6},                                    ev= init
--
--            VAR Vp_fgfb2,               init = &PTU_Vp_fgfb2[0],                               ev= init
--        
--            ARRAY PTU_Vp_fgfb2,         init = {0=>10,1=>20,2=>30,3=>40,4=>50,5=>60,6=>70,
--            &                                   7=>80,8=>90,9=>100,10=>110,11=>120,12=>130,
--            &                                   13=>140, 14=>150, 15=>160,16=>170,others=>180},  ev= init  
--
--        VAR S16_panel_width,            init = 4,                                              ev= init
--
--        VAR S16_panel_height,           init = 1,                                              ev= init
--        
--        COMMENT OUTPUT SECTION:
--        
--        VAR PTU_count,                  init = 0,                                              ev= 3
--
--        VAR PTU_scan_line,              init=0,                                                ev= 5
--
--        VAR PTU_frame_data,             init=0,                                                ev= 50
--
--        VAR PTU_pc_file_in_1,           init="AA",                                             ev=FILENAME
--
--        VAR PTU_pc_message_in_1,        init= "AAA",                                           ev="Polly exceeds display size."
--
--        VAR PTU_pc_file_in_2,           init="AA",                                             ev=FILENAME
--
--        VAR PTU_pc_message_in_2,        init= "AAA",                                           ev="Polly exceeds display size."
--        
--        COMMENT INPUT/OUTPUT SECTION:
--
--        VAR U8_which_mag_line,          init= 0,                                               ev= 1
--
--        VAR S16_scan_xmin,              init =4,                                               ev= 16
--
--        VAR S16_scan_xmax,              init= 5,                                               ev= 0
--        
--        --Stub Calls:
--        SIMUL
--        
--             STUB RterrWidget(192) 
--             STUB RterrWidget(192)   
--             STUB RterrWidget(192)    
--             STUB Dma2dScanLineBlend(2,BLACK)
--                    
--        END SIMUL
--        #PolygonDrawPoly(&ps_poly, e_color);
--        END ELEMENT
--        
--  
--    END TEST -- TEST 34
END SERVICE -- PolygonDrawPoly

