HEADER hdudispfcarrotgraph, Source Code Ver : 1.3 , TestScript Ver : 1.2
--------------------------------------------------------------------------------
-- Author Name          : Swaroopa N
--
-- File Name            : hdudispfcarrotgraph_3.ptu
--
-- Test Creation Date   : 27.07.2020
--
-- Tested Functions     : CarrotGraphDraw
--
-- Version History      :
--
-- TEST-VERSION       TEST-DATE        TESTER NAME        MODIFICATIONS
-- ------------       ---------        -----------        -------------
-- 1.1                27.07.2020        Swaroopa N        Created the PTU file.
-- 1.2                03.10.2020        Vignesh Sunil     updated as per #PR100281.
--------------------------------------------------------------------------------
--
-- TESTED FILE INCLUDE DIRECTIVES 
--
--------------------------------------------------------------------------------

#/*============================================================================*/
#/* Module specific includes                                                   */
#/*============================================================================*/
##include "hdudispffonts.h"        
##include "hdudispfpolygon1.h"   
##include "hdudispfrterror.h"    
##include "hdudispftext.h"       
##include "hdudispfcarrotgraph.h"
##include "hdudispfbinascii.h"   
##include "hdudispfpdidata.h"  
--------------------------------------------------------------------------------
--
-- TESTED FILE DECLARATIONS 
--
--------------------------------------------------------------------------------

-- Declarations of the global variables of the tested file

-- Declarations of the temporary variables

	#T_UINT8 Cg_cnt;

	# T_CARROTGRAPHDEF carrot_graph_def;
	#T_LOOKUP_TABLE PTU_psGeometry;   
	#T_PARAM_READING PTU_psParam; 	
	#T_SPOLY PTU_psShape;
	#T_PARAM_STAT PTU_stat;
	#T_LOOKUP_TABLE PTU_table;
	#T_INT32 PTU_x,PTU_y;
	#T_PTEXT PTU_pText;
	# T_SPOLY PTU_psPolyRedX;
	# T_PCARROTGRAPH *PTU_pCarrotGraph;
	# T_CARROTGRAPHDEF PTU_carrot_graph_def;
	# T_SWIDGETPARAM PTU_ps_widget_parm_in,PTU_ps_widget_parm_out;
	# T_PARAM_READING PTU_ps_param;


	# T_SRECTPOINT PTU_psRP;
	# T_SPOLARPOINT PTU_psPP;
	# struct sPoly PTU_psNext;
	
	# T_SPOLY PTU_ps_poly_src;
	# T_SPOLY PTU_PolygonsPsDuplicate_return;
	# T_SPOLY PTU_PolygonsPsPolyInit_return,PTU_PolygonsPsPolyInit_return_1;
	#T_INT8 PTU_i;

    --created to verify the parameter pc_message of function RterrWidget
    #char PTU_pc_message[200];
	
    --created to verify the parameter pc_file of function RterrWidget
    #char PTU_pc_file[200],PTU_temp;   

	--created to verify the parameter pps_handle_add of function TextAllocat
    #T_TEXT *PTU_pps_handle_add_out;
    #T_TEXT PTU_pps_handle_add_in;
	
	--created to verify the parameter pu8_string of function TextAllocat
    #T_UINT8 PTU_pu8_string[13];
    
    --created to verify the parameter dest of function BinasByteFormatInfoBE
    #T_INT8 PTU_dest[13],PTU_j;
	
	--created to verify the parameter p_text of TextUpdate    
    #T_PTEXT TextUpdate_p_text_1;
    #T_TEXT TextUpdate_p_text;
	
	--created to verify the parameter ps_poly of PolygonsvPolarToRect    
	#T_SPOLY PTU_ps_poly;
	
	--created to verify the parameter param, ps_widget_param and ac_dig_text of WidgetsNumUpdate    
    #T_PARAM_READING PTU_WidgetsNumUpdate_param;
    #T_SWIDGETPARAM  PTU_WidgetsNumUpdate_ps_widget_param;
    #T_CHAR  PTU_WidgetsNumUpdate_ac_dig_text;
	
	--created to verify the parameter pps_poly_red_x of function WidgetsRedX
    #T_SPOLY PTU_pps_poly_red_x_in, PTU_pps_poly_red_x_out;
    
    --created to verify the parameter ps_dis_region of function WidgetsRedX
    #T_SDISREGION PTU_psDisRegion;

    --created to verify the parameter ps_dis_region of function WidgetsRedX
    #T_SDISREGION PTU_ps_dis_region;

    --created to verify the parameter ps_poly of functionPolygonDrawPoly
    #T_SPOLY *ps_poly_PTU;

--------------------------------------------------------------------------------

BEGIN

	COMMENT Author Name      : Swaroopa N
    COMMENT
    COMMENT File Name        : hdudispfcarrotgraph_3.ptu
    COMMENT
    COMMENT Tested Functions : CarrotGraphDraw
    COMMENT
    COMMENT Assumptions and Constraints
    COMMENT <AC>
    COMMENT
    COMMENT Assumption(s):
    COMMENT None
    COMMENT
    COMMENT Constraint(s):
    COMMENT None 
    COMMENT 1.For the following code snippet
    COMMENT     if(A_carrot_graph[u16_carrot_x_cntr].
    COMMENT        carrot_graph_def->psParam->stat<PARAM_BAD)
    COMMENT     {
    COMMENT        draw_dial = FALSE;
    COMMENT     }
    COMMENT TRUE can't be covered since 
    COMMENT if carrot_graph_def->psParam->stat be set value less than PARAM_BAD it will not
    COMMENT enter the above if condition
    COMMENT 
    COMMENT 2.The for loop can't be covered for 0 and 1 loop since it's controlled by macro ASSC_LABEL_INDX
    COMMENT 
    COMMENT 3.The for loop can't be covered for 0 loop , when U16_carrot_graphs_installed is set to 0
    COMMENT it doesn't eneter the above foor loop
    COMMENT
    COMMENT
    COMMENT The folowing warning where observed during execution
    COMMENT warning #120-D: 
    COMMENT        return value type does not match the function type
    COMMENT         return(Attol_ptr_out->ret);
    COMMENT 		
    COMMENT warning #188-D: 
    COMMENT        enumerated type mixed with another type	
    COMMENT
    COMMENT 4.TRUE can't be covered for LLR hdudispfcarrotgraph-CarrotGraphAllocat-DB-LLR-001
    COMMENT 	since U16_carrot_graphs_installed can't be set equal to MAX_CARROT_GRAPH
    COMMENT
    COMMENT 5.For LLR hdudispfcarrotgraph-CarrotGraphDraw-DB-LLR-002 (TF) cant't be covered
    COMMENT   since draw_dial can't be set to FALSE
    COMMENT	
	COMMENT 6. Below statement is added in 'hdudispfcarrotgraph.c' file befor the include section to fetch the actual path of source file independent
    COMMENT    to different target machines.
    COMMENT    Code:
    COMMENT    T_CHAR glob_file_name[] = __FILE__;	
    COMMENT </AC>

	COMMENT Equivalence Class Description
    COMMENT <ECD>
    COMMENT
    COMMENT Valid Class(es)
    COMMENT Class 1
    COMMENT In Function 'CarrotGraphAllocat' U16_carrot_graphs_installed is equal to MAX_CARROT_GRAPH.
	COMMENT
	COMMENT Class 2
    COMMENT In Function 'CarrotGraphAllocat' U16_carrot_graphs_installed is not equal to MAX_CARROT_GRAPH.
	COMMENT
	COMMENT Class 3
	COMMENT In Function 'CarrotGraphAllocat' calls the function RterrWidget.
	COMMENT
	COMMENT Class 4
	COMMENT In Function 'CarrotGraphAllocat' calls the function CalculatePower.
	COMMENT
	COMMENT Class 5
	COMMENT In Function 'CarrotGraphAllocat' calls the function PolygonsPsPolyInit.
	COMMENT
	COMMENT Class 6
	COMMENT In Function 'CarrotGraphAllocat' calls the function PolygonsPsDuplicate.
	COMMENT
	COMMENT Class 7
	COMMENT In Function 'CarrotGraphAllocat' calls the function LookupTableLookup.
	COMMENT
	COMMENT Class 8
	COMMENT In Function 'CarrotGraphAllocat' calls the function BinasGetWidth.
	COMMENT
    COMMENT Class 9
    COMMENT In Function CarrotGraphAllocat, the resultant value of return
	COMMENT value of function BinasGetWidth and eFont of carrot_graph_def is true.
    COMMENT
    COMMENT Class 10
    COMMENT In Function CarrotGraphAllocat, the resultant value of return
	COMMENT value of function BinasGetWidth and eFont of carrot_graph_def is not true.
    COMMENT 
	COMMENT Class 11
	COMMENT In Function 'CarrotGraphAllocat' calls the function BinasByteFormatInfoBE.
	COMMENT
	COMMENT Class 12
	COMMENT In Function 'CarrotGraphAllocat' calls the function TextAllocat.
	COMMENT
	COMMENT Class 13
	COMMENT In Function 'CarrotGraphUpdate' calls the function CalculatePower.
	COMMENT
	COMMENT Class 14
	COMMENT In Function 'CarrotGraphUpdate' calls the function WidgetsUpdateRT.
	COMMENT
	COMMENT Class 15
	COMMENT In Function 'CarrotGraphUpdate' calls the function LookupTableLookup.
	COMMENT
	COMMENT Class 16
	COMMENT In Function CarrotGraphUpdate, the value of stat of psParam of carrot_graph_def of ps_carrot_graph is greater than PARAM_BAD.
	COMMENT
	COMMENT Class 17
	COMMENT In Function CarrotGraphUpdate, the value of stat of psParam of carrot_graph_def of ps_carrot_graph is less than PARAM_BAD.
	COMMENT
	COMMENT Class 18
	COMMENT In Function CarrotGraphUpdate, the value of stat of psParam of carrot_graph_def of ps_carrot_graph is equal to PARAM_BAD.
	COMMENT
	COMMENT Class 19
	COMMENT In Function CarrotGraphUpdate, pText of sWidgetParm of ps_carrot_graph is equal to ZERO.
	COMMENT
	COMMENT Class 20
	COMMENT In Function CarrotGraphUpdate, pText of sWidgetParm of ps_carrot_graph is not equal to ZERO.
	COMMENT
	COMMENT Class 21
	COMMENT In Function 'CarrotGraphUpdate' calls the function WidgetsNumUpdate.
	COMMENT
	COMMENT Class 22
	COMMENT In Function CarrotGraphUpdate, eCGHV of carrot_graph_def of ps_carrot_graph is equal to CG_VERTICAL.
	COMMENT
	COMMENT Class 23
	COMMENT In Function CarrotGraphUpdate, eCGHV of carrot_graph_def of ps_carrot_graph is not equal to CG_VERTICAL.
	COMMENT
	COMMENT Class 24
	COMMENT In Function CarrotGraphUpdate, calls the function PolygonsvPolarToRect.
	COMMENT
	COMMENT Class 25
	COMMENT In Function CarrotGraphUpdate, pText of sWidgetParm of ps_carrot_graph is equal to NULL.
	COMMENT
	COMMENT Class 26
	COMMENT In Function CarrotGraphUpdate, pText of sWidgetParm of ps_carrot_graph is not equal to NULL.
	COMMENT
	COMMENT Class 27
	COMMENT In Function CarrotGraphUpdate, calls the function BinasGetWidth.
	COMMENT
	COMMENT Class 28
	COMMENT In Function CarrotGraphUpdate, calls the function TextUpdate.
	COMMENT
	COMMENT Class 29
	COMMENT In Function CarrotGraphDraw, the value of stat of psParam of carrot_graph_def of ps_carrot_graph is greater than PARAM_BAD.
	COMMENT
	COMMENT Class 30
	COMMENT In Function CarrotGraphDraw, the value of stat of psParam of carrot_graph_def of ps_carrot_graph is less than PARAM_BAD.
	COMMENT
	COMMENT Class 31
	COMMENT In Function CarrotGraphDraw, the value of stat of psParam of carrot_graph_def of ps_carrot_graph is equal to PARAM_BAD.
	COMMENT
	COMMENT Class 32
	COMMENT In Function CarrotGraphDraw, associated_labels of carrot_graph_def of ps_carrot_graph is equal to ZERO.
	COMMENT
	COMMENT Class 33
	COMMENT In Function CarrotGraphDraw, associated_labels of carrot_graph_def of ps_carrot_graph is not equal to ZERO.
	COMMENT
	COMMENT Class 34
	COMMENT In Function CarrotGraphDraw, the (associated_labels of carrot_graph_def of ps_carrot_graph
	COMMENT is not equal to label of carrot_graph_def of A_carrot_graph) and (not of carrot_graph_sw_x) is TRUE.
	COMMENT
	COMMENT Class 35
	COMMENT In Function CarrotGraphDraw, (associated_labels of carrot_graph_def of ps_carrot_graph
	COMMENT is equal to label of carrot_graph_def of A_carrot_graph) and (not of carrot_graph_sw_x) is not TRUE.
	COMMENT
	COMMENT Class 36
	COMMENT In Function CarrotGraphDraw, stat of carrot_graph_def of A_carrot_graph is greater than PARAM_BAD.
	COMMENT
	COMMENT Class 37
	COMMENT In Function CarrotGraphDraw, stat of carrot_graph_def of A_carrot_graph is less than PARAM_BAD.
	COMMENT
	COMMENT Class 38
	COMMENT In Function CarrotGraphDraw, the (psDisRegion of carrot_graph_def of A_carrot_graph is equal to NULL)
	COMMENT and (draw_dial is equal to true) is TRUE.
	COMMENT
	COMMENT Class 39
	COMMENT In Function CarrotGraphDraw, the (psDisRegion of carrot_graph_def of A_carrot_graph is equal to NULL)
	COMMENT and (draw_dial is equal to true) is not TRUE.
	COMMENT
	COMMENT Class 40
	COMMENT In Function CarrotGraphDraw, psDisRegion of carrot_graph_def of A_carrot_graph is equal to NULL.
	COMMENT
	COMMENT Class 41
	COMMENT In Function CarrotGraphDraw, calls the function WidgetsRedX.
	COMMENT
	COMMENT Class 42
	COMMENT In Function CarrotGraphDraw, calls the function PolygonDrawPoly.
	COMMENT	
    COMMENT Class 43
    COMMENT In Function CarrotGraphAllocat, the resultant value of return
	COMMENT value of function BinasGetWidth is true and eFont of carrot_graph_def is not true.	
	COMMENT
	COMMENT Class 44
	COMMENT In Function CarrotGraphDraw, the (associated_labels of carrot_graph_def of ps_carrot_graph
	COMMENT is equal to label of carrot_graph_def of A_carrot_graph) and (not of carrot_graph_sw_x) is TRUE.	
    COMMENT Invalid Class(es)
    COMMENT
    COMMENT
    COMMENT </ECD>

--------------------------------------------------------------------------------
--
-- STUB DECLARATIONS OF THE TESTED OR INTEGRATED UNITS
--
--------------------------------------------------------------------------------

DEFINE STUB hdudispfcarrotgraph_c

	-- Parameter ps_poly is made as _no as it is verified explicitly
    #void PolygonDrawPoly(T_SPOLY  _no *ps_poly, T_EPENCOLOR  _in e_color)
	#{
	# ps_poly_PTU = ps_poly;
	#}

	-- Parameters ps_dis_region and pps_poly_red_x are made as _no as it is verified explicitly
    #void WidgetsRedX(T_SDISREGION  _no ps_dis_region, T_SPOLY _no **pps_poly_red_x)
    #{
    #     PTU_ps_dis_region = *ps_dis_region;
    #     PTU_pps_poly_red_x_in = *((T_SPOLY *)pps_poly_red_x);
    #}
	
    #void TextUpdate(struct Text   _no p_text, T_EPENCOLOR  _in e_pen_color, T_ETXFLASH  _in e_tx_flash, T_ETXV  _in e_txv)
    #{
	# TextUpdate_p_text_1 = p_text;
    # TextUpdate_p_text.u16X0 = TextUpdate_p_text_1->u16X0;
    # TextUpdate_p_text.u16Y0 = TextUpdate_p_text_1->u16Y0;
    # TextUpdate_p_text.eTXAlign = TextUpdate_p_text_1->eTXAlign;
    # TextUpdate_p_text.eTXFont = TextUpdate_p_text_1->eTXFont;
    # TextUpdate_p_text.ePenColor = TextUpdate_p_text_1->ePenColor;
    # TextUpdate_p_text.eTXV = TextUpdate_p_text_1->eTXV;
    # TextUpdate_p_text.eTXFlash = TextUpdate_p_text_1->eTXFlash;
	#}
	#void PolygonsvPolarToRect(T_SPOLY  _no ps_poly, T_INT32  _in s32_xoff, T_INT32  _in s32_yoff, T_UINT16  _in u16_len, T_INT32  _in u32_rot, T_INT32  _in u32_rot_rd, T_BOOL  _in moving_rd) 
    #{
	#	PTU_ps_poly = *ps_poly;
	#}
	#void WidgetsNumUpdate(T_PARAM_READING  _no param, T_SWIDGETPARAM  _no ps_widget_param, char  _no ac_dig_text[200], T_UINT16  _in u16_format,T_EPENCOLOR _in e_pen_color)
	#{
    # PTU_WidgetsNumUpdate_param = *param;
    # PTU_WidgetsNumUpdate_ps_widget_param = *ps_widget_param;
    # PTU_WidgetsNumUpdate_ac_dig_text = *ac_dig_text;
	#}
    #void WidgetsUpdateRT(T_PARAM_READING  _no ps_param, T_SWIDGETPARAM  _no ps_widget_parm)
	#{
	# 	PTU_ps_param.r = ps_param->r;
	# 	PTU_ps_param.stat = ps_param->stat;
	# 	PTU_ps_widget_parm_in = *ps_widget_parm;
	#   ps_widget_parm->s32Dig = PTU_ps_widget_parm_out.s32Dig;
    #   ps_widget_parm->s32DisDig = PTU_ps_widget_parm_out.s32DisDig;
    #   ps_widget_parm->eDIsDigStat = PTU_ps_widget_parm_out.eDIsDigStat;
    #   ps_widget_parm->pText = PTU_ps_widget_parm_out.pText;
    #   ps_widget_parm->s32Scaler = PTU_ps_widget_parm_out.s32Scaler;
    #   ps_widget_parm->s32ScalerStep = PTU_ps_widget_parm_out.s32ScalerStep;
	#}
	
	-- Parameters pps_handle_add and pu8_string are made as _no as it is verified explicitly
    #void TextAllocat(T_PTEXT  _no *pps_handle_add, T_UINT8  _no *pu8_string, T_UINT16  _in u16_x0, T_UINT16  _in u16_y0, T_ETXALIGN  _in e_tx_align, T_ETXFONT  _in e_tx_font, T_EPENCOLOR  _in e_pen_color, T_ETXV  _in e_txv, T_ETXFLASH  _in e_tx_flash)
    #{
    #   for(PTU_i =0; PTU_i<13;PTU_i++)
    #   {  
    #   PTU_pu8_string[PTU_i] = pu8_string[PTU_i] ;
    #   }
    #   PTU_pps_handle_add_out = (T_TEXT*) pps_handle_add;
    #   PTU_pps_handle_add_in =  *PTU_pps_handle_add_out;  
	#}
	#T_INT8* BinasByteFormatInfoBE(void * _no src, T_UINT16  _in format, char  _no dest[200])
	#{
	#	for(PTU_j =0; PTU_i<13;PTU_j++)
	#	dest[PTU_j] = PTU_dest[PTU_j];
	#}
	
    #T_UINT16 BinasGetWidth(T_UINT16  _in format); 
    #T_INT32 LookupTableLookup( const T_LOOKUP_TABLE * _no table, T_INT32  _in ind_var, T_PARAM_STAT  _no *stat)
    #{
    # PTU_stat = *stat;
    # PTU_table = *table;
    #}
    #T_SPOLY* PolygonsPsDuplicate(T_SPOLY  _no ps_poly_src)
	#{
	# PTU_ps_poly_src = *ps_poly_src;
	#}
    #T_SPOLY* PolygonsPsPolyInit(T_ESTOCKSHAPE  _in e_poly_shape, T_FLOAT  _in fx_scale, T_INT16  _in s16_xoff, T_FLOAT  _in fy_scale, T_INT16  _in s16_yoff, T_INT16  _in s16_rot);
    #T_FLOAT CalculatePower(T_FLOAT  _in value, T_INT32  _in mul); 

    -- Parameters pc_file and pc_message are made as _no as it is verified explicitly
    #void RterrWidget(char  _no pc_file[200], T_INT32  _in s32_line_number, char  _no pc_message[200])
    #{
    #  PTU_temp = 0;
    #  while(pc_file[PTU_temp]!= ZERO)
    #  {
    #    PTU_pc_file[PTU_temp]= pc_file[PTU_temp];   //Verify pc_file path 
    #    PTU_temp = PTU_temp+1;
    #  }
    #    PTU_pc_file[PTU_temp]= ZERO;
    #
    #  PTU_temp = 0;
    #  while(pc_message[PTU_temp]!= ZERO)
    #  {
    #    PTU_pc_message[PTU_temp]= pc_message[PTU_temp];  //Verify pc_message
    #    PTU_temp = PTU_temp+1;
    #  }
    #    PTU_pc_message[PTU_temp]= ZERO;
    #}
END DEFINE

--------------------------------------------------------------------------------
--
-- ENVIRONMENTS DECLARATIONS
--
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
-- TESTED FILE ENVIRONNEMENT
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--
-- SERVICES DECLARATIONS
--
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
-- Declaration of the service CarrotGraphDraw
--------------------------------------------------------------------------------
SERVICE CarrotGraphDraw
SERVICE_TYPE extern

    -- Tested service parameters declarations
    #T_CARROTGRAPHDEF carrot_graph_def;
	
	ENVIRONMENT ENV_CarrotGraphDraw
	
			VAR carrot_graph_def.sUpperLeft,		init = {u16X0=>0,u16Y0=>0},			ev = init
			VAR carrot_graph_def.sDialCenterOffset, 		init = { u16X0 => 0, u16Y0 => 0 }, 					ev = init
			VAR carrot_graph_def.psGeometry, 			init = &PTU_psGeometry,  			ev = init
			VAR carrot_graph_def.psParam, 				init = &PTU_psParam, 				ev = init
			VAR carrot_graph_def.asPtrSpec,				init = { others => { s32PtrShape => 0, ePenColor => BLACK, psShape => NIL } }, ev = init
			VAR carrot_graph_def.ptr_scale,				init = { others => { u16X0 => 0, u16Y0 => 0 } },	ev = init
			VAR carrot_graph_def.ptr_scale_offset,		init = { others => { u16X0 => 0, u16Y0 => 0 } },	ev = init
			VAR carrot_graph_def.rotAngle,				init = { others => 0 },								ev = init
			VAR carrot_graph_def.u16Format,				init = 0,											ev = init
			VAR carrot_graph_def.eFont,					init = E_NO_FONT,									ev = init	
			VAR carrot_graph_def.eCGHV,					init = CG_VERTICAL,									ev = init	
			VAR carrot_graph_def.limVal,					init = { others => 0 },								ev = init	
			VAR carrot_graph_def.limValtype,				init = { others => 0 },								ev = init	
			VAR carrot_graph_def.limColor,				init = { others => 0 },								ev = init	
			VAR carrot_graph_def.label,					init = 0,											ev = init	
			VAR carrot_graph_def.associated_labels,		init = { others => 0 },								ev = init	
			VAR carrot_graph_def.sDigCenterOffset,		init = { u16X0 => 0, u16Y0 => 0 },					ev = init	
			VAR carrot_graph_def.psDisRegion,				init = &PTU_psDisRegion,							ev = init	
			--VAR carrot_graph_def.pCarrotGraph,			init = &PTU_pCarrotGraph,							ev = init	
	
	    END ENVIRONMENT -- ENV_CarrotGraphDraw
    USE ENV_CarrotGraphDraw   
	
	
	TEST 1
    FAMILY nominal
        COMMENT Test Description
        COMMENT <TD>	
		COMMENT
		COMMENT [hdudispfcarrotgraph-CarrotGraphDraw-DB-LLR-001]
		COMMENT The function shall loop for number of carrot graphs installed times.
		COMMENT (0 loop)
        COMMENT Equivalence Class None
        COMMENT
        COMMENT
        COMMENT </TD>
		
        ELEMENT
		
			COMMENT INPUT SECTION:
			
				--None
			
			COMMENT OUTPUT SECTION:

				--None
			
			COMMENT INPUT OUTPUT SECTION:

				--None
			
			--Stub Calls:
			SIMUL
			
				--None
			
			END SIMUL
		
		-- Calling the Unit Under Test:
		#CarrotGraphDraw();
        END ELEMENT

    END TEST -- TEST 1	
	
	

	TEST 2
    FAMILY nominal
        COMMENT Test Description
        COMMENT <TD>	
		COMMENT
		COMMENT [hdudispfcarrotgraph-CarrotGraphDraw-DB-LLR-001]
		COMMENT The function shall loop carrot graph counter from ZERO to total number of carrot graph installed and do the following:
		COMMENT 1.Set pointer of carrot graph structure to address of a carrot graph with index carrot graph counter 
		COMMENT 2.Set draw dial flag to TRUE.
		COMMENT 3.Do the below if parameter stat of psParam of carrot_graph_def of pointer of carrot graph structure  is greater than or equal to PARAM_BAD.
		COMMENT - Loop from ZERO to ASSC_LABEL_INDX.
		COMMENT   - Set draw dial as FALSE if the below conditions are true else break from loop.
		COMMENT    1. If parameter associated_labels of carrot_graph_def of pointer of carrot graph     structure is  not equal to ZERO 
		COMMENT    2.Loop from zero till number of carrot graphs installed and do following
		COMMENT a.Parameter associated_labels with loop index of carrot_graph_def of pointer of carrot graph     structure is equal to parameter label of carrot_graph_def of carrot graph        
		COMMENT with loop index and not of carrot graph with loop index is FALSE with index carrot graph counter,
		COMMENT b.Parameter stat of psParam of carrot_graph_def of carrot graph with loop index  of carrot graph is less than PARAM_BAD.
        COMMENT Equivalence Class 31,33,35,36
        COMMENT
        COMMENT [hdudispfcarrotgraph-CarrotGraphDraw-DB-LLR-002]
        COMMENT The function shall loop carrot graph counter from ZERO to total number of carrot graph installed and do the following:
        COMMENT Do the below if parameter stat of psParam of carrot_graph_def of pointer of carrot graph structure  is greater than or equal to PARAM_BAD.	
        COMMENT - Do the following when Null is not equal to psDisRegion of carrot_graph_def of pointer of carrot graph structure and draw dial is true.
        COMMENT 1.Call the function WidgetsRedX with parameters psDisRegion of carrot_graph_def  of pointer of carrot graph structure , address of psPolyRedX of  of pointer of carrot graph structure.
        COMMENT 2.Set carrot graph  with index carrot graph counter to TRUE, Otherwise does nothing.
        COMMENT Equivalence Class 38,41
        COMMENT
        COMMENT
        COMMENT </TD>	
		
        ELEMENT
		
			COMMENT INPUT SECTION:
			
				--None
			
			COMMENT OUTPUT SECTION:

			VAR carrot_graph_def.psGeometry, 		init = &PTU_psGeometry,  							ev = init
			
			VAR PTU_psGeometry,                     init = { x => &PTU_x, y => &PTU_y},       			ev = init
			
			VAR carrot_graph_def.psParam, 			init = &PTU_psParam, 								ev = init
			
			VAR PTU_psParam.stat,						init = PARAM_BAD,			ev = init
			
			VAR carrot_graph_def.asPtrSpec,				init = { others => { s32PtrShape => 1, ePenColor => BLACK, psShape => &PTU_PolygonsPsPolyInit_return } }, ev = init

			VAR carrot_graph_def.pCarrotGraph->asPtrSpec,		init = { others =>
			&												{ s32PtrShape => 1,
			&												 ePenColor => BLACK,
			&												 psShape => NIL 
			&												} 
			&												},
			&														ev = {others => 
			&															{ s32PtrShape => 0,
			&                                                             ePenColor => BLACK,
			&                                                             psShape => &PTU_PolygonsPsDuplicate_return 
			&                                                           } 
			&                                                           }
			
			VAR carrot_graph_def.pCarrotGraph->sOffSet,	init = 0,				ev = 500
			
			VAR carrot_graph_def.u16Format,				init = 0,							ev = init
			
			VAR carrot_graph_def.eFont,					init = E_NO_FONT,					ev = init
			
			VAR carrot_graph_def.eCGHV,					init = CG_VERTICAL,					ev = init	

			VAR carrot_graph_def.pCarrotGraph->sWidgetParm.s32Scaler,      init = 0,        ev = init				     

            VAR PTU_psDisRegion,                                       init = {eRegionType => E_REGION_TYPE_GAUGE, sDisLocCtr => {others => 0},s32Width => 1, s32Height => 1, sDisLocO => {others => 0},eTXFont => E_NO_FONT,pu8Text => NIL},           
            & ev = init   
            VAR carrot_graph_def.psDisRegion,                            init = &PTU_psDisRegion,                ev = init
            

            VAR PTU_ps_dis_region,              init = {eRegionType => E_REGION_TYPE_GAUGE, sDisLocCtr => {others => 0},s32Width => 1, s32Height => 1, sDisLocO => {others => 0},eTXFont => E_NO_FONT,pu8Text => NIL},         
            & ev = {eRegionType => E_REGION_TYPE_GAUGE, sDisLocCtr => {others => 0},s32Width => 1, s32Height => 1, sDisLocO => {others => 0},eTXFont => E_NO_FONT,pu8Text => NIL}

			VAR PTU_stat,						init = RANGE_ERROR ,						ev = PARAM_OK
			
			VAR PTU_table,						init = NIL,									ev = { x => &PTU_x, y => &PTU_y}

			VAR PTU_ps_poly,					init = {s16Pts=>1,others=>NIL},				ev = init
			
			VAR carrot_graph_def.sUpperLeft,			init = {u16X0=>1,u16Y0=>1},			ev = init

			VAR carrot_graph_def.sDialCenterOffset,		init = {u16X0=>1,u16Y0=>1},			ev = init
			
			VAR carrot_graph_def.associated_labels,		init = { others => 1 },				ev = init
			
			VAR carrot_graph_def.label,					init = 1,							ev = init	
			
			COMMENT INPUT OUTPUT SECTION:

				--None
			
			--Stub Calls:
			SIMUL
			
				STUB  CalculatePower (10.0,0)0.0
				STUB  LookupTableLookup (0)500
				STUB  PolygonsPsDuplicate 1..6 => ()&PTU_PolygonsPsDuplicate_return
				STUB  PolygonsPsPolyInit 1..6 => (1,0.0,0,0.0,0,0)&PTU_PolygonsPsPolyInit_return
				STUB  BinasGetWidth (0) 0
				STUB  WidgetsRedX()
			
			END SIMUL
			
		-- Function called to create a Carrot Graph
		#CarrotGraphClear();
		#CarrotGraphAllocat(&carrot_graph_def);
		
		-- Calling the Unit Under Test:
		#CarrotGraphDraw();
        END ELEMENT

    END TEST -- TEST 2
	
	TEST 3
    FAMILY nominal
        COMMENT Test Description
        COMMENT <TD>	
		COMMENT
		COMMENT [hdudispfcarrotgraph-CarrotGraphDraw-DB-LLR-001]
		COMMENT The function shall loop carrot graph counter from ZERO to total number of carrot graph installed and do the following:
		COMMENT 1.Set pointer of carrot graph structure to address of a carrot graph with index carrot graph counter 
		COMMENT 2.Set draw dial flag to TRUE.
		COMMENT 3.Do the below if parameter stat of psParam of carrot_graph_def of pointer of carrot graph structure  is greater than or equal to PARAM_BAD.
		COMMENT - Loop from ZERO to ASSC_LABEL_INDX.
		COMMENT   - do not set draw dial as FALSE if the below conditions are true else break from loop.
		COMMENT    1. If parameter associated_labels of carrot_graph_def of pointer of carrot graph     structure is  not equal to ZERO 
		COMMENT    2.Loop from zero till number of carrot graphs installed and do following
		COMMENT a.Parameter associated_labels with loop index of carrot_graph_def of pointer of carrot graph     structure is not equal to parameter label of carrot_graph_def of carrot graph        
		COMMENT with loop index and not of carrot graph with loop index is FALSE with index carrot graph counter,
		COMMENT b.Parameter stat of psParam of carrot_graph_def of carrot graph with loop index  of carrot graph is less than PARAM_BAD.
        COMMENT Equivalence Class 31,33,34,36,41
        COMMENT
        COMMENT [hdudispfcarrotgraph-CarrotGraphDraw-DB-LLR-002]
        COMMENT The function shall loop carrot graph counter from ZERO to total number of carrot graph installed and do the following:
        COMMENT Do the below if parameter stat of psParam of carrot_graph_def of pointer of carrot graph structure  is greater than or equal to PARAM_BAD.	
        COMMENT - Do the following when Null is not equal to psDisRegion of carrot_graph_def of pointer of carrot graph structure and draw dial is true.
        COMMENT 1.Call the function WidgetsRedX with parameters psDisRegion of carrot_graph_def  of pointer of carrot graph structure , address of psPolyRedX of  of pointer of carrot graph structure.
        COMMENT 2.Set carrot graph  with index carrot graph counter to TRUE, Otherwise does nothing.
        COMMENT Equivalence Class 38
        COMMENT
        COMMENT
        COMMENT </TD>
	
        ELEMENT
		
			COMMENT INPUT SECTION:
			
				--None
			
			COMMENT OUTPUT SECTION:

			VAR carrot_graph_def.psGeometry, 		init = &PTU_psGeometry,  							ev = init
			
			VAR PTU_psGeometry,                     init = { x => &PTU_x, y => &PTU_y},       			ev = init
			
			VAR carrot_graph_def.psParam, 			init = &PTU_psParam, 								ev = init
			
			VAR PTU_psParam.stat,						init = PARAM_BAD,			ev = init
			
			VAR carrot_graph_def.asPtrSpec,				init = { others => { s32PtrShape => 1, ePenColor => BLACK, psShape => &PTU_PolygonsPsPolyInit_return } }, ev = init

			VAR carrot_graph_def.pCarrotGraph->asPtrSpec,		init = { others =>
			&												{ s32PtrShape => 1,
			&												 ePenColor => BLACK,
			&												 psShape => NIL 
			&												} 
			&												},
			&														ev = {others => 
			&															{ s32PtrShape => 1,
			&                                                             ePenColor => BLACK,
			&                                                             psShape => &PTU_PolygonsPsDuplicate_return 
			&                                                           } 
			&                                                           }
			
			VAR carrot_graph_def.pCarrotGraph->sOffSet,	init = 0,				ev = 500
			
			VAR carrot_graph_def.u16Format,				init = 0,							ev = init
			
			VAR carrot_graph_def.eFont,					init = E_NO_FONT,					ev = init
			
			VAR carrot_graph_def.eCGHV,					init = CG_VERTICAL,					ev = init	

			VAR carrot_graph_def.pCarrotGraph->sWidgetParm.s32Scaler,      init = 0,        ev = init				     

            VAR PTU_psDisRegion,                                       init = {eRegionType => E_REGION_TYPE_GAUGE, sDisLocCtr => {others => 0},s32Width => 1, s32Height => 1, sDisLocO => {others => 0},eTXFont => E_NO_FONT,pu8Text => NIL},           
            & ev = init   

            VAR carrot_graph_def.psDisRegion,                            init = &PTU_psDisRegion,                ev = init
           
            VAR PTU_ps_dis_region,              init = {eRegionType => E_REGION_TYPE_GAUGE, sDisLocCtr => {others => 0},s32Width => 1, s32Height => 1, sDisLocO => {others => 0},eTXFont => E_NO_FONT,pu8Text => NIL},         
            & ev = {eRegionType => E_REGION_TYPE_GAUGE, sDisLocCtr => {others => 0},s32Width => 1, s32Height => 1, sDisLocO => {others => 0},eTXFont => E_NO_FONT,pu8Text => NIL}
		
			VAR PTU_stat,						init = RANGE_ERROR ,						ev = PARAM_OK
			
			VAR PTU_table,						init = NIL,									ev = { x => &PTU_x, y => &PTU_y}

			VAR PTU_ps_poly,					init = {s16Pts=>1,others=>NIL},				ev = init
			
			VAR carrot_graph_def.sUpperLeft,			init = {u16X0=>1,u16Y0=>1},			ev = init

			VAR carrot_graph_def.sDialCenterOffset,		init = {u16X0=>1,u16Y0=>1},			ev = init
			
			VAR carrot_graph_def.associated_labels,		init = { others => 1 },				ev = init
			
			VAR carrot_graph_def.label,					init = 0,							ev = init


			
			COMMENT INPUT OUTPUT SECTION:

				--None
			
			--Stub Calls:
			SIMUL
			
			
				STUB  CalculatePower (10.0,0)0.0
				STUB  LookupTableLookup (0)500
				STUB  PolygonsPsDuplicate 1..6 => ()&PTU_PolygonsPsDuplicate_return
				STUB  PolygonsPsPolyInit 1..6 => (1,0.0,0,0.0,0,0)&PTU_PolygonsPsPolyInit_return
				STUB  BinasGetWidth (0) 0
				STUB  WidgetsRedX()
			
			END SIMUL
			
		-- Function called to create a Carrot Graph
		#CarrotGraphClear();

		#CarrotGraphAllocat(&carrot_graph_def);
		
		-- Calling the Unit Under Test:
		#CarrotGraphDraw();
        END ELEMENT

    END TEST -- TEST 3
	
	TEST 4
    FAMILY nominal

        COMMENT Test Description
        COMMENT <TD>	
		COMMENT
		COMMENT [hdudispfcarrotgraph-CarrotGraphDraw-DB-LLR-001]
		COMMENT The function shall loop carrot graph counter from ZERO to total number of carrot graph installed and do the following:
		COMMENT 1.Set pointer of carrot graph structure to address of a carrot graph with index carrot graph counter 
		COMMENT 2.Set draw dial flag to TRUE.
		COMMENT 3.Do the below if parameter stat of psParam of carrot_graph_def of pointer of carrot graph structure  is greater than or equal to PARAM_BAD.
		COMMENT - Loop from ZERO to ASSC_LABEL_INDX.
		COMMENT   - set draw dial as FALSE if the below conditions are true else break from loop.
		COMMENT    1. If parameter associated_labels of carrot_graph_def of pointer of carrot graph     structure is  not equal to ZERO 
		COMMENT    2.Loop from zero till number of carrot graphs installed and do following
		COMMENT a.Parameter associated_labels with loop index of carrot_graph_def of pointer of carrot graph     structure is equal to parameter label of carrot_graph_def of carrot graph        
		COMMENT with loop index and not of carrot graph with loop index is FALSE with index carrot graph counter,
		COMMENT b.Parameter stat of psParam of carrot_graph_def of carrot graph with loop index  of carrot graph is less than PARAM_BAD.
        COMMENT Equivalence Class 31,33,44
        COMMENT
        COMMENT [hdudispfcarrotgraph-CarrotGraphDraw-DB-LLR-002]
        COMMENT The function shall loop carrot graph counter from ZERO to total number of carrot graph installed and do the following:
        COMMENT Do the below if parameter stat of psParam of carrot_graph_def of pointer of carrot graph structure  is greater than or equal to PARAM_BAD.	
        COMMENT - Do the following when Null is not equal to psDisRegion of carrot_graph_def of pointer of carrot graph structure and draw dial is true.
        COMMENT 1.Call the function WidgetsRedX with parameters psDisRegion of carrot_graph_def  of pointer of carrot graph structure , address of psPolyRedX of  of pointer of carrot graph structure.
        COMMENT 2.Set carrot graph  with index carrot graph counter to TRUE, Otherwise does nothing.
        COMMENT Equivalence Class 38,41
        COMMENT
        COMMENT
        COMMENT </TD>	
        ELEMENT
		
			COMMENT INPUT SECTION:
			
				--None
			
			COMMENT OUTPUT SECTION:

			VAR carrot_graph_def.psGeometry, 		init = &PTU_psGeometry,  							ev = init
			
			VAR PTU_psGeometry,                     init = { x => &PTU_x, y => &PTU_y},       			ev = init
			
			VAR carrot_graph_def.psParam, 			init = &PTU_psParam, 								ev = init
			
			VAR PTU_psParam.stat,						init = PARAM_BAD,			ev = init
			
			VAR carrot_graph_def.asPtrSpec,				init = { others => { s32PtrShape => 1, ePenColor => BLACK, psShape => &PTU_PolygonsPsPolyInit_return } }, ev = init

			VAR carrot_graph_def.pCarrotGraph->asPtrSpec,		init = { others =>
			&												{ s32PtrShape => 1,
			&												 ePenColor => BLACK,
			&												 psShape => NIL 
			&												} 
			&												},
			&														ev = {others => 
			&															{ s32PtrShape => 1,
			&                                                             ePenColor => BLACK,
			&                                                             psShape => &PTU_PolygonsPsDuplicate_return 
			&                                                           } 
			&                                                           }
			
			VAR carrot_graph_def.pCarrotGraph->sOffSet,	init = 0,				ev = 500
			
			VAR carrot_graph_def.u16Format,				init = 0,							ev = init
			
			VAR carrot_graph_def.eFont,					init = E_NO_FONT,					ev = init
			
			VAR carrot_graph_def.eCGHV,					init = CG_VERTICAL,					ev = init	

			VAR carrot_graph_def.pCarrotGraph->sWidgetParm.s32Scaler,      init = 0,        ev = init				     

			VAR PTU_stat,						init = RANGE_ERROR ,						ev = PARAM_OK
			
			VAR PTU_table,						init = NIL,									ev = { x => &PTU_x, y => &PTU_y}

			VAR PTU_ps_poly,					init = {s16Pts=>1,others=>NIL},				ev = init
			
			VAR carrot_graph_def.sUpperLeft,			init = {u16X0=>1,u16Y0=>1},			ev = init

			VAR carrot_graph_def.sDialCenterOffset,		init = {u16X0=>1,u16Y0=>1},			ev = init
			
			VAR carrot_graph_def.associated_labels,		init = { others => 1 },				ev = init
			
			VAR carrot_graph_def.label,					init = 1,							ev = init

			VAR carrot_graph_def.psDisRegion,			init = &PTU_psDisRegion,			ev = init

         
            VAR PTU_ps_dis_region,              		init = {eRegionType => E_REGION_TYPE_GAUGE,
			&													sDisLocCtr => {others => 0},s32Width => 1,
			&													s32Height => 1, sDisLocO => {others => 0},
			&													eTXFont => E_NO_FONT,pu8Text => NIL},         
            & 												ev = {eRegionType => E_REGION_TYPE_GAUGE,
			&													sDisLocCtr => {others => 0},s32Width => 1,
			&													s32Height => 1, sDisLocO => {others => 0},
			&													eTXFont => E_NO_FONT,pu8Text => NIL}

			COMMENT INPUT OUTPUT SECTION:

				--None
			
			--Stub Calls:
			SIMUL
							
				STUB  CalculatePower (10.0,0)0.0
				STUB  LookupTableLookup (0)500
				STUB  PolygonsPsDuplicate 1..6 => ()&PTU_PolygonsPsDuplicate_return
				STUB  PolygonsPsPolyInit 1..6 => (1,0.0,0,0.0,0,0)&PTU_PolygonsPsPolyInit_return
				STUB  BinasGetWidth (0) 0
				STUB  WidgetsRedX()
			
			END SIMUL
			
		#CarrotGraphClear();

		-- Function called to create a Carrot Graph
		#CarrotGraphAllocat(&carrot_graph_def);
		
		-- Calling the Unit Under Test:
		#CarrotGraphDraw();
        END ELEMENT
		
	    ELEMENT
		
			COMMENT INPUT SECTION:
			
				--None
			
			COMMENT OUTPUT SECTION:

			VAR carrot_graph_def.psGeometry, 		init = &PTU_psGeometry,  							ev = init
			
			VAR PTU_psGeometry,                     init = { x => &PTU_x, y => &PTU_y},       			ev = init
			
			VAR carrot_graph_def.psParam, 			init = &PTU_psParam, 								ev = init
			
			VAR PTU_psParam.stat,						init = PARAM_BAD,			ev = init
			
			VAR carrot_graph_def.asPtrSpec,				init = { others => { s32PtrShape => 1, ePenColor => BLACK, psShape => &PTU_PolygonsPsPolyInit_return } }, ev = init

			VAR carrot_graph_def.pCarrotGraph->asPtrSpec,		init = { others =>
			&												{ s32PtrShape => 1,
			&												 ePenColor => BLACK,
			&												 psShape => NIL 
			&												} 
			&												},
			&														ev = {others => 
			&															{ s32PtrShape => 0,
			&                                                             ePenColor => BLACK,
			&                                                             psShape => &PTU_PolygonsPsDuplicate_return 
			&                                                           } 
			&                                                           }
			
			VAR carrot_graph_def.pCarrotGraph->sOffSet,	init = 0,				ev = 500
			
			VAR carrot_graph_def.u16Format,				init = 0,							ev = init
			
			VAR carrot_graph_def.eFont,					init = E_NO_FONT,					ev = init
			
			VAR carrot_graph_def.eCGHV,					init = CG_VERTICAL,					ev = init	

			VAR carrot_graph_def.pCarrotGraph->sWidgetParm.s32Scaler,      init = 0,        ev = init				     

			VAR PTU_stat,						init = RANGE_ERROR ,						ev = PARAM_OK
			
			VAR PTU_table,						init = NIL,									ev = { x => &PTU_x, y => &PTU_y}

			VAR PTU_ps_poly,					init = {s16Pts=>1,others=>NIL},				ev = init
			
			VAR carrot_graph_def.sUpperLeft,			init = {u16X0=>1,u16Y0=>1},			ev = init

			VAR carrot_graph_def.sDialCenterOffset,		init = {u16X0=>1,u16Y0=>1},			ev = init
			
			VAR carrot_graph_def.associated_labels,		init = { others => 1 },				ev = init
			
			VAR carrot_graph_def.label,					init = 1,							ev = init

			VAR carrot_graph_def.psDisRegion,			init = &PTU_psDisRegion,			ev = init

--			VAR PTU_psDisRegion,						init = {eRegionType => E_REGION_TYPE_GAUGE 
--			&													sDisLocCtr => {others => 0},s32Width => 1, 
--			&													s32Height => 1, sDisLocO => {others => 0},
--			&													eTXFont => E_NO_FONT,pu8Text => NIL},
--			&																				ev = init
--           
            VAR PTU_ps_dis_region,              		init = {eRegionType => E_REGION_TYPE_GAUGE,
			&													sDisLocCtr => {others => 0},s32Width => 1,
			&													s32Height => 1, sDisLocO => {others => 0},
			&													eTXFont => E_NO_FONT,pu8Text => NIL},         
            & 												ev = {eRegionType => E_REGION_TYPE_GAUGE,
			&													sDisLocCtr => {others => 0},s32Width => 1,
			&													s32Height => 1, sDisLocO => {others => 0},
			&													eTXFont => E_NO_FONT,pu8Text => NIL}
			
			COMMENT INPUT OUTPUT SECTION:

				--None
			
			--Stub Calls:
			SIMUL
			
			
				STUB  CalculatePower (10.0,0)0.0
				STUB  LookupTableLookup (0)500
				STUB  PolygonsPsDuplicate 1..6 => ()&PTU_PolygonsPsDuplicate_return
				STUB  PolygonsPsPolyInit 1..6 => (1,0.0,0,0.0,0,0)&PTU_PolygonsPsPolyInit_return
				STUB  BinasGetWidth (0) 0
				STUB  WidgetsRedX 1..2 => ()
			
			END SIMUL
			
		-- Function called to create a Carrot Graph
		
		#CarrotGraphAllocat(&carrot_graph_def);
		
		-- Calling the Unit Under Test:
		#CarrotGraphDraw();
        END ELEMENT

    END TEST -- TEST 4
	
	TEST 5
    FAMILY nominal
        COMMENT Test Description
        COMMENT <TD>	
		COMMENT
		COMMENT [hdudispfcarrotgraph-CarrotGraphDraw-DB-LLR-001]
		COMMENT The function shall loop carrot graph counter from ZERO to total number of carrot graph installed and do the following:
		COMMENT 1.Set pointer of carrot graph structure to address of a carrot graph with index carrot graph counter 
		COMMENT 2.Set draw dial flag to TRUE.
		COMMENT 3.Do the below if parameter stat of psParam of carrot_graph_def of pointer of carrot graph structure  is greater than or equal to PARAM_BAD.
		COMMENT - Loop from ZERO to ASSC_LABEL_INDX.
		COMMENT   - set draw dial as FALSE if the below conditions are true else break from loop.
		COMMENT    1. If parameter associated_labels of carrot_graph_def of pointer of carrot graph     structure is  not equal to ZERO 
		COMMENT    2.Loop from zero till number of carrot graphs installed and do following
		COMMENT a.Parameter associated_labels with loop index of carrot_graph_def of pointer of carrot graph     structure is equal to parameter label of carrot_graph_def of carrot graph        
		COMMENT with loop index and not of carrot graph with loop index is FALSE with index carrot graph counter,
		COMMENT b.Parameter stat of psParam of carrot_graph_def of carrot graph with loop index  of carrot graph is less than PARAM_BAD.
        COMMENT Equivalence Class 29,33,44
        COMMENT
        COMMENT [hdudispfcarrotgraph-CarrotGraphDraw-DB-LLR-002]
        COMMENT The function shall loop carrot graph counter from ZERO to total number of carrot graph installed and do the following:
        COMMENT Do the below if parameter stat of psParam of carrot_graph_def of pointer of carrot graph structure  is greater than or equal to PARAM_BAD.	
        COMMENT - Do the following when Null is not equal to psDisRegion of carrot_graph_def of pointer of carrot graph structure and draw dial is true.
        COMMENT 1.Call the function WidgetsRedX with parameters psDisRegion of carrot_graph_def  of pointer of carrot graph structure , address of psPolyRedX of  of pointer of carrot graph structure.
        COMMENT 2.Set carrot graph  with index carrot graph counter to TRUE, Otherwise does nothing.
        COMMENT Equivalence Class 39
        COMMENT
        COMMENT
        COMMENT </TD>	
	
        ELEMENT
		
			COMMENT INPUT SECTION:
			
				--None
			
			COMMENT OUTPUT SECTION:

			VAR carrot_graph_def.psGeometry, 		init = &PTU_psGeometry,  							ev = init
			
			VAR PTU_psGeometry,                     init = { x => &PTU_x, y => &PTU_y},       			ev = init
			
			VAR carrot_graph_def.psParam, 			init = &PTU_psParam, 								ev = init
			
			VAR PTU_psParam.stat,						init = PARAM_BAD,			ev = init
			
			VAR carrot_graph_def.asPtrSpec,				init = { others => { s32PtrShape => 1, ePenColor => BLACK, psShape => &PTU_PolygonsPsPolyInit_return } }, ev = init

			VAR carrot_graph_def.pCarrotGraph->asPtrSpec,		init = { others =>
			&												{ s32PtrShape => 1,
			&												 ePenColor => BLACK,
			&												 psShape => NIL 
			&												} 
			&												},
			&														ev = {others => 
			&															{ s32PtrShape => 0,
			&                                                             ePenColor => BLACK,
			&                                                             psShape => &PTU_PolygonsPsDuplicate_return 
			&                                                           } 
			&                                                           }
			
			VAR carrot_graph_def.pCarrotGraph->sOffSet,	init = 0,				ev = 500
			
			VAR carrot_graph_def.u16Format,				init = 0,							ev = init
			
			VAR carrot_graph_def.eFont,					init = E_NO_FONT,					ev = init
			
			VAR carrot_graph_def.eCGHV,					init = CG_VERTICAL,					ev = init	

			VAR carrot_graph_def.pCarrotGraph->sWidgetParm.s32Scaler,      init = 0,        ev = init				     

			VAR PTU_stat,						init = RANGE_ERROR ,						ev = PARAM_OK
			
			VAR PTU_table,						init = NIL,									ev = { x => &PTU_x, y => &PTU_y}

			VAR PTU_ps_poly,					init = {s16Pts=>1,others=>NIL},				ev = init
			
			VAR carrot_graph_def.sUpperLeft,			init = {u16X0=>1,u16Y0=>1},			ev = init

			VAR carrot_graph_def.sDialCenterOffset,		init = {u16X0=>1,u16Y0=>1},			ev = init
			
			VAR carrot_graph_def.associated_labels,		init = { others => 0 },				ev = init
			
			VAR carrot_graph_def.label,					init = 1,							ev = init

			VAR carrot_graph_def.psDisRegion,			init = NULL,			ev = init
			
			COMMENT INPUT OUTPUT SECTION:

				--None
			
			--Stub Calls:
			SIMUL
						
				STUB  CalculatePower 1..5 => (10.0,0)0.0
				STUB  LookupTableLookup 1..5 => (0)500
				STUB  PolygonsPsDuplicate 1..30 => ()&PTU_PolygonsPsDuplicate_return
				STUB  PolygonsPsPolyInit 1..30 => (1,0.0,0,0.0,0,0)&PTU_PolygonsPsPolyInit_return
				STUB  BinasGetWidth 1..5 => (0) 0
			
			END SIMUL
			
		-- Function called to create a Carrot Graph
		#for(PTU_i=0;PTU_i<5;PTU_i++)
		#CarrotGraphAllocat(&carrot_graph_def);
		
		-- Calling the Unit Under Test:
		#CarrotGraphDraw();
        END ELEMENT
		
    END TEST -- TEST 5

	TEST 6
    FAMILY nominal
	--316 for loop covered for 0th loop
        COMMENT Test Description
        COMMENT <TD>	
		COMMENT
		COMMENT [hdudispfcarrotgraph-CarrotGraphDraw-DB-LLR-001]
		COMMENT The function shall loop carrot graph counter from ZERO to total number of carrot graph installed and do the following: (0 loop)
        COMMENT Equivalence Class none
        COMMENT
        COMMENT
        COMMENT </TD>		
        ELEMENT
		
			COMMENT INPUT SECTION:
			
				--None
			
			COMMENT OUTPUT SECTION:

				--None
			
			COMMENT INPUT OUTPUT SECTION:

				--None
			
			--Stub Calls:
			SIMUL
				
				STUB WidgetsRedX 1..7 => ()
			
			END SIMUL
		
		-- Calling the Unit Under Test:
		#CarrotGraphDraw();
        END ELEMENT
		
    END TEST -- TEST 6
	
	TEST 7
    FAMILY nominal
        COMMENT Test Description
        COMMENT <TD>	
		COMMENT
		COMMENT [hdudispfcarrotgraph-CarrotGraphDraw-DB-LLR-001]
		COMMENT The function shall loop carrot graph counter from ZERO to total number of carrot graph installed and do the following:
		COMMENT 1.Set pointer of carrot graph structure to address of a carrot graph with index carrot graph counter 
		COMMENT 2.Set draw dial flag to TRUE.
		COMMENT 3.Do nothing when the if parameter stat of psParam of carrot_graph_def of pointer of carrot graph structure  is lessthan PARAM_BAD.
        COMMENT Equivalence Class 30
        COMMENT
        COMMENT [hdudispfcarrotgraph-CarrotGraphDraw-DB-LLR-003]
        COMMENT The function shall loop carrot graph counter from ZERO to total number of carrot graph installed and do the following:
        COMMENT (0 loop)
        COMMENT Equivalence Class none
        COMMENT
        COMMENT </TD>		

        ELEMENT
		
			COMMENT INPUT SECTION:
			
				--None
			
			COMMENT OUTPUT SECTION:

			VAR carrot_graph_def.psGeometry, 		init = &PTU_psGeometry,  							ev = init
			
			VAR PTU_psGeometry,                     init = { x => &PTU_x, y => &PTU_y},       			ev = init
			
			VAR carrot_graph_def.psParam, 			init = &PTU_psParam, 								ev = init
			
			VAR PTU_psParam.stat,						init = PARAM_OK,			ev = init
			
			VAR carrot_graph_def.asPtrSpec,				init = { others => { s32PtrShape => 0, ePenColor => BLACK, psShape => NIL } }, ev = init
			
			VAR carrot_graph_def.pCarrotGraph->sOffSet,	init = 0,				ev = 500
			
			VAR carrot_graph_def.u16Format,				init = 0,							ev = init
			
			VAR carrot_graph_def.eFont,					init = E_NO_FONT,					ev = init
			
			VAR carrot_graph_def.eCGHV,					init = CG_VERTICAL,					ev = init	

			VAR carrot_graph_def.pCarrotGraph->sWidgetParm.s32Scaler,      init = 0,        ev = init				     

			VAR PTU_stat,						init = RANGE_ERROR ,						ev = PARAM_OK
			
			VAR PTU_table,						init = NIL,									ev = { x => &PTU_x, y => &PTU_y}

			VAR PTU_ps_poly,					init = {s16Pts=>1,others=>NIL},				ev = init
			
			VAR carrot_graph_def.sUpperLeft,			init = {u16X0=>1,u16Y0=>1},			ev = init

			VAR carrot_graph_def.sDialCenterOffset,		init = {u16X0=>1,u16Y0=>1},			ev = init
			
			VAR carrot_graph_def.associated_labels,		init = { others => 1 },				ev = init
			
			VAR carrot_graph_def.label,					init = 1,							ev = init

			VAR carrot_graph_def.psDisRegion,			init = NULL,			ev = init
			
			COMMENT INPUT OUTPUT SECTION:

				--None
			
			--Stub Calls:
			SIMUL
			
				STUB  CalculatePower (10.0,0)0.0
				STUB  LookupTableLookup (0)500
				STUB  BinasGetWidth (0) 0
				STUB  PolygonDrawPoly 1..30 => (BLACK)
			
			END SIMUL
			
		-- Function called to create a Carrot Graph
		
		#CarrotGraphAllocat(&carrot_graph_def);
		
		-- Calling the Unit Under Test:
		#CarrotGraphDraw();
        END ELEMENT
		
    END TEST -- TEST 7

	TEST 8
    FAMILY nominal
        COMMENT Test Description
        COMMENT <TD>	
		COMMENT
		COMMENT [hdudispfcarrotgraph-CarrotGraphDraw-DB-LLR-001]
		COMMENT The function shall loop carrot graph counter from ZERO to total number of carrot graph installed and do the following:
		COMMENT 1.Set pointer of carrot graph structure to address of a carrot graph with index carrot graph counter 
		COMMENT 2.Set draw dial flag to TRUE.
		COMMENT 3.Do nothing when the if parameter stat of psParam of carrot_graph_def of pointer of carrot graph structure  is lessthan PARAM_BAD.
        COMMENT Equivalence Class 30
        COMMENT
        COMMENT [hdudispfcarrotgraph-CarrotGraphDraw-DB-LLR-003]
        COMMENT The function shall loop carrot graph counter from ZERO to total number of carrot graph installed and do the following:
        COMMENT The function shall loop carrot graph counter from ZERO to total number of carrot graph installed and do the following:
        COMMENT - If stat of psParam of carrot_graph_def of pointer of carrot graph  structure is  less than to PARAM_BAD.
        COMMENT 	1. Set carrot graph FALSE with index carrot graph counter
        COMMENT 	2.  Set pointer spec to asPtrSpec of pointer to structure carrot graph.	
        COMMENT 	3.Do the below till psShape of pointer spec is valid 	
        COMMENT                         a.Call the function PolygonDrawPoly with parameters of psShape of pointer spec, ePencolor of pointer spec.
        COMMENT 		b.Increment the Pointer spec.
        COMMENT Equivalence Class 30 (1 loop)
        COMMENT
        COMMENT
        COMMENT </TD>
	
        ELEMENT
		
			COMMENT INPUT SECTION:
			
				--None
			
			COMMENT OUTPUT SECTION:

			VAR carrot_graph_def.psGeometry, 		init = &PTU_psGeometry,  							ev = init
			
			VAR PTU_psGeometry,                     init = { x => &PTU_x, y => &PTU_y},       			ev = init
			
			VAR carrot_graph_def.psParam, 			init = &PTU_psParam, 								ev = init
			
			VAR PTU_psParam.stat,						init = PARAM_OK,			ev = init
			
            VAR carrot_graph_def.asPtrSpec,                              init = { 0 => { s32PtrShape => 1, ePenColor => BLACK, psShape => &PTU_PolygonsPsPolyInit_return_1 },
            &                                                                   1 => { s32PtrShape => 1, ePenColor => BLACK, psShape => &PTU_PolygonsPsPolyInit_return_1 },
            &                                                                   others => { s32PtrShape => 0, ePenColor => BLACK, psShape => &PTU_PolygonsPsPolyInit_return_1 } },
            &                                                                                   ev = {0 => { s32PtrShape => 1, ePenColor => BLACK, psShape => &PTU_PolygonsPsPolyInit_return },
            &                                                                                         1 => { s32PtrShape => 1, ePenColor => BLACK, psShape => &PTU_PolygonsPsPolyInit_return },
            &                                                                                         others => { s32PtrShape => 0, ePenColor => BLACK, psShape => &PTU_PolygonsPsPolyInit_return_1 } }
			
			VAR carrot_graph_def.pCarrotGraph->sOffSet,	init = 0,				ev = 500
			
			VAR carrot_graph_def.u16Format,				init = 0,							ev = init
			
			VAR carrot_graph_def.eFont,					init = E_NO_FONT,					ev = init
			
			VAR carrot_graph_def.eCGHV,					init = CG_VERTICAL,					ev = init	

			VAR carrot_graph_def.pCarrotGraph->sWidgetParm.s32Scaler,      init = 0,        ev = init				     

			VAR PTU_stat,						init = RANGE_ERROR ,						ev = PARAM_OK
			
			VAR PTU_table,						init = NIL,									ev = { x => &PTU_x, y => &PTU_y}

			VAR PTU_ps_poly,					init = {s16Pts=>1,others=>NIL},				ev = init
			
			VAR carrot_graph_def.sUpperLeft,			init = {u16X0=>1,u16Y0=>1},			ev = init

			VAR carrot_graph_def.sDialCenterOffset,		init = {u16X0=>1,u16Y0=>1},			ev = init
			
			VAR carrot_graph_def.associated_labels,		init = { others => 1 },				ev = init
			
			VAR carrot_graph_def.label,					init = 1,							ev = init

			VAR carrot_graph_def.psDisRegion,			init = NULL,						ev = init

            VAR ps_poly_PTU,                            init = NIL,         				ev = &PTU_PolygonsPsDuplicate_return
			
			COMMENT INPUT OUTPUT SECTION:

				--None
			
			--Stub Calls:
			SIMUL
			
				STUB  CalculatePower (10.0,0)0.0
				STUB  LookupTableLookup (0)500
				STUB  BinasGetWidth (0) 0
				STUB  PolygonDrawPoly 1..32 => (BLACK)
				STUB  PolygonsPsDuplicate 1..2 => ()&PTU_PolygonsPsDuplicate_return
				STUB  PolygonsPsPolyInit 1..2 => (1,0.0,0,0.0,0,0)&PTU_PolygonsPsPolyInit_return
			
			END SIMUL
			
		-- Function called to create a Carrot Graph
		
		#CarrotGraphAllocat(&carrot_graph_def);
		
		-- Calling the Unit Under Test:
		#CarrotGraphDraw();
        END ELEMENT
		
    END TEST -- TEST 8

	TEST 9
    FAMILY nominal
        COMMENT Test Description
        COMMENT <TD>	
		COMMENT
		COMMENT [hdudispfcarrotgraph-CarrotGraphDraw-DB-LLR-001]
		COMMENT The function shall loop carrot graph counter from ZERO to total number of carrot graph installed and do the following:
		COMMENT 1.Set pointer of carrot graph structure to address of a carrot graph with index carrot graph counter 
		COMMENT 2.Set draw dial flag to TRUE.
		COMMENT 3.Do nothing when the if parameter stat of psParam of carrot_graph_def of pointer of carrot graph structure  is lessthan PARAM_BAD.
        COMMENT Equivalence Class 30
        COMMENT
        COMMENT [hdudispfcarrotgraph-CarrotGraphDraw-DB-LLR-003]
        COMMENT The function shall loop carrot graph counter from ZERO to total number of carrot graph installed and do the following:
        COMMENT The function shall loop carrot graph counter from ZERO to total number of carrot graph installed and do the following:
        COMMENT - If stat of psParam of carrot_graph_def of pointer of carrot graph  structure is  less than to PARAM_BAD.
        COMMENT 	1. Set carrot graph FALSE with index carrot graph counter
        COMMENT 	2.  Set pointer spec to asPtrSpec of pointer to structure carrot graph.	
        COMMENT 	3.Do the below till psShape of pointer spec is valid 	
        COMMENT                         a.Call the function PolygonDrawPoly with parameters of psShape of pointer spec, ePencolor of pointer spec.
        COMMENT 		b.Increment the Pointer spec.
        COMMENT Equivalence Class 30,42 (2 loop)
        COMMENT
        COMMENT
        COMMENT </TD>	

        ELEMENT
		
			COMMENT INPUT SECTION:
			
				--None
			
			COMMENT OUTPUT SECTION:

			VAR carrot_graph_def.psGeometry, 		init = &PTU_psGeometry,  							ev = init
			
			VAR PTU_psGeometry,                     init = { x => &PTU_x, y => &PTU_y},       			ev = init
			
			VAR carrot_graph_def.psParam, 			init = &PTU_psParam, 								ev = init
			
			VAR PTU_psParam.stat,						init = PARAM_OK,			ev = init
			
            VAR carrot_graph_def.asPtrSpec,                              init = { 0 => { s32PtrShape => 1, ePenColor => BLACK, psShape => &PTU_PolygonsPsPolyInit_return_1 },
            &                                                                   1 => { s32PtrShape => 1, ePenColor => BLACK, psShape => &PTU_PolygonsPsPolyInit_return_1 },
            &                                                                   others => { s32PtrShape => 0, ePenColor => BLACK, psShape => &PTU_PolygonsPsPolyInit_return_1 } },
            &                                                                                   ev = {0 => { s32PtrShape => 1, ePenColor => BLACK, psShape => &PTU_PolygonsPsPolyInit_return },
            &                                                                                         1 => { s32PtrShape => 1, ePenColor => BLACK, psShape => &PTU_PolygonsPsPolyInit_return },
            &                                                                                         others => { s32PtrShape => 0, ePenColor => BLACK, psShape => &PTU_PolygonsPsPolyInit_return_1 } }
			
			VAR carrot_graph_def.pCarrotGraph->sOffSet,	init = 0,				ev = 500
			
			VAR carrot_graph_def.u16Format,				init = 0,							ev = init
			
			VAR carrot_graph_def.eFont,					init = E_NO_FONT,					ev = init
			
			VAR carrot_graph_def.eCGHV,					init = CG_VERTICAL,					ev = init	

			VAR carrot_graph_def.pCarrotGraph->sWidgetParm.s32Scaler,      init = 0,        ev = init				     

			VAR PTU_stat,						init = RANGE_ERROR ,						ev = PARAM_OK
			
			VAR PTU_table,						init = NIL,									ev = { x => &PTU_x, y => &PTU_y}

			--VAR PTU_ps_poly,					init = {s16Pts=>1,others=>NIL},				ev = init
			
			VAR carrot_graph_def.sUpperLeft,			init = {u16X0=>1,u16Y0=>1},			ev = init

			VAR carrot_graph_def.sDialCenterOffset,		init = {u16X0=>1,u16Y0=>1},			ev = init
			
			VAR carrot_graph_def.associated_labels,		init = { others => 1 },				ev = init
			
			VAR carrot_graph_def.label,					init = 1,							ev = init

			VAR carrot_graph_def.psDisRegion,			init = NULL,						ev = init

			VAR ps_poly_PTU,                          	init = NIL,     ev = &PTU_PolygonsPsDuplicate_return
			
			COMMENT INPUT OUTPUT SECTION:

				--None
			
			--Stub Calls:
			SIMUL
			
				STUB  CalculatePower (10.0,0)0.0
				STUB  LookupTableLookup (0)500
				STUB  BinasGetWidth (0) 0
				STUB PolygonsPsPolyInit 1 => (1,0,0,0,0,0) &PTU_PolygonsPsPolyInit_return
				STUB PolygonsPsPolyInit 2 => (1,0,0,0,0,0) &PTU_PolygonsPsPolyInit_return
				STUB PolygonsPsDuplicate 1..2 => () &PTU_PolygonsPsDuplicate_return
				STUB PolygonDrawPoly 1..34 => (BLACK)
			
			END SIMUL
			
		-- Function called to create a Carrot Graph
		#CarrotGraphAllocat(&carrot_graph_def);
		
		-- Calling the Unit Under Test:
		#CarrotGraphDraw();
        END ELEMENT
		
    END TEST -- TEST 9
	
	TEST 10
    FAMILY nominal
        COMMENT Test Description
        COMMENT <TD>	
		COMMENT
		COMMENT [hdudispfcarrotgraph-CarrotGraphDraw-DB-LLR-001]
		COMMENT The function shall loop carrot graph counter from ZERO to total number of carrot graph installed and do the following:
		COMMENT 1.Set pointer of carrot graph structure to address of a carrot graph with index carrot graph counter 
		COMMENT 2.Set draw dial flag to TRUE.
		COMMENT 3.Do nothing when the if parameter stat of psParam of carrot_graph_def of pointer of carrot graph structure  is lessthan PARAM_BAD.
        COMMENT Equivalence Class 30
        COMMENT
        COMMENT [hdudispfcarrotgraph-CarrotGraphDraw-DB-LLR-003]
        COMMENT The function shall loop carrot graph counter from ZERO to total number of carrot graph installed and do the following:
        COMMENT The function shall loop carrot graph counter from ZERO to total number of carrot graph installed and do the following:
        COMMENT - If stat of psParam of carrot_graph_def of pointer of carrot graph  structure is  less than to PARAM_BAD.
        COMMENT 	1. Set carrot graph FALSE with index carrot graph counter
        COMMENT 	2.  Set pointer spec to asPtrSpec of pointer to structure carrot graph.	
        COMMENT 	3.Do the below till psShape of pointer spec is valid 	
        COMMENT                         a.Call the function PolygonDrawPoly with parameters of psShape of pointer spec, ePencolor of pointer spec.
        COMMENT 		b.Increment the Pointer spec.
        COMMENT (2 loop)
        COMMENT Equivalence Class 30,42
        COMMENT
        COMMENT </TD>	

        ELEMENT
		
			COMMENT INPUT SECTION:
			
				--None
			
			COMMENT OUTPUT SECTION:

			VAR carrot_graph_def.psGeometry, 		init = &PTU_psGeometry,  							ev = init
			
			VAR PTU_psGeometry,                     init = { x => &PTU_x, y => &PTU_y},       			ev = init
			
			VAR carrot_graph_def.psParam, 			init = &PTU_psParam, 								ev = init
			
			VAR PTU_psParam.stat,						init = PARAM_OK,			ev = init
			
            VAR carrot_graph_def.asPtrSpec,                              init = { 0 => { s32PtrShape => 1, ePenColor => BLACK, psShape => &PTU_PolygonsPsPolyInit_return_1 },
            &                                                                   others => { s32PtrShape => 0, ePenColor => BLACK, psShape => &PTU_PolygonsPsPolyInit_return_1 } },
            &                                                                                   ev = {0 => { s32PtrShape => 1, ePenColor => BLACK, psShape => &PTU_PolygonsPsPolyInit_return },
            &                                                                                         others => { s32PtrShape => 0, ePenColor => BLACK, psShape => &PTU_PolygonsPsPolyInit_return_1 } }
			
			VAR carrot_graph_def.pCarrotGraph->sOffSet,	init = 0,				ev = 500
			
			VAR carrot_graph_def.u16Format,				init = 0,							ev = init
			
			VAR carrot_graph_def.eFont,					init = E_NO_FONT,					ev = init
			
			VAR carrot_graph_def.eCGHV,					init = CG_VERTICAL,					ev = init	

			VAR carrot_graph_def.pCarrotGraph->sWidgetParm.s32Scaler,      init = 0,        ev = init				     

			VAR PTU_stat,						init = RANGE_ERROR ,						ev = PARAM_OK
			
			VAR PTU_table,						init = NIL,									ev = { x => &PTU_x, y => &PTU_y}

			--VAR PTU_ps_poly,					init = {s16Pts=>1,others=>NIL},				ev = init
			
			VAR carrot_graph_def.sUpperLeft,			init = {u16X0=>1,u16Y0=>1},			ev = init

			VAR carrot_graph_def.sDialCenterOffset,		init = {u16X0=>1,u16Y0=>1},			ev = init
			
			VAR carrot_graph_def.associated_labels,		init = { others => 1 },				ev = init
			
			VAR carrot_graph_def.label,					init = 1,							ev = init

			VAR carrot_graph_def.psDisRegion,			init = NULL,						ev = init

			VAR ps_poly_PTU,                          	init = NIL,     ev = &PTU_PolygonsPsDuplicate_return
			
			COMMENT INPUT OUTPUT SECTION:

				--None
			
			--Stub Calls:
			SIMUL
			
				STUB  CalculatePower (10.0,0)0.0
				STUB  LookupTableLookup (0)500
				STUB  BinasGetWidth (0) 0
				STUB PolygonsPsPolyInit 1 => (1,0,0,0,0,0) &PTU_PolygonsPsPolyInit_return
				--STUB PolygonsPsPolyInit 2 => (1,0,0,0,0,0) &PTU_PolygonsPsPolyInit_return
				STUB PolygonsPsDuplicate 1 => () &PTU_PolygonsPsDuplicate_return
				STUB PolygonDrawPoly 1..35 => (BLACK)
			
			END SIMUL
			
		-- Function called to create a Carrot Graph
		#CarrotGraphAllocat(&carrot_graph_def);
		
		-- Calling the Unit Under Test:
		#CarrotGraphDraw();
        END ELEMENT
		
    END TEST -- TEST 10
	

END SERVICE -- CarrotGraphDraw









