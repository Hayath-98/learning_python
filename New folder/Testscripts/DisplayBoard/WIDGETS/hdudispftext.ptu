HEADER hdudispftext,Source Code Ver :1.3,TestScript Ver : 1.1
--------------------------------------------------------------------------------
-- Author Name         : Vinothini M
--
-- File Name           : hdudispftext.ptu
--
-- Test Creation Date  : 17.10.2017
--
-- Tested Functions    : TextDrawChar
--                     : DispStringAt
--                     : TextDispString
--                     : TextAllocat
--                     : TextDraw
--                     : TextUpdate
--                     : TextClear
--
--
-- Version History             :
--
--  TEST-VERSION        TEST-DATE       TESTER NAME           MODIFICATIONS
--  ------------        ---------       -----------           -------------
--      1.1             17.10.2017      Vinothini M         Created the ptu file.
--      
--------------------------------------------------------------------------------
--
-- TESTED FILE INCLUDE DIRECTIVES 
--
--------------------------------------------------------------------------------

#/*============================================================================*/
#/* Module specific includes*/
#/*============================================================================*/
##include "hdudispfdma2d.h"    /* contains the common defines and functions prototypes for dma2d */
##include "hdudispffonts.h"    /*Contains different font information*/
##include "hdudispfrterror.h"    /* Stub routine for run time errors.*/
##include "hdudispftext.h"     /*  Routines which maintain text display and updates */
##include "hdudispfwidgets.h"  /* Contains routines for widget params */
##include "hdudispfconfig.h"   /* contains page and color config information */
##include "hdudispfforeground.h"  /* contains the routines for foreground layer of the display */
##include "hdulibbasictypes.h"   /* Standard basic data type definitions */
--------------------------------------------------------------------------------
--
-- TESTED FILE DECLARATIONS 
--
--------------------------------------------------------------------------------

-- Declarations of the global variables of the tested file
--------------------------------------------------------------------------------

-- Declaration of temporary variables  

    -- temporary variable used in execution of test
    # T_UINT8 PTU_tmp;
    
    -- temporary structure declared for receiving the address
    # T_BFC_FONT PTU_FontsGetFont;

    -- temporary structure declared for passing the address
    # T_TEXT PTU_pps_handle_add;
    # T_UINT8 PTU_pData8;

    -- Created to verify the 1st parameter of RterrWidget
    # char PTU_pc_file_in_1[200],PTU_pc_file_out_1[200];
    # T_UINT8 PTU_temp;

    -- Created to verify the 3rd parameter of RterrWidget
   # char PTU_pc_message_in_1[200],PTU_pc_message_out_1[200];

    -- macro created to hold the source file path
    ##define PTU_SOURCE_PATH "D:\\Vinothini_HDU\\temp\\src\\hdudispftext.c"

--------------------------------------------------------------------------------

BEGIN

    COMMENT Author name      : Vinothini M
    COMMENT
    COMMENT File name        : hdudispftext.ptu
    COMMENT
    COMMENT Tested functions : TextDrawChar
    COMMENT                  : DispStringAt
    COMMENT                  : TextDispString
    COMMENT                  : TextAllocat
    COMMENT                  : TextDraw
    COMMENT                  : TextUpdate
    COMMENT                  : TextClear
    COMMENT
    COMMENT Assumptions and Constraints
    COMMENT <AC>
    COMMENT Assumption(s):
    COMMENT None
    COMMENT
    COMMENT Constraint(s):
    COMMENT 
    COMMENT 1. The macro 'PTU_SOURCE_PATH' has to be changed, 
    COMMENT    since it is the source file path in the local setup.
    COMMENT
    COMMENT</AC>

    COMMENT Equivalence Class Description
    COMMENT <ECD>
    COMMENT
    COMMENT Valid Class(es)
    COMMENT 
    COMMENT Class 1
    COMMENT In function 'TextAllocat', the function 'RterrWidget' is called. 
    COMMENT 
    COMMENT Class 2
    COMMENT In function 'TextAllocat', Text_objects_installed is equal to MAX_TEXT_OBJECTS.
    COMMENT 
    COMMENT Class 3
    COMMENT In function 'TextAllocat', Text_objects_installed is not equal to MAX_TEXT_OBJECTS.
    COMMENT 
    COMMENT Class 4
    COMMENT In function 'TextDraw', the function 'TextDispString' is called.
    COMMENT 
    COMMENT Class 5
    COMMENT In function 'TextDispString', the function 'FontsGetFont' is called.
    COMMENT 
    COMMENT Class 6
    COMMENT In function 'TextDispString', the function 'DispStringAt' is called.
    COMMENT 
    COMMENT Class 7
    COMMENT In function 'TextDispString', the function 'FontsGetStringWidth' is called.
    COMMENT 
    COMMENT Class 8
    COMMENT In function 'TextDispString', the function 'FontsGetFontHeight' is called.
    COMMENT     
    COMMENT Class 9
    COMMENT In function 'TextDispString', e_tx_align is equal to ALIGN_CENTER.
    COMMENT     
    COMMENT Class 10
    COMMENT In function 'TextDispString', e_tx_align is not equal to ALIGN_CENTER.
    COMMENT 
    COMMENT Class 11
    COMMENT In function 'TextDispString', e_tx_align is equal to ALIGN_CENTER_LEFT.
    COMMENT 
    COMMENT Class 12
    COMMENT In function 'TextDispString', e_tx_align is not equal to ALIGN_CENTER_LEFT.
    COMMENT 
    COMMENT Class 13
    COMMENT In function 'DispStringAt', the function 'EGetFlashState' is called.
    COMMENT 
    COMMENT Class 14
    COMMENT In function 'DispStringAt', e_tx_flash is equal to TX_FLASH.
    COMMENT 
    COMMENT Class 15
    COMMENT In function 'DispStringAt', e_tx_flash is not equal to TX_FLASH.
    COMMENT 
    COMMENT Class 16
    COMMENT In function 'DispStringAt', the function 'TextDrawChar' is called.
    COMMENT 
    COMMENT Class 17
    COMMENT In function 'TextDrawChar', the function 'Pu8GetCharBitMap' is called.
    COMMENT 
    COMMENT Class 18
    COMMENT In function 'TextDrawChar', the function 'PsGetCharInfo' is called.
    COMMENT 
    COMMENT Class 19
    COMMENT In function 'TextDrawChar', the function 'Dma2dDrawChar' is called.
    COMMENT 
    COMMENT Class 20
    COMMENT In function 'TextDrawChar', E_orientation is equal to E_LAND_SCAPE.
    COMMENT 
    COMMENT Class 21
    COMMENT In function 'TextDrawChar', E_orientation is not equal to E_LAND_SCAPE.
    COMMENT 
    COMMENT Class 22
    COMMENT In function 'TextDrawChar', e_color is equal to CAS_RED.
    COMMENT
    COMMENT Class 23
    COMMENT In function 'TextDrawChar', e_color is not equal to CAS_RED .
    COMMENT 
    COMMENT Class 24
    COMMENT In function 'TextDrawChar', e_color is equal to CAS_REV_RED2 .
    COMMENT
    COMMENT Class 25
    COMMENT In function 'TextDrawChar', e_color is not equal to CAS_REV_RED2 .
    COMMENT
    COMMENT Class 26
    COMMENT In function 'TextDrawChar', E_orientation is equal to E_PORTRAIT.
    COMMENT 
    COMMENT Class 27
    COMMENT In function 'TextDrawChar', E_orientation is not equal to E_PORTRAIT.
    COMMENT 
    COMMENT Class 28
    COMMENT In function 'DispStringAt', e_txv is not equal to V_REVERSE.
    COMMENT 
    COMMENT Class 29
    COMMENT In function 'DispStringAt', e_txv is equal to V_REVERSE.
    COMMENT 
    COMMENT Class 30
    COMMENT In function 'DispStringAt', return value of EGetFlashState is equal to FLASH_OFF.
    COMMENT 
    COMMENT Class 31
    COMMENT In function 'DispStringAt', return value of EGetFlashState is not equal to FLASH_OFF.
    COMMENT 
    COMMENT Class 32
    COMMENT In function 'TextDraw', u16_text_ctr is lesser than Text objects installed.
    COMMENT     
    COMMENT Class 33
    COMMENT In function 'TextDraw', u16_text_ctr is greater than or equal to Text objects installed.
    COMMENT 
    COMMENT Class 37
    COMMENT In function 'DispStringAt', the function 'VHadFlash' is called.
    COMMENT
    COMMENT Class 38
    COMMENT In function 'TextDrawChar',result of bitwise AND of u8_char and EXTRACT_8_BIT is equal to TRUE.
    COMMENT 
    COMMENT Class 39
    COMMENT In function 'TextDrawChar',result of bitwise AND of u8_char and EXTRACT_8_BIT is equal to FALSE.
    COMMENT
    COMMENT Class 40
    COMMENT In function 'DispStringAt', u8_achar is equal to ZERO.
    COMMENT 
    COMMENT Class 41
    COMMENT In function 'DispStringAt', u8_achar is not equal to ZERO.
    COMMENT 
    COMMENT Class 42
    COMMENT In function 'DispStringAt', character is equal to newline character.
    COMMENT 
    COMMENT Class 43
    COMMENT In function 'DispStringAt', character is equal to Carriage Return character.
    COMMENT 
    COMMENT Class 44
    COMMENT In function 'DispStringAt', character is not equal to newline character.
    COMMENT 
    COMMENT Class 45
    COMMENT In function 'DispStringAt', character is not equal to Carriage Return character.
    COMMENT 
    COMMENT
    COMMENT Invalid Class(es)
    COMMENT     
    COMMENT Class 34
    COMMENT In function 'TextDrawChar', p_font is equal to NULL.
    COMMENT 
    COMMENT Class 35
    COMMENT In function 'TextDispString', pc_string is equal to NULL.
    COMMENT 
    COMMENT Class 36
    COMMENT In function 'TextAllocat', pps_handle_add and pu8_string is equal to NULL.
    COMMENT 
    COMMENT </ECD>
--------------------------------------------------------------------------------
--
-- STUB DECLARATIONS OF THE TESTED OR INTEGRATED UNITS
--
--------------------------------------------------------------------------------
SIMUL


    DEFINE STUB hdudispftext_c

        -- temporary structure declared for receiving and accessing the address
        #T_UINT8 PTU_IN_pu8_string,PTU_OUT_pu8_string,PTU_Pu8GetCharBitMap;
        #T_UINT8 PTU_Dma2dDrawChar,PTU_write_loc;
        #T_BFC_FONT *PTU_IN_Pu8GetCharBitMap,*PTU_IN_PsGetCharInfo;
        #void PTU_Vp_fgfb2; 
        #T_BFC_CHARINFO PTU_PsGetCharInfo;
        #void RterrWidget(char _no pc_file[200], T_INT8 _in s32_line_number, char _no pc_message[200])
        #{
        # 
        #  PTU_temp = 0;
        #  while(pc_file[PTU_temp]!= ZERO)
        #  {
        #    PTU_pc_file_in_1[PTU_temp]= pc_file[PTU_temp];
        #    PTU_temp = PTU_temp+1;
        #  }
        #    PTU_pc_file_in_1[PTU_temp]= ZERO;
        #
        #  PTU_temp = 0;
        #  while(pc_message[PTU_temp]!= ZERO)
        #  {
        #    PTU_pc_message_in_1[PTU_temp]= pc_message[PTU_temp];
        #    PTU_temp = PTU_temp+1;
        #  }
        #    PTU_pc_message_in_1[PTU_temp]= ZERO;
        #
        #  PTU_temp = 0;
        #  while(PTU_pc_file_out_1[PTU_temp]!= ZERO)
        #  {
        #   pc_file[PTU_temp]       = PTU_pc_file_out_1[PTU_temp];
        #   PTU_temp = PTU_temp+1;
        #  }
        #   pc_file[PTU_temp]= ZERO;
        #
        #  PTU_temp = 0;
        #  while(PTU_pc_message_out_1[PTU_temp]!= ZERO)
        #  {
        #    pc_message[PTU_temp] = PTU_pc_message_out_1[PTU_temp];
        #    PTU_temp = PTU_temp+1;
        #  }
        #   pc_message[PTU_temp]= ZERO;
        #}
        #T_INT16 FontsGetFontHeight(T_ETXFONT _in e_tx_font); 
        --To verify the parameter pu8_string, it is made as _no
        #T_INT16 FontsGetStringWidth(T_UINT8 _no pu8_string, T_ETXFONT _in e_tx_font)
        #{
        #   PTU_IN_pu8_string =(T_UINT8 *)pu8_string;
        #   pu8_string = (T_UINT8 *)PTU_OUT_pu8_string;
        #}
        #T_BFC_FONT* FontsGetFont(T_ETXFONT _in e_tx_font);
        #T_EFLASHSTATE EGetFlashState(void); 
        #void VHadFlash(void); 
        --To verify the parameter character_data and write_loc, it is made as _no
        #void Dma2dDrawChar(void _no *character_data, void _no *write_loc, T_UINT32 _in u32_width, T_UINT32 _in u32_height, T_UINT16 _in e_color)
        #{
        #  PTU_Dma2dDrawChar = character_data;
        #  PTU_write_loc = write_loc;
        #}
        #T_INT16 S16_panel_width; 
        #T_INT16 S16_panel_height; 
        #void *Vp_fgfb2; 
        #T_ELANDSCAPEORPORTRIAT E_orientation; 
        --To verify the parameter ps_font, it is made as _no
        # const  T_BFC_CHARINFO* PsGetCharInfo(T_BFC_FONT _no ps_font, T_UINT8 _in u8_char)
        #{
        #   PTU_IN_PsGetCharInfo = ps_font;
        #   ps_font = &PTU_FontsGetFont;
        #}
        --To verify the parameter ps_font, it is made as _no
        # const  T_UINT8* Pu8GetCharBitMap(T_BFC_FONT _no *ps_font, T_UINT8 _in u8_char) 
        #{
        #   PTU_IN_Pu8GetCharBitMap = ps_font;
        #   ps_font = &PTU_FontsGetFont;
        #}
        # volatile  T_INT32 Itm_rx_buffer; 
    END DEFINE
    
ELSE_SIMUL

        -- No action defined as of now if the module is not simulated

END SIMUL
--------------------------------------------------------------------------------
--
-- ENVIRONMENTS DECLARATIONS
--
--------------------------------------------------------------------------------
--IF HOST

-- No special things that have to be done on the host to run the test.

--ELSE

-- No action defined for the targetexecution as of now

--END IF

--------------------------------------------------------------------------------
-- TESTED FILE ENVIRONNEMENT
--------------------------------------------------------------------------------

--Environment of the hdudispftext.c

--ENVIRONMENT ENV_hdudispftext_c

    --None

--END ENVIRONMENT -- ENV_hdudispftext_c

--------------------------------------------------------------------------------
--
-- SERVICES DECLARATIONS
--
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
-- Declaration of the service TextDrawChar
--------------------------------------------------------------------------------
SERVICE TextDrawChar
SERVICE_TYPE extern

    -- Tested service parameters declarations
    #T_UINT8 u8_char;
    #T_UINT16 u16_dis_x;
    #T_UINT16 u16_dis_y;
    #T_BFC_FONT p_font;
    #T_EPENCOLOR e_color;
    -- By function returned type declaration
    #T_UINT16 ret_TextDrawChar;
    
    -- temporary structure declared for passing the address
    #T_BFC_FONT_PROP PTU_pProp;

    ENVIRONMENT ENV_TextDrawChar

    VAR u8_char,            init = 0,       ev = init

    VAR u16_dis_x,          init = 0,       ev = init

    VAR u16_dis_y,          init = 0,       ev = init

    STRUCTURE p_font,       init = { FontType => 0, FontHeight => 0, Baseline => 0, Reversed => 0, p_var_type => { pProp =>&PTU_pProp } }, 
                                          & ev = init

    VAR e_color,            init = BLACK,   ev = init

    VAR ret_TextDrawChar,   init = 0,       ev = init

    END ENVIRONMENT -- ENV_TextDrawChar

    USE ENV_TextDrawChar

TEST 1
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT This test case is exercised for minimum value of function parameters
    COMMENT [hdudispftext-TextDrawChar-DB-LLR-001]
    COMMENT The Function TextDrawChar sets cbit map to return value of function Pu8GetCharBitMap,
    COMMENT width of the return value of function PsGetCharInfo and
    COMMENT height to FontHeight of p_font
    COMMENT
    COMMENT Equivalence Class 17,18
    COMMENT
    COMMENT [hdudispftext-TextDrawChar-DB-LLR-003]
    COMMENT The Function TextDrawChar sets pixel dot address to
    COMMENT Vp_fgfb2 plus u16_dis_x(0) multiply with TWO plus u16_dis_y(0) multiply with TWO multiply S16_panel_width(-32768),
    COMMENT when E_orientation is E_LAND_SCAPE_PORTRAIT_UNKNOWN
    COMMENT
    COMMENT Equivalence Class 27
    COMMENT
    COMMENT [hdudispftext-TextDrawChar-DB-LLR-010]
    COMMENT The Function TextDrawChar calls function Dma2dDrawChar,
    COMMENT when E_orientation is E_LAND_SCAPE_PORTRAIT_UNKNOWN and e_color is BLACK  
    COMMENT
    COMMENT Equivalence Class 19,21,23,25
    COMMENT
    COMMENT [hdudispftext-TextDrawChar-DB-LLR-011]
    COMMENT The Function TextDrawChar returns width.
    COMMENT
    COMMENT Equivalence Class None
    COMMENT 
    COMMENT      
    COMMENT </TD> 
 
        ELEMENT
        COMMENT INPUT SECTION:

            VAR u8_char,                    init = 0,                                ev = init
            VAR u16_dis_x,                  init = 0,                                ev = init
            VAR u16_dis_y,                  init = 0,                                ev = init
            STRUCTURE p_font,               init = { FontType => 0, FontHeight => 0, Baseline => 0, Reversed => 0, p_var_type => { pProp =>&PTU_pProp} },  
                                                                    &                ev = init
            VAR e_color,                    init = BLACK,                            ev = init
            VAR ret_TextDrawChar,           init = 0,                                ev = init
            STRUCTURE PTU_PsGetCharInfo,    init = { Width => 0, DataSize => 0, p_var_type => { pData8 =>&PTU_pData8 } },
                                                                    &                ev = init
            VAR Vp_fgfb2,                   init = &PTU_Vp_fgfb2,                    ev = init
            VAR S16_panel_width,            init = -32768,                           ev = init
            VAR E_orientation,              init = E_LAND_SCAPE_PORTRAIT_UNKNOWN,    ev = init

        COMMENT OUTPUT SECTION:
            VAR PTU_IN_Pu8GetCharBitMap,    init =  &PTU_IN_Pu8GetCharBitMap,        ev = &p_font
            VAR PTU_IN_PsGetCharInfo,       init =  &PTU_IN_PsGetCharInfo,           ev = &p_font
            VAR PTU_Dma2dDrawChar,          init = &PTU_Dma2dDrawChar,               ev = &PTU_Pu8GetCharBitMap 
            VAR PTU_write_loc,              init = (T_UINT16 *) (Vp_fgfb2),          ev = init
        
        COMMENT INPUT/OUTPUT SECTION:
            -- None
            
            --Stub Calls:
        SIMUL
            STUB Pu8GetCharBitMap(0) &PTU_Pu8GetCharBitMap
            STUB PsGetCharInfo(0)&PTU_PsGetCharInfo
            STUB Dma2dDrawChar(0,0,BLACK)
        END SIMUL
        
        -- Calling the Unit Under Test        
            #ret_TextDrawChar = TextDrawChar(u8_char, u16_dis_x, u16_dis_y, &p_font, e_color);
        END ELEMENT

END TEST -- TEST 1

TEST 2
FAMILY nominal
    
    COMMENT Test Description
    COMMENT <TD> 
    COMMENT This test case is exercised for maximum value  of function parameters
    COMMENT [hdudispftext-TextDrawChar-DB-LLR-001]
    COMMENT The Function TextDrawChar sets cbit map to return value of function Pu8GetCharBitMap,
    COMMENT width of the return value of function PsGetCharInfo and 
    COMMENT height to FontHeight of p_font
    COMMENT
    COMMENT Equivalence Class 17,18
    COMMENT
    COMMENT [hdudispftext-TextDrawChar-DB-LLR-002]
    COMMENT The Function TextDrawChar sets u16_dis_x to u16_dis_x(65535) plus width and
    COMMENT pixel dot address to Vp_fgfb2 plus S16_panel_height(0) minus u16_dis_x(65535) multiply with S16_panel_width(32767) plus u16_dis_y(65535) multiply with TWO,
    COMMENT When E_orientation is equal to E_PORTRAIT.
    COMMENT
    COMMENT Equivalence Class 26
    COMMENT
    COMMENT [hdudispftext-TextDrawChar-DB-LLR-010]
    COMMENT The Function TextDrawChar Calls function Dma2dDrawChar,
    COMMENT when E_orientation is E_PORTRAIT and e_color is ORANGE+1.
    COMMENT
    COMMENT Equivalence Class 19,21,23,25
    COMMENT
    COMMENT [hdudispftext-TextDrawChar-DB-LLR-011]
    COMMENT The Function TextDrawChar returns width.
    COMMENT 
    COMMENT Equivalence Class None
    COMMENT 
    COMMENT      
    COMMENT </TD>

        ELEMENT
        COMMENT INPUT SECTION:

            VAR u8_char,                    init = 255,                                 ev = init
            VAR u16_dis_x,                  init = 65535,                               ev = init
            VAR u16_dis_y,                  init = 65535,                               ev = init
            STRUCTURE p_font,               init = { FontType => 4294967295, FontHeight => 65535, Baseline => 65535, Reversed => 4294967295, p_var_type => { pProp =>&PTU_pProp} }, 
                                                                        &               ev = init
            VAR e_color,                    init = ORANGE+1,                            ev = init
            STRUCTURE PTU_PsGetCharInfo,    init = { Width => 65535, DataSize => 0, p_var_type => { pData8 =>&PTU_pData8 } },
                                                                        &               ev = init
            VAR Vp_fgfb2,                   init = &PTU_Vp_fgfb2,                       ev = init
            VAR S16_panel_width,            init = 32767,                               ev = init
            VAR S16_panel_height,           init = 0,                                   ev = init
            VAR E_orientation,              init = E_PORTRAIT,                          ev = init

        COMMENT OUTPUT SECTION:
            VAR ret_TextDrawChar,           init = 0,                                   ev = 65535
            VAR PTU_IN_Pu8GetCharBitMap,    init = &PTU_IN_Pu8GetCharBitMap,            ev = &p_font
            VAR PTU_IN_PsGetCharInfo,       init = &PTU_IN_PsGetCharInfo,               ev = &p_font
            VAR PTU_Dma2dDrawChar,          init = &PTU_Dma2dDrawChar,                  ev = &PTU_Pu8GetCharBitMap 
            VAR PTU_write_loc,              init = (T_UINT16 *) (Vp_fgfb2+262138),      ev = init
        
        COMMENT INPUT/OUTPUT SECTION:
            -- None
            
            --Stub Calls:
        SIMUL
            STUB Pu8GetCharBitMap(255) &PTU_Pu8GetCharBitMap
            STUB PsGetCharInfo(255)&PTU_PsGetCharInfo
            STUB Dma2dDrawChar(65535,65535,ORANGE+1)
        END SIMUL
        
            -- Calling the Unit Under Test        
            #ret_TextDrawChar = TextDrawChar(u8_char, u16_dis_x, u16_dis_y, &p_font, e_color);
        END ELEMENT

END TEST -- TEST 2

TEST 3
FAMILY nominal
    
    COMMENT Test Description
    COMMENT <TD> 
    COMMENT This test case is exercised for nominal value of function parameters
    COMMENT [hdudispftext-TextDrawChar-DB-LLR-001]
    COMMENT The Function TextDrawChar sets cbit map to return value of function Pu8GetCharBitMap,
    COMMENT width of the return value of function PsGetCharInfo and 
    COMMENT height to FontHeight of p_font
    COMMENT
    COMMENT Equivalence Class 17,18
    COMMENT
    COMMENT [hdudispftext-TextDrawChar-DB-LLR-003]
    COMMENT The Function TextDrawChar sets pixel dot address to
    COMMENT Vp_fgfb2 plus u16_dis_x(20) multiply with TWO plus u16_dis_y(20) multiply with TWO multiply S16_panel_width(65535),
    COMMENT when E_orientation is E_LAND_SCAPE
    COMMENT
    COMMENT Equivalence Class 27
    COMMENT
    COMMENT [hdudispftext-TextDrawChar-DB-LLR-004]
    COMMENT The Function TextDrawChar calls function Dma2dDrawChar,
    COMMENT when E_orientation is E_LAND_SCAPE.
    COMMENT
    COMMENT Equivalence Class 19,20
    COMMENT
    COMMENT [hdudispftext-TextDrawChar-DB-LLR-007]
    COMMENT The Function TextDrawChar calls function Dma2dDrawChar,
    COMMENT when E_orientation is E_LAND_SCAPE and e_color is ORANGE.
    COMMENT
    COMMENT Equivalence Class 19,20,23,25
    COMMENT
    COMMENT [hdudispftext-TextDrawChar-DB-LLR-011]
    COMMENT The Function TextDrawChar returns width.
    COMMENT
    COMMENT Equivalence Class None
    COMMENT      
    COMMENT </TD>   

        ELEMENT
        COMMENT INPUT SECTION:

            VAR u8_char,                    init = 205,                     ev = init
            VAR u16_dis_x,                  init = 20,                      ev = init
            VAR u16_dis_y,                  init = 20,                      ev = init
            STRUCTURE p_font,               init = { FontType => 985, FontHeight => 50, Baseline => 655, Reversed => 955, p_var_type => { pProp =>&PTU_pProp} },        ev = init
            VAR e_color,                    init = ORANGE,                  ev = init
            STRUCTURE PTU_PsGetCharInfo,    init = { Width => 40, DataSize => 0, p_var_type => { pData8 =>&PTU_pData8 } }, 
                                                                        &   ev = init
            VAR Vp_fgfb2,                   init = &PTU_Vp_fgfb2,           ev = init
            VAR S16_panel_width,            init = 65535,                   ev = init
            VAR S16_panel_height,           init = -32768,                  ev = init
            VAR E_orientation,              init = E_LAND_SCAPE,            ev = init

        COMMENT OUTPUT SECTION:
            VAR ret_TextDrawChar,           init = 0,                           ev = 40
            VAR PTU_IN_Pu8GetCharBitMap,    init =  &PTU_IN_Pu8GetCharBitMap,   ev = &p_font
            VAR PTU_IN_PsGetCharInfo,       init =  &PTU_IN_PsGetCharInfo,      ev = &p_font
            VAR PTU_Dma2dDrawChar,          init = &PTU_Dma2dDrawChar,          ev = &PTU_Pu8GetCharBitMap 
            VAR PTU_write_loc,              init = (T_UINT16 *) Vp_fgfb2 ,      ev = init
         
        COMMENT INPUT/OUTPUT SECTION:
        -- None
        
            --Stub Calls:
        SIMUL
            STUB Pu8GetCharBitMap(205) &PTU_Pu8GetCharBitMap
            STUB PsGetCharInfo(205)&PTU_PsGetCharInfo
            STUB Dma2dDrawChar(40,50,ORANGE)
            STUB Dma2dDrawChar(40,50,ORANGE)
        END SIMUL
        
        -- Calling the Unit Under Test        
            #ret_TextDrawChar = TextDrawChar(u8_char, u16_dis_x, u16_dis_y, &p_font, e_color);
        END ELEMENT

END TEST -- TEST 3
        
TEST 4
FAMILY nominal
    
    COMMENT Test Description
    COMMENT <TD> 
    COMMENT This test case is exercised for nominal value of function parameters
    COMMENT [hdudispftext-TextDrawChar-DB-LLR-001]
    COMMENT The Function TextDrawChar sets cbit map to return value of function Pu8GetCharBitMap,
    COMMENT width of the return value of function PsGetCharInfo and 
    COMMENT height to FontHeight of p_font
    COMMENT
    COMMENT Equivalence Class 17,18
    COMMENT
    COMMENT [hdudispftext-TextDrawChar-DB-LLR-003]
    COMMENT The Function TextDrawChar sets pixel dot address to
    COMMENT Vp_fgfb2 plus u16_dis_x(20) multiply with TWO plus u16_dis_y(20) multiply with TWO multiply S16_panel_width(65535),
    COMMENT when E_orientation is E_LAND_SCAPE
    COMMENT
    COMMENT Equivalence Class 27
    COMMENT
    COMMENT [hdudispftext-TextDrawChar-DB-LLR-004]
    COMMENT The Function TextDrawChar calls function Dma2dDrawChar,
    COMMENT when E_orientation is E_LAND_SCAPE.
    COMMENT
    COMMENT Equivalence Class 19,20
    COMMENT
    COMMENT [hdudispftext-TextDrawChar-DB-LLR-005]
    COMMENT The Function TextDrawChar calls function Dma2dDrawChar,
    COMMENT sets cbit map to return value of function Pu8GetCharBitMap and
    COMMENT calls function Dma2dDrawChar when E_orientation is E_LAND_SCAPE and
    COMMENT e_color is CAS_RED and result of bitwise AND of u8_char and EXTRACT_8_BIT is equal to TRUE.
    COMMENT
    COMMENT Equivalence Class 19,17,20,22,38
    COMMENT
    COMMENT [hdudispftext-TextDrawChar-DB-LLR-011]
    COMMENT Function returns width.
    COMMENT
    COMMENT Equivalence Class None
    COMMENT      
    COMMENT </TD>

        ELEMENT
        COMMENT INPUT SECTION:

            VAR u8_char,                    init = 128,                         ev = init
            VAR u16_dis_x,                  init = 20,                          ev = init
            VAR u16_dis_y,                  init = 20,                          ev = init
            STRUCTURE p_font,               init = { FontType => 985, FontHeight => 50, Baseline => 655, Reversed => 955, p_var_type => { pProp =>&PTU_pProp} },        ev = init
            VAR e_color,                    init = CAS_RED,                     ev = init
            STRUCTURE PTU_PsGetCharInfo,    init = { Width => 40, DataSize => 0, p_var_type => { pData8 =>&PTU_pData8 } },  ev=init
            VAR Vp_fgfb2,                   init = &PTU_Vp_fgfb2,               ev = init
            VAR S16_panel_width,            init = 65535,                       ev = init
            VAR S16_panel_height,           init = 0,                           ev = init
            VAR E_orientation,              init = E_LAND_SCAPE,                ev = init

        COMMENT OUTPUT SECTION:
            VAR ret_TextDrawChar,           init = 0,                           ev = 40
            VAR PTU_IN_Pu8GetCharBitMap,    init =  &PTU_IN_Pu8GetCharBitMap,   ev = &p_font
            VAR PTU_IN_PsGetCharInfo,       init =  &PTU_IN_PsGetCharInfo,      ev = &p_font
            VAR PTU_Dma2dDrawChar,          init = &PTU_Dma2dDrawChar,          ev = &PTU_Pu8GetCharBitMap 
            VAR PTU_write_loc,              init = (T_UINT16 *) Vp_fgfb2 ,      ev = init
        
        COMMENT INPUT/OUTPUT SECTION:
            -- None
            
            --Stub Calls:
        SIMUL
            STUB Pu8GetCharBitMap(128) &PTU_Pu8GetCharBitMap
            STUB Pu8GetCharBitMap(0) &PTU_Pu8GetCharBitMap
            STUB PsGetCharInfo(128)&PTU_PsGetCharInfo
            STUB Dma2dDrawChar(40,50,CAS_RED)
            STUB Dma2dDrawChar(40,50,CAS_REV_RED)
            STUB Dma2dDrawChar(40,50,WHITE)
        END SIMUL
        
        -- Calling the Unit Under Test        
            #ret_TextDrawChar = TextDrawChar(u8_char, u16_dis_x, u16_dis_y, &p_font, e_color);
        END ELEMENT

END TEST -- TEST 4

TEST 5
FAMILY nominal
    
    COMMENT Test Description
    COMMENT <TD> 
    COMMENT This test case is exercised for nominal value of function parameters
    COMMENT [hdudispftext-TextDrawChar-DB-LLR-001]
    COMMENT The Function TextDrawChar sets cbit map to return value of function Pu8GetCharBitMap,
    COMMENT width of the return value of function PsGetCharInfo and
    COMMENT height to FontHeight of p_font.
    COMMENT
    COMMENT Equivalence Class 17,18
    COMMENT
    COMMENT [hdudispftext-TextDrawChar-DB-LLR-003]
    COMMENT The Function TextDrawChar sets pixel dot address to
    COMMENT Vp_fgfb2 plus u16_dis_x(20) multiply with TWO plus u16_dis_y(20) multiply with TWO multiply S16_panel_width(65535),
    COMMENT when E_orientation is E_LAND_SCAPE
    COMMENT
    COMMENT Equivalence Class 27
    COMMENT
    COMMENT [hdudispftext-TextDrawChar-DB-LLR-004]
    COMMENT The Function TextDrawChar calls function Dma2dDrawChar,
    COMMENT when E_orientation is E_LAND_SCAPE.
    COMMENT
    COMMENT Equivalence Class 19,20
    COMMENT
    COMMENT [hdudispftext-TextDrawChar-DB-LLR-007]
    COMMENT The Function TextDrawChar calls function Dma2dDrawChar,when E_orientation is E_LAND_SCAPE 
    COMMENT and e_color is CAS_RED and result of bitwise AND of u8_char and EXTRACT_8_BIT is equal to FALSE.
    COMMENT
    COMMENT Equivalence Class 19,20,22,39
    COMMENT
    COMMENT [hdudispftext-TextDrawChar-DB-LLR-011]
    COMMENT The Function TextDrawChar returns width.
    COMMENT
    COMMENT Equivalence Class None
    COMMENT      
    COMMENT </TD>

        ELEMENT
        COMMENT INPUT SECTION:

            VAR u8_char,                    init = 110,                         ev = init
            VAR u16_dis_x,                  init = 20,                          ev = init
            VAR u16_dis_y,                  init = 20,                          ev = init
            STRUCTURE p_font,               init = { FontType => 985, FontHeight => 50, Baseline => 655, Reversed => 955, p_var_type => { pProp =>&PTU_pProp} },        ev = init
            VAR e_color,                    init = CAS_RED,                     ev = init
            STRUCTURE PTU_PsGetCharInfo,    init = { Width => 40, DataSize => 0, p_var_type => { pData8 =>&PTU_pData8 } },  ev=init
            VAR Vp_fgfb2,                   init = &PTU_Vp_fgfb2,               ev = init
            VAR S16_panel_width,            init = 65535,                       ev = init
            VAR S16_panel_height,           init = 0,                           ev = init
            VAR E_orientation,              init = E_LAND_SCAPE,                ev = init

        COMMENT OUTPUT SECTION:
            VAR ret_TextDrawChar,           init = 0,                           ev = 40
            VAR PTU_IN_Pu8GetCharBitMap,    init =  &PTU_IN_Pu8GetCharBitMap,   ev = &p_font
            VAR PTU_IN_PsGetCharInfo,       init =  &PTU_IN_PsGetCharInfo,      ev = &p_font
            VAR PTU_Dma2dDrawChar,          init = &PTU_Dma2dDrawChar,          ev= &PTU_Pu8GetCharBitMap 
            VAR PTU_write_loc,              init = (T_UINT16 *) Vp_fgfb2 ,      ev= init
                    
        COMMENT INPUT/OUTPUT SECTION:
            -- None
            
            --Stub Calls:
        SIMUL
            STUB Pu8GetCharBitMap(110) &PTU_Pu8GetCharBitMap
            STUB PsGetCharInfo(110)&PTU_PsGetCharInfo
            STUB Dma2dDrawChar(40,50,CAS_RED)
            STUB Dma2dDrawChar(40,50,CAS_RED)
        END SIMUL
        
        -- Calling the Unit Under Test        
            #ret_TextDrawChar = TextDrawChar(u8_char, u16_dis_x, u16_dis_y, &p_font, e_color);
        END ELEMENT

END TEST -- TEST 5

        
TEST 6
FAMILY nominal
    
    COMMENT Test Description
    COMMENT <TD> 
    COMMENT This test case is exercised for nominal value of function parameters
    COMMENT [hdudispftext-TextDrawChar-DB-LLR-001]
    COMMENT The Function TextDrawChar sets cbit map to return value of function Pu8GetCharBitMap,
    COMMENT width of the return value of function PsGetCharInfo and
    COMMENT height to FontHeight of p_font.
    COMMENT
    COMMENT Equivalence Class 17,18
    COMMENt
    COMMENT [hdudispftext-TextDrawChar-DB-LLR-003]
    COMMENT The Function TextDrawChar sets pixel dot address to
    COMMENT Vp_fgfb2 plus u16_dis_x(20) multiply with TWO plus u16_dis_y(20) multiply with TWO multiply S16_panel_width(65535),
    COMMENT when E_orientation is E_LAND_SCAPE
    COMMENT
    COMMENT Equivalence Class 27
    COMMENT
    COMMENT [hdudispftext-TextDrawChar-DB-LLR-004]
    COMMENT The Function TextDrawChar calls function Dma2dDrawChar,
    COMMENT when E_orientation is E_LAND_SCAPE.
    COMMENT
    COMMENT Equivalence Class 19,20
    COMMENT
    COMMENT [hdudispftext-TextDrawChar-DB-LLR-006]
    COMMENT The Function TextDrawChar calls function Dma2dDrawChar,
    COMMENT cbit map to return value of function Pu8GetCharBitMap and
    COMMENT calls function Dma2dDrawChar,
    COMMENT when E_orientation is E_LAND_SCAPE and e_color is CAS_REV_RED2.
    COMMENT
    COMMENT Equivalence Class 19,17,20,24
    COMMENT
    COMMENT [hdudispftext-TextDrawChar-DB-LLR-011]
    COMMENT The Function TextDrawChar returns width.
    COMMENT
    COMMENT Equivalence Class None
    COMMENT      
    COMMENT </TD>

        ELEMENT
        COMMENT INPUT SECTION:

            VAR u8_char,                    init = 128,                         ev = init
            VAR u16_dis_x,                  init = 20,                          ev = init
            VAR u16_dis_y,                  init = 20,                          ev = init
            STRUCTURE p_font,               init = { FontType => 985, FontHeight => 50, Baseline => 655, Reversed => 955, p_var_type => { pProp =>&PTU_pProp} },        ev = init
            VAR e_color,                    init = CAS_REV_RED2,                ev = init
            STRUCTURE PTU_PsGetCharInfo,    init = { Width => 40, DataSize => 0, p_var_type => { pData8 =>&PTU_pData8 } },  ev=init
            VAR Vp_fgfb2,                   init = &PTU_Vp_fgfb2,               ev = init
            VAR S16_panel_width,            init = 65535,                       ev = init
            VAR S16_panel_height,           init = 0,                           ev = init
            VAR E_orientation,              init = E_LAND_SCAPE,                ev = init

        COMMENT OUTPUT SECTION:
            VAR ret_TextDrawChar,           init = 0,                           ev = 40
            VAR PTU_IN_Pu8GetCharBitMap,    init =  &PTU_IN_Pu8GetCharBitMap,   ev = &p_font
            VAR PTU_IN_PsGetCharInfo,       init =  &PTU_IN_PsGetCharInfo,      ev = &p_font
            VAR PTU_Dma2dDrawChar,          init = &PTU_Dma2dDrawChar,          ev= &PTU_Pu8GetCharBitMap 
            VAR PTU_write_loc,              init = (T_UINT16 *) Vp_fgfb2 ,      ev= init
        
        COMMENT INPUT/OUTPUT SECTION:
            -- None
            
            --Stub Calls:
        SIMUL
            STUB Pu8GetCharBitMap(128) &PTU_Pu8GetCharBitMap
            STUB Pu8GetCharBitMap(0) &PTU_Pu8GetCharBitMap
            STUB PsGetCharInfo(128)&PTU_PsGetCharInfo
            STUB Dma2dDrawChar(40,50,CAS_REV_RED2)
            STUB Dma2dDrawChar(40,50,CAS_REV_RED)
            STUB Dma2dDrawChar(40,50,WHITE)
        END SIMUL
        
        -- Calling the Unit Under Test        
            #ret_TextDrawChar = TextDrawChar(u8_char, u16_dis_x, u16_dis_y, &p_font, e_color);
        END ELEMENT

END TEST -- TEST 6

TEST 7
FAMILY nominal
    
    COMMENT Test Description
    COMMENT <TD> 
    COMMENT This test case is exercised for nominal value of function parameters
    COMMENT [hdudispftext-TextDrawChar-DB-LLR-001]
    COMMENT The Function TextDrawChar sets cbit map to return value of function Pu8GetCharBitMap,
    COMMENT width of the return value of function PsGetCharInfo and
    COMMENT height to FontHeight of p_font.
    COMMENT
    COMMENT Equivalence Class 17,18
    COMMENT
    COMMENT [hdudispftext-TextDrawChar-DB-LLR-002]
    COMMENT The Function TextDrawChar sets u16_dis_x to u16_dis_x(20) plus width and
    COMMENT pixel dot address to Vp_fgfb2 plus S16_panel_height(60) minus u16_dis_x(20) multiply with S16_panel_width(65535) plus u16_dis_y(20) multiply with TWO,
    COMMENT When E_orientation is equal to E_PORTRAIT.
    COMMENT
    COMMENT Equivalence Class 26
    COMMENT
    COMMENT [hdudispftext-TextDrawChar-DB-LLR-008]
    COMMENT The Function TextDrawChar calls function Dma2dDrawChar,
    COMMENT cbit map to return value of function Pu8GetCharBitMap and
    COMMENT calls function Dma2dDrawChar,
    COMMENT when E_orientation is E_PORTRAIT and e_color is CAS_RED and result of bitwise AND of u8_char and EXTRACT_8_BIT is equal to TRUE.
    COMMENT
    COMMENT Equivalence Class 19,17,21,22,38
    COMMENT
    COMMENT [hdudispftext-TextDrawChar-DB-LLR-011]
    COMMENT The Function TextDrawChar returns width.
    COMMENT
    COMMENT Equivalence Class None
    COMMENT      
    COMMENT </TD>

        ELEMENT
        COMMENT INPUT SECTION:

            VAR u8_char,                    init = 128,                             ev = init
            VAR u16_dis_x,                  init = 20,                              ev = init
            VAR u16_dis_y,                  init = 20,                              ev = init
            STRUCTURE p_font,               init = { FontType => 985, FontHeight => 50, Baseline => 655, Reversed => 955, p_var_type => { pProp =>&PTU_pProp} },        ev = init
            VAR e_color,                    init = CAS_RED,                         ev = init
            STRUCTURE PTU_PsGetCharInfo,    init = { Width => 40, DataSize => 0, p_var_type => { pData8 =>&PTU_pData8 } },  ev=init
            VAR Vp_fgfb2,                   init = &PTU_Vp_fgfb2,                   ev = init
            VAR S16_panel_width,            init = 65535,                           ev = init
            VAR S16_panel_height,           init = -32768,                          ev = init
            VAR E_orientation,              init = E_PORTRAIT,                      ev = init

        COMMENT OUTPUT SECTION:
            VAR ret_TextDrawChar,           init = 0,                               ev = 40
            VAR PTU_IN_Pu8GetCharBitMap,    init =  &PTU_IN_Pu8GetCharBitMap,       ev = &p_font
            VAR PTU_IN_PsGetCharInfo,       init =  &PTU_IN_PsGetCharInfo,          ev = &p_font
            VAR PTU_Dma2dDrawChar,          init = &PTU_Dma2dDrawChar,              ev= &PTU_Pu8GetCharBitMap 
            VAR PTU_write_loc,              init = (T_UINT16 *) (Vp_fgfb2+65696) ,  ev= init
        
        COMMENT INPUT/OUTPUT SECTION:
                -- None
            
            --Stub Calls:
        SIMUL
            STUB Pu8GetCharBitMap(128) &PTU_Pu8GetCharBitMap
            STUB Pu8GetCharBitMap(0) &PTU_Pu8GetCharBitMap
            STUB PsGetCharInfo(128)&PTU_PsGetCharInfo
            STUB Dma2dDrawChar(50,40,CAS_REV_RED)
            STUB Dma2dDrawChar(50,40,WHITE)
        END SIMUL
        
        -- Calling the Unit Under Test        
            #ret_TextDrawChar = TextDrawChar(u8_char, u16_dis_x, u16_dis_y, &p_font, e_color);
        END ELEMENT

END TEST -- TEST 7

        
TEST 8
FAMILY nominal
    
    COMMENT Test Description
    COMMENT <TD> 
    COMMENT This test case is exercised for nominal value of function parameters
    COMMENT [hdudispftext-TextDrawChar-DB-LLR-001]
    COMMENT The Function TextDrawChar sets cbit map to return value of function Pu8GetCharBitMap,
    COMMENT width of the return value of function PsGetCharInfo and
    COMMENT height to FontHeight of p_font.
    COMMENT
    COMMENT Equivalence Class 17,18
    COMMENT
    COMMENT [hdudispftext-TextDrawChar-DB-LLR-002]
    COMMENT The Function TextDrawChar sets u16_dis_x to u16_dis_x(20) plus width and
    COMMENT pixel dot address to Vp_fgfb2 plus S16_panel_height(60) minus u16_dis_x(20) multiply with S16_panel_width(65535) plus u16_dis_y(20) multiply with TWO,
    COMMENT When E_orientation is equal to E_PORTRAIT.
    COMMENT
    COMMENT Equivalence Class 26
    COMMENT
    COMMENT [hdudispftext-TextDrawChar-DB-LLR-009]
    COMMENT The Function TextDrawChar calls function Dma2dDrawChar,
    COMMENT cbit map to return value of function Pu8GetCharBitMap and 
    COMMENT calls function Dma2dDrawChar,
    COMMENT when E_orientation is E_PORTRAIT and e_color is CAS_REV_RED2.
    COMMENT
    COMMENT Equivalence Class 19,17,21,24
    COMMENT
    COMMENT [hdudispftext-TextDrawChar-DB-LLR-011]
    COMMENT The Function TextDrawChar returns width.
    COMMENT
    COMMENT Equivalence Class None
    COMMENT      
    COMMENT </TD>

        ELEMENT
        COMMENT INPUT SECTION:

            VAR u8_char,                    init = 128,                             ev = init
            VAR u16_dis_x,                  init = 20,                              ev = init
            VAR u16_dis_y,                  init = 20,                              ev = init
            STRUCTURE p_font,               init = { FontType => 985, FontHeight => 50, Baseline => 655, Reversed => 955, p_var_type => { pProp =>&PTU_pProp} },        ev = init
            VAR e_color,                    init = CAS_REV_RED2,                    ev = init
            STRUCTURE PTU_PsGetCharInfo,    init = { Width => 40, DataSize => 0, p_var_type => { pData8 =>&PTU_pData8 } },  ev=init
            VAR Vp_fgfb2,                   init = &PTU_Vp_fgfb2,                   ev = init
            VAR S16_panel_width,            init = 65535,                           ev = init
            VAR S16_panel_height,           init = 60,                              ev = init
            VAR E_orientation,              init = E_PORTRAIT,                      ev = init

        COMMENT OUTPUT SECTION:
            VAR ret_TextDrawChar,           init = 0,                               ev = 40
            VAR PTU_IN_Pu8GetCharBitMap,    init =  &PTU_IN_Pu8GetCharBitMap,       ev = &p_font
            VAR PTU_IN_PsGetCharInfo,       init =  &PTU_IN_PsGetCharInfo,          ev = &p_font
            VAR PTU_Dma2dDrawChar,          init = &PTU_Dma2dDrawChar,              ev= &PTU_Pu8GetCharBitMap 
            VAR PTU_write_loc,              init = (T_UINT16 *) (Vp_fgfb2+40) ,     ev= init
       
        COMMENT INPUT/OUTPUT SECTION:
            -- None
            
            --Stub Calls:
        SIMUL
            STUB Pu8GetCharBitMap(128) &PTU_Pu8GetCharBitMap
            STUB Pu8GetCharBitMap(0) &PTU_Pu8GetCharBitMap
            STUB PsGetCharInfo(128)&PTU_PsGetCharInfo
            STUB Dma2dDrawChar(50,40,CAS_REV_RED)
            STUB Dma2dDrawChar(50,40,WHITE)
        END SIMUL
        
        -- Calling the Unit Under Test        
            #ret_TextDrawChar = TextDrawChar(u8_char, u16_dis_x, u16_dis_y, &p_font, e_color);
        END ELEMENT

END TEST -- TEST 8

TEST 9
FAMILY nominal
    
    COMMENT Test Description
    COMMENT <TD> 
    COMMENT This test case is exercised for nominal value of function parameters
    COMMENT [hdudispftext-TextDrawChar-DB-LLR-001]
    COMMENT The Function TextDrawChar sets cbit map to return value of function Pu8GetCharBitMap,
    COMMENT width of the return value of function PsGetCharInfo and
    COMMENT height to FontHeight of p_font
    COMMENT
    COMMENT Equivalence Class 17,18
    COMMENT
    COMMENT [hdudispftext-TextDrawChar-DB-LLR-002]
    COMMENT The Function TextDrawChar sets u16_dis_x to u16_dis_x(20) plus width and
    COMMENT pixel dot address to Vp_fgfb2 plus S16_panel_height(32767) minus u16_dis_x(20) multiply with S16_panel_width(65535) plus u16_dis_y(20) multiply with TWO,
    COMMENT When E_orientation is equal to E_PORTRAIT.
    COMMENT
    COMMENT Equivalence Class 26
    COMMENT
    COMMENT [hdudispftext-TextDrawChar-DB-LLR-010]
    COMMENT The Function TextDrawChar Calls function Dma2dDrawChar,
    COMMENT when E_orientation is E_PORTRAIT and e_color is CAS_RED and result of bitwise AND of u8_char and EXTRACT_8_BIT is equal to FALSE.
    COMMENT
    COMMENT Equivalence Class 19,21,22,39
    COMMENT
    COMMENT [hdudispftext-TextDrawChar-DB-LLR-011]
    COMMENT The Function TextDrawChar returns width.
    COMMENT
    COMMENT Equivalence Class None
    COMMENT      
    COMMENT </TD>

        ELEMENT
        COMMENT INPUT SECTION:

            VAR u8_char,                    init = 110,                                 ev = init
            VAR u16_dis_x,                  init = 20,                                  ev = init
            VAR u16_dis_y,                  init = 20,                                  ev = init
            STRUCTURE p_font,               init = { FontType => 985, FontHeight => 50, Baseline => 655, Reversed => 955, p_var_type => { pProp =>&PTU_pProp} },        ev = init
            VAR e_color,                    init = CAS_RED,                             ev = init
            STRUCTURE PTU_PsGetCharInfo,    init = { Width => 40, DataSize => 0, p_var_type => { pData8 =>&PTU_pData8 } },  ev=init
            VAR Vp_fgfb2,                   init = &PTU_Vp_fgfb2,                       ev = init
            VAR S16_panel_width,            init = 65535,                               ev = init
            VAR S16_panel_height,           init = 32767,                               ev = init
            VAR E_orientation,              init = E_PORTRAIT,                          ev = init

        COMMENT OUTPUT SECTION:
            VAR ret_TextDrawChar,           init = 0,                                   ev = 40
            VAR PTU_IN_Pu8GetCharBitMap,    init =  &PTU_IN_Pu8GetCharBitMap,           ev = &p_font
            VAR PTU_IN_PsGetCharInfo,       init =  &PTU_IN_PsGetCharInfo,              ev = &p_font
            VAR PTU_Dma2dDrawChar,          init = &PTU_Dma2dDrawChar,                  ev= &PTU_Pu8GetCharBitMap 
            VAR PTU_write_loc,              init = (T_UINT16 *) (Vp_fgfb2-65374) ,      ev= init
            
        
        COMMENT INPUT/OUTPUT SECTION:
            -- None
            
            
            --Stub Calls:
        SIMUL
            STUB Pu8GetCharBitMap(110) &PTU_Pu8GetCharBitMap
            STUB PsGetCharInfo(110)&PTU_PsGetCharInfo
            STUB Dma2dDrawChar(50,40,CAS_RED)
        END SIMUL
        
        -- Calling the Unit Under Test        
            #ret_TextDrawChar = TextDrawChar(u8_char, u16_dis_x, u16_dis_y, &p_font, e_color);
        END ELEMENT

END TEST -- TEST 9

--TEST 10
--FAMILY robustness
--
--    COMMENT Test Description
--    COMMENT <TD> 
--    COMMENT 
--    COMMENT The function TextDrawChar, Parameter 'p_font' is exercised for NULL value.
--    COMMENT 
--    COMMENT Equivalence Class 36
--    COMMENT 
--    COMMENT      
--    COMMENT </TD> 
-- 
--        ELEMENT
--        COMMENT INPUT SECTION:
--
--            VAR u8_char,                  init = 0,       ev = init
--            VAR u16_dis_x,                init = 0,       ev = init
--            VAR u16_dis_y,                init = 0,       ev = init
--            VAR e_color,                  init = BLACK,   ev = init
--            VAR ret_TextDrawChar,         init = 0,       ev = init
--
--        COMMENT OUTPUT SECTION:
--                --None 
--        
--        COMMENT INPUT/OUTPUT SECTION:
--                --None 
--
--            
--            --Stub Calls:
--        SIMUL
--                --None 
--        END SIMUL
--        
--        -- Calling the Unit Under Test        
--            #ret_TextDrawChar = TextDrawChar(u8_char, u16_dis_x, u16_dis_y, NULL, e_color);
--        END ELEMENT
--
--END TEST -- TEST 10

END SERVICE -- TextDrawChar


--------------------------------------------------------------------------------
-- Declaration of the service TextUpdate
--------------------------------------------------------------------------------
SERVICE TextUpdate
SERVICE_TYPE extern

    -- Tested service parameters declarations
    #T_PTEXT p_text;
    #T_EPENCOLOR e_pen_color;
    #T_ETXFLASH e_tx_flash;
    #T_ETXV e_txv;
    #T_TEXT PTU_p_text,PTU_p_text_1;
    #T_UINT8 PTU_p_string;

    ENVIRONMENT ENV_TextUpdate
    VAR p_text,             init = NIL,             ev = init
    VAR e_pen_color,        init = BLACK,           ev = init
    VAR e_tx_flash,         init = TX_NO_FLASH,     ev = init
    VAR e_txv,              init = V_NORMAL,        ev = init
    END ENVIRONMENT -- ENV_TextUpdate
    USE ENV_TextUpdate

TEST 1
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT [hdudispftext-TextUpdate-DB-LLR-001]
    COMMENT The function TextUpdate Sets ePenColor of p_text to 
    COMMENT e_pen_color (ORANGE), eTXFlash of p_text to e_tx_flash(TX_FLASH)
    COMMENT  and eTXV of p_text to e_txv(V_REVERSE).
    COMMENT 
    COMMENT Equivalence Class None
    COMMENT      
    COMMENT </TD> 
    
        ELEMENT


        COMMENT INPUT SECTION:
            -- initialization of temporary structure
            VAR PTU_p_string,       init = 25,              ev = init

            STRUCTURE PTU_p_text,   init = { ppsOwner=>&PTU_p_text_1, u16X0=> 0,u16Y0=> 0,
                                &               eTXAlign=>ALIGN_CENTER,eTXFont=>E_NO_FONT,ePenColor=>BLACK,
                                &               eTXV=>V_NORMAL,eTXFlash=>TX_NO_FLASH,pu8String => &PTU_p_string },        
                                &                       ev = {ePenColor=>ORANGE,eTXV=>V_REVERSE,eTXFlash=>TX_FLASH,others => init }
                                                      

            VAR p_text,             init = &PTU_p_text,     ev = init
            VAR e_pen_color,        init = ORANGE,          ev = init
            VAR e_tx_flash,         init = TX_FLASH,        ev = init
            VAR e_txv,              init = V_REVERSE,       ev = init

        COMMENT OUTPUT SECTION:
            --None 
        
        COMMENT INPUT/OUTPUT SECTION:
            --None 
            
        --Stub Calls:
        SIMUL
            --None 
        END SIMUL
        
        -- Calling the Unit Under Test        
        #TextUpdate(p_text, e_pen_color, e_tx_flash, e_txv);
        END ELEMENT

END TEST -- TEST 1


TEST 2
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT [hdudispftext-TextUpdate-DB-LLR-001]
    COMMENT The function TextUpdate Sets ePenColor of p_text to 
    COMMENT e_pen_color (BLACK), eTXFlash of p_text to e_tx_flash(TX_NO_FLASH)
    COMMENT  and eTXV of p_text to e_txv(V_NORMAL).
    COMMENT 
    COMMENT Equivalence Class None
    COMMENT      
    COMMENT </TD> 
    
        ELEMENT


        COMMENT INPUT SECTION:
            -- initialization of temporary structure
            VAR PTU_p_string,       init = 25,              ev = init

            STRUCTURE PTU_p_text,   init = { ppsOwner=>&PTU_p_text_1, u16X0=> 0,u16Y0=> 0,
                                & eTXAlign=>ALIGN_CENTER,eTXFont=>E_NO_FONT,ePenColor=>ORANGE,
                                & eTXV=>V_REVERSE,eTXFlash=>TX_FLASH,pu8String => &PTU_p_string },      
                                &                       ev = {ePenColor=>BLACK,eTXV=>V_NORMAL,eTXFlash=>TX_NO_FLASH,others => init }
                                                      

            VAR p_text,             init = &PTU_p_text,     ev = init
            VAR e_pen_color,        init = BLACK,           ev = init
            VAR e_tx_flash,         init = TX_NO_FLASH,     ev = init
            VAR e_txv,              init = V_NORMAL,        ev = init

        COMMENT OUTPUT SECTION:
            --None 
        
        COMMENT INPUT/OUTPUT SECTION:
            --None 
            
        --Stub Calls:
        SIMUL
            --None 
        END SIMUL
        
        -- Calling the Unit Under Test        
        #TextUpdate(p_text, e_pen_color, e_tx_flash, e_txv);
        END ELEMENT
        
END TEST -- TEST 2


TEST 3
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT [hdudispftext-TextUpdate-DB-LLR-001]
    COMMENT The function TextUpdate Sets ePenColor of p_text to 
    COMMENT e_pen_color (ORANGE+1), eTXFlash of p_text to e_tx_flash(TX_NO_FLASH)
    COMMENT  and eTXV of p_text to e_txv(V_NORMAL).
    COMMENT 
    COMMENT Equivalence Class None
    COMMENT      
    COMMENT </TD> 
    
        ELEMENT


        COMMENT INPUT SECTION:
        -- initialization of temporary structure
            VAR PTU_p_string,       init = 25,              ev = init

            STRUCTURE PTU_p_text,   init = { ppsOwner=>&PTU_p_text_1, u16X0=> 0,u16Y0=> 0,
                                & eTXAlign=>ALIGN_CENTER,eTXFont=>E_NO_FONT,ePenColor=>BLACK,
                                & eTXV=>V_REVERSE,eTXFlash=>TX_FLASH,pu8String => &PTU_p_string },      
                                &                       ev = {ePenColor=>ORANGE+1,eTXV=>V_NORMAL,eTXFlash=>TX_NO_FLASH,others => init }
                                                      

            VAR p_text,             init = &PTU_p_text,     ev = init
            VAR e_pen_color,        init = ORANGE+1,        ev = init
            VAR e_tx_flash,         init = TX_NO_FLASH,     ev = init
            VAR e_txv,              init = V_NORMAL,        ev = init

        COMMENT OUTPUT SECTION:
            --None 
        
        COMMENT INPUT/OUTPUT SECTION:
            --None 
            
        --Stub Calls:
        SIMUL
            --None 
        END SIMUL
        
        -- Calling the Unit Under Test        
        #TextUpdate(p_text, e_pen_color, e_tx_flash, e_txv);
        END ELEMENT

END TEST -- TEST 3
    
TEST 4
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT [hdudispftext-TextUpdate-DB-LLR-001]
    COMMENT The function TextUpdate Sets ePenColor of p_text to 
    COMMENT e_pen_color (BRIGHT_GREEN), eTXFlash of p_text to e_tx_flash(TX_FLASH)
    COMMENT  and eTXV of p_text to e_txv(V_REVERSE).
    COMMENT 
    COMMENT Equivalence Class None
    COMMENT      
    COMMENT </TD> 
    
    ELEMENT


        COMMENT INPUT SECTION:
        -- initialization of temporary structure
            VAR PTU_p_string,       init = 25,              ev = init

            STRUCTURE PTU_p_text,   init = { ppsOwner=>&PTU_p_text_1, u16X0=> 0,u16Y0=> 0,
                                & eTXAlign=>ALIGN_CENTER,eTXFont=>E_NO_FONT,ePenColor=>BLACK,
                                & eTXV=>V_NORMAL,eTXFlash=>TX_NO_FLASH,pu8String => &PTU_p_string },        
                                &                       ev = {ePenColor=>BRIGHT_GREEN,eTXV=>V_REVERSE,eTXFlash=>TX_FLASH,others => init }
                                                      

            VAR p_text,             init = &PTU_p_text,     ev = init
            VAR e_pen_color,        init = BRIGHT_GREEN,    ev = init
            VAR e_tx_flash,         init = TX_FLASH,        ev = init
            VAR e_txv,              init = V_REVERSE,       ev = init

        COMMENT OUTPUT SECTION:
            --None 
        
        COMMENT INPUT/OUTPUT SECTION:
            --None 
            
        --Stub Calls:
        SIMUL
            --None 
        END SIMUL
        
        -- Calling the Unit Under Test        
        #TextUpdate(p_text, e_pen_color, e_tx_flash, e_txv);
        END ELEMENT

END TEST -- TEST 4

END SERVICE -- TextUpdate


--------------------------------------------------------------------------------
-- Declaration of the service TextDispString
--------------------------------------------------------------------------------
SERVICE TextDispString
SERVICE_TYPE extern

    -- Tested service parameters declarations
    #T_UINT8  *pc_string;
    #T_UINT8  PTU_pc_string[100];
    #T_UINT16 u16_x;
    #T_UINT16 u16_y;
    #T_ETXFONT e_tx_font;
    #T_EPENCOLOR e_pen_color;
    #T_ETXFLASH e_tx_flash;
    #T_ETXV e_txv;
    #T_ETXALIGN e_tx_align;
    #T_BFC_FONT_PROP PTU_pProp;

    ENVIRONMENT ENV_TextDispString
    VAR pc_string,      init = &PTU_pc_string[0],       ev = init
    VAR u16_x,          init = 0,                       ev = init
    VAR u16_y,          init = 0,                       ev = init
    VAR e_tx_font,      init = E_NO_FONT,               ev = init
    VAR e_pen_color,    init = BLACK,                   ev = init
    VAR e_tx_flash,     init = TX_NO_FLASH,             ev = init
    VAR e_txv,          init = V_NORMAL,                ev = init
    VAR e_tx_align,     init = ALIGN_CENTER,            ev = init
    END ENVIRONMENT -- ENV_TextDispString
    USE ENV_TextDispString

TEST 1
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT In this testcase function parameters are exercised for nominal values.
    COMMENT [hdudispftext-TextDispString-DB-LLR-001]
    COMMENT The function TextDispString sets ps font to return value of FontsGetFont 
    COMMENT  with parameter e_tx_font.
    COMMENT 
    COMMENT Equivalence Class 5
    COMMENT
    COMMENT [hdudispftext-TextDispString-DB-LLR-002]
    COMMENT The function TextDispString sets u16_x to u16_x minus return value of 
    COMMENT FontsGetStringWidth with parameter pc_string and e_tx_font divide 
    COMMENT by TWO and set u16_y to u16_y minus return value of FontsGetFontHeight
    COMMENT with parameter e_tx_font divide by TWO when e_tx_align is equal to ALIGN_CENTER.
    COMMENT
    COMMENT Equivalence Class 7,8,9
    COMMENT
    COMMENT [hdudispftext-TextDispString-DB-LLR-004]
    COMMENT The function TextDispString calls DispStringAt function with parameters 
    COMMENT pc_string, u16_x, u16_y, ps font, e_pen_color, e_tx_flash and e_txv.
    COMMENT
    COMMENT Equivalence Class 6
    COMMENT
    COMMENT [hdudispftext-DispStringAt-DB-LLR-001]
    COMMENT Function DispStringAt sets char to content of pc_string plus one,
    COMMENT When char is not equal to ZERO.
    COMMENT
    COMMENT Equivalence Class 41
    COMMENT
    COMMENT [hdudispftext-DispStringAt-DB-LLR-002]
    COMMENT Function DispStringAt sets char to Result of bitwise OR of char and SET_8_BIT ,
    COMMENT When e_txv is V_REVERSE and  till char not equal to ZERO.
    COMMENT
    COMMENT Equivalence Class 29,41
    COMMENT
    COMMENT [hdudispftext-DispStringAt-DB-LLR-003]
    COMMENT Function DispStringAt calls function VHadFlash,
    COMMENT When e_tx_flash is TX_FLASH and till char not equal to ZERO.
    COMMENT
    COMMENT Equivalence Class 37,14,41,44,45
    COMMENT
    COMMENT [hdudispftext-DispStringAt-DB-LLR-004]
    COMMENT Function DispStringAt sets char to result of bitwise XOR of char and TOGGLE_8_BIT,
    COMMENT When e_tx_flash is TX_FLASH, return value of function EGetFlashState is equal to FLASH_OFF, e_txv is V_REVERSE.
    COMMENT
    COMMENT Equivalence Class 13,30,29
    COMMENT
    COMMENT [hdudispftext-DispStringAt-DB-LLR-005]
    COMMENT Function DispStringAt set u16_x to u16_x plus return value of TextDrawChar.
    COMMENT
    COMMENT Equivalence Class 16
    COMMENT      
    COMMENT </TD> 
    

        ELEMENT
        
        COMMENT INPUT SECTION:
            VAR PTU_pc_string[0],      init = 125,                              ev = init
            VAR PTU_pc_string[1],      init = 0,                                ev = init
            VAR u16_x,                 init = 65535,                            ev = init
            VAR u16_y,                 init = 65535,                            ev = init
            VAR e_tx_font,             init = E_BEZEL_FONT,                     ev = init
            VAR e_pen_color,           init = ORANGE,                           ev = init
            VAR e_tx_flash,            init = TX_FLASH,                         ev = init
            VAR e_txv,                 init = V_REVERSE,                        ev = init
            VAR e_tx_align,            init = ALIGN_CENTER,                     ev = init
            VAR Vp_fgfb2,              init = &PTU_Vp_fgfb2,                    ev = init
            VAR S16_panel_width,       init = 0,                                ev = init
            VAR E_orientation,         init = E_LAND_SCAPE_PORTRAIT_UNKNOWN,    ev = init
        
            -- initialization of temporary structure
            STRUCTURE PTU_FontsGetFont,     init = { FontType => 0, FontHeight => 0, Baseline => 0, Reversed => 0, 
                                                & p_var_type => { pProp =>&PTU_pProp } },  ev=init
        
            STRUCTURE PTU_PsGetCharInfo,    init = { Width => 0, DataSize => 0, p_var_type => { pData8 =>&PTU_pData8 } },  ev=init
        
            VAR PTU_OUT_pu8_string,         init = 35,                          ev = init


        COMMENT OUTPUT SECTION:
            VAR PTU_IN_Pu8GetCharBitMap,   init =  &PTU_PsGetCharInfo,          ev = &PTU_FontsGetFont
            VAR PTU_IN_pu8_string,         init = 32,                           ev = &PTU_pc_string[0]
            VAR PTU_Dma2dDrawChar,         init = &PTU_Dma2dDrawChar,           ev = &PTU_Pu8GetCharBitMap 
            VAR PTU_write_loc,             init = (T_UINT16 *)(Vp_fgfb2+131030),  ev = init
        
        COMMENT INPUT/OUTPUT SECTION:
            --None 
            
        --Stub Calls:
        SIMUL
            STUB FontsGetFont (E_BEZEL_FONT)(T_BFC_FONT*) &PTU_FontsGetFont
            STUB FontsGetStringWidth 1=> (E_BEZEL_FONT) 40
            STUB FontsGetFontHeight 1=> (E_BEZEL_FONT) 40
            STUB Pu8GetCharBitMap(125)&PTU_Pu8GetCharBitMap
            STUB PsGetCharInfo 1..2=> (125)&PTU_PsGetCharInfo
            STUB VHadFlash()
            STUB EGetFlashState() FLASH_OFF
            STUB Dma2dDrawChar(0,0,ORANGE)
        END SIMUL

        -- Calling the Unit Under Test        
            #TextDispString(pc_string, u16_x, u16_y, e_tx_font, e_pen_color, e_tx_flash, e_txv, e_tx_align);
        END ELEMENT

END TEST -- TEST 1

TEST 2
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT In this testcase function parameters are exercised for minimum values and 
    COMMENT the parameter pc_string with value '\r'.
    COMMENT [hdudispftext-TextDispString-DB-LLR-001]
    COMMENT The function TextDispString sets ps font to return value of FontsGetFont 
    COMMENT  with parameter e_tx_font.
    COMMENT 
    COMMENT Equivalence Class 5
    COMMENT
    COMMENT [hdudispftext-TextDispString-DB-LLR-003]
    COMMENT Function TextDispString sets u16_y to u16_y minus return value of FontsGetFontHeight divide by TWO,
    COMMENT when e_tx_align is equal to ALIGN_CENTER_LEFT.
    COMMENT
    COMMENT Equivalence Class 8,11
    COMMENT
    COMMENT [hdudispftext-TextDispString-DB-LLR-004]
    COMMENT The function TextDispString calls DispStringAt function with parameters 
    COMMENT pc_string, u16_x, u16_y, ps font, e_pen_color, e_tx_flash and e_txv.
    COMMENT
    COMMENT Equivalence Class 6
    COMMENT
    COMMENT [hdudispftext-DispStringAt-DB-LLR-001]
    COMMENT Function DispStringAt sets char to content of pc_string plus one,
    COMMENT When char not equal to ZERO.
    COMMENT
    COMMENT Equivalence Class 41
    COMMENT
    COMMENT [hdudispftext-DispStringAt-DB-LLR-005]
    COMMENT Function DispStringAt set u16_x to u16_x plus return value of TextDrawChar,
    COMMENT pointer of character information to return value of function PsGetCharInfo and
    COMMENT length to sum of length and Width of pointer of character information.
    COMMENT
    COMMENT Equivalence Class 16
    COMMENT
    COMMENT [hdudispftext-DispStringAt-DB-LLR-007]
    COMMENT Function DispStringAt set u16_x to result of u16_x subtract with length
    COMMENT and reset the length to ZERO when character is Carriage Return character. 
    COMMENT
    COMMENT Equivalence Class 43
    COMMENT      
    COMMENT </TD> 
    

        ELEMENT
        
        COMMENT INPUT SECTION:
            VAR PTU_pc_string[0],      init = -128,             ev = init
            VAR PTU_pc_string[1],      init = '\r',             ev = init
            VAR PTU_pc_string[2],      init = 0,                ev = init
            VAR u16_x,                 init = 0,                ev = init
            VAR u16_y,                 init = 0,                ev = init
            VAR e_tx_font,             init = E_NO_FONT,        ev = init
            VAR e_pen_color,           init = BLACK,            ev = init
            VAR e_tx_flash,            init = TX_NO_FLASH,      ev = init
            VAR e_txv,                 init = V_NORMAL,         ev = init
            VAR e_tx_align,            init = ALIGN_CENTER_LEFT,ev = init
            VAR Vp_fgfb2,              init = &PTU_Vp_fgfb2,    ev = init
            VAR S16_panel_width,       init = 0,                ev = init
            VAR E_orientation,         init = E_LAND_SCAPE,     ev = init
        
            -- initialization of temporary structure
            STRUCTURE PTU_FontsGetFont,  init = { FontType => 0, FontHeight => 0, Baseline => 0, Reversed => 0, 
                                                & p_var_type => { pProp =>&PTU_pProp } },  ev=init
        
            STRUCTURE PTU_PsGetCharInfo,  init = { Width => 0, DataSize => 0, p_var_type => { pData8 =>&PTU_pData8 } },  ev=init
        
            VAR PTU_IN_pu8_string,      init = 32,              ev = init
            VAR PTU_OUT_pu8_string,     init = 255,             ev = init


        COMMENT OUTPUT SECTION:
            VAR PTU_IN_Pu8GetCharBitMap,   init =  &PTU_PsGetCharInfo,      ev = &PTU_FontsGetFont
            VAR PTU_Dma2dDrawChar,         init = &PTU_Dma2dDrawChar,       ev = &PTU_Pu8GetCharBitMap 
            VAR PTU_write_loc,             init = &PTU_write_loc,           ev =&PTU_Vp_fgfb2
        
        COMMENT INPUT/OUTPUT SECTION:
            --None 
            
        --Stub Calls:
        SIMUL
            STUB FontsGetFont (E_NO_FONT)(T_BFC_FONT*) &PTU_FontsGetFont
            STUB FontsGetFontHeight 1=> (E_NO_FONT) -32768
            STUB Pu8GetCharBitMap(-128)&PTU_Pu8GetCharBitMap
            STUB PsGetCharInfo 1..2=> (-128)&PTU_PsGetCharInfo
            STUB Dma2dDrawChar 2=> (0,0,BLACK)
        END SIMUL

        -- Calling the Unit Under Test        
            #TextDispString(pc_string, u16_x, u16_y, e_tx_font, e_pen_color, e_tx_flash, e_txv, e_tx_align);
        END ELEMENT

END TEST -- TEST 2

TEST 3
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT In this testcase function parameters are exercised for maximum values and 
    COMMENT the parameter pc_string with value '\n'.
    COMMENT [hdudispftext-TextDispString-DB-LLR-001]
    COMMENT The function TextDispString sets ps font to return value of FontsGetFont 
    COMMENT  with parameter e_tx_font.
    COMMENT
    COMMENT Equivalence Class 5
    COMMENT
    COMMENT [hdudispftext-TextDispString-DB-LLR-004]
    COMMENT The function TextDispString calls DispStringAt function with parameters 
    COMMENT pc_string, u16_x, u16_y, ps font, e_pen_color, e_tx_flash and e_txv.
    COMMENT
    COMMENT Equivalence Class 6
    COMMENT
    COMMENT [hdudispftext-DispStringAt-DB-LLR-003]
    COMMENT Function DispStringAt calls function VHadFlash,
    COMMENT When e_tx_flash is TX_FLASH and till char not equal to ZERO.
    COMMENT
    COMMENT Equivalence Class 37,14,41
    COMMENT
    COMMENT [hdudispftext-DispStringAt-DB-LLR-005]
    COMMENT Function DispStringAt set u16_x to u16_x plus return value of TextDrawChar,
    COMMENT pointer of character information to return value of function PsGetCharInfo and
    COMMENT length to sum of length and Width of pointer of character information.
    COMMENT
    COMMENT Equivalence Class 16
    COMMENT      
    COMMENT [hdudispftext-DispStringAt-DB-LLR-006]
    COMMENT Function DispStringAt  set u16_y to result of addition of u16_y, FontHeight
    COMMENT of ps_font and ONE when character is newline character. 
    COMMENT
    COMMENT Equivalence Class 42
    COMMENT    
    COMMENT </TD> 
    

        ELEMENT
        
        COMMENT INPUT SECTION:
            VAR PTU_pc_string[0],      init = 127,                  ev = init
            VAR PTU_pc_string[1],      init = '\n',                 ev = init
            VAR PTU_pc_string[2],      init = 0,                    ev = init
            VAR u16_x,                 init = 0,                    ev = init
            VAR u16_y,                 init = 0,                    ev = init
            VAR e_tx_font,             init = E_BEZEL_FONT+1,       ev = init
            VAR e_pen_color,           init = ORANGE+1,             ev = init
            VAR e_tx_flash,            init = TX_FLASH,             ev = init
            VAR e_txv,                 init = V_NORMAL,             ev = init
            VAR e_tx_align,            init = ALIGN_LEFT,           ev = init
            VAR Vp_fgfb2,              init = &PTU_Vp_fgfb2,        ev = init
            VAR S16_panel_width,       init = 0,                    ev = init
            VAR S16_panel_height,       init = 0,                   ev = init
            VAR E_orientation,         init = E_PORTRAIT,           ev = init
        
            -- initialization of temporary structure
            STRUCTURE PTU_FontsGetFont,  init = { FontType => 0, FontHeight => 0, Baseline => 0, Reversed => 0, 
                                                & p_var_type => { pProp =>&PTU_pProp } },  ev=init
        
            STRUCTURE PTU_PsGetCharInfo,  init = { Width => 0, DataSize => 0, p_var_type => { pData8 =>&PTU_pData8 } },  ev=init
        
            VAR PTU_OUT_pu8_string,     init = 35,                  ev = init


        COMMENT OUTPUT SECTION:
            VAR PTU_IN_Pu8GetCharBitMap,   init =  &PTU_PsGetCharInfo,      ev = &PTU_FontsGetFont
            VAR PTU_Dma2dDrawChar,         init = &PTU_Dma2dDrawChar,       ev = &PTU_Pu8GetCharBitMap 
            VAR PTU_write_loc,             init = &PTU_write_loc,           ev =&PTU_Vp_fgfb2
            
        COMMENT INPUT/OUTPUT SECTION:
                --None 
                
            --Stub Calls:
        SIMUL
            STUB FontsGetFont (E_BEZEL_FONT+1)(T_BFC_FONT*) &PTU_FontsGetFont
            STUB Pu8GetCharBitMap(127)&PTU_Pu8GetCharBitMap
            STUB PsGetCharInfo 1..2=> (127)&PTU_PsGetCharInfo
            STUB VHadFlash 1..2=> ()
            STUB EGetFlashState 1..2=> () FLASH_ON
            STUB Dma2dDrawChar(0,0,ORANGE+1)
        END SIMUL

        -- Calling the Unit Under Test        
            #TextDispString(pc_string, u16_x, u16_y, e_tx_font, e_pen_color, e_tx_flash, e_txv, e_tx_align);
        END ELEMENT

END TEST -- TEST 3
    
TEST 4
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT In this testcase function parameters are exercised for maximum values.
    COMMENT [hdudispftext-TextDispString-DB-LLR-001]
    COMMENT The function TextDispString sets ps font to return value of FontsGetFont 
    COMMENT  with parameter e_tx_font.
    COMMENT
    COMMENT Equivalence Class 5
    COMMENT 
    COMMENT [hdudispftext-TextDispString-DB-LLR-004]
    COMMENT The function TextDispString calls DispStringAt function with parameters 
    COMMENT pc_string, u16_x, u16_y, ps font, e_pen_color, e_tx_flash and e_txv.
    COMMENT
    COMMENT Equivalence Class 6
    COMMENT
    COMMENT [hdudispftext-DispStringAt-DB-LLR-001]
    COMMENT Function DispStringAt sets char to content of pc_string plus one,
    COMMENT When char not equal to ZERO.
    COMMENT
    COMMENT Equivalence Class 41
    COMMENT
    COMMENT [hdudispftext-DispStringAt-DB-LLR-002]
    COMMENT Function DispStringAt sets char to Result of bitwise OR of char and SET_8_BIT ,
    COMMENT When e_txv is V_REVERSE and  till char not equal to ZERO.
    COMMENT
    COMMENT Equivalence Class 29,41
    COMMENT
    COMMENT [hdudispftext-DispStringAt-DB-LLR-003]
    COMMENT Function DispStringAt calls function VHadFlash,
    COMMENT When e_tx_flash is TX_FLASH and till char not equal to ZERO.
    COMMENT
    COMMENT Equivalence Class 37,14,41,44,45
    COMMENT
    COMMENT [hdudispftext-DispStringAt-DB-LLR-004]
    COMMENT Function DispStringAt sets char to result of bitwise XOR of char and TOGGLE_8_BIT,
    COMMENT When e_tx_flash is TX_FLASH, return value of function EGetFlashState is equal to FLASH_OFF, e_txv is V_REVERSE.
    COMMENT
    COMMENT Equivalence Class 13,30,29
    COMMENT
    COMMENT [hdudispftext-DispStringAt-DB-LLR-005]
    COMMENT Function DispStringAt set u16_x to u16_x plus return value of TextDrawChar,
    COMMENT pointer of character information to return value of function PsGetCharInfo and
    COMMENT length to sum of length and Width of pointer of character information.
    COMMENT
    COMMENT Equivalence Class 16
    COMMENT
    COMMENT      
    COMMENT </TD> 
    

        ELEMENT
        
        COMMENT INPUT SECTION:
            VAR PTU_pc_string[0..1],   init = 80,                   ev = init
            VAR PTU_pc_string[2],      init = 0,                    ev = init
            VAR u16_x,                 init = 0,                    ev = init
            VAR u16_y,                 init = 0,                    ev = init
            VAR e_tx_font,             init = E_BEZEL_FONT+1,       ev = init
            VAR e_pen_color,           init = CAS_RED,              ev = init
            VAR e_tx_flash,            init = TX_FLASH,             ev = init
            VAR e_txv,                 init = V_REVERSE,            ev = init
            VAR e_tx_align,            init = ALIGN_LEFT,           ev = init
            VAR Vp_fgfb2,              init = &PTU_Vp_fgfb2,        ev = init
            VAR S16_panel_width,       init = 0,                    ev = init
            VAR S16_panel_height,       init = 0,                   ev = init
            VAR E_orientation,         init = E_PORTRAIT,           ev = init
            
                -- initialization of temporary structure
            STRUCTURE PTU_FontsGetFont,  init = { FontType => 0, FontHeight => 0, Baseline => 0, Reversed => 0, 
                                                    & p_var_type => { pProp =>&PTU_pProp } },  ev=init
            
            STRUCTURE PTU_PsGetCharInfo,  init = { Width => 0, DataSize => 0, p_var_type => { pData8 =>&PTU_pData8 } },  ev=init
            
            VAR PTU_OUT_pu8_string,     init = 35,                  ev = init
            VAR PTU_IN_pu8_string,      init = 32,                  ev = init
    
    
        COMMENT OUTPUT SECTION:
            VAR PTU_IN_Pu8GetCharBitMap,    init =  &PTU_PsGetCharInfo,         ev = &PTU_FontsGetFont
            VAR PTU_Dma2dDrawChar,          init = &PTU_Dma2dDrawChar,          ev= &PTU_Pu8GetCharBitMap 
            VAR PTU_write_loc,              init = &PTU_write_loc,              ev=&PTU_Vp_fgfb2
        
        COMMENT INPUT/OUTPUT SECTION:
            --None 
            
        --Stub Calls:
        SIMUL
            STUB FontsGetFont (E_BEZEL_FONT+1)(T_BFC_FONT*) &PTU_FontsGetFont
            STUB Pu8GetCharBitMap 1=> (208)&PTU_Pu8GetCharBitMap
            STUB Pu8GetCharBitMap 2=> (80)&PTU_Pu8GetCharBitMap
            STUB Pu8GetCharBitMap 3=> (80)&PTU_Pu8GetCharBitMap
            STUB PsGetCharInfo 1=> (208)&PTU_PsGetCharInfo
            STUB PsGetCharInfo 2=> (208)&PTU_PsGetCharInfo
            STUB PsGetCharInfo 3=> (80)&PTU_PsGetCharInfo
            STUB PsGetCharInfo 4=> (80)&PTU_PsGetCharInfo
            STUB VHadFlash 1..2=> ()
            STUB EGetFlashState 1=> () FLASH_ON
            STUB EGetFlashState 2=> () FLASH_OFF
            STUB Dma2dDrawChar 1=>(0,0,CAS_REV_RED)
            STUB Dma2dDrawChar 2=>(0,0,WHITE)
            STUB Dma2dDrawChar 3=>(0,0,CAS_REV_RED)
        END SIMUL

        -- Calling the Unit Under Test        
            #TextDispString(pc_string, u16_x, u16_y, e_tx_font, e_pen_color, e_tx_flash, e_txv, e_tx_align);
        END ELEMENT

END TEST -- TEST 4
    
TEST 5
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT In this testcase function parameters are exercised for maximum values.
    COMMENT [hdudispftext-TextDispString-DB-LLR-001]
    COMMENT The function TextDispString sets ps font to return value of FontsGetFont 
    COMMENT  with parameter e_tx_font.
    COMMENT
    COMMENT Equivalence Class 5
    COMMENT
    COMMENT [hdudispftext-TextDispString-DB-LLR-004]
    COMMENT The function TextDispString calls DispStringAt function with parameters 
    COMMENT pc_string, u16_x, u16_y, ps font, e_pen_color, e_tx_flash and e_txv.
    COMMENT
    COMMENT Equivalence Class 6
    COMMENT
    COMMENT [hdudispftext-DispStringAt-DB-LLR-001]
    COMMENT Function DispStringAt sets char to content of pc_string plus one,
    COMMENT When char not equal to ZERO.
    COMMENT
    COMMENT Equivalence Class 41,44,45
    COMMENT
    COMMENT [hdudispftext-DispStringAt-DB-LLR-002]
    COMMENT Function DispStringAt sets char to Result of bitwise OR of char and SET_8_BIT ,
    COMMENT When e_txv is V_REVERSE and  till char not equal to ZERO.
    COMMENT
    COMMENT Equivalence Class 29,41
    COMMENT
    COMMENT [hdudispftext-DispStringAt-DB-LLR-003]
    COMMENT Function DispStringAt calls function VHadFlash,
    COMMENT When e_tx_flash is TX_FLASH and till char not equal to ZERO.
    COMMENT
    COMMENT Equivalence Class 37,14,41
    COMMENT
    COMMENT [hdudispftext-DispStringAt-DB-LLR-004]
    COMMENT Function DispStringAt sets char to result of bitwise XOR of char and TOGGLE_8_BIT,
    COMMENT When e_tx_flash is TX_FLASH, return value of function EGetFlashState is equal to FLASH_OFF, e_txv is V_REVERSE.
    COMMENT
    COMMENT Equivalence Class 13,30,29
    COMMENT
    COMMENT [hdudispftext-DispStringAt-DB-LLR-005]
    COMMENT Function DispStringAt set u16_x to u16_x plus return value of TextDrawChar,
    COMMENT pointer of character information to return value of function PsGetCharInfo and
    COMMENT length to sum of length and Width of pointer of character information.
    COMMENT
    COMMENT Equivalence Class 16
    COMMENT
    COMMENT Equivalence Class None
    COMMENT      
    COMMENT </TD> 
    

        ELEMENT
        
        COMMENT INPUT SECTION:
            VAR PTU_pc_string[0..1],   init = 80,                   ev = init
            VAR PTU_pc_string[2],      init = 0,                    ev = init
            VAR u16_x,                 init = 0,                    ev = init
            VAR u16_y,                 init = 0,                    ev = init
            VAR e_tx_font,             init = E_BEZEL_FONT+1,       ev = init
            VAR e_pen_color,           init = CAS_RED,              ev = init
            VAR e_tx_flash,            init = TX_FLASH,             ev = init
            VAR e_txv,                 init = V_REVERSE,            ev = init
            VAR e_tx_align,            init = ALIGN_LEFT,           ev = init
            VAR Vp_fgfb2,              init = &PTU_Vp_fgfb2,        ev = init
            VAR S16_panel_width,       init = 0,                    ev = init
            VAR S16_panel_height,       init = 0,                   ev = init
            VAR E_orientation,         init = E_PORTRAIT,           ev = init
            
                -- initialization of temporary structure
            STRUCTURE PTU_FontsGetFont,  init = { FontType => 0, FontHeight => 0, Baseline => 0, Reversed => 0, 
                                                    & p_var_type => { pProp =>&PTU_pProp } },  ev=init
            
            STRUCTURE PTU_PsGetCharInfo,  init = { Width => 0, DataSize => 0, p_var_type => { pData8 =>&PTU_pData8 } },  ev=init
            
            VAR PTU_OUT_pu8_string,     init = 35,                  ev = init
            VAR PTU_IN_pu8_string,      init = 32,                  ev = init
    
    
        COMMENT OUTPUT SECTION:
            VAR PTU_IN_Pu8GetCharBitMap,    init =  &PTU_PsGetCharInfo,     ev = &PTU_FontsGetFont
            VAR PTU_Dma2dDrawChar,          init = &PTU_Dma2dDrawChar,      ev= &PTU_Pu8GetCharBitMap 
            VAR PTU_write_loc,              init = &PTU_write_loc,          ev=&PTU_Vp_fgfb2
        
        COMMENT INPUT/OUTPUT SECTION:
            --None 
            
        --Stub Calls:
        SIMUL
            STUB FontsGetFont (E_BEZEL_FONT+1)(T_BFC_FONT*) &PTU_FontsGetFont
            STUB Pu8GetCharBitMap 1..2=> (80)&PTU_Pu8GetCharBitMap
            STUB PsGetCharInfo 1..4=> (80)&PTU_PsGetCharInfo
            STUB VHadFlash 1..2=> ()
            STUB EGetFlashState 1..2=> () FLASH_OFF
            STUB Dma2dDrawChar 1..2=> (0,0,CAS_RED)
        END SIMUL

        -- Calling the Unit Under Test        
            #TextDispString(pc_string, u16_x, u16_y, e_tx_font, e_pen_color, e_tx_flash, e_txv, e_tx_align);
        END ELEMENT

END TEST -- TEST 5
    
TEST 6
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT In this testcase function parameters are exercised for maximum values.
    COMMENT [hdudispftext-TextDispString-DB-LLR-001]
    COMMENT The function TextDispString sets ps font to return value of FontsGetFont 
    COMMENT  with parameter e_tx_font.
    COMMENT
    COMMENT Equivalence Class 5
    COMMENT 
    COMMENT [hdudispftext-TextDispString-DB-LLR-004]
    COMMENT The function TextDispString calls DispStringAt function with parameters 
    COMMENT pc_string, u16_x, u16_y, ps font, e_pen_color, e_tx_flash and e_txv.
    COMMENT
    COMMENT Equivalence Class 6
    COMMENT
    COMMENT [hdudispftext-DispStringAt-DB-LLR-001]
    COMMENT Function DispStringAt sets char to content of pc_string plus one,
    COMMENT When char not equal to ZERO.
    COMMENT
    COMMENT Equivalence Class 41
    COMMENT
    COMMENT [hdudispftext-DispStringAt-DB-LLR-002]
    COMMENT Function DispStringAt sets char to Result of bitwise OR of char and SET_8_BIT ,
    COMMENT When e_txv is V_REVERSE and  till char not equal to ZERO.
    COMMENT
    COMMENT Equivalence Class 29,41
    COMMENT
    COMMENT [hdudispftext-DispStringAt-DB-LLR-003]
    COMMENT Function DispStringAt calls function VHadFlash,
    COMMENT When e_tx_flash is TX_FLASH and till char not equal to ZERO.
    COMMENT
    COMMENT Equivalence Class 37,14,41,44,45
    COMMENT
    COMMENT [hdudispftext-DispStringAt-DB-LLR-005]
    COMMENT Function DispStringAt set u16_x to u16_x plus return value of TextDrawChar,
    COMMENT pointer of character information to return value of function PsGetCharInfo and
    COMMENT length to sum of length and Width of pointer of character information.
    COMMENT
    COMMENT Equivalence Class 16
    COMMENT
    COMMENT Equivalence Class None
    COMMENT      
    COMMENT </TD> 
    

        ELEMENT
        
        COMMENT INPUT SECTION:
            VAR PTU_pc_string[0..1],   init = 80,                   ev = init
            VAR PTU_pc_string[2],      init = 0,                    ev = init
            VAR u16_x,                 init = 0,                    ev = init
            VAR u16_y,                 init = 0,                    ev = init
            VAR e_tx_font,             init = E_BEZEL_FONT+1,       ev = init
            VAR e_pen_color,           init = CAS_RED,              ev = init
            VAR e_tx_flash,            init = TX_FLASH,             ev = init
            VAR e_txv,                 init = V_REVERSE,            ev = init
            VAR e_tx_align,            init = ALIGN_LEFT,           ev = init
            VAR Vp_fgfb2,              init = &PTU_Vp_fgfb2,        ev = init
            VAR S16_panel_width,       init = 0,                    ev = init
            VAR S16_panel_height,       init = 0,                   ev = init
            VAR E_orientation,         init = E_LAND_SCAPE,         ev = init
            
                -- initialization of temporary structure
            STRUCTURE PTU_FontsGetFont,  init = { FontType => 0, FontHeight => 0, Baseline => 0, Reversed => 0, 
                                                        & p_var_type => { pProp =>&PTU_pProp } },  ev=init
            
            STRUCTURE PTU_PsGetCharInfo,  init = { Width => 0, DataSize => 0, p_var_type => { pData8 =>&PTU_pData8 } },  ev=init
            
            VAR PTU_OUT_pu8_string,     init = 35,                  ev = init
            VAR PTU_IN_pu8_string,         init = 32,               ev = init
    
    
        COMMENT OUTPUT SECTION:
            VAR PTU_IN_Pu8GetCharBitMap,   init =  &PTU_PsGetCharInfo,      ev = &PTU_FontsGetFont
            VAR PTU_Dma2dDrawChar,         init = &PTU_Dma2dDrawChar,       ev= &PTU_Pu8GetCharBitMap 
            VAR PTU_write_loc,          init = &PTU_write_loc,              ev=&PTU_Vp_fgfb2
        
        COMMENT INPUT/OUTPUT SECTION:
            --None 
            
        --Stub Calls:
        SIMUL
            STUB FontsGetFont (E_BEZEL_FONT+1)(T_BFC_FONT*) &PTU_FontsGetFont
            STUB Pu8GetCharBitMap(208)&PTU_Pu8GetCharBitMap
            STUB Pu8GetCharBitMap(80)&PTU_Pu8GetCharBitMap
            STUB Pu8GetCharBitMap(208)&PTU_Pu8GetCharBitMap
            STUB Pu8GetCharBitMap(80)&PTU_Pu8GetCharBitMap
            STUB PsGetCharInfo 1..4=> (208)&PTU_PsGetCharInfo
            STUB VHadFlash 1..2=> ()
            STUB EGetFlashState 1..2=> () FLASH_ON
            STUB Dma2dDrawChar 1=> (0,0,CAS_RED)
            STUB Dma2dDrawChar 2=> (0,0,CAS_REV_RED)
            STUB Dma2dDrawChar 3=> (0,0,WHITE)
            STUB Dma2dDrawChar 4=> (0,0,CAS_RED)
            STUB Dma2dDrawChar 5=> (0,0,CAS_REV_RED)
            STUB Dma2dDrawChar 6=> (0,0,WHITE)
        END SIMUL

        -- Calling the Unit Under Test        
            #TextDispString(pc_string, u16_x, u16_y, e_tx_font, e_pen_color, e_tx_flash, e_txv, e_tx_align);
        END ELEMENT

END TEST -- TEST 6

TEST 7
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT In this testcase function parameters are exercised for maximum values.
    COMMENT [hdudispftext-TextDispString-DB-LLR-001]
    COMMENT The function TextDispString sets ps font to return value of FontsGetFont 
    COMMENT  with parameter e_tx_font.
    COMMENT
    COMMENT Equivalence Class 5
    COMMENT 
    COMMENT [hdudispftext-TextDispString-DB-LLR-004]
    COMMENT The function TextDispString calls DispStringAt function with parameters 
    COMMENT pc_string, u16_x, u16_y, ps font, e_pen_color, e_tx_flash and e_txv.
    COMMENT
    COMMENT Equivalence Class 6
    COMMENT
    COMMENT [hdudispftext-DispStringAt-DB-LLR-001]
    COMMENT Function DispStringAt sets char to content of pc_string plus one,
    COMMENT When char not equal to ZERO.
    COMMENT
    COMMENT Equivalence Class 41
    COMMENT
    COMMENT [hdudispftext-DispStringAt-DB-LLR-003]
    COMMENT Function DispStringAt calls function VHadFlash,
    COMMENT When e_tx_flash is TX_FLASH and till char not equal to ZERO.
    COMMENT
    COMMENT Equivalence Class 37,14,41,44,45
    COMMENT
    COMMENT [hdudispftext-DispStringAt-DB-LLR-005]
    COMMENT Function DispStringAt set u16_x to u16_x plus return value of TextDrawChar,
    COMMENT pointer of character information to return value of function PsGetCharInfo and
    COMMENT length to sum of length and Width of pointer of character information.
    COMMENT
    COMMENT Equivalence Class 16
    COMMENT
    COMMENT      
    COMMENT </TD> 
    

        ELEMENT
        
        COMMENT INPUT SECTION:
            VAR PTU_pc_string[0..1],   init = 80,                   ev = init
            VAR PTU_pc_string[2],      init = 0,                    ev = init
            VAR u16_x,                 init = 0,                    ev = init
            VAR u16_y,                 init = 0,                    ev = init
            VAR e_tx_font,             init = E_BEZEL_FONT+1,       ev = init
            VAR e_pen_color,           init = CAS_REV_RED2,         ev = init
            VAR e_tx_flash,            init = TX_FLASH,             ev = init
            VAR e_txv,                 init = V_NORMAL,             ev = init
            VAR e_tx_align,            init = ALIGN_LEFT,           ev = init
            VAR Vp_fgfb2,              init = &PTU_Vp_fgfb2,        ev = init
            VAR S16_panel_width,       init = 0,                    ev = init
            VAR S16_panel_height,       init = 0,                   ev = init
            VAR E_orientation,         init = E_PORTRAIT,           ev = init
            
                -- initialization of temporary structure
            STRUCTURE PTU_FontsGetFont,  init = { FontType => 0, FontHeight => 0, Baseline => 0, Reversed => 0, 
                                                    & p_var_type => { pProp =>&PTU_pProp } },  ev=init
        
            
            VAR PTU_OUT_pu8_string,     init = 35,                  ev = init
            VAR PTU_IN_pu8_string,      init = 32,                  ev = init
    
    
        COMMENT OUTPUT SECTION:
                --None 
            
        COMMENT INPUT/OUTPUT SECTION:
            --None 
            
        --Stub Calls:
        SIMUL
            STUB FontsGetFont (E_BEZEL_FONT+1)(T_BFC_FONT*) &PTU_FontsGetFont
            STUB VHadFlash()
            STUB EGetFlashState() FLASH_OFF
        END SIMUL

        -- Calling the Unit Under Test        
            #TextDispString(pc_string, u16_x, u16_y, e_tx_font, e_pen_color, e_tx_flash, e_txv, e_tx_align);
        END ELEMENT

END TEST -- TEST 7
    
TEST 8
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT In this testcase function parameters are exercised for maximum values.
    COMMENT [hdudispftext-TextDispString-DB-LLR-001]
    COMMENT The function sets ps font to return value of FontsGetFont 
    COMMENT  with parameter e_tx_font.
    COMMENT
    COMMENT Equivalence Class 5
    COMMENT
    COMMENT [hdudispftext-TextDispString-DB-LLR-004]
    COMMENT The function calls DispStringAt function with parameters 
    COMMENT pc_string, u16_x, u16_y, ps font, e_pen_color, e_tx_flash and e_txv.
    COMMENT
    COMMENT Equivalence Class 6
    COMMENT
    COMMENT [hdudispftext-DispStringAt-DB-LLR-001]
    COMMENT Function DispStringAt sets char to content of pc_string plus one,
    COMMENT When char not equal to ZERO.
    COMMENT
    COMMENT Equivalence Class 41
    COMMENT
    COMMENT [hdudispftext-DispStringAt-DB-LLR-002]
    COMMENT Function DispStringAt sets char to Result of bitwise OR of char and SET_8_BIT ,
    COMMENT When e_txv is V_REVERSE and  till char not equal to ZERO.
    COMMENT
    COMMENT Equivalence Class 29,41
    COMMENT
    COMMENT [hdudispftext-DispStringAt-DB-LLR-003]
    COMMENT Function DispStringAt calls function VHadFlash,
    COMMENT When e_tx_flash is TX_FLASH and till char not equal to ZERO.
    COMMENT
    COMMENT Equivalence Class 37,14,41,44,45
    COMMENT
    COMMENT [hdudispftext-DispStringAt-DB-LLR-005]
    COMMENT Function DispStringAt set u16_x to u16_x plus return value of TextDrawChar,
    COMMENT pointer of character information to return value of function PsGetCharInfo and
    COMMENT length to sum of length and Width of pointer of character information.
    COMMENT
    COMMENT Equivalence Class 16
    COMMENT
    COMMENT [hdudispftext-TextDrawChar-DB-LLR-004]
    COMMENT Function TextDrawChar calls function Dma2dDrawChar,
    COMMENT when E_orientation is E_LAND_SCAPE.
    COMMENT
    COMMENT Equivalence Class 19,21
    COMMENT
    COMMENT [hdudispftext-TextDrawChar-DB-LLR-006]
    COMMENT Function TextDrawChar calls function Dma2dDrawChar,
    COMMENT sets cbit map to return value of function Pu8GetCharBitMap ans
    COMMENT calls function Dma2dDrawChar,
    COMMENT when E_orientation is E_LAND_SCAPE and e_color is CAS_REV_RED2.
    COMMENT
    COMMENT Equivalence Class 19,17,21,24
    COMMENT      
    COMMENT </TD> 
    

        ELEMENT
        
        COMMENT INPUT SECTION:
            VAR PTU_pc_string[0..1],   init = 80,                   ev = init
            VAR PTU_pc_string[2],      init = 0,                    ev = init
            VAR u16_x,                 init = 0,                    ev = init
            VAR u16_y,                 init = 0,                    ev = init
            VAR e_tx_font,             init = E_BEZEL_FONT+1,       ev = init
            VAR e_pen_color,           init = CAS_REV_RED2,         ev = init
            VAR e_tx_flash,            init = TX_FLASH,             ev = init
            VAR e_txv,                 init = V_REVERSE,            ev = init
            VAR e_tx_align,            init = ALIGN_LEFT,           ev = init
            VAR Vp_fgfb2,              init = &PTU_Vp_fgfb2,        ev = init
            VAR S16_panel_width,       init = 0,                    ev = init
            VAR S16_panel_height,       init = 0,                   ev = init
            VAR E_orientation,         init = E_LAND_SCAPE,         ev = init
            
                -- initialization of temporary structure
            STRUCTURE PTU_FontsGetFont,  init = { FontType => 0, FontHeight => 0, Baseline => 0, Reversed => 0, 
                                                    & p_var_type => { pProp =>&PTU_pProp } },  ev=init
        
            STRUCTURE PTU_PsGetCharInfo,  init = { Width => 0, DataSize => 0, p_var_type => { pData8 =>&PTU_pData8 } },  ev=init
        
            VAR PTU_OUT_pu8_string,         init = 35,              ev = init
            VAR PTU_IN_pu8_string,          init = 32,              ev = init


        COMMENT OUTPUT SECTION:
            VAR PTU_IN_Pu8GetCharBitMap,    init =  &PTU_PsGetCharInfo,     ev = &PTU_FontsGetFont
            VAR PTU_Dma2dDrawChar,          init = &PTU_Dma2dDrawChar,      ev= &PTU_Pu8GetCharBitMap 
            VAR PTU_write_loc,              init = &PTU_write_loc,          ev=&PTU_Vp_fgfb2
        
        COMMENT INPUT/OUTPUT SECTION:
            --None 
            
        --Stub Calls:
        SIMUL
            STUB FontsGetFont (E_BEZEL_FONT+1)(T_BFC_FONT*) &PTU_FontsGetFont
            STUB Pu8GetCharBitMap 1=> (208)&PTU_Pu8GetCharBitMap
            STUB Pu8GetCharBitMap 2=> (80)&PTU_Pu8GetCharBitMap
            STUB Pu8GetCharBitMap 3=> (208)&PTU_Pu8GetCharBitMap
            STUB Pu8GetCharBitMap 4=> (80)&PTU_Pu8GetCharBitMap
            STUB PsGetCharInfo 1..4=> (208)&PTU_PsGetCharInfo
            STUB VHadFlash 1..2=> ()
            STUB EGetFlashState 1..2=> () FLASH_ON
            STUB Dma2dDrawChar 1=> (0,0,CAS_REV_RED2)
            STUB Dma2dDrawChar 2=> (0,0,CAS_REV_RED)
            STUB Dma2dDrawChar 3=> (0,0,WHITE)
            STUB Dma2dDrawChar 4=> (0,0,CAS_REV_RED2)
            STUB Dma2dDrawChar 5=> (0,0,CAS_REV_RED)
            STUB Dma2dDrawChar 6=> (0,0,WHITE)
        END SIMUL

        -- Calling the Unit Under Test        
            #TextDispString(pc_string, u16_x, u16_y, e_tx_font, e_pen_color, e_tx_flash, e_txv, e_tx_align);
        END ELEMENT

END TEST -- TEST 8
 
TEST 9
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT In this testcase function parameters are exercised for maximum values.
    COMMENT [hdudispftext-TextDispString-DB-LLR-001]
    COMMENT The function TextDispString sets ps font to return value of FontsGetFont 
    COMMENT  with parameter e_tx_font.
    COMMENT
    COMMENT Equivalence Class 5
    COMMENT 
    COMMENT [hdudispftext-TextDispString-DB-LLR-004]
    COMMENT The function TextDispString calls DispStringAt function with parameters 
    COMMENT pc_string, u16_x, u16_y, ps font, e_pen_color, e_tx_flash and e_txv.
    COMMENT
    COMMENT Equivalence Class 6
    COMMENT
    COMMENT [hdudispftext-DispStringAt-DB-LLR-001]
    COMMENT Function DispStringAt sets char to content of pc_string plus one,
    COMMENT When char not equal to ZERO.
    COMMENT
    COMMENT Equivalence Class 41
    COMMENT
    COMMENT [hdudispftext-DispStringAt-DB-LLR-002]
    COMMENT Function DispStringAt sets char to Result of bitwise OR of char and SET_8_BIT ,
    COMMENT When e_txv is V_REVERSE and  till char not equal to ZERO.
    COMMENT
    COMMENT Equivalence Class 29,41
    COMMENT
    COMMENT [hdudispftext-DispStringAt-DB-LLR-003]
    COMMENT Function DispStringAt calls function VHadFlash,
    COMMENT When e_tx_flash is TX_FLASH and till char not equal to ZERO.
    COMMENT
    COMMENT Equivalence Class 37,14,41,44,45
    COMMENT
    COMMENT [hdudispftext-DispStringAt-DB-LLR-004]
    COMMENT Function DispStringAt sets char to result of bitwise XOR of char and TOGGLE_8_BIT,
    COMMENT When e_tx_flash is TX_FLASH, return value of function EGetFlashState is equal to FLASH_OFF, e_txv is V_REVERSE.
    COMMENT
    COMMENT Equivalence Class 13,30,29
    COMMENT
    COMMENT [hdudispftext-DispStringAt-DB-LLR-005]
    COMMENT Function DispStringAt set u16_x to u16_x plus return value of TextDrawChar,
    COMMENT pointer of character information to return value of function PsGetCharInfo and
    COMMENT length to sum of length and Width of pointer of character information.
    COMMENT
    COMMENT Equivalence Class 16
    COMMENT
    COMMENT [hdudispftext-TextDrawChar-DB-LLR-002]
    COMMENT Function TextDrawChar sets u16_dis_x to u16_dis_x(20) plus width and
    COMMENT pixel dot address to Vp_fgfb2 plus S16_panel_height(60) minus u16_dis_x(20) multiply with S16_panel_width(65535) plus u16_dis_y(20) multiply with TWO,
    COMMENT When E_orientation is equal to E_PORTRAIT.
    COMMENT
    COMMENT Equivalence Class 26
    COMMENT
    COMMENT [hdudispftext-TextDrawChar-DB-LLR-009]
    COMMENT Function TextDrawChar calls function Dma2dDrawChar,
    COMMENT sets cbit map to return value of function Pu8GetCharBitMap and
    COMMENT calls function Dma2dDrawChar,
    COMMENT when E_orientation is E_PORTRAIT and e_color is CAS_REV_RED2.
    COMMENT
    COMMENT Equivalence Class 19,17,21,24
    COMMENT      
    COMMENT </TD> 
    

        ELEMENT
        
        COMMENT INPUT SECTION:
            VAR PTU_pc_string[0..1],        init = 80,                  ev = init
            VAR PTU_pc_string[2],           init = 0,                   ev = init
            VAR u16_x,                      init = 0,                   ev = init
            VAR u16_y,                      init = 0,                   ev = init
            VAR e_tx_font,                  init = E_BEZEL_FONT+1,      ev = init
            VAR e_pen_color,                init = CAS_REV_RED2,        ev = init
            VAR e_tx_flash,                 init = TX_FLASH,            ev = init
            VAR e_txv,                      init = V_REVERSE,           ev = init
            VAR e_tx_align,                 init = ALIGN_LEFT,          ev = init
            VAR Vp_fgfb2,                   init = &PTU_Vp_fgfb2,       ev = init
            VAR S16_panel_width,            init = 0,                   ev = init
            VAR S16_panel_height,           init = 0,                   ev = init
            VAR E_orientation,              init = E_PORTRAIT,          ev = init
            
                -- initialization of temporary structure
            STRUCTURE PTU_FontsGetFont,  init = { FontType => 0, FontHeight => 0, Baseline => 0, Reversed => 0, 
                                                    & p_var_type => { pProp =>&PTU_pProp } },  ev=init
            
            STRUCTURE PTU_PsGetCharInfo,  init = { Width => 0, DataSize => 0, p_var_type => { pData8 =>&PTU_pData8 } },  ev=init
            
            VAR PTU_OUT_pu8_string,     init = 35,                      ev = init
            VAR PTU_IN_pu8_string,      init = 32,                      ev = init
    
    
        COMMENT OUTPUT SECTION:
            VAR PTU_IN_Pu8GetCharBitMap,    init =  &PTU_PsGetCharInfo,     ev = &PTU_FontsGetFont
            VAR PTU_Dma2dDrawChar,          init = &PTU_Dma2dDrawChar,      ev= &PTU_Pu8GetCharBitMap 
            VAR PTU_write_loc,              init = &PTU_write_loc,          ev=&PTU_Vp_fgfb2
        
        COMMENT INPUT/OUTPUT SECTION:
            --None 
            
        --Stub Calls:
        SIMUL
            STUB FontsGetFont (E_BEZEL_FONT+1)(T_BFC_FONT*) &PTU_FontsGetFont
            STUB Pu8GetCharBitMap 1..4=> (80)&PTU_Pu8GetCharBitMap
            STUB PsGetCharInfo 1..4=> (80)&PTU_PsGetCharInfo
            STUB VHadFlash 1..2=> ()
            STUB EGetFlashState 1..2=>() FLASH_OFF
            STUB Dma2dDrawChar 1=>(0,0,CAS_REV_RED)
            STUB Dma2dDrawChar 2=>(0,0,WHITE)
            STUB Dma2dDrawChar 3=>(0,0,CAS_REV_RED)
            STUB Dma2dDrawChar 4=>(0,0,WHITE)
        END SIMUL

        -- Calling the Unit Under Test        
            #TextDispString(pc_string, u16_x, u16_y, e_tx_font, e_pen_color, e_tx_flash, e_txv, e_tx_align);
        END ELEMENT

END TEST -- TEST 9

TEST 10
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT In this testcase function parameters are exercised for maximum values.
    COMMENT [hdudispftext-TextDispString-DB-LLR-001]
    COMMENT The function TextDispString sets ps font to return value of FontsGetFont 
    COMMENT  with parameter e_tx_font.
    COMMENT
    COMMENT Equivalence Class 5
    COMMENT
    COMMENT [hdudispftext-TextDispString-DB-LLR-004]
    COMMENT The function TextDispString calls DispStringAt function with parameters 
    COMMENT pc_string, u16_x, u16_y, ps font, e_pen_color, e_tx_flash and e_txv.
    COMMENT
    COMMENT Equivalence Class 6
    COMMENT
    COMMENT [hdudispftext-DispStringAt-DB-LLR-001]
    COMMENT Function DispStringAt sets char to content of pc_string plus one,
    COMMENT When char not equal to ZERO.
    COMMENT
    COMMENT Equivalence Class 41
    COMMENT
    COMMENT [hdudispftext-DispStringAt-DB-LLR-003]
    COMMENT Function DispStringAt calls function VHadFlash,
    COMMENT When e_tx_flash is TX_FLASH and till char not equal to ZERO.
    COMMENT
    COMMENT Equivalence Class 37,14,41,44,45
    COMMENT
    COMMENT [hdudispftext-DispStringAt-DB-LLR-005]
    COMMENT Function DispStringAt set u16_x to u16_x plus return value of TextDrawChar,
    COMMENT pointer of character information to return value of function PsGetCharInfo and
    COMMENT length to sum of length and Width of pointer of character information.
    COMMENT
    COMMENT Equivalence Class 16
    COMMENT      
    COMMENT </TD> 
    

        ELEMENT
        
        COMMENT INPUT SECTION:
            VAR PTU_pc_string[0],      init = 1,                ev = init
            VAR PTU_pc_string[1],      init = 0,                ev = init
            VAR u16_x,                 init = 0,                ev = init
            VAR u16_y,                 init = 0,                ev = init
            VAR e_tx_font,             init = E_BEZEL_FONT+1,   ev = init
            VAR e_pen_color,           init = CAS_RED,          ev = init
            VAR e_tx_flash,            init = TX_FLASH,         ev = init
            VAR e_txv,                 init = V_NORMAL,         ev = init
            VAR e_tx_align,            init = ALIGN_LEFT,       ev = init
            VAR Vp_fgfb2,              init = &PTU_Vp_fgfb2,    ev = init
            VAR S16_panel_width,       init = 0,                ev = init
            VAR S16_panel_height,       init = 0,               ev = init
            VAR E_orientation,         init = E_LAND_SCAPE,     ev = init
            
                -- initialization of temporary structure
            STRUCTURE PTU_FontsGetFont,  init = { FontType => 0, FontHeight => 0, Baseline => 0, Reversed => 0, 
                                                    & p_var_type => { pProp =>&PTU_pProp } },  ev=init
        
            STRUCTURE PTU_PsGetCharInfo,  init = { Width => 0, DataSize => 0, p_var_type => { pData8 =>&PTU_pData8 } },  ev=init
            
            VAR PTU_OUT_pu8_string,         init = 35,        ev = init
            VAR PTU_IN_pu8_string,          init = 32,        ev = init
    
    
        COMMENT OUTPUT SECTION:
            VAR PTU_IN_Pu8GetCharBitMap,    init =  &PTU_PsGetCharInfo,     ev = &PTU_FontsGetFont
            VAR PTU_Dma2dDrawChar,          init = &PTU_Dma2dDrawChar,      ev= &PTU_Pu8GetCharBitMap 
            VAR PTU_write_loc,              init = &PTU_write_loc,          ev=&PTU_Vp_fgfb2
        
        COMMENT INPUT/OUTPUT SECTION:
            --None 
            
        --Stub Calls:
        SIMUL
            STUB FontsGetFont (E_BEZEL_FONT+1)(T_BFC_FONT*) &PTU_FontsGetFont
            STUB Pu8GetCharBitMap(1)&PTU_Pu8GetCharBitMap
            STUB PsGetCharInfo 1..2=> (1)&PTU_PsGetCharInfo
            STUB VHadFlash()
            STUB EGetFlashState() FLASH_ON
            STUB Dma2dDrawChar 1..2=> (0,0,CAS_RED)
        END SIMUL

        -- Calling the Unit Under Test        
            #TextDispString(pc_string, u16_x, u16_y, e_tx_font, e_pen_color, e_tx_flash, e_txv, e_tx_align);
        END ELEMENT

END TEST -- TEST 10
    
TEST 11
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT In this testcase function parameters are exercised for minimum values.
    COMMENT [hdudispftext-TextDispString-DB-LLR-001]
    COMMENT The function TextDispString sets ps font to return value of FontsGetFont 
    COMMENT  with parameter e_tx_font.
    COMMENT
    COMMENT Equivalence Class 5
    COMMENT 
    COMMENT [hdudispftext-TextDispString-DB-LLR-004]
    COMMENT The function TextDispString calls DispStringAt function with parameters 
    COMMENT pc_string, u16_x, u16_y, ps font, e_pen_color, e_tx_flash and e_txv.
    COMMENT 
    COMMENT Equivalence Class 6
    COMMENT      
    COMMENT </TD> 
    

        ELEMENT
        
        COMMENT INPUT SECTION:
            VAR PTU_pc_string[0],      init = 0,                ev = init
            VAR PTU_pc_string[1],      init = 0,                ev = init
            VAR u16_x,                 init = 0,                ev = init
            VAR u16_y,                 init = 0,                ev = init
            VAR e_tx_font,             init = E_BEZEL_FONT+1,       ev = init
            VAR e_pen_color,           init = CAS_RED,              ev = init
            VAR e_tx_flash,            init = TX_FLASH,             ev = init
            VAR e_txv,                 init = V_NORMAL,             ev = init
            VAR e_tx_align,            init = ALIGN_LEFT,           ev = init
            VAR Vp_fgfb2,              init = &PTU_Vp_fgfb2,        ev = init
            VAR S16_panel_width,       init = 0,                ev = init
            VAR S16_panel_height,       init = 0,               ev = init
            VAR E_orientation,         init = E_LAND_SCAPE,     ev = init
            
                -- initialization of temporary structure
            STRUCTURE PTU_FontsGetFont,  init = { FontType => 0, FontHeight => 0, Baseline => 0, Reversed => 0, 
                                                    & p_var_type => { pProp =>&PTU_pProp } },  ev=init
        
            STRUCTURE PTU_PsGetCharInfo,  init = { Width => 0, DataSize => 0, p_var_type => { pData8 =>&PTU_pData8 } },  ev=init
            
            VAR PTU_OUT_pu8_string,         init = 35,        ev = init
            VAR PTU_IN_pu8_string,          init = 32,        ev = init
    
    
        COMMENT OUTPUT SECTION:
                --None 
            
        COMMENT INPUT/OUTPUT SECTION:
            --None 
            
        --Stub Calls:
        SIMUL
            STUB FontsGetFont (E_BEZEL_FONT+1)(T_BFC_FONT*) &PTU_FontsGetFont
        END SIMUL

        -- Calling the Unit Under Test        
            #TextDispString(pc_string, u16_x, u16_y, e_tx_font, e_pen_color, e_tx_flash, e_txv, e_tx_align);
        END ELEMENT

END TEST -- TEST 11
    
TEST 12
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT This testcase is exercised for maximum value output of the stub 'FontsGetFontHeight'.
    COMMENT [hdudispftext-TextDispString-DB-LLR-003]
    COMMENT Function TextDispString sets u16_y to u16_y minus return value of FontsGetFontHeight divide by TWO,
    COMMENT when e_tx_align is equal to ALIGN_CENTER_LEFT.
    COMMENT 
    COMMENT Equivalence Class 11
    COMMENT      
    COMMENT </TD> 
    

        ELEMENT
            
        COMMENT INPUT SECTION:
            VAR PTU_pc_string[0],      init = -128,             ev = init
            VAR PTU_pc_string[1],      init = 0,                ev = init
            VAR u16_x,                 init = 0,                ev = init
            VAR u16_y,                 init = 0,                ev = init
            VAR e_tx_font,             init = E_NO_FONT,        ev = init
            VAR e_pen_color,           init = BLACK,            ev = init
            VAR e_tx_flash,            init = TX_NO_FLASH,      ev = init
            VAR e_txv,                 init = V_NORMAL,         ev = init
            VAR e_tx_align,            init = ALIGN_CENTER_LEFT,ev = init
            VAR Vp_fgfb2,              init = &PTU_Vp_fgfb2,    ev = init
            VAR S16_panel_width,       init = 0,                ev = init
            VAR E_orientation,         init = E_LAND_SCAPE,     ev = init
            
                -- initialization of temporary structure
            STRUCTURE PTU_FontsGetFont,  init = { FontType => 0, FontHeight => 0, Baseline => 0, Reversed => 0, 
                                                    & p_var_type => { pProp =>&PTU_pProp } },  ev=init
            
            STRUCTURE PTU_PsGetCharInfo,  init = { Width => 0, DataSize => 0, p_var_type => { pData8 =>&PTU_pData8 } },  ev=init
            
            VAR PTU_IN_pu8_string,      init = 32,          ev = init
            VAR PTU_OUT_pu8_string,     init = 255,         ev = init
    
    
        COMMENT OUTPUT SECTION:
            VAR PTU_IN_Pu8GetCharBitMap,    init =  &PTU_PsGetCharInfo,     ev = &PTU_FontsGetFont
            VAR PTU_Dma2dDrawChar,          init = &PTU_Dma2dDrawChar,      ev = &PTU_Pu8GetCharBitMap 
            VAR PTU_write_loc,              init = &PTU_write_loc,          ev =&PTU_Vp_fgfb2
        
        COMMENT INPUT/OUTPUT SECTION:
            --None 
            
        --Stub Calls:
        SIMUL
            STUB FontsGetFont (E_NO_FONT)(T_BFC_FONT*) &PTU_FontsGetFont
            STUB FontsGetFontHeight 1=> (E_NO_FONT) 32767
            STUB Pu8GetCharBitMap(-128)&PTU_Pu8GetCharBitMap
            STUB PsGetCharInfo 1..2=> (-128)&PTU_PsGetCharInfo
            STUB Dma2dDrawChar 2=> (0,0,BLACK)
        END SIMUL

        -- Calling the Unit Under Test        
            #TextDispString(pc_string, u16_x, u16_y, e_tx_font, e_pen_color, e_tx_flash, e_txv, e_tx_align);
        END ELEMENT

END TEST -- TEST 12

TEST 13
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT This testcase is exercised for maximum value output of the stub 'FontsGetStringWidth'.
    COMMENT [hdudispftext-TextDispString-DB-LLR-002]
    COMMENT The function TextDispString sets u16_x to u16_x minus return value of 
    COMMENT FontsGetStringWidth with parameter pc_string and e_tx_font divide 
    COMMENT by TWO and set u16_y to u16_y minus return value of FontsGetFontHeight
    COMMENT with parameter e_tx_font divide by TWO when e_tx_align is equal to ALIGN_CENTER.
    COMMENT 
    COMMENT Equivalence Class 9
    COMMENT 
    COMMENT </TD> 
    

        ELEMENT
            
        COMMENT INPUT SECTION:
            VAR PTU_pc_string[0],      init = 125,                  ev = init
            VAR PTU_pc_string[1],      init = 0,                    ev = init
            VAR u16_x,                 init = 65535,                ev = init
            VAR u16_y,                 init = 65535,                ev = init
            VAR e_tx_font,             init = E_BEZEL_FONT,         ev = init
            VAR e_pen_color,           init = ORANGE,               ev = init
            VAR e_tx_flash,            init = TX_FLASH,             ev = init
            VAR e_txv,                 init = V_REVERSE,            ev = init
            VAR e_tx_align,            init = ALIGN_CENTER,         ev = init
            VAR Vp_fgfb2,              init = &PTU_Vp_fgfb2,        ev = init
            VAR S16_panel_width,       init = 0,                    ev = init
            VAR E_orientation,         init = E_LAND_SCAPE_PORTRAIT_UNKNOWN,    ev = init
            
                -- initialization of temporary structure
            STRUCTURE PTU_FontsGetFont,  init = { FontType => 0, FontHeight => 0, Baseline => 0, Reversed => 0, 
                                                    & p_var_type => { pProp =>&PTU_pProp } },  ev=init
        
            STRUCTURE PTU_PsGetCharInfo,  init = { Width => 0, DataSize => 0, p_var_type => { pData8 =>&PTU_pData8 } },  ev=init
            
            VAR PTU_OUT_pu8_string,         init = 35,        ev = init
    
    
        COMMENT OUTPUT SECTION:
            VAR PTU_IN_Pu8GetCharBitMap,    init =  &PTU_PsGetCharInfo,     ev = &PTU_FontsGetFont
            VAR PTU_IN_pu8_string,          init = 32,                      ev = &PTU_pc_string[0]
            VAR PTU_Dma2dDrawChar,          init = &PTU_Dma2dDrawChar,      ev= &PTU_Pu8GetCharBitMap 
            VAR PTU_write_loc,              init = (T_UINT16 *) (Vp_fgfb2+98304),      ev= init
        
        COMMENT INPUT/OUTPUT SECTION:
            --None 
            
        --Stub Calls:
        SIMUL
            STUB FontsGetFont (E_BEZEL_FONT)(T_BFC_FONT*) &PTU_FontsGetFont
            STUB FontsGetStringWidth 1=> (E_BEZEL_FONT) 32767
            STUB FontsGetFontHeight 1=> (E_BEZEL_FONT) 40
            STUB Pu8GetCharBitMap(125)&PTU_Pu8GetCharBitMap
            STUB PsGetCharInfo 1..2=> (125)&PTU_PsGetCharInfo
            STUB VHadFlash()
            STUB EGetFlashState() FLASH_OFF
            STUB Dma2dDrawChar(0,0,ORANGE)
        END SIMUL

        -- Calling the Unit Under Test        
            #TextDispString(pc_string, u16_x, u16_y, e_tx_font, e_pen_color, e_tx_flash, e_txv, e_tx_align);
        END ELEMENT

END TEST -- TEST 13

--TEST 14
--FAMILY robustness
--
--    COMMENT Test Description
--    COMMENT <TD> 
--    COMMENT In function TextDispString, Parameter 'pc_string' is exercised for NULL value. 
--    COMMENT 
--    COMMENT Equivalence Class 36
--    COMMENT      
--    COMMENT </TD> 
--    
--
--        ELEMENT
--        
--    COMMENT INPUT SECTION:
--        VAR u16_x,                 init = 65535,           ev = init
--        VAR u16_y,                 init = 65535,           ev = init
--        VAR e_tx_font,             init = E_BEZEL_FONT,    ev = init
--        VAR e_pen_color,           init = ORANGE,          ev = init
--        VAR e_tx_flash,            init = TX_FLASH,        ev = init
--        VAR e_txv,                 init = V_REVERSE,       ev = init
--        VAR e_tx_align,            init = ALIGN_CENTER,    ev = init
--        
--    COMMENT OUTPUT SECTION:
--        -- None
--        
--    COMMENT INPUT/OUTPUT SECTION:
--            --None 
--            
--        --Stub Calls:
--        SIMUL
--            --None 
--        END SIMUL
--
--        -- Calling the Unit Under Test        
--            #TextDispString(NULL, u16_x, u16_y, e_tx_font, e_pen_color, e_tx_flash, e_txv, e_tx_align);
--        END ELEMENT
--
-- END TEST -- TEST 14
        
TEST 15
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT This testcase is exercised for minimum value output of the stub 'FontsGetStringWidth'.
    COMMENT [hdudispftext-TextDispString-DB-LLR-002]
    COMMENT The function TextDispString sets u16_x to u16_x minus return value of 
    COMMENT FontsGetStringWidth with parameter pc_string and e_tx_font divide 
    COMMENT by TWO and set u16_y to u16_y minus return value of FontsGetFontHeight
    COMMENT with parameter e_tx_font divide by TWO when e_tx_align is equal to ALIGN_CENTER.
    COMMENT 
    COMMENT Equivalence Class 9
    COMMENT      
    COMMENT </TD> 
    

        ELEMENT
        
        COMMENT INPUT SECTION:
            VAR PTU_pc_string[0],      init = 125,                  ev = init
            VAR PTU_pc_string[1],      init = 0,                    ev = init
            VAR u16_x,                 init = 65535,                ev = init
            VAR u16_y,                 init = 65535,                ev = init
            VAR e_tx_font,             init = E_BEZEL_FONT,         ev = init
            VAR e_pen_color,           init = ORANGE,               ev = init
            VAR e_tx_flash,            init = TX_FLASH,             ev = init
            VAR e_txv,                 init = V_REVERSE,            ev = init
            VAR e_tx_align,            init = ALIGN_CENTER,         ev = init
            VAR Vp_fgfb2,              init = &PTU_Vp_fgfb2,        ev = init
            VAR S16_panel_width,       init = 0,                    ev = init
            VAR E_orientation,         init = E_LAND_SCAPE_PORTRAIT_UNKNOWN,    ev = init
            
                -- initialization of temporary structure
            STRUCTURE PTU_FontsGetFont,  init = { FontType => 0, FontHeight => 0, Baseline => 0, Reversed => 0, 
                                                    & p_var_type => { pProp =>&PTU_pProp } },  ev=init
            
            STRUCTURE PTU_PsGetCharInfo,  init = { Width => 0, DataSize => 0, p_var_type => { pData8 =>&PTU_pData8 } },  ev=init
            
            VAR PTU_OUT_pu8_string,         init = 35,              ev = init


        COMMENT OUTPUT SECTION:
            VAR PTU_IN_Pu8GetCharBitMap,    init =  &PTU_PsGetCharInfo,     ev = &PTU_FontsGetFont
            VAR PTU_IN_pu8_string,          init = 32,                      ev = &PTU_pc_string[0]
            VAR PTU_Dma2dDrawChar,          init = &PTU_Dma2dDrawChar,      ev= &PTU_Pu8GetCharBitMap 
            VAR PTU_write_loc,              init = (T_UINT16 *) (Vp_fgfb2+32766),      ev= init
            
        COMMENT INPUT/OUTPUT SECTION:
                --None 
                
        --Stub Calls:
        SIMUL
            STUB FontsGetFont (E_BEZEL_FONT)(T_BFC_FONT*) &PTU_FontsGetFont
            STUB FontsGetStringWidth 1=> (E_BEZEL_FONT) -32768
            STUB FontsGetFontHeight 1=> (E_BEZEL_FONT) 40
            STUB Pu8GetCharBitMap(125)&PTU_Pu8GetCharBitMap
            STUB PsGetCharInfo 1..2=> (125)&PTU_PsGetCharInfo
            STUB VHadFlash()
            STUB EGetFlashState() FLASH_OFF
            STUB Dma2dDrawChar(0,0,ORANGE)
        END SIMUL

        -- Calling the Unit Under Test        
            #TextDispString(pc_string, u16_x, u16_y, e_tx_font, e_pen_color, e_tx_flash, e_txv, e_tx_align);
        END ELEMENT

END TEST -- TEST 15
    
END SERVICE -- TextDispString

--------------------------------------------------------------------------------
-- Declaration of the service TextAllocat
--------------------------------------------------------------------------------
SERVICE TextAllocat
SERVICE_TYPE extern

    -- Tested service parameters declarations 
    #T_PTEXT pps_handle_add;
    #T_UINT8 pu8_string;
    #T_UINT16 u16_x0;
    #T_UINT16 u16_y0;
    #T_ETXALIGN e_tx_align;
    #T_ETXFONT e_tx_font;
    #T_EPENCOLOR e_pen_color;
    #T_ETXV e_txv;
    #T_ETXFLASH e_tx_flash;
    
    --Temperary variables to verify the function parameters
    #T_PTEXT PTU_pps_handle_add;
    #T_UINT8 PTU_pu8_string;

    --Temporary variable created for loop
    #T_UINT16 PTU_i=0;

    ENVIRONMENT ENV_TextAllocat
    
    VAR pu8_string,     init = 0,           ev = init
    VAR u16_x0,         init = 0,           ev = init
    VAR u16_y0,         init = 0,           ev = init
    VAR e_tx_align,     init = ALIGN_CENTER,    ev = init
    VAR e_tx_font,      init = E_NO_FONT,       ev = init
    VAR e_pen_color,    init = BLACK,           ev = init
    VAR e_txv,          init = V_NORMAL,        ev = init
    VAR e_tx_flash,     init = TX_NO_FLASH,     ev = init
    
    END ENVIRONMENT -- ENV_TextAllocat
    USE ENV_TextAllocat

TEST 1
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT [hdudispftext-TextAllocat-DB-LLR-002]
    COMMENT The function TextAllocat sets ps_text to address of a_text with index Text objects installed 
    COMMENT and does the following when Text objects installed is not equal to MAX_TEXT_OBJECTS.
    COMMENT - Set ppsOwner of ps text to pps_handle_add.
    COMMENT - Set u16X0 of ps text to u16_x0(nominal)
    COMMENT - Set u16Y0 of ps text to u16_y0(nominal)
    COMMENT - Set eTXAlign of ps text to e_tx_align(ALIGN_RIGHT)
    COMMENT - Set eTXFont of ps text to e_tx_font(E_BEZEL_FONT)
    COMMENT - Set  ePenColor of ps text to e_pen_color(ORANGE)
    COMMENT - Set eTXV of ps text to e_txv(V_REVERSE)
    COMMENT - Set eTXFlash of ps text to e_tx_flash(TX_FLASH)
    COMMENT - Set pu8String of ps text to pu8_string
    COMMENT - Set content of pps_handle_add to ps_text
    COMMENT 
    COMMENT Equivalence Class 3
    COMMENT      
    COMMENT </TD> 
    
        ELEMENT


        COMMENT INPUT SECTION:

            VAR u16_x0,                     init = 657,                         ev = init
            VAR pu8_string,                 init = 25,                          ev = init
            VAR u16_y0,                     init = 39,                          ev = init
            VAR e_tx_align,                 init = ALIGN_RIGHT,                 ev = init
            VAR e_tx_font,                  init = E_BEZEL_FONT,                ev = init
            VAR e_pen_color,                init = ORANGE,                      ev = init
            VAR e_txv,                      init = V_REVERSE,                   ev = init
            VAR e_tx_flash,                 init = TX_FLASH,                    ev = init
      
        COMMENT OUTPUT SECTION:
            
                --None 
            
        COMMENT INPUT/OUTPUT SECTION:
            
            VAR pps_handle_add->ppsOwner,   init = &PTU_pps_handle_add,         ev = &pps_handle_add
            VAR pps_handle_add->u16X0,      init = 10,                          ev = 657
            VAR pps_handle_add->u16Y0,      init = 120,                         ev = 39
            VAR pps_handle_add->eTXAlign,   init = ALIGN_CENTER,                ev = ALIGN_RIGHT                            
            VAR pps_handle_add->eTXFont,    init = E_NO_FONT,                   ev = E_BEZEL_FONT            
            VAR pps_handle_add->ePenColor,  init = PINK,                        ev = ORANGE            
            VAR pps_handle_add->eTXV,       init = V_NORMAL,                    ev = V_REVERSE            
            VAR pps_handle_add->eTXFlash,   init = TX_NO_FLASH,                 ev = TX_FLASH            
            VAR pps_handle_add->pu8String,  init = &PTU_pu8_string,             ev = &pu8_string            
                
            --Stub Calls:
        SIMUL
            
                --None 
                
        END SIMUL

        -- Function called to clear the Text objects installed
        #TextClear();

        -- Calling the Unit Under Test        
        #TextAllocat(&pps_handle_add, &pu8_string, u16_x0, u16_y0, e_tx_align, e_tx_font, e_pen_color, e_txv, e_tx_flash);
        
        END ELEMENT

END TEST -- TEST 1

TEST 2
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT [hdudispftext-TextAllocat-DB-LLR-002]
    COMMENT The function TextAllocat sets ps_text to address of a_text with index Text objects installed 
    COMMENT and does the following when Text objects installed is not equal to MAX_TEXT_OBJECTS.
    COMMENT - Set ppsOwner of ps text to pps_handle_add.
    COMMENT - Set u16X0 of ps text to u16_x0(nominal)
    COMMENT - Set u16Y0 of ps text to u16_y0(nominal)
    COMMENT - Set eTXAlign of ps text to e_tx_align(ALIGN_CENTER_LEFT)
    COMMENT - Set eTXFont of ps text to e_tx_font(E_LARGE_FONT)
    COMMENT - Set  ePenColor of ps text to e_pen_color(BRIGHT_GREEN)
    COMMENT - Set eTXV of ps text to e_txv(V_REVERSE)
    COMMENT - Set eTXFlash of ps text to e_tx_flash(TX_FLASH)
    COMMENT - Set pu8String of ps text to pu8_string
    COMMENT - Set content of pps_handle_add to ps_text
    COMMENT 
    COMMENT Equivalence Class 3
    COMMENT      
    COMMENT </TD> 
    
        ELEMENT


        COMMENT INPUT SECTION:

            VAR u16_x0,                     init = 65533,                       ev = init
            VAR pu8_string,                 init = 25,                          ev = init
            VAR u16_y0,                     init = 65533,                       ev = init
            VAR e_tx_align,                 init = ALIGN_CENTER_LEFT,           ev = init
            VAR e_tx_font,                  init = E_LARGE_FONT,                ev = init
            VAR e_pen_color,                init = BRIGHT_GREEN,                ev = init
            VAR e_txv,                      init = V_REVERSE,                   ev = init
            VAR e_tx_flash,                 init = TX_FLASH,                    ev = init                   
    
         COMMENT OUTPUT SECTION:
        
            --None 
        
         COMMENT INPUT/OUTPUT SECTION:
        
            VAR pps_handle_add->ppsOwner,   init = &PTU_pps_handle_add,         ev = &pps_handle_add
            VAR pps_handle_add->u16X0,      init = 10,                          ev = 65533
            VAR pps_handle_add->u16Y0,      init = 120,                         ev = 65533
            VAR pps_handle_add->eTXAlign,   init = ALIGN_CENTER,                ev = ALIGN_CENTER_LEFT                            
            VAR pps_handle_add->eTXFont,    init = E_NO_FONT,                   ev = E_LARGE_FONT            
            VAR pps_handle_add->ePenColor,  init = PINK,                        ev = BRIGHT_GREEN            
            VAR pps_handle_add->eTXV,       init = V_NORMAL,                    ev = V_REVERSE            
            VAR pps_handle_add->eTXFlash,   init = TX_NO_FLASH,                 ev = TX_FLASH            
            VAR pps_handle_add->pu8String,  init = &PTU_pu8_string,             ev = &pu8_string            
            
        --Stub Calls:
        SIMUL
        
            --None 
            
        END SIMUL
    -- Calling the Unit Under Test        
        #TextAllocat(&pps_handle_add, &pu8_string, u16_x0, u16_y0, e_tx_align, e_tx_font, e_pen_color, e_txv, e_tx_flash);
        
        END ELEMENT

END TEST -- TEST 2

TEST 3
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT [hdudispftext-TextAllocat-DB-LLR-002]
    COMMENT The function TextAllocat sets ps_text to address of a_text with index Text objects installed 
    COMMENT and does the following when Text objects installed is not equal to MAX_TEXT_OBJECTS.
    COMMENT - Set ppsOwner of ps text to pps_handle_add.
    COMMENT - Set u16X0 of ps text to u16_x0(minimum)
    COMMENT - Set u16Y0 of ps text to u16_y0(minimum)
    COMMENT - Set eTXAlign of ps text to e_tx_align(ALIGN_CENTER)
    COMMENT - Set eTXFont of ps text to e_tx_font(E_NO_FONT)
    COMMENT - Set  ePenColor of ps text to e_pen_color(BLACK)
    COMMENT - Set eTXV of ps text to e_txv(V_NORMAL)
    COMMENT - Set eTXFlash of ps text to e_tx_flash(TX_NO_FLASH)
    COMMENT - Set pu8String of ps text to pu8_string
    COMMENT - Set content of pps_handle_add to ps_text
    COMMENT 
    COMMENT Equivalence Class 3
    COMMENT      
    COMMENT </TD> 
    
        ELEMENT


        COMMENT INPUT SECTION:

            VAR u16_x0,                     init = 0,                           ev = init
            VAR pu8_string,                 init = 0,                           ev = init
            VAR u16_y0,                     init = 0,                           ev = init
            VAR e_tx_align,                 init = ALIGN_CENTER,                ev = init
            VAR e_tx_font,                  init = E_NO_FONT,                   ev = init
            VAR e_pen_color,                init = BLACK,                       ev = init
            VAR e_txv,                      init = V_NORMAL,                    ev = init
            VAR e_tx_flash,                 init = TX_NO_FLASH,                 ev = init                  
    
        COMMENT OUTPUT SECTION:
        
            --None 
        
        COMMENT INPUT/OUTPUT SECTION:
        
            VAR pps_handle_add->ppsOwner,   init = &PTU_pps_handle_add,         ev = &pps_handle_add
            VAR pps_handle_add->u16X0,      init = 20,                          ev = 0
            VAR pps_handle_add->u16Y0,      init = 120,                         ev = 0
            VAR pps_handle_add->eTXAlign,   init = ALIGN_CENTER_LEFT,           ev = ALIGN_CENTER                            
            VAR pps_handle_add->eTXFont,    init = E_LARGE_FONT,                ev = E_NO_FONT            
            VAR pps_handle_add->ePenColor,  init = BRIGHT_GREEN,                ev = BLACK            
            VAR pps_handle_add->eTXV,       init = V_REVERSE,                   ev = V_NORMAL           
            VAR pps_handle_add->eTXFlash,   init = TX_FLASH,                    ev = TX_NO_FLASH            
            VAR pps_handle_add->pu8String,  init = &PTU_pu8_string,             ev = &pu8_string            

        --Stub Calls:
        SIMUL
        
            --None 
            
        END SIMUL
    -- Calling the Unit Under Test        
        #TextAllocat(&pps_handle_add, &pu8_string, u16_x0, u16_y0, e_tx_align, e_tx_font, e_pen_color, e_txv, e_tx_flash);
        
        END ELEMENT

END TEST -- TEST 3

TEST 4
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT [hdudispftext-TextAllocat-DB-LLR-002]
    COMMENT The function TextAllocat sets ps_text to address of a_text with index Text objects installed 
    COMMENT and does the following when Text objects installed is not equal to MAX_TEXT_OBJECTS.
    COMMENT - Set ppsOwner of ps text to pps_handle_add.
    COMMENT - Set u16X0 of ps text to u16_x0(maximum)
    COMMENT - Set u16Y0 of ps text to u16_y0(maximum)
    COMMENT - Set eTXAlign of ps text to e_tx_align(ALIGN_LEFT)
    COMMENT - Set eTXFont of ps text to e_tx_font(E_BEZEL_FONT)
    COMMENT - Set  ePenColor of ps text to e_pen_color(ORANGE)
    COMMENT - Set eTXV of ps text to e_txv(V_REVERSE)
    COMMENT - Set eTXFlash of ps text to e_tx_flash(TX_FLASH)
    COMMENT - Set pu8String of ps text to pu8_string
    COMMENT - Set content of pps_handle_add to ps_text
    COMMENT 
    COMMENT Equivalence Class 3
    COMMENT      
    COMMENT </TD> 
    
        ELEMENT


        COMMENT INPUT SECTION:

            VAR u16_x0,                     init = 65535,                       ev = init
            VAR pu8_string,                 init = 25,                          ev = init
            VAR u16_y0,                     init = 65535,                       ev = init
            VAR e_tx_align,                 init = ALIGN_LEFT,                  ev = init
            VAR e_tx_font,                  init = E_BEZEL_FONT,                ev = init
            VAR e_pen_color,                init = ORANGE,                      ev = init
            VAR e_txv,                      init = V_REVERSE,                   ev = init
            VAR e_tx_flash,                 init = TX_FLASH,                    ev = init                
    
        COMMENT OUTPUT SECTION:
        
            --None 
        
        COMMENT INPUT/OUTPUT SECTION:
        
            VAR pps_handle_add->ppsOwner,   init = &PTU_pps_handle_add,         ev = &pps_handle_add
            VAR pps_handle_add->u16X0,      init = 10,                          ev = 65535
            VAR pps_handle_add->u16Y0,      init = 120,                         ev = 65535
            VAR pps_handle_add->eTXAlign,   init = ALIGN_CENTER,                ev = ALIGN_LEFT                            
            VAR pps_handle_add->eTXFont,    init = E_NO_FONT,                   ev = E_BEZEL_FONT            
            VAR pps_handle_add->ePenColor,  init = PINK,                        ev = ORANGE            
            VAR pps_handle_add->eTXV,       init = V_NORMAL,                    ev = V_REVERSE            
            VAR pps_handle_add->eTXFlash,   init = TX_NO_FLASH,                 ev = TX_FLASH            
            VAR pps_handle_add->pu8String,  init = &PTU_pu8_string,             ev = &pu8_string            
            
        --Stub Calls:
        SIMUL
        
            --None 
            
        END SIMUL
    -- Calling the Unit Under Test        
        #TextAllocat(&pps_handle_add, &pu8_string, u16_x0, u16_y0, e_tx_align, e_tx_font, e_pen_color, e_txv, e_tx_flash);
        
        END ELEMENT

END TEST -- TEST 4
    
--TEST 5
--FAMILY robustness
--
--    COMMENT Test Description
--    COMMENT <TD> 
--    COMMENT In function TextAllocat, Parameter 'pps_handle_add' and 'pu8_string' are exercised for NULL value.
--    COMMENT 
--    COMMENT Equivalence Class 36
--    COMMENT      
--    COMMENT </TD> 
--    
--    ELEMENT
--
--
--    COMMENT INPUT SECTION:
--
--            VAR u16_x0,                     init = 65533,                       ev = init
--            VAR pu8_string,                 init = 25,                          ev = init
--            VAR u16_y0,                     init = 65533,                       ev = init
--            VAR e_tx_align,                 init = ALIGN_CENTER_LEFT,           ev = init
--            VAR e_tx_font,                  init = E_LARGE_FONT,                ev = init
--            VAR e_pen_color,                init = BRIGHT_GREEN,                ev = init
--            VAR e_txv,                      init = V_REVERSE,                   ev = init
--            VAR e_tx_flash,                 init = TX_FLASH,                    ev = init                   
--    
--     COMMENT OUTPUT SECTION:
--        
--            --None 
--        
--     COMMENT INPUT/OUTPUT SECTION:
--        
--            --None 
--
--        --Stub Calls:
--        SIMUL
--        
--            --None 
--            
--        END SIMUL
--    -- Calling the Unit Under Test        
--        #TextAllocat(NULL, NULL, u16_x0, u16_y0, e_tx_align, e_tx_font, e_pen_color, e_txv, e_tx_flash);
--        
--        END ELEMENT
--
--END TEST -- TEST 5

TEST 6
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT [hdudispftext-TextAllocat-DB-LLR-001]
    COMMENT The function TextAllocat calls the function RterrWidget 
    COMMENT with parameters __FILE__ , __LINE__ and string "Too many text boxes."
    COMMENT when Text objects installed is equal to MAX_TEXT_OBJECTS.    
    COMMENT      
    COMMENT      
    COMMENT Equivalence Class 1,2
    COMMENT      
    COMMENT </TD> 
    
        ELEMENT


        COMMENT INPUT SECTION:

            VAR u16_x0,                     init = 65533,                       ev = init
            VAR pu8_string,                 init = 25,                          ev = init
            VAR u16_y0,                     init = 65533,                       ev = init
            VAR e_tx_align,                 init = ALIGN_CENTER_LEFT,           ev = init
            VAR e_tx_font,                  init = E_LARGE_FONT,                ev = init
            VAR e_pen_color,                init = BRIGHT_GREEN,                ev = init
            VAR e_txv,                      init = V_REVERSE,                   ev = init
            VAR e_tx_flash,                 init = TX_FLASH,                    ev = init
            VAR PTU_pc_file_out_1,          init="file1.c",                     ev= init
            VAR PTU_pc_message_out_1,       init="file2.c",                     ev= init
    
                        
        
        COMMENT OUTPUT SECTION:
            
            VAR PTU_pc_file_in_1,           init="AA",                              ev=PTU_SOURCE_PATH
            VAR PTU_pc_message_in_1,        init= "AAA",                            ev="Too many text boxes."
                    
        COMMENT INPUT/OUTPUT SECTION:
            
            VAR pps_handle_add->ppsOwner,   init = &PTU_pps_handle_add,         ev = &pps_handle_add
            VAR pps_handle_add->u16X0,      init = 10,                          ev = 65533
            VAR pps_handle_add->u16Y0,      init = 120,                         ev = 65533
            VAR pps_handle_add->eTXAlign,   init = ALIGN_CENTER,                ev = ALIGN_CENTER_LEFT                            
            VAR pps_handle_add->eTXFont,    init = E_NO_FONT,                   ev = E_LARGE_FONT            
            VAR pps_handle_add->ePenColor,  init = PINK,                        ev = BRIGHT_GREEN            
            VAR pps_handle_add->eTXV,       init = V_NORMAL,                    ev = V_REVERSE            
            VAR pps_handle_add->eTXFlash,   init = TX_NO_FLASH,                 ev = TX_FLASH            
            VAR pps_handle_add->pu8String,  init = &PTU_pu8_string,             ev = &pu8_string            
                
            --Stub Calls:
        SIMUL
        
            STUB RterrWidget(351)
            
        END SIMUL
        
        -- Function called to clear the Text objects installed
        #TextClear();        

        -- Calling the Unit Under Test        
        #for(PTU_i=0;PTU_i<=40;PTU_i++)
        #{
        #TextAllocat(&pps_handle_add, &pu8_string, u16_x0, u16_y0, e_tx_align, e_tx_font, e_pen_color, e_txv, e_tx_flash);
        #}
        END ELEMENT

END TEST -- TEST 6

END SERVICE -- TextAllocat


--------------------------------------------------------------------------------
-- Declaration of the service TextDraw
--------------------------------------------------------------------------------
SERVICE TextDraw
SERVICE_TYPE extern

    -- Tested service parameters declarations 
    #T_PTEXT pps_handle_add;
    #T_UINT8 pu8_string;
    #T_UINT16 u16_x0;
    #T_UINT16 u16_y0;
    #T_ETXALIGN e_tx_align;
    #T_ETXFONT e_tx_font;
    #T_EPENCOLOR e_pen_color;
    #T_ETXV e_txv;
    #T_ETXFLASH e_tx_flash;
    
    --Temperary variables to verify the function parameters
    #T_PTEXT PTU_pps_handle_add;
    #T_UINT8 PTU_pu8_string;

    ENVIRONMENT ENV_TextDraw
    VAR pu8_string,     init = 0,           ev = init
    VAR u16_x0,         init = 0,           ev = init
    VAR u16_y0,         init = 0,           ev = init
    VAR e_tx_align,     init = ALIGN_CENTER,    ev = init
    VAR e_tx_font,      init = E_NO_FONT,       ev = init
    VAR e_pen_color,    init = BLACK,           ev = init
    VAR e_txv,          init = V_NORMAL,        ev = init
    VAR e_tx_flash,     init = TX_NO_FLASH,     ev = init
    END ENVIRONMENT -- ENV_TextDraw
    USE ENV_TextDraw

    TEST 1
    FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT [hdudispftext-TextDraw-DB-LLR-001]
    COMMENT The function TextDraw initialises p_text to A_text and loops for ZERO times and 
    COMMENT does not call the function 'TextDispString'. 
    COMMENT  
    COMMENT 
    COMMENT 
    COMMENT Equivalence Class None
    COMMENT 
    COMMENT      
    COMMENT </TD> 
    
        ELEMENT


        COMMENT INPUT SECTION:
            -- initialization of temporary structure
            VAR PTU_tmp,            init = 0,       ev = init

        COMMENT OUTPUT SECTION:
            --None 
        
        COMMENT INPUT/OUTPUT SECTION:
            --None 
            
        --Stub Calls:
        SIMUL
            --None 
        END SIMUL
    
        -- Called to clear the variable Text_objects_installed       
        #TextClear();

        -- Calling the Unit Under Test        
        #TextDraw();
        END ELEMENT

END TEST -- TEST 1


TEST 2
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT [hdudispftext-TextDraw-DB-LLR-001]
    COMMENT The function TextDraw initialises p_text to A_text and loops for ONE time and 
    COMMENT calls the function 'TextDispString' and increments p_text. 
    COMMENT  
    COMMENT 
    COMMENT 
    COMMENT Equivalence Class 4
    COMMENT 
    COMMENT      
    COMMENT </TD> 
    
        ELEMENT


        COMMENT INPUT SECTION:

            -- initialization of temporary structure
            STRUCTURE PTU_FontsGetFont,  init = { FontType => 0x01010140, FontHeight => 24, Baseline => 19, Reversed => 0, p_var_type => { pData => NULL } },  ev=init
            VAR PTU_OUT_pu8_string,     init = 0,       ev = init
            VAR u16_x0,                     init = 65535,                       ev = init
            VAR pu8_string,                 init = 25,                          ev = init
            VAR u16_y0,                     init = 65535,                       ev = init
            VAR e_tx_align,                 init = ALIGN_LEFT,                  ev = init
            VAR e_tx_font,                  init = E_BEZEL_FONT,                ev = init
            VAR e_pen_color,                init = ORANGE,                      ev = init
            VAR e_txv,                      init = V_NORMAL,                   ev = init
            VAR e_tx_flash,                 init = TX_FLASH,                    ev = init                
    
        COMMENT OUTPUT SECTION:
        
            --None 
        
        COMMENT INPUT/OUTPUT SECTION:
        
            VAR pps_handle_add->ppsOwner,   init = &PTU_pps_handle_add,         ev = &pps_handle_add
            VAR pps_handle_add->u16X0,      init = 10,                          ev = 65535
            VAR pps_handle_add->u16Y0,      init = 120,                         ev = 65535
            VAR pps_handle_add->eTXAlign,   init = ALIGN_CENTER,                ev = ALIGN_LEFT                            
            VAR pps_handle_add->eTXFont,    init = E_NO_FONT,                   ev = E_BEZEL_FONT            
            VAR pps_handle_add->ePenColor,  init = PINK,                        ev = ORANGE            
            VAR pps_handle_add->eTXV,       init = V_REVERSE,                    ev = V_NORMAL            
            VAR pps_handle_add->eTXFlash,   init = TX_NO_FLASH,                 ev = TX_FLASH            
            VAR pps_handle_add->pu8String,  init = &PTU_pu8_string,             ev = &pu8_string            
            
         
        --Stub Calls:
        SIMUL
            STUB FontsGetFont 1=> (E_BEZEL_FONT) &PTU_FontsGetFont
            STUB VHadFlash()
            STUB EGetFlashState() FLASH_OFF
        END SIMUL
    
    --TextAllocat is called twice to increment Text_objects_installed
        #TextAllocat(&pps_handle_add, &pu8_string, u16_x0, u16_y0, e_tx_align, e_tx_font, e_pen_color, e_txv, e_tx_flash);  

    -- Calling the Unit Under Test        
        #TextDraw();
        END ELEMENT

END TEST -- TEST 2


TEST 3
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT [hdudispftext-TextDraw-DB-LLR-001]
    COMMENT The function TextDraw initialises p_text to A_text and loops for TWO times and 
    COMMENT calls the function 'TextDispString' and increments p_text. 
    COMMENT  
    COMMENT Equivalence Class 4
    COMMENT 
    COMMENT      
    COMMENT </TD> 
    
        ELEMENT


        COMMENT INPUT SECTION:

            -- initialization of temporary structure
            STRUCTURE PTU_FontsGetFont, init = { FontType => 0x01010140, FontHeight => 24, Baseline => 19, Reversed => 0, p_var_type => { pData => NULL } },  ev=init
            VAR PTU_OUT_pu8_string,     init = 0,                       ev = init
            VAR u16_x0,                     init = 65535,                       ev = init
            VAR pu8_string,                 init = 25,                          ev = init
            VAR u16_y0,                     init = 65535,                       ev = init
            VAR e_tx_align,                 init = ALIGN_LEFT,                  ev = init
            VAR e_tx_font,                  init = E_BEZEL_FONT,                ev = init
            VAR e_pen_color,                init = ORANGE,                      ev = init
            VAR e_txv,                      init = V_NORMAL,                    ev = init
            VAR e_tx_flash,                 init = TX_FLASH,                    ev = init                
    
        COMMENT OUTPUT SECTION:
        
            --None 
        
        COMMENT INPUT/OUTPUT SECTION:
        
            VAR pps_handle_add->ppsOwner,   init = &PTU_pps_handle_add,         ev = &pps_handle_add
            VAR pps_handle_add->u16X0,      init = 10,                          ev = 65535
            VAR pps_handle_add->u16Y0,      init = 120,                         ev = 65535
            VAR pps_handle_add->eTXAlign,   init = ALIGN_CENTER,                ev = ALIGN_LEFT                            
            VAR pps_handle_add->eTXFont,    init = E_NO_FONT,                   ev = E_BEZEL_FONT            
            VAR pps_handle_add->ePenColor,  init = PINK,                        ev = ORANGE            
            VAR pps_handle_add->eTXV,       init = V_REVERSE,                    ev = V_NORMAL            
            VAR pps_handle_add->eTXFlash,   init = TX_NO_FLASH,                 ev = TX_FLASH            
            VAR pps_handle_add->pu8String,  init = &PTU_pu8_string,             ev = &pu8_string            
            
           
        --Stub Calls:
        SIMUL
            STUB FontsGetFont 3=> (E_BEZEL_FONT) &PTU_FontsGetFont
            STUB FontsGetStringWidth 1=> (E_NO_FONT) 40
            STUB FontsGetFontHeight 1=> (E_NO_FONT) 40
            STUB VHadFlash 1..2=> ()
            STUB EGetFlashState 1..2=> () FLASH_OFF
        END SIMUL
        
    --TextAllocat is called twice to increment Text_objects_installed
        #TextAllocat(&pps_handle_add, &pu8_string, u16_x0, u16_y0, e_tx_align, e_tx_font, e_pen_color, e_txv, e_tx_flash);   
        #TextAllocat(&pps_handle_add, &pu8_string, u16_x0, u16_y0, e_tx_align, e_tx_font, e_pen_color, e_txv, e_tx_flash);

    -- Calling the Unit Under Test        
        #TextDraw();
        END ELEMENT

END TEST -- TEST 3
    
END SERVICE -- TextDraw


--------------------------------------------------------------------------------
-- Declaration of the service TextClear
--------------------------------------------------------------------------------
SERVICE TextClear
SERVICE_TYPE extern

    -- Tested service parameters declarations 
    #T_PTEXT pps_handle_add;
    #T_UINT8 pu8_string;
    #T_UINT16 u16_x0;
    #T_UINT16 u16_y0;
    #T_ETXALIGN e_tx_align;
    #T_ETXFONT e_tx_font;
    #T_EPENCOLOR e_pen_color;
    #T_ETXV e_txv;
    #T_ETXFLASH e_tx_flash;
    
    --Temperary variables to verify the function parameters
    #T_PTEXT PTU_pps_handle_add;
    #T_UINT8 PTU_pu8_string;

    ENVIRONMENT ENV_TextClear
    VAR pu8_string,     init = 0,           ev = init
    VAR u16_x0,         init = 0,           ev = init
    VAR u16_y0,         init = 0,           ev = init
    VAR e_tx_align,     init = ALIGN_CENTER,    ev = init
    VAR e_tx_font,      init = E_NO_FONT,       ev = init
    VAR e_pen_color,    init = BLACK,           ev = init
    VAR e_txv,          init = V_NORMAL,        ev = init
    VAR e_tx_flash,     init = TX_NO_FLASH,     ev = init
     END ENVIRONMENT -- ENV_TextClear
    USE ENV_TextClear

TEST 1
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT [hdudispftext-TextClear-DB-LLR-001]
    COMMENT The function TextClear sets text object installed to ZERO.
    COMMENT 
    COMMENT Note: The LLR is tested through the function 'TextDraw and TextAllocat', where 
    COMMENT text object installed is incremented in 'TextAllocat' and 
    COMMENT text object installed is checked in 'TextDraw' .
    COMMENT 
    COMMENT Equivalence Class None
    COMMENT      
    COMMENT </TD> 
    
        ELEMENT


        COMMENT INPUT SECTION:

            VAR u16_x0,                     init = 65535,                       ev = init
            VAR pu8_string,                 init = 25,                          ev = init
            VAR u16_y0,                     init = 65535,                       ev = init
            VAR e_tx_align,                 init = ALIGN_LEFT,                  ev = init
            VAR e_tx_font,                  init = E_BEZEL_FONT,                ev = init
            VAR e_pen_color,                init = ORANGE,                      ev = init
            VAR e_txv,                      init = V_REVERSE,                   ev = init
            VAR e_tx_flash,                 init = TX_FLASH,                    ev = init                
    
        COMMENT OUTPUT SECTION:
        
            --None 
        
        COMMENT INPUT/OUTPUT SECTION:
        
            VAR pps_handle_add->ppsOwner,   init = &PTU_pps_handle_add,         ev = &pps_handle_add
            VAR pps_handle_add->u16X0,      init = 10,                          ev = 65535
            VAR pps_handle_add->u16Y0,      init = 120,                         ev = 65535
            VAR pps_handle_add->eTXAlign,   init = ALIGN_CENTER,                ev = ALIGN_LEFT                            
            VAR pps_handle_add->eTXFont,    init = E_NO_FONT,                   ev = E_BEZEL_FONT            
            VAR pps_handle_add->ePenColor,  init = PINK,                        ev = ORANGE            
            VAR pps_handle_add->eTXV,       init = V_NORMAL,                    ev = V_REVERSE            
            VAR pps_handle_add->eTXFlash,   init = TX_NO_FLASH,                 ev = TX_FLASH            
            VAR pps_handle_add->pu8String,  init = &PTU_pu8_string,             ev = &pu8_string            
            
            
        --Stub Calls:
        SIMUL
            --None 
        END SIMUL
    
        --TextAllocat is called twice to increment Text_objects_installed
        #TextAllocat(&pps_handle_add, &pu8_string, u16_x0, u16_y0, e_tx_align, e_tx_font, e_pen_color, e_txv, e_tx_flash);   
        #TextAllocat(&pps_handle_add, &pu8_string, u16_x0, u16_y0, e_tx_align, e_tx_font, e_pen_color, e_txv, e_tx_flash);

        -- Calling the Unit Under Test        
        #TextClear();

        -- Called to verify the variable Text_objects_installed       
        #TextDraw();
        END ELEMENT

END TEST -- TEST 1

END SERVICE -- TextClear

