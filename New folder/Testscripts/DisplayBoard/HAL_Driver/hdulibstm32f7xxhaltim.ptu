HEADER hdulibstm32f7xxhaltim,Source Code Ver : 1.2,TestScript Ver : 1.2
--------------------------------------------------------------------------------
-- Author Name         : Neelu Vaishnav
--
-- File Name           : hdulibstm32f7xxhaltim.ptu
--
-- Test Creation Date  : 30.10.2017
--
-- Tested Functions    : HalTimPwmInit
--                       HalTimPwmMspInit
--                       HalTimPwmStart
--                       HalTimPwmConfigChannel
--                       TimBaseSetConfig
--                       TimOc1SetConfig
--                       TimOc2SetConfig
--                       TimOc3SetConfig
--                       TimOc4SetConfig
--                       TimCcxChannelCmd
--
-- Version History     :
--
--  TEST-VERSION        TEST-DATE        TESTER NAME        MODIFICATIONS
--  ------------        ---------        -----------        -------------
--      1.1             30.10.2017       Neelu Vaishnav      Created the ptu file.
--      1.2             10.11.2017       Lakshmi Kumari K    Updated as per PR 100171
--------------------------------------------------------------------------------
--
-- TESTED FILE INCLUDE DIRECTIVES 
--
--------------------------------------------------------------------------------

#/*============================================================================*/
#/* Module specific includes                                                   */
#/*============================================================================*/

##include "hdulibstm32f7xxhal.h"    
##include "hdulibbasictypes.h"       
##include "hdulibstm32f7xxhaltim.h"  
##include "hdulibstm32f7xxhaldef.h"  
##include "hdulibstm32f746xx.h"      
##include "hdulibstm32f7xxhaltimex.h"
##include "hdulibbasictypes.h"       
--------------------------------------------------------------------------------
--
-- TESTED FILE DECLARATIONS 
--
--------------------------------------------------------------------------------

-- Declarations of the global variables of the tested file
	# volatile  T_INT32 Itm_rx_buffer; 

-- Declarations of the temporary variable
	--None
--------------------------------------------------------------------------------

BEGIN
                                    
    COMMENT Author Name      :  Neelu Vaishnav 
    COMMENT
    COMMENT File Name        :  hdulibstm32f7xxhaltim.ptu
    COMMENT
    COMMENT Tested Functions :  HalTimPwmInit
    COMMENT                     HalTimPwmMspInit
    COMMENT                     HalTimPwmStart
    COMMENT                     HalTimPwmConfigChannel
    COMMENT                     TimBaseSetConfig
    COMMENT                     TimOc1SetConfig
    COMMENT                     TimOc2SetConfig
    COMMENT                     TimOc3SetConfig
    COMMENT                     TimOc4SetConfig
    COMMENT                     TimCcxChannelCmd
    COMMENT
    COMMENT Assumptions and Constraints
    COMMENT <AC>
    COMMENT Assumption(s):
    COMMENT None
    COMMENT 
    COMMENT Constraint(s):
    COMMENT 1.Header file "hdulibstm32f746xx.h" is modified for testing purpose. 
    COMMENT   The macros 'TIM1, TIM2, TIM3, TIM4, TIM5, TIM8, TIM9, TIM10, TIM11, TIM12, TIM13, TIM14'  is modified for stubbing hardware address.
    COMMENT
    COMMENT     Eg:
    COMMENT
    COMMENT     /*Commented for testing purpose*/
    COMMENT     /*#define TIM1                ((T_TIM *) TIM1_BASE)*/
    COMMENT
    COMMENT     /* Modified macro by stubbing hardware address for testing purpose*/
    COMMENT     T_TIM PTU_TIM1_BASE;
    COMMENT     #define TIM1                ((T_TIM *) &PTU_TIM1_BASE)
    COMMENT
    COMMENT 2.‘do-while’ loop present inside the macro __HAL_LOCK and __HAL_UNLOCK cannot be covered for TRUE condition and 
    COMMENT   ‘2 loops or more’ times since it is controlled by Macro ZERO in function 'HalTimPwmConfigChannel'.
    COMMENT
    COMMENT         Code Snippet:
    COMMENT         __HAL_LOCK(h_tim);
    COMMENT         __HAL_UNLOCK(h_tim);  
    COMMENT
	COMMENT 3.Following Test script related warnings are observed during Target Execution for volatile keyword member/variable:
	COMMENT   warning #191-D: type qualifier is meaningless on cast type
	COMMENT
    COMMENT </AC>
    COMMENT
    COMMENT Equivalence Class Description
    COMMENT <ECD>
    COMMENT 
    COMMENT Class 1
    COMMENT In function 'HalTimPwmInit', h_tim is equal to NULL.
    COMMENT 
    COMMENT Class 2
    COMMENT In function 'HalTimPwmInit', h_tim is not equal to NULL.
    COMMENT 
    COMMENT Class 3
    COMMENT The function 'HalTimPwmInit', returns HAL_ERROR.
    COMMENT 
    COMMENT Class 4 
    COMMENT The function 'HalTimPwmInit', State of h_tim is equal to HAL_TIM_STATE_RESET .
    COMMENT 
    COMMENT Class 5
    COMMENT In function 'HalTimPwmInit', State of h_tim is not equal to HAL_TIM_STATE_RESET. 
    COMMENT 
    COMMENT Class 7
    COMMENT The function 'HalTimPwmInit', returns HAL_OK.
    COMMENT 
    COMMENT Class 8 
    COMMENT The function 'HalTimPwmMspInit' , calls macro UNUSED with h_tim as parameter.
    COMMENT 
    COMMENT Class 9
    COMMENT In function 'HalTimPwmStart', return value of macro IS_TIM_ADVANCED_INSTANCE with Instance of h_tim is not equal to RESET . 
    COMMENT 
    COMMENT Class 10
    COMMENT In function 'HalTimPwmStart', return value of macro IS_TIM_ADVANCED_INSTANCE with Instance of h_tim is equal to RESET
    COMMENT 
    COMMENT Class 11
    COMMENT The function 'HalTimPwmStart', returns HAL_OK.
    COMMENT 
    COMMENT Class 12
    COMMENT The function 'HalTimPwmConfigChannel' , channel is TIM_CHANNEL_1.
    COMMENT
    COMMENT Class 13
    COMMENT In function 'HalTimPwmConfigChannel', channel is TIM_CHANNEL_2.
    COMMENT 
    COMMENT Class 14
    COMMENT In function 'HalTimPwmConfigChannel', channel is TIM_CHANNEL_3.
    COMMENT 
    COMMENT Class 15
    COMMENT The function 'HalTimPwmConfigChannel', channel is TIM_CHANNEL_4.
    COMMENT 
    COMMENT Class 16
    COMMENT The function 'HalTimPwmConfigChannel', channel is other than TIM_CHANNEL_1,TIM_CHANNEL_2,TIM_CHANNEL_3 and TIM_CHANNEL_4 .
    COMMENT 
    COMMENT Class 17
    COMMENT In function 'HalTimPwmConfigChannel', returns HAL_OK. 
    COMMENT 
    COMMENT Class 34
    COMMENT In function 'HalTimPwmConfigChannel', returns HAL_BUSY. 
    COMMENT 
    COMMENT Class 18
    COMMENT In function 'TimBaseSetConfig', return value of the macro IS_TIM_CC3_INSTANCE is not equal to RESET 
    COMMENT 
    COMMENT Class 19
    COMMENT The function 'TimBaseSetConfig', return value of the macro IS_TIM_CC3_INSTANCE is equal to RESET 
    COMMENT 
    COMMENT Class 20
    COMMENT The function 'TimBaseSetConfig', return value of the macro IS_TIM_CC1_INSTANCE is not equal to RESET 
    COMMENT 
    COMMENT Class 21
    COMMENT In function 'TimBaseSetConfig', return value of the macro IS_TIM_CC1_INSTANCE is equal to RESET 
    COMMENT 
    COMMENT Class 22
    COMMENT In function 'TimBaseSetConfig', return value of the macro IS_TIM_ADVANCED_INSTANCE is not equal to RESET 
    COMMENT 
    COMMENT Class 23
    COMMENT The function 'TimBaseSetConfig', return value of the macro IS_TIM_ADVANCED_INSTANCE is equal to RESET 
    COMMENT 
    COMMENT Class 24
    COMMENT The function 'TimOc1SetConfig' , return value of the macro IS_TIM_ADVANCED_INSTANCE is not equal to RESET 
    COMMENT 
    COMMENT Class 25
    COMMENT The function 'TimOc1SetConfig' , return value of the macro IS_TIM_ADVANCED_INSTANCE is equal to RESET 
    COMMENT 
    COMMENT Class 26
    COMMENT The function 'TimOc2SetConfig' , return value of the macro IS_TIM_ADVANCED_INSTANCE is not equal to RESET 
    COMMENT 
    COMMENT Class 27
    COMMENT The function 'TimOc2SetConfig' , return value of the macro IS_TIM_ADVANCED_INSTANCE is equal to RESET 
    COMMENT 
    COMMENT Class 28
    COMMENT The function 'TimOc3SetConfig' , return value of the macro IS_TIM_ADVANCED_INSTANCE is not equal to RESET 
    COMMENT 
    COMMENT Class 29
    COMMENT The function 'TimOc3SetConfig' , return value of the macro IS_TIM_ADVANCED_INSTANCE is equal to RESET 
    COMMENT 
    COMMENT Class 30
    COMMENT The function 'TimOc4SetConfig' , return value of the macro IS_TIM_ADVANCED_INSTANCE is not equal to RESET 
    COMMENT 
    COMMENT Class 31
    COMMENT The function 'TimOc4SetConfig' , return value of the macro IS_TIM_ADVANCED_INSTANCE is equal to RESET   
    COMMENT 
    COMMENT Class 32
    COMMENT In the function 'TimCcxChannelCmd' , channel is TIM_CHANNEL_1.  
    COMMENT 
    COMMENT Class 33
    COMMENT In the function 'TimCcxChannelCmd' , channel is TIM_CHANNEL_2.
    COMMENT 
    COMMENT Class 49
    COMMENT In the function 'TimCcxChannelCmd' , channel is TIM_CHANNEL_3.  
    COMMENT 
    COMMENT Class 50
    COMMENT In the function 'TimCcxChannelCmd' , channel is TIM_CHANNEL_4.
    COMMENT 
    COMMENT Class 51
    COMMENT In the function 'TimCcxChannelCmd' , channel is TIM_CHANNEL_5.  
    COMMENT 
    COMMENT Class 52
    COMMENT In the function 'TimCcxChannelCmd' , channel is TIM_CHANNEL_6.
    COMMENT 
    COMMENT Class 53
    COMMENT In the function 'TimCcxChannelCmd' , channel is TIM_CHANNEL_ALL.
    COMMENT 
    COMMENT Class 54
    COMMENT In the function 'TimCcxChannelCmd' , channel_state is TIM_CCX_ENABLE.  
    COMMENT 
    COMMENT Class 55
    COMMENT In the function 'TimCcxChannelCmd' , channel_state is TIM_CCX_DISABLE.  
    COMMENT 
    COMMENT Class 56
    COMMENT In the function 'HalTimPwmConfigChannel' , calls the macro __HAL_LOCK.  
    COMMENT 
    COMMENT Class 57
    COMMENT In the function 'HalTimPwmConfigChannel' , Calls the function 'TimOc1SetConfig'.
    COMMENT 
    COMMENT Class 58
    COMMENT In the function 'HalTimPwmConfigChannel' , Calls the function 'TimOc2SetConfig'.    
    COMMENT 
    COMMENT Class 59
    COMMENT In the function 'HalTimPwmConfigChannel' , Calls the function 'TimOc3SetConfig'.    
    COMMENT 
    COMMENT Class 60
    COMMENT In the function 'HalTimPwmConfigChannel' , Calls the function 'TimOc4SetConfig'.    
    COMMENT 
    COMMENT Class 61
    COMMENT In the function 'HalTimPwmConfigChannel' , calls the macro __HAL_UNLOCK.
    COMMENT 
    COMMENT Class 62
    COMMENT In the function 'HalTimPwmStart' , calls the macro __HAL_TIM_ENABLE.
    COMMENT 
    COMMENT Class 63
    COMMENT In the function 'HalTimPwmStart' , calls the function TimCcxChannelCmd.
    COMMENT 
    COMMENT Class 6
    COMMENT In the function 'HalTimPwmInit' , calls the macro TimBaseSetConfig.     
    COMMENT 
    COMMENT Invalid Class(es)
    COMMENT Class 34
    COMMENT In function 'HalTimPwmMspInit', Invalid Reference is passed to h_tim parameter
    COMMENT 
    COMMENT Class 35
    COMMENT In function 'HalTimPwmStart', Invalid Reference is passed to h_tim parameter
    COMMENT 
    COMMENT Class 36
    COMMENT In function 'HalTimPwmConfigChannel', Invalid Reference is passed to h_tim parameter
    COMMENT 
    COMMENT Class 37
    COMMENT In function 'HalTimPwmConfigChannel', Invalid Reference is passed to s_config parameter
    COMMENT
    COMMENT Class 38
    COMMENT In function 'TimBaseSetConfig', Invalid Reference is passed to tim_x parameter
    COMMENT
    COMMENT Class 39
    COMMENT In function 'TimBaseSetConfig', Invalid Reference is passed to structure parameter
    COMMENT
    COMMENT Class 40
    COMMENT In function 'TimOc1SetConfig', Invalid Reference is passed to tim_x parameter
    COMMENT
    COMMENT Class 41
    COMMENT In function 'TimOc1SetConfig', Invalid Reference is passed to oc_onfig parameter
    COMMENT
    COMMENT Class 42
    COMMENT In function 'TimOc2SetConfig', Invalid Reference is passed to tim_x parameter
    COMMENT
    COMMENT Class 43
    COMMENT In function 'TimOc2SetConfig', Invalid Reference is passed to oc_onfig parameter
    COMMENT 
    COMMENT Class 44
    COMMENT In function 'TimOc3SetConfig', Invalid Reference is passed to tim_x parameter
    COMMENT
    COMMENT Class 45
    COMMENT In function 'TimOc3SetConfig', Invalid Reference is passed to oc_onfig parameter
    COMMENT
    COMMENT Class 46
    COMMENT In function 'TimOc4SetConfig', Invalid Reference is passed to tim_x parameter
    COMMENT
    COMMENT Class 47
    COMMENT In function 'TimOc4SetConfig', Invalid Reference is passed to oc_onfig parameter
    COMMENT
    COMMENT Class 48
    COMMENT In function 'TimCcxChannelCmd', Invalid Reference is passed to tim_x parameter
    COMMENT </ECD>

--------------------------------------------------------------------------------
--
-- STUB DECLARATIONS OF THE TESTED OR INTEGRATED UNITS
--
--------------------------------------------------------------------------------
SIMUL

        DEFINE STUB hdulibstm32f7xxhaltim_c
        
            --None
                
        END DEFINE

ELSE_SIMUL

            --No action defined as of now if the module is not simulated
   
END SIMUL
--------------------------------------------------------------------------------
--
-- ENVIRONMENTS DECLARATIONS
--
--------------------------------------------------------------------------------
--IF HOST

-- No special things that have to be done on the host to run the test.

--ELSE

-- No action defined for the target execution as of now

--END IF

--------------------------------------------------------------------------------
-- TESTED FILE ENVIRONNEMENT
--------------------------------------------------------------------------------

--Environment of the file hdulibstm32f7xxhaltim_c

--ENVIRONMENT  ENV_hdulibstm32f7xxhaltim_c

      --None

--END ENVIRONMENT -- ENV_hdulibstm32f7xxhaltim_c

--USE ENV_hdulibstm32f7xxhaltim_c

--------------------------------------------------------------------------------
--
-- SERVICES DECLARATIONS
--
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
-- Declaration of the service HalTimPwmMspInit
--------------------------------------------------------------------------------
SERVICE HalTimPwmMspInit
SERVICE_TYPE extern

    -- Tested service parameters declarations
    #T_TIM_HANDLE h_tim;

    ENVIRONMENT ENV_HalTimPwmMspInit
    STRUCTURE h_tim,        init = { Instance => NIL, Init => { Prescaler => 0, CounterMode => 0, Period => 0, ClockDivision => 0, 
    & RepetitionCounter => 0 }, Channel => HAL_TIM_ACTIVE_CHANNEL_1, hdma => { others => NIL }, Lock => HAL_UNLOCKED, State => HAL_TIM_STATE_RESET },      
    & ev = init
    END ENVIRONMENT -- ENV_HalTimPwmMspInit
    USE ENV_HalTimPwmMspInit

TEST 1
FAMILY nominal

    COMMENT Test Description 
    COMMENT <TD>
    COMMENT [hdulibstm32f7xxhaltim-HalTimPwmMspInit-DB-LLR-001]
    COMMENT The function prevents unused argument(s) compilation warning by calling macro UNUSED with h_tim as parameter.
    COMMENT Equivalence Class 8
    COMMENT </TD>

    ELEMENT

            COMMENT INPUT SECTION:
                    --None

            COMMENT OUTPUT SECTION:
                    --None

            COMMENT INPUT/OUTPUT SECTION:
                    --None
                    
        -- Stub calls :
        SIMUL

            --None

        END SIMUL

         -- Calling the Unit Under Test :
        #HalTimPwmMspInit(&h_tim);

    END ELEMENT

END TEST -- TEST 1
    
--    TEST 2
--    FAMILY robustness
--
--  COMMENT Test Description 
--  COMMENT <TD>
--  COMMENT [hdulibstm32f7xxhaltim-HalTimPwmMspInit-DB-LLR-001]
--  COMMENT This test case is evaluated by passing Invalid Reference to h_tim parameter.
--  COMMENT Equivalence Class 34
--  COMMENT </TD>
--
--        ELEMENT
--
--            COMMENT INPUT SECTION:
--                  --None
--          
--            COMMENT OUTPUT SECTION:
--                  --None
--
--            COMMENT INPUT/OUTPUT SECTION:
--                  --None
--                    
--        -- Stub calls :
--        SIMUL
--
--          --None
--
--        END SIMUL
--
--            -- Calling the Unit Under Test :
--            #HalTimPwmMspInit(NULL);
--
--        END ELEMENT
--
--    END TEST -- TEST 2

END SERVICE -- HalTimPwmMspInit


--------------------------------------------------------------------------------
-- Declaration of the service TimOc1SetConfig
--------------------------------------------------------------------------------
SERVICE TimOc1SetConfig
SERVICE_TYPE extern

    -- Tested service parameters declarations
    #T_TIM tim_x;
    #T_TIM_OC_INIT oc_onfig;

    ENVIRONMENT ENV_TimOc1SetConfig
    STRUCTURE tim_x,        init = { CR1 => 0, CR2 => 0, SMCR => 0, DIER => 0, SR => 0, EGR => 0, CCMR1 => 0, CCMR2 => 0, CCER => 0, CNT => 0, 
    & PSC => 0, ARR => 0, RCR => 0, CCR1 => 0, CCR2 => 0, CCR3 => 0, CCR4 => 0, BDTR => 0, DCR => 0, DMAR => 0, OR => 0, CCMR3
    &=> 0, CCR5 => 0, CCR6 => 0 },      ev = init

    STRUCTURE PTU_TIM1_BASE,        init = { CR1 => 0, CR2 => 0, SMCR => 0, DIER => 0, SR => 0, EGR => 0, CCMR1 => 0, CCMR2 => 0, 
    & CCER => 0, CNT => 0, PSC => 0, ARR => 0, RCR => 0, CCR1 => 0, CCR2 => 0, CCR3 => 0, CCR4 => 0, BDTR => 0, DCR => 0, DMAR => 0, OR => 0, CCMR3
    &=> 0, CCR5 => 0, CCR6 => 0 },      ev = init

    STRUCTURE PTU_TIM8_BASE,        init = { CR1 => 0, CR2 => 0, SMCR => 0, DIER => 0, SR => 0, EGR => 0, CCMR1 => 0, CCMR2 => 0, 
    & CCER => 0, CNT => 0, PSC => 0, ARR => 0, RCR => 0, CCR1 => 0, CCR2 => 0, CCR3 => 0, CCR4 => 0, BDTR => 0, DCR => 0, DMAR => 0, OR => 0, CCMR3
    &=> 0, CCR5 => 0, CCR6 => 0 },      ev = init

    STRUCTURE oc_onfig,     init = { OCMode => 0, Pulse => 0, OCPolarity => 0, OCNPolarity => 0, OCFastMode => 0, OCIdleState => 0, 
    & OCNIdleState => 0 },              ev = init
    END ENVIRONMENT -- ENV_TimOc1SetConfig
    USE ENV_TimOc1SetConfig

TEST 1
FAMILY nominal

    COMMENT Test Description 
    COMMENT <TD>
    COMMENT [hdulibstm32f7xxhaltim-TimOc1SetConfig-DB-LLR-001]
    COMMENT The function sets CCER of tim_x to result of bitwise AND operation of CCER of tim_x and Negated value of TIM_CCER_CC1E. 
    COMMENT Equivalence Class None
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimOc1SetConfig-DB-LLR-002]
    COMMENT The function sets CCER to CCER of tim_x.
    COMMENT Equivalence Class None
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimOc1SetConfig-DB-LLR-003]
    COMMENT The function sets CR2 to CR2 of tim_x.
    COMMENT Equivalence Class None
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimOc1SetConfig-DB-LLR-004]
    COMMENT The function sets CCMR1 to CCMR1 of tim_x.
    COMMENT Equivalence Class None
    COMMENT
    COMMENT [hdulibstm32f7xxhaltim-TimOc1SetConfig-DB-LLR-005]
    COMMENT The function does the following to reset the Output Compare Mode Bits.
    COMMENT 1.Sets CCMR1 to result of bitwise AND operation of CCMR1 and negated value of TIM_CCMR1_OC1M.
    COMMENT 2.Sets CCMR1 to result of bitwise AND operation of CCMR1 and negated value of TIM_CCMR1_CC1S.
    COMMENT 3.Sets CCMR1 to result of bitwise OR operation of CCMR1 and OCMode of oc_onfig. 
    COMMENT Equivalence Class None
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimOc1SetConfig-DB-LLR-006]
    COMMENT The function does the following to reset Output Polarity level.
    COMMENT 1.Sets CCER to result of bitwise  AND operation of CCER and  negated value of TIM_CCER_CC1P.
    COMMENT 2.Sets CCER to result of bitwise  OR operation of CCER and OCPolarity of oc_onfig.
    COMMENT Equivalence Class None
    COMMENT
    COMMENT [hdulibstm32f7xxhaltim-TimOc1SetConfig-DB-LLR-007]
    COMMENT The function does nothing when return value of IS_TIM_ADVANCED_INSTANCE with parameter tim_x is equal to RESET.
    COMMENT Equivalence Class 25
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimOc1SetConfig-DB-LLR-008]
    COMMENT The function writes into tim_x CR2 by setting it with CR2. 
    COMMENT Equivalence Class None
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimOc1SetConfig-DB-LLR-009]
    COMMENT The function writes into tim_x CCMR1 by setting it with CCMR1.
    COMMENT Equivalence Class None
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimOc1SetConfig-DB-LLR-010]
    COMMENT The function writes into tim_x CCR1 by setting it with Pulse of oc_onfig.  
    COMMENT Equivalence Class None
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimOc1SetConfig-DB-LLR-011]
    COMMENT The function writes into tim_x CCER by setting it with CCER. 
    COMMENT Equivalence Class None
    COMMENT </TD>

    ELEMENT

            COMMENT INPUT SECTION:
                    --Holds the member values of structure oc_onfig
                    VAR oc_onfig.OCMode,            init =1,            ev = init
                    VAR oc_onfig.Pulse,             init =1,            ev = init       
                    VAR oc_onfig.OCPolarity,        init =1,            ev = init       
            
            COMMENT OUTPUT SECTION:
                    --Sets the Capture Compare Register value 
                    VAR tim_x.CCR1,                 init =0,            ev =oc_onfig.Pulse

            COMMENT INPUT/OUTPUT SECTION:
        
                    --Write to tim_x CR2  
                    VAR tim_x.CR2 ,                 init= 0,            ev =init

                    --Write to tim_x CCMR1 
                    VAR tim_x.CCMR1,                init= 0,            ev =1

                    --Write to tim_x CCER 
                    VAR tim_x.CCER,                 init =0,            ev =oc_onfig.OCPolarity
                    
        -- Stub calls :
        SIMUL

            --None

        END SIMUL

        -- Calling the Unit Under Test :
        #TimOc1SetConfig(&tim_x, &oc_onfig);

        END ELEMENT

END TEST -- TEST 1

TEST 2
    FAMILY nominal

    COMMENT Test Description 
    COMMENT <TD>
    COMMENT [hdulibstm32f7xxhaltim-TimOc1SetConfig-DB-LLR-001]
    COMMENT The function sets CCER of tim_x to result of bitwise AND operation of CCER of tim_x and Negated value of TIM_CCER_CC1E. 
    COMMENT Equivalence Class None
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimOc1SetConfig-DB-LLR-002]
    COMMENT The function sets CCER to CCER of tim_x.
    COMMENT Equivalence Class None
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimOc1SetConfig-DB-LLR-003]
    COMMENT The function sets CR2 to CR2 of tim_x.
    COMMENT Equivalence Class None
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimOc1SetConfig-DB-LLR-004]
    COMMENT The function sets CCMR1 to CCMR1 of tim_x.
    COMMENT Equivalence Class None
    COMMENT
    COMMENT [hdulibstm32f7xxhaltim-TimOc1SetConfig-DB-LLR-005]
    COMMENT The function does the following to reset the Output Compare Mode Bits.
    COMMENT 1.Sets CCMR1 to result of bitwise AND operation of CCMR1 and negated value of TIM_CCMR1_OC1M.
    COMMENT 2.Sets CCMR1 to result of bitwise AND operation of CCMR1 and negated value of TIM_CCMR1_CC1S.
    COMMENT 3.Sets CCMR1 to result of bitwise OR operation of CCMR1 and OCMode of oc_onfig. 
    COMMENT Equivalence Class None
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimOc1SetConfig-DB-LLR-006]
    COMMENT The function does the following to reset Output Polarity level.
    COMMENT 1.Sets CCER to result of bitwise  AND operation of CCER and  negated value of TIM_CCER_CC1P.
    COMMENT 2.Sets CCER to result of bitwise  OR operation of CCER and OCPolarity of oc_onfig.
    COMMENT Equivalence Class None
    COMMENT
    COMMENT [hdulibstm32f7xxhaltim-TimOc1SetConfig-DB-LLR-007]
    COMMENT The function does the following when return value of IS_TIM_ADVANCED_INSTANCE with parameter tim_x is not equal to RESET.
    COMMENT 1.Sets CCER to result of bitwise AND operation of CCER and negated value of TIM_CCER_CC1NP.
    COMMENT 2.Sets  CCER to result of bitwise OR operation of CCER and OCNPolarity of oc_onfig.
    COMMENT 3.Sets CCER to bitwise AND operation of CCER and negated value of TIM_CCER_CC1NE.
    COMMENT 4.Sets CR2 to bitwise AND operation of CR2 and negated value of TIM_CR2_OIS1.
    COMMENT 5. Sets CR2 to bitwise AND operation of CR2 and negated value of TIM_CR2_OIS1N.
    COMMENT 6.Sets CR2 to result of bitwise OR operation of CR2 and OCIdleState of oc_onfig.
    COMMENT 7. Sets CR2 to result of bitwise OR operation of CR2 and OCNIdleState of oc_onfig.  
    COMMENT Equivalence Class 24
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimOc1SetConfig-DB-LLR-008]
    COMMENT The function writes into tim_x CR2 by setting it with CR2. 
    COMMENT Equivalence Class None
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimOc1SetConfig-DB-LLR-009]
    COMMENT The function writes into tim_x CCMR1 by setting it with CCMR1.
    COMMENT Equivalence Class None
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimOc1SetConfig-DB-LLR-010]
    COMMENT The function writes into tim_x CCR1 by setting it with Pulse of oc_onfig.  
    COMMENT Equivalence Class None
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimOc1SetConfig-DB-LLR-011]
    COMMENT The function writes into tim_x CCER by setting it with CCER. 
    COMMENT Equivalence Class None
    COMMENT This test case is evaluated by giving the nominal values to inputs.
    COMMENT </TD>

    ELEMENT

            COMMENT INPUT SECTION:
                    --Sets the Output Idle state 
                    VAR oc_onfig.OCIdleState,           init =1,            ev = init
                
                    --Sets the Output N Idle state              
                    VAR oc_onfig.OCNIdleState,          init =1,            ev = init
                                
                    --Sets the Output Mode                  
                    VAR oc_onfig.OCMode,                init =1,            ev = init   
                                    
                    --Sets the pulse value              
                    VAR oc_onfig.Pulse,                 init =1,            ev = init   
                
                    --Sets the Output Polarity                      
                    VAR oc_onfig.OCPolarity,            init =1,            ev = init  

                    --Sets the Output N Polarity                      
                    VAR oc_onfig.OCNPolarity,           init =1,            ev = init                   
            
            COMMENT OUTPUT SECTION:
            
                    --Sets the Capture Compare Register value       
                    VAR PTU_TIM1_BASE.CCR1,             init =1,            ev =1

            COMMENT INPUT/OUTPUT SECTION:

                    --Write to tim_x CR2  
                    VAR PTU_TIM1_BASE.CR2 ,             init= 1,            ev =1
                    
                    --Write to tim_x CCMR1                  
                    VAR PTU_TIM1_BASE.CCMR1,            init= 1,            ev =1                  
                    
                    --Write to tim_x CCER                   
                    VAR PTU_TIM1_BASE.CCER,             init =1,            ev =1
                                
        -- Stub calls :
        SIMUL

                --None

        END SIMUL

        -- Calling the Unit Under Test :
        #TimOc1SetConfig(&PTU_TIM1_BASE, &oc_onfig);

    END ELEMENT

END TEST -- TEST 2

    TEST 3
    FAMILY nominal

    COMMENT Test Description 
    COMMENT <TD>
    COMMENT [hdulibstm32f7xxhaltim-TimOc1SetConfig-DB-LLR-001]
    COMMENT The function sets CCER of tim_x to result of bitwise AND operation of CCER of tim_x and Negated value of TIM_CCER_CC1E. 
    COMMENT Equivalence Class None
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimOc1SetConfig-DB-LLR-002]
    COMMENT The function sets CCER to CCER of tim_x.
    COMMENT Equivalence Class None
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimOc1SetConfig-DB-LLR-003]
    COMMENT The function sets CR2 to CR2 of tim_x.
    COMMENT Equivalence Class None
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimOc1SetConfig-DB-LLR-004]
    COMMENT The function sets CCMR1 to CCMR1 of tim_x.
    COMMENT Equivalence Class None
    COMMENT
    COMMENT [hdulibstm32f7xxhaltim-TimOc1SetConfig-DB-LLR-005]
    COMMENT The function does the following to reset the Output Compare Mode Bits.
    COMMENT 1.Sets CCMR1 to result of bitwise AND operation of CCMR1 and negated value of TIM_CCMR1_OC1M.
    COMMENT 2.Sets CCMR1 to result of bitwise AND operation of CCMR1 and negated value of TIM_CCMR1_CC1S.
    COMMENT 3.Sets CCMR1 to result of bitwise OR operation of CCMR1 and OCMode of oc_onfig. 
    COMMENT Equivalence Class None
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimOc1SetConfig-DB-LLR-006]
    COMMENT The function does the following to reset Output Polarity level.
    COMMENT 1.Sets CCER to result of bitwise  AND operation of CCER and  negated value of TIM_CCER_CC1P.
    COMMENT 2.Sets CCER to result of bitwise  OR operation of CCER and OCPolarity of oc_onfig.
    COMMENT Equivalence Class None
    COMMENT
    COMMENT [hdulibstm32f7xxhaltim-TimOc1SetConfig-DB-LLR-007]
    COMMENT The function does the following when return value of IS_TIM_ADVANCED_INSTANCE with parameter tim_x is not equal to RESET.
    COMMENT 1.Sets CCER to result of bitwise AND operation of CCER and negated value of TIM_CCER_CC1NP.
    COMMENT 2.Sets  CCER to result of bitwise OR operation of CCER and OCNPolarity of oc_onfig.
    COMMENT 3.Sets CCER to bitwise AND operation of CCER and negated value of TIM_CCER_CC1NE.
    COMMENT 4.Sets CR2 to bitwise AND operation of CR2 and negated value of TIM_CR2_OIS1.
    COMMENT 5. Sets CR2 to bitwise AND operation of CR2 and negated value of TIM_CR2_OIS1N.
    COMMENT 6.Sets CR2 to result of bitwise OR operation of CR2 and OCIdleState of oc_onfig.
    COMMENT 7. Sets CR2 to result of bitwise OR operation of CR2 and OCNIdleState of oc_onfig.  
    COMMENT Equivalence Class 24
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimOc1SetConfig-DB-LLR-008]
    COMMENT The function writes into tim_x CR2 by setting it with CR2. 
    COMMENT Equivalence Class None
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimOc1SetConfig-DB-LLR-009]
    COMMENT The function writes into tim_x CCMR1 by setting it with CCMR1.
    COMMENT Equivalence Class None
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimOc1SetConfig-DB-LLR-010]
    COMMENT The function writes into tim_x CCR1 by setting it with Pulse of oc_onfig.  
    COMMENT Equivalence Class None
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimOc1SetConfig-DB-LLR-011]
    COMMENT The function writes into tim_x CCER by setting it with CCER. 
    COMMENT Equivalence Class None
    COMMENT This test case is evaluated by giving the minimum values to inputs.
    COMMENT </TD>

    ELEMENT

            COMMENT INPUT SECTION:
                    --Sets the Output Idle state 
                    VAR oc_onfig.OCIdleState,       init =0,            ev = init
                
                    --Sets the Output N Idle state          
                    VAR oc_onfig.OCNIdleState,      init =0,            ev = init
                                
                    --Sets the Output Mode              
                    VAR oc_onfig.OCMode,            init =0,            ev = init   
                        
                    --Sets the pulse value (Min_Data)   
                    VAR oc_onfig.Pulse,             init =0x0000,       ev = init   
        
                    --Sets the Output Polarity          
                    VAR oc_onfig.OCPolarity,        init =0,            ev = init    

                    --Sets the Output N Polarity                      
                    VAR oc_onfig.OCNPolarity,       init =0,            ev = init                       
            
            COMMENT OUTPUT SECTION:
            
                    --Sets the Capture Compare Register value       
                    VAR PTU_TIM8_BASE.CCR1,         init =0,            ev =0x0000

            COMMENT INPUT/OUTPUT SECTION:

                    --Write to tim_x CR2  
                    VAR PTU_TIM8_BASE.CR2 ,         init= 0,            ev =0
                    
                    --Write to tim_x CCMR1              
                    VAR PTU_TIM8_BASE.CCMR1,        init= 0,            ev =0                  
                    
                    --Write to tim_x CCER               
                    VAR PTU_TIM8_BASE.CCER,         init =0,            ev =0
                    
        -- Stub calls :
        SIMUL

          --None

        END SIMUL

        -- Calling the Unit Under Test :
        #TimOc1SetConfig(&PTU_TIM8_BASE, &oc_onfig);

    END ELEMENT

END TEST -- TEST 3

TEST 4
FAMILY nominal

    COMMENT Test Description 
    COMMENT <TD>
    COMMENT [hdulibstm32f7xxhaltim-TimOc1SetConfig-DB-LLR-001]
    COMMENT The function sets CCER of tim_x to result of bitwise AND operation of CCER of tim_x and Negated value of TIM_CCER_CC1E. 
    COMMENT Equivalence Class None
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimOc1SetConfig-DB-LLR-002]
    COMMENT The function sets CCER to CCER of tim_x.
    COMMENT Equivalence Class None
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimOc1SetConfig-DB-LLR-003]
    COMMENT The function sets CR2 to CR2 of tim_x.
    COMMENT Equivalence Class None
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimOc1SetConfig-DB-LLR-004]
    COMMENT The function sets CCMR1 to CCMR1 of tim_x.
    COMMENT Equivalence Class None
    COMMENT
    COMMENT [hdulibstm32f7xxhaltim-TimOc1SetConfig-DB-LLR-005]
    COMMENT The function does the following to reset the Output Compare Mode Bits.
    COMMENT 1.Sets CCMR1 to result of bitwise AND operation of CCMR1 and negated value of TIM_CCMR1_OC1M.
    COMMENT 2.Sets CCMR1 to result of bitwise AND operation of CCMR1 and negated value of TIM_CCMR1_CC1S.
    COMMENT 3.Sets CCMR1 to result of bitwise OR operation of CCMR1 and OCMode of oc_onfig. 
    COMMENT Equivalence Class None
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimOc1SetConfig-DB-LLR-006]
    COMMENT The function does the following to reset Output Polarity level.
    COMMENT 1.Sets CCER to result of bitwise  AND operation of CCER and  negated value of TIM_CCER_CC1P.
    COMMENT 2.Sets CCER to result of bitwise  OR operation of CCER and OCPolarity of oc_onfig.
    COMMENT Equivalence Class None
    COMMENT
    COMMENT [hdulibstm32f7xxhaltim-TimOc1SetConfig-DB-LLR-007]
    COMMENT The function does the following when return value of IS_TIM_ADVANCED_INSTANCE with parameter tim_x is not equal to RESET.
    COMMENT 1.Sets CCER to result of bitwise AND operation of CCER and negated value of TIM_CCER_CC1NP.
    COMMENT 2.Sets  CCER to result of bitwise OR operation of CCER and OCNPolarity of oc_onfig.
    COMMENT 3.Sets CCER to bitwise AND operation of CCER and negated value of TIM_CCER_CC1NE.
    COMMENT 4.Sets CR2 to bitwise AND operation of CR2 and negated value of TIM_CR2_OIS1.
    COMMENT 5. Sets CR2 to bitwise AND operation of CR2 and negated value of TIM_CR2_OIS1N.
    COMMENT 6.Sets CR2 to result of bitwise OR operation of CR2 and OCIdleState of oc_onfig.
    COMMENT 7. Sets CR2 to result of bitwise OR operation of CR2 and OCNIdleState of oc_onfig.  
    COMMENT Equivalence Class 24
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimOc1SetConfig-DB-LLR-008]
    COMMENT The function writes into tim_x CR2 by setting it with CR2. 
    COMMENT Equivalence Class None
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimOc1SetConfig-DB-LLR-009]
    COMMENT The function writes into tim_x CCMR1 by setting it with CCMR1.
    COMMENT Equivalence Class None
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimOc1SetConfig-DB-LLR-010]
    COMMENT The function writes into tim_x CCR1 by setting it with Pulse of oc_onfig.  
    COMMENT Equivalence Class None
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimOc1SetConfig-DB-LLR-011]
    COMMENT The function writes into tim_x CCER by setting it with CCER. 
    COMMENT Equivalence Class None
    COMMENT This test case is evaluated by giving the maximum values to inputs.
    COMMENT </TD>

    ELEMENT

            COMMENT INPUT SECTION:
                    --Sets the Output Idle state 
                    VAR oc_onfig.OCIdleState,               init =(T_UINT32)0xFFFFFFFF,             ev = init
                                
                    --Sets the Output N Idle state                          
                    VAR oc_onfig.OCNIdleState,              init =(T_UINT32)0xFFFFFFFF,             ev = init
                                                
                    --Sets the Output Mode                              
                    VAR oc_onfig.OCMode,                    init =(T_UINT32)0xFFFFFFFF,             ev = init   
                                                
                    --Sets the pulse value (Max_Data)                   
                    VAR oc_onfig.Pulse,                     init =0xFFFF,                           ev = init   
                                
                    --Sets the Output Polarity                                  
                    VAR oc_onfig.OCPolarity,                init =(T_UINT32)0xFFFFFFFF,             ev = init      

                    --Sets the Output N Polarity                      
                    VAR oc_onfig.OCNPolarity,               init =(T_UINT32)0xFFFFFFFF,             ev = init                       
            
            COMMENT OUTPUT SECTION:
            
                    --Sets the Capture Compare Register value   
                    VAR PTU_TIM8_BASE.CCR1,                 init =(T_UINT32)0xFFFFFFFF,             ev =0xFFFF

            COMMENT INPUT/OUTPUT SECTION:

                    --Write to tim_x CR2  
                    VAR PTU_TIM8_BASE.CR2 ,                 init= (T_UINT32)0xFFFFFFFF,             ev =(T_UINT32)0xFFFFFFFF
    
                    --Write to tim_x CCMR1  
                    VAR PTU_TIM8_BASE.CCMR1,                init= (T_UINT32)0xFFFFFFFF,             ev =(T_UINT32)0xFFFFFFFF
    
                    --Write to tim_x CCER   
                    VAR PTU_TIM8_BASE.CCER,                 init =(T_UINT32)0xFFFFFFFF,             ev =0xFFFFFFFB
                    
        -- Stub calls :
        SIMUL

            --None

        END SIMUL

        -- Calling the Unit Under Test :
        #TimOc1SetConfig(&PTU_TIM8_BASE, &oc_onfig);

        END ELEMENT

END TEST -- TEST 4
    
--    TEST 5
--  FAMILY robustness
--  
--  COMMENT Test Description 
--  COMMENT <TD>
--  COMMENT [hdulibstm32f7xxhaltim-TimOc1SetConfig-DB-LLR-001]
--  COMMENT This test case is evaluated by giving the invalid reference to input parameter tim_x.
--  COMMENT Equivalence Class 40
--  COMMENT </TD>
--
--        ELEMENT
--
--            COMMENT INPUT SECTION:
--                  --Holds the member value of the structure oc_onfig
--                  VAR oc_onfig.OCMode,        init =1,        ev = init
--                  VAR oc_onfig.Pulse,         init =1,        ev = init       
--                  VAR oc_onfig.OCPolarity,    init =1,        ev = init  
--                  VAR oc_onfig.OCNPolarity,    init =1,        ev = init     
--          
--            COMMENT OUTPUT SECTION:
--
--                  --Sets the Capture Compare Register value 
--                  VAR tim_x.CCR1,             init =0,        ev =oc_onfig.Pulse
--
--            COMMENT INPUT/OUTPUT SECTION:
--      
--                  --Write to tim_x CR2  
--                  VAR tim_x.CR2 ,             init= 0,        ev =init
--
--                  --Write to tim_x CCMR1 
--                  VAR tim_x.CCMR1,            init= 0,        ev =1
--
--                  --Write to tim_x CCER 
--                  VAR tim_x.CCER,             init =0,        ev =oc_onfig.OCPolarity
--                    
--        -- Stub calls :
--        SIMUL
--
--          --None
--
--        END SIMUL
--
--            -- Calling the Unit Under Test :
--            #TimOc1SetConfig(NULL, &oc_onfig);
--
--        END ELEMENT
--
--    END TEST -- TEST 5
    
--    TEST 6
--  FAMILY robustness
--  COMMENT Test Description 
--  COMMENT <TD>
--  COMMENT [hdulibstm32f7xxhaltim-TimOc1SetConfig-DB-LLR-001]
--  COMMENT This test case is evaluated by giving the invalid reference to input parameter oc_onfig.
--  COMMENT Equivalence Class 41
--  COMMENT </TD>
--
--        ELEMENT
--
--            COMMENT INPUT SECTION:
--                  --Holds the member value of the structure oc_onfig
--                  VAR oc_onfig.OCMode,        init =1,        ev = init
--                  VAR oc_onfig.Pulse,         init =1,        ev = init       
--                  VAR oc_onfig.OCPolarity,    init =1,        ev = init   
--                  VAR oc_onfig.OCNPolarity,    init =1,        ev = init    
--          
--            COMMENT OUTPUT SECTION:
--
--                  --Sets the Capture Compare Register value 
--                  VAR tim_x.CCR1,             init =0,        ev =oc_onfig.Pulse
--
--            COMMENT INPUT/OUTPUT SECTION:
--      
--                  --Write to tim_x CR2  
--                  VAR tim_x.CR2 ,             init= 0,        ev =init
--
--                  --Write to tim_x CCMR1 
--                  VAR tim_x.CCMR1,            init= 0,        ev =1
--
--                  --Write to tim_x CCER 
--                  VAR tim_x.CCER,             init =0,        ev =oc_onfig.OCPolarity
--                    
--        -- Stub calls :
--        SIMUL
--
--          --None
--
--        END SIMUL
--
--            -- Calling the Unit Under Test :
--            #TimOc1SetConfig(&tim_x, NULL);
--
--        END ELEMENT
--
--    END TEST -- TEST 6
    
END SERVICE -- TimOc1SetConfig


--------------------------------------------------------------------------------
-- Declaration of the service TimOc2SetConfig
--------------------------------------------------------------------------------
SERVICE TimOc2SetConfig
SERVICE_TYPE extern

    -- Tested service parameters declarations
    #T_TIM tim_x;
    #T_TIM_OC_INIT oc_onfig;

    ENVIRONMENT ENV_TimOc2SetConfig
    STRUCTURE tim_x,                init = { CR1 => 0, CR2 => 0, SMCR => 0, DIER => 0, SR => 0, EGR => 0, CCMR1 => 0, CCMR2 => 0, CCER => 0, 
    & CNT => 0, PSC => 0, ARR => 0, RCR => 0, CCR1 => 0, CCR2 => 0, CCR3 => 0, CCR4 => 0, BDTR => 0, DCR => 0, DMAR => 0, OR => 0, CCMR3
    &=> 0, CCR5 => 0, CCR6 => 0 },      ev = init

    STRUCTURE PTU_TIM1_BASE,        init = { CR1 => 0, CR2 => 0, SMCR => 0, DIER => 0, SR => 0, EGR => 0, CCMR1 => 0, CCMR2 => 0, CCER => 0, 
    & CNT => 0, PSC => 0, ARR => 0, RCR => 0, CCR1 => 0, CCR2 => 0, CCR3 => 0, CCR4 => 0, BDTR => 0, DCR => 0, DMAR => 0, OR => 0, CCMR3
    &=> 0, CCR5 => 0, CCR6 => 0 },      ev = init

    STRUCTURE PTU_TIM8_BASE,        init = { CR1 => 0, CR2 => 0, SMCR => 0, DIER => 0, SR => 0, EGR => 0, CCMR1 => 0, CCMR2 => 0, CCER => 0, 
    & CNT => 0, PSC => 0, ARR => 0, RCR => 0, CCR1 => 0, CCR2 => 0, CCR3 => 0, CCR4 => 0, BDTR => 0, DCR => 0, DMAR => 0, OR => 0, CCMR3
    &=> 0, CCR5 => 0, CCR6 => 0 },      ev = init
    STRUCTURE oc_onfig,             init = { OCMode => 0, Pulse => 0, OCPolarity => 0, OCNPolarity => 0, OCFastMode => 0, OCIdleState => 0, 
    & OCNIdleState => 0 },              ev = init
    END ENVIRONMENT -- ENV_TimOc2SetConfig
    USE ENV_TimOc2SetConfig


    TEST 1
    FAMILY nominal

    COMMENT Test Description 
    COMMENT <TD>
    COMMENT [hdulibstm32f7xxhaltim-TimOc2SetConfig-DB-LLR-001]
    COMMENT The function sets CCER of tim_x to result of bitwise AND operation of CCER of tim_x and Negated value of TIM_CCER_CC2E. 
    COMMENT Equivalence Class None
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimOc2SetConfig-DB-LLR-002]
    COMMENT The function sets CCER to CCER of tim_x.
    COMMENT Equivalence Class None
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimOc2SetConfig-DB-LLR-003]
    COMMENT The function sets CR2 to CR2 of tim_x.
    COMMENT Equivalence Class None
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimOc2SetConfig-DB-LLR-004]
    COMMENT The function sets CCMR1 to CCMR1 of tim_x.
    COMMENT Equivalence Class None
    COMMENT
    COMMENT [hdulibstm32f7xxhaltim-TimOc2SetConfig-DB-LLR-005]
    COMMENT The function does the following to reset the Output Compare Mode Bits.
    COMMENT 1.Sets CCMR1 to result of bitwise AND operation of CCMR1 and negated value of TIM_CCMR1_OC2M.
    COMMENT 2.Sets CCMR1 to result of bitwise AND operation of CCMR1 and negated value of TIM_CCMR1_CC2S.
    COMMENT 3.Sets CCMR1 to result of bitwise OR operation of CCMR1 and OCMode of oc_onfig left shifted by EIGHT.   
    COMMENT Equivalence Class None
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimOc2SetConfig-DB-LLR-006]
    COMMENT The function does the following to reset Output Polarity level.
    COMMENT 1.Sets CCER to result of bitwise  AND operation of CCER and negated value of  TIM_CCER_CC2P.
    COMMENT 2.Sets CCER to result of bitwise  OR operation of CCER and OCPolarity of oc_onfig left shifted by FOUR
    COMMENT Equivalence Class None
    COMMENT
    COMMENT [hdulibstm32f7xxhaltim-TimOc2SetConfig-DB-LLR-007]
    COMMENT The function does nothing when return value of IS_TIM_ADVANCED_INSTANCE with parameter tim_x is equal to RESET.
    COMMENT Equivalence Class 27
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimOc2SetConfig-DB-LLR-008]
    COMMENT The function writes into tim_x CR2 by setting it with CR2. 
    COMMENT Equivalence Class None
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimOc2SetConfig-DB-LLR-009]
    COMMENT The function writes into tim_x CCMR1 by setting it with CCMR1.
    COMMENT Equivalence Class None
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimOc2SetConfig-DB-LLR-010]
    COMMENT The function writes into tim_x CCR2 by setting it with Pulse of oc_onfig.  
    COMMENT Equivalence Class None
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimOc2SetConfig-DB-LLR-011]
    COMMENT The function writes into tim_x CCER by setting it with CCER. 
    COMMENT Equivalence Class None
    COMMENT </TD>

        ELEMENT

            COMMENT INPUT SECTION:
                    --Sets the Output Mode  
                    VAR oc_onfig.OCMode,        init =1,                ev = init   
                                            
                    --Sets the pulse value                              
                    VAR oc_onfig.Pulse,         init =1,                ev = init   
                            
                    --Sets the Output Polarity                                      
                    VAR oc_onfig.OCPolarity,    init =1,                ev = init           
                
            COMMENT OUTPUT SECTION:
    
                    --Sets the Capture Compare Register value                       
                    VAR tim_x.CCR2,             init =0,                ev =oc_onfig.Pulse  

            COMMENT INPUT/OUTPUT SECTION:
                    --Write to tim_x CR2
                    VAR PTU_TIM1_BASE.CR2 ,     init= 0,                ev =init
                            
                    --Write to tim_x CCMR1                              
                    VAR tim_x.CCMR1,            init= 0,                ev =256       
                        
                    --Write to tim_x CCER                               
                    VAR tim_x.CCER,             init =0,                ev =16
                    
        -- Stub calls :
        SIMUL

            --None

        END SIMUL

            -- Calling the Unit Under Test :
            #TimOc2SetConfig(&tim_x, &oc_onfig);

        END ELEMENT

    END TEST -- TEST 1

    TEST 2
    FAMILY nominal

    COMMENT Test Description 
    COMMENT <TD>
    COMMENT [hdulibstm32f7xxhaltim-TimOc2SetConfig-DB-LLR-001]
    COMMENT The function sets CCER of tim_x to result of bitwise AND operation of CCER of tim_x and Negated value of TIM_CCER_CC2E. 
    COMMENT Equivalence Class None
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimOc2SetConfig-DB-LLR-002]
    COMMENT The function sets CCER to CCER of tim_x.
    COMMENT Equivalence Class None
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimOc2SetConfig-DB-LLR-003]
    COMMENT The function sets CR2 to CR2 of tim_x.
    COMMENT Equivalence Class None
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimOc2SetConfig-DB-LLR-004]
    COMMENT The function sets CCMR1 to CCMR1 of tim_x.
    COMMENT Equivalence Class None
    COMMENT
    COMMENT [hdulibstm32f7xxhaltim-TimOc2SetConfig-DB-LLR-005]
    COMMENT The function does the following to reset the Output Compare Mode Bits.
    COMMENT 1.Sets CCMR1 to result of bitwise AND operation of CCMR1 and negated value of TIM_CCMR1_OC2M.
    COMMENT 2.Sets CCMR1 to result of bitwise AND operation of CCMR1 and negated value of TIM_CCMR1_CC2S.
    COMMENT 3.Sets CCMR1 to result of bitwise OR operation of CCMR1 and OCMode of oc_onfig left shifted by EIGHT.   
    COMMENT Equivalence Class None
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimOc2SetConfig-DB-LLR-006]
    COMMENT The function does the following to reset Output Polarity level.
    COMMENT 1.Sets CCER to result of bitwise  AND operation of CCER and negated value of TIM_CCER_CC2P.
    COMMENT 2.Sets CCER to result of bitwise  OR operation of CCER and OCPolarity of oc_onfig left shifted by FOUR
    COMMENT Equivalence Class None
    COMMENT
    COMMENT [hdulibstm32f7xxhaltim-TimOc2SetConfig-DB-LLR-007]
    COMMENT The function does the following when return value of IS_TIM_ADVANCED_INSTANCE with parameter tim_x is not equal to RESET.
    COMMENT 1.Sets CCER to result of bitwise AND operation of CCER and negated value of TIM_CCER_CC2NP.
    COMMENT 2.Sets  CCER to result of bitwise  OR operation of CCER and OCNPolarity of oc_onfig left shifted by FOUR.
    COMMENT 3.Sets CCER to bitwise AND operation of CCER and negated value of TIM_CCER_CC2NE.
    COMMENT 4.Sets CR2 to bitwise AND operation of CR2 and negated value of TIM_CR2_OIS2.
    COMMENT 5. Sets CR2 to bitwise AND operation of CR2 and negated value of TIM_CR2_OIS2N.
    COMMENT 6.Sets CR2 to result of bitwise OR operation of CR2 and OCIdleState of oc_onfig left shifted by TWO.
    COMMENT 7. Sets CR2 to result of bitwise OR operation of CR2 and OCNIdleState of oc_onfig left shifted by TWO.
    COMMENT Equivalence Class 26
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimOc2SetConfig-DB-LLR-008]
    COMMENT The function writes into tim_x CR2 by setting it with CR2. 
    COMMENT Equivalence Class None
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimOc2SetConfig-DB-LLR-009]
    COMMENT The function writes into tim_x CCMR1 by setting it with CCMR1.
    COMMENT Equivalence Class None
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimOc2SetConfig-DB-LLR-010]
    COMMENT The function writes into tim_x CCR2 by setting it with Pulse of oc_onfig.  
    COMMENT Equivalence Class None
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimOc2SetConfig-DB-LLR-011]
    COMMENT The function writes into tim_x CCER by setting it with CCER. 
    COMMENT Equivalence Class None
    COMMENT This test case is evaluated by giving the nominal values to inputs.
    COMMENT </TD>

        ELEMENT

            COMMENT INPUT SECTION:
                    --members of oc_onfig tested with nominal values

                    --Sets the Output Idle state 
                    VAR oc_onfig.OCIdleState,           init =1,            ev = init
            
                    --Sets the Output N Idle state          
                    VAR oc_onfig.OCNIdleState,          init =1,            ev = init
                                
                    --Sets the Output Mode              
                    VAR oc_onfig.OCMode,                init =1,            ev = init   
                                
                    --Sets the pulse value          
                    VAR oc_onfig.Pulse,                 init =1,            ev = init   
            
                    --Sets the Output Polarity                  
                    VAR oc_onfig.OCPolarity,            init =1,            ev = init 
                    
                    --Sets the Output N Polarity                      
                    VAR oc_onfig.OCNPolarity,           init =1,            ev = init                   
                        
            COMMENT OUTPUT SECTION:

                    --Sets the Capture Compare Register value           
                    VAR PTU_TIM1_BASE.CCR2,             init =1,            ev =1       

            COMMENT INPUT/OUTPUT SECTION:

                    --members of tim_x tested with nominal values

                    --Write to tim_x CR2  
                    VAR PTU_TIM1_BASE.CR2 ,             init= 1,            ev =5
                            
                    --Write to tim_x CCMR1                      
                    VAR PTU_TIM1_BASE.CCMR1,            init= 1,            ev =257                     
                           
                    --Write to tim_x CCER                       
                    VAR PTU_TIM1_BASE.CCER,             init =1,            ev =17
                    
        -- Stub calls :
        SIMUL

            --None

        END SIMUL

            -- Calling the Unit Under Test :
            #TimOc2SetConfig(&PTU_TIM1_BASE, &oc_onfig);

        END ELEMENT

    END TEST -- TEST 2

    TEST 3
    FAMILY nominal

    COMMENT Test Description 
    COMMENT <TD>
    COMMENT [hdulibstm32f7xxhaltim-TimOc2SetConfig-DB-LLR-001]
    COMMENT The function sets CCER of tim_x to result of bitwise AND operation of CCER of tim_x and Negated value of TIM_CCER_CC2E. 
    COMMENT Equivalence Class None
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimOc2SetConfig-DB-LLR-002]
    COMMENT The function sets CCER to CCER of tim_x.
    COMMENT Equivalence Class None
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimOc2SetConfig-DB-LLR-003]
    COMMENT The function sets CR2 to CR2 of tim_x.
    COMMENT Equivalence Class None
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimOc2SetConfig-DB-LLR-004]
    COMMENT The function sets CCMR1 to CCMR1 of tim_x.
    COMMENT Equivalence Class None
    COMMENT
    COMMENT [hdulibstm32f7xxhaltim-TimOc2SetConfig-DB-LLR-005]
    COMMENT The function does the following to reset the Output Compare Mode Bits.
    COMMENT 1.Sets CCMR1 to result of bitwise AND operation of CCMR1 and negated value of TIM_CCMR1_OC2M.
    COMMENT 2.Sets CCMR1 to result of bitwise AND operation of CCMR1 and negated value of TIM_CCMR1_CC2S.
    COMMENT 3.Sets CCMR1 to result of bitwise OR operation of CCMR1 and OCMode of oc_onfig left shifted by EIGHT.   
    COMMENT Equivalence Class None
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimOc2SetConfig-DB-LLR-006]
    COMMENT The function does the following to reset Output Polarity level.
    COMMENT 1.Sets CCER to result of bitwise  AND operation of CCER and negated value of  TIM_CCER_CC2P.
    COMMENT 2.Sets CCER to result of bitwise  OR operation of CCER and OCPolarity of oc_onfig left shifted by FOUR
    COMMENT Equivalence Class None
    COMMENT
    COMMENT [hdulibstm32f7xxhaltim-TimOc2SetConfig-DB-LLR-007]
    COMMENT The function does the following when return value of IS_TIM_ADVANCED_INSTANCE with parameter tim_x is not equal to RESET.
    COMMENT 1.Sets CCER to result of bitwise AND operation of CCER and negated value of TIM_CCER_CC2NP.
    COMMENT 2.Sets  CCER to result of bitwise  OR operation of CCER and OCNPolarity of oc_onfig left shifted by FOUR.
    COMMENT 3.Sets CCER to bitwise AND operation of CCER and negated value of TIM_CCER_CC2NE.
    COMMENT 4.Sets CR2 to bitwise AND operation of CR2 and negated value of TIM_CR2_OIS2.
    COMMENT 5. Sets CR2 to bitwise AND operation of CR2 and negated value of TIM_CR2_OIS2N.
    COMMENT 6.Sets CR2 to result of bitwise OR operation of CR2 and OCIdleState of oc_onfig left shifted by TWO.
    COMMENT 7. Sets CR2 to result of bitwise OR operation of CR2 and OCNIdleState of oc_onfig left shifted by TWO.
    COMMENT Equivalence Class 26
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimOc2SetConfig-DB-LLR-008]
    COMMENT The function writes into tim_x CR2 by setting it with CR2. 
    COMMENT Equivalence Class None
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimOc2SetConfig-DB-LLR-009]
    COMMENT The function writes into tim_x CCMR1 by setting it with CCMR1.
    COMMENT Equivalence Class None
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimOc2SetConfig-DB-LLR-010]
    COMMENT The function writes into tim_x CCR2 by setting it with Pulse of oc_onfig.  
    COMMENT Equivalence Class None
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimOc2SetConfig-DB-LLR-011]
    COMMENT The function writes into tim_x CCER by setting it with CCER. 
    COMMENT Equivalence Class None
    COMMENT This test case is evaluated by giving the minimum values to inputs.
    COMMENT </TD>

        ELEMENT

            COMMENT INPUT SECTION:

                    --members of oc_onfig tested with nominal values

                    --Sets the Output Idle state 
                    VAR oc_onfig.OCIdleState,   init =0,                ev = init
                
                    --Sets the Output N Idle state              
                    VAR oc_onfig.OCNIdleState,  init =0,                ev = init
                                    
                    --Sets the Output Mode                  
                    VAR oc_onfig.OCMode,        init =0,                ev = init   
                                    
                    --Sets the pulse value (Min_Data)               
                    VAR oc_onfig.Pulse,         init =0,                ev = init   
                
                    --Sets the Output Polarity                      
                    VAR oc_onfig.OCPolarity,    init =0,                ev = init   

                    --Sets the Output N Polarity                      
                    VAR oc_onfig.OCNPolarity,   init =0,                ev = init                       
            
            COMMENT OUTPUT SECTION:

                    --Sets the Capture Compare Register value 
                    VAR PTU_TIM8_BASE.CCR2,     init =0,                ev =0   

            COMMENT INPUT/OUTPUT SECTION:

                    --members of tim_x tested with nominal values

                    --Write to tim_x CR2  
                    VAR PTU_TIM8_BASE.CR2 ,     init= 0,                ev =0
                
                    --Write to tim_x CCMR1              
                    VAR PTU_TIM8_BASE.CCMR1,    init= 0,                ev =0            

                    --Write to tim_x CCER               
                    VAR PTU_TIM8_BASE.CCER,     init =0,                ev =0
                    
        -- Stub calls :
        SIMUL

            --None

        END SIMUL

            -- Calling the Unit Under Test :
            #TimOc2SetConfig(&PTU_TIM8_BASE, &oc_onfig);

        END ELEMENT

    END TEST -- TEST 3

    TEST 4
    FAMILY nominal

    COMMENT Test Description 
    COMMENT <TD>
    COMMENT [hdulibstm32f7xxhaltim-TimOc2SetConfig-DB-LLR-001]
    COMMENT The function sets CCER of tim_x to result of bitwise AND operation of CCER of tim_x and Negated value of TIM_CCER_CC2E. 
    COMMENT Equivalence Class None
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimOc2SetConfig-DB-LLR-002]
    COMMENT The function sets CCER to CCER of tim_x.
    COMMENT Equivalence Class None
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimOc2SetConfig-DB-LLR-003]
    COMMENT The function sets CR2 to CR2 of tim_x.
    COMMENT Equivalence Class None
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimOc2SetConfig-DB-LLR-004]
    COMMENT The function sets CCMR1 to CCMR1 of tim_x.
    COMMENT Equivalence Class None
    COMMENT
    COMMENT [hdulibstm32f7xxhaltim-TimOc2SetConfig-DB-LLR-005]
    COMMENT The function does the following to reset the Output Compare Mode Bits.
    COMMENT 1.Sets CCMR1 to result of bitwise AND operation of CCMR1 and negated value of TIM_CCMR1_OC2M.
    COMMENT 2.Sets CCMR1 to result of bitwise AND operation of CCMR1 and negated value of TIM_CCMR1_CC2S.
    COMMENT 3.Sets CCMR1 to result of bitwise OR operation of CCMR1 and OCMode of oc_onfig left shifted by EIGHT.   
    COMMENT Equivalence Class None
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimOc2SetConfig-DB-LLR-006]
    COMMENT The function does the following to reset Output Polarity level.
    COMMENT 1.Sets CCER to result of bitwise  AND operation of CCER and negated value of  TIM_CCER_CC2P.
    COMMENT 2.Sets CCER to result of bitwise  OR operation of CCER and OCPolarity of oc_onfig left shifted by FOUR
    COMMENT Equivalence Class None
    COMMENT
    COMMENT [hdulibstm32f7xxhaltim-TimOc2SetConfig-DB-LLR-007]
    COMMENT The function does the following when return value of IS_TIM_ADVANCED_INSTANCE with parameter tim_x is not equal to RESET.
    COMMENT 1.Sets CCER to result of bitwise AND operation of CCER and negated value of TIM_CCER_CC2NP.
    COMMENT 2.Sets  CCER to result of bitwise  OR operation of CCER and OCNPolarity of oc_onfig left shifted by FOUR.
    COMMENT 3.Sets CCER to bitwise AND operation of CCER and negated value of TIM_CCER_CC2NE.
    COMMENT 4.Sets CR2 to bitwise AND operation of CR2 and negated value of TIM_CR2_OIS2.
    COMMENT 5. Sets CR2 to bitwise AND operation of CR2 and negated value of TIM_CR2_OIS2N.
    COMMENT 6.Sets CR2 to result of bitwise OR operation of CR2 and OCIdleState of oc_onfig left shifted by TWO.
    COMMENT 7. Sets CR2 to result of bitwise OR operation of CR2 and OCNIdleState of oc_onfig left shifted by TWO.
    COMMENT Equivalence Class 26
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimOc2SetConfig-DB-LLR-008]
    COMMENT The function writes into tim_x CR2 by setting it with CR2. 
    COMMENT Equivalence Class None
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimOc2SetConfig-DB-LLR-009]
    COMMENT The function writes into tim_x CCMR1 by setting it with CCMR1.
    COMMENT Equivalence Class None
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimOc2SetConfig-DB-LLR-010]
    COMMENT The function writes into tim_x CCR2 by setting it with Pulse of oc_onfig.  
    COMMENT Equivalence Class None
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimOc2SetConfig-DB-LLR-011]
    COMMENT The function writes into tim_x CCER by setting it with CCER. 
    COMMENT Equivalence Class None
    COMMENT This test case is evaluated by giving the maximum values to inputs.
    COMMENT </TD>

        ELEMENT

            COMMENT INPUT SECTION:

                    --members of oc_onfig tested with max values

                    --Sets the Output Idle state 
                    VAR oc_onfig.OCIdleState,           init =(T_UINT32)0xFFFFFFFF,             ev = init
            
                    --Sets the Output N Idle state          
                    VAR oc_onfig.OCNIdleState,          init =(T_UINT32)0xFFFFFFFF,             ev = init
                                
                    --Sets the Output Mode              
                    VAR oc_onfig.OCMode,                init =(T_UINT32)0xFFFFFFFF,             ev = init   
                                
                    --Sets the pulse value (Min_Data)           
                    VAR oc_onfig.Pulse,                 init =0xFFFF,                           ev = init   
            
                    --Sets the Output Polarity                  
                    VAR oc_onfig.OCPolarity,            init =(T_UINT32)0xFFFFFFFF,             ev = init  

                    --Sets the Output N Polarity                      
                    VAR oc_onfig.OCNPolarity,           init =(T_UINT32)0xFFFFFFFF,             ev = init                   
                    
            COMMENT OUTPUT SECTION:

                    --Sets the Capture Compare Register value 
                    VAR PTU_TIM8_BASE.CCR2,             init =(T_UINT32)0xFFFFFFFF,             ev =0xFFFF  

            COMMENT INPUT/OUTPUT SECTION:

                    --members of tim_x tested with max values

                    --Write to tim_x CR2  
                    VAR PTU_TIM8_BASE.CR2 ,             init= (T_UINT32)0xFFFFFFFF,             ev =(T_UINT32)0xFFFFFFFF
                
                    --Write to tim_x CCMR1              
                    VAR PTU_TIM8_BASE.CCMR1,            init= (T_UINT32)0xFFFFFFFF,             ev =(T_UINT32)0xFFFFFFFF
                    
                    --Write to tim_x CCER                   
                    VAR PTU_TIM8_BASE.CCER,             init =(T_UINT32)0xFFFFFFFF,             ev =0xFFFFFFBF
                    
        -- Stub calls :
        SIMUL

          --None

        END SIMUL

            -- Calling the Unit Under Test :
            #TimOc2SetConfig(&PTU_TIM8_BASE, &oc_onfig);

        END ELEMENT

    END TEST -- TEST 4
    
--    TEST 5
--    FAMILY robustness
--
--  COMMENT Test Description 
--  COMMENT <TD>
--  COMMENT [hdulibstm32f7xxhaltim-TimOc2SetConfig-DB-LLR-001]
--  COMMENT This test case is evaluated by giving the invalid reference to input parameter tim_x.   
--  COMMENT Equivalence Class 42
--  COMMENT </TD>
--
--        ELEMENT
--
--            COMMENT INPUT SECTION:
--                  --Sets the Output Mode  
--                  VAR oc_onfig.OCMode,        init =1,            ev = init 
--                  
--                  --Sets the pulse value          
--                  VAR oc_onfig.Pulse,         init =1,            ev = init  
--          
--                  --Sets the Output Polarity                  
--                  VAR oc_onfig.OCPolarity,    init =1,            ev = init 
--
--                  --Sets the Output N Polarity                
--                  VAR oc_onfig.OCNPolarity,   init =1,            ev = init               
--          
--            COMMENT OUTPUT SECTION:
--
--                  --Sets the Capture Compare Register value 
--                  VAR tim_x.CCR2,             init =0,            ev =oc_onfig.Pulse  
--
--            COMMENT INPUT/OUTPUT SECTION:
--                  --Write to tim_x CR2
--                  VAR PTU_TIM1_BASE.CR2 ,     init= 0,            ev =init
--
--                  --Write to tim_x CCMR1 
--                  VAR tim_x.CCMR1,            init= 0,            ev =256
--
--                  --Write to tim_x CCER 
--                  VAR tim_x.CCER,             init =0,            ev =16
--                    
--        -- Stub calls :
--        SIMUL
--
--          --None
--
--        END SIMUL
--
--            -- Calling the Unit Under Test :
--            #TimOc2SetConfig(NULL, &oc_onfig);
--
--        END ELEMENT
--
--    END TEST -- TEST 5
    
--    TEST 6
--    FAMILY robustness
--
--  COMMENT Test Description 
--  COMMENT <TD>
--  COMMENT [hdulibstm32f7xxhaltim-TimOc2SetConfig-DB-LLR-001]
--  COMMENT This test case is evaluated by giving the invalid reference to input parameter oc_onfig.    
--  COMMENT Equivalence Class 43
--  COMMENT </TD>
--
--        ELEMENT
--
--            COMMENT INPUT SECTION:
--                  --Sets the Output Mode  
--                  VAR oc_onfig.OCMode,        init =1,        ev = init 
--              
--                  --Sets the pulse value      
--                  VAR oc_onfig.Pulse,         init =1,        ev = init  
--      
--                  --Sets the Output Polarity              
--                  VAR oc_onfig.OCPolarity,    init =1,        ev = init  
--
--                  --Sets the Output N Polarity                
--                  VAR oc_onfig.OCNPolarity,   init =1,        ev = init             
--          
--            COMMENT OUTPUT SECTION:
--
--                  --Sets the Capture Compare Register value 
--                  VAR tim_x.CCR2,             init =0,        ev =oc_onfig.Pulse  
--
--            COMMENT INPUT/OUTPUT SECTION:
--                  --Write to tim_x CR2
--                  VAR PTU_TIM1_BASE.CR2 ,     init= 0,        ev =init
--
--                  --Write to tim_x CCMR1 
--                  VAR tim_x.CCMR1,            init= 0,        ev =256
--
--                  --Write to tim_x CCER 
--                  VAR tim_x.CCER,             init =0,        ev =16
--                    
--        -- Stub calls :
--        SIMUL
--
--          --None
--
--        END SIMUL
--
--            -- Calling the Unit Under Test :
--            #TimOc2SetConfig(&tim_x, NULL);
--
--        END ELEMENT
--
--    END TEST -- TEST 6    

END SERVICE -- TimOc2SetConfig


--------------------------------------------------------------------------------
-- Declaration of the service TimOc3SetConfig
--------------------------------------------------------------------------------
SERVICE TimOc3SetConfig
SERVICE_TYPE extern

    -- Tested service parameters declarations
    #T_TIM tim_x;
    #T_TIM_OC_INIT oc_onfig;

    ENVIRONMENT ENV_TimOc3SetConfig
    STRUCTURE tim_x,                init = { CR1 => 0, CR2 => 0, SMCR => 0, DIER => 0, SR => 0, EGR => 0, CCMR1 => 0, CCMR2 => 0, CCER => 0, 
    & CNT => 0, PSC => 0, ARR => 0, RCR => 0, CCR1 => 0, CCR2 => 0, CCR3 => 0, CCR4 => 0, BDTR => 0, DCR => 0, DMAR => 0, OR => 0, CCMR3
    &=> 0, CCR5 => 0, CCR6 => 0 },      ev = init

    STRUCTURE PTU_TIM1_BASE,        init = { CR1 => 0, CR2 => 0, SMCR => 0, DIER => 0, SR => 0, EGR => 0, CCMR1 => 0, CCMR2 => 0, CCER => 0, 
    & CNT => 0, PSC => 0, ARR => 0, RCR => 0, CCR1 => 0, CCR2 => 0, CCR3 => 0, CCR4 => 0, BDTR => 0, DCR => 0, DMAR => 0, OR => 0, CCMR3
    &=> 0, CCR5 => 0, CCR6 => 0 },      ev = init

    STRUCTURE PTU_TIM8_BASE,        init = { CR1 => 0, CR2 => 0, SMCR => 0, DIER => 0, SR => 0, EGR => 0, CCMR1 => 0, CCMR2 => 0, CCER => 0, 
    & CNT => 0, PSC => 0, ARR => 0, RCR => 0, CCR1 => 0, CCR2 => 0, CCR3 => 0, CCR4 => 0, BDTR => 0, DCR => 0, DMAR => 0, OR => 0, CCMR3
    &=> 0, CCR5 => 0, CCR6 => 0 },      ev = init

    STRUCTURE oc_onfig,             init = { OCMode => 0, Pulse => 0, OCPolarity => 0, OCNPolarity => 0, OCFastMode => 0, OCIdleState => 0, 
    & OCNIdleState => 0 },        ev = init
    END ENVIRONMENT -- ENV_TimOc3SetConfig
    USE ENV_TimOc3SetConfig


 TEST 1
    FAMILY nominal

    COMMENT Test Description 
    COMMENT <TD>
    COMMENT [hdulibstm32f7xxhaltim-TimOc3SetConfig-DB-LLR-001]
    COMMENT The function sets CCER of tim_x to result of bitwise AND operation of CCER of tim_x and Negated value of TIM_CCER_CC3E. 
    COMMENT Equivalence Class None
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimOc3SetConfig-DB-LLR-002]
    COMMENT The function sets CCER to CCER of tim_x.
    COMMENT Equivalence Class None
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimOc3SetConfig-DB-LLR-003]
    COMMENT The function sets CR2 to CR2 of tim_x.
    COMMENT Equivalence Class None
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimOc3SetConfig-DB-LLR-004]
    COMMENT The function sets CCMR2 to CCMR2 of tim_x.
    COMMENT Equivalence Class None
    COMMENT
    COMMENT [hdulibstm32f7xxhaltim-TimOc3SetConfig-DB-LLR-005]
    COMMENT The function does the following to reset the Output Compare Mode Bits.
    COMMENT 1.Sets CCMR2 to result of bitwise AND operation of CCMR2 and negated value of TIM_CCMR2_OC3M.
    COMMENT 2.Sets CCMR3 to result of bitwise AND operation of CCMR2 and negated value of TIM_CCMR3_CC3S.
    COMMENT 3.Sets CCMR2 to result of bitwise OR operation of CCMR2 and OCMode of oc_onfig.     
    COMMENT Equivalence Class None
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimOc3SetConfig-DB-LLR-006]
    COMMENT The function does the following to reset Output Polarity level.
    COMMENT 1.Sets CCER to result of bitwise AND operation of CCER and negated value of TIM_CCER_CC3P.
    COMMENT 2.Sets CCER to result of bitwise OR operation of CCER and OCPolarity of oc_onfig left shifted by EIGHT.
    COMMENT Equivalence Class None
    COMMENT
    COMMENT [hdulibstm32f7xxhaltim-TimOc3SetConfig-DB-LLR-007]
    COMMENT The function does nothing when return value of IS_TIM_ADVANCED_INSTANCE with parameter tim_x is equal to RESET.
    COMMENT Equivalence Class 29
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimOc3SetConfig-DB-LLR-008]
    COMMENT The function writes into tim_x CR2 by setting it with CR2. 
    COMMENT Equivalence Class None
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimOc3SetConfig-DB-LLR-009]
    COMMENT The function writes into tim_x CCMR2 by setting it with CCMR2. 
    COMMENT Equivalence Class None
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimOc3SetConfig-DB-LLR-010]
    COMMENT The function writes into tim_x CCR3 by setting it with Pulse of oc_onfig. 
    COMMENT Equivalence Class None
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimOc3SetConfig-DB-LLR-011]
    COMMENT The function writes into tim_x CCER by setting it with CCER.  
    COMMENT Equivalence Class None
    COMMENT </TD>

        ELEMENT

            COMMENT INPUT SECTION:
                    --Sets the Output Mode  
                    VAR oc_onfig.OCMode,        init =1,            ev = init   
                                
                    --Sets the pulse value          
                    VAR oc_onfig.Pulse,         init =1,            ev = init   
            
                    --Sets the Output Polarity                  
                    VAR oc_onfig.OCPolarity,    init =1,            ev = init               
            
            COMMENT OUTPUT SECTION:
            
                    --Sets the Capture Compare Register value 
                    VAR tim_x.CCR3,             init =0,            ev =oc_onfig.Pulse

            COMMENT INPUT/OUTPUT SECTION:
                    --Write to tim_x CR2
                    VAR tim_x.CR2 ,             init= 0,            ev =init

                    --Write to tim_x CCMR2 
                    VAR tim_x.CCMR2,            init= 0,            ev =1

                    --Write to tim_x CCER 
                    VAR tim_x.CCER,             init =0,            ev =256
                    
        -- Stub calls :
        SIMUL

          --None

        END SIMUL

            -- Calling the Unit Under Test :
            #TimOc3SetConfig(&tim_x, &oc_onfig);

        END ELEMENT

    END TEST -- TEST 1

    TEST 2
    FAMILY nominal

    COMMENT Test Description 
    COMMENT <TD>
    COMMENT [hdulibstm32f7xxhaltim-TimOc3SetConfig-DB-LLR-001]
    COMMENT The function sets CCER of tim_x to result of bitwise AND operation of CCER of tim_x and Negated value of TIM_CCER_CC3E. 
    COMMENT Equivalence Class None
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimOc3SetConfig-DB-LLR-002]
    COMMENT The function sets CCER to CCER of tim_x.
    COMMENT Equivalence Class None
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimOc3SetConfig-DB-LLR-003]
    COMMENT The function sets CR2 to CR2 of tim_x.
    COMMENT Equivalence Class 
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimOc3SetConfig-DB-LLR-004]
    COMMENT The function sets CCMR2 to CCMR2 of tim_x.
    COMMENT Equivalence Class None
    COMMENT
    COMMENT [hdulibstm32f7xxhaltim-TimOc3SetConfig-DB-LLR-005]
    COMMENT The function does the following to reset the Output Compare Mode Bits.
    COMMENT 1.Sets CCMR2 to result of bitwise AND operation of CCMR2 and negated value of TIM_CCMR2_OC3M.
    COMMENT 2.Sets CCMR3 to result of bitwise AND operation of CCMR2 and negated value of TIM_CCMR3_CC3S.
    COMMENT 3.Sets CCMR2 to result of bitwise OR operation of CCMR2 and OCMode of oc_onfig.     
    COMMENT Equivalence Class None
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimOc3SetConfig-DB-LLR-006]
    COMMENT The function does the following to reset Output Polarity level.
    COMMENT 1.Sets CCER to result of bitwise AND operation of CCER and negated value of TIM_CCER_CC3P.
    COMMENT 2.Sets CCER to result of bitwise OR operation of CCER and OCPolarity of oc_onfig left shifted by EIGHT.
    COMMENT Equivalence Class None
    COMMENT
    COMMENT [hdulibstm32f7xxhaltim-TimOc3SetConfig-DB-LLR-007]
    COMMENT The function does the following when return value of IS_TIM_ADVANCED_INSTANCE with parameter tim_x is not equal to RESET.
    COMMENT 1.Sets CCER to result of bitwise AND operation of CCER and negated value of TIM_CCER_CC3NP.
    COMMENT 2.Sets  CCER to result of bitwise OR operation of CCER and OCNPolarity of oc_onfig left shifted by EIGHT.
    COMMENT 3.Sets CCER to bitwise AND operation of CCER and negated value of TIM_CCER_CC3NE.
    COMMENT 4.Sets CR2 to bitwise AND operation of CR2 and negated value of TIM_CR2_OIS3.
    COMMENT 5. Sets CR2 to bitwise AND operation of CR2 and negated value of TIM_CR2_OIS3N.
    COMMENT 6.Sets CR2 to result of bitwise OR operation of CR2 and OCIdleState of oc_onfig left shifted by FOUR.
    COMMENT 7. Sets CR2 to result of bitwise OR operation of CR2 and OCNIdleState of oc_onfig left shifted by FOUR.
    COMMENT Equivalence Class 28
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimOc3SetConfig-DB-LLR-008]
    COMMENT The function writes into tim_x CR2 by setting it with CR2. 
    COMMENT Equivalence Class None
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimOc3SetConfig-DB-LLR-009]
    COMMENT The function writes into tim_x CCMR2 by setting it with CCMR2. 
    COMMENT Equivalence Class None
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimOc3SetConfig-DB-LLR-010]
    COMMENT The function writes into tim_x CCR3 by setting it with Pulse of oc_onfig. 
    COMMENT Equivalence Class None
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimOc3SetConfig-DB-LLR-011]
    COMMENT The function writes into tim_x CCER by setting it with CCER.  
    COMMENT Equivalence Class None
    COMMENT This test case is evaluated by giving the nominal values to inputs.
    COMMENT </TD>


        ELEMENT

            COMMENT INPUT SECTION:

                    --members of oc_onfig tested with nominal values

                    --Sets the Output Idle state 
                    VAR oc_onfig.OCIdleState,           init =1,            ev = init
                
                    --Sets the Output N Idle state              
                    VAR oc_onfig.OCNIdleState,          init =1,            ev = init   
                                    
                    --Sets the Output Mode                  
                    VAR oc_onfig.OCMode,                init =1,            ev = init   
                                    
                    --Sets the pulse value              
                    VAR oc_onfig.Pulse,                 init =1,            ev = init   
                
                    --Sets the Output Polarity                      
                    VAR oc_onfig.OCPolarity,            init =1,            ev = init    

                    --Sets the Output N Polarity                    
                    VAR oc_onfig.OCNPolarity,           init =1,            ev = init                       
            
            COMMENT OUTPUT SECTION:
            
                    --Sets the Capture Compare Register value 
                    VAR PTU_TIM1_BASE.CCR3,             init =1,            ev =1

            COMMENT INPUT/OUTPUT SECTION:

                    --members of tim_x tested with nominal values

                    --Write to tim_x CR2  
                    VAR PTU_TIM1_BASE.CR2 ,             init= 1,            ev =17
                
                    --Write to tim_x CCMR2          
                    VAR PTU_TIM1_BASE.CCMR2,            init= 1,            ev =1
                
                    --Write to tim_x CCER           
                    VAR PTU_TIM1_BASE.CCER,             init =1,            ev =257
                    
        -- Stub calls :
        SIMUL

          --None

        END SIMUL

            -- Calling the Unit Under Test :
            #TimOc3SetConfig(&PTU_TIM1_BASE, &oc_onfig);

        END ELEMENT

    END TEST -- TEST 2

    TEST 3
    FAMILY nominal

    COMMENT Test Description 
    COMMENT <TD>
    COMMENT [hdulibstm32f7xxhaltim-TimOc3SetConfig-DB-LLR-001]
    COMMENT The function sets CCER of tim_x to result of bitwise AND operation of CCER of tim_x and Negated value of TIM_CCER_CC3E. 
    COMMENT Equivalence Class None
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimOc3SetConfig-DB-LLR-002]
    COMMENT The function sets CCER to CCER of tim_x.
    COMMENT Equivalence Class None
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimOc3SetConfig-DB-LLR-003]
    COMMENT The function sets CR2 to CR2 of tim_x.
    COMMENT Equivalence Class None
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimOc3SetConfig-DB-LLR-004]
    COMMENT The function sets CCMR2 to CCMR2 of tim_x.
    COMMENT Equivalence Class None
    COMMENT
    COMMENT [hdulibstm32f7xxhaltim-TimOc3SetConfig-DB-LLR-005]
    COMMENT The function does the following to reset the Output Compare Mode Bits.
    COMMENT 1.Sets CCMR2 to result of bitwise AND operation of CCMR2 and negated value of TIM_CCMR2_OC3M.
    COMMENT 2.Sets CCMR3 to result of bitwise AND operation of CCMR2 and negated value of TIM_CCMR3_CC3S.
    COMMENT 3.Sets CCMR2 to result of bitwise OR operation of CCMR2 and OCMode of oc_onfig.     
    COMMENT Equivalence Class None
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimOc3SetConfig-DB-LLR-006]
    COMMENT The function does the following to reset Output Polarity level.
    COMMENT 1.Sets CCER to result of bitwise AND operation of CCER and negated value of TIM_CCER_CC3P.
    COMMENT 2.Sets CCER to result of bitwise OR operation of CCER and OCPolarity of oc_onfig left shifted by EIGHT.
    COMMENT Equivalence Class None
    COMMENT
    COMMENT [hdulibstm32f7xxhaltim-TimOc3SetConfig-DB-LLR-007]
    COMMENT The function does the following when return value of IS_TIM_ADVANCED_INSTANCE with parameter tim_x is not equal to RESET.
    COMMENT 1.Sets CCER to result of bitwise AND operation of CCER and negated value of TIM_CCER_CC3NP.
    COMMENT 2.Sets  CCER to result of bitwise OR operation of CCER and OCNPolarity of oc_onfig left shifted by EIGHT.
    COMMENT 3.Sets CCER to bitwise AND operation of CCER and negated value of TIM_CCER_CC3NE.
    COMMENT 4.Sets CR2 to bitwise AND operation of CR2 and negated value of TIM_CR2_OIS3.
    COMMENT 5. Sets CR2 to bitwise AND operation of CR2 and negated value of TIM_CR2_OIS3N.
    COMMENT 6.Sets CR2 to result of bitwise OR operation of CR2 and OCIdleState of oc_onfig left shifted by FOUR.
    COMMENT 7. Sets CR2 to result of bitwise OR operation of CR2 and OCNIdleState of oc_onfig left shifted by FOUR.
    COMMENT Equivalence Class 28
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimOc3SetConfig-DB-LLR-008]
    COMMENT The function writes into tim_x CR2 by setting it with CR2. 
    COMMENT Equivalence Class None
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimOc3SetConfig-DB-LLR-009]
    COMMENT The function writes into tim_x CCMR2 by setting it with CCMR2. 
    COMMENT Equivalence Class None
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimOc3SetConfig-DB-LLR-010]
    COMMENT The function writes into tim_x CCR3 by setting it with Pulse of oc_onfig. 
    COMMENT Equivalence Class None
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimOc3SetConfig-DB-LLR-011]
    COMMENT The function writes into tim_x CCER by setting it with CCER.  
    COMMENT Equivalence Class None
    COMMENT This test case is evaluated by giving the minimum values to inputs.
    COMMENT </TD>


        ELEMENT

            COMMENT INPUT SECTION:

                    --members of oc_onfig tested with min values

                    --Sets the Output Idle state 
                    VAR oc_onfig.OCIdleState,           init =0,                ev = init
                    
                    --Sets the Output N Idle state                  
                    VAR oc_onfig.OCNIdleState,          init =0,                ev = init   
                                        
                    --Sets the Output Mode                      
                    VAR oc_onfig.OCMode,                init =0,                ev = init   
                                        
                    --Sets the pulse value                  
                    VAR oc_onfig.Pulse,                 init =0,                ev = init   
                    
                    --Sets the Output Polarity                          
                    VAR oc_onfig.OCPolarity,            init =0,                ev = init
                    
                    --Sets the Output N Polarity                        
                    VAR oc_onfig.OCNPolarity,           init =0,                ev = init                       
        
            COMMENT OUTPUT SECTION:
                        
                    --Sets the Capture Compare Register value                
                    VAR PTU_TIM8_BASE.CCR3,             init =0,                ev =0

            COMMENT INPUT/OUTPUT SECTION:

                    --members of tim_x tested with min values

                    --Write to tim_x CR2  
                    VAR PTU_TIM8_BASE.CR2 ,             init= 0,                ev =0
                        
                    --Write to tim_x CCMR2                  
                    VAR PTU_TIM8_BASE.CCMR2,            init= 0,                ev =0
                        
                    --Write to tim_x CCER                   
                    VAR PTU_TIM8_BASE.CCER,             init =0,                ev =0
                        
        -- Stub calls :
        SIMUL

          --None

        END SIMUL

            -- Calling the Unit Under Test :
            #TimOc3SetConfig(&PTU_TIM8_BASE, &oc_onfig);

        END ELEMENT

    END TEST -- TEST 3

    TEST 4
    FAMILY nominal

    COMMENT Test Description 
    COMMENT <TD>
    COMMENT [hdulibstm32f7xxhaltim-TimOc3SetConfig-DB-LLR-001]
    COMMENT The function sets CCER of tim_x to result of bitwise AND operation of CCER of tim_x and Negated value of TIM_CCER_CC3E. 
    COMMENT Equivalence Class None
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimOc3SetConfig-DB-LLR-002]
    COMMENT The function sets CCER to CCER of tim_x.
    COMMENT Equivalence Class None
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimOc3SetConfig-DB-LLR-003]
    COMMENT The function sets CR2 to CR2 of tim_x.
    COMMENT Equivalence Class None
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimOc3SetConfig-DB-LLR-004]
    COMMENT The function sets CCMR2 to CCMR2 of tim_x.
    COMMENT Equivalence Class None
    COMMENT
    COMMENT [hdulibstm32f7xxhaltim-TimOc3SetConfig-DB-LLR-005]
    COMMENT The function does the following to reset the Output Compare Mode Bits.
    COMMENT 1.Sets CCMR2 to result of bitwise AND operation of CCMR2 and negated value of TIM_CCMR2_OC3M.
    COMMENT 2.Sets CCMR3 to result of bitwise AND operation of CCMR2 and negated value of TIM_CCMR3_CC3S.
    COMMENT 3.Sets CCMR2 to result of bitwise OR operation of CCMR2 and OCMode of oc_onfig.     
    COMMENT Equivalence Class None
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimOc3SetConfig-DB-LLR-006]
    COMMENT The function does the following to reset Output Polarity level.
    COMMENT 1.Sets CCER to result of bitwise AND operation of CCER and negated value of TIM_CCER_CC3P.
    COMMENT 2.Sets CCER to result of bitwise OR operation of CCER and OCPolarity of oc_onfig left shifted by EIGHT.
    COMMENT Equivalence Class None
    COMMENT
    COMMENT [hdulibstm32f7xxhaltim-TimOc3SetConfig-DB-LLR-007]
    COMMENT The function does the following when return value of IS_TIM_ADVANCED_INSTANCE with parameter tim_x is not equal to RESET.
    COMMENT 1.Sets CCER to result of bitwise AND operation of CCER and negated value of TIM_CCER_CC3NP.
    COMMENT 2.Sets  CCER to result of bitwise OR operation of CCER and OCNPolarity of oc_onfig left shifted by EIGHT.
    COMMENT 3.Sets CCER to bitwise AND operation of CCER and negated value of TIM_CCER_CC3NE.
    COMMENT 4.Sets CR2 to bitwise AND operation of CR2 and negated value of TIM_CR2_OIS3.
    COMMENT 5. Sets CR2 to bitwise AND operation of CR2 and negated value of TIM_CR2_OIS3N.
    COMMENT 6.Sets CR2 to result of bitwise OR operation of CR2 and OCIdleState of oc_onfig left shifted by FOUR.
    COMMENT 7. Sets CR2 to result of bitwise OR operation of CR2 and OCNIdleState of oc_onfig left shifted by FOUR.
    COMMENT Equivalence Class 28
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimOc3SetConfig-DB-LLR-008]
    COMMENT The function writes into tim_x CR2 by setting it with CR2. 
    COMMENT Equivalence Class None
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimOc3SetConfig-DB-LLR-009]
    COMMENT The function writes into tim_x CCMR2 by setting it with CCMR2. 
    COMMENT Equivalence Class None
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimOc3SetConfig-DB-LLR-010]
    COMMENT The function writes into tim_x CCR3 by setting it with Pulse of oc_onfig. 
    COMMENT Equivalence Class None
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimOc3SetConfig-DB-LLR-011]
    COMMENT The function writes into tim_x CCER by setting it with CCER.  
    COMMENT Equivalence Class None
    COMMENT This test case is evaluated by giving the maximum values to inputs.
    COMMENT </TD>


        ELEMENT

            COMMENT INPUT SECTION:

                    --members of oc_onfig tested with max values

                    --Sets the Output Idle state 
                    VAR oc_onfig.OCIdleState,           init =(T_UINT32)0xFFFFFFFF,         ev = init
    
                    --Sets the Output N Idle state  
                    VAR oc_onfig.OCNIdleState,          init =(T_UINT32)0xFFFFFFFF,         ev = init   
                        
                    --Sets the Output Mode      
                    VAR oc_onfig.OCMode,                init =(T_UINT32)0xFFFFFFFF,         ev = init   
                        
                    --Sets the pulse value  
                    VAR oc_onfig.Pulse,                 init =0xFFFF,                       ev = init   
    
                    --Sets the Output Polarity          
                    VAR oc_onfig.OCPolarity,            init =(T_UINT32)0xFFFFFFFF,         ev = init  

                    --Sets the Output N Polarity        
                    VAR oc_onfig.OCNPolarity,           init =(T_UINT32)0xFFFFFFFF,         ev = init                   
        
            COMMENT OUTPUT SECTION:
            
                    --Sets the Capture Compare Register value       
                    VAR PTU_TIM8_BASE.CCR3,             init =(T_UINT32)0xFFFFFFFF,         ev =0xFFFF

            COMMENT INPUT/OUTPUT SECTION:

                    --members of tim_x tested with max values

                    --Write to tim_x CR2  
                    VAR PTU_TIM8_BASE.CR2 ,             init= (T_UINT32)0xFFFFFFFF,         ev =(T_UINT32)0xFFFFFFFF
            
                    --Write to tim_x CCMR2      
                    VAR PTU_TIM8_BASE.CCMR2,            init= (T_UINT32)0xFFFFFFFF,         ev =(T_UINT32)0xFFFFFFFF
            
                    --Write to tim_x CCER       
                    VAR PTU_TIM8_BASE.CCER,             init =(T_UINT32)0xFFFFFFFF,         ev =0xFFFFFBFF
                    
        -- Stub calls :
        SIMUL

          --None

        END SIMUL

            -- Calling the Unit Under Test :
            #TimOc3SetConfig(&PTU_TIM8_BASE, &oc_onfig);

        END ELEMENT

    END TEST -- TEST 4
    
-- TEST 5
--    FAMILY robustness
--
--  COMMENT Test Description 
--  COMMENT <TD>
--  COMMENT [hdulibstm32f7xxhaltim-TimOc3SetConfig-DB-LLR-001]
--  COMMENT This test case is evaluated by giving the invalid reference to input parameter tim_x.   
--  COMMENT Equivalence Class 44
--  COMMENT </TD>
--
--        ELEMENT
--
--            COMMENT INPUT SECTION:
--                  --Sets the Output Mode  
--                  VAR oc_onfig.OCMode,        init =1,        ev = init   
--      
--                  --Sets the pulse value 
--                  VAR oc_onfig.Pulse,         init =1,        ev = init   
--
--                  --Sets the Output Polarity      
--                  VAR oc_onfig.OCPolarity,    init =1,        ev = init   
--
--                  --Sets the Output N Polarity      
--                  VAR oc_onfig.OCNPolarity,    init =1,        ev = init       
--          
--            COMMENT OUTPUT SECTION:
--                  --Sets the Capture Compare Register value 
--                  VAR tim_x.CCR3,             init =0,        ev =oc_onfig.Pulse
--
--            COMMENT INPUT/OUTPUT SECTION:
--                  --Write to tim_x CR2
--                  VAR tim_x.CR2 ,             init= 0,        ev =init
--
--                  --Write to tim_x CCMR2 
--                  VAR tim_x.CCMR2,            init= 0,        ev =1
--
--                  --Write to tim_x CCER 
--                  VAR tim_x.CCER,             init =0,        ev =256
--                    
--        -- Stub calls :
--        SIMUL
--
--          --None
--
--        END SIMUL
--
--            -- Calling the Unit Under Test :
--            #TimOc3SetConfig(NULL, &oc_onfig);
--
--        END ELEMENT
--
--    END TEST -- TEST 5 
    
-- TEST 6
--    FAMILY robustness
--
--  COMMENT Test Description 
--  COMMENT <TD>
--  COMMENT [hdulibstm32f7xxhaltim-TimOc3SetConfig-DB-LLR-001]
--  COMMENT This test case is evaluated by giving the invalid reference to input parameter oc_onfig.    
--  COMMENT Equivalence Class 45
--  COMMENT </TD>
--
--        ELEMENT
--
--            COMMENT INPUT SECTION:
--                  --Sets the Output Mode  
--                  VAR oc_onfig.OCMode,        init =1,            ev = init   
--                  
--                  --Sets the pulse value          
--                  VAR oc_onfig.Pulse,         init =1,            ev = init   
--          
--                  --Sets the Output Polarity                  
--                  VAR oc_onfig.OCPolarity,    init =1,            ev = init  
--
--                  --Sets the Output N Polarity                  
--                  VAR oc_onfig.OCNPolarity,    init =1,            ev = init        
--          
--            COMMENT OUTPUT SECTION:
--
--                  --Sets the Capture Compare Register value 
--                  VAR tim_x.CCR3,             init =0,            ev =oc_onfig.Pulse
--
--            COMMENT INPUT/OUTPUT SECTION:
--                  --Write to tim_x CR2
--                  VAR tim_x.CR2 ,             init= 0,            ev =init
--          
--                  --Write to tim_x CCMR2          
--                  VAR tim_x.CCMR2,            init= 0,            ev =1    
--     
--                  --Write to tim_x CCER           
--                  VAR tim_x.CCER,             init =0,            ev =256
--                    
--        -- Stub calls :
--        SIMUL
--
--          --None
--
--        END SIMUL
--
--            -- Calling the Unit Under Test :
--            #TimOc3SetConfig(&tim_x, NULL);
--
--        END ELEMENT
--
--    END TEST -- TEST 6 

END SERVICE -- TimOc3SetConfig


--------------------------------------------------------------------------------
-- Declaration of the service TimBaseSetConfig
--------------------------------------------------------------------------------
SERVICE TimBaseSetConfig
SERVICE_TYPE extern

    -- Tested service parameters declarations
    #T_TIM tim_x;
    #T_TIM_BASE_INIT structure;

    ENVIRONMENT ENV_TimBaseSetConfig
    STRUCTURE tim_x,                init = { CR1 => 0, CR2 => 0, SMCR => 0, DIER => 0, SR => 0, EGR => 0, CCMR1 => 0, CCMR2 => 0, CCER => 0, 
    &CNT => 0, PSC => 0, ARR => 0, RCR => 0, CCR1 => 0, CCR2 => 0, CCR3 => 0, CCR4 => 0, BDTR => 0, DCR => 0, DMAR => 0, OR => 0, CCMR3
    &=> 0, CCR5 => 0, CCR6 => 0 },      ev = init

    STRUCTURE PTU_TIM1_BASE,        init = { CR1 => 0, CR2 => 0, SMCR => 0, DIER => 0, SR => 0, EGR => 0, CCMR1 => 0, CCMR2 => 0, CCER => 0, 
    & CNT => 0, PSC => 0, ARR => 0, RCR => 0, CCR1 => 0, CCR2 => 0, CCR3 => 0, CCR4 => 0, BDTR => 0, DCR => 0, DMAR => 0, OR => 0, CCMR3
    &=> 0, CCR5 => 0, CCR6 => 0 },      ev = init

    STRUCTURE PTU_TIM2_BASE,        init = { CR1 => 0, CR2 => 0, SMCR => 0, DIER => 0, SR => 0, EGR => 0, CCMR1 => 0, CCMR2 => 0, CCER => 0, 
    & CNT => 0, PSC => 0, ARR => 0, RCR => 0, CCR1 => 0, CCR2 => 0, CCR3 => 0, CCR4 => 0, BDTR => 0, DCR => 0, DMAR => 0, OR => 0, CCMR3
    &=> 0, CCR5 => 0, CCR6 => 0 },      ev = init

    STRUCTURE PTU_TIM3_BASE,        init = { CR1 => 0, CR2 => 0, SMCR => 0, DIER => 0, SR => 0, EGR => 0, CCMR1 => 0, CCMR2 => 0, CCER => 0, 
    & CNT => 0, PSC => 0, ARR => 0, RCR => 0, CCR1 => 0, CCR2 => 0, CCR3 => 0, CCR4 => 0, BDTR => 0, DCR => 0, DMAR => 0, OR => 0, CCMR3
    &=> 0, CCR5 => 0, CCR6 => 0 },      ev = init

    STRUCTURE PTU_TIM4_BASE,        init = { CR1 => 0, CR2 => 0, SMCR => 0, DIER => 0, SR => 0, EGR => 0, CCMR1 => 0, CCMR2 => 0, CCER => 0, 
    & CNT => 0, PSC => 0, ARR => 0, RCR => 0, CCR1 => 0, CCR2 => 0, CCR3 => 0, CCR4 => 0, BDTR => 0, DCR => 0, DMAR => 0, OR => 0, CCMR3
    &=> 0, CCR5 => 0, CCR6 => 0 },      ev = init

    STRUCTURE PTU_TIM5_BASE,        init = { CR1 => 0, CR2 => 0, SMCR => 0, DIER => 0, SR => 0, EGR => 0, CCMR1 => 0, CCMR2 => 0, CCER => 0, 
    & CNT => 0, PSC => 0, ARR => 0, RCR => 0, CCR1 => 0, CCR2 => 0, CCR3 => 0, CCR4 => 0, BDTR => 0, DCR => 0, DMAR => 0, OR => 0, CCMR3
    &=> 0, CCR5 => 0, CCR6 => 0 },      ev = init

    STRUCTURE PTU_TIM8_BASE,        init = { CR1 => 0, CR2 => 0, SMCR => 0, DIER => 0, SR => 0, EGR => 0, CCMR1 => 0, CCMR2 => 0, CCER => 0, 
    & CNT => 0, PSC => 0, ARR => 0, RCR => 0, CCR1 => 0, CCR2 => 0, CCR3 => 0, CCR4 => 0, BDTR => 0, DCR => 0, DMAR => 0, OR => 0, CCMR3
    &=> 0, CCR5 => 0, CCR6 => 0 },      ev = init

    STRUCTURE structure,                init = { Prescaler => 0, CounterMode => 0, Period => 0, ClockDivision => 0, RepetitionCounter => 0 },       
    &                                   ev = init
    END ENVIRONMENT -- ENV_TimBaseSetConfig
    USE ENV_TimBaseSetConfig


 TEST 1
    FAMILY nominal
    COMMENT Test Description 
    COMMENT <TD>
    COMMENT [hdulibstm32f7xxhaltim-TimBaseSetConfig-DB-LLR-001]
    COMMENT The function sets temporary variable to CR1 of tim_x.
    COMMENT Equivalence Class None
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimBaseSetConfig-DB-LLR-002]
    COMMENT The function does nothing when return value of the macro IS_TIM_CC3_INSTANCE with parameter tim_x is equal to RESET.
    COMMENT Equivalence Class 19
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimBaseSetConfig-DB-LLR-003]
    COMMENT The function does nothing when return value of the macro IS_TIM_CC1_INSTANCE with parameter tim_x is equal to RESET.
    COMMENT Equivalence Class 21
    COMMENT
    COMMENT [hdulibstm32f7xxhaltim-TimBaseSetConfig-DB-LLR-004]
    COMMENT The function sets CR1 of tim_x to temporary variable.
    COMMENT Equivalence Class None
    COMMENT
    COMMENT [hdulibstm32f7xxhaltim-TimBaseSetConfig-DB-LLR-005]
    COMMENT The function sets ARR of tim_x to Period of structure.
    COMMENT Equivalence Class None
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimBaseSetConfig-DB-LLR-006]
    COMMENT The function sets PSC of tim_x to Prescaler of structure.
    COMMENT Equivalence Class None
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimBaseSetConfig-DB-LLR-007]
    COMMENT The function does nothing when return value of IS_TIM_ADVANCED_INSTANCE with parameter tim_x is equal to RESET.
    COMMENT Equivalence Class 23
    COMMENT
    COMMENT [hdulibstm32f7xxhaltim-TimBaseSetConfig-DB-LLR-008]
    COMMENT The function sets EGR of tim_x to TIM_EGR_UG.
    COMMENT Equivalence Class None
    COMMENT </TD>

        ELEMENT

            COMMENT INPUT SECTION:
                    --Sets the counter Mode
                    VAR structure.CounterMode,      init =1,                    ev =init
                    --Sets the clock division                   
                    VAR structure.ClockDivision,    init =1,                    ev =init
                    --Sets the period value                 
                    VAR structure.Period ,          init =1,                    ev =init
                    --Sets the prescaler value                  
                    VAR structure.Prescaler ,       init =1,                    ev =init
            
            COMMENT OUTPUT SECTION:
                    --None

            COMMENT INPUT/OUTPUT SECTION:
                    --hold the value of the member of structure tim_x
                    VAR tim_x.CR1,                  init =1,                    ev =1
                                    
                    --Sets the Auto-reload value                    
                    VAR tim_x.ARR ,                 init= 0,                    ev = structure.Period
                    
                    --Sets the Prescaler value                  
                    VAR tim_x.PSC,                  init= 0,                    ev = structure.Prescaler
                    
                    --Generate an update event to reload the Prescaler
                    VAR tim_x.EGR,                  init =0,                    ev =TIM_EGR_UG
                    
        -- Stub calls :
        SIMUL

          --None

        END SIMUL

            -- Calling the Unit Under Test :
            #TimBaseSetConfig(&tim_x, &structure);

        END ELEMENT

    END TEST -- TEST 1

    TEST 2
    FAMILY nominal

    COMMENT Test Description 
    COMMENT <TD>
    COMMENT [hdulibstm32f7xxhaltim-TimBaseSetConfig-DB-LLR-001]
    COMMENT The function sets temporary variable to CR1 of tim_x.
    COMMENT Equivalence Class None
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimBaseSetConfig-DB-LLR-002]
    COMMENT The function does the following when return value of the macro IS_TIM_CC3_INSTANCE with parameter tim_x is not equal to RESET.
    COMMENT 1.Sets temporary variable to result of bitwise AND operation of temporary variable and negated value of result of bitwise 
    COMMENT OR operation of TIM_CR1_DIR and TIM_CR1_CMS.
    COMMENT 2. Sets temporary variable to bitwise OR operation of temporary variable and CounterMode of function parameter 'structure'.
    COMMENT Equivalence Class 18
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimBaseSetConfig-DB-LLR-003]
    COMMENT The function does the following when return value of the macro IS_TIM_CC1_INSTANCE with parameter tim_x is not equal to RESET.
    COMMENT 1.Sets temporary variable to result of bitwise AND operation of temporary variable and negated value of TIM_CR1_CKD.
    COMMENT 2. Sets temporary variable to bitwise OR operation of temporary variable and ClockDivision of structure.
    COMMENT Equivalence Class 20
    COMMENT
    COMMENT [hdulibstm32f7xxhaltim-TimBaseSetConfig-DB-LLR-004]
    COMMENT The function sets CR1 of tim_x to temporary variable.
    COMMENT Equivalence Class None
    COMMENT
    COMMENT [hdulibstm32f7xxhaltim-TimBaseSetConfig-DB-LLR-005]
    COMMENT The function sets ARR of tim_x to Period of structure.
    COMMENT Equivalence Class None
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimBaseSetConfig-DB-LLR-006]
    COMMENT The function sets PSC of tim_x to Prescaler of structure.
    COMMENT Equivalence Class None
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimBaseSetConfig-DB-LLR-007]
    COMMENT The function sets RCR of tim_x to RepetitionCounter of structure when return value of IS_TIM_ADVANCED_INSTANCE with 
    COMMENT parameter tim_x is not equal to RESET.
    COMMENT Equivalence Class 22
    COMMENT
    COMMENT [hdulibstm32f7xxhaltim-TimBaseSetConfig-DB-LLR-008]
    COMMENT The function sets EGR of tim_x to TIM_EGR_UG.
    COMMENT Equivalence Class None
    COMMENT This test case is evaluated by giving the nominal values to inputs.
    COMMENT </TD>

        ELEMENT

            COMMENT INPUT SECTION:

                    --members of the structure tested with nominal values

                    --Sets the counter Mode
                    VAR structure.CounterMode,          init =1,                ev =init
                    --Sets the clock Division               
                    VAR structure.ClockDivision,        init =1,                ev =init
                    --Sets the Period value             
                    VAR structure.Period ,              init =1,                ev =init
                    --Sets the prescaler value              
                    VAR structure.Prescaler ,           init =1,                ev =init
                    --Sets the repetition counter value             
                    VAR structure.RepetitionCounter ,   init =1,                ev =init
            
            COMMENT OUTPUT SECTION:
                    --None

            COMMENT INPUT/OUTPUT SECTION:

                    --members of the tim_x tested with nominal values
                    VAR PTU_TIM1_BASE.CR1,          init =1,                ev =1
            
                    --Sets the Auto-reload value            
                    VAR PTU_TIM1_BASE.ARR ,             init= 1,                ev = structure.Period
            
                    --Sets the Prescaler value              
                    VAR PTU_TIM1_BASE.PSC,          init= 0,                ev = structure.Prescaler
            
                    --Sets the Repetition Counter value             
                    VAR PTU_TIM1_BASE.RCR,          init =0,                ev = structure.RepetitionCounter
            
                    --Generate an update event to reload the Prescaler
                    VAR PTU_TIM1_BASE.EGR,          init =0,                ev =TIM_EGR_UG
                    
        -- Stub calls :
        SIMUL

          --None

        END SIMUL

            -- Calling the Unit Under Test :
            #TimBaseSetConfig(&PTU_TIM1_BASE, &structure);

        END ELEMENT

    END TEST -- TEST 2

    TEST 3
    FAMILY nominal

    COMMENT Test Description 
    COMMENT <TD>
    COMMENT [hdulibstm32f7xxhaltim-TimBaseSetConfig-DB-LLR-001]
    COMMENT The function sets temporary variable to CR1 of tim_x.
    COMMENT Equivalence Class None
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimBaseSetConfig-DB-LLR-002]
    COMMENT The function does the following when return value of the macro IS_TIM_CC3_INSTANCE with parameter tim_x is not equal to RESET.
    COMMENT 1.Sets temporary variable to result of bitwise AND operation of temporary variable and negated value of result of bitwise 
    COMMENT OR operation of TIM_CR1_DIR and TIM_CR1_CMS.
    COMMENT 2. Sets temporary variable to bitwise OR operation of temporary variable and CounterMode of function parameter 'structure'.
    COMMENT Equivalence Class 18
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimBaseSetConfig-DB-LLR-003]
    COMMENT The function does the following when return value of the macro IS_TIM_CC1_INSTANCE with parameter tim_x is not equal to RESET.
    COMMENT 1.Sets temporary variable to result of bitwise AND operation of temporary variable and negated value of TIM_CR1_CKD.
    COMMENT 2. Sets temporary variable to bitwise OR operation of temporary variable and ClockDivision of structure.
    COMMENT Equivalence Class 20
    COMMENT
    COMMENT [hdulibstm32f7xxhaltim-TimBaseSetConfig-DB-LLR-004]
    COMMENT The function sets CR1 of tim_x to temporary variable.
    COMMENT Equivalence Class None
    COMMENT
    COMMENT [hdulibstm32f7xxhaltim-TimBaseSetConfig-DB-LLR-005]
    COMMENT The function sets ARR of tim_x to Period of structure.
    COMMENT Equivalence Class None
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimBaseSetConfig-DB-LLR-006]
    COMMENT The function sets PSC of tim_x to Prescaler of structure.
    COMMENT Equivalence Class None
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimBaseSetConfig-DB-LLR-007]
    COMMENT The function sets RCR of tim_x to RepetitionCounter of structure when return value of IS_TIM_ADVANCED_INSTANCE with 
    COMMENT parameter tim_x is not equal to RESET.
    COMMENT Equivalence Class 22
    COMMENT
    COMMENT [hdulibstm32f7xxhaltim-TimBaseSetConfig-DB-LLR-008]
    COMMENT The function sets EGR of tim_x to TIM_EGR_UG.
    COMMENT Equivalence Class None
    COMMENT This test case is evaluated by giving the minimum values to inputs.
    COMMENT </TD>

        ELEMENT

            COMMENT INPUT SECTION:

                    --members of the structure tested with minimum values

                    --Sets the counter Mode
                    VAR structure.CounterMode,          init =0,                    ev =init
                    --Sets the clock Division           
                    VAR structure.ClockDivision,        init =0,                    ev =init
                    --Sets the Period value (Min_Data)          
                    VAR structure.Period ,              init =0x0000,               ev =init
                    --Sets the prescaler value (Min_Data)           
                    VAR structure.Prescaler ,           init =0x0000,               ev =init
                    --Sets the repetition counter value (Min_Data)          
                    VAR structure.RepetitionCounter ,   init =0x00,                 ev =init
            
            COMMENT OUTPUT SECTION:
                    --None

            COMMENT INPUT/OUTPUT SECTION:

                    --member CR1 of the structure tim_x tested with min value
                    VAR PTU_TIM8_BASE.CR1,          init =0,                    ev =init
                
                    --Sets the Auto-reload value                
                    VAR PTU_TIM8_BASE.ARR ,             init= 1,                    ev = structure.Period
                
                    --Sets the Prescaler value                  
                    VAR PTU_TIM8_BASE.PSC,          init= 1,                    ev = structure.Prescaler
                
                    --Sets the Repetition Counter value                 
                    VAR PTU_TIM8_BASE.RCR,          init =1,                    ev = structure.RepetitionCounter
                
                    --Generate an update event to reload the Prescaler
                    VAR PTU_TIM8_BASE.EGR,          init =0,                    ev =TIM_EGR_UG
                    
        -- Stub calls :
        SIMUL

          --None

        END SIMUL

            -- Calling the Unit Under Test :
            #TimBaseSetConfig(&PTU_TIM8_BASE, &structure);

        END ELEMENT

    END TEST -- TEST 3

    TEST 14
    FAMILY nominal

    COMMENT Test Description 
    COMMENT <TD>
    COMMENT [hdulibstm32f7xxhaltim-TimBaseSetConfig-DB-LLR-001]
    COMMENT The function sets temporary variable to CR1 of tim_x.
    COMMENT Equivalence Class None
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimBaseSetConfig-DB-LLR-002]
    COMMENT The function does the following when return value of the macro IS_TIM_CC3_INSTANCE with parameter tim_x is not equal to RESET.
    COMMENT 1.Sets temporary variable to result of bitwise AND operation of temporary variable and negated value of result of bitwise 
    COMMENT OR operation of TIM_CR1_DIR and TIM_CR1_CMS.
    COMMENT 2. Sets temporary variable to bitwise OR operation of temporary variable and CounterMode of function parameter 'structure'.
    COMMENT Equivalence Class 18
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimBaseSetConfig-DB-LLR-003]
    COMMENT The function does the following when return value of the macro IS_TIM_CC1_INSTANCE with parameter tim_x is not equal to RESET.
    COMMENT 1.Sets temporary variable to result of bitwise AND operation of temporary variable and negated value of TIM_CR1_CKD.
    COMMENT 2. Sets temporary variable to bitwise OR operation of temporary variable and ClockDivision of structure.
    COMMENT Equivalence Class 20
    COMMENT
    COMMENT [hdulibstm32f7xxhaltim-TimBaseSetConfig-DB-LLR-004]
    COMMENT The function sets CR1 of tim_x to temporary variable.
    COMMENT Equivalence Class None
    COMMENT
    COMMENT [hdulibstm32f7xxhaltim-TimBaseSetConfig-DB-LLR-005]
    COMMENT The function sets ARR of tim_x to Period of structure.
    COMMENT Equivalence Class None
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimBaseSetConfig-DB-LLR-006]
    COMMENT The function sets PSC of tim_x to Prescaler of structure.
    COMMENT Equivalence Class None
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimBaseSetConfig-DB-LLR-007]
    COMMENT The function sets RCR of tim_x to RepetitionCounter of structure when return value of IS_TIM_ADVANCED_INSTANCE with 
    COMMENT parameter tim_x is not equal to RESET.
    COMMENT Equivalence Class 22
    COMMENT
    COMMENT [hdulibstm32f7xxhaltim-TimBaseSetConfig-DB-LLR-008]
    COMMENT The function sets EGR of tim_x to TIM_EGR_UG.
    COMMENT Equivalence Class None
    COMMENT This test case is evaluated by giving the maximum values to inputs.
    COMMENT </TD>

        ELEMENT

            COMMENT INPUT SECTION:

                    --members of the structure tested with minimum values

                    --Sets the counter Mode
                    VAR structure.CounterMode,          init =(T_UINT32)0xFFFFFFFF,             ev =init
                    --Sets the clock Division       
                    VAR structure.ClockDivision,        init =(T_UINT32)0xFFFFFFFF,             ev =init
                    --Sets the Period value(Max_Data)       
                    VAR structure.Period ,              init =0xFFFF,                           ev =init
                    --Sets the prescaler value(Max_Data)                    
                    VAR structure.Prescaler ,           init =0xFFFF,                           ev =init
                    --Sets the repetition counter value(Max_Data)                   
                    VAR structure.RepetitionCounter ,   init =0xFF,                             ev =init
            
            COMMENT OUTPUT SECTION:
                    --None

            COMMENT INPUT/OUTPUT SECTION:

                    --member CR1 of the structure tim_x tested with min value
                    VAR PTU_TIM8_BASE.CR1, init =0,  ev =(T_UINT32)0xFFFFFFFF

                    --Sets the Auto-reload value
                    VAR PTU_TIM8_BASE.ARR , init= 1, ev = structure.Period

                    --Sets the Prescaler value  
                    VAR PTU_TIM8_BASE.PSC, init= 1, ev = structure.Prescaler

                    --Sets the Repetition Counter value 
                    VAR PTU_TIM8_BASE.RCR, init =1,  ev = structure.RepetitionCounter

                    --Generate an update event to reload the Prescaler
                    VAR PTU_TIM8_BASE.EGR, init =0,  ev =TIM_EGR_UG
                    
        -- Stub calls :
        SIMUL

          --None

        END SIMUL

            -- Calling the Unit Under Test :
            #TimBaseSetConfig(&PTU_TIM8_BASE, &structure);

        END ELEMENT

    END TEST -- TEST 14

    TEST 4
    FAMILY nominal

    COMMENT Test Description 
    COMMENT <TD>
    COMMENT [hdulibstm32f7xxhaltim-TimBaseSetConfig-DB-LLR-001]
    COMMENT The function sets temporary variable to CR1 of tim_x.
    COMMENT Equivalence Class None
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimBaseSetConfig-DB-LLR-002]
    COMMENT The function does the following when return value of the macro IS_TIM_CC3_INSTANCE with parameter tim_x is not equal to RESET.
    COMMENT 1.Sets temporary variable to result of bitwise AND operation of temporary variable and negated value of result of bitwise 
    COMMENT OR operation of TIM_CR1_DIR and TIM_CR1_CMS.
    COMMENT 2. Sets temporary variable to bitwise OR operation of temporary variable and CounterMode of function parameter 'structure'.
    COMMENT Equivalence Class 18
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimBaseSetConfig-DB-LLR-003]
    COMMENT The function does the following when return value of the macro IS_TIM_CC1_INSTANCE with parameter tim_x is not equal to RESET.
    COMMENT 1.Sets temporary variable to result of bitwise AND operation of temporary variable and negated value of TIM_CR1_CKD.
    COMMENT 2. Sets temporary variable to bitwise OR operation of temporary variable and ClockDivision of structure.
    COMMENT Equivalence Class 20
    COMMENT
    COMMENT [hdulibstm32f7xxhaltim-TimBaseSetConfig-DB-LLR-004]
    COMMENT The function sets CR1 of tim_x to temporary variable.
    COMMENT Equivalence Class None
    COMMENT
    COMMENT [hdulibstm32f7xxhaltim-TimBaseSetConfig-DB-LLR-005]
    COMMENT The function sets ARR of tim_x to Period of structure.
    COMMENT Equivalence Class None
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimBaseSetConfig-DB-LLR-006]
    COMMENT The function sets PSC of tim_x to Prescaler of structure.
    COMMENT Equivalence Class None
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimBaseSetConfig-DB-LLR-007]
    COMMENT The function sets RCR of tim_x to RepetitionCounter of structure when return value of IS_TIM_ADVANCED_INSTANCE with 
    COMMENT parameter tim_x is not equal to RESET.
    COMMENT Equivalence Class 22
    COMMENT
    COMMENT [hdulibstm32f7xxhaltim-TimBaseSetConfig-DB-LLR-008]
    COMMENT The function sets EGR of tim_x to TIM_EGR_UG.
    COMMENT Equivalence Class None
    COMMENT This test case is evaluated by using instance as TIM2.
    COMMENT </TD>

        ELEMENT

                COMMENT INPUT SECTION:
                    --Sets the counter Mode
                    VAR structure.CounterMode,          init =(T_UINT32)0xFFFFFFFF,     ev =init
                    --Sets the clock Division
                    VAR structure.ClockDivision,        init =(T_UINT32)0xFFFFFFFF,     ev =init
                    --Sets the Period value(Max_Data)
                    VAR structure.Period ,              init =0xFFFF,                   ev =init
                    --Sets the prescaler value(Max_Data)
                    VAR structure.Prescaler ,           init =0xFFFF,                   ev =init
                
                COMMENT OUTPUT SECTION:
                    --None

                COMMENT INPUT/OUTPUT SECTION:
                    --holds the value of the member of TIM2
                    VAR PTU_TIM2_BASE.CR1,              init =(T_UINT32)0xFFFFFFFF,     ev =init

                    --Sets the Auto-reload value
                    VAR PTU_TIM2_BASE.ARR ,             init= 0,                        ev = structure.Period

                    --Sets the Prescaler value  
                    VAR PTU_TIM2_BASE.PSC,              init= 0,                        ev = structure.Prescaler

                    --Generate an update event to reload the Prescaler
                    VAR PTU_TIM2_BASE.EGR,              init =0,                        ev =TIM_EGR_UG
                    
        -- Stub calls :
        SIMUL

          --None

        END SIMUL

            -- Calling the Unit Under Test :
            #TimBaseSetConfig(&PTU_TIM2_BASE, &structure);

        END ELEMENT

    END TEST -- TEST 4


    TEST 5
    FAMILY nominal

    COMMENT Test Description 
    COMMENT <TD>
    COMMENT [hdulibstm32f7xxhaltim-TimBaseSetConfig-DB-LLR-001]
    COMMENT The function sets temporary variable to CR1 of tim_x.
    COMMENT Equivalence Class None
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimBaseSetConfig-DB-LLR-002]
    COMMENT The function does the following when return value of the macro IS_TIM_CC3_INSTANCE with parameter tim_x is not equal to RESET.
    COMMENT 1.Sets temporary variable to result of bitwise AND operation of temporary variable and negated value of result of bitwise 
    COMMENT OR operation of TIM_CR1_DIR and TIM_CR1_CMS.
    COMMENT 2. Sets temporary variable to bitwise OR operation of temporary variable and CounterMode of function parameter 'structure'.
    COMMENT Equivalence Class 18
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimBaseSetConfig-DB-LLR-003]
    COMMENT The function does the following when return value of the macro IS_TIM_CC1_INSTANCE with parameter tim_x is not equal to RESET.
    COMMENT 1.Sets temporary variable to result of bitwise AND operation of temporary variable and negated value of TIM_CR1_CKD.
    COMMENT 2. Sets temporary variable to bitwise OR operation of temporary variable and ClockDivision of structure.
    COMMENT Equivalence Class 20
    COMMENT
    COMMENT [hdulibstm32f7xxhaltim-TimBaseSetConfig-DB-LLR-004]
    COMMENT The function sets CR1 of tim_x to temporary variable.
    COMMENT Equivalence Class None
    COMMENT
    COMMENT [hdulibstm32f7xxhaltim-TimBaseSetConfig-DB-LLR-005]
    COMMENT The function sets ARR of tim_x to Period of structure.
    COMMENT Equivalence Class None
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimBaseSetConfig-DB-LLR-006]
    COMMENT The function sets PSC of tim_x to Prescaler of structure.
    COMMENT Equivalence Class None
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimBaseSetConfig-DB-LLR-007]
    COMMENT The function sets RCR of tim_x to RepetitionCounter of structure when return value of IS_TIM_ADVANCED_INSTANCE with 
    COMMENT parameter tim_x is not equal to RESET.
    COMMENT Equivalence Class 22
    COMMENT
    COMMENT [hdulibstm32f7xxhaltim-TimBaseSetConfig-DB-LLR-008]
    COMMENT The function sets EGR of tim_x to TIM_EGR_UG.
    COMMENT Equivalence Class None
    COMMENT This test case is evaluated by using instance as TIM3.
    COMMENT </TD>

        ELEMENT

                COMMENT INPUT SECTION:
                    --Sets the counter Mode
                    VAR structure.CounterMode,          init =1,        ev =init
                    --Sets the clock Division       
                    VAR structure.ClockDivision,        init =1,        ev =init
                    --Sets the Period value     
                    VAR structure.Period ,              init =1,        ev =init
                    --Sets the prescaler value      
                    VAR structure.Prescaler ,           init =1,        ev =init
                    --Sets the repetition counter value     
                    VAR structure.RepetitionCounter ,   init =1,        ev =init
                
                COMMENT OUTPUT SECTION:
                    --None

                COMMENT INPUT/OUTPUT SECTION:
                    --holds the value of the member of TIM3
                    VAR PTU_TIM3_BASE.CR1,              init =0,        ev =1
                
                    --Sets the Auto-reloadvalue     
                    VAR PTU_TIM3_BASE.ARR ,             init= 0,        ev = structure.Period
                
                    --Sets the Prescaler value          
                    VAR PTU_TIM3_BASE.PSC,              init= 0,        ev = structure.Prescaler
                
                    --Generate an update event to reload the Prescaler
                    VAR PTU_TIM3_BASE.EGR,              init =0,        ev =TIM_EGR_UG
                    
        -- Stub calls :
        SIMUL

          --None

        END SIMUL

            -- Calling the Unit Under Test :
            #TimBaseSetConfig(&PTU_TIM3_BASE, &structure);

        END ELEMENT

    END TEST -- TEST 5

   TEST 6
    FAMILY nominal

    COMMENT Test Description 
    COMMENT <TD>
    COMMENT [hdulibstm32f7xxhaltim-TimBaseSetConfig-DB-LLR-001]
    COMMENT The function sets temporary variable to CR1 of tim_x.
    COMMENT Equivalence Class None
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimBaseSetConfig-DB-LLR-002]
    COMMENT The function does the following when return value of the macro IS_TIM_CC3_INSTANCE with parameter tim_x is not equal to RESET.
    COMMENT 1.Sets temporary variable to result of bitwise AND operation of temporary variable and negated value of result of bitwise 
    COMMENT OR operation of TIM_CR1_DIR and TIM_CR1_CMS.
    COMMENT 2. Sets temporary variable to bitwise OR operation of temporary variable and CounterMode of function parameter 'structure'.
    COMMENT Equivalence Class 18
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimBaseSetConfig-DB-LLR-003]
    COMMENT The function does the following when return value of the macro IS_TIM_CC1_INSTANCE with parameter tim_x is not equal to RESET.
    COMMENT 1.Sets temporary variable to result of bitwise AND operation of temporary variable and negated value of TIM_CR1_CKD.
    COMMENT 2. Sets temporary variable to bitwise OR operation of temporary variable and ClockDivision of structure.
    COMMENT Equivalence Class 20
    COMMENT
    COMMENT [hdulibstm32f7xxhaltim-TimBaseSetConfig-DB-LLR-004]
    COMMENT The function sets CR1 of tim_x to temporary variable.
    COMMENT Equivalence Class None
    COMMENT
    COMMENT [hdulibstm32f7xxhaltim-TimBaseSetConfig-DB-LLR-005]
    COMMENT The function sets ARR of tim_x to Period of structure.
    COMMENT Equivalence Class None
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimBaseSetConfig-DB-LLR-006]
    COMMENT The function sets PSC of tim_x to Prescaler of structure.
    COMMENT Equivalence Class None
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimBaseSetConfig-DB-LLR-007]
    COMMENT The function sets RCR of tim_x to RepetitionCounter of structure when return value of IS_TIM_ADVANCED_INSTANCE with 
    COMMENT parameter tim_x is not equal to RESET.
    COMMENT Equivalence Class 22
    COMMENT
    COMMENT [hdulibstm32f7xxhaltim-TimBaseSetConfig-DB-LLR-008]
    COMMENT The function sets EGR of tim_x to TIM_EGR_UG.
    COMMENT Equivalence Class None
    COMMENT This test case is evaluated by using instance as TIM4.
    COMMENT </TD>

        ELEMENT

                COMMENT INPUT SECTION:
                    --Sets the counter Mode
                    VAR structure.CounterMode,          init =1,        ev =init
                    --Sets the clock Division       
                    VAR structure.ClockDivision,        init =1,        ev =init
                    --Sets the Period value     
                    VAR structure.Period ,              init =1,        ev =init
                    --Sets the prescaler value      
                    VAR structure.Prescaler ,           init =1,        ev =init
                    --Sets the repetition counter value     
                    VAR structure.RepetitionCounter ,   init =1,        ev =init
                
                COMMENT OUTPUT SECTION:
                --None

                COMMENT INPUT/OUTPUT SECTION:
                    --holds the value of the member of TIM4
                    VAR PTU_TIM4_BASE.CR1,              init =0,        ev =1
    
                    --Sets the Auto-reload value    
                    VAR PTU_TIM4_BASE.ARR ,             init= 0,        ev = structure.Period
    
                    --Sets the Prescaler value      
                    VAR PTU_TIM4_BASE.PSC,              init= 0,        ev = structure.Prescaler
    
                    --Generate an update event to reload the Prescaler
                    VAR PTU_TIM4_BASE.EGR,              init =0,        ev =TIM_EGR_UG
                    
        -- Stub calls :
        SIMUL

          --None

        END SIMUL

            -- Calling the Unit Under Test :
            #TimBaseSetConfig(&PTU_TIM4_BASE, &structure);

        END ELEMENT

    END TEST -- TEST 6

   TEST 7
    FAMILY nominal

    COMMENT Test Description 
    COMMENT <TD>
    COMMENT [hdulibstm32f7xxhaltim-TimBaseSetConfig-DB-LLR-001]
    COMMENT The function sets temporary variable to CR1 of tim_x.
    COMMENT Equivalence Class None
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimBaseSetConfig-DB-LLR-002]
    COMMENT The function does the following when return value of the macro IS_TIM_CC3_INSTANCE with parameter tim_x is not equal to RESET.
    COMMENT 1.Sets temporary variable to result of bitwise AND operation of temporary variable and negated value of result of bitwise 
    COMMENT OR operation of TIM_CR1_DIR and TIM_CR1_CMS.
    COMMENT 2. Sets temporary variable to bitwise OR operation of temporary variable and CounterMode of function parameter 'structure'.
    COMMENT Equivalence Class 18
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimBaseSetConfig-DB-LLR-003]
    COMMENT The function does the following when return value of the macro IS_TIM_CC1_INSTANCE with parameter tim_x is not equal to RESET.
    COMMENT 1.Sets temporary variable to result of bitwise AND operation of temporary variable and negated value of TIM_CR1_CKD.
    COMMENT 2. Sets temporary variable to bitwise OR operation of temporary variable and ClockDivision of structure.
    COMMENT Equivalence Class 20
    COMMENT
    COMMENT [hdulibstm32f7xxhaltim-TimBaseSetConfig-DB-LLR-004]
    COMMENT The function sets CR1 of tim_x to temporary variable.
    COMMENT Equivalence Class None
    COMMENT
    COMMENT [hdulibstm32f7xxhaltim-TimBaseSetConfig-DB-LLR-005]
    COMMENT The function sets ARR of tim_x to Period of structure.
    COMMENT Equivalence Class None
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimBaseSetConfig-DB-LLR-006]
    COMMENT The function sets PSC of tim_x to Prescaler of structure.
    COMMENT Equivalence Class None
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimBaseSetConfig-DB-LLR-007]
    COMMENT The function sets RCR of tim_x to RepetitionCounter of structure when return value of IS_TIM_ADVANCED_INSTANCE with parameter 
    COMMENT tim_x is not equal to RESET.
    COMMENT Equivalence Class 22
    COMMENT
    COMMENT [hdulibstm32f7xxhaltim-TimBaseSetConfig-DB-LLR-008]
    COMMENT The function sets EGR of tim_x to TIM_EGR_UG.
    COMMENT Equivalence Class None
    COMMENT This test case is evaluated by using instance as TIM5.
    COMMENT </TD>

        ELEMENT

                COMMENT INPUT SECTION:
                    --Sets the counter Mode
                    VAR structure.CounterMode,          init =1,        ev =init
                    --Sets the clock Division       
                    VAR structure.ClockDivision,        init =1,        ev =init
                    --Sets the Period value     
                    VAR structure.Period ,              init =1,        ev =init
                    --Sets the prescaler value      
                    VAR structure.Prescaler ,           init =1,        ev =init
                    --Sets the repetition counter value     
                    VAR structure.RepetitionCounter ,   init =1,        ev =init
                
                COMMENT OUTPUT SECTION:
                    --None

                COMMENT INPUT/OUTPUT SECTION:
                    --holds the value of the member of TIM2
                    VAR PTU_TIM5_BASE.CR1,              init =0,        ev =1

                    --Sets the Auto-reload value
                    VAR PTU_TIM5_BASE.ARR ,             init= 0,        ev = structure.Period

                    --Sets the Prescaler value  
                    VAR PTU_TIM5_BASE.PSC,              init= 0,        ev = structure.Prescaler

                    --Generate an update event to reload the Prescaler
                    VAR PTU_TIM5_BASE.EGR,              init =0,        ev =TIM_EGR_UG
                    
        -- Stub calls :
        SIMUL

          --None

        END SIMUL

            -- Calling the Unit Under Test :
            #TimBaseSetConfig(&PTU_TIM5_BASE, &structure);

        END ELEMENT

    END TEST -- TEST 7

   TEST 8
    FAMILY nominal

    COMMENT Test Description 
    COMMENT <TD>
    COMMENT [hdulibstm32f7xxhaltim-TimBaseSetConfig-DB-LLR-001]
    COMMENT The function sets temporary variable to CR1 of tim_x.
    COMMENT Equivalence Class None
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimBaseSetConfig-DB-LLR-002]
    COMMENT The function does the following when return value of the macro IS_TIM_CC3_INSTANCE with parameter tim_x is not equal to RESET.
    COMMENT 1.Sets temporary variable to result of bitwise AND operation of temporary variable and negated value of result of bitwise OR 
    COMMENT operation of TIM_CR1_DIR and TIM_CR1_CMS.
    COMMENT 2. Sets temporary variable to bitwise OR operation of temporary variable and CounterMode of function parameter 'structure'.
    COMMENT Equivalence Class 18
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimBaseSetConfig-DB-LLR-003]
    COMMENT The function does the following when return value of the macro IS_TIM_CC1_INSTANCE with parameter tim_x is not equal to RESET.
    COMMENT 1.Sets temporary variable to result of bitwise AND operation of temporary variable and negated value of TIM_CR1_CKD.
    COMMENT 2. Sets temporary variable to bitwise OR operation of temporary variable and ClockDivision of structure.
    COMMENT Equivalence Class 20
    COMMENT
    COMMENT [hdulibstm32f7xxhaltim-TimBaseSetConfig-DB-LLR-004]
    COMMENT The function sets CR1 of tim_x to temporary variable.
    COMMENT Equivalence Class None
    COMMENT
    COMMENT [hdulibstm32f7xxhaltim-TimBaseSetConfig-DB-LLR-005]
    COMMENT The function sets ARR of tim_x to Period of structure.
    COMMENT Equivalence Class None
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimBaseSetConfig-DB-LLR-006]
    COMMENT The function sets PSC of tim_x to Prescaler of structure.
    COMMENT Equivalence Class None
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimBaseSetConfig-DB-LLR-007]
    COMMENT The function sets RCR of tim_x to RepetitionCounter of structure when return value of IS_TIM_ADVANCED_INSTANCE with parameter 
    COMMENT tim_x is not equal to RESET.
    COMMENT Equivalence Class 22
    COMMENT
    COMMENT [hdulibstm32f7xxhaltim-TimBaseSetConfig-DB-LLR-008]
    COMMENT The function sets EGR of tim_x to TIM_EGR_UG.
    COMMENT Equivalence Class None
    COMMENT This test case is evaluated by using instance as TIM9.
    COMMENT </TD>

        ELEMENT

                COMMENT INPUT SECTION:
                    --Sets the counter Mode
                    VAR structure.CounterMode,          init =1,        ev =init
                    --Sets the clock Division       
                    VAR structure.ClockDivision,        init =1,        ev =init
                    --Sets the Period value     
                    VAR structure.Period ,              init =1,        ev =init
                    --Sets the prescaler value      
                    VAR structure.Prescaler ,           init =1,        ev =init
                    --Sets the repetition counter value     
                    VAR structure.RepetitionCounter ,   init =1,        ev =init
                
                COMMENT OUTPUT SECTION:
                    --None

                COMMENT INPUT/OUTPUT SECTION:

                    VAR PTU_TIM9_BASE.CR1,              init =0,        ev =1

                    --Sets the Auto-reload value
                    VAR PTU_TIM9_BASE.ARR ,             init= 0,        ev = structure.Period

                    --Sets the Prescaler value  
                    VAR PTU_TIM9_BASE.PSC,              init= 0,        ev = structure.Prescaler

                    --Generate an update event to reload the Prescaler
                    VAR PTU_TIM9_BASE.EGR,              init =0,        ev =TIM_EGR_UG
                    
        -- Stub calls :
        SIMUL

          --None

        END SIMUL

            -- Calling the Unit Under Test :
            #TimBaseSetConfig(&PTU_TIM9_BASE, &structure);

        END ELEMENT

    END TEST -- TEST 8

 TEST 9
    FAMILY nominal

    COMMENT Test Description 
    COMMENT <TD>
    COMMENT [hdulibstm32f7xxhaltim-TimBaseSetConfig-DB-LLR-001]
    COMMENT The function sets temporary variable to CR1 of tim_x.
    COMMENT Equivalence Class None
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimBaseSetConfig-DB-LLR-002]
    COMMENT The function does the following when return value of the macro IS_TIM_CC3_INSTANCE with parameter tim_x is not equal to RESET.
    COMMENT 1.Sets temporary variable to result of bitwise AND operation of temporary variable and negated value of result of bitwise 
    COMMENT OR operation of TIM_CR1_DIR and TIM_CR1_CMS.
    COMMENT 2. Sets temporary variable to bitwise OR operation of temporary variable and CounterMode of function parameter 'structure'.
    COMMENT Equivalence Class 18
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimBaseSetConfig-DB-LLR-003]
    COMMENT The function does the following when return value of the macro IS_TIM_CC1_INSTANCE with parameter tim_x is not equal to RESET.
    COMMENT 1.Sets temporary variable to result of bitwise AND operation of temporary variable and negated value of TIM_CR1_CKD.
    COMMENT 2. Sets temporary variable to bitwise OR operation of temporary variable and ClockDivision of structure.
    COMMENT Equivalence Class 20
    COMMENT
    COMMENT [hdulibstm32f7xxhaltim-TimBaseSetConfig-DB-LLR-004]
    COMMENT The function sets CR1 of tim_x to temporary variable.
    COMMENT Equivalence Class None
    COMMENT
    COMMENT [hdulibstm32f7xxhaltim-TimBaseSetConfig-DB-LLR-005]
    COMMENT The function sets ARR of tim_x to Period of structure.
    COMMENT Equivalence Class None
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimBaseSetConfig-DB-LLR-006]
    COMMENT The function sets PSC of tim_x to Prescaler of structure.
    COMMENT Equivalence Class None
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimBaseSetConfig-DB-LLR-007]
    COMMENT The function sets RCR of tim_x to RepetitionCounter of structure when return value of IS_TIM_ADVANCED_INSTANCE with parameter tim_x 
    COMMENT is not equal to RESET.
    COMMENT Equivalence Class 22
    COMMENT
    COMMENT [hdulibstm32f7xxhaltim-TimBaseSetConfig-DB-LLR-008]
    COMMENT The function sets EGR of tim_x to TIM_EGR_UG.
    COMMENT Equivalence Class None
    COMMENT This test case is evaluated by using instance as TIM10.
    COMMENT </TD>

        ELEMENT

                COMMENT INPUT SECTION:
                    --Sets the counter Mode
                    VAR structure.CounterMode,          init =1,            ev =init
                    --Sets the clock Division           
                    VAR structure.ClockDivision,        init =1,            ev =init
                    --Sets the Period value         
                    VAR structure.Period ,              init =1,            ev =init
                    --Sets the prescaler value          
                    VAR structure.Prescaler ,           init =1,            ev =init
                    --Sets the repetition counter value         
                    VAR structure.RepetitionCounter ,   init =1,            ev =init
                
                COMMENT OUTPUT SECTION:
                    --None

                COMMENT INPUT/OUTPUT SECTION:

                    VAR PTU_TIM10_BASE.CR1,             init =0,            ev =1

                    --Sets the Auto-reload value
                    VAR PTU_TIM10_BASE.ARR ,            init= 0,            ev = structure.Period

                    --Sets the Prescaler value  
                    VAR PTU_TIM10_BASE.PSC,             init= 0,            ev = structure.Prescaler

                    --Generate an update event to reload the Prescaler
                    VAR PTU_TIM10_BASE.EGR,             init =0,            ev =TIM_EGR_UG
                    
        -- Stub calls :
        SIMUL

          --None

        END SIMUL

            -- Calling the Unit Under Test :
            #TimBaseSetConfig(&PTU_TIM10_BASE, &structure);

        END ELEMENT

    END TEST -- TEST 9

 TEST 10
    FAMILY nominal

    COMMENT Test Description 
    COMMENT <TD>
    COMMENT [hdulibstm32f7xxhaltim-TimBaseSetConfig-DB-LLR-001]
    COMMENT The function sets temporary variable to CR1 of tim_x.
    COMMENT Equivalence Class None
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimBaseSetConfig-DB-LLR-002]
    COMMENT The function does the following when return value of the macro IS_TIM_CC3_INSTANCE with parameter tim_x is not equal to RESET.
    COMMENT 1.Sets temporary variable to result of bitwise AND operation of temporary variable and negated value of result of bitwise OR 
    COMMENT operation of TIM_CR1_DIR and TIM_CR1_CMS.
    COMMENT 2. Sets temporary variable to bitwise OR operation of temporary variable and CounterMode of function parameter 'structure'.
    COMMENT Equivalence Class 18
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimBaseSetConfig-DB-LLR-003]
    COMMENT The function does the following when return value of the macro IS_TIM_CC1_INSTANCE with parameter tim_x is not equal to RESET.
    COMMENT 1.Sets temporary variable to result of bitwise AND operation of temporary variable and negated value of TIM_CR1_CKD.
    COMMENT 2. Sets temporary variable to bitwise OR operation of temporary variable and ClockDivision of structure.
    COMMENT Equivalence Class 20
    COMMENT
    COMMENT [hdulibstm32f7xxhaltim-TimBaseSetConfig-DB-LLR-004]
    COMMENT The function sets CR1 of tim_x to temporary variable.
    COMMENT Equivalence Class None
    COMMENT
    COMMENT [hdulibstm32f7xxhaltim-TimBaseSetConfig-DB-LLR-005]
    COMMENT The function sets ARR of tim_x to Period of structure.
    COMMENT Equivalence Class None
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimBaseSetConfig-DB-LLR-006]
    COMMENT The function sets PSC of tim_x to Prescaler of structure.
    COMMENT Equivalence Class None
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimBaseSetConfig-DB-LLR-007]
    COMMENT The function sets RCR of tim_x to RepetitionCounter of structure when return value of IS_TIM_ADVANCED_INSTANCE with parameter 
    COMMENT tim_x is not equal to RESET.
    COMMENT Equivalence Class 22
    COMMENT
    COMMENT [hdulibstm32f7xxhaltim-TimBaseSetConfig-DB-LLR-008]
    COMMENT The function sets EGR of tim_x to TIM_EGR_UG.
    COMMENT Equivalence Class None
    COMMENT This test case is evaluated by using instance as TIM11.
    COMMENT </TD>

        ELEMENT

                COMMENT INPUT SECTION:
                    --Sets the counter Mode
                    VAR structure.CounterMode,          init =1,        ev =init
                    --Sets the clock Division       
                    VAR structure.ClockDivision,        init =1,        ev =init
                    --Sets the Period value     
                    VAR structure.Period ,              init =1,        ev =init
                    --Sets the prescaler value      
                    VAR structure.Prescaler ,           init =1,        ev =init
                    --Sets the repetition counter value     
                    VAR structure.RepetitionCounter ,   init =1,        ev =init
                
                COMMENT OUTPUT SECTION:
                    --None

                COMMENT INPUT/OUTPUT SECTION:

                    VAR PTU_TIM11_BASE.CR1,             init =0,        ev =1

                    --Sets the Auto-reload value
                    VAR PTU_TIM11_BASE.ARR ,            init= 0,        ev = structure.Period

                    --Sets the Prescaler value  
                    VAR PTU_TIM11_BASE.PSC,             init= 0,        ev = structure.Prescaler

                    --Generate an update event to reload the Prescaler
                    VAR PTU_TIM11_BASE.EGR,             init =0,        ev =TIM_EGR_UG
                    
        -- Stub calls :
        SIMUL

          --None

        END SIMUL

            -- Calling the Unit Under Test :
            #TimBaseSetConfig(&PTU_TIM11_BASE, &structure);

        END ELEMENT

    END TEST -- TEST 10


 TEST 11
    FAMILY nominal

    COMMENT Test Description 
    COMMENT <TD>
    COMMENT [hdulibstm32f7xxhaltim-TimBaseSetConfig-DB-LLR-001]
    COMMENT The function sets temporary variable to CR1 of tim_x.
    COMMENT Equivalence Class None
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimBaseSetConfig-DB-LLR-002]
    COMMENT The function does the following when return value of the macro IS_TIM_CC3_INSTANCE with parameter tim_x is not equal to RESET.
    COMMENT 1.Sets temporary variable to result of bitwise AND operation of temporary variable and negated value of result of bitwise 
    COMMENT OR operation of TIM_CR1_DIR and TIM_CR1_CMS.
    COMMENT 2. Sets temporary variable to bitwise OR operation of temporary variable and CounterMode of function parameter 'structure'.
    COMMENT Equivalence Class 18
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimBaseSetConfig-DB-LLR-003]
    COMMENT The function does the following when return value of the macro IS_TIM_CC1_INSTANCE with parameter tim_x is not equal to RESET.
    COMMENT 1.Sets temporary variable to result of bitwise AND operation of temporary variable and negated value of TIM_CR1_CKD.
    COMMENT 2. Sets temporary variable to bitwise OR operation of temporary variable and ClockDivision of structure.
    COMMENT Equivalence Class 20
    COMMENT
    COMMENT [hdulibstm32f7xxhaltim-TimBaseSetConfig-DB-LLR-004]
    COMMENT The function sets CR1 of tim_x to temporary variable.
    COMMENT Equivalence Class None
    COMMENT
    COMMENT [hdulibstm32f7xxhaltim-TimBaseSetConfig-DB-LLR-005]
    COMMENT The function sets ARR of tim_x to Period of structure.
    COMMENT Equivalence Class None
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimBaseSetConfig-DB-LLR-006]
    COMMENT The function sets PSC of tim_x to Prescaler of structure.
    COMMENT Equivalence Class None
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimBaseSetConfig-DB-LLR-007]
    COMMENT The function sets RCR of tim_x to RepetitionCounter of structure when return value of IS_TIM_ADVANCED_INSTANCE with 
    COMMENT parameter tim_x is not equal to RESET.
    COMMENT Equivalence Class 22
    COMMENT
    COMMENT [hdulibstm32f7xxhaltim-TimBaseSetConfig-DB-LLR-008]
    COMMENT The function sets EGR of tim_x to TIM_EGR_UG.
    COMMENT Equivalence Class None
    COMMENT This test case is evaluated by using instance as TIM12.
    COMMENT </TD>

        ELEMENT

                COMMENT INPUT SECTION:
                    --Sets the counter Mode
                    VAR structure.CounterMode,          init =1,        ev =init
                    --Sets the clock Division       
                    VAR structure.ClockDivision,        init =1,        ev =init
                    --Sets the Period value     
                    VAR structure.Period ,              init =1,        ev =init
                    --Sets the prescaler value      
                    VAR structure.Prescaler ,           init =1,        ev =init
                    --Sets the repetition counter value     
                    VAR structure.RepetitionCounter ,   init =1,        ev =init
                
                COMMENT OUTPUT SECTION:
                    --None

                COMMENT INPUT/OUTPUT SECTION:

                    VAR PTU_TIM12_BASE.CR1,             init =0,        ev =1
            
                    --Sets the Auto-reload value
                    VAR PTU_TIM12_BASE.ARR ,            init= 0,        ev = structure.Period
            
                    --Sets the Prescaler value  
                    VAR PTU_TIM12_BASE.PSC,             init= 0,        ev = structure.Prescaler
            
                    --Generate an update event to reload the Prescaler
                    VAR PTU_TIM12_BASE.EGR,             init =0,        ev =TIM_EGR_UG
                    
        -- Stub calls :
        SIMUL

          --None

        END SIMUL

            -- Calling the Unit Under Test :
            #TimBaseSetConfig(&PTU_TIM12_BASE, &structure);

        END ELEMENT

    END TEST -- TEST 11


 TEST 12
    FAMILY nominal

    COMMENT Test Description 
    COMMENT <TD>
    COMMENT [hdulibstm32f7xxhaltim-TimBaseSetConfig-DB-LLR-001]
    COMMENT The function sets temporary variable to CR1 of tim_x.
    COMMENT Equivalence Class None
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimBaseSetConfig-DB-LLR-002]
    COMMENT The function does the following when return value of the macro IS_TIM_CC3_INSTANCE with parameter tim_x is not equal to RESET.
    COMMENT 1.Sets temporary variable to result of bitwise AND operation of temporary variable and negated value of result of bitwise 
    COMMENT OR operation of TIM_CR1_DIR and TIM_CR1_CMS.
    COMMENT 2. Sets temporary variable to bitwise OR operation of temporary variable and CounterMode of function parameter 'structure'.
    COMMENT Equivalence Class 18
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimBaseSetConfig-DB-LLR-003]
    COMMENT The function does the following when return value of the macro IS_TIM_CC1_INSTANCE with parameter tim_x is not equal to RESET.
    COMMENT 1.Sets temporary variable to result of bitwise AND operation of temporary variable and negated value of TIM_CR1_CKD.
    COMMENT 2. Sets temporary variable to bitwise OR operation of temporary variable and ClockDivision of structure.
    COMMENT Equivalence Class 20
    COMMENT
    COMMENT [hdulibstm32f7xxhaltim-TimBaseSetConfig-DB-LLR-004]
    COMMENT The function sets CR1 of tim_x to temporary variable.
    COMMENT Equivalence Class None
    COMMENT
    COMMENT [hdulibstm32f7xxhaltim-TimBaseSetConfig-DB-LLR-005]
    COMMENT The function sets ARR of tim_x to Period of structure.
    COMMENT Equivalence Class None
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimBaseSetConfig-DB-LLR-006]
    COMMENT The function sets PSC of tim_x to Prescaler of structure.
    COMMENT Equivalence Class None
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimBaseSetConfig-DB-LLR-007]
    COMMENT The function sets RCR of tim_x to RepetitionCounter of structure when return value of IS_TIM_ADVANCED_INSTANCE with 
    COMMENT parameter tim_x is not equal to RESET.
    COMMENT Equivalence Class 22
    COMMENT
    COMMENT [hdulibstm32f7xxhaltim-TimBaseSetConfig-DB-LLR-008]
    COMMENT The function sets EGR of tim_x to TIM_EGR_UG.
    COMMENT Equivalence Class None
    COMMENT This test case is evaluated by using instance as TIM13.
    COMMENT </TD>

        ELEMENT

                COMMENT INPUT SECTION:
                    --Sets the counter Mode
                    VAR structure.CounterMode,          init =1,        ev =init
                    --Sets the clock Division       
                    VAR structure.ClockDivision,        init =1,        ev =init
                    --Sets the Period value     
                    VAR structure.Period ,              init =1,        ev =init
                    --Sets the prescaler value      
                    VAR structure.Prescaler ,           init =1,        ev =init
                    --Sets the repetition counter value     
                    VAR structure.RepetitionCounter ,   init =1,        ev =init
                
                COMMENT OUTPUT SECTION:
                    --None

                COMMENT INPUT/OUTPUT SECTION:

                    VAR PTU_TIM13_BASE.CR1,             init =0,        ev =1
        
                    --Sets the Auto-reload value        
                    VAR PTU_TIM13_BASE.ARR ,            init= 0,        ev = structure.Period
        
                    --Sets the Prescaler value          
                    VAR PTU_TIM13_BASE.PSC,             init= 0,        ev = structure.Prescaler
        
                    --Generate an update event to reload the Prescaler
                    VAR PTU_TIM13_BASE.EGR,             init =0,        ev =TIM_EGR_UG
                    
        -- Stub calls :
        SIMUL

          --None

        END SIMUL

            -- Calling the Unit Under Test :
            #TimBaseSetConfig(&PTU_TIM13_BASE, &structure);

        END ELEMENT

    END TEST -- TEST 12

 TEST 13
    FAMILY nominal

    COMMENT Test Description 
    COMMENT <TD>
    COMMENT [hdulibstm32f7xxhaltim-TimBaseSetConfig-DB-LLR-001]
    COMMENT The function sets temporary variable to CR1 of tim_x.
    COMMENT Equivalence Class None
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimBaseSetConfig-DB-LLR-002]
    COMMENT The function does the following when return value of the macro IS_TIM_CC3_INSTANCE with parameter tim_x is not equal to RESET.
    COMMENT 1.Sets temporary variable to result of bitwise AND operation of temporary variable and negated value of result of bitwise 
    COMMENT OR operation of TIM_CR1_DIR and TIM_CR1_CMS.
    COMMENT 2. Sets temporary variable to bitwise OR operation of temporary variable and CounterMode of function parameter 'structure'.
    COMMENT Equivalence Class 18
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimBaseSetConfig-DB-LLR-003]
    COMMENT The function does the following when return value of the macro IS_TIM_CC1_INSTANCE with parameter tim_x is not equal to RESET.
    COMMENT 1.Sets temporary variable to result of bitwise AND operation of temporary variable and negated value of TIM_CR1_CKD.
    COMMENT 2. Sets temporary variable to bitwise OR operation of temporary variable and ClockDivision of structure.
    COMMENT Equivalence Class 20
    COMMENT
    COMMENT [hdulibstm32f7xxhaltim-TimBaseSetConfig-DB-LLR-004]
    COMMENT The function sets CR1 of tim_x to temporary variable.
    COMMENT Equivalence Class None
    COMMENT
    COMMENT [hdulibstm32f7xxhaltim-TimBaseSetConfig-DB-LLR-005]
    COMMENT The function sets ARR of tim_x to Period of structure.
    COMMENT Equivalence Class None
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimBaseSetConfig-DB-LLR-006]
    COMMENT The function sets PSC of tim_x to Prescaler of structure.
    COMMENT Equivalence Class None
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimBaseSetConfig-DB-LLR-007]
    COMMENT The function sets RCR of tim_x to RepetitionCounter of structure when return value of IS_TIM_ADVANCED_INSTANCE with 
    COMMENT parameter tim_x is not equal to RESET.
    COMMENT Equivalence Class 22
    COMMENT
    COMMENT [hdulibstm32f7xxhaltim-TimBaseSetConfig-DB-LLR-008]
    COMMENT The function sets EGR of tim_x to TIM_EGR_UG.
    COMMENT Equivalence Class None
    COMMENT This test case is evaluated by using instance as TIM14.
    COMMENT </TD>

        ELEMENT

                COMMENT INPUT SECTION:
                    --Sets the counter Mode
                    VAR structure.CounterMode,          init =1,            ev =init
                    --Sets the clock Division           
                    VAR structure.ClockDivision,        init =1,            ev =init
                    --Sets the Period value         
                    VAR structure.Period ,              init =1,            ev =init
                    --Sets the prescaler value          
                    VAR structure.Prescaler ,           init =1,            ev =init
                    --Sets the repetition counter value         
                    VAR structure.RepetitionCounter ,   init =1,            ev =init
                
                COMMENT OUTPUT SECTION:
                    --None

                COMMENT INPUT/OUTPUT SECTION:

                    VAR PTU_TIM14_BASE.CR1,             init =0,            ev =1

                    --Sets the Auto-reload value
                    VAR PTU_TIM14_BASE.ARR ,            init= 0,            ev = structure.Period

                    --Sets the Prescaler value  
                    VAR PTU_TIM14_BASE.PSC,             init= 0,            ev = structure.Prescaler

                    --Generate an update event to reload the Prescaler
                    VAR PTU_TIM14_BASE.EGR,             init =0,            ev =TIM_EGR_UG
                    
        -- Stub calls :
        SIMUL

          --None

        END SIMUL

            -- Calling the Unit Under Test :
            #TimBaseSetConfig(&PTU_TIM14_BASE, &structure);

        END ELEMENT

    END TEST -- TEST 13
    
-- TEST 15
--    FAMILY robustness
--  
--  COMMENT Test Description 
--  COMMENT <TD>
--  COMMENT [hdulibstm32f7xxhaltim-TimBaseSetConfig-DB-LLR-001]
--  COMMENT This test case is evaluated by giving the invalid reference to input parameter tim_x.
--  COMMENT Equivalence Class 38
--  COMMENT </TD>
--
--    ELEMENT
--
--              COMMENT INPUT SECTION:
--                      --Sets the counter Mode
--                      VAR structure.CounterMode,      init =1,    ev =init
--                      --Sets the clock division   
--                      VAR structure.ClockDivision,    init =1,    ev =init
--                      --Sets the period value 
--                      VAR structure.Period ,          init =1,    ev =init
--                      --Sets the prescaler value  
--                      VAR structure.Prescaler ,       init =1,    ev =init
--            
--              COMMENT OUTPUT SECTION:
--                      --None
--
--              COMMENT INPUT/OUTPUT SECTION:
--                      VAR tim_x.CR1,                  init =1,    ev =1
--                    
--                      --Sets the Auto-reload value    
--                      VAR tim_x.ARR ,                 init= 0,    ev = structure.Period
--  
--                          --Sets the Prescaler value  
--                      VAR tim_x.PSC,                  init= 0,    ev = structure.Prescaler
--  
--                          --Generate an update event to reload the Prescaler
--                      VAR tim_x.EGR,                  init =0,    ev =TIM_EGR_UG
--                    
--        -- Stub calls :
--        SIMUL
--
--          --None
--
--        END SIMUL
--
--            -- Calling the Unit Under Test :
--            #TimBaseSetConfig(NULL, &structure);
--
--    END ELEMENT
--
--END TEST -- TEST 15

-- TEST 16
--    FAMILY robustness
--  
--  COMMENT Test Description 
--  COMMENT <TD>
--  COMMENT [hdulibstm32f7xxhaltim-TimBaseSetConfig-DB-LLR-001]
--  COMMENT This test case is evaluated by giving the invalid reference to input parameter structure.
--  COMMENT Equivalence Class 39
--  COMMENT </TD>
--
--    ELEMENT
--
--              COMMENT INPUT SECTION:
--                      --Sets the counter Mode
--                      VAR structure.CounterMode,      init =1,        ev =init
--                      --Sets the clock division       
--                      VAR structure.ClockDivision,    init =1,        ev =init
--                      --Sets the period value     
--                      VAR structure.Period ,          init =1,        ev =init
--                      --Sets the prescaler value      
--                      VAR structure.Prescaler ,       init =1,        ev =init
--            
--              COMMENT OUTPUT SECTION:
--                      --None
--
--              COMMENT INPUT/OUTPUT SECTION:
--                      VAR tim_x.CR1,                  init =1,        ev =1
--                                  
--                      --Sets the Auto-reload value        
--                      VAR tim_x.ARR ,                 init= 0,        ev = structure.Period
--                  
--                          --Sets the Prescalervalue   
--                      VAR tim_x.PSC,                  init= 0,        ev = structure.Prescaler
--                  
--                          --Generate an updateevent to reload the Prescaler
--                      VAR tim_x.EGR,                  init =0,        ev =TIM_EGR_UG
--                    
--        -- Stub calls :
--        SIMUL
--
--          --None
--
--        END SIMUL
--
--            -- Calling the Unit Under Test :
--            #TimBaseSetConfig(&tim_x, NULL);
--
--        END ELEMENT
--
--    END TEST -- TEST 16
    
END SERVICE -- TimBaseSetConfig


--------------------------------------------------------------------------------
-- Declaration of the service TimOc4SetConfig
--------------------------------------------------------------------------------
SERVICE TimOc4SetConfig
SERVICE_TYPE extern

    -- Tested service parameters declarations
    #T_TIM tim_x;
    #T_TIM_OC_INIT oc_onfig;

    ENVIRONMENT ENV_TimOc4SetConfig
    STRUCTURE tim_x,                init = { CR1 => 0, CR2 => 0, SMCR => 0, DIER => 0, SR => 0, EGR => 0, CCMR1 => 0, CCMR2 => 0, CCER => 0, 
    & CNT => 0, PSC => 0, ARR => 0, RCR => 0, CCR1 => 0, CCR2 => 0, CCR3 => 0, CCR4 => 0, BDTR => 0, DCR => 0, DMAR => 0, OR => 0, CCMR3
    &=> 0, CCR5 => 0, CCR6 => 0 },      ev = init

    STRUCTURE PTU_TIM1_BASE,        init = { CR1 => 0, CR2 => 0, SMCR => 0, DIER => 0, SR => 0, EGR => 0, CCMR1 => 0, CCMR2 => 0, CCER => 0, 
    & CNT => 0, PSC => 0, ARR => 0, RCR => 0, CCR1 => 0, CCR2 => 0, CCR3 => 0, CCR4 => 0, BDTR => 0, DCR => 0, DMAR => 0, OR => 0, CCMR3
    &=> 0, CCR5 => 0, CCR6 => 0 },      ev = init

    STRUCTURE PTU_TIM8_BASE,        init = { CR1 => 0, CR2 => 0, SMCR => 0, DIER => 0, SR => 0, EGR => 0, CCMR1 => 0, CCMR2 => 0, CCER => 0, 
    & CNT => 0, PSC => 0, ARR => 0, RCR => 0, CCR1 => 0, CCR2 => 0, CCR3 => 0, CCR4 => 0, BDTR => 0, DCR => 0, DMAR => 0, OR => 0, CCMR3
    &=> 0, CCR5 => 0, CCR6 => 0 },      ev = init

    STRUCTURE oc_onfig,             init = { OCMode => 0, Pulse => 0, OCPolarity => 0, OCNPolarity => 0, OCFastMode => 0, OCIdleState => 0, 
    & OCNIdleState => 0 },              ev = init
    END ENVIRONMENT -- ENV_TimOc4SetConfig
    USE ENV_TimOc4SetConfig


 TEST 1
    FAMILY nominal

    COMMENT Test Description 
    COMMENT <TD>
    COMMENT [hdulibstm32f7xxhaltim-TimOc4SetConfig-DB-LLR-001]
    COMMENT The function sets CCER of tim_x to result of bitwise AND operation of CCER of tim_x and Negated value of TIM_CCER_CC4E. 
    COMMENT Equivalence Class None
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimOc4SetConfig-DB-LLR-002]
    COMMENT The function sets CCER to CCER of tim_x.
    COMMENT Equivalence Class None
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimOc4SetConfig-DB-LLR-003]
    COMMENT The function sets CR2 to CR2 of tim_x.
    COMMENT Equivalence Class None
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimOc4SetConfig-DB-LLR-004]
    COMMENT The function sets CCMR2 to CCMR2 of tim_x.
    COMMENT Equivalence Class None
    COMMENT
    COMMENT [hdulibstm32f7xxhaltim-TimOc4SetConfig-DB-LLR-005]
    COMMENT The function does the following to reset the Output Compare Mode Bits.
    COMMENT 1.Sets CCMR2 to result of bitwise AND operation of CCMR2 and negated value of TIM_CCMR2_OC4M.
    COMMENT 2.Sets CCMR2 to result of bitwise AND operation of CCMR2 and negated value of TIM_CCMR2_CC4S.
    COMMENT 3.Sets CCMR2 to result of bitwise OR opearion of CCMR2 and OCMode of oc_onfig left shifted by EIGHT.    
    COMMENT Equivalence Class None
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimOc4SetConfig-DB-LLR-006]
    COMMENT The function does the following to reset Output Polarity level.
    COMMENT 1.Sets CCER to result of bitwise AND operation of CCER and negated value of TIM_CCER_CC4P.
    COMMENT 2.Sets CCER to result of bitwise OR operation of CCER and OCPolarity of oc_onfig left shifted by TWELVE.
    COMMENT Equivalence Class None
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimOc4SetConfig-DB-LLR-007]
    COMMENT The function does nothing when return value of IS_TIM_ADVANCED_INSTANCE with parameter tim_x is equal to RESET.
    COMMENT Equivalence Class 31
    COMMENT
    COMMENT [hdulibstm32f7xxhaltim-TimOc4SetConfig-DB-LLR-008]
    COMMENT The function writes into tim_x CR2 by setting it with CR2. 
    COMMENT Equivalence Class None
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimOc4SetConfig-DB-LLR-009]
    COMMENT The function writes into tim_x CCMR2 by setting it with CCMR2. 
    COMMENT Equivalence Class None
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimOc4SetConfig-DB-LLR-010]
    COMMENT The function writes into tim_x CCR4 by setting it with Pulse of oc_onfig. 
    COMMENT Equivalence Class None
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimOc4SetConfig-DB-LLR-011]
    COMMENT The function writes into tim_x CCER by setting it with CCER.  
    COMMENT Equivalence Class None
    COMMENT </TD>

        ELEMENT

            COMMENT INPUT SECTION:
                    --Sets the Output Mode  
                    VAR oc_onfig.OCMode,        init =1,            ev = init   
                                
                    --Sets the pulse value          
                    VAR oc_onfig.Pulse,         init =1,            ev = init   
            
                    --Sets the Output Polarity                  
                    VAR oc_onfig.OCPolarity,    init =1,            ev = init                               
            
            COMMENT OUTPUT SECTION:

                    --Sets the Capture Compare Register value 
                    VAR tim_x.CCR4,             init =0,            ev =oc_onfig.Pulse

            COMMENT INPUT/OUTPUT SECTION:
                    --Write to tim_x CR2
                    VAR tim_x.CR2 ,             init= 0,            ev =init

                    --Write to tim_x CCMR2 
                    VAR tim_x.CCMR2,            init= 0,            ev =256

                    --Write to tim_x CCER 
                    VAR tim_x.CCER,             init =0,            ev =4096
                    
        -- Stub calls :
        SIMUL

          --None

        END SIMUL

            -- Calling the Unit Under Test :
            #TimOc4SetConfig(&tim_x, &oc_onfig);

        END ELEMENT

    END TEST -- TEST 1

    TEST 2
    FAMILY nominal

    COMMENT Test Description 
    COMMENT <TD>
    COMMENT [hdulibstm32f7xxhaltim-TimOc4SetConfig-DB-LLR-001]
    COMMENT The function sets CCER of tim_x to result of bitwise AND operation of CCER of tim_x and Negated value of TIM_CCER_CC4E. 
    COMMENT Equivalence Class None
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimOc4SetConfig-DB-LLR-002]
    COMMENT The function sets CCER to CCER of tim_x.
    COMMENT Equivalence Class None
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimOc4SetConfig-DB-LLR-003]
    COMMENT The function sets CR2 to CR2 of tim_x.
    COMMENT Equivalence Class None
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimOc4SetConfig-DB-LLR-004]
    COMMENT The function sets CCMR2 to CCMR2 of tim_x.
    COMMENT Equivalence Class None
    COMMENT
    COMMENT [hdulibstm32f7xxhaltim-TimOc4SetConfig-DB-LLR-005]
    COMMENT The function does the following to reset the Output Compare Mode Bits.
    COMMENT 1.Sets CCMR2 to result of bitwise AND operation of CCMR2 and negated value of TIM_CCMR2_OC4M.
    COMMENT 2.Sets CCMR2 to result of bitwise AND operation of CCMR2 and negated value of TIM_CCMR2_CC4S.
    COMMENT 3.Sets CCMR2 to result of bitwise OR opearion of CCMR2 and OCMode of oc_onfig left shifted by EIGHT.    
    COMMENT Equivalence Class None
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimOc4SetConfig-DB-LLR-006]
    COMMENT The function does the following to reset Output Polarity level.
    COMMENT 1.Sets CCER to result of bitwise AND operation of CCER and negated value of TIM_CCER_CC4P.
    COMMENT 2.Sets CCER to result of bitwise OR operation of CCER and OCPolarity of oc_onfig left shifted by TWELVE.
    COMMENT Equivalence Class None
    COMMENT
    COMMENT [hdulibstm32f7xxhaltim-TimOc4SetConfig-DB-LLR-007]
    COMMENT The function does the following when return value of IS_TIM_ADVANCED_INSTANCE with parameter tim_x is not equal to RESET.
    COMMENT 1.Sets CR2 to bitwise AND operation of CR2 and negated value of TIM_CR2_OIS4.
    COMMENT 2.Sets CR2 to result of bitwise OR operation of CR2 and OCIdleState of oc_onfig left shifted by SIX.
    COMMENT Equivalence Class 30
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimOc4SetConfig-DB-LLR-008]
    COMMENT The function writes into tim_x CR2 by setting it with CR2. 
    COMMENT Equivalence Class None
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimOc4SetConfig-DB-LLR-009]
    COMMENT The function writes into tim_x CCMR2 by setting it with CCMR2. 
    COMMENT Equivalence Class None
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimOc4SetConfig-DB-LLR-010]
    COMMENT The function writes into tim_x CCR4 by setting it with Pulse of oc_onfig. 
    COMMENT Equivalence Class None
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimOc4SetConfig-DB-LLR-011]
    COMMENT The function writes into tim_x CCER by setting it with CCER.  
    COMMENT This test case is evaluated by giving the nominal values to inputs.
    COMMENT Equivalence Class None
    
    COMMENT </TD>

        ELEMENT

                COMMENT INPUT SECTION:

                    --members of the structure oc_onfig tested for nominal value

                    --Sets the Output Idle state 
                    VAR oc_onfig.OCIdleState,       init =1,    ev = init
                    --Sets the output polarity  
                    VAR oc_onfig.OCPolarity,        init =1,    ev = init     
                    --Sets the Output mode  
                    VAR oc_onfig.OCMode,            init =1,    ev = init     
                    --Sets the Output plus value    
                    VAR oc_onfig.Pulse,             init =1,    ev = init   
                    --Sets the output N polarity    
                    VAR oc_onfig.OCNPolarity,       init =1,    ev = init               
            
                COMMENT OUTPUT SECTION:

                    --Sets the Capture Compare Register value 
                    VAR PTU_TIM1_BASE.CCR4,         init =1,    ev =1
                    
                COMMENT INPUT/OUTPUT SECTION:

                    --members of the structure tim_x tested for nominal value
                    
                    --Write to tim_x CR2  
                    VAR PTU_TIM1_BASE.CR2 ,         init= 1,    ev =65

                    --Write to tim_x CCMR2 
                    VAR PTU_TIM1_BASE.CCMR2,        init= 1,    ev =257

                    --Write to tim_x CCER 
                    VAR PTU_TIM1_BASE.CCER,         init =1,    ev =4097
                    
        -- Stub calls :
        SIMUL

          --None

        END SIMUL

            -- Calling the Unit Under Test :
            #TimOc4SetConfig(&PTU_TIM1_BASE, &oc_onfig);

        END ELEMENT

    END TEST -- TEST 2

    TEST 3
    FAMILY nominal

    COMMENT Test Description 
    COMMENT <TD>
    COMMENT [hdulibstm32f7xxhaltim-TimOc4SetConfig-DB-LLR-001]
    COMMENT The function sets CCER of tim_x to result of bitwise AND operation of CCER of tim_x and Negated value of TIM_CCER_CC4E. 
    COMMENT Equivalence Class None
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimOc4SetConfig-DB-LLR-002]
    COMMENT The function sets CCER to CCER of tim_x.
    COMMENT Equivalence Class None
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimOc4SetConfig-DB-LLR-003]
    COMMENT The function sets CR2 to CR2 of tim_x.
    COMMENT Equivalence Class None
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimOc4SetConfig-DB-LLR-004]
    COMMENT The function sets CCMR2 to CCMR2 of tim_x.
    COMMENT Equivalence Class None
    COMMENT
    COMMENT [hdulibstm32f7xxhaltim-TimOc4SetConfig-DB-LLR-005]
    COMMENT The function does the following to reset the Output Compare Mode Bits.
    COMMENT 1.Sets CCMR2 to result of bitwise AND operation of CCMR2 and negated value of TIM_CCMR2_OC4M.
    COMMENT 2.Sets CCMR2 to result of bitwise AND operation of CCMR2 and negated value of TIM_CCMR2_CC4S.
    COMMENT 3.Sets CCMR2 to result of bitwise OR opearion of CCMR2 and OCMode of oc_onfig left shifted by EIGHT.    
    COMMENT Equivalence Class None
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimOc4SetConfig-DB-LLR-006]
    COMMENT The function does the following to reset Output Polarity level.
    COMMENT 1.Sets CCER to result of bitwise AND operation of CCER and negated value of TIM_CCER_CC4P.
    COMMENT 2.Sets CCER to result of bitwise OR operation of CCER and OCPolarity of oc_onfig left shifted by TWELVE.
    COMMENT Equivalence Class None
    COMMENT
    COMMENT [hdulibstm32f7xxhaltim-TimOc4SetConfig-DB-LLR-007]
    COMMENT The function does the following when return value of IS_TIM_ADVANCED_INSTANCE with parameter tim_x is not equal to RESET.
    COMMENT 1.Sets CR2 to bitwise AND operation of CR2 and negated value of TIM_CR2_OIS4.
    COMMENT 2.Sets CR2 to result of bitwise OR operation of CR2 and OCIdleState of oc_onfig left shifted by SIX.
    COMMENT Equivalence Class 30
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimOc4SetConfig-DB-LLR-008]
    COMMENT The function writes into tim_x CR2 by setting it with CR2. 
    COMMENT Equivalence Class None
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimOc4SetConfig-DB-LLR-009]
    COMMENT The function writes into tim_x CCMR2 by setting it with CCMR2. 
    COMMENT Equivalence Class None
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimOc4SetConfig-DB-LLR-010]
    COMMENT The function writes into tim_x CCR4 by setting it with Pulse of oc_onfig. 
    COMMENT Equivalence Class None
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimOc4SetConfig-DB-LLR-011]
    COMMENT The function writes into tim_x CCER by setting it with CCER.  
    COMMENT Equivalence Class None
    COMMENT This test case is evaluated by giving the minimum values to inputs.
    COMMENT </TD>

        ELEMENT

                COMMENT INPUT SECTION:

                    --members of the structure oc_onfig tested for min value

                        --Sets the Output Idle state 
                    VAR oc_onfig.OCIdleState,   init =0,        ev = init
                    --Sets the Output mode 
                    VAR oc_onfig.OCMode,        init =0,        ev = init     
                    --Sets the Output plus value (Min_Data)
                    VAR oc_onfig.Pulse,         init =0,        ev = init  
                    --Sets the output polarity
                    VAR oc_onfig.OCPolarity,    init =0,        ev = init   
                    --Sets the output N polarity
                    VAR oc_onfig.OCNPolarity,   init =0,        ev = init                       
                
                COMMENT OUTPUT SECTION:

                    --Sets the Capture Compare Register value 
                    VAR PTU_TIM8_BASE.CCR4,     init =0,        ev =0

                COMMENT INPUT/OUTPUT SECTION:

                    --members of the structure oc_onfig tested for min value

                    --Write to tim_x CR2  
                    VAR PTU_TIM8_BASE.CR2 ,     init= 0,        ev =0

                    --Write to tim_x CCMR2 
                    VAR PTU_TIM8_BASE.CCMR2,    init= 0,        ev =0

                    --Write to tim_x CCER 
                    VAR PTU_TIM8_BASE.CCER,     init =0,        ev =0
                    
        -- Stub calls :
        SIMUL

          --None

        END SIMUL

            -- Calling the Unit Under Test :
            #TimOc4SetConfig(&PTU_TIM8_BASE, &oc_onfig);

        END ELEMENT

    END TEST -- TEST 3

    TEST 4
    FAMILY nominal

    COMMENT Test Description 
    COMMENT <TD>
    COMMENT [hdulibstm32f7xxhaltim-TimOc4SetConfig-DB-LLR-001]
    COMMENT The function sets CCER of tim_x to result of bitwise AND operation of CCER of tim_x and Negated value of TIM_CCER_CC4E. 
    COMMENT Equivalence Class None
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimOc4SetConfig-DB-LLR-002]
    COMMENT The function sets CCER to CCER of tim_x.
    COMMENT Equivalence Class None
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimOc4SetConfig-DB-LLR-003]
    COMMENT The function sets CR2 to CR2 of tim_x.
    COMMENT Equivalence Class None
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimOc4SetConfig-DB-LLR-004]
    COMMENT The function sets CCMR2 to CCMR2 of tim_x.
    COMMENT Equivalence Class None
    COMMENT
    COMMENT [hdulibstm32f7xxhaltim-TimOc4SetConfig-DB-LLR-005]
    COMMENT The function does the following to reset the Output Compare Mode Bits.
    COMMENT 1.Sets CCMR2 to result of bitwise AND operation of CCMR2 and negated value of TIM_CCMR2_OC4M.
    COMMENT 2.Sets CCMR2 to result of bitwise AND operation of CCMR2 and negated value of TIM_CCMR2_CC4S.
    COMMENT 3.Sets CCMR2 to result of bitwise OR opearion of CCMR2 and OCMode of oc_onfig left shifted by EIGHT.    
    COMMENT Equivalence Class None
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimOc4SetConfig-DB-LLR-006]
    COMMENT The function does the following to reset Output Polarity level.
    COMMENT 1.Sets CCER to result of bitwise AND operation of CCER and negated value of TIM_CCER_CC4P.
    COMMENT 2.Sets CCER to result of bitwise OR operation of CCER and OCPolarity of oc_onfig left shifted by TWELVE.
    COMMENT Equivalence Class None
    COMMENT
    COMMENT [hdulibstm32f7xxhaltim-TimOc4SetConfig-DB-LLR-007]
    COMMENT The function does the following when return value of IS_TIM_ADVANCED_INSTANCE with parameter tim_x is not equal to RESET.
    COMMENT 1.Sets CR2 to bitwise AND operation of CR2 and negated value of TIM_CR2_OIS4.
    COMMENT 2.Sets CR2 to result of bitwise OR operation of CR2 and OCIdleState of oc_onfig left shifted by SIX.
    COMMENT Equivalence Class 30
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimOc4SetConfig-DB-LLR-008]
    COMMENT The function writes into tim_x CR2 by setting it with CR2. 
    COMMENT Equivalence Class None
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimOc4SetConfig-DB-LLR-009]
    COMMENT The function writes into tim_x CCMR2 by setting it with CCMR2. 
    COMMENT Equivalence Class None
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimOc4SetConfig-DB-LLR-010]
    COMMENT The function writes into tim_x CCR4 by setting it with Pulse of oc_onfig. 
    COMMENT Equivalence Class None
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimOc4SetConfig-DB-LLR-011]
    COMMENT The function writes into tim_x CCER by setting it with CCER.  
    COMMENT Equivalence Class None
    COMMENT This test case is evaluated by giving the maximum values to inputs.
    COMMENT </TD>

        ELEMENT

                COMMENT INPUT SECTION:

                    --members of the structure oc_onfig tested for max value

                    --Sets the Output Idle state 
                    VAR oc_onfig.OCIdleState,   init =(T_UINT32)0xFFFFFFFF,     ev = init
                    --Sets the Output mode  
                    VAR oc_onfig.OCMode,        init =(T_UINT32)0xFFFFFFFF,     ev = init        
                    --Sets the Output plus value (Min_Data) 
                    VAR oc_onfig.Pulse,         init =0xFFFF,                   ev = init 
                    --Sets the output polarity  
                    VAR oc_onfig.OCPolarity,    init =(T_UINT32)0xFFFFFFFF,     ev = init     
                    --Sets the output N polarity    
                    VAR oc_onfig.OCNPolarity,   init =(T_UINT32)0xFFFFFFFF,     ev = init                   
                
                COMMENT OUTPUT SECTION:

                    --Sets the Capture Compare Register value 
                    VAR PTU_TIM8_BASE.CCR4,     init =(T_UINT32)0xFFFFFFFF,     ev =0xFFFF

                COMMENT INPUT/OUTPUT SECTION:

                    --members of the structure oc_onfig tested for max value

                    --Write to tim_x CR2  
                    VAR PTU_TIM8_BASE.CR2 ,     init= (T_UINT32)0xFFFFFFFF,     ev =(T_UINT32)0xFFFFFFFF

                    --Write to tim_x CCMR2 
                    VAR PTU_TIM8_BASE.CCMR2,    init= (T_UINT32)0xFFFFFFFF,     ev =(T_UINT32)0xFFFFFFFF

                    --Write to tim_x CCER 
                    VAR PTU_TIM8_BASE.CCER,     init =(T_UINT32)0xFFFFFFFF,     ev =(T_UINT32)0xFFFFFFFF
                    
        -- Stub calls :
        SIMUL

          --None

        END SIMUL

            -- Calling the Unit Under Test :
            #TimOc4SetConfig(&PTU_TIM8_BASE, &oc_onfig);

        END ELEMENT

    END TEST -- TEST 4
    
-- TEST 5
--    FAMILY robustness
--
--  COMMENT Test Description 
--  COMMENT <TD>
--  COMMENT [hdulibstm32f7xxhaltim-TimOc4SetConfig-DB-LLR-001]
--  COMMENT This test case is evaluated by giving the invalid reference to input parameter tim_x.
--  COMMENT Equivalence Class 46
--
--  COMMENT </TD>
--
--        ELEMENT
--
--            COMMENT INPUT SECTION:
--                    --Sets the Output Mode  
--                    VAR oc_onfig.OCMode,        init =1,            ev = init   
--                                
--                    --Sets the pulse value          
--                    VAR oc_onfig.Pulse,         init =1,            ev = init   
--            
--                    --Sets the Output Polarity                  
--                    VAR oc_onfig.OCPolarity,    init =1,            ev = init  
--            
--                    --Sets the Output N Polarity                  
--                    VAR oc_onfig.OCNPolarity,    init =1,            ev = init       
--            
--            COMMENT OUTPUT SECTION:
--
--                    --Sets the Capture Compare Register value 
--                    VAR tim_x.CCR4,             init =0,            ev =oc_onfig.Pulse
--
--            COMMENT INPUT/OUTPUT SECTION:
--                    --Write to tim_x CR2
--                    VAR tim_x.CR2 ,             init= 0,            ev =init
--
--                    --Write to tim_x CCMR2 
--                    VAR tim_x.CCMR2,            init= 0,            ev =256
--
--                    --Write to tim_x CCER 
--                    VAR tim_x.CCER,             init =0,            ev =4096
--                    
--        -- Stub calls :
--        SIMUL
--
--          --None
--
--        END SIMUL
--
--            -- Calling the Unit Under Test :
--            #TimOc4SetConfig(NULL, &oc_onfig);
--
--        END ELEMENT
--
--    END TEST -- TEST 5    

-- TEST 6
--    FAMILY robustness
--
--  COMMENT Test Description 
--  COMMENT <TD>
--  COMMENT [hdulibstm32f7xxhaltim-TimOc4SetConfig-DB-LLR-001]
--  COMMENT This test case is evaluated by giving the invalid reference to input parameter oc_onfig.
--  COMMENT Equivalence Class 47
--
--  COMMENT </TD>
--
--        ELEMENT
--            COMMENT INPUT SECTION:
--                    --Sets the Output Mode  
--                    VAR oc_onfig.OCMode,        init =1,            ev = init   
--                                
--                    --Sets the pulse value          
--                    VAR oc_onfig.Pulse,         init =1,            ev = init   
--            
--                    --Sets the Output Polarity                  
--                    VAR oc_onfig.OCPolarity,    init =1,            ev = init  
-- 
--                    --Sets the Output N Polarity                  
--                    VAR oc_onfig.OCNPolarity,    init =1,            ev = init       
--            
--            COMMENT OUTPUT SECTION:
--
--                    --Sets the Capture Compare Register value 
--                    VAR tim_x.CCR4,             init =0,            ev =oc_onfig.Pulse
--
--            COMMENT INPUT/OUTPUT SECTION:
--                    --Write to tim_x CR2
--                    VAR tim_x.CR2 ,             init= 0,            ev =init
--
--                    --Write to tim_x CCMR2 
--                    VAR tim_x.CCMR2,            init= 0,            ev =256
--
--                    --Write to tim_x CCER 
--                    VAR tim_x.CCER,             init =0,            ev =4096
--                    
--        -- Stub calls :
--        SIMUL
--
--          --None
--
--        END SIMUL
--
--            -- Calling the Unit Under Test :
--            #TimOc4SetConfig(&tim_x, NULL);
--
--        END ELEMENT
--
--    END TEST -- TEST 6
    
END SERVICE -- TimOc4SetConfig


--------------------------------------------------------------------------------
-- Declaration of the service HalTimPwmInit
--------------------------------------------------------------------------------
SERVICE HalTimPwmInit
SERVICE_TYPE extern

    -- Tested service parameters declarations
    #T_TIM_HANDLE h_tim;
    -- By function returned type declaration
    #T_HAL_STATUS ret_HalTimPwmInit;

    --local varibale declaration
    #T_TIM ptu_Instance;

    ENVIRONMENT ENV_HalTimPwmInit
    STRUCTURE h_tim,                        init = { Instance => NIL, Init => { Prescaler => 0, CounterMode => 0, Period => 0, ClockDivision => 0, 
    & RepetitionCounter => 0 }, Channel => HAL_TIM_ACTIVE_CHANNEL_1, hdma => { others => NIL }, Lock => HAL_UNLOCKED, State => HAL_TIM_STATE_RESET },
    &                                                               ev = init
    VAR ret_HalTimPwmInit,                  init = HAL_OK,          ev = init

    --Instance initialization
    STRUCTURE ptu_Instance,                 init ={others => 2},    ev = init 

    END ENVIRONMENT -- ENV_HalTimPwmInit
    USE ENV_HalTimPwmInit

    TEST 1
    FAMILY nominal

    COMMENT Test Description 
    COMMENT <TD>
    COMMENT [hdulibstm32f7xxhaltim-HalTimPwmInit-DB-LLR-001]
    COMMENT The function returns HAL_ERROR when h_tim is equal to NULL.    
    COMMENT Equivalence Class 1,3
    COMMENT </TD>

        ELEMENT

                COMMENT INPUT SECTION:
                    --Holds the member value of the structure h_tim
                    VAR h_tim.Instance,         init = & ptu_Instance ,             ev = init

                COMMENT OUTPUT SECTION:
                
                    --Holds the return value of the function
                    VAR ret_HalTimPwmInit,       init = HAL_OK,                     ev = HAL_ERROR

                COMMENT INPUT/OUTPUT SECTION:
                    --None
        
                    
        -- Stub calls :
        SIMUL

          --None

        END SIMUL

            -- Calling the Unit Under Test :
            #ret_HalTimPwmInit = HalTimPwmInit(NULL);

        END ELEMENT

    END TEST -- TEST 1


    TEST 2
    FAMILY nominal

    COMMENT Test Description 
    COMMENT <TD>
    COMMENT [hdulibstm32f7xxhaltim-HalTimPwmInit-DB-LLR-002]
    COMMENT The function does the following when State of h_tim is equal to HAL_TIM_STATE_RESET.
    COMMENT 1.Sets Lock of h_tim to HAL_UNLOCKED.
    COMMENT 2.Call the function 'HalTimPwmMspInit' with h_tim as its function parameter..
    COMMENT Equivalence Class 2,4
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-HalTimPwmInit-DB-LLR-003]
    COMMENT The function does the following:
    COMMENT 1. Sets State of h_tim to HAL_TIM_STATE_BUSY.
    COMMENT 2. Call the function 'TimBaseSetConfig' with Instance of h_tim and reference of Init of h_tim as parameters.
    COMMENT 3. Sets State of h_tim to HAL_TIM_STATE_READY.
    COMMENT 4.Function returns HAL_OK.
    COMMENT Equivalence Class 7, 6
    COMMENT </TD>

        ELEMENT

                COMMENT INPUT SECTION:
                    --Holds the member value of the structure h_tim
                    VAR h_tim.Instance,             init = & ptu_Instance ,             ev = init

                COMMENT OUTPUT SECTION:
                    --Holds the return value of the function
                    VAR ret_HalTimPwmInit,          init = HAL_ERROR,                   ev =  HAL_OK
                    VAR h_tim.Lock,                 init = HAL_LOCKED ,                 ev =  HAL_UNLOCKED

                COMMENT INPUT/OUTPUT SECTION:
                    --Holds the member value of the structure h_tim
                    VAR h_tim.State,                init = HAL_TIM_STATE_RESET ,        ev = HAL_TIM_STATE_READY
                    
                    --Holds the member value of the structure Instance
                    VAR ptu_Instance.ARR,           init = 2 ,                          ev = 0
                    VAR ptu_Instance.PSC,           init = 2 ,                          ev = 0
                    VAR ptu_Instance.EGR,           init = 2 ,                          ev = TIM_EGR_UG
        
                    
        -- Stub calls :
        SIMUL

          --None

        END SIMUL

            -- Calling the Unit Under Test :
            #ret_HalTimPwmInit = HalTimPwmInit(&h_tim);

        END ELEMENT

    END TEST -- TEST 2

    TEST 3
    FAMILY nominal

    COMMENT Test Description 
    COMMENT <TD>
    COMMENT [hdulibstm32f7xxhaltim-HalTimPwmInit-DB-LLR-002]
    COMMENT The function does nothing when State of h_tim is not equal to HAL_TIM_STATE_RESET. 
    COMMENT Equivalence Class 2,5
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-HalTimPwmInit-DB-LLR-003]
    COMMENT The function does the following:
    COMMENT 1. Sets State of h_tim to HAL_TIM_STATE_BUSY.
    COMMENT 2. Calls the function 'TimBaseSetConfig' with Instance of h_tim and reference of Init of h_tim as parameters.
    COMMENT 3. Sets State of h_tim to HAL_TIM_STATE_READY.
    COMMENT 4.Function returns HAL_OK.
    COMMENT Equivalence Class 7, 62
    COMMENT </TD>

        ELEMENT

                COMMENT INPUT SECTION:
                    --Holds the member value of the structure h_tim
                    VAR h_tim.Instance,             init = & ptu_Instance ,         ev = init

                COMMENT OUTPUT SECTION:
                    --Holds the return value of the function
                    VAR ret_HalTimPwmInit,          init = HAL_ERROR,               ev =  HAL_OK

                COMMENT INPUT/OUTPUT SECTION:
                    --Holds the member value of the structure h_tim
                    VAR h_tim.State,                init = HAL_TIM_STATE_BUSY ,     ev = HAL_TIM_STATE_READY
                    
                    --Holds the member value of the structure Instance
                    VAR ptu_Instance.ARR,           init = 2 ,                      ev = 0
                    VAR ptu_Instance.PSC,           init = 2 ,                      ev = 0
                    VAR ptu_Instance.EGR,           init = 2 ,                      ev = TIM_EGR_UG
        
                    
        -- Stub calls :
        SIMUL

          --None

        END SIMUL

            -- Calling the Unit Under Test :
            #ret_HalTimPwmInit = HalTimPwmInit(&h_tim);

        END ELEMENT

    END TEST -- TEST 3

END SERVICE -- HalTimPwmInit
--------------------------------------------------------------------------------
-- Declaration of the service TimCcxChannelCmd
--------------------------------------------------------------------------------
SERVICE TimCcxChannelCmd
SERVICE_TYPE extern

    -- Tested service parameters declarations
    #T_TIM tim_x;
    #T_UINT32 channel;
    #T_UINT32 channel_state;

    ENVIRONMENT ENV_TimCcxChannelCmd
    STRUCTURE tim_x,        init = { CR1 => 0, CR2 => 0, SMCR => 0, DIER => 0, SR => 0, EGR => 0, CCMR1 => 0, CCMR2 => 0, CCER => 0, 
    & CNT => 0, PSC => 0, ARR => 0, RCR => 0, CCR1 => 0, CCR2 => 0, CCR3 => 0, CCR4 => 0, BDTR => 0, DCR => 0, DMAR => 0, OR => 0, CCMR3
    &=> 0, CCR5 => 0, CCR6 => 0 },          ev = init
    VAR channel,            init = 0,       ev = init
    VAR channel_state,      init = 0,       ev = init
    END ENVIRONMENT -- ENV_TimCcxChannelCmd
    USE ENV_TimCcxChannelCmd


   TEST 1
    FAMILY nominal

    COMMENT Test Description 
    COMMENT <TD>
    COMMENT [hdulibstm32f7xxhaltim-TimCcxChannelCmd-DB-LLR-001]
    COMMENT The function sets CCER of tim_x to result of bitwise AND operation of CCER of tim_x and negated value of TIM_CCER_CC1E left 
    COMMENT shifted by channel. 
    COMMENT Equivalence Class 32
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimCcxChannelCmd-DB-LLR-002]
    COMMENT The function sets CCER of tim_x to result of OR opeartion of CCER of tim_x and channel_state left shifted by channel.
    COMMENT channel_state with value TIM_CCX_ENABLE
    COMMENT channel with value TIM_CHANNEL_1
    COMMENT CCER of tim_x with minimum value 
    COMMENT Equivalence Class 54
    COMMENT </TD>

        ELEMENT

                COMMENT INPUT SECTION:
                    --Holds the value of the variable channel
                    VAR channel,        init = TIM_CHANNEL_1,           ev = init

                    --Holds the value of the variable channel_state
                    VAR channel_state,  init = TIM_CCX_ENABLE,          ev = init

                COMMENT OUTPUT SECTION:

                    --None

                COMMENT INPUT/OUTPUT SECTION:
                    --Holds the value of the member of tim_x
                    VAR tim_x.CCER,     init = 0 ,                      ev = 1
                        
        -- Stub calls :
        SIMUL

          --None

        END SIMUL

            -- Calling the Unit Under Test :
            #TimCcxChannelCmd(&tim_x, channel, channel_state);

        END ELEMENT

    END TEST -- TEST 1

    TEST 2
    FAMILY nominal

    COMMENT Test Description 
    COMMENT <TD>
    COMMENT [hdulibstm32f7xxhaltim-TimCcxChannelCmd-DB-LLR-001]
    COMMENT The function sets CCER of tim_x to result of bitwise AND operation of CCER of tim_x  and negated value of TIM_CCER_CC1E left 
    COMMENT shifted by channel.    
    COMMENT Equivalence Class 33
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimCcxChannelCmd-DB-LLR-002]
    COMMENT The function sets CCER of tim_x to result of OR opeartion of CCER of tim_x and channel_state left shifted by channel.
    COMMENT channel_state with value TIM_CCX_ENABLE
    COMMENT channel with value TIM_CHANNEL_2
    COMMENT CCER of tim_x with nominal value 
    COMMENT Equivalence Class 54
    COMMENT </TD>

        ELEMENT

                COMMENT INPUT SECTION:
            
                    --Holds the value of the variable channel
                    VAR channel,        init = TIM_CHANNEL_2,           ev = init

                    --Holds the value of the variable channel_state
                    VAR channel_state,  init = TIM_CCX_ENABLE,          ev = init

                COMMENT OUTPUT SECTION:

                    --None

                COMMENT INPUT/OUTPUT SECTION:
                    --Holds the value of the member of tim_x
                    VAR tim_x.CCER,     init = 1 ,                      ev = 17
                        
        -- Stub calls :
        SIMUL

          --None

        END SIMUL

            -- Calling the Unit Under Test :
            #TimCcxChannelCmd(&tim_x, channel, channel_state);

        END ELEMENT

    END TEST -- TEST 2

    TEST 3
    FAMILY nominal

    COMMENT Test Description 
    COMMENT <TD>
    COMMENT [hdulibstm32f7xxhaltim-TimCcxChannelCmd-DB-LLR-001]
    COMMENT The function sets CCER of tim_x to result of bitwise AND operation of CCER of tim_x  and negated value of TIM_CCER_CC1E left 
    COMMENT shifted by channel.    
    COMMENT Equivalence Class 49
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimCcxChannelCmd-DB-LLR-002]
    COMMENT The function sets CCER of tim_x to result of OR opeartion of CCER of tim_x and channel_state left shifted by channel.
    COMMENT channel_state with value TIM_CCX_DISABLE
    COMMENT channel with value TIM_CHANNEL_3
    COMMENT CCER of tim_x with maximum value 
    COMMENT Equivalence Class 55
    COMMENT </TD>

        ELEMENT

                COMMENT INPUT SECTION:

                    --Holds the value of the variable channel
                    VAR channel,        init = TIM_CHANNEL_3,                   ev = init

                    --Holds the value of the variable channel_state
                    VAR channel_state,  init = TIM_CCX_DISABLE,                 ev = init

                COMMENT OUTPUT SECTION:

                    --None

                COMMENT INPUT/OUTPUT SECTION:
                    --Holds the value of the member of tim_x
                    VAR tim_x.CCER,     init = (T_UINT32)0xFFFFFFFF ,           ev = (T_UINT32)0xFFFFFEFF
                        
        -- Stub calls :
        SIMUL

          --None

        END SIMUL

            -- Calling the Unit Under Test :
            #TimCcxChannelCmd(&tim_x, channel, channel_state);

        END ELEMENT

    END TEST -- TEST 3

    TEST 4
    FAMILY nominal

    COMMENT Test Description 
    COMMENT <TD>
    COMMENT [hdulibstm32f7xxhaltim-TimCcxChannelCmd-DB-LLR-001]
    COMMENT The function sets CCER of tim_x to result of bitwise AND operation of CCER of tim_x  and negated value of TIM_CCER_CC1E 
    COMMENT left shifted by channel.    
    COMMENT Equivalence Class 50
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimCcxChannelCmd-DB-LLR-002]
    COMMENT The function sets CCER of tim_x to result of OR opeartion of CCER of tim_x and channel_state left shifted by channel.
    COMMENT channel_state with value TIM_CCX_DISABLE
    COMMENT channel with value TIM_CHANNEL_4
    COMMENT CCER of tim_x with minimum value 
    COMMENT Equivalence Class 55
    COMMENT </TD>

        ELEMENT

                COMMENT INPUT SECTION:

                    --Holds the value of the variable channel
                    VAR channel,        init = TIM_CHANNEL_4,           ev = init

                    --Holds the value of the variable channel_state
                    VAR channel_state,  init = TIM_CCX_DISABLE,         ev = init

                COMMENT OUTPUT SECTION:

                    --None

                COMMENT INPUT/OUTPUT SECTION:
                    --Holds the value of the member of tim_x
                    VAR tim_x.CCER,     init = 0 ,                      ev = init
                        
        -- Stub calls :
        SIMUL

          --None

        END SIMUL

            -- Calling the Unit Under Test :
            #TimCcxChannelCmd(&tim_x, channel, channel_state);

        END ELEMENT

    END TEST -- TEST 4

    TEST 5
    FAMILY nominal

    COMMENT Test Description 
    COMMENT <TD>
    COMMENT [hdulibstm32f7xxhaltim-TimCcxChannelCmd-DB-LLR-001]
    COMMENT The function sets CCER of tim_x to result of bitwise AND operation of CCER of tim_x  and negated value of TIM_CCER_CC1E 
    COMMENT left shifted by channel.    
    COMMENT Equivalence Class 51
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimCcxChannelCmd-DB-LLR-002]
    COMMENT The function sets CCER of tim_x to result of OR opeartion of CCER of tim_x and channel_state left shifted by channel.
    COMMENT channel_state with value TIM_CCX_DISABLE
    COMMENT channel with value TIM_CHANNEL_5
    COMMENT CCER of tim_x with minimum value 
    COMMENT Equivalence Class 55
    COMMENT </TD>

        ELEMENT

                COMMENT INPUT SECTION:

                    --Holds the value of the variable channel
                    VAR channel,        init = TIM_CHANNEL_5,           ev = init

                    --Holds the value of the variable channel_state
                    VAR channel_state,  init = TIM_CCX_DISABLE,         ev = init

                COMMENT OUTPUT SECTION:

                    --None

                COMMENT INPUT/OUTPUT SECTION:
                    --Holds the value of the member of tim_x
                    VAR tim_x.CCER,     init = 0 ,                      ev = init
                        
        -- Stub calls :
        SIMUL

          --None

        END SIMUL

            -- Calling the Unit Under Test :
            #TimCcxChannelCmd(&tim_x, channel, channel_state);

        END ELEMENT

    END TEST -- TEST 5

    TEST 6
    FAMILY nominal

    COMMENT Test Description 
    COMMENT <TD>
    COMMENT [hdulibstm32f7xxhaltim-TimCcxChannelCmd-DB-LLR-001]
    COMMENT The function sets CCER of tim_x to result of bitwise AND operation of CCER of tim_x  and negated value of TIM_CCER_CC1E 
    COMMENT left shifted by channel.    
    COMMENT Equivalence Class 52
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimCcxChannelCmd-DB-LLR-002]
    COMMENT The function sets CCER of tim_x to result of OR opeartion of CCER of tim_x and channel_state left shifted by channel.
    COMMENT channel_state with value TIM_CCX_DISABLE
    COMMENT channel with value TIM_CHANNEL_6
    COMMENT CCER of tim_x with minimum value 
    COMMENT Equivalence Class 55
    COMMENT </TD>

        ELEMENT

                COMMENT INPUT SECTION:

                    --Holds the value of the variable channel
                    VAR channel,        init = TIM_CHANNEL_6,           ev = init

                    --Holds the value of the variable channel_state
                    VAR channel_state,  init = TIM_CCX_DISABLE,         ev = init

                COMMENT OUTPUT SECTION:

                    --None

                COMMENT INPUT/OUTPUT SECTION:
                    --Holds the value of the member of tim_x
                    VAR tim_x.CCER,     init = 0 ,                      ev = init
                        
        -- Stub calls :
        SIMUL

          --None

        END SIMUL

            -- Calling the Unit Under Test :
            #TimCcxChannelCmd(&tim_x, channel, channel_state);

        END ELEMENT

    END TEST -- TEST 6

    TEST 7
    FAMILY nominal

    COMMENT Test Description 
    COMMENT <TD>
    COMMENT [hdulibstm32f7xxhaltim-TimCcxChannelCmd-DB-LLR-001]
    COMMENT The function sets CCER of tim_x to result of bitwise AND operation of CCER of tim_x  and negated value of TIM_CCER_CC1E 
    COMMENT left shifted by channel.    
    COMMENT Equivalence Class 53
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-TimCcxChannelCmd-DB-LLR-002]
    COMMENT The function sets CCER of tim_x to result of OR opeartion of CCER of tim_x and channel_state left shifted by channel.
    COMMENT channel_state with value TIM_CCX_DISABLE
    COMMENT channel with value TIM_CHANNEL_ALL
    COMMENT CCER of tim_x with minimum value 
    COMMENT Equivalence Class 55
    COMMENT </TD>

        ELEMENT

                COMMENT INPUT SECTION:

                    --Holds the value of the variable channel
                    VAR channel,        init = TIM_CHANNEL_ALL,             ev = init

                    --Holds the value of the variable channel_state
                    VAR channel_state,  init = TIM_CCX_DISABLE,             ev = init

                COMMENT OUTPUT SECTION:

                    --None

                COMMENT INPUT/OUTPUT SECTION:
                    --Holds the value of the member of tim_x
                    VAR tim_x.CCER,     init = 0 ,                          ev = init
                        
        -- Stub calls :
        SIMUL

          --None

        END SIMUL

            -- Calling the Unit Under Test :
            #TimCcxChannelCmd(&tim_x, channel, channel_state);

        END ELEMENT

    END TEST -- TEST 7

    
--   TEST 8
--    FAMILY robustness
--
--  COMMENT Test Description 
--  COMMENT <TD>
--  COMMENT [hdulibstm32f7xxhaltim-TimCcxChannelCmd-DB-LLR-001]
--  COMMENT This test case is evaluated by giving the invalid reference to input parameter tim_x.   
--  COMMENT Equivalence Class 48
--  COMMENT </TD>
--
--        ELEMENT
--
--            COMMENT INPUT SECTION:
--
--      --Holds the value of the variable channel_state
--      VAR channel,        init = TIM_CHANNEL_1,           ev = init
--
--      --Holds the value of the variable channel_state
--      VAR channel_state,  init = TIM_CCX_ENABLE,          ev = init
--
--            COMMENT OUTPUT SECTION:
--
--            --None
--
--            COMMENT INPUT/OUTPUT SECTION:
--      --Holds the value of the member of tim_x
--            VAR tim_x.CCER,init = 0 , ev = 1
--                        
--        -- Stub calls :
--        SIMUL
--
--          --None
--
--        END SIMUL
--
--            -- Calling the Unit Under Test :
--            #TimCcxChannelCmd(NULL, channel, channel_state);
--
--        END ELEMENT
--
--    END TEST -- TEST 8    

END SERVICE -- TimCcxChannelCmd

--------------------------------------------------------------------------------
-- Declaration of the service HalTimPwmConfigChannel
--------------------------------------------------------------------------------
SERVICE HalTimPwmConfigChannel
SERVICE_TYPE extern

    -- Tested service parameters declarations
    #T_TIM_HANDLE h_tim;
    #T_TIM_OC_INIT s_config;
    #T_UINT32 channel;
    -- By function returned type declaration
    #T_HAL_STATUS ret_HalTimPwmConfigChannel;

    --local varibale declaration
    #T_TIM ptu_Instance;

    ENVIRONMENT ENV_HalTimPwmConfigChannel
    STRUCTURE h_tim,                init = { Instance => NIL, Init => { Prescaler => 0, CounterMode => 0, Period => 0, ClockDivision => 0, 
    & RepetitionCounter => 0 }, Channel => HAL_TIM_ACTIVE_CHANNEL_1, hdma => { others => NIL }, Lock => HAL_UNLOCKED, State => HAL_TIM_STATE_RESET },
    &                                                   ev = init
    STRUCTURE s_config,             init = { OCMode => 0, Pulse => 0, OCPolarity => 0, OCNPolarity => 0, OCFastMode => 0, OCIdleState => 0, 
    & OCNIdleState => 0 },        ev = init
    VAR channel,                    init = 0,           ev = init
    VAR ret_HalTimPwmConfigChannel, init = HAL_OK,      ev = init

    --Instance initialization
    STRUCTURE ptu_Instance,         init ={others => 2},ev=init 

    END ENVIRONMENT -- ENV_HalTimPwmConfigChannel
    USE ENV_HalTimPwmConfigChannel


  TEST 1
    FAMILY nominal

    COMMENT Test Description 
    COMMENT <TD>
    COMMENT [hdulibstm32f7xxhaltim-HalTimPwmConfigChannel-DB-LLR-001]
    COMMENT The function calls the macro __HAL_LOCK with h_tim as its parameter.
    COMMENT Equivalence Class 56
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-HalTimPwmConfigChannel-DB-LLR-003]
    COMMENT The function does the following when channel is TIM_CHANNEL_1.
    COMMENT 1.Calls the function 'TimOc1SetConfig' with Instance of h_tim and s_config as parameters.
    COMMENT 2.Sets CCMR1 of Instance of h_tim to result of bitwise OR operation of CCMR1 of Instance of h_tim and TIM_CCMR1_OC1PE.
    COMMENT 3. Sets CCMR1 of Instance of h_tim to result of bitwise  AND operation of CCMR1 of Instance of h_tim and negated value of TIM_CCMR1_OC1FE.
    COMMENT 4. Sets CCMR1 of Instance of h_tim to result of bitwise OR operation of CCMR1 of Instance of h_tim and OCFastMode of s_config.
    COMMENT Equivalence Class 12,57
    COMMENT
    COMMENT [hdulibstm32f7xxhaltim-HalTimPwmConfigChannel-DB-LLR-008]
    COMMENT The function sets State of h_tim to HAL_TIM_STATE_READY.
    COMMENT Equivalence Class None
    COMMENT
    COMMENT [hdulibstm32f7xxhaltim-HalTimPwmConfigChannel-DB-LLR-009]
    COMMENT The function calls the macro __HAL_UNLOCK with h_tim as its parameter and returns HAL_OK from the function.
    COMMENT Equivalence Class 17
    COMMENT </TD>

        ELEMENT

                COMMENT INPUT SECTION:
                --Holds the member value of the structure h_tim
                VAR h_tim.Instance,                 init = & ptu_Instance ,             ev = init
                
                --Holds the value of the variable channel
                VAR channel,                        init = TIM_CHANNEL_1,               ev = init
                
                --Holds the member value of the structure s_config
                --OCFastMode member of s_config tested with min value
                VAR s_config.OCFastMode,            init = 0,                           ev = init

                COMMENT OUTPUT SECTION:
                --holds the return value of the function
                VAR ret_HalTimPwmConfigChannel,     init = HAL_ERROR,                   ev =  HAL_OK
                --Holds the member value of the structure h_tim
                VAR h_tim.State,                    init = HAL_TIM_STATE_RESET ,        ev = HAL_TIM_STATE_READY
    
                COMMENT INPUT/OUTPUT SECTION:   
                --Holds the member value of the structure Instance
                VAR ptu_Instance.CCR1,              init = 2 ,                          ev = 0
                VAR ptu_Instance.CCMR1,             init = 0 ,                          ev = 8
                VAR ptu_Instance.CCER,              init = 2 ,                          ev = 0        
                    
        -- Stub calls :
        SIMUL

          --None

        END SIMUL

            -- Calling the Unit Under Test :
            #ret_HalTimPwmConfigChannel = HalTimPwmConfigChannel(&h_tim, &s_config, channel);

        END ELEMENT

    END TEST -- TEST 1

    TEST 2
    FAMILY nominal

    COMMENT Test Description 
    COMMENT <TD>
    COMMENT [hdulibstm32f7xxhaltim-HalTimPwmConfigChannel-DB-LLR-001]
    COMMENT The function calls the macro __HAL_LOCK with h_tim as its parameter.
    COMMENT Equivalence Class 56
    COMMENT
    COMMENT [hdulibstm32f7xxhaltim-HalTimPwmConfigChannel-DB-LLR-004]
    COMMENT The function does the following when channel is TIM_CHANNEL_2.
    COMMENT 1.Calls the function 'TimOc2SetConfig' with Instance of h_tim and s_config as parameters.
    COMMENT 2.Sets CCMR1 of Instance of h_tim to result of bitwise  OR operation of CCMR1 of Instance of h_tim and TIM_CCMR1_OC2PE.
    COMMENT 3. Sets CCMR1 of Instance of h_tim to result of  bitwise  AND operation of CCMR1 of Instance of h_tim and negated value of TIM_CCMR1_OC2FE.
    COMMENT 4. Sets CCMR1 of Instance of h_tim to result of bitwise OR operation of CCMR1 of Instance of h_tim and OCFastMode of s_config 
    COMMENT left shifted by EIGHT.
    COMMENT Equivalence Class 13, 58
    COMMENT
    COMMENT [hdulibstm32f7xxhaltim-HalTimPwmConfigChannel-DB-LLR-008]
    COMMENT The function sets State of h_tim to HAL_TIM_STATE_READY.
    COMMENT Equivalence Class None
    COMMENT
    COMMENT [hdulibstm32f7xxhaltim-HalTimPwmConfigChannel-DB-LLR-009]
    COMMENT The function calls the macro __HAL_UNLOCK with h_tim as its parameter and returns HAL_OK from the function.
    COMMENT Equivalence Class 17
    COMMENT </TD>

        ELEMENT

                COMMENT INPUT SECTION:
                    --Holds the member value of the structure h_tim
                    VAR h_tim.Instance,                     init = & ptu_Instance ,         ev = init
                    --Holds the value of the variable channel
                    VAR channel,                            init = TIM_CHANNEL_2,           ev = init
                    
                    --Holds the member value of the structure s_config
                    --OCFastMode member of s_config tested with nonimal value
                    VAR s_config.OCFastMode,                init = 1,                       ev = init

                COMMENT OUTPUT SECTION:
                    --Holds the return value of the function
                    VAR ret_HalTimPwmConfigChannel,         init = HAL_ERROR,               ev =  HAL_OK
                    --Holds the member value of the structure h_tim
                    VAR h_tim.State,                        init = HAL_TIM_STATE_RESET ,    ev =  HAL_TIM_STATE_READY

                COMMENT INPUT/OUTPUT SECTION:
                    --Holds the member value of the structure Instance
                    VAR ptu_Instance.CCR2,                  init = 2 ,                      ev = 0
                    VAR ptu_Instance.CCMR1,                 init = 2 ,                      ev = 2306
                    VAR ptu_Instance.CCER,                  init = 2 ,                      ev = init        
                    
        -- Stub calls :
        SIMUL

          --None

        END SIMUL

            -- Calling the Unit Under Test :
            #ret_HalTimPwmConfigChannel = HalTimPwmConfigChannel(&h_tim, &s_config, channel);

        END ELEMENT

    END TEST -- TEST 2

    TEST 3
    FAMILY nominal

    COMMENT Test Description 
    COMMENT <TD>
    COMMENT [hdulibstm32f7xxhaltim-HalTimPwmConfigChannel-DB-LLR-001]
    COMMENT The function calls the macro __HAL_LOCK with h_tim as its parameter.
    COMMENT Equivalence Class 56
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-HalTimPwmConfigChannel-DB-LLR-005]
    COMMENT The function does the following when channel is TIM_CHANNEL_3.
    COMMENT 1.Calls the function 'TimOc3SetConfig' with Instance of h_tim and s_config as parameters.
    COMMENT 2.Sets CCMR2 of Instance of h_tim to result of bitwise OR operation of CCMR2 of Instance of h_tim and TIM_CCMR2_OC3PE.
    COMMENT 3. Sets CCMR2 of Instance of h_tim to result of bitwise AND operation of CCMR2 of Instance of h_tim and negated value of 
    COMMENT TIM_CCMR2_OC3PE.
    COMMENT 4. Sets CCMR2 of Instance of h_tim to result of bitwise OR operation of CCMR2 of Instance of h_tim and OCFastMode of s_config.
    COMMENT Equivalence Class 14, 59
    COMMENT
    COMMENT [hdulibstm32f7xxhaltim-HalTimPwmConfigChannel-DB-LLR-008]
    COMMENT The function sets State of h_tim to HAL_TIM_STATE_READY.
    COMMENT Equivalence Class None
    COMMENT
    COMMENT [hdulibstm32f7xxhaltim-HalTimPwmConfigChannel-DB-LLR-009]
    COMMENT The function calls the macro __HAL_UNLOCK with h_tim as its parameter and returns HAL_OK from the function.
    COMMENT Equivalence Class 17
    COMMENT </TD>

        ELEMENT

            COMMENT INPUT SECTION:
                --Holds the member value of the structure h_tim
                VAR h_tim.Instance,                     init = & ptu_Instance ,             ev = init
                --Holds the value of the variable channel
                VAR channel,                            init = TIM_CHANNEL_3,               ev = init
                
                --Holds the member value of the structure s_config
                --OCFastMode member of s_config tested with max value
                VAR s_config.OCFastMode,                init = (T_UINT32)0xFFFFFFFF,        ev = init

            COMMENT OUTPUT SECTION:
                --Hold the return value of the function 
                VAR ret_HalTimPwmConfigChannel,         init = HAL_ERROR,                   ev =  HAL_OK
                
                --Holds the member value of the structure h_tim
                VAR h_tim.State,                        init = HAL_TIM_STATE_RESET , ev = HAL_TIM_STATE_READY

            COMMENT INPUT/OUTPUT SECTION:
                --Holds the member value of the structure Instance
                VAR ptu_Instance.CCR3,                  init = 2 ,                          ev = 0
                VAR ptu_Instance.CCMR2,                 init = 0 ,                          ev = (T_UINT32)0xFFFFFFFF
                VAR ptu_Instance.CCER,                  init = 2 ,                          ev = init
                
        -- Stub calls :
        SIMUL

          --None

        END SIMUL

            -- Calling the Unit Under Test :
            #ret_HalTimPwmConfigChannel = HalTimPwmConfigChannel(&h_tim, &s_config, channel);

        END ELEMENT

    END TEST -- TEST 3

    TEST 4
    FAMILY nominal

    COMMENT Test Description 
    COMMENT <TD>
    COMMENT [hdulibstm32f7xxhaltim-HalTimPwmConfigChannel-DB-LLR-001]
    COMMENT The function calls the macro __HAL_LOCK with h_tim as its parameter.
    COMMENT Equivalence Class 56
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-HalTimPwmConfigChannel-DB-LLR-006]
    COMMENT The function does the following when channel is TIM_CHANNEL_4.
    COMMENT 1.Calls the function 'TimOc4SetConfig' with Instance of h_tim and s_config as parameters.
    COMMENT 2.Sets CCMR2 of Instance of h_tim to result of bitwise OR operation of CCMR2 of Instance of h_tim  and TIM_CCMR2_OC4PE.
    COMMENT 3. Sets CCMR2 of Instance of h_tim to result of bitwise AND operation of CCMR2 of Instance of h_tim and negated value of TIM_CCMR2_OC4PE.
    COMMENT 4. Sets CCMR2 of Instance of h_tim to result of bitwise OR operation of CCMR2 of Instance of h_tim and OCFastMode of s_config 
    COMMENT left shifted by EIGHT.
    COMMENT Equivalence Class 15, 60
    COMMENT
    COMMENT [hdulibstm32f7xxhaltim-HalTimPwmConfigChannel-DB-LLR-008]
    COMMENT The function sets State of h_tim to HAL_TIM_STATE_READY.
    COMMENT Equivalence Class None
    COMMENT
    COMMENT [hdulibstm32f7xxhaltim-HalTimPwmConfigChannel-DB-LLR-009]
    COMMENT The function calls the macro __HAL_UNLOCK with h_tim as its parameter and returns HAL_OK from the function.
    COMMENT Equivalence Class 17
    COMMENT </TD>

        ELEMENT

                COMMENT INPUT SECTION:
                    --Holds the member value of the structure h_tim
                    VAR h_tim.Instance,                 init = & ptu_Instance ,             ev = init
                    --Holds the value of the variable channel
                    VAR channel,                        init = TIM_CHANNEL_4,               ev = init
                    
                    --Holds the member value of the structure s_config
                    --OCFastMode member of s_config tested with min value
                    VAR s_config.OCFastMode,            init = 0,                           ev = init

                COMMENT OUTPUT SECTION:
                    --Holds the return value of the function 
                    VAR ret_HalTimPwmConfigChannel,     init = HAL_ERROR,                   ev =  HAL_OK
                    --Holds the member value of the structure h_tim
                    VAR h_tim.State,                    init = HAL_TIM_STATE_RESET ,        ev = HAL_TIM_STATE_READY

                COMMENT INPUT/OUTPUT SECTION:
                    --Holds the member value of the structure Instance
                    VAR ptu_Instance.CCR4,              init = 2 ,                          ev = 0
                    VAR ptu_Instance.CCMR2,             init = 2 ,                          ev = 2050
                    VAR ptu_Instance.CCER,              init = 2 ,                          ev = init
                    
        -- Stub calls :
        SIMUL

          --None

        END SIMUL

            -- Calling the Unit Under Test :
            #ret_HalTimPwmConfigChannel = HalTimPwmConfigChannel(&h_tim, &s_config, channel);

        END ELEMENT

    END TEST -- TEST 4

    TEST 5
    FAMILY nominal

    COMMENT Test Description 
    COMMENT <TD>
    COMMENT [hdulibstm32f7xxhaltim-HalTimPwmConfigChannel-DB-LLR-001]
    COMMENT The function calls the macro __HAL_LOCK with h_tim as its parameter.
    COMMENT Equivalence Class 56
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-HalTimPwmConfigChannel-DB-LLR-007]
    COMMENT The function does nothing when channel is other than TIM_CHANNEL_1, TIM_CHANNEL_2, TIM_CHANNEL_3 and TIM_CHANNEL_4.
    COMMENT Equivalence Class 16
    COMMENT
    COMMENT [hdulibstm32f7xxhaltim-HalTimPwmConfigChannel-DB-LLR-008]
    COMMENT The function sets State of h_tim to HAL_TIM_STATE_READY.
    COMMENT Equivalence Class none
    COMMENT
    COMMENT [hdulibstm32f7xxhaltim-HalTimPwmConfigChannel-DB-LLR-009]
    COMMENT The function calls the macro __HAL_UNLOCK with h_tim as its parameter and returns HAL_OK from the function.
    COMMENT Equivalence Class 61
    COMMENT </TD>

        ELEMENT

                COMMENT INPUT SECTION:
                    --Holds the member value of the structure h_tim
                    VAR h_tim.Instance,                     init = & ptu_Instance ,             ev = init
                    --Holds the value of the variable channel
                    VAR channel,                            init = 5,                           ev = init
      
                COMMENT OUTPUT SECTION:
                    --Holds the return value of the function 
                    VAR ret_HalTimPwmConfigChannel,         init = HAL_ERROR,                   ev =  HAL_OK
                    --Holds the member value of the structure h_tim
                    VAR h_tim.State,                        init = HAL_TIM_STATE_RESET ,        ev = HAL_TIM_STATE_READY

                COMMENT INPUT/OUTPUT SECTION:
                    --None     
                    
        -- Stub calls :
        SIMUL

          --None

        END SIMUL

            -- Calling the Unit Under Test :
            #ret_HalTimPwmConfigChannel = HalTimPwmConfigChannel(&h_tim, &s_config, channel);

        END ELEMENT

    END TEST -- TEST 5

    TEST 6
    FAMILY nominal

    COMMENT Test Description 
    COMMENT <TD>
    COMMENT [hdulibstm32f7xxhaltim-HalTimPwmConfigChannel-DB-LLR-001]
    COMMENT The function calls the macro __HAL_LOCK with h_tim as its parameter.
    COMMENT Equivalence Class 56
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-HalTimPwmConfigChannel-DB-LLR-002]
    COMMENT The function sets State of h_tim to HAL_TIM_STATE_BUSY.
    COMMENT Equivalence Class 34
    COMMENT </TD>

        ELEMENT

                COMMENT INPUT SECTION:
                    --Holds the member value of the structure h_tim
                    VAR h_tim.Instance,                 init = & ptu_Instance ,             ev = init
                    VAR h_tim.Lock,                     init = HAL_LOCKED ,                 ev = init

                COMMENT OUTPUT SECTION:
                    --Holds the return value of the function 
                    VAR ret_HalTimPwmConfigChannel,     init = HAL_ERROR,                   ev =  HAL_BUSY
        
                COMMENT INPUT/OUTPUT SECTION:
                    --None
       
                    
        -- Stub calls :
        SIMUL

          --None

        END SIMUL

            -- Calling the Unit Under Test :
            #ret_HalTimPwmConfigChannel = HalTimPwmConfigChannel(&h_tim, &s_config, channel);

        END ELEMENT

    END TEST -- TEST 6
    
--  TEST 7
--    FAMILY robustness
--
--    COMMENT Test Description 
--    COMMENT <TD>
--    COMMENT [hdulibstm32f7xxhaltim-HalTimPwmConfigChannel-DB-LLR-001]
--    COMMENT This test case is evaluated by giving the invalid reference to input parameter h_tim.
--    COMMENT Equivalence Class 36
--    COMMENT </TD>
--
--        ELEMENT
--
--            COMMENT INPUT SECTION:
--
--              VAR h_tim.Instance,             init = & ptu_Instance ,             ev = init
--              VAR channel,                    init = TIM_CHANNEL_1,               ev = init
--              --OCFastMode member of s_config tested with min value
--              VAR s_config.OCFastMode,        init = 0,                       ev = init
--
--            COMMENT OUTPUT SECTION:
--
--              VAR ret_HalTimPwmConfigChannel, init = HAL_ERROR,             ev =  HAL_OK
--              VAR h_tim.State,              init = HAL_TIM_STATE_RESET , ev = HAL_TIM_STATE_READY
--
--            COMMENT INPUT/OUTPUT SECTION:
--
--              VAR ptu_Instance.CCR1,      init = 2 , ev = 0
--              VAR ptu_Instance.CCMR1,     init = 0 , ev = 8
--              VAR ptu_Instance.CCER,      init = 2 , ev = 0
--
--        
--                    
--        -- Stub calls :
--        SIMUL
--
--          --None
--
--        END SIMUL
--
--            -- Calling the Unit Under Test :
--            #ret_HalTimPwmConfigChannel = HalTimPwmConfigChannel(NULL, &s_config, channel);
--
--        END ELEMENT
--
--    END TEST -- TEST 7
    
--  TEST 8
--    FAMILY robustness
--
--    COMMENT Test Description 
--    COMMENT <TD>
--    COMMENT [hdulibstm32f7xxhaltim-HalTimPwmConfigChannel-DB-LLR-001]
--    COMMENT This test case is evaluated by giving the invalid reference to input parameter s_config.
--    COMMENT Equivalence Class 37
--    COMMENT </TD>
--
--        ELEMENT
--
--            COMMENT INPUT SECTION:
--
--          VAR h_tim.Instance,         init = & ptu_Instance ,             ev = init
--          VAR channel,                init = TIM_CHANNEL_1,               ev = init
--      --OCFastMode member of s_config tested with min value
--      VAR s_config.OCFastMode,    init = 0,                       ev = init
--
--            COMMENT OUTPUT SECTION:
--
--            VAR ret_HalTimPwmConfigChannel,     init = HAL_ERROR,             ev =  HAL_OK
--          VAR h_tim.State,                init = HAL_TIM_STATE_RESET , ev = HAL_TIM_STATE_READY
--
--            COMMENT INPUT/OUTPUT SECTION:
--
--            VAR ptu_Instance.CCR1,    init = 2 , ev = 0
--          VAR ptu_Instance.CCMR1, init = 0 , ev = 8
--          VAR ptu_Instance.CCER,  init = 2 , ev = 0
--
--        
--                    
--        -- Stub calls :
--        SIMUL
--
--          --None
--
--        END SIMUL
--
--            -- Calling the Unit Under Test :
--            #ret_HalTimPwmConfigChannel = HalTimPwmConfigChannel(&h_tim, NULL, channel);
--
--        END ELEMENT
--
--    END TEST -- TEST 8    

END SERVICE -- HalTimPwmConfigChannel


--------------------------------------------------------------------------------
-- Declaration of the service HalTimPwmStart
--------------------------------------------------------------------------------
SERVICE HalTimPwmStart
SERVICE_TYPE extern

    -- Tested service parameters declarations
    #T_TIM_HANDLE h_tim;
    #T_UINT32 channel;
    -- By function returned type declaration
    #T_HAL_STATUS ret_HalTimPwmStart;

    --local varibale declaration
    #T_TIM ptu_Instance;

    ENVIRONMENT ENV_HalTimPwmStart
    STRUCTURE h_tim,            init = { Instance => NIL, Init => { Prescaler => 0, CounterMode => 0, Period => 0, ClockDivision => 0, 
    & RepetitionCounter => 0 }, Channel => HAL_TIM_ACTIVE_CHANNEL_1, hdma => { others => NIL }, Lock => HAL_UNLOCKED, State => HAL_TIM_STATE_RESET }, 
    &                                               ev = init
    VAR channel,                init = 0,           ev = init
    VAR ret_HalTimPwmStart,     init = HAL_OK,      ev = init

    --Instance initialization
    STRUCTURE ptu_Instance,     init ={others => 2},    ev=init 
    STRUCTURE PTU_TIM1_BASE,    init ={others => 0},    ev=init 

    END ENVIRONMENT -- ENV_HalTimPwmStart
    USE ENV_HalTimPwmStart

   TEST 1
    FAMILY nominal

    COMMENT Test Description 
    COMMENT <TD>
    COMMENT [hdulibstm32f7xxhaltim-HalTimPwmStart-DB-LLR-001]
    COMMENT The function calls the function 'TimCcxChannelCmd' with Instance of h_tim, channel and TIM_CCX_ENABLE to enable the Capture compare 
    COMMENT channel.
    COMMENT Equivalence Class 63
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-HalTimPwmStart-DB-LLR-002]
    COMMENT The function does nothing when return of IS_TIM_ADVANCED_INSTANCE with Instance of h_tim is equal to RESET.
    COMMENT Equivalence Class 10
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-HalTimPwmStart-DB-LLR-003]
    COMMENT The function calls the macro __HAL_TIM_ENABLE with h_tim as parameter.
    COMMENT Equivalence Class 62
    COMMENT
    COMMENT [hdulibstm32f7xxhaltim-HalTimPwmStart-DB-LLR-004]
    COMMENT The function returns HAL_OK from the function.
    COMMENT Equivalence Class 11
    COMMENT </TD>

        ELEMENT

                COMMENT INPUT SECTION:
                    --Holds the member value of the structure h_tim
                    VAR h_tim.Instance,     init = & ptu_Instance ,             ev = init
                    --Holds the value of the variable channel
                    VAR channel,            init = 0,                           ev = init

                COMMENT OUTPUT SECTION:
                    --Holds the return value of the function 
                    VAR ret_HalTimPwmStart, init = HAL_ERROR,                   ev =  HAL_OK

                COMMENT INPUT/OUTPUT SECTION:
                    --Holds the member value of the structure Instance
                    --tested with nominal values
                    VAR ptu_Instance.CR1,   init = 2 ,                          ev = 3
                    VAR ptu_Instance.CCER,  init = 2 ,                          ev = 3        
                    
        -- Stub calls :
        SIMUL

          --None

        END SIMUL

            -- Calling the Unit Under Test :
            #ret_HalTimPwmStart = HalTimPwmStart(&h_tim, channel);

        END ELEMENT

    END TEST -- TEST 1

    TEST 2
    FAMILY nominal

    COMMENT Test Description 
    COMMENT <TD>
    COMMENT [hdulibstm32f7xxhaltim-HalTimPwmStart-DB-LLR-001]
    COMMENT The function calls the function 'TimCcxChannelCmd' with Instance of h_tim, channel and TIM_CCX_ENABLE 
    COMMENT to enable the Capture compare channel.
    COMMENT Equivalence Class 63
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-HalTimPwmStart-DB-LLR-002]
    COMMENT The function enables the main output by calling __HAL_TIM_MOE_ENABLE with h_tim as parameter 
    COMMENT when return of IS_TIM_ADVANCED_INSTANCE with Instance of h_tim is not equal to RESET.
    COMMENT Equivalence Class 9
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-HalTimPwmStart-DB-LLR-003]
    COMMENT The function calls the macro __HAL_TIM_ENABLE with h_tim as parameter.
    COMMENT Equivalence Class 62
    COMMENT
    COMMENT [hdulibstm32f7xxhaltim-HalTimPwmStart-DB-LLR-004]
    COMMENT The function returns HAL_OK from the function.
    COMMENT Equivalence Class 11
    COMMENT This test case is evaluated by giving the minimum(CRI,CCER)/nominal(BDTR) values to inputs and instance used is TIM1. 
    COMMENT </TD>

        ELEMENT

            COMMENT INPUT SECTION:
                    --Holds the member value of the structure h_tim
                    VAR h_tim.Instance,             init = &PTU_TIM1_BASE ,             ev = init
                    --Holds the value of the variable channel
                    VAR channel,                    init = 0,                           ev = init

                COMMENT OUTPUT SECTION:
                    --Holds the return value of the function 
                    VAR ret_HalTimPwmStart,         init = HAL_ERROR,                   ev =  HAL_OK

                COMMENT INPUT/OUTPUT SECTION:
                    --Holds the member value of the structure Instance
                    --tested with minimum values
                    VAR PTU_TIM1_BASE.CR1,          init = 0 ,                          ev = 1
                    VAR PTU_TIM1_BASE.CCER,         init = 0 ,                          ev = 1
                    --tested with nominal values                            
                    VAR PTU_TIM1_BASE.BDTR,         init = 2 ,                          ev = 0x00008002U       
                    
        -- Stub calls :
        SIMUL

          --None

        END SIMUL

            -- Calling the Unit Under Test :
            #ret_HalTimPwmStart = HalTimPwmStart(&h_tim, channel);

        END ELEMENT

    END TEST -- TEST 2

    TEST 3
    FAMILY nominal

    COMMENT Test Description 
    COMMENT <TD>
    COMMENT [hdulibstm32f7xxhaltim-HalTimPwmStart-DB-LLR-001]
    COMMENT The function calls the function 'TimCcxChannelCmd' with Instance of h_tim, channel and TIM_CCX_ENABLE 
    COMMENT to enable the Capture compare channel.
    COMMENT Equivalence Class 63
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-HalTimPwmStart-DB-LLR-002]
    COMMENT The function enables the main output by calling __HAL_TIM_MOE_ENABLE with h_tim as parameter 
    COMMENT when return of IS_TIM_ADVANCED_INSTANCE with Instance of h_tim is not equal to RESET.
    COMMENT Equivalence Class 9
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-HalTimPwmStart-DB-LLR-003]
    COMMENT The function calls the macro __HAL_TIM_ENABLE with h_tim as parameter.
    COMMENT Equivalence Class 62
    COMMENT
    COMMENT [hdulibstm32f7xxhaltim-HalTimPwmStart-DB-LLR-004]
    COMMENT The function returns HAL_OK from the function.
    COMMENT Equivalence Class 11
    COMMENT This test case is evaluated by giving the maximum(CRI,CCER)/minimum(BDTR) values to inputs and instance used is TIM8. 
    COMMENT </TD>


        ELEMENT

                COMMENT INPUT SECTION:
                    --Holds the member value of the structure h_tim
                    VAR h_tim.Instance,             init = & PTU_TIM8_BASE ,            ev = init
                    --Holds the value of the variable channel
                    VAR channel,                    init = 0,                           ev = init

                COMMENT OUTPUT SECTION:
                    --Holds the return value of the function 
                    VAR ret_HalTimPwmStart,         init = HAL_ERROR,                   ev =  HAL_OK

                COMMENT INPUT/OUTPUT SECTION:
                    --Holds the member value of the structure Instance
                    --tested with maximum values
                    VAR PTU_TIM8_BASE.CR1,          init = (T_UINT32)0xFFFFFFFF ,       ev = (T_UINT32)0xFFFFFFFF
                    VAR PTU_TIM8_BASE.CCER,         init = (T_UINT32)0xFFFFFFFF ,       ev = (T_UINT32)0xFFFFFFFF
                    --tested with minimum values
                    VAR PTU_TIM8_BASE.BDTR,         init = 0 ,                          ev = 0x00008000U        
                    
        -- Stub calls :
        SIMUL

          --None

        END SIMUL

            -- Calling the Unit Under Test :
            #ret_HalTimPwmStart = HalTimPwmStart(&h_tim, channel);

        END ELEMENT

    END TEST -- TEST 3

    TEST 4
    FAMILY nominal

    COMMENT Test Description 
    COMMENT <TD>
    COMMENT [hdulibstm32f7xxhaltim-HalTimPwmStart-DB-LLR-001]
    COMMENT The function calls the function 'TimCcxChannelCmd' with Instance of h_tim, channel and TIM_CCX_ENABLE 
    COMMENT to enable the Capture compare channel.
    COMMENT Equivalence Class 63
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-HalTimPwmStart-DB-LLR-002]
    COMMENT The function enables the main output by calling __HAL_TIM_MOE_ENABLE with h_tim as parameter 
    COMMENT when return of IS_TIM_ADVANCED_INSTANCE with Instance of h_tim is not equal to RESET.
    COMMENT Equivalence Class 9
    COMMENT 
    COMMENT [hdulibstm32f7xxhaltim-HalTimPwmStart-DB-LLR-003]
    COMMENT The function calls the macro __HAL_TIM_ENABLE with h_tim as parameter.
    COMMENT Equivalence Class 62
    COMMENT
    COMMENT [hdulibstm32f7xxhaltim-HalTimPwmStart-DB-LLR-004]
    COMMENT The function returns HAL_OK from the function.
    COMMENT Equivalence Class 11
    COMMENT This test case is evaluated by giving the maximum(CRI, CCER, BDTR) values to inputs and instance used is TIM8. 
    COMMENT </TD>

        ELEMENT

                COMMENT INPUT SECTION:
                    --Holds the member value of the structure h_tim
                    VAR h_tim.Instance,             init = & PTU_TIM8_BASE ,            ev = init
                            
                    --Holds the value of the variable channel       
                    VAR channel,                    init = 0,                           ev = init
        
                COMMENT OUTPUT SECTION:     
                    --Holds the return value of the function        
                    VAR ret_HalTimPwmStart,         init = HAL_ERROR,                   ev =  HAL_OK

                COMMENT INPUT/OUTPUT SECTION:
                    --Holds the member value of the structure Instance
                    --tested with maximum values
                    VAR PTU_TIM8_BASE.CR1,          init = (T_UINT32)0xFFFFFFFF ,       ev = (T_UINT32)0xFFFFFFFF
                    VAR PTU_TIM8_BASE.CCER,         init = (T_UINT32)0xFFFFFFFF ,       ev = (T_UINT32)0xFFFFFFFF
                    VAR PTU_TIM8_BASE.BDTR,         init = (T_UINT32)0xFFFFFFFF ,       ev = (T_UINT32)0xFFFFFFFF        
                    
        -- Stub calls :
        SIMUL

          --None

        END SIMUL

            -- Calling the Unit Under Test :
            #ret_HalTimPwmStart = HalTimPwmStart(&h_tim, channel);

        END ELEMENT

    END TEST -- TEST 4

--    TEST 5
--    FAMILY robustness
--
--    COMMENT Test Description 
--    COMMENT <TD>
--    COMMENT [hdulibstm32f7xxhaltim-HalTimPwmStart-DB-LLR-001]
--    COMMENT This test case is evaluated by giving the invalid reference to input parameter h_tim.
--    COMMENT Equivalence Class 35
--    COMMENT </TD>
--
--
--        ELEMENT
--
--            COMMENT INPUT SECTION:
--
--                  VAR h_tim.Instance,             init = & PTU_TIM8_BASE ,        ev = init
--                  VAR channel,                    init = 0,                       ev = init
--
--            COMMENT OUTPUT SECTION:
--
--                  VAR ret_HalTimPwmStart,         init = HAL_ERROR,               ev =  HAL_OK
--
--            COMMENT INPUT/OUTPUT SECTION:
--
--                  --tested with maximum values
--                  VAR PTU_TIM8_BASE.CR1,          init = (T_UINT32)0xFFFFFFFF ,   ev = (T_UINT32)0xFFFFFFFF
--                  VAR PTU_TIM8_BASE.CCER,         init = (T_UINT32)0xFFFFFFFF ,   ev = (T_UINT32)0xFFFFFFFF
--                  VAR PTU_TIM8_BASE.BDTR,         init = (T_UINT32)0xFFFFFFFF ,   ev = (T_UINT32)0xFFFFFFFF
--
--        
--                    
--        -- Stub calls :
--        SIMUL
--
--          --None
--
--        END SIMUL
--
--            -- Calling the Unit Under Test :
--            #ret_HalTimPwmStart = HalTimPwmStart(NULL, channel);
--
--        END ELEMENT
--
--    END TEST -- TEST 5
      
END SERVICE -- HalTimPwmStart

