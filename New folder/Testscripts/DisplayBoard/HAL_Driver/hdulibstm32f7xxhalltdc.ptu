HEADER hdulibstm32f7xxhalltdc,Source Code Ver : 1.4,TestScript Ver : 1.2
--------------------------------------------------------------------------------
-- Author Name         : BhanuPrakash E
--
-- File Name           : hdulibstm32f7xxhalltdc.ptu
--
-- Test Creation Date  : 31.10.2017
--
-- Tested Functions    : HalLtdcInit
--                       HalLtdcConfigClut
--                       HalLtdcConfigLayer
--                       HalLtdcSetAddress
--                       LtdcSetConfig
--                       HalLtdcEnableClut
--
-- Version History     :
--
-- TEST-VERSION        TEST-DATE               TESTER NAME          MODIFICATIONS
-- ------------        ---------               -----------          -------------
--     1.1             31.10.2017              BhanuPrakash E       Created the ptu file. 
--	   1.2			   10.11.2017			   BhanuPrakash E		Updated as per #PR100171
--------------------------------------------------------------------------------
--
-- TESTED FILE INCLUDE DIRECTIVES 
--
--------------------------------------------------------------------------------

##include "hdulibstm32f7xxhal.h"        
##include "hdulibstm32f7xxhalltdc.h"    
##include "hdulibbasictypes.h"          
##include "hdulibstm32f7xxhalmsp.h"     
##include "hdulibstm32f7xxhaldef.h"     
##include "hdulibstm32f746xx.h"  
--------------------------------------------------------------------------------
--
-- TESTED FILE DECLARATIONS 
--
--------------------------------------------------------------------------------

-- Declarations of the global variables of the tested file

	--None
  
-- Declarations of the temporary variables of the tested file

	--None
	
--------------------------------------------------------------------------------

BEGIN

	COMMENT Author Name      : 	BhanuPrakash E
	COMMENT
	COMMENT File Name        : 	hdulibstm32f7xxhalltdc.ptu
	COMMENT
	COMMENT Tested Functions : 	HalLtdcInit
	COMMENT						HalLtdcConfigClut
	COMMENT						HalLtdcConfigLayer
	COMMENT						HalLtdcSetAddress
	COMMENT						LtdcSetConfig
	COMMENT						HalLtdcEnableClut
	COMMENT
	COMMENT Assumptions and Constraints
	COMMENT <AC>
	COMMENT
	COMMENT Assumption(s):
	COMMENT None
	COMMENT 
	COMMENT Constraint(s):
    COMMENT 1'do..while' loop cannot be covered for 2 times or more since it is controlled by magical number in functions 'HalLtdcConfigLayer',
    COMMENT 'HalLtdcSetAddress','HalLtdcEnableClut','HalLtdcConfigClut'
    COMMENT
    COMMENT 2. Following Test script related warnings are observed during Target Execution for volatile
    COMMENT keyword member/variable:
   	COMMENT warning #191-D: type qualifier is meaningless on cast type
	COMMENT </AC>
 
	COMMENT Equivalence Class Description
	COMMENT <ECD>
	COMMENT 
	COMMENT Valid Class(es)
	COMMENT Class 1
	COMMENT In function "HalLtdcInit", h_ltdc is equal to NULL.
	COMMENT
	COMMENT Class 2
	COMMENT In function "HalLtdcInit", h_ltdc is not equal to NULL.
	COMMENT
	COMMENT Class 3
	COMMENT In function "HalLtdcInit", State of h_ltdc is equal to HAL_LTDC_STATE_RESET.
	COMMENT
	COMMENT Class 4
	COMMENT In function "HalLtdcInit", State of h_ltdc is not equal to HAL_LTDC_STATE_RESET.
	COMMENT
	COMMENT Class 5
	COMMENT In function "HalLtdcInit", function 'HalLtdcMspInit' is called.
	COMMENT
	COMMENT Class 6
	COMMENT In function "HalLtdcInit", macro '__HAL_LTDC_ENABLE_IT' is called.
	COMMENT
	COMMENT Class 7
	COMMENT In function "HalLtdcInit", macro '__HAL_LTDC_ENABLE' is called.
	COMMENT
	COMMENT Class 8
	COMMENT In function "HalLtdcConfigLayer", macro '__HAL_LOCK' is called.
	COMMENT
	COMMENT Class 9
	COMMENT In function "HalLtdcConfigLayer", macro '__HAL_UNLOCK' is called.
	COMMENT
	COMMENT Class 10
	COMMENT In function "HalLtdcConfigLayer", function 'LtdcSetConfig ' is called.
	COMMENT
	COMMENT Class 11
	COMMENT In function "HalLtdcSetAddress", macro '__HAL_LOCK' is called.
	COMMENT
	COMMENT Class 12
	COMMENT In function "HalLtdcSetAddress", function 'LtdcSetConfig ' is called.
	COMMENT
	COMMENT Class 13
	COMMENT In function "HalLtdcSetAddress", macro '__HAL_UNLOCK' is called.
	COMMENT
	COMMENT Class 14
	COMMENT In function "HalLtdcEnableClut", macro '__HAL_LOCK' is called.
	COMMENT
	COMMENT Class 15
	COMMENT In function "HalLtdcEnableClut", macro '__HAL_UNLOCK' is called.
	COMMENT
	COMMENT Class 16
	COMMENT In function "HalLtdcConfigClut", macro '__HAL_LOCK' is called.
	COMMENT
	COMMENT Class 17
	COMMENT In function "HalLtdcConfigClut", PixelFormat of LayerCfg with index layer_idx of h_ltdc is equal to LTDC_PIXEL_FORMAT_AL44
	COMMENT
	COMMENT Class 18
	COMMENT In function "HalLtdcConfigClut", PixelFormat of LayerCfg with index layer_idx of h_ltdc is not equal to LTDC_PIXEL_FORMAT_AL44
	COMMENT
	COMMENT Class 19
	COMMENT In function "HalLtdcConfigClut", macro '__HAL_UNLOCK' is called.
	COMMENT
	COMMENT Class 20
	COMMENT In function "LtdcSetConfig", PixelFormat of p_layer_cfg is equal to LTDC_PIXEL_FORMAT_ARGB8888.
	COMMENT
	COMMENT Class 21
	COMMENT In function "LtdcSetConfig", PixelFormat of p_layer_cfg is not equal to LTDC_PIXEL_FORMAT_ARGB8888.
	COMMENT
	COMMENT Class 22
	COMMENT In function "LtdcSetConfig", PixelFormat of p_layer_cfg is equal to LTDC_PIXEL_FORMAT_RGB888.
	COMMENT
	COMMENT Class 23
	COMMENT In function "LtdcSetConfig", PixelFormat of p_layer_cfg is not equal to LTDC_PIXEL_FORMAT_RGB888.
	COMMENT
	COMMENT Class 24
	COMMENT In function "LtdcSetConfig", PixelFormat of p_layer_cfg is equal to LTDC_PIXEL_FORMAT_ARGB4444.
	COMMENT
	COMMENT Class 25
	COMMENT In function "LtdcSetConfig", PixelFormat of p_layer_cfg is not equal to LTDC_PIXEL_FORMAT_ARGB4444.
	COMMENT
	COMMENT Class 26
	COMMENT In function "LtdcSetConfig", PixelFormat of p_layer_cfg is equal to LTDC_PIXEL_FORMAT_RGB565.
	COMMENT
	COMMENT Class 27
	COMMENT In function "LtdcSetConfig", PixelFormat of p_layer_cfg is not equal to LTDC_PIXEL_FORMAT_RGB565.
	COMMENT
	COMMENT Class 28
	COMMENT In function "LtdcSetConfig", PixelFormat of p_layer_cfg is equal to LTDC_PIXEL_FORMAT_ARGB1555.
	COMMENT
	COMMENT Class 29
	COMMENT In function "LtdcSetConfig", PixelFormat of p_layer_cfg is not equal to LTDC_PIXEL_FORMAT_ARGB1555.
	COMMENT
	COMMENT Class 30
	COMMENT In function "LtdcSetConfig", PixelFormat of p_layer_cfg is equal to LTDC_PIXEL_FORMAT_AL88.
	COMMENT
	COMMENT Class 31
	COMMENT In function "LtdcSetConfig", PixelFormat of p_layer_cfg is not equal to LTDC_PIXEL_FORMAT_AL88.
	COMMENT
	COMMENT Class 32
	COMMENT The function "HalLtdcInit", returns 'HAL_ERROR'.
	COMMENT
	COMMENT Class 33
	COMMENT The function "HalLtdcInit", returns 'HAL_OK'.
	COMMENT
	COMMENT Class 34
	COMMENT The function "HalLtdcConfigLayer", returns 'HAL_OK'.
	COMMENT
	COMMENT Class 35
	COMMENT The function "HalLtdcSetAddress", returns 'HAL_OK'.
	COMMENT
	COMMENT Class 36
	COMMENT The function "HalLtdcEnableClut", returns 'HAL_OK'.
	COMMENT
	COMMENT Class 37
	COMMENT The function "HalLtdcConfigClut", returns 'HAL_OK'.
	COMMENT
	COMMENT Invalid Class(es)
	COMMENT Class 38
	COMMENT In function "HalLtdcConfigClut", Invalid Reference is passed to h_ltdc parameter.
	COMMENT
	COMMENT Class 39
	COMMENT In function "HalLtdcConfigClut", Invalid Reference is passed to p_clut parameter.
	COMMENT
	COMMENT Class 40
	COMMENT In function "HalLtdcConfigLayer", Invalid Reference is passed to h_ltdc parameter.
	COMMENT
	COMMENT Class 41
	COMMENT In function "HalLtdcConfigLayer", Invalid Reference is passed to p_layer_cfg parameter.
	COMMENT
	COMMENT Class 42
	COMMENT In function "HalLtdcSetAddress", Invalid Reference is passed to h_ltdc parameter.
	COMMENT
	COMMENT Class 43
	COMMENT In function "HalLtdcEnableClut", Invalid Reference is passed to h_ltdc parameter.
	COMMENT </ECD>

--------------------------------------------------------------------------------
--
-- STUB DECLARATIONS OF THE TESTED OR INTEGRATED UNITS
--
--------------------------------------------------------------------------------

SIMUL

	DEFINE STUB hdulibstm32f7xxhalltdc_c

		#void HalLtdcMspInit(); 

	END DEFINE

ELSE_SIMUL

    --No action defined as of now if the module is not simulated

END SIMUL

--------------------------------------------------------------------------------
--
-- ENVIRONMENTS DECLARATIONS
--
--------------------------------------------------------------------------------
--IF HOST

--No special things that have to be done on the host to run the test.

--ELSE

--No action defined for the target execution as of now

--END IF
--------------------------------------------------------------------------------
-- TESTED FILE ENVIRONMENT
--------------------------------------------------------------------------------
-- Environment of the file hdulibstm32f7xxhalltdc.c

--ENVIRONMENT ENV_hdulibstm32f7xxhalltdc_c

	--None

--END ENVIRONMENT -- ENV_hdulibstm32f7xxhalltdc_c

-- USE ENV_hdulibstm32f7xxhalltdc_c
--------------------------------------------------------------------------------
--
-- SERVICES DECLARATIONS
--
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
-- Declaration of the service HalLtdcInit
--------------------------------------------------------------------------------
SERVICE HalLtdcInit
SERVICE_TYPE extern

	-- Tested service parameters declarations
	#T_LTDC_HANDLE h_ltdc;
	-- By function returned type declaration
	#T_HAL_STATUS ret_HalLtdcInit;
	--Temporary variable created to pass address to structure 'Instance' of 'h_ltdc'
    #T_LTDC PTU_Instance;
    
	--Default Variables 
	ENVIRONMENT ENV_HalLtdcInit

		STRUCTURE h_ltdc,			init = { Instance => &PTU_Instance, Init => { HSPolarity => 0, VSPolarity => 0, 
		&							DEPolarity => 0, PCPolarity => 0, HorizontalSync => 0, VerticalSync => 0, AccumulatedHBP => 0,
		&							AccumulatedVBP => 0, AccumulatedActiveW => 0, AccumulatedActiveH => 0, TotalWidth => 0, 
		&							TotalHeigh => 0, Backcolor => { Blue => 0, Green => 0, Red => 0, Reserved => 0 } }, 
		&							LayerCfg => { others => { WindowX0 => 0, WindowX1 => 0, WindowY0 => 0, WindowY1 => 0, 
		&							PixelFormat => 0, Alpha => 0, Alpha0 => 0, BlendingFactor1 => 0, BlendingFactor2 => 0, 
		&							FBStartAdress => 0, ImageWidth => 0, ImageHeight => 0, Backcolor => { Blue => 0, Green => 0,
		&							Red => 0, Reserved => 0 } } }, Lock => HAL_UNLOCKED, State => HAL_LTDC_STATE_RESET, ErrorCode => 0 },
		&																						ev = init
		VAR ret_HalLtdcInit,		init = HAL_OK,												ev = init

	END ENVIRONMENT -- ENV_HalLtdcInit

	USE ENV_HalLtdcInit

TEST 1
FAMILY nominal

	COMMENT Test Description
	COMMENT <TD>
	COMMENT [hdulibstm32f7xxhalltdc-HalLtdcInit-DB-LLR-001]
	COMMENT The function 'HalLtdcInit' returns HAL_ERROR when h_ltdc is equal to NULL
	COMMENT Equivalence Class 1,32
	COMMENT </TD>

	ELEMENT

		COMMENT INPUT SECTION:
			
			--None
			
		COMMENT OUTPUT SECTION:

			--Holds return value of HalLtdcInit
			VAR ret_HalLtdcInit,		init = HAL_OK,												ev = HAL_ERROR

		COMMENT INPUT/OUTPUT SECTION:

			--None

		--Stub Calls
		SIMUL

			--No Stubs
			
		END SIMUL

		--Calling unit under test
		#ret_HalLtdcInit = HalLtdcInit(NULL);
		
	END ELEMENT

END TEST -- TEST 1

TEST 2
FAMILY nominal

	COMMENT Test Description
	COMMENT <TD>
	COMMENT [hdulibstm32f7xxhalltdc-HalLtdcInit-DB-LLR-001]
	COMMENT The function 'HalLtdcInit' does nothing when h_ltdc is not equal to NULL
	COMMENT Equivalence Class 2
	COMMENT 
	COMMENT [hdulibstm32f7xxhalltdc-HalLtdcInit-DB-LLR-002]
	COMMENT The function 'HalLtdcInit' does the following when State of h_ltdc is equal to HAL_LTDC_STATE_RESET
	COMMENT a. sets Lock of h_ltdc to HAL_UNLOCKED
	COMMENT b. calls the function 'HalLtdcMspInit'
	COMMENT Equivalence Class 3,5
	COMMENT
	COMMENT [hdulibstm32f7xxhalltdc-HalLtdcInit-DB-LLR-003]
	COMMENT The function 'HalLtdcInit' sets State of h_ltdc to HAL_LTDC_STATE_BUSY
	COMMENT Equivalence Class None
	COMMENT
	COMMENT [hdulibstm32f7xxhalltdc-HalLtdcInit-DB-LLR-004]
	COMMENT The function configures the HS, VS, DE and PC polarity as below:
	COMMENT a. sets GCR of Instance of h_ltdc to result of AND operation of GCR of Instance of h_ltdc and negated 
	COMMENT    value of result of bitwise OR operation of (LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL).
	COMMENT b. Set GCR of Instance of h_ltdc to result of bitwise OR operation of GCR of Instance of h_ltdc , HSPolarity of Init 
	COMMENT    of h_ltdc | VSPolarity of Init of h_ltdc | DEPolarity of Init of h_ltdc | PCPolarity of Init of h_ltdc
	COMMENT Equivalence Class None	
	COMMENT
	COMMENT [hdulibstm32f7xxhalltdc-HalLtdcInit-DB-LLR-005]
	COMMENT The function 'HalLtdcInit' sets synchronization size as follows:
	COMMENT 1. sets SSCR of  Instance of h_ltdc to result of bitwise AND operation of SSCR of  Instance of h_ltdc and 
	COMMENT    negated Value of result of bitwise OR operation of LTDC_SSCR_VSH and LTDC_SSCR_HSW.
	COMMENT 2. sets SSCR of  Instance of h_ltdc to result of bitwise OR operation of SSCR of Instance of h_ltdc and result 
	COMMENT    of bitwise OR operation of  HorizontalSync of Init of h_ltdc left shift by SIXTEEN and VerticalSync of Init of h_ltdc
	COMMENT Equivalence Class None	
	COMMENT
	COMMENT [hdulibstm32f7xxhalltdc-HalLtdcInit-DB-LLR-006]
	COMMENT The function 'HalLtdcInit' setS Accumulated Back porch as follows:
	COMMENT 1. sets BPCR of Instance of h_ltdc to result of BPCR of Instance of h_ltdc and negated value of bitwise OR operation 
	COMMENT    of LTDC_BPCR_AVBP and LTDC_BPCR_AHBP.
	COMMENT 2. sets BPCR of Instance of h_ltdc to result of bitwise OR operation of BPCR of Instance of h_ltdc and result of OR 
	COMMENT    operation of AccumulatedHBP of Init of h_ltdc left shifted by SIXTEEN and AccumulatedVBP of Init of h_ltdc
	COMMENT Equivalence Class None	
	COMMENT
	COMMENT [hdulibstm32f7xxhalltdc-HalLtdcInit-DB-LLR-007]
	COMMENT The function 'HalLtdcInit' sets Accumulated Width as follows:
	COMMENT 1.sets AWCR of Instance of h_ltdc to result of AWCR  of Instance of h_ltdc and negated value of bitwise OR operation 
	COMMENT   of LTDC_AWCR_AAH and LTDC_AWCR_AAW.
	COMMENT 2.sets AWCR  of Instance of h_ltdc to result of bitwise OR operation of AWCR of Instance of h_ltdc and result of
	COMMENT   bitwise OR operation of AccumulatedActiveW of Init of h_ltdc left shifted by SIXTEEN and AccumulatedActiveH of Init of h_ltdc.
	COMMENT Equivalence Class None	
	COMMENT
	COMMENT [hdulibstm32f7xxhalltdc-HalLtdcInit-DB-LLR-008]
	COMMENT The function 'HalLtdcInit' sets Total Width as follows:
	COMMENT 1.sets TWCR of Instance of h_ltdc to result of TWCR of Instance of h_ltdc and negated value of bitwise OR operation of
	COMMENT   LTDC_TWCR_TOTALH and LTDC_TWCR_TOTALW.
	COMMENT 2.sets TWCR  of Instance of h_ltdc to result of bitwise OR operation of AWCR of Instance of h_ltdc and result of OR
	COMMENT   operation of TotalWidth of Init of h_ltdc left shifted by SIXTEEN and TotalHeigh of Init of h_ltdc
	COMMENT Equivalence Class None	
	COMMENT
	COMMENT [hdulibstm32f7xxhalltdc-HalLtdcInit-DB-LLR-009]
	COMMENT The function 'HalLtdcInit' sets background color value as follows:
	COMMENT 1.sets BCCR of Instance of h_ltdc to result of bitwise AND opeartion of BCCR of Instance of h_ltdc and negated value
	COMMENT   of bitwise OR operation of (LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED).
	COMMENT 2.sets BCCR of Instance of h_ltdc to result of bitwise AND opeartion of BCCR of Instance of h_ltdc and result of 
	COMMENT   bitwise OR operation of (Red of Backcolor of Init of h_ltdc left shifted by SIXTEEN) bitwise OR (Green of Backcolor
	COMMENT   of Init of h_ltdc ltdc left shifted by EIGHT) bitwise OR (Blue of Backcolor of Init of h_ltdc)
	COMMENT Equivalence Class None	
	COMMENT
	COMMENT [hdulibstm32f7xxhalltdc-HalLtdcInit-DB-LLR-010]
	COMMENT The function 'HalLtdcInit' enables the transfer Error interrupt by calling the macro '__HAL_LTDC_ENABLE_IT' with parameters
	COMMENT h_ltdc and LTDC_IT_TE 
	COMMENT Equivalence Class 6	
	COMMENT
	COMMENT [hdulibstm32f7xxhalltdc-HalLtdcInit-DB-LLR-011]
	COMMENT The function 'HalLtdcInit' enables the FIFO underrun interrupt by calling the macro '__HAL_LTDC_ENABLE_IT' with parameters
	COMMENT h_ltdc and LTDC_IT_FU 
	COMMENT Equivalence Class 6	
	COMMENT
	COMMENT [hdulibstm32f7xxhalltdc-HalLtdcInit-DB-LLR-012]
	COMMENT The function 'HalLtdcInit' enables LTDC by setting LTDCEN bit bycalling the macro '__HAL_LTDC_ENABLE' with h_ltdc as parameter 
	COMMENT Equivalence Class 7
	COMMENT
	COMMENT [hdulibstm32f7xxhalltdc-HalLtdcInit-DB-LLR-013]
	COMMENT The function 'HalLtdcInit' sets the ErrorCode of h_ltdc to HAL_LTDC_ERROR_NONE
	COMMENT Equivalence Class None	
	COMMENT
	COMMENT [hdulibstm32f7xxhalltdc-HalLtdcInit-DB-LLR-014]
	COMMENT The function 'HalLtdcInit' sets the State of h_ltdc to HAL_LTDC_STATE_READY and returns HAL_OK.
	COMMENT Equivalence Class 33	
	COMMENT </TD>

	ELEMENT

		COMMENT INPUT SECTION:

			--Tested for active low
			--horizontal synchronization polarity
			VAR h_ltdc.Init.HSPolarity,				init = LTDC_HSPOLARITY_AL,										ev = init
			--vertical synchronization polarity
			VAR h_ltdc.Init.VSPolarity,				init = LTDC_VSPOLARITY_AL,										ev = init
			--the data enable polarity.
			VAR h_ltdc.Init.DEPolarity,				init = LTDC_DEPOLARITY_AL,										ev = init
			--pixel clock polarity
			VAR h_ltdc.Init.PCPolarity,				init = LTDC_PCPOLARITY_IPC,										ev = init

			--Tested for minimum values
			VAR h_ltdc.Init.HorizontalSync,			init = 0x000,													ev = init	
			VAR h_ltdc.Init.VerticalSync,			init = 0x000,													ev = init	
			VAR h_ltdc.Init.AccumulatedVBP,			init = 0x000,													ev = init 
			VAR h_ltdc.Init.AccumulatedHBP,			init = 0x000,													ev = init 
			VAR h_ltdc.Init.AccumulatedActiveW,		init = 0x000,													ev = init 
			VAR h_ltdc.Init.AccumulatedActiveH,		init = 0x000,													ev = init 
			VAR h_ltdc.Init.TotalWidth,				init = 0x000,													ev = init
			VAR h_ltdc.Init.TotalHeigh,				init = 0x000,													ev = init
			VAR h_ltdc.Init.Backcolor.Green,		init = 0x00,													ev = init
			VAR h_ltdc.Init.Backcolor.Red,			init = 0x00,													ev = init
			VAR h_ltdc.Init.Backcolor.Blue,			init = 0x00,													ev = init
			
		COMMENT OUTPUT SECTION:

			--Holds return value of HalLtdcInit
			VAR ret_HalLtdcInit,					init = HAL_ERROR,												ev = HAL_OK

			--LTDC lock
			VAR  h_ltdc.Lock,						init = HAL_LOCKED,												ev = HAL_UNLOCKED
			
			--LTDC Error code 
			VAR h_ltdc.ErrorCode,					init = HAL_LTDC_ERROR_TE,										ev = HAL_LTDC_ERROR_NONE

		COMMENT INPUT/OUTPUT SECTION:

			--LTDC state
			VAR h_ltdc.State,						init = HAL_LTDC_STATE_RESET,									ev = HAL_LTDC_STATE_READY

			--LTDC Global Control Register
			VAR h_ltdc.Instance->GCR,				init = 0x00002220,												ev = 0x00002221
			
			--LTDC Synchronization Size Configuration Register
			VAR h_ltdc.Instance->SSCR,				init = 0x00000000,												ev = 0x00000000	

			--LTDC Back Porch Configuration Register
			VAR h_ltdc.Instance->BPCR,				init = 0x00000000,												ev = 0x00000000			

			--LTDC Active Width Configuration Register
			VAR h_ltdc.Instance->AWCR,				init = 0x00000000,												ev = 0x00000000			

			--LTDC Total Width Configuration Register
			VAR h_ltdc.Instance->TWCR,				init = 0x00000000,												ev = 0x00000000			

			--LTDC Background Color Configuration Register
			VAR h_ltdc.Instance->BCCR,				init = 0x00000000,												ev = 0x00000000			
			
			--LTDC Interrupt Enable Register
			VAR h_ltdc.Instance->IER,				init = 0x00000000,												ev = 0x00000006			

		--Stub Calls
		SIMUL

			--Initialize the low level hardware
			STUB HalLtdcMspInit()
			
		END SIMUL

		--Calling unit under test
		#ret_HalLtdcInit = HalLtdcInit(&h_ltdc);
		
	END ELEMENT

END TEST -- TEST 2

TEST 3
FAMILY nominal

	COMMENT Test Description
	COMMENT <TD>
	COMMENT [hdulibstm32f7xxhalltdc-HalLtdcInit-DB-LLR-004]
	COMMENT The function configures the HS, VS, DE and PC polarity as below:
	COMMENT a. sets GCR of Instance of h_ltdc to result of AND operation of GCR of Instance of h_ltdc and negated 
	COMMENT    value of result of bitwise OR operation of (LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL).
	COMMENT b. Set GCR of Instance of h_ltdc to result of bitwise OR operation of GCR of Instance of h_ltdc , HSPolarity of Init 
	COMMENT    of h_ltdc | VSPolarity of Init of h_ltdc | DEPolarity of Init of h_ltdc | PCPolarity of Init of h_ltdc
	COMMENT Equivalence Class None	
	COMMENT
	COMMENT [hdulibstm32f7xxhalltdc-HalLtdcInit-DB-LLR-005]
	COMMENT The function 'HalLtdcInit' sets synchronization size as follows:
	COMMENT 1. sets SSCR of  Instance of h_ltdc to result of bitwise AND operation of SSCR of  Instance of h_ltdc and 
	COMMENT    negated Value of result of bitwise OR operation of LTDC_SSCR_VSH and LTDC_SSCR_HSW.
	COMMENT 2. sets SSCR of  Instance of h_ltdc to result of bitwise OR operation of SSCR of Instance of h_ltdc and result 
	COMMENT    of bitwise OR operation of  HorizontalSync of Init of h_ltdc left shift by SIXTEEN and VerticalSync of Init of h_ltdc
	COMMENT Equivalence Class None	
	COMMENT
	COMMENT [hdulibstm32f7xxhalltdc-HalLtdcInit-DB-LLR-006]
	COMMENT The function 'HalLtdcInit' setS Accumulated Back porch as follows:
	COMMENT 1. sets BPCR of Instance of h_ltdc to result of BPCR of Instance of h_ltdc and negated value of bitwise OR operation 
	COMMENT    of LTDC_BPCR_AVBP and LTDC_BPCR_AHBP.
	COMMENT 2. sets BPCR of Instance of h_ltdc to result of bitwise OR operation of BPCR of Instance of h_ltdc and result of OR 
	COMMENT    operation of AccumulatedHBP of Init of h_ltdc left shifted by SIXTEEN and AccumulatedVBP of Init of h_ltdc
	COMMENT Equivalence Class None	
	COMMENT
	COMMENT [hdulibstm32f7xxhalltdc-HalLtdcInit-DB-LLR-007]
	COMMENT The function 'HalLtdcInit' sets Accumulated Width as follows:
	COMMENT 1.sets AWCR of Instance of h_ltdc to result of AWCR  of Instance of h_ltdc and negated value of bitwise OR operation 
	COMMENT   of LTDC_AWCR_AAH and LTDC_AWCR_AAW.
	COMMENT 2.sets AWCR  of Instance of h_ltdc to result of bitwise OR operation of AWCR of Instance of h_ltdc and result of
	COMMENT   bitwise OR operation of AccumulatedActiveW of Init of h_ltdc left shifted by SIXTEEN and AccumulatedActiveH of Init of h_ltdc.
	COMMENT Equivalence Class None	
	COMMENT
	COMMENT [hdulibstm32f7xxhalltdc-HalLtdcInit-DB-LLR-008]
	COMMENT The function 'HalLtdcInit' sets Total Width as follows:
	COMMENT 1.sets TWCR of Instance of h_ltdc to result of TWCR of Instance of h_ltdc and negated value of bitwise OR operation of
	COMMENT   LTDC_TWCR_TOTALH and LTDC_TWCR_TOTALW.
	COMMENT 2.sets TWCR  of Instance of h_ltdc to result of bitwise OR operation of AWCR of Instance of h_ltdc and result of OR
	COMMENT   operation of TotalWidth of Init of h_ltdc left shifted by SIXTEEN and TotalHeigh of Init of h_ltdc
	COMMENT Equivalence Class None	
	COMMENT
	COMMENT [hdulibstm32f7xxhalltdc-HalLtdcInit-DB-LLR-009]
	COMMENT The function 'HalLtdcInit' sets background color value as follows:
	COMMENT 1.sets BCCR of Instance of h_ltdc to result of bitwise AND opeartion of BCCR of Instance of h_ltdc and negated value
	COMMENT   of bitwise OR operation of (LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED).
	COMMENT 2.sets BCCR of Instance of h_ltdc to result of bitwise AND opeartion of BCCR of Instance of h_ltdc and result of 
	COMMENT   bitwise OR operation of (Red of Backcolor of Init of h_ltdc left shifted by SIXTEEN) bitwise OR (Green of Backcolor
	COMMENT   of Init of h_ltdc ltdc left shifted by EIGHT) bitwise OR (Blue of Backcolor of Init of h_ltdc)
	COMMENT Equivalence Class None	
	COMMENT </TD>

	ELEMENT

		COMMENT INPUT SECTION:

			--Tested for active high
			--horizontal synchronization polarity
			VAR h_ltdc.Init.HSPolarity,				init = LTDC_HSPOLARITY_AH,										ev = init
			--vertical synchronization polarity
			VAR h_ltdc.Init.VSPolarity,				init = LTDC_VSPOLARITY_AH,										ev = init
			--the data enable polarity.
			VAR h_ltdc.Init.DEPolarity,				init = LTDC_DEPOLARITY_AH,										ev = init
			--pixel clock polarity
			VAR h_ltdc.Init.PCPolarity,				init = LTDC_PCPOLARITY_IIPC,									ev = init

			--Tested for maximum values
			VAR h_ltdc.Init.HorizontalSync,			init = 0xFFF,													ev = init	
			VAR h_ltdc.Init.VerticalSync,			init = 0x7FF,													ev = init	
			VAR h_ltdc.Init.AccumulatedVBP,			init = 0x7FF,													ev = init 
			VAR h_ltdc.Init.AccumulatedHBP,			init = 0xFFF,													ev = init 
			VAR h_ltdc.Init.AccumulatedActiveW,		init = 0xFFF,													ev = init 
			VAR h_ltdc.Init.AccumulatedActiveH,		init = 0x7FF,													ev = init 
			VAR h_ltdc.Init.TotalWidth,				init = 0xFFF,													ev = init
			VAR h_ltdc.Init.TotalHeigh,				init = 0x7FF,													ev = init
			VAR h_ltdc.Init.Backcolor.Green,		init = 0xFF,													ev = init
			VAR h_ltdc.Init.Backcolor.Red,			init = 0xFF,													ev = init
			VAR h_ltdc.Init.Backcolor.Blue,			init = 0xFF,													ev = init
			
		COMMENT OUTPUT SECTION:

			--Holds return value of HalLtdcInit
			VAR ret_HalLtdcInit,					init = HAL_ERROR,												ev = HAL_OK

			--LTDC lock
			VAR  h_ltdc.Lock,						init = HAL_LOCKED,												ev = HAL_UNLOCKED
			
			--LTDC Error code 
			VAR h_ltdc.ErrorCode,					init = HAL_LTDC_ERROR_TE,										ev = HAL_LTDC_ERROR_NONE

		COMMENT INPUT/OUTPUT SECTION:

			--LTDC state
			VAR h_ltdc.State,						init = HAL_LTDC_STATE_RESET,									ev = HAL_LTDC_STATE_READY

			--LTDC Global Control Register
			VAR h_ltdc.Instance->GCR,				init = 0x00002220,												ev = 0xF0002221
			
			--LTDC Synchronization Size Configuration Register
			VAR h_ltdc.Instance->SSCR,				init = 0x00000000,												ev = 0x0FFF07FF	

			--LTDC Back Porch Configuration Register
			VAR h_ltdc.Instance->BPCR,				init = 0x00000000,												ev = 0x0FFF07FF			

			--LTDC Active Width Configuration Register
			VAR h_ltdc.Instance->AWCR,				init = 0x00000000,												ev = 0x0FFF07FF			

			--LTDC Total Width Configuration Register
			VAR h_ltdc.Instance->TWCR,				init = 0x00000000,												ev = 0x0FFF07FF			

			--LTDC Background Color Configuration Register
			VAR h_ltdc.Instance->BCCR,				init = 0x00000000,												ev = 0x00FFFFFF			
			
			--LTDC Interrupt Enable Register
			VAR h_ltdc.Instance->IER,				init = 0x00000000,												ev = 0x00000006			

		--Stub Calls
		SIMUL

			--Initialize the low level hardware
			STUB HalLtdcMspInit()
			
		END SIMUL

		--Calling unit under test
		#ret_HalLtdcInit = HalLtdcInit(&h_ltdc);
		
	END ELEMENT

END TEST -- TEST 3

TEST 4
FAMILY nominal

	COMMENT Test Description
	COMMENT <TD>
	COMMENT [hdulibstm32f7xxhalltdc-HalLtdcInit-DB-LLR-004]
	COMMENT The function configures the HS, VS, DE and PC polarity as below:
	COMMENT a. sets GCR of Instance of h_ltdc to result of AND operation of GCR of Instance of h_ltdc and negated 
	COMMENT    value of result of bitwise OR operation of (LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL).
	COMMENT b. Set GCR of Instance of h_ltdc to result of bitwise OR operation of GCR of Instance of h_ltdc , HSPolarity of Init 
	COMMENT    of h_ltdc | VSPolarity of Init of h_ltdc | DEPolarity of Init of h_ltdc | PCPolarity of Init of h_ltdc
	COMMENT Equivalence Class None	
	COMMENT
	COMMENT [hdulibstm32f7xxhalltdc-HalLtdcInit-DB-LLR-005]
	COMMENT The function 'HalLtdcInit' sets synchronization size as follows:
	COMMENT 1. sets SSCR of  Instance of h_ltdc to result of bitwise AND operation of SSCR of  Instance of h_ltdc and 
	COMMENT    negated Value of result of bitwise OR operation of LTDC_SSCR_VSH and LTDC_SSCR_HSW.
	COMMENT 2. sets SSCR of  Instance of h_ltdc to result of bitwise OR operation of SSCR of Instance of h_ltdc and result 
	COMMENT    of bitwise OR operation of  HorizontalSync of Init of h_ltdc left shift by SIXTEEN and VerticalSync of Init of h_ltdc
	COMMENT Equivalence Class None	
	COMMENT
	COMMENT [hdulibstm32f7xxhalltdc-HalLtdcInit-DB-LLR-006]
	COMMENT The function 'HalLtdcInit' setS Accumulated Back porch as follows:
	COMMENT 1. sets BPCR of Instance of h_ltdc to result of BPCR of Instance of h_ltdc and negated value of bitwise OR operation 
	COMMENT    of LTDC_BPCR_AVBP and LTDC_BPCR_AHBP.
	COMMENT 2. sets BPCR of Instance of h_ltdc to result of bitwise OR operation of BPCR of Instance of h_ltdc and result of OR 
	COMMENT    operation of AccumulatedHBP of Init of h_ltdc left shifted by SIXTEEN and AccumulatedVBP of Init of h_ltdc
	COMMENT Equivalence Class None	
	COMMENT
	COMMENT [hdulibstm32f7xxhalltdc-HalLtdcInit-DB-LLR-007]
	COMMENT The function 'HalLtdcInit' sets Accumulated Width as follows:
	COMMENT 1.sets AWCR of Instance of h_ltdc to result of AWCR  of Instance of h_ltdc and negated value of bitwise OR operation 
	COMMENT   of LTDC_AWCR_AAH and LTDC_AWCR_AAW.
	COMMENT 2.sets AWCR  of Instance of h_ltdc to result of bitwise OR operation of AWCR of Instance of h_ltdc and result of
	COMMENT   bitwise OR operation of AccumulatedActiveW of Init of h_ltdc left shifted by SIXTEEN and AccumulatedActiveH of Init of h_ltdc.
	COMMENT Equivalence Class None	
	COMMENT
	COMMENT [hdulibstm32f7xxhalltdc-HalLtdcInit-DB-LLR-008]
	COMMENT The function 'HalLtdcInit' sets Total Width as follows:
	COMMENT 1.sets TWCR of Instance of h_ltdc to result of TWCR of Instance of h_ltdc and negated value of bitwise OR operation of
	COMMENT   LTDC_TWCR_TOTALH and LTDC_TWCR_TOTALW.
	COMMENT 2.sets TWCR  of Instance of h_ltdc to result of bitwise OR operation of AWCR of Instance of h_ltdc and result of OR
	COMMENT   operation of TotalWidth of Init of h_ltdc left shifted by SIXTEEN and TotalHeigh of Init of h_ltdc
	COMMENT Equivalence Class None	
	COMMENT
	COMMENT [hdulibstm32f7xxhalltdc-HalLtdcInit-DB-LLR-009]
	COMMENT The function 'HalLtdcInit' sets background color value as follows:
	COMMENT 1.sets BCCR of Instance of h_ltdc to result of bitwise AND opeartion of BCCR of Instance of h_ltdc and negated value
	COMMENT   of bitwise OR operation of (LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED).
	COMMENT 2.sets BCCR of Instance of h_ltdc to result of bitwise AND opeartion of BCCR of Instance of h_ltdc and result of 
	COMMENT   bitwise OR operation of (Red of Backcolor of Init of h_ltdc left shifted by SIXTEEN) bitwise OR (Green of Backcolor
	COMMENT   of Init of h_ltdc ltdc left shifted by EIGHT) bitwise OR (Blue of Backcolor of Init of h_ltdc)
	COMMENT Equivalence Class None	
	COMMENT </TD>

	ELEMENT

		COMMENT INPUT SECTION:

			--horizontal synchronization polarity
			VAR h_ltdc.Init.HSPolarity,				init = LTDC_HSPOLARITY_AH,										ev = init
			--vertical synchronization polarity
			VAR h_ltdc.Init.VSPolarity,				init = LTDC_VSPOLARITY_AH,										ev = init
			--the data enable polarity.
			VAR h_ltdc.Init.DEPolarity,				init = LTDC_DEPOLARITY_AH,										ev = init
			--pixel clock polarity
			VAR h_ltdc.Init.PCPolarity,				init = LTDC_PCPOLARITY_IIPC,									ev = init

			--Tested for nominal values
			VAR h_ltdc.Init.HorizontalSync,			init = 0x40C,													ev = init	
			VAR h_ltdc.Init.VerticalSync,			init = 0x40C,													ev = init	
			VAR h_ltdc.Init.AccumulatedVBP,			init = 0x40C,													ev = init 
			VAR h_ltdc.Init.AccumulatedHBP,			init = 0x6DE,													ev = init 
			VAR h_ltdc.Init.AccumulatedActiveW,		init = 0x6DE,													ev = init 
			VAR h_ltdc.Init.AccumulatedActiveH,		init = 0x40C,													ev = init 
			VAR h_ltdc.Init.TotalWidth,				init = 0x6DE,													ev = init
			VAR h_ltdc.Init.TotalHeigh,				init = 0x40C,													ev = init
			VAR h_ltdc.Init.Backcolor.Green,		init = 0xAA,													ev = init
			VAR h_ltdc.Init.Backcolor.Red,			init = 0xAA,													ev = init
			VAR h_ltdc.Init.Backcolor.Blue,			init = 0xAA,													ev = init
			
		COMMENT OUTPUT SECTION:

			--Holds return value of HalLtdcInit
			VAR ret_HalLtdcInit,					init = HAL_ERROR,												ev = HAL_OK

			--LTDC lock
			VAR  h_ltdc.Lock,						init = HAL_LOCKED,												ev = HAL_UNLOCKED
			
			--LTDC Error code 
			VAR h_ltdc.ErrorCode,					init = HAL_LTDC_ERROR_TE,										ev = HAL_LTDC_ERROR_NONE

		COMMENT INPUT/OUTPUT SECTION:

			--LTDC state
			VAR h_ltdc.State,						init = HAL_LTDC_STATE_RESET,									ev = HAL_LTDC_STATE_READY

			--LTDC Global Control Register
			VAR h_ltdc.Instance->GCR,				init = 0x00002220,												ev = 0xF0002221
			
			--LTDC Synchronization Size Configuration Register
			VAR h_ltdc.Instance->SSCR,				init = 0x00000000,												ev = 0x040C040C

			--LTDC Back Porch Configuration Register
			VAR h_ltdc.Instance->BPCR,				init = 0x00000000,												ev = 0x06DE040C

			--LTDC Active Width Configuration Register
			VAR h_ltdc.Instance->AWCR,				init = 0x00000000,												ev = 0x06DE040C

			--LTDC Total Width Configuration Register
			VAR h_ltdc.Instance->TWCR,				init = 0x00000000,												ev = 0x06DE040C

			--LTDC Background Color Configuration Register
			VAR h_ltdc.Instance->BCCR,				init = 0x00000000,												ev = 0x00AAAAAA			
			
			--LTDC Interrupt Enable Register
			VAR h_ltdc.Instance->IER,				init = 0x00000000,												ev = 0x00000006			

		--Stub Calls
		SIMUL

			--Initialize the low level hardware
			STUB HalLtdcMspInit()
			
		END SIMUL

		--Calling unit under test
		#ret_HalLtdcInit = HalLtdcInit(&h_ltdc);
		
	END ELEMENT

END TEST -- TEST 4

TEST 5
FAMILY nominal

	COMMENT Test Description
	COMMENT <TD>
	COMMENT [hdulibstm32f7xxhalltdc-HalLtdcInit-DB-LLR-002]
	COMMENT The function 'HalLtdcInit' does nothing when State of h_ltdc is not equal to HAL_LTDC_STATE_RESET 
	COMMENT Equivalence Class 4
	COMMENT </TD>

	ELEMENT

		COMMENT INPUT SECTION:
			
			--LTDC state
			VAR h_ltdc.State,				init = HAL_LTDC_STATE_READY,								ev = init
			
		COMMENT OUTPUT SECTION:

			--return status of HalLtdcInit
			VAR ret_HalLtdcInit,			init = HAL_ERROR,											ev = HAL_OK

		COMMENT INPUT/OUTPUT SECTION:

			--None

		--Stub Calls
		SIMUL

			--No Stubs
			
		END SIMUL

		--Calling unit under test
		#ret_HalLtdcInit = HalLtdcInit(&h_ltdc);
		
	END ELEMENT

END TEST -- TEST 5

END SERVICE -- HalLtdcInit
--------------------------------------------------------------------------------
-- Declaration of the service HalLtdcConfigClut
--------------------------------------------------------------------------------
SERVICE HalLtdcConfigClut
SERVICE_TYPE extern

    -- Tested service parameters declarations
    #T_LTDC_HANDLE h_ltdc;
    #T_UINT32 *p_clut;
    #T_UINT32 clut_size;
    #T_UINT32 layer_idx;
    -- By function returned type declaration
    #T_HAL_STATUS ret_HalLtdcConfigClut;
	#T_LTDC PTU_Instance_2[400];

    #T_UINT32 PTU_p_clut[16];
    
	--Default Variables 
	ENVIRONMENT ENV_HalLtdcConfigClut

        STRUCTURE h_ltdc,		init = { Instance => NIL, Init => { HSPolarity => 0, VSPolarity => 0, DEPolarity => 0, 
        &								 PCPolarity => 0, HorizontalSync => 0, VerticalSync => 0, AccumulatedHBP => 0,
        &								 AccumulatedVBP => 0, AccumulatedActiveW => 0, AccumulatedActiveH
		&								 => 0, TotalWidth => 0, TotalHeigh => 0, Backcolor => { Blue => 0, Green => 0,
		&								 Red => 0, Reserved => 0 } }, LayerCfg => { others => { WindowX0 => 0, 
		&								 WindowX1 => 0, WindowY0 => 0, WindowY1 => 0, PixelFormat => 0, Alpha => 0,
		&								 Alpha0 => 0, BlendingFactor1 => 0, BlendingFactor2 => 0, FBStartAdress => 0,
		&								 ImageWidth => 0, ImageHeight => 0, Backcolor => { Blue => 0, Green => 0, 
		&								 Red => 0, Reserved => 0 } } }, Lock => HAL_UNLOCKED, State => HAL_LTDC_STATE_RESET,
		&								 ErrorCode => 0 },															ev = init
		
        VAR p_clut,				init = &PTU_p_clut[0],																ev = init
        
        VAR clut_size,			init = 0,																			ev = init
        
        VAR layer_idx,			init = 0,																			ev = init
        
        VAR ret_HalLtdcConfigClut,
        &						init = HAL_OK,																		ev = init

	END ENVIRONMENT -- ENV_HalLtdcConfigClut

	USE ENV_HalLtdcConfigClut
	
TEST 1
FAMILY nominal


	COMMENT Test Description
	COMMENT <TD>
	COMMENT [hdulibstm32f7xxhalltdc-HalLtdcConfigClut-DB-LLR-001]
	COMMENT The function 'HalLtdcConfigClut' calls the macro '__HAL_LOCK' with h_ltdc as its parameter 
	COMMENT It sets Lock of h_ltdc to HAL_LOCKED
	COMMENT Equivalence Class 16
	COMMENT
	COMMENT [hdulibstm32f7xxhalltdc-HalLtdcConfigClut-DB-LLR-002]
	COMMENT The function 'HalLtdcConfigClut' sets State of h_ltdc to HAL_LTDC_STATE_BUSY
	COMMENT Equivalence Class None
	COMMENT
	COMMENT [hdulibstm32f7xxhalltdc-HalLtdcConfigClut-DB-LLR-003]
	COMMENT The function 'HalLtdcConfigClut' loops for zero time and does nothing as the clut_size is zero
	COMMENT Equivalence Class None
	COMMENT
	COMMENT [hdulibstm32f7xxhalltdc-HalLtdcConfigClut-DB-LLR-004]
	COMMENT The function 'HalLtdcConfigClut' sets State of h_ltdc to HAL_LTDC_STATE_READY
	COMMENT Equivalence Class None
	COMMENT
	COMMENT [hdulibstm32f7xxhalltdc-HalLtdcConfigClut-DB-LLR-005]
	COMMENT The function calls the macro __HAL_UNLOCK with parameter h_ltdc and returns HAL_OK from the function 
	COMMENT Equivalence Class 19,37
	COMMENT </TD>

	ELEMENT

		COMMENT INPUT SECTION:
			
			
			--Function parameters tested for minimum values
			--the color lookup table size
        	VAR clut_size,						init = 0,														ev = init

			--LTDC Layer index
			VAR layer_idx,						init = 0,														ev = init
			
			--points to the color lookup table 
			VAR p_clut,							init = &PTU_p_clut[0],											ev = init

			ARRAY PTU_p_clut[0..15],			init = 7,														ev = init
			
			-- Holds PixelFormat of LayerCfg with index 0 of h_ltdc 
			VAR h_ltdc.LayerCfg[0].PixelFormat,
			&									init = LTDC_PIXEL_FORMAT_AL44,									ev = init
			
			--Holds Instance of h_ltdc
			VAR h_ltdc.Instance,				init = &PTU_Instance_2,											ev = init
			
		COMMENT OUTPUT SECTION:

			--return status of HalLtdcConfigClut
			VAR ret_HalLtdcConfigClut,			init = HAL_ERROR,												ev = HAL_OK

			--hltdc Lock
			-- Init and exopected value are same as in LLR 'hdulibstm32f7xxhalltdc-HalLtdcConfigClut-DB-LLR-001'
			--Lock will be set to HAL_LOCKED and in LLR 'hdulibstm32f7xxhalltdc-HalLtdcConfigClut-DB-LLR-005' Lock will be set to HAL_UNLOCKED
			VAR h_ltdc.Lock,					init = HAL_UNLOCKED,											ev = HAL_UNLOCKED

		COMMENT INPUT/OUTPUT SECTION:

			--LTDC state
			VAR h_ltdc.State,					init = HAL_LTDC_STATE_TIMEOUT,									ev = HAL_LTDC_STATE_READY
			
		--Stub Calls
		SIMUL

			--No Stubs
			
		END SIMUL

		--Calling unit under test
		#ret_HalLtdcConfigClut = HalLtdcConfigClut(&h_ltdc, p_clut, clut_size, layer_idx);
		
	END ELEMENT

END TEST -- TEST 1

TEST 2
FAMILY nominal


	COMMENT Test Description
	COMMENT <TD>
	COMMENT [hdulibstm32f7xxhalltdc-HalLtdcConfigClut-DB-LLR-001]
	COMMENT The function 'HalLtdcConfigClut' calls the macro '__HAL_LOCK' with h_ltdc as its parameter 
	COMMENT It sets Lock of h_ltdc to HAL_LOCKED
	COMMENT Equivalence Class 16
	COMMENT
	COMMENT [hdulibstm32f7xxhalltdc-HalLtdcConfigClut-DB-LLR-002]
	COMMENT The function 'HalLtdcConfigClut' sets State of h_ltdc to HAL_LTDC_STATE_BUSY
	COMMENT Equivalence Class None
	COMMENT
	COMMENT [hdulibstm32f7xxhalltdc-HalLtdcConfigClut-DB-LLR-003]
	COMMENT The function 'HalLtdcConfigClut' loops for one time and does the following as the clut_size is one
	COMMENT 1.sets CLUTWR of LTDC_LAYER with parameter h_ltdc and layer_idx result of ( Result of sum of index and index 
	COMMENT   multiplied with SIXTEEN left shifted by TWENTY_FOUR) bitwise OR ( Result of bitwise AND operation of content
	COMMENT   of p_clut and EXTRACT_FIRST_BYTE) bitwise OR (Result of bitwise AND operation of content of p_clut and 
	COMMENT   EXTRACT_SECOND_BYTE) bitwise OR ( Result of bitwise AND operation of content of p_clut and EXTRACT_THIRD_BYTE) when 
	COMMENT   PixelFormat of LayerCfg with index layer_idx of h_ltdc is equal to LTDC_PIXEL_FORMAT_AL44 
	COMMENT 2.Set counter to sum of p_clut and  sizeof content of p_clut.
	COMMENT 3.Set p_clut to counter.
	COMMENT Equivalence Class 17
	COMMENT
	COMMENT [hdulibstm32f7xxhalltdc-HalLtdcConfigClut-DB-LLR-004]
	COMMENT The function 'HalLtdcConfigClut' sets State of h_ltdc to HAL_LTDC_STATE_READY
	COMMENT Equivalence Class None
	COMMENT
	COMMENT [hdulibstm32f7xxhalltdc-HalLtdcConfigClut-DB-LLR-005]
	COMMENT The function 'HalLtdcConfigClut' calls the macro '__HAL_UNLOCK' with parameter h_ltdc and returns HAL_OK
	COMMENT Equivalence Class 16,37
	COMMENT </TD>

	ELEMENT

		COMMENT INPUT SECTION:
			
			
			--Function parameters tested for nominal values
			--the color lookup table size
        	VAR clut_size,						init = 1,														ev = init

			--LTDC Layer index
			VAR layer_idx,						init = 1,														ev = init
			
			--points to the color lookup table 
			VAR p_clut,							init = &PTU_p_clut[0],											ev = init
			
			ARRAY PTU_p_clut,					init ={0=>0x00000012,others=>0x0000FFFF},						ev = init

			-- Holds PixelFormat of LayerCfg with index 1 of h_ltdc 
			VAR h_ltdc.LayerCfg[1].PixelFormat,
			&									init = LTDC_PIXEL_FORMAT_AL44,									ev = init

			--Holds Instance of h_ltdc
			VAR h_ltdc.Instance,				init = &PTU_Instance_2,											ev = init
			
		COMMENT OUTPUT SECTION:


			--Holds CLUTWR of PTU_Instance_2 value		
			VAR ((T_LTDC_LAYER *)((T_UINT32)((T_UINT32)&PTU_Instance_2+0x84+0x80)))->CLUTWR,
			&									init = 0x00000000,												ev = 0x00000012
			
			--return status of HalLtdcConfigClut
			VAR ret_HalLtdcConfigClut,			init = HAL_ERROR,												ev = HAL_OK

			--hltdc Lock
			-- Init and exopected value are same as in LLR 'hdulibstm32f7xxhalltdc-HalLtdcConfigClut-DB-LLR-001'
			--Lock will be set to HAL_LOCKED when Lock is other than HAL_LOCKED and in LLR 'hdulibstm32f7xxhalltdc-HalLtdcConfigClut-DB-LLR-005'
			--Lock will be set to HAL_UNLOCKED
			VAR h_ltdc.Lock,					init = HAL_UNLOCKED,											ev = HAL_UNLOCKED
			
		COMMENT INPUT/OUTPUT SECTION:

			--LTDC state
			VAR h_ltdc.State,					init = HAL_LTDC_STATE_TIMEOUT,									ev = HAL_LTDC_STATE_READY
			
		--Stub Calls
		SIMUL

			--No Stubs
			
		END SIMUL

		--Calling unit under test
		#ret_HalLtdcConfigClut = HalLtdcConfigClut(&h_ltdc, p_clut, clut_size, layer_idx);
		
	END ELEMENT

END TEST -- TEST 2

TEST 3
FAMILY nominal


	COMMENT Test Description
	COMMENT <TD>
	COMMENT [hdulibstm32f7xxhalltdc-HalLtdcConfigClut-DB-LLR-003]
	COMMENT The function 'HalLtdcConfigClut' loops for two times and does the following as the clut_size is two
	COMMENT 1.sets CLUTWR of LTDC_LAYER with parameter h_ltdc and layer_idx result of ( Result of sum of index and index 
	COMMENT   multiplied with SIXTEEN left shifted by TWENTY_FOUR) bitwise OR ( Result of bitwise AND operation of content
	COMMENT   of p_clut and EXTRACT_FIRST_BYTE) bitwise OR (Result of bitwise AND operation of content of p_clut and 
	COMMENT   EXTRACT_SECOND_BYTE) bitwise OR ( Result of bitwise AND operation of content of p_clut and EXTRACT_THIRD_BYTE) when 
	COMMENT   PixelFormat of LayerCfg with index layer_idx of h_ltdc is equal to LTDC_PIXEL_FORMAT_AL44 
	COMMENT 2.Set counter to sum of p_clut and  sizeof content of p_clut.
	COMMENT 3.Set p_clut to counter.
	COMMENT Equivalence Class 17
	COMMENT </TD>

	ELEMENT

		COMMENT INPUT SECTION:
			
			
			--Function parameters tested for nominal values
			--the color lookup table size
        	VAR clut_size,						init = 2,														ev = init

			--LTDC Layer index
			VAR layer_idx,						init = 1,														ev = init
			
			--points to the color lookup table 
			VAR p_clut,							init = &PTU_p_clut[0],											ev = init
			
			ARRAY PTU_p_clut,					init ={1=>0x00000000,others=>0x0000FFFF},						ev = init

			-- Holds PixelFormat of LayerCfg with index 1 of h_ltdc 
			VAR h_ltdc.LayerCfg[1].PixelFormat,
			&									init = LTDC_PIXEL_FORMAT_AL44,									ev = init

			--Holds Instance of h_ltdc
			VAR h_ltdc.Instance,				init = &PTU_Instance_2,											ev = init
			
		COMMENT OUTPUT SECTION:


			--Holds CLUTWR of PTU_Instance_2 value
			VAR ((T_LTDC_LAYER *)((T_UINT32)((T_UINT32)&PTU_Instance_2+0x84+0x80)))->CLUTWR,			
			&									init = 0x00000000,												ev = 0x11000000
			
			--return status of HalLtdcConfigClut
			VAR ret_HalLtdcConfigClut,			init = HAL_ERROR,												ev = HAL_OK

			--hltdc Lock
			-- Init and exopected value are same as in LLR 'hdulibstm32f7xxhalltdc-HalLtdcConfigClut-DB-LLR-001'
			--Lock will be set to HAL_LOCKED when Lock is other than HAL_LOCKED and in LLR 'hdulibstm32f7xxhalltdc-HalLtdcConfigClut-DB-LLR-005'
			--Lock will be set to HAL_UNLOCKED
			VAR h_ltdc.Lock,					init = HAL_UNLOCKED,											ev = HAL_UNLOCKED

		COMMENT INPUT/OUTPUT SECTION:

			--LTDC state
			VAR h_ltdc.State,					init = HAL_LTDC_STATE_TIMEOUT,									ev = HAL_LTDC_STATE_READY
			
		--Stub Calls
		SIMUL

			--No Stubs
			
		END SIMUL

		--Calling unit under test
		#ret_HalLtdcConfigClut = HalLtdcConfigClut(&h_ltdc, p_clut, clut_size, layer_idx);
		
	END ELEMENT

END TEST -- TEST 3


TEST 4
FAMILY nominal


	COMMENT Test Description
	COMMENT <TD>
	COMMENT [hdulibstm32f7xxhalltdc-HalLtdcConfigClut-DB-LLR-003]
	COMMENT The function 'HalLtdcConfigClut' loops for one time and does the following as the clut_size is one:
	COMMENT 1. sets CLUTWR of LTDC_LAYER with parameter h_ltdc and layer_idx result of ( Index left shifted by TWENTY_FOUR) 
	COMMENT    bitwise OR ( Result of bitwise AND operation of content of p_clut and EXTRACT_FIRST_BYTE) bitwise OR 
	COMMENT    (Result of bitwise AND operation of content of p_clut and EXTRACT_SECOND_BYTE) bitwise OR (Result of bitwise
	COMMENT    AND operation of content of p_clut and EXTRACT_THIRD_BYTE) when PixelFormat of LayerCfg with index layer_idx 
	COMMENT    of h_ltdc is not equal to LTDC_PIXEL_FORMAT_AL44 
	COMMENT 2.Set counter to sum of p_clut and  sizeof content of p_clut.
	COMMENT 3.Set p_clut to counter.
	COMMENT Equivalence Class 18
	COMMENT </TD>

	ELEMENT

		COMMENT INPUT SECTION:
			
			
			--Function parameters tested for nominal values
			--the color lookup table size
        	VAR clut_size,						init = 1,														ev = init

			--LTDC Layer index
			VAR layer_idx,						init = 1,														ev = init
			
			--points to the color lookup table 
			VAR p_clut,							init = &PTU_p_clut[0],											ev = init
			
			ARRAY PTU_p_clut,					init ={0=>0xFFFFFFFF,others=>0x0000FFFF},						ev = init

			-- Holds PixelFormat of LayerCfg with index 1 of h_ltdc 
			VAR h_ltdc.LayerCfg[1].PixelFormat,
			&									init = LTDC_PIXEL_FORMAT_L8,									ev = init

			--Holds Instance of h_ltdc
			VAR h_ltdc.Instance,				init = &PTU_Instance_2,											ev = init

			
		COMMENT OUTPUT SECTION:

			--Holds CLUTWR of PTU_Instance_2 value
			VAR ((T_LTDC_LAYER *)((T_UINT32)((T_UINT32)&PTU_Instance_2+0x84+0x80)))->CLUTWR,		
			&									init = 0x00000000,												ev = 0x00FFFFFF
			
			--return status of HalLtdcConfigClut
			VAR ret_HalLtdcConfigClut,			init = HAL_ERROR,												ev = HAL_OK

			--hltdc Lock
			-- Init and exopected value are same as in LLR 'hdulibstm32f7xxhalltdc-HalLtdcConfigClut-DB-LLR-001'
			--Lock will be set to HAL_LOCKED when Lock is other than HAL_LOCKED and in LLR 'hdulibstm32f7xxhalltdc-HalLtdcConfigClut-DB-LLR-005'
			--Lock will be set to HAL_UNLOCKED
			VAR h_ltdc.Lock,					init = HAL_UNLOCKED,											ev = HAL_UNLOCKED

		COMMENT INPUT/OUTPUT SECTION:

			--LTDC state
			VAR h_ltdc.State,					init = HAL_LTDC_STATE_TIMEOUT,									ev = HAL_LTDC_STATE_READY
			
		--Stub Calls
		SIMUL

			--No Stubs
			
		END SIMUL

		--Calling unit under test
		#ret_HalLtdcConfigClut = HalLtdcConfigClut(&h_ltdc, p_clut, clut_size, layer_idx);
		
	END ELEMENT

END TEST -- TEST 4

TEST 5
FAMILY nominal


	COMMENT Test Description
	COMMENT <TD>
	COMMENT [hdulibstm32f7xxhalltdc-HalLtdcConfigClut-DB-LLR-001]
	COMMENT The function 'HalLtdcConfigClut' calls the macro '__HAL_LOCK' with h_ltdc as its parameter 
	COMMENT The function returns HAL_BUSY when Lock of HAL_OK is HAL_LOCKED
	COMMENT Equivalence Class 16
	COMMENT </TD>

	ELEMENT

		COMMENT INPUT SECTION:
			
			
			--Function parameters tested for nominal values
			--the color lookup table size
        	VAR clut_size,						init = 1,														ev = init

			--LTDC Layer index
			VAR layer_idx,						init = 1,														ev = init
			
			--hltdc Lock
			VAR h_ltdc.Lock,					init = HAL_LOCKED,												ev = init
			
		COMMENT OUTPUT SECTION:

			--return status of HalLtdcConfigClut
			VAR ret_HalLtdcConfigClut,			init = HAL_ERROR,												ev = HAL_BUSY

		COMMENT INPUT/OUTPUT SECTION:

			--None
			
		--Stub Calls
		SIMUL

			--No Stubs
			
		END SIMUL

		--Calling unit under test
		#ret_HalLtdcConfigClut = HalLtdcConfigClut(&h_ltdc, p_clut, clut_size, layer_idx);
		
	END ELEMENT

END TEST -- TEST 5

--TEST 6
--FAMILY robustness
--
--	COMMENT Test Description
--	COMMENT <TD>
--	COMMENT [hdulibstm32f7xxhalltdc-HalLtdcConfigClut-DB-LLR-001]
--	COMMENT This test case is written to test function parameter h_ltdc for NULL
--	COMMENT Equivalence Class 38
--	COMMENT </TD>
--
--	ELEMENT
--
--		COMMENT INPUT SECTION:
--						
--			--None
--			
--		COMMENT OUTPUT SECTION:
--
--			--None
--			
--		COMMENT INPUT/OUTPUT SECTION:
--
--			--None
--			
--		--Stub Calls
--		SIMUL
--
--			--No Stubs
--			
--		END SIMUL
--
--		--Calling unit under test
--		#ret_HalLtdcConfigClut = HalLtdcConfigClut(NULL, p_clut, clut_size, layer_idx);
--		
--	END ELEMENT
--
--END TEST -- TEST 6

--TEST 7
--FAMILY robustness
--
--	COMMENT Test Description
--	COMMENT <TD>
--	COMMENT [hdulibstm32f7xxhalltdc-HalLtdcConfigClut-DB-LLR-001]
--	COMMENT The function 'HalLtdcConfigClut' calls the macro '__HAL_LOCK' with h_ltdc as its parameter 
--	COMMENT It sets Lock of h_ltdc to HAL_LOCKED
--	COMMENT Equivalence Class 16
--	COMMENT
--	COMMENT [hdulibstm32f7xxhalltdc-HalLtdcConfigClut-DB-LLR-003]
--	COMMENT This test case is written to test function parameter p_clut for NULL
--	COMMENT Equivalence Class 39
--	COMMENT </TD>
--
--	ELEMENT
--
--		COMMENT INPUT SECTION:
--			
--			
--			--Function parameters tested for minimum values
--			--the color lookup table size
--        	VAR clut_size,						init = 1,														ev = init
--			
--		COMMENT OUTPUT SECTION:
--
--			--hltdc Lock
--			-- Init and exopected value are same as in LLR 'hdulibstm32f7xxhalltdc-HalLtdcConfigClut-DB-LLR-001'
--			--Lock will be set to HAL_LOCKED and in LLR 'hdulibstm32f7xxhalltdc-HalLtdcConfigClut-DB-LLR-005' Lock will be set to HAL_UNLOCKED
--			VAR h_ltdc.Lock,					init = HAL_UNLOCKED,											ev = HAL_UNLOCKED
--
--		COMMENT INPUT/OUTPUT SECTION:
--
--			--None
--			
--		--Stub Calls
--		SIMUL
--
--			--No Stubs
--			
--		END SIMUL
--
--		--Calling unit under test
--		#ret_HalLtdcConfigClut = HalLtdcConfigClut(&h_ltdc, NULL, clut_size, layer_idx);
--		
--	END ELEMENT
--
--END TEST -- TEST 7

END SERVICE -- HalLtdcConfigClut
--------------------------------------------------------------------------------
-- Declaration of the service HalLtdcConfigLayer
--------------------------------------------------------------------------------
SERVICE HalLtdcConfigLayer
SERVICE_TYPE extern

    -- Tested service parameters declarations
    #T_LTDC_HANDLE h_ltdc;
    #T_LTDC_LAYERCFG p_layer_cfg;
    #T_UINT32 layer_idx;
    -- By function returned type declaration
    #T_HAL_STATUS ret_HalLtdcConfigLayer;
	--Temporary variable created to pass address to structure 'Instance' of 'h_ltdc'
    #T_LTDC PTU_Instance_2[400];
    
	--Default Variables 
	ENVIRONMENT ENV_HalLtdcConfigLayer
	
        STRUCTURE h_ltdc,			init = { Instance => NIL, Init => { HSPolarity => 0, VSPolarity => 0, DEPolarity => 0, 
        &								PCPolarity => 0, HorizontalSync => 0, VerticalSync => 0, AccumulatedHBP => 0, 
        &								AccumulatedVBP => 0, AccumulatedActiveW => 0, AccumulatedActiveH => 0, TotalWidth => 0,
        &								TotalHeigh => 0, Backcolor => { Blue => 0, Green => 0, Red => 0, Reserved => 0 } }, 
        &								LayerCfg => { others => { WindowX0 => 0, WindowX1 => 0, WindowY0 => 0, WindowY1 => 0, 
        &								PixelFormat => 0, Alpha => 0, Alpha0 => 0, BlendingFactor1 => 0, BlendingFactor2
		&								=> 0, FBStartAdress => 0, ImageWidth => 0, ImageHeight => 0, Backcolor => { Blue => 0, 
		&								Green => 0, Red => 0, Reserved => 0 } } }, Lock => HAL_UNLOCKED, State => HAL_LTDC_STATE_RESET,
		&								ErrorCode => 0 },										ev = init
		
        STRUCTURE p_layer_cfg,		init = { WindowX0 => 0, WindowX1 => 0, WindowY0 => 0, WindowY1 => 0, PixelFormat => 0,
        &									 Alpha => 0, Alpha0 => 0, BlendingFactor1 => 0, BlendingFactor2 => 0, FBStartAdress => 0, 
        &									ImageWidth => 0, ImageHeight => 0, Backcolor => { Blue => 0, Green => 0, Red => 0,
        &									Reserved => 0 } },									ev = init
        
        VAR layer_idx,				init = 0,													ev = init
        
        VAR ret_HalLtdcConfigLayer,	init = HAL_OK,												ev = init

	END ENVIRONMENT -- ENV_HalLtdcConfigLayer

	USE ENV_HalLtdcConfigLayer
	
TEST 1
FAMILY nominal

	COMMENT Test Description
	COMMENT <TD>
	COMMENT [hdulibstm32f7xxhalltdc-HalLtdcConfigLayer-DB-LLR-001]
	COMMENT The function 'HalLtdcConfigLayer' calls the macro '__HAL_LOCK' with h_ltdc as its parameter 
	COMMENT Equivalence Class 8
	COMMENT
	COMMENT [hdulibstm32f7xxhalltdc-HalLtdcConfigLayer-DB-LLR-002]
	COMMENT The function 'HalLtdcConfigLayer' sets State of h_ltdc to HAL_LTDC_STATE_BUSY
	COMMENT Equivalence Class None
	COMMENT
	COMMENT [hdulibstm32f7xxhalltdc-HalLtdcConfigLayer-DB-LLR-003]
	COMMENT The function 'HalLtdcConfigLayer' set LayerCfg with index layer_idx of h_ltdc to content of p_layer_cfg
	COMMENT Equivalence Class None
	COMMENT
	COMMENT [hdulibstm32f7xxhalltdc-HalLtdcConfigLayer-DB-LLR-004]
	COMMENT The function 'HalLtdcConfigLayer' calls the function 'LtdcSetConfig' with h_ltdc, p_layer_cfg and layer_idx as its parameters
	COMMENT Equivalence Class 10
	COMMENT
	COMMENT [hdulibstm32f7xxhalltdc-HalLtdcConfigLayer-DB-LLR-005]
	COMMENT The function 'HalLtdcConfigLayer' sets SRCR of Instance of h_ltdc to LTDC_SRCR_IMR
	COMMENT Equivalence Class None
	COMMENT
	COMMENT [hdulibstm32f7xxhalltdc-HalLtdcConfigLayer-DB-LLR-006]
	COMMENT The function 'HalLtdcConfigLayer' sets State of h_ltdc to HAL_LTDC_STATE_READY
	COMMENT Equivalence Class None
	COMMENT 
	COMMENT [hdulibstm32f7xxhalltdc-HalLtdcConfigLayer-DB-LLR-007]
	COMMENT The function 'HalLtdcConfigLayer' calls the macro '__HAL_UNLOCK' with parameter h_ltdc and returns HAL_OK.
	COMMENT Equivalence Class 9,34
	COMMENT </TD>
	
	ELEMENT

		COMMENT INPUT SECTION:
			
			--LTDC Layer index
			VAR layer_idx,							init = 0,													ev = init 
			
			--holds members of structure h_ltdc
			VAR h_ltdc.Instance,					init = &PTU_Instance_2,										ev = init
			
		COMMENT OUTPUT SECTION:

			--LTDC state
			VAR h_ltdc.State,					init = HAL_LTDC_STATE_RESET,									ev = HAL_LTDC_STATE_READY
			
			--return status of HalLtdcConfigLayer
			VAR ret_HalLtdcConfigLayer,			init = HAL_ERROR,												ev = HAL_OK

			--LTDC Layers parameters 
			STRUCTURE h_ltdc.LayerCfg,			init = { others => { WindowX0 =>0x001, WindowX1 => 0x001, WindowY0 => 0x001, WindowY1 => 0x001, 
			&											PixelFormat =>LTDC_PIXEL_FORMAT_RGB888, Alpha => 0x01, Alpha0 =>0x01,
			&											BlendingFactor1 =>LTDC_BLENDING_FACTOR1_PAXCA, BlendingFactor2=> LTDC_BLENDING_FACTOR2_PAXCA,
			&											 FBStartAdress => 0x00000001, ImageWidth =>0x0001, 
			&											ImageHeight => 0x001, Backcolor => 
			&											{ Blue => 0x01, Green => 0x01, Red => 0x01, Reserved => 0xFF } } },	
			&ev = { 0 => { WindowX0 =>0x000, WindowX1 => 0x000, WindowY0 => 0x000, WindowY1 => 0x000, 
			&											PixelFormat =>LTDC_PIXEL_FORMAT_ARGB8888, Alpha => 0x00, Alpha0 =>0x00,
			&											BlendingFactor1 =>LTDC_BLENDING_FACTOR1_CA, BlendingFactor2
			&											=> LTDC_BLENDING_FACTOR2_CA, FBStartAdress => 0x00000000, ImageWidth =>0x0000,
			&											ImageHeight => 0x000, Backcolor => 
			&											{ Blue => 0x00, Green => 0x00, Red => 0, Reserved => 0xFF } },
			&		1=>{ WindowX0 =>0x001, WindowX1 => 0x001, WindowY0 => 0x001, WindowY1 => 0x001, 
			&											PixelFormat =>LTDC_PIXEL_FORMAT_RGB888, Alpha => 0x01, Alpha0 =>0x01,
			&											BlendingFactor1 =>LTDC_BLENDING_FACTOR1_PAXCA, BlendingFactor2
			&											=> LTDC_BLENDING_FACTOR2_PAXCA, FBStartAdress => 0x00000001, ImageWidth =>0x0001, 
			&											ImageHeight => 0x001, Backcolor => 
			&											{ Blue => 0x01, Green => 0x01, Red => 0x01, Reserved => 0xFF } } }
			
			--Holds the Reload type
			VAR h_ltdc.Instance->SRCR,			init = 0x00000000,												ev = LTDC_SRCR_IMR	
						
		COMMENT INPUT/OUTPUT SECTION:

			--Tested for minimum values
			STRUCTURE p_layer_cfg,					init = { WindowX0 => 0x000, WindowX1 =>0x000, WindowY0 =>0x000, WindowY1 =>0x000, 
			&												PixelFormat => LTDC_PIXEL_FORMAT_ARGB8888, Alpha =>0x00, Alpha0 =>0x00, 
			&												BlendingFactor1 => LTDC_BLENDING_FACTOR1_CA, BlendingFactor2
			&												=>LTDC_BLENDING_FACTOR2_CA, FBStartAdress =>0x00000000, ImageWidth =>0x0000,
															&ImageHeight =>0x000, Backcolor => 
			&												{ Blue =>0x00, Green => 0x00, Red =>0x00, Reserved => 0xFF } } ,	
			&																									
			&ev = { WindowX0 => 0x000, WindowX1 =>0x000, WindowY0 =>0x000, WindowY1 =>0x000, 
			&												PixelFormat => LTDC_PIXEL_FORMAT_ARGB8888, Alpha =>0x00, Alpha0 =>0x00,
			&												BlendingFactor1 => LTDC_BLENDING_FACTOR1_CA, BlendingFactor2
			&												=>LTDC_BLENDING_FACTOR2_CA, FBStartAdress =>0x00000000, ImageWidth =>0x0000,
			&												ImageHeight =>0x000, Backcolor => 
			&												{ Blue =>0x00, Green => 0x00, Red =>0x00, Reserved => 0xFF } } 

			--LTDC Lock(Expected and initialised values are same because, in LLR 'hdulibstm32f7xxhalltdc-HalLtdcConfigLayer-DB-LLR-001'
			--Lock will be set to HAL_LOCKED and in LLR 'hdulibstm32f7xxhalltdc-HalLtdcConfigLayer-DB-LLR-007' Lock will be set to HAL_UNLOCKED)			
			VAR h_ltdc.Lock,						init = HAL_UNLOCKED,										ev = HAL_UNLOCKED
			
		--Stub Calls
		SIMUL

			--No Stubs
			
		END SIMUL

		--Calling unit under test		
		#ret_HalLtdcConfigLayer = HalLtdcConfigLayer(&h_ltdc, &p_layer_cfg, layer_idx);

	END ELEMENT

END TEST -- TEST 1

TEST 2
FAMILY nominal

	COMMENT Test Description
	COMMENT <TD>
	COMMENT [hdulibstm32f7xxhalltdc-HalLtdcConfigLayer-DB-LLR-001]
	COMMENT The function 'HalLtdcConfigLayer' calls the macro '__HAL_LOCK' with h_ltdc as its parameter 
	COMMENT The function 'HalLtdcConfigLayer' returns HAL_BUSY when Lock of h_ltdc is HAL_LOCKED
	COMMENT Equivalence Class 8
	COMMENT </TD>
	
	ELEMENT

		COMMENT INPUT SECTION:
			
			--LTDC Layer index
			VAR layer_idx,							init = 1,													ev = init 
			
			--holds members of structure h_ltdc
			VAR h_ltdc.Instance,					init = &PTU_Instance_2,										ev = init
			
			VAR h_ltdc.Lock,						init = HAL_LOCKED,											ev = init
			
		COMMENT OUTPUT SECTION:
			
			--return status of HalLtdcConfigLayer
			VAR ret_HalLtdcConfigLayer,				init = HAL_ERROR,											ev = HAL_BUSY	
			
		COMMENT INPUT/OUTPUT SECTION:

			--None

		--Stub Calls
		SIMUL

			--No Stubs
			
		END SIMUL

		--Calling unit under test		
		#ret_HalLtdcConfigLayer = HalLtdcConfigLayer(&h_ltdc, &p_layer_cfg, layer_idx);

	END ELEMENT

END TEST -- TEST 2


TEST 3
FAMILY nominal

	COMMENT Test Description
	COMMENT <TD>
	COMMENT [hdulibstm32f7xxhalltdc-HalLtdcConfigLayer-DB-LLR-004]
	COMMENT The function 'HalLtdcConfigLayer' calls the function 'LtdcSetConfig' with h_ltdc, p_layer_cfg and layer_idx as its parameters
	COMMENT Equivalence Class 10
	COMMENT
	COMMENT [hdulibstm32f7xxhalltdc-LtdcSetConfig-DB-LLR-001]
	COMMENT The function 'LtdcSetConfig' does the following:
	COMMENT 1. sets temporary variable to result of (( WindowX1 of p_layer_cfg)+(Result of AND operation bit of BPCR of Instance of
	COMMENT    h_ltdc and LTDC_BPCR_AHBP Right shifted by SIXTEEN)) left shift by SIXTEEN
	COMMENT 2. sets bit WHPCR of LTDC_LAYER with parameters h_ltdc and layer_idx to result of bitwise AND operation bit of 
	COMMENT    WHPCR of LTDC_LAYER with parameters h_ltdc and layer_idx and negated result of bitwise OR operation of 
	COMMENT    LTDC_LXWHPCR_WHSTPOS and LTDC_LXWHPCR_WHSPPOS.
	COMMENT 3. sets bit WHPCR of LTDC_LAYER with parameters h_ltdc and layer_idx to result of bitwise OR operation of 
	COMMENT    (sum of WindowX0 of p_layer_cfg and ONE and result of bitwise AND operation of register BPCR of Instance of h_ltdc 
	COMMENT    and LTDC_BPCR_AHBP right shifted by SIXTEEN) and temporary variable
	COMMENT Equivalence Class None
	COMMENT
	COMMENT [hdulibstm32f7xxhalltdc-LtdcSetConfig-DB-LLR-002]
	COMMENT The function 'LtdcSetConfig' 
	COMMENT 1. sets temporary variable to result of ((WindowY1 of p_layer_cfg)+(Result of AND operation of register BPCR of Instance 
	COMMENT    of h_ltdc and LTDC_BPCR_AVBP left shifted by SIXTEEN)) left shift by SIXTEEN
	COMMENT 2. sets bit WVPCR of LTDC_LAYER with parameters h_ltdc and layer_idx to result of bitwise AND operation bit of 
	COMMENT    WVPCR of LTDC_LAYER with parameters h_ltdc and layer_idx and negated result of bitwise OR operation of
	COMMENT    LTDC_LXWVPCR_WVSTPOS and LTDC_LXWVPCR_WVSPPOS.
	COMMENT 3. sets bit WVPCR of LTDC_LAYER with parameters h_ltdc and layer_idx to result of bitwise OR operation of
	COMMENT    (sum of WindowY0 of p_layer_cfg and ONE and result of bitwise AND operation of register BPCR of Instance of 
	COMMENT    h_ltdc and LTDC_BPCR_AVBP) and temporary variable,
	COMMENT Equivalence Class None
	COMMENT 
	COMMENT [hdulibstm32f7xxhalltdc-LtdcSetConfig-DB-LLR-003]
	COMMENT The function 'LtdcSetConfig' does the following to specify the pixel format:
	COMMENT 1. sets bit PFCR of LTDC_LAYER with parameter h_ltdc and layer_idx to result of AND operation bit of PFCR of LTDC_LAYER
	COMMENT    with parameter h_ltdc and layer_idx and negated value of LTDC_LXPFCR_PF.
	COMMENT 2. sets bit PFCR of LTDC_LAYER with parameter h_ltdc and layer_idx to PixelFormat of p_layer_cfg.
	COMMENT Equivalence Class None
	COMMENT
	COMMENT [hdulibstm32f7xxhalltdc-LtdcSetConfig-DB-LLR-004]
	COMMENT The function 'LtdcSetConfig' does the following to configure the default color values.
	COMMENT 1. sets bit DCCR of LTDC_LAYER with parameter h_ltdc and layer_idx to result of bitwise AND operation of DCCR of 
	COMMENT    LTDC_LAYER with parameter h_ltdc and layer_idx and negated result of bitwise OR operation of LTDC_LXDCCR_DCBLUE
	COMMENT    | LTDC_LXDCCR_DCGREEN | LTDC_LXDCCR_DCRED | LTDC_LXDCCR_DCALPHA).
	COMMENT 2. sets bit DCCR of LTDC_LAYER with parameter h_ltdc and layer_idx to result of (Blue of Backcolor of p_layer_cfg) 
	COMMENT    bitwise OR (Green of Backcolor of p_layer_cfg left shift by EIGHT) bitwise OR (Red of Backcolor of p_layer_cfg 
	COMMENT    left shift by SIXTEEN) bitwise OR (Alpha0 of p_layer_cfg left shifted by TWENTY_FOUR)
	COMMENT Equivalence Class None
	COMMENT
	COMMENT [hdulibstm32f7xxhalltdc-LtdcSetConfig-DB-LLR-005]
	COMMENT The function 'LtdcSetConfig' does the following to specify constant alpha value:
	COMMENT 1. sets bit CACR of LTDC_LAYER with parameter h_ltdc and layer_idx to result of AND operation bit of CACR of
	COMMENT    LTDC_LAYER with parameter h_ltdc and layer_idx and negated value of LTDC_LXCACR_CONSTA.
	COMMENT 2. sets bit CACR of LTDC_LAYER with parameter h_ltdc and layer_idx to Alpha of p_layer_cfg.
	COMMENT Equivalence Class None
	COMMENT 
	COMMENT [hdulibstm32f7xxhalltdc-LtdcSetConfig-DB-LLR-006]
	COMMENT The function 'LtdcSetConfig' does the following to specify blending factors:
	COMMENT 1. sets bit BFCR of LTDC_LAYER with parameter h_ltdc and layer_idx to result of bitwise AND operation bit of BFCR
	COMMENT    of LTDC_LAYER with parameter h_ltdc and layer_id and negated result of LTDC_LXBFCR_BF2 OR LTDC_LXBFCR_BF1.
	COMMENT 2. sets bit BFCR of LTDC_LAYER with parameter h_ltdc and layer_idx to result of bitwise OR operation of BlendingFactor1
	COMMENT    of p_layer_cfg and BlendingFactor2 of p_layer_cfg.
	COMMENT Equivalence Class
	COMMENT	
	COMMENT [hdulibstm32f7xxhalltdc-LtdcSetConfig-DB-LLR-007]
	COMMENT The function 'LtdcSetConfig' does the following to configure the color frame buffer start address.
	COMMENT 1. sets bit CFBAR of LTDC_LAYER with parameter h_ltdc and layer_idx to result of bitwise AND operation bit of CFBAR
	COMMENT    of LTDC_LAYER with parameter h_ltdc and layer_idx and LTDC_LXCFBAR_CFBADD.
	COMMENT 2. sets bit CFBAR of LTDC_LAYER with parameter h_ltdc and layer_idx to FBStartAdress of p_layer_cfg. 
	COMMENT Equivalence Class None
	COMMENT	
	COMMENT [hdulibstm32f7xxhalltdc-LtdcSetConfig-DB-LLR-008]
	COMMENT The function 'LtdcSetConfig' sets temporary variable to FOUR when PixelFormat of p_layer_cfg is equal to 
	COMMENT LTDC_PIXEL_FORMAT_ARGB8888
	COMMENT Equivalence Class 20
	COMMENT
	COMMENT [hdulibstm32f7xxhalltdc-LtdcSetConfig-DB-LLR-012]
	COMMENT The function 'LtdcSetConfig' does the following to configure the color frame buffer pitch in byte.
	COMMENT 1. sets CFBLR of LTDC_LAYER with parameter h_ltdc and layer_idx to result of AND operation of 
	COMMENT    CFBLR of LTDC_LAYER with parameter h_ltdc and layer_idx and negated result of LTDC_LXCFBLR_CFBLL OR LTDC_LXCFBLR_CFBP.
	COMMENT 2. sets CFBLR of LTDC_LAYER with parameter h_ltdc and layer_idx to result of (product of temporary variable and ImageWidth 
	COMMENT    of p_layer_cfg left shifted by SIXTEEN) OR (product of temporary variable and difference of WindowX1 and WindowX0 of 
	COMMENT    p_layer_cfg added with THREE)
	COMMENT Equivalence Class None
	COMMENT
	COMMENT [hdulibstm32f7xxhalltdc-LtdcSetConfig-DB-LLR-013]
	COMMENT The function 'LtdcSetConfig' does the following to configure the frame buffer line number.
	COMMENT 1. sets bit CFBLNR of LTDC_LAYER with parameter h_ltdc and layer_idx to result of AND operation bit of CFBLNR of 
	COMMENT    LTDC_LAYER with parameter h_ltdc and layer_idx and negated value of LTDC_LXCFBLNR_CFBLNBR.
	COMMENT 2. sets bit CFBLNR of LTDC_LAYER with parameter h_ltdc and layer_idx to ImageHeight of p_layer_cfg
	COMMENT Equivalence Class None
	COMMENT
	COMMENT [hdulibstm32f7xxhalltdc-LtdcSetConfig-DB-LLR-014]
	COMMENT The function 'LtdcSetConfig' sets register bit CR of LTDC_LAYER with parameter h_ltdc and layer_idx to result of OR 
	COMMENT operation bit of CR of LTDC_LAYER with parameter h_ltdc and layer_idx and LTDC_LXCR_LEN
	COMMENT Equivalence Class None
	COMMENT </TD>
	
	ELEMENT

		COMMENT INPUT SECTION:
			
			--LTDC Layer index
			VAR layer_idx,							init = 0,													ev = init 
			
			--holds members of structure h_ltdc
			VAR h_ltdc.Instance,					init = &PTU_Instance_2,										ev = init
			
		COMMENT OUTPUT SECTION:

			--LTDC state
			VAR h_ltdc.State,					init = HAL_LTDC_STATE_RESET,									ev = HAL_LTDC_STATE_READY
			
			--return status of HalLtdcConfigLayer
			VAR ret_HalLtdcConfigLayer,			init = HAL_ERROR,												ev = HAL_OK

			--LTDC Layers parameters 
			STRUCTURE h_ltdc.LayerCfg,			init = { others => { WindowX0 =>0x001, WindowX1 => 0x001, WindowY0 => 0x001, WindowY1 => 0x001, 
			&											PixelFormat =>LTDC_PIXEL_FORMAT_RGB888, Alpha => 0x01, Alpha0 =>0x01, 
			&											BlendingFactor1 =>LTDC_BLENDING_FACTOR1_PAXCA, BlendingFactor2
			&											=> LTDC_BLENDING_FACTOR2_PAXCA, FBStartAdress => 0x00000001, ImageWidth =>0x0001, 
			&											ImageHeight => 0x001, Backcolor => 
			&											{ Blue => 0x01, Green => 0x01, Red => 0x01, Reserved => 0xFF } } },	
			&ev = { 0 => { WindowX0 =>0x000, WindowX1 => 0x000, WindowY0 => 0x000, WindowY1 => 0x000, 
			&											PixelFormat =>LTDC_PIXEL_FORMAT_ARGB8888, Alpha => 0x00, Alpha0 =>0x00,
														&BlendingFactor1 =>LTDC_BLENDING_FACTOR1_CA, BlendingFactor2
			&											=> LTDC_BLENDING_FACTOR2_CA, FBStartAdress => 0x00000000, ImageWidth =>0x0000, 
			&											ImageHeight => 0x000, Backcolor => 
			&											{ Blue => 0x00, Green => 0x00, Red => 0, Reserved => 0xFF } },
			&		1=>{ WindowX0 =>0x001, WindowX1 => 0x001, WindowY0 => 0x001, WindowY1 => 0x001, 
			&											PixelFormat =>LTDC_PIXEL_FORMAT_RGB888, Alpha => 0x01, Alpha0 =>0x01, 
			&											BlendingFactor1 =>LTDC_BLENDING_FACTOR1_PAXCA, BlendingFactor2
			&											=> LTDC_BLENDING_FACTOR2_PAXCA, FBStartAdress => 0x00000001, ImageWidth =>0x0001, 
			&											ImageHeight => 0x001, Backcolor => 
			&											{ Blue => 0x01, Green => 0x01, Red => 0x01, Reserved => 0xFF } } }
			
			--Holds BPCR of Instance of h_ltdc
			VAR h_ltdc.Instance->BPCR,				init = 0x00000000,											ev = init

		COMMENT INPUT/OUTPUT SECTION:

			--Tested for minimum values
			STRUCTURE p_layer_cfg,					init = { WindowX0 => 0x000, WindowX1 =>0x000, WindowY0 =>0x000, WindowY1 =>0x000, 
			&												PixelFormat => LTDC_PIXEL_FORMAT_ARGB8888, Alpha =>0x00, Alpha0 =>0x00,
			&												BlendingFactor1 => LTDC_BLENDING_FACTOR1_CA, BlendingFactor2
			&												=>LTDC_BLENDING_FACTOR2_CA, FBStartAdress =>0x00000000, ImageWidth =>0x0000, 
			&												ImageHeight =>0x000, Backcolor => 
			&												{ Blue =>0x00, Green => 0x00, Red =>0x00, Reserved => 0xFF } } ,	
			&																									
			&ev = { WindowX0 => 0x000, WindowX1 =>0x000, WindowY0 =>0x000, WindowY1 =>0x000, 
			&												PixelFormat => LTDC_PIXEL_FORMAT_ARGB8888, Alpha =>0x00, Alpha0 =>0x00, 
			&												BlendingFactor1 => LTDC_BLENDING_FACTOR1_CA, BlendingFactor2
			&												=>LTDC_BLENDING_FACTOR2_CA, FBStartAdress =>0x00000000, ImageWidth =>0x0000, 
			&												ImageHeight =>0x000, Backcolor => 
			&												{ Blue =>0x00, Green => 0x00, Red =>0x00, Reserved => 0xFF } } 

			
			--Holds members of structure PTU_Instance_2		
			VAR ((T_LTDC_LAYER *)((T_UINT32)((T_UINT32)&PTU_Instance_2+0x84)))->WHPCR,
			&										init = 0x00000000,											ev = 0x00000001

			VAR ((T_LTDC_LAYER *)((T_UINT32)((T_UINT32)&PTU_Instance_2+0x84)))->WVPCR,
			&										init = 0x00000000,											ev = 0x00000001				

			VAR ((T_LTDC_LAYER *)((T_UINT32)((T_UINT32)&PTU_Instance_2+0x84)))->PFCR,	
			&										init = 0x00000000,											ev = LTDC_PIXEL_FORMAT_ARGB8888
			
			VAR ((T_LTDC_LAYER *)((T_UINT32)((T_UINT32)&PTU_Instance_2+0x84)))->DCCR,		
			&										init = 0x00000000,											ev = 0x00000000

			VAR ((T_LTDC_LAYER *)((T_UINT32)((T_UINT32)&PTU_Instance_2+0x84)))->CACR,	
			&										init = 0x00000001,											ev = 0x00000000
			
			VAR ((T_LTDC_LAYER *)((T_UINT32)((T_UINT32)&PTU_Instance_2+0x84)))->BFCR,			
			&										init = 0x00000000,											ev = 0x00000405

			VAR ((T_LTDC_LAYER *)((T_UINT32)((T_UINT32)&PTU_Instance_2+0x84)))->CFBAR,	
			&										init = 0x00000000,											ev = 0x00000000

			VAR ((T_LTDC_LAYER *)((T_UINT32)((T_UINT32)&PTU_Instance_2+0x84)))->CFBLR,	
			&										init = 0x00000000,											ev = 0x00000003
			
			VAR ((T_LTDC_LAYER *)((T_UINT32)((T_UINT32)&PTU_Instance_2+0x84)))->CFBLNR,	
			&										init = 0x00000000,											ev = 0x00000000

			VAR ((T_LTDC_LAYER *)((T_UINT32)((T_UINT32)&PTU_Instance_2+0x84)))->CR,	
			&										init = 0x00000000,											ev = 0x00000001
			
			--LTDC Lock(Expected and initialised values are same because, in LLR 'hdulibstm32f7xxhalltdc-HalLtdcConfigLayer-DB-LLR-001'
			--Lock will be set to HAL_LOCKED and in LLR 'hdulibstm32f7xxhalltdc-HalLtdcConfigLayer-DB-LLR-007' Lock will be set to HAL_UNLOCKED)			
			VAR h_ltdc.Lock,						init = HAL_UNLOCKED,										ev = HAL_UNLOCKED
			
		--Stub Calls
		SIMUL

			--No Stubs
			
		END SIMUL

		--Calling unit under test		
		#ret_HalLtdcConfigLayer = HalLtdcConfigLayer(&h_ltdc, &p_layer_cfg, layer_idx);

	END ELEMENT

END TEST -- TEST 3

TEST 4
FAMILY nominal

	COMMENT Test Description
	COMMENT <TD>
	COMMENT [hdulibstm32f7xxhalltdc-LtdcSetConfig-DB-LLR-009]
	COMMENT The function 'LtdcSetConfig' sets temporary variable to THREE when PixelFormat of p_layer_cfg is equal to 
	COMMENT LTDC_PIXEL_FORMAT_RGB888
	COMMENT Equivalence Class 22
	COMMENT
	COMMENT [hdulibstm32f7xxhalltdc-LtdcSetConfig-DB-LLR-012]
	COMMENT The function 'LtdcSetConfig' does the following to configure the color frame buffer pitch in byte.
	COMMENT 1. sets CFBLR of LTDC_LAYER with parameter h_ltdc and layer_idx to result of AND operation of 
	COMMENT    CFBLR of LTDC_LAYER with parameter h_ltdc and layer_idx and negated result of LTDC_LXCFBLR_CFBLL OR LTDC_LXCFBLR_CFBP.
	COMMENT 2. sets CFBLR of LTDC_LAYER with parameter h_ltdc and layer_idx to result of 
	COMMENT    (product of temporary variable and ImageWidth of p_layer_cfg left shifted by SIXTEEN) OR (product of temporary
	COMMENT    variable and difference of WindowX1 and WindowX0 of p_layer_cfg added with THREE), 
	COMMENT Equivalence Class None
	COMMENT </TD>
	
	ELEMENT

		COMMENT INPUT SECTION:
			
			--LTDC Layer index
			VAR layer_idx,							init = 0,													ev = init 
			
			--holds members of structure h_ltdc
			VAR h_ltdc.Instance,					init = &PTU_Instance_2,										ev = init
			
		COMMENT OUTPUT SECTION:

			--LTDC state
			VAR h_ltdc.State,					init = HAL_LTDC_STATE_RESET,									ev = HAL_LTDC_STATE_READY
			
			--return status of HalLtdcConfigLayer
			VAR ret_HalLtdcConfigLayer,			init = HAL_ERROR,												ev = HAL_OK

			--LTDC Layers parameters 
			STRUCTURE h_ltdc.LayerCfg,			init = { others => { WindowX0 =>0x001, WindowX1 => 0x001, WindowY0 => 0x001, WindowY1 => 0x001, 
			&											PixelFormat =>LTDC_PIXEL_FORMAT_ARGB4444, Alpha => 0x01, Alpha0 =>0x01, 
			&											BlendingFactor1 =>LTDC_BLENDING_FACTOR1_PAXCA, BlendingFactor2
			&											=> LTDC_BLENDING_FACTOR2_PAXCA, FBStartAdress => 0x00000001, ImageWidth =>0x0001, 
														&ImageHeight => 0x001, Backcolor => 
			&											{ Blue => 0x01, Green => 0x01, Red => 0x01, Reserved => 0xFF } } },	
			&ev = { 0 => { WindowX0 =>0x000, WindowX1 => 0x000, WindowY0 => 0x000, WindowY1 => 0x000, 
			&											PixelFormat =>LTDC_PIXEL_FORMAT_RGB888, Alpha => 0x00, Alpha0 =>0x00,
			&											BlendingFactor1 =>LTDC_BLENDING_FACTOR1_CA, BlendingFactor2
			&											=> LTDC_BLENDING_FACTOR2_CA, FBStartAdress => 0x00000000, ImageWidth =>0x0000,
			&											ImageHeight => 0x000, Backcolor => 
			&											{ Blue => 0x00, Green => 0x00, Red => 0, Reserved => 0xFF } },
			&		1=>{ WindowX0 =>0x001, WindowX1 => 0x001, WindowY0 => 0x001, WindowY1 => 0x001, 
			&											PixelFormat =>LTDC_PIXEL_FORMAT_ARGB4444, Alpha => 0x01, Alpha0 =>0x01,
			&											BlendingFactor1 =>LTDC_BLENDING_FACTOR1_PAXCA, BlendingFactor2
			&											=> LTDC_BLENDING_FACTOR2_PAXCA, FBStartAdress => 0x00000001, ImageWidth =>0x0001,
			&											ImageHeight => 0x001, Backcolor => 
			&											{ Blue => 0x01, Green => 0x01, Red => 0x01, Reserved => 0xFF } } }
			
		COMMENT INPUT/OUTPUT SECTION:

			--Tested for minimum values
			STRUCTURE p_layer_cfg,					init = { WindowX0 => 0x000, WindowX1 =>0x000, WindowY0 =>0x000, WindowY1 =>0x000, 
			&												PixelFormat => LTDC_PIXEL_FORMAT_RGB888, Alpha =>0x00, Alpha0 =>0x00, 
			&												BlendingFactor1 => LTDC_BLENDING_FACTOR1_CA, BlendingFactor2
			&												=>LTDC_BLENDING_FACTOR2_CA, FBStartAdress =>0x00000000, ImageWidth =>0x0000,
			&												ImageHeight =>0x000, Backcolor => 
			&												{ Blue =>0x00, Green => 0x00, Red =>0x00, Reserved => 0xFF } } ,	
			&																									
			&ev = { WindowX0 => 0x000, WindowX1 =>0x000, WindowY0 =>0x000, WindowY1 =>0x000, 
			&												PixelFormat => LTDC_PIXEL_FORMAT_RGB888, Alpha =>0x00, Alpha0 =>0x00,
			&												BlendingFactor1 => LTDC_BLENDING_FACTOR1_CA, BlendingFactor2
			&												=>LTDC_BLENDING_FACTOR2_CA, FBStartAdress =>0x00000000, ImageWidth =>0x0000, 
			&												ImageHeight =>0x000, Backcolor => 
			&												{ Blue =>0x00, Green => 0x00, Red =>0x00, Reserved => 0xFF } } 

			--LTDC Lock(Expected and initialised values are same because, in LLR 'hdulibstm32f7xxhalltdc-HalLtdcConfigLayer-DB-LLR-001'
			--Lock will be set to HAL_LOCKED and in LLR 'hdulibstm32f7xxhalltdc-HalLtdcConfigLayer-DB-LLR-007' Lock will be set to HAL_UNLOCKED)			
			VAR h_ltdc.Lock,						init = HAL_UNLOCKED,										ev = HAL_UNLOCKED
			
		--Stub Calls
		SIMUL

			--No Stubs
			
		END SIMUL

		--Calling unit under test		
		#ret_HalLtdcConfigLayer = HalLtdcConfigLayer(&h_ltdc, &p_layer_cfg, layer_idx);

	END ELEMENT

END TEST -- TEST 4

TEST 5
FAMILY nominal

	COMMENT Test Description
	COMMENT <TD>
	COMMENT [hdulibstm32f7xxhalltdc-LtdcSetConfig-DB-LLR-010]
	COMMENT The function 'LtdcSetConfig' sets temporary variable to TWO when PixelFormat of p_layer_cfg is equal to 
	COMMENT LTDC_PIXEL_FORMAT_ARGB4444 
	COMMENT Equivalence Class 24
	COMMENT Test case written to test MCDC TXXX
	COMMENT </TD>
	
	ELEMENT

		COMMENT INPUT SECTION:
			
			--LTDC Layer index
			VAR layer_idx,							init = 0,													ev = init 
			
			--holds members of structure h_ltdc
			VAR h_ltdc.Instance,					init = &PTU_Instance_2,										ev = init
			
		COMMENT OUTPUT SECTION:

			--LTDC state
			VAR h_ltdc.State,					init = HAL_LTDC_STATE_RESET,									ev = HAL_LTDC_STATE_READY
			
			--return status of HalLtdcConfigLayer
			VAR ret_HalLtdcConfigLayer,			init = HAL_ERROR,												ev = HAL_OK

			--LTDC Layers parameters 
			STRUCTURE h_ltdc.LayerCfg,			init = { others => { WindowX0 =>0x001, WindowX1 => 0x001, WindowY0 => 0x001, WindowY1 => 0x001, 
			&											PixelFormat =>LTDC_PIXEL_FORMAT_RGB888, Alpha => 0x01, Alpha0 =>0x01,
			&											BlendingFactor1 =>LTDC_BLENDING_FACTOR1_PAXCA, BlendingFactor2
			&											=> LTDC_BLENDING_FACTOR2_PAXCA, FBStartAdress => 0x00000001, ImageWidth =>0x0001,
			&											ImageHeight => 0x001, Backcolor => 
			&											{ Blue => 0x01, Green => 0x01, Red => 0x01, Reserved => 0xFF } } },	
			&ev = { 0 => { WindowX0 =>0x000, WindowX1 => 0x000, WindowY0 => 0x000, WindowY1 => 0x000, 
			&											PixelFormat =>LTDC_PIXEL_FORMAT_ARGB4444, Alpha => 0x00, Alpha0 =>0x00,
			&											BlendingFactor1 =>LTDC_BLENDING_FACTOR1_CA, BlendingFactor2
			&											=> LTDC_BLENDING_FACTOR2_CA, FBStartAdress => 0x00000000, ImageWidth =>0x0000,
														&ImageHeight => 0x000, Backcolor => 
			&											{ Blue => 0x00, Green => 0x00, Red => 0, Reserved => 0xFF } },
			&		1=>{ WindowX0 =>0x001, WindowX1 => 0x001, WindowY0 => 0x001, WindowY1 => 0x001, 
			&											PixelFormat =>LTDC_PIXEL_FORMAT_RGB888, Alpha => 0x01, Alpha0 =>0x01,
														&BlendingFactor1 =>LTDC_BLENDING_FACTOR1_PAXCA, BlendingFactor2
			&											=> LTDC_BLENDING_FACTOR2_PAXCA, FBStartAdress => 0x00000001, ImageWidth =>0x0001, 
														&ImageHeight => 0x001, Backcolor => 
			&											{ Blue => 0x01, Green => 0x01, Red => 0x01, Reserved => 0xFF } } }
			
		COMMENT INPUT/OUTPUT SECTION:

			--Tested for minimum values
			STRUCTURE p_layer_cfg,					init = { WindowX0 => 0x000, WindowX1 =>0x000, WindowY0 =>0x000, WindowY1 =>0x000, 
			&												PixelFormat => LTDC_PIXEL_FORMAT_ARGB4444, Alpha =>0x00, Alpha0 =>0x00, 
			&												BlendingFactor1 => LTDC_BLENDING_FACTOR1_CA, BlendingFactor2
			&												=>LTDC_BLENDING_FACTOR2_CA, FBStartAdress =>0x00000000, ImageWidth =>0x0000, 
			&												ImageHeight =>0x000, Backcolor => 
			&												{ Blue =>0x00, Green => 0x00, Red =>0x00, Reserved => 0xFF } } ,	
			&																									
			&ev = { WindowX0 => 0x000, WindowX1 =>0x000, WindowY0 =>0x000, WindowY1 =>0x000, 
			&												PixelFormat => LTDC_PIXEL_FORMAT_ARGB4444, Alpha =>0x00, Alpha0 =>0x00,
			&												BlendingFactor1 => LTDC_BLENDING_FACTOR1_CA, BlendingFactor2
			&												=>LTDC_BLENDING_FACTOR2_CA, FBStartAdress =>0x00000000, ImageWidth =>0x0000,
			&												ImageHeight =>0x000, Backcolor => 
			&												{ Blue =>0x00, Green => 0x00, Red =>0x00, Reserved => 0xFF } } 

			--LTDC Lock(Expected and initialised values are same because, in LLR 'hdulibstm32f7xxhalltdc-HalLtdcConfigLayer-DB-LLR-001'
			--Lock will be set to HAL_LOCKED and in LLR 'hdulibstm32f7xxhalltdc-HalLtdcConfigLayer-DB-LLR-007' Lock will be set to HAL_UNLOCKED)			
			VAR h_ltdc.Lock,						init = HAL_UNLOCKED,										ev = HAL_UNLOCKED
			
		--Stub Calls
		SIMUL

			--No Stubs
			
		END SIMUL

		--Calling unit under test		
		#ret_HalLtdcConfigLayer = HalLtdcConfigLayer(&h_ltdc, &p_layer_cfg, layer_idx);

	END ELEMENT

END TEST -- TEST 5

TEST 6
FAMILY nominal

	COMMENT Test Description
	COMMENT <TD>
	COMMENT [hdulibstm32f7xxhalltdc-LtdcSetConfig-DB-LLR-010]
	COMMENT The function 'LtdcSetConfig' sets temporary variable to TWO when PixelFormat of p_layer_cfg is equal to 
	COMMENT LTDC_PIXEL_FORMAT_RGB565
	COMMENT Equivalence Class 26
	COMMENT Test case written to test MCDC FTXX
	COMMENT </TD>
	
	ELEMENT

		COMMENT INPUT SECTION:
			
			--LTDC Layer index
			VAR layer_idx,							init = 0,													ev = init 
			
			--holds members of structure h_ltdc
			VAR h_ltdc.Instance,					init = &PTU_Instance_2,										ev = init
			
		COMMENT OUTPUT SECTION:

			--LTDC state
			VAR h_ltdc.State,					init = HAL_LTDC_STATE_RESET,									ev = HAL_LTDC_STATE_READY
			
			--return status of HalLtdcConfigLayer
			VAR ret_HalLtdcConfigLayer,			init = HAL_ERROR,												ev = HAL_OK

			--LTDC Layers parameters 
			STRUCTURE h_ltdc.LayerCfg,			init = { others => { WindowX0 =>0x001, WindowX1 => 0x001, WindowY0 => 0x001, WindowY1 => 0x001, 
			&											PixelFormat =>LTDC_PIXEL_FORMAT_RGB888, Alpha => 0x01, Alpha0 =>0x01,
			&											BlendingFactor1 =>LTDC_BLENDING_FACTOR1_PAXCA, BlendingFactor2
			&											=> LTDC_BLENDING_FACTOR2_PAXCA, FBStartAdress => 0x00000001, ImageWidth =>0x0001, 
														&ImageHeight => 0x001, Backcolor => 
			&											{ Blue => 0x01, Green => 0x01, Red => 0x01, Reserved => 0xFF } } },	
			&ev = { 0 => { WindowX0 =>0x000, WindowX1 => 0x000, WindowY0 => 0x000, WindowY1 => 0x000, 
			&											PixelFormat =>LTDC_PIXEL_FORMAT_RGB565, Alpha => 0x00, Alpha0 =>0x00,
			&											BlendingFactor1 =>LTDC_BLENDING_FACTOR1_CA, BlendingFactor2
			&											=> LTDC_BLENDING_FACTOR2_CA, FBStartAdress => 0x00000000, ImageWidth =>0x0000,
			&											ImageHeight => 0x000, Backcolor => 
			&											{ Blue => 0x00, Green => 0x00, Red => 0, Reserved => 0xFF } },
			&		1=>{ WindowX0 =>0x001, WindowX1 => 0x001, WindowY0 => 0x001, WindowY1 => 0x001, 
			&											PixelFormat =>LTDC_PIXEL_FORMAT_RGB888, Alpha => 0x01, Alpha0 =>0x01, 
														&BlendingFactor1 =>LTDC_BLENDING_FACTOR1_PAXCA, BlendingFactor2
			&											=> LTDC_BLENDING_FACTOR2_PAXCA, FBStartAdress => 0x00000001, ImageWidth =>0x0001, 
			&											ImageHeight => 0x001, Backcolor => 
			&											{ Blue => 0x01, Green => 0x01, Red => 0x01, Reserved => 0xFF } } }
			
		COMMENT INPUT/OUTPUT SECTION:

			--Tested for minimum values
			STRUCTURE p_layer_cfg,					init = { WindowX0 => 0x000, WindowX1 =>0x000, WindowY0 =>0x000, WindowY1 =>0x000, 
			&												PixelFormat => LTDC_PIXEL_FORMAT_RGB565, Alpha =>0x00, Alpha0 =>0x00, 
															&BlendingFactor1 => LTDC_BLENDING_FACTOR1_CA, BlendingFactor2
			&												=>LTDC_BLENDING_FACTOR2_CA, FBStartAdress =>0x00000000, ImageWidth =>0x0000,
															&ImageHeight =>0x000, Backcolor => 
			&												{ Blue =>0x00, Green => 0x00, Red =>0x00, Reserved => 0xFF } } ,	
			&																									
			&ev = { WindowX0 => 0x000, WindowX1 =>0x000, WindowY0 =>0x000, WindowY1 =>0x000, 
			&												PixelFormat => LTDC_PIXEL_FORMAT_RGB565, Alpha =>0x00, Alpha0 =>0x00, 
			&												BlendingFactor1 => LTDC_BLENDING_FACTOR1_CA, BlendingFactor2
			&												=>LTDC_BLENDING_FACTOR2_CA, FBStartAdress =>0x00000000, ImageWidth =>0x0000,
															&ImageHeight =>0x000, Backcolor => 
			&												{ Blue =>0x00, Green => 0x00, Red =>0x00, Reserved => 0xFF } } 

			--LTDC Lock(Expected and initialised values are same because, in LLR 'hdulibstm32f7xxhalltdc-HalLtdcConfigLayer-DB-LLR-001'
			--Lock will be set to HAL_LOCKED and in LLR 'hdulibstm32f7xxhalltdc-HalLtdcConfigLayer-DB-LLR-007' Lock will be set to HAL_UNLOCKED)			
			VAR h_ltdc.Lock,						init = HAL_UNLOCKED,										ev = HAL_UNLOCKED
			
		--Stub Calls
		SIMUL

			--No Stubs
			
		END SIMUL

		--Calling unit under test		
		#ret_HalLtdcConfigLayer = HalLtdcConfigLayer(&h_ltdc, &p_layer_cfg, layer_idx);

	END ELEMENT

END TEST -- TEST 6

TEST 7
FAMILY nominal

	COMMENT Test Description
	COMMENT <TD>
	COMMENT [hdulibstm32f7xxhalltdc-LtdcSetConfig-DB-LLR-010]
	COMMENT The function 'LtdcSetConfig' sets temporary variable to TWO when PixelFormat of p_layer_cfg is equal to 
	COMMENT LTDC_PIXEL_FORMAT_ARGB1555
	COMMENT Equivalence Class 28
	COMMENT Test case written to test MCDC FFTX
	COMMENT </TD>
	
	ELEMENT

		COMMENT INPUT SECTION:
			
			--LTDC Layer index
			VAR layer_idx,							init = 0,													ev = init 
			
			--holds members of structure h_ltdc
			VAR h_ltdc.Instance,					init = &PTU_Instance_2,										ev = init			
			
		COMMENT OUTPUT SECTION:

			--LTDC state
			VAR h_ltdc.State,					init = HAL_LTDC_STATE_RESET,									ev = HAL_LTDC_STATE_READY
			
			--return status of HalLtdcConfigLayer
			VAR ret_HalLtdcConfigLayer,			init = HAL_ERROR,												ev = HAL_OK

			--LTDC Layers parameters 
			STRUCTURE h_ltdc.LayerCfg,			init = { others => { WindowX0 =>0x001, WindowX1 => 0x001, WindowY0 => 0x001, WindowY1 => 0x001, 
			&											PixelFormat =>LTDC_PIXEL_FORMAT_RGB888, Alpha => 0x01, Alpha0 =>0x01, 
			&											BlendingFactor1 =>LTDC_BLENDING_FACTOR1_PAXCA, BlendingFactor2
			&											=> LTDC_BLENDING_FACTOR2_PAXCA, FBStartAdress => 0x00000001, ImageWidth =>0x0001, 
														&ImageHeight => 0x001, Backcolor => 
			&											{ Blue => 0x01, Green => 0x01, Red => 0x01, Reserved => 0xFF } } },	
			&ev = { 0 => { WindowX0 =>0x000, WindowX1 => 0x000, WindowY0 => 0x000, WindowY1 => 0x000, 
			&											PixelFormat =>LTDC_PIXEL_FORMAT_ARGB1555, Alpha => 0x00, Alpha0 =>0x00, 
														&BlendingFactor1 =>LTDC_BLENDING_FACTOR1_CA, BlendingFactor2
			&											=> LTDC_BLENDING_FACTOR2_CA, FBStartAdress => 0x00000000, ImageWidth =>0x0000, 
			&											ImageHeight => 0x000, Backcolor => 
			&											{ Blue => 0x00, Green => 0x00, Red => 0, Reserved => 0xFF } },
			&		1=>{ WindowX0 =>0x001, WindowX1 => 0x001, WindowY0 => 0x001, WindowY1 => 0x001, 
			&											PixelFormat =>LTDC_PIXEL_FORMAT_RGB888, Alpha => 0x01, Alpha0 =>0x01,
			&											BlendingFactor1 =>LTDC_BLENDING_FACTOR1_PAXCA, BlendingFactor2
			&											=> LTDC_BLENDING_FACTOR2_PAXCA, FBStartAdress => 0x00000001, ImageWidth =>0x0001,
			&											ImageHeight => 0x001, Backcolor => 
			&											{ Blue => 0x01, Green => 0x01, Red => 0x01, Reserved => 0xFF } } }
			
		COMMENT INPUT/OUTPUT SECTION:

			--Tested for minimum values
			STRUCTURE p_layer_cfg,					init = { WindowX0 => 0x000, WindowX1 =>0x000, WindowY0 =>0x000, WindowY1 =>0x000, 
			&												PixelFormat => LTDC_PIXEL_FORMAT_ARGB1555, Alpha =>0x00, Alpha0 =>0x00, 
			&												BlendingFactor1 => LTDC_BLENDING_FACTOR1_CA, BlendingFactor2
			&												=>LTDC_BLENDING_FACTOR2_CA, FBStartAdress =>0x00000000, ImageWidth =>0x0000, 
			&												ImageHeight =>0x000, Backcolor => 
			&												{ Blue =>0x00, Green => 0x00, Red =>0x00, Reserved => 0xFF } } ,	
			&																									
			&ev = { WindowX0 => 0x000, WindowX1 =>0x000, WindowY0 =>0x000, WindowY1 =>0x000, 
			&												PixelFormat => LTDC_PIXEL_FORMAT_ARGB1555, Alpha =>0x00, Alpha0 =>0x00, 
			&												BlendingFactor1 => LTDC_BLENDING_FACTOR1_CA, BlendingFactor2
			&												=>LTDC_BLENDING_FACTOR2_CA, FBStartAdress =>0x00000000, ImageWidth =>0x0000, 
			&												ImageHeight =>0x000, Backcolor => 
			&												{ Blue =>0x00, Green => 0x00, Red =>0x00, Reserved => 0xFF } } 

			--LTDC Lock(Expected and initialised values are same because, in LLR 'hdulibstm32f7xxhalltdc-HalLtdcConfigLayer-DB-LLR-001'
			--Lock will be set to HAL_LOCKED and in LLR 'hdulibstm32f7xxhalltdc-HalLtdcConfigLayer-DB-LLR-007' Lock will be set to HAL_UNLOCKED)			
			VAR h_ltdc.Lock,						init = HAL_UNLOCKED,										ev = HAL_UNLOCKED
			
		--Stub Calls
		SIMUL

			--No Stubs
			
		END SIMUL

		--Calling unit under test		
		#ret_HalLtdcConfigLayer = HalLtdcConfigLayer(&h_ltdc, &p_layer_cfg, layer_idx);

	END ELEMENT

END TEST -- TEST 7

TEST 8
FAMILY nominal

	COMMENT Test Description
	COMMENT <TD>
	COMMENT [hdulibstm32f7xxhalltdc-LtdcSetConfig-DB-LLR-010]
	COMMENT The function 'LtdcSetConfig'  sets temporary variable to TWO when PixelFormat of p_layer_cfg is equal to 
	COMMENT LTDC_PIXEL_FORMAT_AL88
	COMMENT Equivalence Class 30
	COMMENT Test case written to test MCDC FFFT
	COMMENT </TD>
	
	ELEMENT

		COMMENT INPUT SECTION:
			
			--LTDC Layer index
			VAR layer_idx,							init = 0,													ev = init 
			
			--holds members of structure h_ltdc
			VAR h_ltdc.Instance,					init = &PTU_Instance_2,										ev = init
			
		COMMENT OUTPUT SECTION:

			--LTDC state
			VAR h_ltdc.State,					init = HAL_LTDC_STATE_RESET,									ev = HAL_LTDC_STATE_READY
			
			--return status of HalLtdcConfigLayer
			VAR ret_HalLtdcConfigLayer,			init = HAL_ERROR,												ev = HAL_OK

			--LTDC Layers parameters 
			STRUCTURE h_ltdc.LayerCfg,			init = { others => { WindowX0 =>0x001, WindowX1 => 0x001, WindowY0 => 0x001, WindowY1 => 0x001, 
			&											PixelFormat =>LTDC_PIXEL_FORMAT_RGB888, Alpha => 0x01, Alpha0 =>0x01, 
			&											BlendingFactor1 =>LTDC_BLENDING_FACTOR1_PAXCA, BlendingFactor2
			&											=> LTDC_BLENDING_FACTOR2_PAXCA, FBStartAdress => 0x00000001, ImageWidth =>0x0001, 
			&											ImageHeight => 0x001, Backcolor => 
			&											{ Blue => 0x01, Green => 0x01, Red => 0x01, Reserved => 0xFF } } },	
			&ev = { 0 => { WindowX0 =>0x000, WindowX1 => 0x000, WindowY0 => 0x000, WindowY1 => 0x000, 
			&											PixelFormat =>LTDC_PIXEL_FORMAT_AL88, Alpha => 0x00, Alpha0 =>0x00,
			&											BlendingFactor1 =>LTDC_BLENDING_FACTOR1_CA, BlendingFactor2
			&											=> LTDC_BLENDING_FACTOR2_CA, FBStartAdress => 0x00000000, ImageWidth =>0x0000,
			&											ImageHeight => 0x000, Backcolor => 
			&											{ Blue => 0x00, Green => 0x00, Red => 0, Reserved => 0xFF } },
			&		1=>{ WindowX0 =>0x001, WindowX1 => 0x001, WindowY0 => 0x001, WindowY1 => 0x001, 
			&											PixelFormat =>LTDC_PIXEL_FORMAT_RGB888, Alpha => 0x01, Alpha0 =>0x01, 
			&											BlendingFactor1 =>LTDC_BLENDING_FACTOR1_PAXCA, BlendingFactor2
			&											=> LTDC_BLENDING_FACTOR2_PAXCA, FBStartAdress => 0x00000001, ImageWidth =>0x0001,
			&											ImageHeight => 0x001, Backcolor => 
			&											{ Blue => 0x01, Green => 0x01, Red => 0x01, Reserved => 0xFF } } }
			
		COMMENT INPUT/OUTPUT SECTION:

			--Tested for minimum values
			STRUCTURE p_layer_cfg,					init = { WindowX0 => 0x000, WindowX1 =>0x000, WindowY0 =>0x000, WindowY1 =>0x000, 
			&												PixelFormat => LTDC_PIXEL_FORMAT_AL88, Alpha =>0x00, Alpha0 =>0x00, 
			&												BlendingFactor1 => LTDC_BLENDING_FACTOR1_CA, BlendingFactor2
			&												=>LTDC_BLENDING_FACTOR2_CA, FBStartAdress =>0x00000000, ImageWidth =>0x0000,
			&												ImageHeight =>0x000, Backcolor => 
			&												{ Blue =>0x00, Green => 0x00, Red =>0x00, Reserved => 0xFF } } ,	
			&																									
			&ev = { WindowX0 => 0x000, WindowX1 =>0x000, WindowY0 =>0x000, WindowY1 =>0x000, 
			&												PixelFormat => LTDC_PIXEL_FORMAT_AL88, Alpha =>0x00, Alpha0 =>0x00,
			&												BlendingFactor1 => LTDC_BLENDING_FACTOR1_CA, BlendingFactor2
			&												=>LTDC_BLENDING_FACTOR2_CA, FBStartAdress =>0x00000000, ImageWidth =>0x0000, 
			&												ImageHeight =>0x000, Backcolor => 
			&												{ Blue =>0x00, Green => 0x00, Red =>0x00, Reserved => 0xFF } } 

			--LTDC Lock(Expected and initialised values are same because, in LLR 'hdulibstm32f7xxhalltdc-HalLtdcConfigLayer-DB-LLR-001'
			--Lock will be set to HAL_LOCKED and in LLR 'hdulibstm32f7xxhalltdc-HalLtdcConfigLayer-DB-LLR-007' Lock will be set to HAL_UNLOCKED)			
			VAR h_ltdc.Lock,						init = HAL_UNLOCKED,										ev = HAL_UNLOCKED
			
		--Stub Calls
		SIMUL

			--No Stubs
			
		END SIMUL

		--Calling unit under test		
		#ret_HalLtdcConfigLayer = HalLtdcConfigLayer(&h_ltdc, &p_layer_cfg, layer_idx);

	END ELEMENT

END TEST -- TEST 8

TEST 9
FAMILY nominal

	COMMENT Test Description
	COMMENT <TD> 
	COMMENT [hdulibstm32f7xxhalltdc-LtdcSetConfig-DB-LLR-011]
	COMMENT The function 'LtdcSetConfig'  sets temporary variable to ONE when PixelFormat of p_layer_cfg is other than 
	COMMENT LTDC_PIXEL_FORMAT_RGB888,LTDC_PIXEL_FORMAT_ARGB8888,LTDC_PIXEL_FORMAT_ARGB4444,LTDC_PIXEL_FORMAT_RGB565, LTDC_PIXEL_FORMAT_ARGB1555,
	COMMENT LTDC_PIXEL_FORMAT_AL88
	COMMENT Equivalence Class 25,27,29,31,21,23
	COMMENT Test case written to test MCDC FFFF
	COMMENT </TD>
	
	ELEMENT

		COMMENT INPUT SECTION:
			
			--LTDC Layer index
			VAR layer_idx,							init = 0,													ev = init 
			
			--holds members of structure h_ltdc
			VAR h_ltdc.Instance,					init = &PTU_Instance_2,										ev = init
			
		COMMENT OUTPUT SECTION:

			--LTDC state
			VAR h_ltdc.State,					init = HAL_LTDC_STATE_RESET,									ev = HAL_LTDC_STATE_READY
			
			--return status of HalLtdcConfigLayer
			VAR ret_HalLtdcConfigLayer,			init = HAL_ERROR,												ev = HAL_OK

			--LTDC Layers parameters 
			STRUCTURE h_ltdc.LayerCfg,			init = { others => { WindowX0 =>0x001, WindowX1 => 0x001, WindowY0 => 0x001, WindowY1 => 0x001, 
			&											PixelFormat =>LTDC_PIXEL_FORMAT_RGB888, Alpha => 0x01, Alpha0 =>0x01, 
			&											BlendingFactor1 =>LTDC_BLENDING_FACTOR1_PAXCA, BlendingFactor2
			&											=> LTDC_BLENDING_FACTOR2_PAXCA, FBStartAdress => 0x00000001, ImageWidth =>0x0001,
			&											ImageHeight => 0x001, Backcolor => 
			&											{ Blue => 0x01, Green => 0x01, Red => 0x01, Reserved => 0xFF } } },	
			&ev = { 0 => { WindowX0 =>0x000, WindowX1 => 0x000, WindowY0 => 0x000, WindowY1 => 0x000, 
			&											PixelFormat =>LTDC_PIXEL_FORMAT_AL44, Alpha => 0x00, Alpha0 =>0x00, 
			&											BlendingFactor1 =>LTDC_BLENDING_FACTOR1_CA, BlendingFactor2
			&											=> LTDC_BLENDING_FACTOR2_CA, FBStartAdress => 0x00000000, ImageWidth =>0x0000, 
			&											ImageHeight => 0x000, Backcolor => 
			&											{ Blue => 0x00, Green => 0x00, Red => 0, Reserved => 0xFF } },
			&		1=>{ WindowX0 =>0x001, WindowX1 => 0x001, WindowY0 => 0x001, WindowY1 => 0x001, 
			&											PixelFormat =>LTDC_PIXEL_FORMAT_RGB888, Alpha => 0x01, Alpha0 =>0x01,
			&											BlendingFactor1 =>LTDC_BLENDING_FACTOR1_PAXCA, BlendingFactor2
			&											=> LTDC_BLENDING_FACTOR2_PAXCA, FBStartAdress => 0x00000001, 
			&											ImageWidth =>0x0001, ImageHeight => 0x001, Backcolor => 
			&											{ Blue => 0x01, Green => 0x01, Red => 0x01, Reserved => 0xFF } } }
			
		COMMENT INPUT/OUTPUT SECTION:

			--Tested for minimum values
			STRUCTURE p_layer_cfg,					init = { WindowX0 => 0x000, WindowX1 =>0x000, WindowY0 =>0x000, WindowY1 =>0x000, 
			&												PixelFormat => LTDC_PIXEL_FORMAT_AL44, Alpha =>0x00, Alpha0 =>0x00,
			&												BlendingFactor1 => LTDC_BLENDING_FACTOR1_CA, BlendingFactor2
			&												=>LTDC_BLENDING_FACTOR2_CA, FBStartAdress =>0x00000000, ImageWidth =>0x0000, 
			&												ImageHeight =>0x000, Backcolor => 
			&												{ Blue =>0x00, Green => 0x00, Red =>0x00, Reserved => 0xFF } } ,	
			&																									
			&ev = { WindowX0 => 0x000, WindowX1 =>0x000, WindowY0 =>0x000, WindowY1 =>0x000, 
			&												PixelFormat => LTDC_PIXEL_FORMAT_AL44, Alpha =>0x00, Alpha0 =>0x00, 
			&												BlendingFactor1 => LTDC_BLENDING_FACTOR1_CA, BlendingFactor2
			&												=>LTDC_BLENDING_FACTOR2_CA, FBStartAdress =>0x00000000, ImageWidth =>0x0000,
			&												ImageHeight =>0x000, Backcolor => 
			&												{ Blue =>0x00, Green => 0x00, Red =>0x00, Reserved => 0xFF } } 

			--LTDC Lock(Expected and initialised values are same because, in LLR 'hdulibstm32f7xxhalltdc-HalLtdcConfigLayer-DB-LLR-001'
			--Lock will be set to HAL_LOCKED and in LLR 'hdulibstm32f7xxhalltdc-HalLtdcConfigLayer-DB-LLR-007' Lock will be set to HAL_UNLOCKED)			
			VAR h_ltdc.Lock,						init = HAL_UNLOCKED,										ev = HAL_UNLOCKED
			
		--Stub Calls
		SIMUL

			--No Stubs
			
		END SIMUL

		--Calling unit under test		
		#ret_HalLtdcConfigLayer = HalLtdcConfigLayer(&h_ltdc, &p_layer_cfg, layer_idx);

	END ELEMENT

END TEST -- TEST 9

--TEST 10
--FAMILY robustness
--
--	COMMENT Test Description
--	COMMENT <TD> 
--	COMMENT [hdulibstm32f7xxhalltdc-HalLtdcConfigLayer-DB-LLR-001]
--	COMMENT This test case is written to test function parameter h_ltdc for NULL
--	COMMENT Equivalence Class 40
--	COMMENT </TD>
--	
--	ELEMENT
--
--		COMMENT INPUT SECTION:
--			
--			--None
--			
--		COMMENT OUTPUT SECTION:
--
--			--None
--			
--		COMMENT INPUT/OUTPUT SECTION:
--
--			--None
--			
--		--Stub Calls
--		SIMUL
--
--			--No Stubs
--			
--		END SIMUL
--
--		--Calling unit under test		
--		#ret_HalLtdcConfigLayer = HalLtdcConfigLayer(NULL, &p_layer_cfg, layer_idx);
--
--	END ELEMENT
--
--END TEST -- TEST 10

--TEST 11
--FAMILY robustness
--
--	COMMENT Test Description
--	COMMENT <TD> 
--	COMMENT [hdulibstm32f7xxhalltdc-HalLtdcConfigLayer-DB-LLR-003]
--	COMMENT This test case is written to test function parameter p_layer_cfg for NULL
--	COMMENT Equivalence Class 41
--	COMMENT </TD>
--	
--	ELEMENT
--
--		COMMENT INPUT SECTION:
--			
--			--None
--			
--		COMMENT OUTPUT SECTION:
--
--			--None
--			
--		COMMENT INPUT/OUTPUT SECTION:
--
--			--None
--			
--		--Stub Calls
--		SIMUL
--
--			--No Stubs
--			
--		END SIMUL
--
--		--Calling unit under test		
--		#ret_HalLtdcConfigLayer = HalLtdcConfigLayer(&h_ltdc, NULL, layer_idx);
--
--	END ELEMENT

--END TEST -- TEST 11

END SERVICE -- HalLtdcConfigLayer
--------------------------------------------------------------------------------
-- Declaration of the service HalLtdcSetAddress
--------------------------------------------------------------------------------
SERVICE HalLtdcSetAddress
SERVICE_TYPE extern

    -- Tested service parameters declarations
    #T_LTDC_HANDLE h_ltdc;
    #T_UINT32 address,PTU_Instance_3;
    #T_UINT32 layer_idx;
    -- By function returned type declaration
    #T_HAL_STATUS ret_HalLtdcSetAddress;
	--Temporary variable created to pass address to structure 'Instance' of 'h_ltdc'
    #T_LTDC PTU_Instance_2[255];    

	--Default Variables 
	ENVIRONMENT ENV_HalLtdcSetAddress

			VAR address,				init = 0,																			ev = init
			VAR layer_idx,				init = 0,																			ev = init
			VAR ret_HalLtdcSetAddress,	init = HAL_OK,																		ev = init
			
	END ENVIRONMENT -- ENV_HalLtdcSetAddress

	USE ENV_HalLtdcSetAddress
	
TEST 1
FAMILY nominal

	COMMENT Test Description
	COMMENT <TD>
	COMMENT [hdulibstm32f7xxhalltdc-HalLtdcSetAddress-DB-LLR-001]
	COMMENT The function 'HalLtdcSetAddress' calls the macro '__HAL_LOCK' with h_ltdc as parameter 
	COMMENT Equivalence Class 11
	COMMENT
	COMMENT [hdulibstm32f7xxhalltdc-HalLtdcSetAddress-DB-LLR-002]
	COMMENT The function 'HalLtdcSetAddress' sets State of h_ltdc to HAL_LTDC_STATE_BUSY
	COMMENT Equivalence Class None
	COMMENT
	COMMENT [hdulibstm32f7xxhalltdc-HalLtdcSetAddress-DB-LLR-003]
	COMMENT The function 'HalLtdcSetAddress' sets p_layer_cfg to LayerCfg with index layer_idx of h_ltdc
	COMMENT Equivalence Class None
	COMMENT
	COMMENT [hdulibstm32f7xxhalltdc-HalLtdcSetAddress-DB-LLR-004]
	COMMENT The function 'HalLtdcSetAddress' sets FBStartAdress of p_layer_cfg to address to reconfigure the Address
	COMMENT Equivalence Class None
	COMMENT
	COMMENT [hdulibstm32f7xxhalltdc-HalLtdcSetAddress-DB-LLR-005]
	COMMENT The function 'HalLtdcSetAddress' calls the function 'LtdcSetConfig' with h_ltdc, p_layer_cfg and 
	COMMENT layer_idx as parameter
	COMMENT Equivalence Class 12
	COMMENT
	COMMENT [hdulibstm32f7xxhalltdc-HalLtdcSetAddress-DB-LLR-006]
	COMMENT The function 'HalLtdcSetAddress' sets SRCR of Instance of h_ltdc to LTDC_SRCR_IMR to set the Reload type
	COMMENT Equivalence Class None
	COMMENT 
	COMMENT [hdulibstm32f7xxhalltdc-HalLtdcSetAddress-DB-LLR-007]
	COMMENT The function 'HalLtdcSetAddress' sets the State of h_ltdc to HAL_LTDC_STATE_READY
	COMMENT Equivalence Class None
	COMMENT 
	COMMENT [hdulibstm32f7xxhalltdc-HalLtdcSetAddress-DB-LLR-008]
	COMMENT The function 'HalLtdcSetAddress' calls the macro '__HAL_UNLOCK' and returns HAL_OK with h_ltdc as its parameter	
	COMMENT Equivalence Class 13,35
	COMMENT </TD>
	
	ELEMENT

		COMMENT INPUT SECTION:

			--LTDC Register base address(Handled)
			VAR h_ltdc.Instance,					init = &PTU_Instance_2,										ev = init
						
			--LTDC Layer index
			VAR layer_idx,							init = 0,													ev = init
			
			--Holds address
			VAR address,							init = 0x00002000,											ev = init

		COMMENT OUTPUT SECTION:
			
			--return status of HalLtdcSetAddress
			VAR ret_HalLtdcSetAddress,				init = HAL_ERROR,											ev = HAL_OK	
			
			--State of h_ltdc
			VAR h_ltdc.State,						init = HAL_LTDC_STATE_RESET,								ev = HAL_LTDC_STATE_READY	

			--LTDC Shadow Reload Configuration Register
			VAR h_ltdc.Instance->SRCR,				init = 0x00000000,											ev = LTDC_SRCR_IMR
			
		COMMENT INPUT/OUTPUT SECTION:
	
			--holds LayerCfg of h_ltdc
			ARRAY h_ltdc.LayerCfg,					init = {
			&									 others => { WindowX0 =>0x000, WindowX1 =>0x000, WindowY0 => 0x000, WindowY1 =>0x0000, 
			&									PixelFormat => LTDC_PIXEL_FORMAT_ARGB8888,
			&									 Alpha => 0x00, Alpha0 => 0x00, BlendingFactor1 => LTDC_BLENDING_FACTOR1_CA,
			&									BlendingFactor2 =>LTDC_BLENDING_FACTOR2_CA, FBStartAdress => 0x03000000,
			&									 ImageWidth => 0x0000, ImageHeight => 0x000, Backcolor => { Blue => 0x00, Green => 0x00, Red => 0x00,
			&									 Reserved => 0xFF }} },	
			&
			&										ev = {
			&									 0 => { WindowX0 =>0x000, WindowX1 =>0x000, WindowY0 => 0x000, WindowY1 =>0x0000,
			&									PixelFormat => LTDC_PIXEL_FORMAT_ARGB8888,
			&									 Alpha => 0x00, Alpha0 => 0x00, BlendingFactor1 => LTDC_BLENDING_FACTOR1_CA,
			&									BlendingFactor2 =>LTDC_BLENDING_FACTOR2_CA, FBStartAdress => 0x00002000,
			&									 ImageWidth => 0x0000, ImageHeight => 0x000, Backcolor => { Blue => 0x00, Green => 0x00, Red => 0x00,
			&									 Reserved => 0xFF }},
			&
			&									 1 => { WindowX0 =>0x000, WindowX1 =>0x000, WindowY0 => 0x000, WindowY1 =>0x0000,
			&									PixelFormat => LTDC_PIXEL_FORMAT_ARGB8888,
			&									 Alpha => 0x00, Alpha0 => 0x00, BlendingFactor1 => LTDC_BLENDING_FACTOR1_CA,
			&									BlendingFactor2 =>LTDC_BLENDING_FACTOR2_CA, FBStartAdress => 0x03000000,
			&									 ImageWidth => 0x0000, ImageHeight => 0x000, Backcolor => { Blue => 0x00, Green => 0x00, Red => 0x00,
			&									 Reserved => 0xFF } }}
			
			
			--LTDC Lock(Expected and initialised values are same because, in LLR 'hdulibstm32f7xxhalltdc-HalLtdcSetAddress-DB-LLR-001'
			--Lock will be set to HAL_LOCKED and in LLR 'hdulibstm32f7xxhalltdc-HalLtdcSetAddress-DB-LLR-008' Lock will be set to HAL_UNLOCKED)
			VAR h_ltdc.Lock,						init = HAL_UNLOCKED,										ev = HAL_UNLOCKED

		--Stub Calls
		SIMUL

			--No Stubs
			
		END SIMUL

		--Calling unit under test
		#ret_HalLtdcSetAddress = HalLtdcSetAddress(&h_ltdc, address, layer_idx);
		
	END ELEMENT

END TEST -- TEST 1

TEST 2
FAMILY nominal

	COMMENT Test Description
	COMMENT <TD>
	COMMENT [hdulibstm32f7xxhalltdc-HalLtdcSetAddress-DB-LLR-001]
	COMMENT The function 'HalLtdcSetAddress' calls the macro '__HAL_LOCK' with h_ltdc as parameter 
	COMMENT The function returns HAL_BUSY when the Lock of h_ltdc is HAL_LOCKED
	COMMENT Equivalence Class 11
	COMMENT </TD>
	
	ELEMENT

		COMMENT INPUT SECTION:

			--LTDC Register base address(Handled)
			VAR h_ltdc.Instance,					init = &PTU_Instance_2,										ev = init

			--Tested for minimum value
			VAR layer_idx,							init = 0,													ev = init
			VAR address,							init = 1,													ev = init

			--LTDC Lock
			VAR h_ltdc.Lock,						init = HAL_LOCKED,											ev = init

		COMMENT OUTPUT SECTION:
			
			--return status of HalLtdcSetAddress
			VAR ret_HalLtdcSetAddress,				init = HAL_ERROR,											ev = HAL_BUSY	
						
		COMMENT INPUT/OUTPUT SECTION:
	
			--None

		--Stub Calls
		SIMUL

			--No Stubs
			
		END SIMUL

		--Calling unit under test
		#ret_HalLtdcSetAddress = HalLtdcSetAddress(&h_ltdc, address, layer_idx);
		
	END ELEMENT

END TEST -- TEST 2

TEST 3
FAMILY nominal

	COMMENT Test Description
	COMMENT <TD>
	COMMENT [hdulibstm32f7xxhalltdc-HalLtdcSetAddress-DB-LLR-003]
	COMMENT The function 'HalLtdcSetAddress'sets p_layer_cfg to LayerCfg with index layer_idx of h_ltdc 
	COMMENT Test case written to test array out of bound condition
	COMMENT Equivalence Class None
	COMMENT </TD>
	
	ELEMENT

		COMMENT INPUT SECTION:

			--LTDC Register base address(Handled)
			VAR h_ltdc.Instance,					init = &PTU_Instance_2,										ev = init
			
			--Tested for maximum value
			VAR layer_idx,							init = 0x00000001,											ev = init
			VAR address,							init = (T_UINT32)0xFFFFFFFF,								ev = init

		COMMENT OUTPUT SECTION:
			
			--return status of HalLtdcSetAddress
			VAR ret_HalLtdcSetAddress,				init = HAL_ERROR,											ev = HAL_OK	
						
		COMMENT INPUT/OUTPUT SECTION:
	
			--LTDC Lock(Expected and initialised values are same because, in LLR 'hdulibstm32f7xxhalltdc-HalLtdcSetAddress-DB-LLR-001'
			--Lock will be set to HAL_LOCKED and in LLR 'hdulibstm32f7xxhalltdc-HalLtdcSetAddress-DB-LLR-008' Lock will be set to HAL_UNLOCKED)
			VAR h_ltdc.Lock,						init = HAL_UNLOCKED,										ev = HAL_UNLOCKED
			
		--Stub Calls
		SIMUL

			--No Stubs
			
		END SIMUL

		--Calling unit under test
		#ret_HalLtdcSetAddress = HalLtdcSetAddress(&h_ltdc, address, layer_idx);
		
	END ELEMENT

END TEST -- TEST 3

TEST 4
FAMILY nominal

	COMMENT Test Description
	COMMENT <TD>
	COMMENT [hdulibstm32f7xxhalltdc-HalLtdcSetAddress-DB-LLR-003]
	COMMENT The function 'HalLtdcSetAddress'sets p_layer_cfg to LayerCfg with index layer_idx of h_ltdc 
	COMMENT Test case written to test layer_idx for nominal value
	COMMENT Equivalence Class None
	COMMENT </TD>
	
	ELEMENT

		COMMENT INPUT SECTION:

			--LTDC Register base address(Handled)
			VAR h_ltdc.Instance,					init = &PTU_Instance_2,										ev = init
			
			--Tested for nominal value
			VAR layer_idx,							init = 0x00000001,											ev = init
			VAR address,							init = 0x00001000,											ev = init

		COMMENT OUTPUT SECTION:
			
			--return status of HalLtdcSetAddress
			VAR ret_HalLtdcSetAddress,				init = HAL_ERROR,											ev = HAL_OK	
						
		COMMENT INPUT/OUTPUT SECTION:
	
			--LTDC Lock(Expected and initialised values are same because, in LLR 'hdulibstm32f7xxhalltdc-HalLtdcSetAddress-DB-LLR-001'
			--Lock will be set to HAL_LOCKED and in LLR 'hdulibstm32f7xxhalltdc-HalLtdcSetAddress-DB-LLR-008' Lock will be set to HAL_UNLOCKED)
			VAR h_ltdc.Lock,						init = HAL_UNLOCKED,										ev = HAL_UNLOCKED
			
		--Stub Calls
		SIMUL

			--No Stubs
			
		END SIMUL

		--Calling unit under test
		#ret_HalLtdcSetAddress = HalLtdcSetAddress(&h_ltdc, address, layer_idx);
		
	END ELEMENT

END TEST -- TEST 4

--TEST 5
--FAMILY robustness
--
--	COMMENT Test Description
--	COMMENT <TD>
--	COMMENT [hdulibstm32f7xxhalltdc-HalLtdcSetAddress-DB-LLR-001]
--	COMMENT This test case is written to test function parameter h_ltdc for NULL
--	COMMENT Equivalence Class 42
--	COMMENT </TD>
--	
--	ELEMENT
--
--		COMMENT INPUT SECTION:
--
--			--None
--			
--		COMMENT OUTPUT SECTION:
--			
--			--None			
--			
--		COMMENT INPUT/OUTPUT SECTION:
--				
--			--None			
--			
--		--Stub Calls
--		SIMUL
--
--			--No Stubs
--			
--		END SIMUL
--
--		--Calling unit under test
--		#ret_HalLtdcSetAddress = HalLtdcSetAddress(NULL, address, layer_idx);
--		
--	END ELEMENT
--
--END TEST -- TEST 5

END SERVICE -- HalLtdcSetAddress
--------------------------------------------------------------------------------
-- Declaration of the service HalLtdcEnableClut
--------------------------------------------------------------------------------
SERVICE HalLtdcEnableClut
SERVICE_TYPE extern

    -- Tested service parameters declarations
    #T_LTDC_HANDLE h_ltdc;
    #T_UINT32 layer_idx;
    -- By function returned type declaration
    #T_HAL_STATUS ret_HalLtdcEnableClut;
	#T_LTDC PTU_Instance_2[255];
	--Default Variables 
	ENVIRONMENT ENV_HalLtdcEnableClut

		STRUCTURE h_ltdc,						init = { Instance => NIL, Init => { HSPolarity => 0, VSPolarity => 0, DEPolarity => 0,
		&												 PCPolarity => 0, HorizontalSync => 0, VerticalSync => 0, AccumulatedHBP => 0,
		&												 AccumulatedVBP => 0, AccumulatedActiveW => 0, AccumulatedActiveH => 0, TotalWidth
		&												 => 0, TotalHeigh => 0, Backcolor => { Blue => 0, Green => 0, Red => 0, Reserved =>
		&												 0 } }, LayerCfg => { others => { WindowX0 => 0, WindowX1 => 0, WindowY0 => 0, 
		&												 WindowY1 => 0, PixelFormat => 0, Alpha => 0, Alpha0 => 0, BlendingFactor1 => 0, BlendingFactor2
		&												 => 0, FBStartAdress => 0, ImageWidth => 0, ImageHeight => 0, Backcolor => { Blue => 0, Green => 0,
		&												 Red => 0,Reserved => 0 } } }, Lock => HAL_UNLOCKED, State => HAL_LTDC_STATE_RESET, ErrorCode => 0 },
		&																												ev = init
		
		VAR layer_idx,							init = 0,																ev = init
		
		VAR ret_HalLtdcEnableClut,				init = HAL_OK,															ev = init

	END ENVIRONMENT -- ENV_HalLtdcEnableClut

	USE ENV_HalLtdcEnableClut
	
TEST 1
FAMILY nominal

	COMMENT Test Description
	COMMENT <TD>
	COMMENT [hdulibstm32f7xxhalltdc-HalLtdcEnableClut-DB-LLR-001]
	COMMENT The function 'HalLtdcEnableClut' calls the macro '__HAL_LOCK' with parameter h_ltdc
	COMMENT It sets Lock of h_ltdc to HAL_LOCKED
	COMMENT Equivalence Class 14
	COMMENT 
	COMMENT [hdulibstm32f7xxhalltdc-HalLtdcEnableClut-DB-LLR-002]
	COMMENT The function 'HalLtdcEnableClut'sets State of h_ltdc to HAL_LTDC_STATE_BUSY
	COMMENT Equivalence Class None
	COMMENT 
	COMMENT [hdulibstm32f7xxhalltdc-HalLtdcEnableClut-DB-LLR-003]
	COMMENT The function 'HalLtdcEnableClut' set CR of LTDC_LAYER with parameters h_ltdc and layer_idx to result of 
	COMMENT OR operation of CR of LTDC_LAYER with parameters h_ltdc and layer_idx and LTDC_LXCR_CLUTEN
	COMMENT Equivalence Class None
	COMMENT
	COMMENT [hdulibstm32f7xxhalltdc-HalLtdcEnableClut-DB-LLR-004]
	COMMENT The function 'HalLtdcEnableClut' sets SRCR of Instance of h_ltdc to LTDC_SRCR_IMR
	COMMENT Equivalence Class None
	COMMENT
	COMMENT [hdulibstm32f7xxhalltdc-HalLtdcEnableClut-DB-LLR-005]
	COMMENT The function 'HalLtdcEnableClut' sets State of h_ltdc to HAL_LTDC_STATE_READY
	COMMENT Equivalence Class None
	COMMENT
	COMMENT [hdulibstm32f7xxhalltdc-HalLtdcEnableClut-DB-LLR-006]
	COMMENT The function 'HalLtdcEnableClut' calls the macro '__HAL_UNLOCK' with parameter h_ltdc and returns HAL_OK
	COMMENT Equivalence Class 15,36
	COMMENT </TD>
	
	ELEMENT

		COMMENT INPUT SECTION:

			--LTDC Register base address
			VAR h_ltdc.Instance,					init = &PTU_Instance_2,										ev = init

			--Tested for minimum value
			VAR layer_idx,							init = 0,													ev = init

		COMMENT OUTPUT SECTION:
			
			--return status of HalLtdcEnableClut
			VAR ret_HalLtdcEnableClut,				init = HAL_ERROR,											ev = HAL_OK	
			
			--Holds state of h_ltdc 
			VAR h_ltdc.State,						init = HAL_LTDC_STATE_RESET,								ev = HAL_LTDC_STATE_READY

			--Holds CR of PTU_Instance_2
			VAR ((T_LTDC_LAYER *)((T_UINT32)((T_UINT32)&PTU_Instance_2+0x84)))->CR,			
			&										init = 0x00000000,											ev = LTDC_LXCR_CLUTEN

						
		COMMENT INPUT/OUTPUT SECTION:
	
			--LTDC Lock(Expected and initialised values are same because, in LLR 'hdulibstm32f7xxhalltdc-HalLtdcEnableClut-DB-LLR-001'
			--Lock will be set to HAL_LOCKED and in LLR 'hdulibstm32f7xxhalltdc-HalLtdcEnableClut-DB-LLR-006' Lock will be set to HAL_UNLOCKED)
			VAR h_ltdc.Lock,						init = HAL_UNLOCKED,										ev = HAL_UNLOCKED
			
		--Stub Calls
		SIMUL

			--No Stubs
			
		END SIMUL

		--Calling unit under test
		#ret_HalLtdcEnableClut = HalLtdcEnableClut(&h_ltdc, layer_idx);
	END ELEMENT

END TEST -- TEST 1

TEST 2
FAMILY nominal

	COMMENT Test Description
	COMMENT <TD>
	COMMENT [hdulibstm32f7xxhalltdc-HalLtdcEnableClut-DB-LLR-001]
	COMMENT The function 'HalLtdcEnableClut' calls the macro '__HAL_LOCK' with parameter h_ltdc
	COMMENT function returns HAL_BUSY when Lock of h_ltdc is HAL_LOCKED 
	COMMENT Equivalence Class 14
	COMMENT </TD>
	
	ELEMENT

		COMMENT INPUT SECTION:

			--LTDC Register base address
			VAR h_ltdc.Instance,										init = &PTU_Instance_2,					ev = init

			--Tested for maximum value
			VAR layer_idx,												init = 0x00000001,						ev = init

			--LTDC Lock
			VAR h_ltdc.Lock,											init = HAL_LOCKED,						ev = init
			
		COMMENT OUTPUT SECTION:
			
			--return status of HalLtdcEnableClut
			VAR ret_HalLtdcEnableClut,									init = HAL_ERROR,						ev = HAL_BUSY	
						
		COMMENT INPUT/OUTPUT SECTION:
	
			--None
			
		--Stub Calls
		SIMUL

			--No Stubs
			
		END SIMUL

		--Calling unit under test
		#ret_HalLtdcEnableClut = HalLtdcEnableClut(&h_ltdc, layer_idx);
		
	END ELEMENT

END TEST -- TEST 2

--TEST 3
--FAMILY robustness
--
--	COMMENT Test Description
--	COMMENT <TD>
--	COMMENT [hdulibstm32f7xxhalltdc-HalLtdcEnableClut-DB-LLR-001]
--	COMMENT This test case is written to test function parameter h_ltdc for NULL
--	COMMENT Equivalence Class 43
--	COMMENT </TD>
--	
--	ELEMENT
--
--		COMMENT INPUT SECTION:
--
--			--None
--			
--		COMMENT OUTPUT SECTION:
--
--			--None
--							
--		COMMENT INPUT/OUTPUT SECTION:
--	
--			--None
--			
--		--Stub Calls
--		SIMUL
--
--			--No Stubs
--			
--		END SIMUL
--
--		--Calling unit under test
--		#ret_HalLtdcEnableClut = HalLtdcEnableClut(NULL, layer_idx);
--		
--	END ELEMENT
--
--END TEST -- TEST 3

END SERVICE -- HalLtdcEnableClut











