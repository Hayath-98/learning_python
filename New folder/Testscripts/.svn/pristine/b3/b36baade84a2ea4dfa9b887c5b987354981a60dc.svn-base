HEADER hdulibstm32f7xxhalnor,Source Code Ver : 1.1,TestScript Ver : 1.3
--------------------------------------------------------------------------------
-- Author Name          : Pallavi V N
--
-- File Name            : hdulibstm32f7xxhalnor.ptu
--
-- Test Creation Date   : 16.10.2017
--
-- Tested Functions     : HalNorInit
--                        HalNorMspInit
-- 
-- Version History     :
--
-- TEST-VERSION        TEST-DATE       TESTER NAME        MODIFICATIONS
--  ------------       ---------       -----------        -------------
--     1.1             16.10.2017      Pallavi V N        Created the ptu file 
--     1.2             10.11.2017      Pallavi V N        Updated as per #PR100171 
--     1.3             15.11.2017      Pallavi V N        Updated as per #PR100171  
-------------------------------------------------------------------------------
--
-- TESTED FILE INCLUDE DIRECTIVES 
--
--------------------------------------------------------------------------------

#/*============================================================================*/
#/* Module specific includes                                                   */
#/*============================================================================*/ 

##include "hdulibstm32f7xxhalfmc.h" 
##include "hdulibstm32f7xxhalnor.h" 
##include "hdulibstm32f7xxhalconf.h"
##include "hdulibstm32f7xxhal.h"    
--------------------------------------------------------------------------------
--
-- TESTED FILE DECLARATIONS 
--
--------------------------------------------------------------------------------

-- Declarations of the global variables of the tested file
    #volatile  T_INT32 Itm_rx_buffer;
    
--Declaration of local variables  
    --This variable is created to verify parameter h_nor of 'Instance' function.
   #T_FMC_NORSRAM PTU_Instance_1;
    --This variable is created to verify parameter h_nor of 'Extended' function.
   #T_FMC_NORSRAM_EXTENDED PTU_Extended;
    --This variable is created to verify parameter device of 'FmcNorSramInit' function.
   #T_FMC_BANK1 PTU_device, PTU_device_out;
    --This variable is created to verify parameter device of 'FmcNorSramTimingInit' function.
   #T_FMC_BANK1 PTU_device_TimingInit, PTU_device_TimingInit_out;
    --This variable is created to verify parameter device of 'FmcNorSramExtendedTimingInit' function.
   #T_FMC_BANK1E PTU_device_ExtendedTimingInit, PTU_device_ExtendedTimingInit_out;
    --This variable is created to verify parameter init of 'FmcNorSramInit' function.
   #T_FMC_NORSRAM_INIT PTU_init;
    --This variable is created to verify parameter Timing of 'FmcNorSramExtendedTimingInit' function.
   #T_FMC_NORSRAM_TIMING PTU_ExtendedTimingInit;   
   -- Local variable is created to provide the maximum value of uint32   
   # T_UINT32 PTU_uint32_max= (T_UINT32)0xFFFFFFFF;
   
--------------------------------------------------------------------------------

BEGIN

    COMMENT Author name      : Pallavi V N
    COMMENT
    COMMENT File name        : hdulibstm32f7xxhalnor.ptu
    COMMENT
    COMMENT Tested functions : HalNorInit
    COMMENT                    HalNorMspInit
    COMMENT                    
    COMMENT Assumptions and Constraints
    COMMENT <AC>
    COMMENT Assumption(s):
    COMMENT None
    COMMENT
    COMMENT Constraint(s):
    COMMENT 
    COMMENT Following Test script related warnings are observed during Target 
    COMMENT Execution for volatile keyword member/variable:
    COMMENT warning #191-D: type qualifier is meaningless on cast type
    COMMENT
    COMMENT
    COMMENT</AC>
    
    COMMENT Equivalence Class Description
    COMMENT <ECD>
    COMMENT
    COMMENT Valid Class(es)
    COMMENT 
    COMMENT Class 1
    COMMENT In function 'HalNorInit', NOR handle parameter (hnor) is NULL. 
    COMMENT
    COMMENT Class 2
    COMMENT In function 'HalNorInit', NOR handle parameter (hnor) is not NULL.
    COMMENT
    COMMENT Class 3
    COMMENT In function 'HalNorInit', NOR device access state is HAL_NOR_STATE_RESET
    COMMENT
    COMMENT Class 4
    COMMENT In function 'HalNorInit', NOR device access state is other than HAL_NOR_STATE_RESET.
    COMMENT
    COMMENT Class 5
    COMMENT In function 'HalNorInit', function "HalNorMspInit" is called.    
    COMMENT
    COMMENT Class 6
    COMMENT In function 'HalNorInit', function "FmcNorSramInit" is called.  
    COMMENT
    COMMENT Class 7
    COMMENT In function 'HalNorInit', function "FmcNorSramTimingInit" is called.  
    COMMENT
    COMMENT Class 8
    COMMENT In function 'HalNorInit', function "FmcNorSramExtendedTimingInit" is called.  
    COMMENT
    COMMENT Class 9
    COMMENT In function 'HalNorInit', macro "__FMC_NORSRAM_ENABLE" is called.      
    COMMENT
    COMMENT Class 10
    COMMENT In function 'HalNorInit', external memory device width is FMC_NORSRAM_MEM_BUS_WIDTH_8.  
    COMMENT 
    COMMENT Class 11
    COMMENT In function 'HalNorInit', external memory device width is other than FMC_NORSRAM_MEM_BUS_WIDTH_8.    
    COMMENT     
    COMMENT Invalid Class(es)
    COMMENT  
    COMMENT Class 12
    COMMENT In function 'HalNorMspInit', NOR handle parameter (hnor) is NULL. 
    COMMENT  
    COMMENT Class 13
    COMMENT In function 'HalNorInit', parameter timing is NULL.
    COMMENT
    COMMENT Class 14
    COMMENT In function 'HalNorInit', parameter ext_timing is NULL.
    COMMENT  
    COMMENT </ECD>
--------------------------------------------------------------------------------
--
-- STUB DECLARATIONS OF THE TESTED OR INTEGRATED UNITS
--
--------------------------------------------------------------------------------
SIMUL
DEFINE STUB hdulibstm32f7xxhalnor_c
    -- Parameter Device is made as _no as it is verified explicitly
    #T_HAL_STATUS FmcNorSramExtendedTimingInit(T_FMC_BANK1E _no Device, T_FMC_NORSRAM_TIMING _in Timing, T_UINT32 _in Bank, T_UINT32 _in ExtendedMode)
    #{
    #    PTU_device_ExtendedTimingInit = *Device;
    #    PTU_ExtendedTimingInit = *Timing;
    #    *Device = PTU_device_ExtendedTimingInit_out;
    #}
    
    -- Parameter Device is made as _no as it is verified explicitly
    #T_HAL_STATUS FmcNorSramTimingInit(T_FMC_BANK1 _no Device, T_FMC_NORSRAM_TIMING _in Timing, T_UINT32 _in Bank)
    #{
    #    PTU_device_TimingInit = *Device;
    #    *Device = PTU_device_TimingInit_out;
    #}
    
    -- Parameters device and init are made as _no as it is verified explicitly
    #T_HAL_STATUS FmcNorSramInit(T_FMC_BANK1 _no device, T_FMC_NORSRAM_INIT _no init)
    #{
    #    PTU_device = *device;
    #    PTU_init = *init;
    #    *device = PTU_device_out;
    #}
END DEFINE

ELSE_SIMUL

        -- No action defined as of now if the module is not simulated

END SIMUL
--------------------------------------------------------------------------------
--
-- ENVIRONMENTS DECLARATIONS
--
--------------------------------------------------------------------------------
--IF HOST

-- No special things that have to be done on the host to run the test.

--ELSE

-- No action defined for the target execution as of now

--END IF
--------------------------------------------------------------------------------
-- TESTED FILE ENVIRONNEMENT
--------------------------------------------------------------------------------
--Environment of the hdulibstm32f7xxhalnor.c

--ENVIRONMENT ENV_hdulibstm32f7xxhalnor_c

    --None
    
--END ENVIRONMENT -- ENV_hdulibstm32f7xxhalnor_c
--USE ENV_hdulibstm32f7xxhalnor_c
--------------------------------------------------------------------------------
--
-- SERVICES DECLARATIONS
--
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
-- Declaration of the service HalNorInit
--------------------------------------------------------------------------------
SERVICE HalNorInit
SERVICE_TYPE extern

    -- Tested service parameters declarations
    #T_NOR_HANDLE_TYPE h_nor;
    #T_FMC_NORSRAM_TIMING timing;
    #T_FMC_NORSRAM_TIMING ext_timing;
    -- By function returned type declaration
    #T_HAL_STATUS ret_HalNorInit;

    ENVIRONMENT ENV_HalNorInit
    STRUCTURE PTU_Instance_1,   init = {others => 0x0}, ev = init
    STRUCTURE PTU_Extended,     init = {others => 0x0}, ev = init
    STRUCTURE h_nor,        init = { Instance => &PTU_Instance_1, 
    &                                Extended => &PTU_Extended, 
    &                                Init => { NSBank => 0, 
    &                                          DataAddressMux => 0, 
    &                                          MemoryType => 0, 
    &                                          MemoryDataWidth => 0,
    &                                          BurstAccessMode => 0,
    &                                          WaitSignalPolarity => 0, 
    &                                          WaitSignalActive => 0, 
    &                                          WriteOperation => 0, 
    &                                          WaitSignal => 0, 
    &                                          ExtendedMode => 0, 
    &                                          AsynchronousWait => 0,
    &                                          WriteBurst => 0, 
    &                                          ContinuousClock => 0,
    &                                          WriteFifo => 0, 
    &                                          PageSize => 0 }, 
    &                               Lock => HAL_UNLOCKED, 
    &                               State => HAL_NOR_STATE_RESET },     ev = init
    STRUCTURE timing,       init = { AddressSetupTime => 0, AddressHoldTime => 0, DataSetupTime => 0, 
    &                                BusTurnAroundDuration => 0, CLKDivision => 0, DataLatency => 0, AccessMode => 0 },        ev = init
    STRUCTURE ext_timing,   init = { AddressSetupTime => 0, AddressHoldTime => 0, DataSetupTime => 0, 
    &                                BusTurnAroundDuration => 0, CLKDivision => 0, DataLatency => 0, AccessMode => 0 },        ev = init
    VAR ret_HalNorInit,     init = HAL_OK,      ev = init
    
    END ENVIRONMENT -- ENV_HalNorInit
    USE ENV_HalNorInit

    TEST 1
    FAMILY nominal

    COMMENT Test Description
    COMMENT <TD>
    COMMENT [hdulibstm32f7xxhalnor-HalNorInit-DB-LLR-001]
    COMMENT The function 'HalNorInit' returns HAL_ERROR when NOR handle parameter (hnor) is NULL.
    COMMENT Equivalence Class 1
    COMMENT </TD>

    ELEMENT
                
        COMMENT INPUT SECTION:
        VAR timing,                 init = 10,                  ev = init
        VAR ext_timing,             init = 10,                  ev = init       
        
        COMMENT OUTPUT SECTION:
        VAR ret_HalNorInit,         init = HAL_OK,              ev = HAL_ERROR 

        COMMENT INPUT/OUTPUT SECTION:
        COMMENT None
        
        COMMENT Stub Calls:
        SIMUL   
        COMMENT None  

        END SIMUL

        -- Calling the Unit Under Test:
        #ret_HalNorInit = HalNorInit(NULL, &timing, &ext_timing);
    END ELEMENT

    END TEST -- TEST 1
    
    TEST 2
    FAMILY nominal

    COMMENT Test Description
    COMMENT <TD>
    COMMENT [hdulibstm32f7xxhalnor-HalNorInit-DB-LLR-001]
    COMMENT The function 'HalNorInit' does not return when NOR handle parameter (hnor) is not NULL.
    COMMENT Equivalence Class 2
    COMMENT
    COMMENT [hdulibstm32f7xxhalnor-HalNorInit-DB-LLR-002]
    COMMENT The function 'HalNorInit', does the following when NOR device access state is HAL_NOR_STATE_RESET
    COMMENT Sets NOR locking object as HAL_UNLOCKED
    COMMENT Calls HalNorMspInit with NOR handle parameter to initialize the low level hardware 
    COMMENT Equivalence Class 3, 5
    COMMENT
    COMMENT [hdulibstm32f7xxhalnor-HalNorInit-DB-LLR-003]
    COMMENT The function 'HalNorInit', calls the below functions:
    COMMENT Calls FmcNorSramInit to initialize NOR control Interface. 
    COMMENT Calls FmcNorSramTimingInit to initialize NOR timing Interface.
    COMMENT Calls FmcNorSramExtendedTimingInit to initialize NOR extended mode timing Interface.
    COMMENT Calls __FMC_NORSRAM_ENABLE to Enable the NORSRAM device.
    COMMENT Equivalence Class 6,7,8,9
    COMMENT
    COMMENT [hdulibstm32f7xxhalnor-HalNorInit-DB-LLR-004]  
    COMMENT The function 'HalNorInit', sets NOR Memory Data Width as NOR_MEMORY_8B when the external memory device 
    COMMENT width is FMC_NORSRAM_MEM_BUS_WIDTH_8.
    COMMENT Equivalence Class 10
    COMMENT
    COMMENT [hdulibstm32f7xxhalnor-HalNorInit-DB-LLR-006]
    COMMENT The function 'HalNorInit', sets the NOR controller state as HAL_NOR_STATE_READY.
    COMMENT Equivalence Class None
    COMMENT
    COMMENT [hdulibstm32f7xxhalnor-HalNorInit-DB-LLR-007]
    COMMENT The function 'HalNorInit', returns HAL_OK on success of NOR memory initialization.
    COMMENT Equivalence Class None
    COMMENT </TD>

    ELEMENT
                
        COMMENT INPUT SECTION:
        VAR timing,                 init = PTU_uint32_max,                  ev = init
        VAR ext_timing,             init = PTU_uint32_max,                  ev = init
        VAR h_nor,                  init =  { Instance => &PTU_Instance_1, 
        &                                     Extended => &PTU_Extended, 
        &                                     Init => {  NSBank => PTU_uint32_max, 
        &                                                DataAddressMux => PTU_uint32_max, 
        &                                                MemoryType => PTU_uint32_max, 
        &                                                MemoryDataWidth => FMC_NORSRAM_MEM_BUS_WIDTH_8,
        &                                                BurstAccessMode => PTU_uint32_max,
        &                                                WaitSignalPolarity => PTU_uint32_max, 
        &                                                WaitSignalActive => PTU_uint32_max, 
        &                                                WriteOperation => PTU_uint32_max, 
        &                                                WaitSignal => PTU_uint32_max, 
        &                                                ExtendedMode => PTU_uint32_max, 
        &                                                AsynchronousWait => PTU_uint32_max,
        &                                                WriteBurst => PTU_uint32_max, 
        &                                                ContinuousClock => PTU_uint32_max,
        &                                                WriteFifo => PTU_uint32_max, 
        &                                                PageSize => PTU_uint32_max }, 
        &                                                Lock => HAL_LOCKED, 
        &                                                State => HAL_NOR_STATE_RESET },     
        &
        &                               ev = { Instance => &PTU_Instance_1, 
        &                                      Extended => &PTU_Extended, 
        &                                      Init => { NSBank => PTU_uint32_max, 
        &                                               DataAddressMux => PTU_uint32_max, 
        &                                               MemoryType => PTU_uint32_max, 
        &                                               MemoryDataWidth => FMC_NORSRAM_MEM_BUS_WIDTH_8,
        &                                               BurstAccessMode => PTU_uint32_max,
        &                                               WaitSignalPolarity => PTU_uint32_max, 
        &                                               WaitSignalActive => PTU_uint32_max, 
        &                                               WriteOperation => PTU_uint32_max, 
        &                                               WaitSignal => PTU_uint32_max, 
        &                                               ExtendedMode => PTU_uint32_max, 
        &                                               AsynchronousWait => PTU_uint32_max,
        &                                               WriteBurst => PTU_uint32_max, 
        &                                               ContinuousClock => PTU_uint32_max,
        &                                               WriteFifo => PTU_uint32_max, 
        &                                               PageSize => PTU_uint32_max }, 
        &                                               Lock => HAL_UNLOCKED, 
        &                                               State => HAL_NOR_STATE_READY }

        STRUCTURE PTU_Instance_1,   init = {others => PTU_uint32_max}, ev = {others=>0x0}
        STRUCTURE PTU_Extended,     init = {others => PTU_uint32_max}, ev = {others=>0x0}     

        VAR PTU_device_out,             init = {others=>0x0},               ev = init        
        VAR PTU_device_TimingInit_out,  init = {others=> 0x0},              ev = init
        VAR PTU_device_ExtendedTimingInit_out,  init = {others=> 0x0},      ev = init

        COMMENT OUTPUT SECTION:
        VAR ret_HalNorInit,         init = HAL_ERROR,           ev = HAL_OK 
        VAR PTU_device,             init = {others=>0x0},       ev = {others=>PTU_uint32_max}
        VAR PTU_init,               init = {others=>0x0},       ev = {MemoryDataWidth => FMC_NORSRAM_MEM_BUS_WIDTH_8,others=>PTU_uint32_max}
        VAR PTU_device_TimingInit,  init = {others=>0x1},       ev = {others=>0x0}
        VAR PTU_device_ExtendedTimingInit,  init = {others=>0x0},   ev = {others=>PTU_uint32_max}

        COMMENT INPUT/OUTPUT SECTION:
        COMMENT None

        COMMENT Stub Calls:
        SIMUL   

        STUB FmcNorSramInit()HAL_OK
        STUB FmcNorSramTimingInit(PTU_uint32_max,PTU_uint32_max)HAL_OK
        STUB FmcNorSramExtendedTimingInit(PTU_uint32_max,PTU_uint32_max, PTU_uint32_max)HAL_OK

        END SIMUL

        -- Calling the Unit Under Test:
        #ret_HalNorInit = HalNorInit(&h_nor, &timing, &ext_timing);
    END ELEMENT

    END TEST -- TEST 2 
    
    TEST 3
    FAMILY nominal

    COMMENT Test Description
    COMMENT <TD>
    COMMENT [hdulibstm32f7xxhalnor-HalNorInit-DB-LLR-001]
    COMMENT The function 'HalNorInit' does not return when NOR handle parameter (hnor) is not NULL.
    COMMENT Equivalence Class 2
    COMMENT
    COMMENT [hdulibstm32f7xxhalnor-HalNorInit-DB-LLR-002]
    COMMENT The function 'HalNorInit', does the following when NOR device access state is HAL_NOR_STATE_RESET
    COMMENT Sets NOR locking object as HAL_UNLOCKED
    COMMENT Calls HalNorMspInit with NOR handle parameter to initialize the low level hardware 
    COMMENT Equivalence Class 3, 5
    COMMENT
    COMMENT [hdulibstm32f7xxhalnor-HalNorInit-DB-LLR-003]
    COMMENT The function 'HalNorInit', calls the below functions:
    COMMENT Calls FmcNorSramInit to initialize NOR control Interface. 
    COMMENT Calls FmcNorSramTimingInit to initialize NOR timing Interface.
    COMMENT Calls FmcNorSramExtendedTimingInit to initialize NOR extended mode timing Interface.
    COMMENT Calls __FMC_NORSRAM_ENABLE to Enable the NORSRAM device.
    COMMENT Equivalence Class 6,7,8,9
    COMMENT
    COMMENT [hdulibstm32f7xxhalnor-HalNorInit-DB-LLR-005]  
    COMMENT The function 'HalNorInit', sets NOR Memory Data Width as NOR_MEMORY_16B when the external memory device 
    COMMENT width is other than FMC_NORSRAM_MEM_BUS_WIDTH_8.
    COMMENT Equivalence Class 11
    COMMENT
    COMMENT [hdulibstm32f7xxhalnor-HalNorInit-DB-LLR-006]
    COMMENT The function 'HalNorInit', sets the NOR controller state as HAL_NOR_STATE_READY.
    COMMENT Equivalence Class None
    COMMENT
    COMMENT [hdulibstm32f7xxhalnor-HalNorInit-DB-LLR-007]
    COMMENT The function 'HalNorInit', returns HAL_OK on success of NOR memory initialization.
    COMMENT Equivalence Class None
    COMMENT </TD>

    ELEMENT
                
        COMMENT INPUT SECTION:
        VAR timing,                 init = 0x0,                  ev = init
        VAR ext_timing,             init = 0x0,                  ev = init
        VAR h_nor,                  init =  { Instance => &PTU_Instance_1, 
        &                                     Extended => &PTU_Extended, 
        &                                     Init => { NSBank => 0x0, 
        &                                               DataAddressMux => 0x0, 
        &                                               MemoryType => 0x0, 
        &                                               MemoryDataWidth => FMC_NORSRAM_MEM_BUS_WIDTH_16,
        &                                               BurstAccessMode => 0x0,
        &                                               WaitSignalPolarity => 0x0, 
        &                                               WaitSignalActive => 0x0, 
        &                                               WriteOperation => 0x0, 
        &                                               WaitSignal => 0x0, 
        &                                               ExtendedMode => 0x0, 
        &                                               AsynchronousWait => 0x0,
        &                                               WriteBurst => 0x0, 
        &                                               ContinuousClock => 0x0,
        &                                               WriteFifo => 0x0, 
        &                                               PageSize => 0x0 }, 
        &                                               Lock => HAL_LOCKED, 
        &                                               State => HAL_NOR_STATE_RESET },     
        &
        &                          ev = { Instance => &PTU_Instance_1, 
        &                                 Extended => &PTU_Extended, 
        &                                 Init => { NSBank => 0x0, 
        &                                           DataAddressMux => 0x0, 
        &                                           MemoryType => 0x0, 
        &                                           MemoryDataWidth => FMC_NORSRAM_MEM_BUS_WIDTH_16,
        &                                           BurstAccessMode => 0x0,
        &                                           WaitSignalPolarity => 0x0, 
        &                                           WaitSignalActive => 0x0, 
        &                                           WriteOperation => 0x0, 
        &                                           WaitSignal => 0x0, 
        &                                           ExtendedMode => 0x0, 
        &                                           AsynchronousWait => 0x0,
        &                                           WriteBurst => 0x0, 
        &                                           ContinuousClock => 0x0,
        &                                           WriteFifo => 0x0, 
        &                                           PageSize => 0x0 }, 
        &                                           Lock => HAL_UNLOCKED, 
        &                                           State => HAL_NOR_STATE_READY }

        STRUCTURE PTU_Instance_1,   init = {others => 0x0}, ev = {others=> PTU_uint32_max}
        STRUCTURE PTU_Extended,     init = {others => 0x0}, ev = {others=> PTU_uint32_max}     

        VAR PTU_device_out,             init = {others=>PTU_uint32_max},      ev = init        
        VAR PTU_device_TimingInit_out,  init = {others=> PTU_uint32_max},   ev = init
        VAR PTU_device_ExtendedTimingInit_out,  init = {others=> PTU_uint32_max},   ev = init

        COMMENT OUTPUT SECTION:
        VAR ret_HalNorInit,         init = HAL_ERROR,              ev = HAL_OK 
        VAR PTU_device,             init = {others=>0x1},       ev = {others=>0x0}
        VAR PTU_init,               init = {others=>0x1},       ev = {MemoryDataWidth => FMC_NORSRAM_MEM_BUS_WIDTH_16,others=>0x0}
        VAR PTU_device_TimingInit,  init = {others=>0x0},       ev = {others=>PTU_uint32_max}
        VAR PTU_device_ExtendedTimingInit,  init = {others=>0x1},   ev = {others=>0x0}

        COMMENT INPUT/OUTPUT SECTION:
        COMMENT None

        COMMENT Stub Calls:
        SIMUL   

        STUB FmcNorSramInit()HAL_TIMEOUT
        STUB FmcNorSramTimingInit(0x0,0x0)HAL_TIMEOUT
        STUB FmcNorSramExtendedTimingInit(0x0,0x0, 0x0)HAL_TIMEOUT

        END SIMUL

        -- Calling the Unit Under Test:
        #ret_HalNorInit = HalNorInit(&h_nor, &timing, &ext_timing);
    END ELEMENT

    END TEST -- TEST 3 
    
    TEST 4
    FAMILY nominal

    COMMENT Test Description
    COMMENT <TD>
    COMMENT [hdulibstm32f7xxhalnor-HalNorInit-DB-LLR-001]
    COMMENT The function 'HalNorInit' does not return when NOR handle parameter (hnor) is not NULL.
    COMMENT Equivalence Class 2
    COMMENT
    COMMENT [hdulibstm32f7xxhalnor-HalNorInit-DB-LLR-002]
    COMMENT The function 'HalNorInit', does the following when NOR device access state is HAL_NOR_STATE_RESET
    COMMENT Sets NOR locking object as HAL_UNLOCKED
    COMMENT Calls HalNorMspInit with NOR handle parameter to initialize the low level hardware 
    COMMENT Equivalence Class 3, 5
    COMMENT
    COMMENT [hdulibstm32f7xxhalnor-HalNorInit-DB-LLR-003]
    COMMENT The function 'HalNorInit', calls the below functions:
    COMMENT Calls FmcNorSramInit to initialize NOR control Interface. 
    COMMENT Calls FmcNorSramTimingInit to initialize NOR timing Interface.
    COMMENT Calls FmcNorSramExtendedTimingInit to initialize NOR extended mode timing Interface.
    COMMENT Calls __FMC_NORSRAM_ENABLE to Enable the NORSRAM device.
    COMMENT Equivalence Class 6,7,8,9
    COMMENT
    COMMENT [hdulibstm32f7xxhalnor-HalNorInit-DB-LLR-005]  
    COMMENT The function 'HalNorInit', sets NOR Memory Data Width as NOR_MEMORY_16B when the external memory device 
    COMMENT width is other than FMC_NORSRAM_MEM_BUS_WIDTH_8.
    COMMENT Equivalence Class 11
    COMMENT
    COMMENT [hdulibstm32f7xxhalnor-HalNorInit-DB-LLR-006]
    COMMENT The function 'HalNorInit', sets the NOR controller state as HAL_NOR_STATE_READY.
    COMMENT Equivalence Class None
    COMMENT
    COMMENT [hdulibstm32f7xxhalnor-HalNorInit-DB-LLR-007]
    COMMENT The function 'HalNorInit', returns HAL_OK on success of NOR memory initialization.
    COMMENT Equivalence Class None
    COMMENT </TD>

    ELEMENT
                
        COMMENT INPUT SECTION:
        VAR timing,                 init = 0x10,                  ev = init
        VAR ext_timing,             init = 0x20,                  ev = init
        VAR h_nor,                  init =  { Instance => &PTU_Instance_1, 
        &                                       Extended => &PTU_Extended, 
        &                                       Init => { NSBank => 0x30, 
        &                                       DataAddressMux => 0x40, 
        &                                       MemoryType => 0x50, 
        &                                       MemoryDataWidth => FMC_NORSRAM_MEM_BUS_WIDTH_32,
        &                                       BurstAccessMode => 0x60,
        &                                       WaitSignalPolarity => 0x70, 
        &                                       WaitSignalActive => 0x80, 
        &                                       WriteOperation => 0x90, 
        &                                       WaitSignal => 0x100, 
        &                                       ExtendedMode => 0x120, 
        &                                       AsynchronousWait => 0x130,
        &                                       WriteBurst => 0x140, 
        &                                       ContinuousClock => 0x150,
        &                                       WriteFifo => 0x160, 
        &                                       PageSize => 0x170 }, 
        &                                       Lock => HAL_LOCKED, 
        &                                       State => HAL_NOR_STATE_RESET },     
        &
        &                                ev = { Instance => &PTU_Instance_1, 
        &                                       Extended => &PTU_Extended, 
        &                                       Init => { NSBank => 0x30, 
        &                                       DataAddressMux => 0x40, 
        &                                       MemoryType => 0x50, 
        &                                       MemoryDataWidth => FMC_NORSRAM_MEM_BUS_WIDTH_32,
        &                                       BurstAccessMode => 0x60,
        &                                       WaitSignalPolarity => 0x70, 
        &                                       WaitSignalActive => 0x80, 
        &                                       WriteOperation => 0x90, 
        &                                       WaitSignal => 0x100, 
        &                                       ExtendedMode => 0x120, 
        &                                       AsynchronousWait => 0x130,
        &                                       WriteBurst => 0x140, 
        &                                       ContinuousClock => 0x150,
        &                                       WriteFifo => 0x160, 
        &                                       PageSize => 0x170 }, 
        &                                       Lock => HAL_UNLOCKED, 
        &                                       State => HAL_NOR_STATE_READY }

        STRUCTURE PTU_Instance_1,   init = {others => 0x180}, ev = {others=> 0x300}
        STRUCTURE PTU_Extended,     init = {others => 0x190}, ev = {others=> 0x400}     

        VAR PTU_device_out,             init = {others=>0x200},      ev = init        
        VAR PTU_device_TimingInit_out,  init = {others=> 0x300},   ev = init
        VAR PTU_device_ExtendedTimingInit_out,  init = {others=> 0x400},   ev = init

        COMMENT OUTPUT SECTION:
        VAR ret_HalNorInit,         init = HAL_ERROR,           ev = HAL_OK 
        VAR PTU_device,             init = {others=>0x1},       ev = {others=>0x180}
        VAR PTU_init,               init = {others=>0x1},       ev = { NSBank => 0x30, 
        &                                          DataAddressMux => 0x40, 
        &                                          MemoryType => 0x50, 
        &                                          MemoryDataWidth => FMC_NORSRAM_MEM_BUS_WIDTH_32,
        &                                          BurstAccessMode => 0x60,
        &                                          WaitSignalPolarity => 0x70, 
        &                                          WaitSignalActive => 0x80, 
        &                                          WriteOperation => 0x90, 
        &                                          WaitSignal => 0x100, 
        &                                          ExtendedMode => 0x120, 
        &                                          AsynchronousWait => 0x130,
        &                                          WriteBurst => 0x140, 
        &                                          ContinuousClock => 0x150,
        &                                          WriteFifo => 0x160, 
        &                                          PageSize => 0x170 }, 
        VAR PTU_device_TimingInit,  init = {others=>0x0},       ev = {others=>0x200}
        VAR PTU_device_ExtendedTimingInit,  init = {others=>0x1},   ev = {others=>0x190}

        COMMENT INPUT/OUTPUT SECTION:
        COMMENT None

        COMMENT Stub Calls:
        SIMUL   

        STUB FmcNorSramInit()HAL_BUSY
        STUB FmcNorSramTimingInit(0x10,0x30)HAL_BUSY
        STUB FmcNorSramExtendedTimingInit(0x20,0x30, 0x120)HAL_BUSY

        END SIMUL

        -- Calling the Unit Under Test:
        #ret_HalNorInit = HalNorInit(&h_nor, &timing, &ext_timing);
    END ELEMENT

    END TEST -- TEST 4 
    
    TEST 5
    FAMILY nominal

    COMMENT Test Description
    COMMENT <TD>
    COMMENT [hdulibstm32f7xxhalnor-HalNorInit-DB-LLR-001]
    COMMENT The function 'HalNorInit' does not return when NOR handle parameter (hnor) is not NULL.
    COMMENT Equivalence Class 2
    COMMENT
    COMMENT [hdulibstm32f7xxhalnor-HalNorInit-DB-LLR-002]
    COMMENT The function 'HalNorInit', does not perform the following when NOR device access 
    COMMENT state is other than HAL_NOR_STATE_RESET
    COMMENT Sets NOR locking object as HAL_UNLOCKED
    COMMENT Calls HalNorMspInit with NOR handle parameter to initialize the low level hardware 
    COMMENT Equivalence Class 4
    COMMENT
    COMMENT [hdulibstm32f7xxhalnor-HalNorInit-DB-LLR-003]
    COMMENT The function 'HalNorInit', calls the below functions:
    COMMENT Calls FmcNorSramInit to initialize NOR control Interface. 
    COMMENT Calls FmcNorSramTimingInit to initialize NOR timing Interface.
    COMMENT Calls FmcNorSramExtendedTimingInit to initialize NOR extended mode timing Interface.
    COMMENT Calls __FMC_NORSRAM_ENABLE to Enable the NORSRAM device.
    COMMENT Equivalence Class 6,7,8,9
    COMMENT
    COMMENT [hdulibstm32f7xxhalnor-HalNorInit-DB-LLR-004]  
    COMMENT The function 'HalNorInit', sets NOR Memory Data Width as NOR_MEMORY_8B when the external memory device 
    COMMENT width is FMC_NORSRAM_MEM_BUS_WIDTH_8.
    COMMENT Equivalence Class 10
    COMMENT
    COMMENT [hdulibstm32f7xxhalnor-HalNorInit-DB-LLR-006]
    COMMENT The function 'HalNorInit', sets the NOR controller state as HAL_NOR_STATE_READY.
    COMMENT Equivalence Class None
    COMMENT
    COMMENT [hdulibstm32f7xxhalnor-HalNorInit-DB-LLR-007]
    COMMENT The function 'HalNorInit', returns HAL_OK on success of NOR memory initialization.
    COMMENT Equivalence Class None
    COMMENT </TD>

    ELEMENT
                
        COMMENT INPUT SECTION:
        VAR timing,                 init = PTU_uint32_max,                  ev = init
        VAR ext_timing,             init = PTU_uint32_max,                  ev = init
        VAR h_nor,                  init =  { Instance => &PTU_Instance_1, 
        &                                   Extended => &PTU_Extended, 
        &                                   Init => { NSBank => PTU_uint32_max, 
        &                                          DataAddressMux => PTU_uint32_max, 
        &                                          MemoryType => PTU_uint32_max, 
        &                                          MemoryDataWidth => FMC_NORSRAM_MEM_BUS_WIDTH_8,
        &                                          BurstAccessMode => PTU_uint32_max,
        &                                          WaitSignalPolarity => PTU_uint32_max, 
        &                                          WaitSignalActive => PTU_uint32_max, 
        &                                          WriteOperation => PTU_uint32_max, 
        &                                          WaitSignal => PTU_uint32_max, 
        &                                          ExtendedMode => PTU_uint32_max, 
        &                                          AsynchronousWait => PTU_uint32_max,
        &                                          WriteBurst => PTU_uint32_max, 
        &                                          ContinuousClock => PTU_uint32_max,
        &                                          WriteFifo => PTU_uint32_max, 
        &                                          PageSize => PTU_uint32_max }, 
        &                                          Lock => HAL_LOCKED, 
        &                                          State => HAL_NOR_STATE_PROTECTED },
        &
        &                                          ev = { Instance => &PTU_Instance_1, 
        &                                          Extended => &PTU_Extended, 
        &                                          Init => { NSBank => PTU_uint32_max, 
        &                                          DataAddressMux => PTU_uint32_max, 
        &                                          MemoryType => PTU_uint32_max, 
        &                                          MemoryDataWidth => FMC_NORSRAM_MEM_BUS_WIDTH_8,
        &                                          BurstAccessMode => PTU_uint32_max,
        &                                          WaitSignalPolarity => PTU_uint32_max, 
        &                                          WaitSignalActive => PTU_uint32_max, 
        &                                          WriteOperation => PTU_uint32_max, 
        &                                          WaitSignal => PTU_uint32_max, 
        &                                          ExtendedMode => PTU_uint32_max, 
        &                                          AsynchronousWait => PTU_uint32_max,
        &                                          WriteBurst => PTU_uint32_max, 
        &                                          ContinuousClock => PTU_uint32_max,
        &                                          WriteFifo => PTU_uint32_max, 
        &                                          PageSize => PTU_uint32_max }, 
        &                                          Lock => HAL_LOCKED, 
        &                                          State => HAL_NOR_STATE_READY }

        STRUCTURE PTU_Instance_1,   init = {others => PTU_uint32_max}, ev = {others=>0x0}
        STRUCTURE PTU_Extended,     init = {others => PTU_uint32_max}, ev = {others=>0x0}     

        VAR PTU_device_out,             init = {others=>0x0},      ev = init        
        VAR PTU_device_TimingInit_out,  init = {others=> 0x0},   ev = init
        VAR PTU_device_ExtendedTimingInit_out,  init = {others=> 0x0},   ev = init

        COMMENT OUTPUT SECTION:
        VAR ret_HalNorInit,         init = HAL_ERROR,              ev = HAL_OK 
        VAR PTU_device,             init = {others=>0x0},       ev = {others=>PTU_uint32_max}
        VAR PTU_init,               init = {others=>0x0},       ev = {MemoryDataWidth => FMC_NORSRAM_MEM_BUS_WIDTH_8,others=>PTU_uint32_max}
        VAR PTU_device_TimingInit,  init = {others=>0x1},       ev = {others=>0x0}
        VAR PTU_device_ExtendedTimingInit,  init = {others=>0x0},   ev = {others=>PTU_uint32_max}

        COMMENT INPUT/OUTPUT SECTION:
        COMMENT None

        COMMENT Stub Calls:
        SIMUL   

        STUB FmcNorSramInit()HAL_OK
        STUB FmcNorSramTimingInit(PTU_uint32_max,PTU_uint32_max)HAL_OK
        STUB FmcNorSramExtendedTimingInit(PTU_uint32_max,PTU_uint32_max, PTU_uint32_max)HAL_OK

        END SIMUL

        -- Calling the Unit Under Test:
        #ret_HalNorInit = HalNorInit(&h_nor, &timing, &ext_timing);
    END ELEMENT

    END TEST -- TEST 5  
    
--    TEST 6
--    FAMILY robustness
--    
--    COMMENT Test Description
--    COMMENT <TD>
--    COMMENT [hdulibstm32f7xxhalnor-HalNorInit-DB-LLR-001]
--    COMMENT In function "HalNorInit" parameter "timing" is exercised for NULL value.
--    COMMENT Equivalence Class 13
--    COMMENT 
--    COMMENT Note: Test case is commented since it is crashing
--    COMMENT 
--    COMMENT </TD>
--
--    ELEMENT
--                
--        COMMENT INPUT SECTION:
--        VAR ext_timing,             init = 0x0,                  ev = init
--        VAR h_nor,                  init =  { Instance => &PTU_Instance_1, 
--        &                                           Extended => &PTU_Extended, 
--        &                                           Init => { NSBank => 0x0, 
--        &                                           DataAddressMux => 0x0, 
--        &                                           MemoryType => 0x0, 
--        &                                           MemoryDataWidth => FMC_NORSRAM_MEM_BUS_WIDTH_16,
--        &                                           BurstAccessMode => 0x0,
--        &                                           WaitSignalPolarity => 0x0, 
--        &                                           WaitSignalActive => 0x0, 
--        &                                           WriteOperation => 0x0, 
--        &                                           WaitSignal => 0x0, 
--        &                                           ExtendedMode => 0x0, 
--        &                                           AsynchronousWait => 0x0,
--        &                                           WriteBurst => 0x0, 
--        &                                           ContinuousClock => 0x0,
--        &                                           WriteFifo => 0x0, 
--        &                                           PageSize => 0x0 }, 
--        &                                           Lock => HAL_LOCKED, 
--        &                                           State => HAL_NOR_STATE_RESET },     
--        &
--        &                          ev = { Instance => &PTU_Instance_1, 
--        &                                           Extended => &PTU_Extended, 
--        &                                           Init => { NSBank => 0x0, 
--        &                                           DataAddressMux => 0x0, 
--        &                                           MemoryType => 0x0, 
--        &                                           MemoryDataWidth => FMC_NORSRAM_MEM_BUS_WIDTH_16,
--        &                                           BurstAccessMode => 0x0,
--        &                                           WaitSignalPolarity => 0x0, 
--        &                                           WaitSignalActive => 0x0, 
--        &                                           WriteOperation => 0x0, 
--        &                                           WaitSignal => 0x0, 
--        &                                           ExtendedMode => 0x0, 
--        &                                           AsynchronousWait => 0x0,
--        &                                           WriteBurst => 0x0, 
--        &                                           ContinuousClock => 0x0,
--        &                                           WriteFifo => 0x0, 
--        &                                           PageSize => 0x0 }, 
--        &                                           Lock => HAL_UNLOCKED, 
--        &                                           State => HAL_NOR_STATE_READY }
--
--        STRUCTURE PTU_Instance_1,   init = {others => 0x0}, ev = {others=> PTU_uint32_max}
--        STRUCTURE PTU_Extended,     init = {others => 0x0}, ev = {others=> PTU_uint32_max}     
--
--        VAR PTU_device_out,             init = {others=>PTU_uint32_max},      ev = init        
--        VAR PTU_device_TimingInit_out,  init = {others=> PTU_uint32_max},   ev = init
--        VAR PTU_device_ExtendedTimingInit_out,  init = {others=> PTU_uint32_max},   ev = init
--
--        COMMENT OUTPUT SECTION:
--        VAR ret_HalNorInit,         init = HAL_ERROR,              ev = HAL_OK 
--        VAR PTU_device,             init = {others=>0x1},       ev = {others=>0x0}
--        VAR PTU_init,               init = {others=>0x1},       ev = {MemoryDataWidth => FMC_NORSRAM_MEM_BUS_WIDTH_16,others=>0x0}
--        VAR PTU_device_TimingInit,  init = {others=>0x0},       ev = {others=>PTU_uint32_max}
--        VAR PTU_device_ExtendedTimingInit,  init = {others=>0x1},   ev = {others=>0x0}
--
--        COMMENT INPUT/OUTPUT SECTION:
--        COMMENT None
--
--        COMMENT Stub Calls:
--        SIMUL   
--
--        STUB FmcNorSramInit()HAL_TIMEOUT
--        STUB FmcNorSramTimingInit(0x0,0x0)HAL_TIMEOUT
--        STUB FmcNorSramExtendedTimingInit(0x0,0x0, 0x0)HAL_TIMEOUT
--
--        END SIMUL
--
--        -- Calling the Unit Under Test:
--        #ret_HalNorInit = HalNorInit(&h_nor, NULL, &ext_timing);
--    END ELEMENT
--
--    END TEST -- TEST 6  
    
--    TEST 7
--    FAMILY robustness
--
--    COMMENT Test Description
--    COMMENT <TD>
--    COMMENT [hdulibstm32f7xxhalnor-HalNorInit-DB-LLR-001]
--    COMMENT In function "HalNorInit" parameter "ext_timing" is exercised for NULL value.
--    COMMENT Equivalence Class 14
--    COMMENT 
--    COMMENT Note: Test case is commented since it is crashing
--    COMMENT 
--    COMMENT </TD>
--
--    ELEMENT
--                
--        COMMENT INPUT SECTION:
--        VAR ext_timing,             init = 0x0,                  ev = init
--        VAR h_nor,                  init =  { Instance => &PTU_Instance_1, 
--        &                                           Extended => &PTU_Extended, 
--        &                                           Init => { NSBank => 0x0, 
--        &                                           DataAddressMux => 0x0, 
--        &                                           MemoryType => 0x0, 
--        &                                           MemoryDataWidth => FMC_NORSRAM_MEM_BUS_WIDTH_16,
--        &                                           BurstAccessMode => 0x0,
--        &                                           WaitSignalPolarity => 0x0, 
--        &                                           WaitSignalActive => 0x0, 
--        &                                           WriteOperation => 0x0, 
--        &                                           WaitSignal => 0x0, 
--        &                                           ExtendedMode => 0x0, 
--        &                                           AsynchronousWait => 0x0,
--        &                                           WriteBurst => 0x0, 
--        &                                           ContinuousClock => 0x0,
--        &                                           WriteFifo => 0x0, 
--        &                                           PageSize => 0x0 }, 
--        &                                           Lock => HAL_LOCKED, 
--        &                                           State => HAL_NOR_STATE_RESET },     
--        &
--        &                          ev = { Instance => &PTU_Instance_1, 
--        &                                           Extended => &PTU_Extended, 
--        &                                           Init => { NSBank => 0x0, 
--        &                                           DataAddressMux => 0x0, 
--        &                                           MemoryType => 0x0, 
--        &                                           MemoryDataWidth => FMC_NORSRAM_MEM_BUS_WIDTH_16,
--        &                                           BurstAccessMode => 0x0,
--        &                                           WaitSignalPolarity => 0x0, 
--        &                                           WaitSignalActive => 0x0, 
--        &                                           WriteOperation => 0x0, 
--        &                                           WaitSignal => 0x0, 
--        &                                           ExtendedMode => 0x0, 
--        &                                           AsynchronousWait => 0x0,
--        &                                           WriteBurst => 0x0, 
--        &                                           ContinuousClock => 0x0,
--        &                                           WriteFifo => 0x0, 
--        &                                           PageSize => 0x0 }, 
--        &                                           Lock => HAL_UNLOCKED, 
--        &                                           State => HAL_NOR_STATE_READY }
--
--        STRUCTURE PTU_Instance_1,   init = {others => 0x0}, ev = {others=> PTU_uint32_max}
--        STRUCTURE PTU_Extended,     init = {others => 0x0}, ev = {others=> PTU_uint32_max}     
--
--        VAR PTU_device_out,             init = {others=>PTU_uint32_max},      ev = init        
--        VAR PTU_device_TimingInit_out,  init = {others=> PTU_uint32_max},   ev = init
--        VAR PTU_device_ExtendedTimingInit_out,  init = {others=> PTU_uint32_max},   ev = init
--
--        COMMENT OUTPUT SECTION:
--        VAR ret_HalNorInit,         init = HAL_ERROR,              ev = HAL_OK 
--        VAR PTU_device,             init = {others=>0x1},       ev = {others=>0x0}
--        VAR PTU_init,               init = {others=>0x1},       ev = {MemoryDataWidth => FMC_NORSRAM_MEM_BUS_WIDTH_16,others=>0x0}
--        VAR PTU_device_TimingInit,  init = {others=>0x0},       ev = {others=>PTU_uint32_max}
--        VAR PTU_device_ExtendedTimingInit,  init = {others=>0x1},   ev = {others=>0x0}
--
--        COMMENT INPUT/OUTPUT SECTION:
--        COMMENT None
--
--        COMMENT Stub Calls:
--        SIMUL   
--
--        STUB FmcNorSramInit()HAL_TIMEOUT
--        STUB FmcNorSramTimingInit(0x0,0x0)HAL_TIMEOUT
--        STUB FmcNorSramExtendedTimingInit(0x0,0x0, 0x0)HAL_TIMEOUT
--
--        END SIMUL
--
--        -- Calling the Unit Under Test:
--        #ret_HalNorInit = HalNorInit(&h_nor, &timing, NULL);
--    END ELEMENT
--
--    END TEST -- TEST 7

END SERVICE -- HalNorInit

--------------------------------------------------------------------------------
-- Declaration of the service HalNorMspInit
--------------------------------------------------------------------------------
SERVICE HalNorMspInit
SERVICE_TYPE extern

    -- Tested service parameters declarations
    #T_NOR_HANDLE_TYPE h_nor;

    ENVIRONMENT ENV_HalNorMspInit
    STRUCTURE h_nor,        init = { Instance => &PTU_Instance_1, 
    &                                Extended => &PTU_Extended, 
    &                                Init => { NSBank => 0, 
    &                                          DataAddressMux => 0, 
    &                                          MemoryType => 0, 
    &                                          MemoryDataWidth => 0,
    &                                          BurstAccessMode => 0,
    &                                          WaitSignalPolarity => 0, 
    &                                          WaitSignalActive => 0, 
    &                                          WriteOperation => 0, 
    &                                          WaitSignal => 0, 
    &                                          ExtendedMode => 0, 
    &                                          AsynchronousWait => 0,
    &                                          WriteBurst => 0, 
    &                                          ContinuousClock => 0,
    &                                          WriteFifo => 0, 
    &                                          PageSize => 0 }, 
    &                               Lock => HAL_UNLOCKED, 
    &                               State => HAL_NOR_STATE_RESET },     ev = init     
    END ENVIRONMENT -- ENV_HalNorMspInit
    USE ENV_HalNorMspInit

    TEST 1
    FAMILY nominal

    COMMENT Test Description
    COMMENT Parameter "h_nor" is exercised for nominal value.
    COMMENT <TD>
    COMMENT [hdulibstm32f7xxhalnor-HalNorMspInit-DB-LLR-001]
    COMMENT The function prevents unused arguments compilation warning
    COMMENT Equivalence Class None
    COMMENT </TD>     

    ELEMENT

        COMMENT INPUT SECTION:
        STRUCTURE h_nor,        init = { Instance => &PTU_Instance_1, 
        &                                Extended => &PTU_Extended, 
        &                                Init => { NSBank => 0x1, 
        &                                          DataAddressMux => 0x1, 
        &                                          MemoryType => 0x1, 
        &                                          MemoryDataWidth => 0x1,
        &                                          BurstAccessMode => 0x1,
        &                                          WaitSignalPolarity => 0x1, 
        &                                          WaitSignalActive => 0x1, 
        &                                          WriteOperation => 0x1, 
        &                                          WaitSignal => 0x1, 
        &                                          ExtendedMode => 0x1, 
        &                                          AsynchronousWait => 0x1,
        &                                          WriteBurst => 0x1, 
        &                                          ContinuousClock => 0x1,
        &                                          WriteFifo => 0x1, 
        &                                          PageSize => 0x1 }, 
        &                               Lock => HAL_UNLOCKED, 
        &                               State => HAL_NOR_STATE_RESET },     ev = init  
        
        COMMENT OUTPUT SECTION:
        --None
        
        COMMENT INPUT/OUTPUT SECTION:
        --None
        
        SIMUL
        --None
        
        END SIMUL
    
        -- Calling the Unit Under Test:
        #HalNorMspInit(&h_nor);
        
    END ELEMENT

    END TEST -- TEST 1

    TEST 2
    FAMILY nominal

    COMMENT Test Description
    COMMENT Parameter "h_nor" is exercised for minimum value.
    COMMENT <TD>
    COMMENT [hdulibstm32f7xxhalnor-HalNorMspInit-DB-LLR-001]
    COMMENT The function prevents unused arguments compilation warning
    COMMENT Equivalence Class None
    COMMENT </TD>     

    ELEMENT
    
        COMMENT INPUT SECTION:
        STRUCTURE h_nor,        init = { Instance => &PTU_Instance_1, 
        &                                Extended => &PTU_Extended, 
        &                                Init => { NSBank => 0x0, 
        &                                          DataAddressMux => 0x0, 
        &                                          MemoryType => 0x0, 
        &                                          MemoryDataWidth => FMC_NORSRAM_MEM_BUS_WIDTH_16,
        &                                          BurstAccessMode => 0x0,
        &                                          WaitSignalPolarity => 0x0, 
        &                                          WaitSignalActive => 0x0, 
        &                                          WriteOperation => 0x0, 
        &                                          WaitSignal => 0x0, 
        &                                          ExtendedMode => 0x0, 
        &                                          AsynchronousWait => 0x0,
        &                                          WriteBurst => 0x0, 
        &                                          ContinuousClock => 0x0,
        &                                          WriteFifo => 0x0, 
        &                                          PageSize => 0x0 }, 
        &                                          Lock => HAL_LOCKED, 
        &                                          State => HAL_NOR_STATE_RESET },     ev = init  
        
        COMMENT OUTPUT SECTION:
        --None
        
        COMMENT INPUT/OUTPUT SECTION:
        --None
          
        SIMUL
        --None
         
        END SIMUL
     
        -- Calling the Unit Under Test:
        #HalNorMspInit(&h_nor);
        
    END ELEMENT

    END TEST -- TEST 2

    TEST 3
    FAMILY nominal

    COMMENT Test Description
    COMMENT Parameter "h_nor" is exercised for maximum value.
    COMMENT <TD>
    COMMENT [hdulibstm32f7xxhalnor-HalNorMspInit-DB-LLR-001]
    COMMENT The function prevents unused arguments compilation warning
    COMMENT Equivalence Class None
    COMMENT </TD>     

    ELEMENT
    
        COMMENT INPUT SECTION:
        STRUCTURE h_nor,        init = { Instance => &PTU_Instance_1, 
        &                                Extended => &PTU_Extended, 
        &                                Init => { NSBank => PTU_uint32_max,  
        &                                          DataAddressMux => PTU_uint32_max, 
        &                                          MemoryType => PTU_uint32_max, 
        &                                          MemoryDataWidth => FMC_NORSRAM_MEM_BUS_WIDTH_8,
        &                                          BurstAccessMode => PTU_uint32_max,
        &                                          WaitSignalPolarity => PTU_uint32_max, 
        &                                          WaitSignalActive => PTU_uint32_max, 
        &                                          WriteOperation => PTU_uint32_max, 
        &                                          WaitSignal => PTU_uint32_max, 
        &                                          ExtendedMode => PTU_uint32_max, 
        &                                          AsynchronousWait => PTU_uint32_max,
        &                                          WriteBurst => PTU_uint32_max, 
        &                                          ContinuousClock => PTU_uint32_max,
        &                                          WriteFifo => PTU_uint32_max, 
        &                                          PageSize => PTU_uint32_max }, 
        &                                          Lock => HAL_LOCKED, 
        &                                          State => HAL_NOR_STATE_PROTECTED },     ev = init   
        
        COMMENT OUTPUT SECTION:
        --None
        
        COMMENT INPUT/OUTPUT SECTION:
        --None
          
        SIMUL
        --None
         
        END SIMUL
     
        -- Calling the Unit Under Test:
        #HalNorMspInit(&h_nor);
        
    END ELEMENT

    END TEST -- TEST 3

    TEST 4
    FAMILY robustness

    COMMENT Test Description
    COMMENT <TD>
    COMMENT [hdulibstm32f7xxhalnor-HalNorMspInit-DB-LLR-001]
    COMMENT In function "HalNorMspInit" parameter "h_nor" is exercised for NULL value.
    COMMENT Equivalence Class 12
    COMMENT </TD>     

    ELEMENT
    
        COMMENT INPUT SECTION:
        STRUCTURE h_nor,        init = { Instance => &PTU_Instance_1, 
        &                                Extended => &PTU_Extended, 
        &                                Init => { NSBank => PTU_uint32_max,  
        &                                          DataAddressMux => PTU_uint32_max, 
        &                                          MemoryType => PTU_uint32_max, 
        &                                          MemoryDataWidth => FMC_NORSRAM_MEM_BUS_WIDTH_8,
        &                                          BurstAccessMode => PTU_uint32_max,
        &                                          WaitSignalPolarity => PTU_uint32_max, 
        &                                          WaitSignalActive => PTU_uint32_max, 
        &                                          WriteOperation => PTU_uint32_max, 
        &                                          WaitSignal => PTU_uint32_max, 
        &                                          ExtendedMode => PTU_uint32_max, 
        &                                          AsynchronousWait => PTU_uint32_max,
        &                                          WriteBurst => PTU_uint32_max, 
        &                                          ContinuousClock => PTU_uint32_max,
        &                                          WriteFifo => PTU_uint32_max, 
        &                                          PageSize => PTU_uint32_max }, 
        &                                          Lock => HAL_LOCKED, 
        &                                          State => HAL_NOR_STATE_PROTECTED },     ev = init  
        
        COMMENT OUTPUT SECTION:
        --None
        
        COMMENT INPUT/OUTPUT SECTION:
        --None
          
        SIMUL
        --None
         
        END SIMUL
     
        -- Calling the Unit Under Test:
        #HalNorMspInit(NULL);
        
    END ELEMENT

    END TEST -- TEST 4

END SERVICE -- HalNorMspInit