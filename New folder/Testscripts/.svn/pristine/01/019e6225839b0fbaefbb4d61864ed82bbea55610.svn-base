HEADER hdudispfa429, Source Code Ver : 1.22 , TestScript Ver :1.10
--------------------------------------------------------------------------------
-- Author Name         : Samhitha Prasad L C 
--                       Santosh Mithari
--
-- File Name           : hdudispfa429_1.ptu
--
-- Test Creation Date  : 30.10.2017
--
-- Tested Functions    :Process429Words
--                      A429Init
--                      ProcessF4PbitErr
--                      ProcessF4CbitErr
--                      A429ProcessA825
--                      BinAsciiCRC
--                      MemCpy
--                      MemSet
--                      ProcessSWPartNum
--                      SetSysInfoWords
--                      ProcessSysInfoWords

-- Version History     :
--
-- TEST-VERSION         TEST-DATE         TESTER NAME           MODIFICATIONS
-- ------------        -----------        -----------           -------------
--    1.1              30.10.2017         Samhitha Prasad L C   Created the PTU file.
--                                        Santosh Mithari      
--    1.2              10.11.2017         Samhitha Prasad L C   Updated as per #PR100171
--                                        Santosh Mithari   
--    1.3              14.11.2017         Samhitha Prasad L C   Updated as per #PR100171
--                                        Santosh Mithari 
--    1.4              10.04.2018         Akshay R K            Updated as per #PR100201
--
--    1.5              13.08.2020         Harshitha R           Updated as per #PR100270
--
--    1.6              04.10.2020         Harshitha R           Updated as per #PR100281
--    1.7              27-04-2021         Vignesh Sunil         Updated as per #PR100338
--    1.8              14-05-2021         Vignesh Sunil         Updated as per #PR100354
--    1.9              22.04.2022         P AFREEN              Updated as per #PR1000371
--    1.10             25.04.2022         P AFREEN              Addressed QA comments as per #PR1000371
--------------------------------------------------------------------------------
--
-- TESTED FILE INCLUDE DIRECTIVES
--
--------------------------------------------------------------------------------

#/*============================================================================*/
#/* Module specific includes*/
#/*============================================================================*/

##include "hdudispflmsscu.h" 
##include "hdudispfa429.h"  
##include "hdudispfcas.h"   
##include "hdudispfdauprofile.h"  
##include "hdudispfglobalsettings.h"  
##include "hdudispfrtd.h"   
##include "hdulibbasictypes.h" 
##include "hdudispfpara.h"      
##include "hdudispfarinc825.h"  
##include "hdudispftext.h"      

-- Updated as per PR 100083 
##include "hdudispfrevno.h"  
##include "hdudispfpdidata.h" 
##include "hdudispfgrapp.h"  
##include "hdudispfpbit.h"        
##include "hdulibcorecm7.h"     
##include "hdudispfmenu.h"            
##include "hdudispfmdff.h"   


##define EXTRACT_1ST_BYTE 0x00000FF
##define HEX_F0           0xF0
##define HEX_0F           0x0F
##define HEX_CC           0xCC
##define HEX_33           0x33
##define HEX_AA           0xAA
##define HEX_55           0x55
##define EXTRACT_2BYTE    0x0000FFFF

##define HEX_7F           0x7F
##define LABEL_0273    0273
##define LABEL_0244    0244
##define LABEL_0346    0346

##define LABEL_0247    0247

##define LABEL_0272    0272

##define LABEL_0360    0360
##define LABEL_0370    0370
##define SEVENTEEN                17U
##define TWENTY_FOUR              24U
##define REVNO_DISP_FLIGHT_CRC    0x80FFFFC
##define REVNO_DISP_BOOT_PN       0x800FFEC
##define REVNO_DISP_BOOT_CRC      0x800FFFC
##define REVNO_DISP_MAINT_PN      0x0807FFEC
##define REVNO_DISP_MAINT_CRC     0x0807FFFC
##define REVNO_BMP_PN             0x6281FFEC
##define REVNO_BMP_CRC            0x6281FFFC
##define REVNO_PDI_CRC            0x63FFFFFC
##define REVNO_LEN                16U
##define CRC_LEN                  4U
##define SYSINFO_LABEL_WORDS      81
##define TO_HEX(i)               (i <= 9 ? '0' + i : 'A' - 10 + i)
##define BIT_SHIFT_BY_512         512
##define BIT_SHIFT_BY_1024        1024
##define BIT_SHIFT_BY_256         256
##define BIT_SHIFT_BY_2048        2048
##define BIT_SHIFT_BY_4096        4096
##define BIT_SHIFT_BY_128         128
##define BIT_SHIFT_BY_4           4
##define SHIFT_BY_28              28
##define SHIFT_BY_24              24
##define SHIFT_BY_20              20
##define SHIFT_BY_16              16
##define SHIFT_BY_12              12
##define SHIFT_BY_8               8
##define SHIFT_BY_4               4
##define EXT_BIT_28_31            0xF0000000
##define EXT_BIT_24_27            0x0F000000
##define EXT_BIT_20_23            0x00F00000
##define EXT_BIT_16_19            0x000F0000
##define EXT_BIT_12_15            0x0000F000
##define EXT_BIT_8_11             0x00000F00
##define EXT_BIT_4_7              0x000000F0
##define EXT_BIT_0_3              0x0000000F
##define MAX_64_BIT               0xFFFFFFFF
##define BUF_LEN_22               22
##define BUF_LEN_6                6
##define BUF_LEN_16               16
##define CHAR_H                   'H'
##define CHAR_LEN_6               6

##define CHAR_LEN_17              17
##define MAX_32           0xFFFFFFFF


##define CAU_WARN_MAX_ID 6
##define DDW_SIG_BIT     19
##define BIT_16_SET      32768
##define AIRFRAME_LABEL_WORDS      36
##define ARCFT_MDL_BYTE   7
##define ENGINE_TYPE_BYTE 15
##define ENGINE_SER_BYTE  23
##define AICFT_SER_BYTE   31
##define AICFT_REGS_BYTE  35
##define CHAR_LEN_24      24


##define LABEL_051    051
##define LABEL_052    052
##define CALILABELCOUNT 2
--------------------------------------------------------------------------------
--
-- TESTED FILE DECLARATIONS 
--
--------------------------------------------------------------------------------

-- Declarations of the global variables of the tested file
    #T_INT32 S32_data_exceed[4];
    #T_EXCEED_STRUCT Exceed_data[66];
    #T_UINT16 Pbit_test_result; 
    #T_EIU Active_eiu; 
    #T_UINT16 U16_sys_info_words[ 2 ]; 
    #T_CONFIG_STRUCT Config_data; 
    #T_UINT8 Revno_id[  16U ]; 
    #T_UINT16 U16_message_words[ 3 ]; 
    #T_PARAM_TABLE Parameters_numbox[256];
    #T_PARAM_TABLE Parameters[256];
    #T_A429_PARAMS A429_cfg_data[256]; 
    #T_UINT16 A429_settings_cnt; 
    #T_UINT16 U16_cas_words[    (  64    /8) ]; 
    #T_ACDT_STRUCT Auto_cool_down_tmr; 
    #T_CAS_MSG_DEF Cas_msg[  64    ]; 
    #T_UINT8 Cas_cnt;     
    #T_UINT8 Eiufli_part[31];
    #T_UINT8 Eiucfg_part[31];
    #T_UINT8 Eiucmub_part[31];
    #T_UINT8 Eiucmuf_part[31];
    #T_UINT8 Eiucmum_part[31];
    #T_UINT8 Commb_part[31];
    #T_UINT8 Maint_part[31];    
    #T_UINT8 Commf_part[31]; 
    #T_UINT8 Boot_revno[31];
    #T_UINT8 Maint_revno[31];
    #T_UINT8 App_revno[31];
    #T_UINT8 Config_id[55];
    #T_UINT8 Bitmap_revno[25];
    #T_UINT8 Dau_config_id_disp[55];
    #T_UINT8 COnfig_data[50];
    #T_UINT8 Eiu_heading[18];
    #T_UINT8 Dau_config_id_dau[55];
    #T_UINT32 Offset_value_cal[NUMBEROFENGINES];
    #T_UINT32 Gain_value_cal[NUMBEROFENGINES];
    #T_FLOAT N1_value;
    

    #T_PARAM_TABLE Scu_parameters[3]; 
    #T_UINT16 Timer_a429_tag[16]; 
    #T_TIMER_PARAM_STRUCT Exceed_timer_params[16];
    #T_PAGE Page_settings; 
    #T_UINT8 Timer_cnt; 
    #T_BOOL Md_engine_flag; 
    #T_UINT8 Cmu_fuel_flow;
    #T_UINT8 Scu_label_flag; 
    
    
-- Declarations of the temporary variable
    
    --variables used to handle MemCpy
    #T_UINT8 PTU_dst[10],PTU_src[10];
    
    --variables used to handle MemSet
    #T_UINT8 PTU_memSet[10];
    
    #T_UINT8 PTU_address1,PTU_address2;
    
    #T_UINT8 PTU_REVNO_DISP_FLIGHT_CRC[500];
    
    #T_UINT8 PTU_REVNO_DISP_BOOT_PN[500];
    
    #T_UINT8 PTU_REVNO_DISP_BOOT_CRC[500];
    
    #T_UINT8 PTU_REVNO_DISP_MAINT_PN[500];
    
    #T_UINT8 PTU_REVNO_DISP_MAINT_CRC[500];
    
    #T_UINT8 PTU_REVNO_BMP_PN[500];
    
    #T_UINT8 PTU_REVNO_BMP_CRC[500];
    
    #T_UINT8 PTU_REVNO_PDI_CRC[500];
--------------------------------------------------------------------------------

BEGIN

    COMMENT  Author Name         :   Samhitha Prasad L C
    COMMENT                         Santosh Mithari 
    COMMENT
    COMMENT  File Name           :   hdudispfa429_1.ptu
    COMMENT 
    COMMENT  Tested Functions    :  Process429Words  
    COMMENT                        A429Init
    COMMENT                        ProcessF4PbitErr
    COMMENT                        ProcessF4CbitErr
    COMMENT                        A429ProcessA825
    COMMENT                        BinAsciiCRC
    COMMENT                        MemCpy
    COMMENT                        MemSet
    COMMENT                        ProcessSWPartNum
    COMMENT                        SetSysInfoWords
    COMMENT                        ProcessSysInfoWords
    COMMENT
    COMMENT   Assumptions and Constraints
    COMMENT <AC>
    COMMENT 
    COMMENT Assumption(s): 
    COMMENT None
    COMMENT
    COMMENT Constraint(s):
    COMMENT 
    COMMENT 1. In source file 'hdudispfa429.c' following macro's are modified for testing purpose
    COMMENT /* modified macro for testing purpose */
    COMMENT //#define REVNO_DISP_FLIGHT_CRC    0x80FFFFC
    COMMENT
    COMMENT T_UINT8 PTU_REVNO_DISP_FLIGHT_CRC[500];
    COMMENT #define REVNO_DISP_FLIGHT_CRC    ((T_UINT8 *) &PTU_REVNO_DISP_FLIGHT_CRC[0])
    COMMENT
    COMMENT /* modified macro for testing purpose */
    COMMENT //#define REVNO_DISP_BOOT_PN       0x800FFEC
    COMMENT
    COMMENT T_UINT8 PTU_REVNO_DISP_BOOT_PN[500];
    COMMENT #define REVNO_DISP_BOOT_PN       ((T_UINT8 *)&PTU_REVNO_DISP_BOOT_PN[0])
    COMMENT
    COMMENT /*modified macro for testing purpose */
    COMMENT //#define REVNO_DISP_BOOT_CRC      0x800FFFC
    COMMENT
    COMMENT T_UINT8 PTU_REVNO_DISP_BOOT_CRC[500];
    COMMENT #define REVNO_DISP_BOOT_CRC      ((T_UINT8 *) &PTU_REVNO_DISP_BOOT_CRC[0])
    COMMENT
    COMMENT /*modified macro for testing purpose */
    COMMENT //#define REVNO_DISP_MAINT_PN      0x0807FFEC
    COMMENT
    COMMENT T_UINT8 PTU_REVNO_DISP_MAINT_PN[500];
    COMMENT #define REVNO_DISP_MAINT_PN      ((T_UINT8 *) &PTU_REVNO_DISP_MAINT_PN[0])
    COMMENT
    COMMENT /* modified macro for testing purpose */
    COMMENT //#define REVNO_DISP_MAINT_CRC     0x0807FFFC
    COMMENT
    COMMENT T_UINT8 PTU_REVNO_DISP_MAINT_CRC[500];
    COMMENT #define REVNO_DISP_MAINT_CRC     ((T_UINT8 *)&PTU_REVNO_DISP_MAINT_CRC[0])
    COMMENT
    COMMENT /*#define REVNO_DISP_MAINT_CFG_PN  0x08010000*/
    COMMENT T_UINT8 PTU_REVNO_DISP_MAINT_CFG_PN[500];
    COMMENT
    COMMENT #define REVNO_DISP_MAINT_CFG_PN     ((T_UINT8 *)&PTU_REVNO_DISP_MAINT_CFG_PN[0])
    COMMENT /*#define REVNO_DISP_MAINT_CFG_CRC 0x08017FFC*/
    COMMENT
    COMMENT T_UINT8 PTU_REVNO_DISP_MAINT_CFG_CRC[500];
    COMMENT #define REVNO_DISP_MAINT_CFG_CRC     ((T_UINT8 *)&PTU_REVNO_DISP_MAINT_CFG_CRC[0])
    COMMENT
    COMMENT /*#define REVNO_DISP_SL_PN         0x0803FFEC*/
    COMMENT T_UINT8 PTU_REVNO_DISP_SL_PN[500];
    COMMENT
    COMMENT #define REVNO_DISP_SL_PN     ((T_UINT8 *)&PTU_REVNO_DISP_SL_PN[0])
    COMMENT /*#define REVNO_DISP_SL_CRC        0x0803FFFC*/
    COMMENT
    COMMENT T_UINT8 PTU_REVNO_DISP_SL_CRC[500];
    COMMENT #define REVNO_DISP_SL_CRC     ((T_UINT8 *)&PTU_REVNO_DISP_SL_CRC[0])
    COMMENT
    COMMENT /* modified macro for testing purpose */
    COMMENT //#define REVNO_BMP_PN             0x6281FFEC
    COMMENT
    COMMENT T_UINT8 PTU_REVNO_BMP_PN[500];
    COMMENT #define REVNO_BMP_PN        ((T_UINT8 *)&PTU_REVNO_BMP_PN[0])
    COMMENT
    COMMENT /* modified macro for testing purpose */
    COMMENT //#define REVNO_BMP_CRC            0x6281FFFC
    COMMENT
    COMMENT T_UINT8 PTU_REVNO_BMP_CRC[500];
    COMMENT #define REVNO_BMP_CRC       ((T_UINT8 *)&PTU_REVNO_BMP_CRC[0])
    COMMENT
    COMMENT /* modified macro for testing purpose */
    COMMENT //#define REVNO_PDI_CRC            0x62B5FFFC
    COMMENT
    COMMENT T_UINT8 PTU_REVNO_PDI_CRC[500];
    COMMENT #define REVNO_PDI_CRC       ((T_UINT8 *)&PTU_REVNO_PDI_CRC[0])
    COMMENT
    COMMENT 
    COMMENT 2.In function 'A429Init' for loops cannot be covered for 0 and 1 since it is controlled 
    COMMENT   by macro 'CAU_WARN_MAX_ID '
    COMMENT 
    COMMENT 3. PTU's has been split into 9 due to dependency.
    COMMENT 
    COMMENT 4.In 'ProcessSysInfoWords' for loop cannot be covered for 0 and 1 since it is controlled 
    COMMENT   by macro 'SYSINFO_LABEL_WORDS'
    COMMENT
    COMMENT 5.In 'A429ProcessA825'for loop cannot be covered for 0 and 1 since it is controlled 
    COMMENT   by macro 'FOUR'
    COMMENT
    COMMENT 6. Equivalence Class 110 cannot be mapped since maximum value of input parameter 
    COMMENT never be greater than MACRO 'MAX_64_BIT'.
    COMMENT
    COMMENT 7.Warning "enumerated type mixed with another type" is obtained when   
    COMMENT  '(enum T_EIU) type' is exercised with value "EIU2+1" 
    COMMENT  warning #188-D: enumerated type mixed with another type  
    COMMENT
    COMMENT 8.In 'ProcessAirframeInfoWords'for loop cannot be covered for 0 and 1 since it is controlled 
    COMMENT   by macro 'AIRFRAME_LABEL_WORDS'
    COMMENT </AC>

    COMMENT Equivalence Class Description
    COMMENT <ECD>
    COMMENT
    COMMENT Valid Class(es)
    COMMENT Class 1
    COMMENT In function 'ProcessF4CbitErr',u8PayLoad with zero index of A825 messages right shifted
    COMMENT by zero times and logical AND with one is equal to ONE
    COMMENT
    COMMENT Class 2
    COMMENT In function 'ProcessF4CbitErr',u8PayLoad with zero index of A825 messages right shifted 
    COMMENT by zero times and logical AND with one is equal to zero
    COMMENT 
    COMMENT Class 3
    COMMENT The function 'MemCpy' copies data from source buffer to destination buffer
    COMMENT
    COMMENT Class 4
    COMMENT The function 'MemSet' copies value to destination buffer.
    COMMENT
    COMMENT Class 5
    COMMENT In function 'ProcessSWPartNum', doc of BID of sID of s_mess is DIS_COMAPP_REVNO1
    COMMENT
    COMMENT Class 6
    COMMENT In function 'ProcessSWPartNum', doc of BID of sID of s_mess is other than DIS_COMAPP_REVNO1
    COMMENT
    COMMENT Class 7
    COMMENT In function 'ProcessSWPartNum', doc of BID of sID of s_mess is DIS_COMAPP_REVNO2
    COMMENT
    COMMENT Class 8
    COMMENT In function 'ProcessSWPartNum', doc of BID of sID of s_mess is other than DIS_COMAPP_REVNO2
    COMMENT
    COMMENT Class 9
    COMMENT In function 'ProcessSWPartNum', doc of BID of sID of s_mess is DIS_COMBOOT_REVNO1
    COMMENT
    COMMENT Class 10
    COMMENT In function 'ProcessSWPartNum', doc of BID of sID of s_mess is other than DIS_COMBOOT_REVNO1
    COMMENT
    COMMENT Class 11
    COMMENT In function 'ProcessSWPartNum', doc of BID of sID of s_mess is DIS_COMBOOT_REVNO2
    COMMENT
    COMMENT Class 12
    COMMENT In function 'ProcessSWPartNum', doc of BID of sID of s_mess is other than DIS_COMBOOT_REVNO2
    COMMENT
    COMMENT Class 13
    COMMENT In function 'ProcessSWPartNum', doc of BID of sID of s_mess is DIS_COMMAINT_REVNO1
    COMMENT
    COMMENT Class 14
    COMMENT In function 'ProcessSWPartNum', doc of BID of sID of s_mess is other than DIS_COMMAINT_REVNO1
    COMMENT
    COMMENT Class 15
    COMMENT In function 'ProcessSWPartNum', doc of BID of sID of s_mess is DIS_COMMAINT_REVNO2
    COMMENT
    COMMENT Class 16
    COMMENT In function 'ProcessSWPartNum', doc of BID of sID of s_mess is other than DIS_COMMAINT_REVNO2
    COMMENT 
    COMMENT Class 17
    COMMENT In function 'ProcessSWPartNum', doc of BID of sID of s_mess is DIS_COMAPP_CRC
    COMMENT 
    COMMENT Class 18
    COMMENT In function 'ProcessSWPartNum', doc of BID of sID of s_mess is other than DIS_COMAPP_CRC
    COMMENT
    COMMENT Class 19
    COMMENT In function 'ProcessSWPartNum', doc of BID of sID of s_mess is DIS_COMBOOT_CRC
    COMMENT
    COMMENT Class 20
    COMMENT In function 'ProcessSWPartNum', doc of BID of sID of s_mess is other than DIS_COMBOOT_CRC
    COMMENT
    COMMENT Class 21
    COMMENT In function 'ProcessSWPartNum', doc of BID of sID of s_mess is DIS_COMMAINT_CRC
    COMMENT
    COMMENT Class 22
    COMMENT In function 'ProcessSWPartNum', doc of BID of sID of s_mess is other than DIS_COMMAINT_CRC
    COMMENT
    COMMENT Class 23
    COMMENT The function 'ProcessSWPartNum', calls 'MemCpy'.
    COMMENT
    COMMENT Class 24
    COMMENT The function 'ProcessSWPartNum', calls 'BinAsciiCRC'.
    COMMENT
    COMMENT Class 25
    COMMENT In function 'ProcessF4PbitErr', u8PayLoad with zero index of A825 messages right shifted
    COMMENT by zero times and bitwise AND with one is not equal to zero
    COMMENT
    COMMENT Class 26
    COMMENT In function 'ProcessF4PbitErr', u8PayLoad with zero index of A825 messages right shifted
    COMMENT by zero times and bitwise AND with one is  equal to zero
    COMMENT
    COMMENT Class 27
    COMMENT In function 'ProcessF4PbitErr', u8PayLoad with zero index of A825 messages right shifted
    COMMENT by one time and bitwise AND with one is not equal to zero
    COMMENT.
    COMMENT Class 28
    COMMENT In function 'ProcessF4PbitErr', u8PayLoad with zero index of A825 messages right shifted
    COMMENT by one time and bitwise AND with one is equal to zero.
    COMMENT
    COMMENT Class 29
    COMMENT In function 'ProcessF4PbitErr', u8PayLoad with zero index of A825 messages right shifted
    COMMENT by two times and bitwise AND with one is not equal to zero.
    COMMENT
    COMMENT Class 30
    COMMENT In function 'ProcessF4PbitErr', u8PayLoad with zero index of A825 messages right shifted
    COMMENT by two times and bitwise AND with one is  equal to zero.
    COMMENT
    COMMENT Class 31
    COMMENT In function 'ProcessF4PbitErr', u8PayLoad with zero index of A825 messages right shifted
    COMMENT by three times and bitwise AND with one is not equal to zero.
    COMMENT
    COMMENT Class 32
    COMMENT In function 'ProcessF4PbitErr', u8PayLoad with zero index of A825 messages right shifted
    COMMENT by three times and bitwise AND with one is equal to zero.
    COMMENT
    COMMENT Class 33
    COMMENT In function 'ProcessF4PbitErr', u8PayLoad with zero index of A825 messages right shifted
    COMMENT by four times and bitwise AND with one is not equal to zero.
    COMMENT
    COMMENT Class 34
    COMMENT In function 'ProcessF4PbitErr', u8PayLoad with zero index of A825 messages right shifted
    COMMENT by four times and bitwise AND with one is  equal to zero.
    COMMENT
    COMMENT Class 35
    COMMENT In function 'ProcessF4PbitErr', u8PayLoad with zero index of A825 messages right shifted
    COMMENT by five times and bitwise AND with one is not equal to zero.
    COMMENT
    COMMENT Class 36
    COMMENT In function 'ProcessF4PbitErr', u8PayLoad with zero index of A825 messages right shifted
    COMMENT by five times and bitwise AND with one is equal to zero.
    COMMENT
    COMMENT Class 37
    COMMENT In function 'ProcessF4PbitErr', u8PayLoad with zero index of A825 messages right shifted
    COMMENT by six times and bitwise AND with one is not equal to zero.
    COMMENT
    COMMENT Class 38
    COMMENT In function 'ProcessF4PbitErr', u8PayLoad with zero index of A825 messages right shifted
    COMMENT by six times and bitwise AND with one is  equal to zero.
    COMMENT
    COMMENT Class 39
    COMMENT In function 'A429ProcessA825', doc of BID of sID of A825 messages is equal to A429_CHAN_1
    COMMENT
    COMMENT Class 40
    COMMENT In function 'A429ProcessA825', doc of BID of sID of A825 messages is not equal to A429_CHAN_1
    COMMENT
    COMMENT Class 41
    COMMENT In function 'A429ProcessA825', doc of BID of sID of A825 messages is equal to A429_CHAN_2
    COMMENT
    COMMENT Class 42
    COMMENT In function 'A429ProcessA825', doc of BID of sID of A825 messages is not equal to A429_CHAN_2
    COMMENT
    COMMENT Class 43
    COMMENT In function 'A429ProcessA825', doc of BID of sID of A825 messages is equal to DIS_COMAPP_REVNO1
    COMMENT
    COMMENT Class 44
    COMMENT In function 'A429ProcessA825', doc of BID of sID of A825 messages is not equal to DIS_COMAPP_REVNO1
    COMMENT
    COMMENT Class 45
    COMMENT In function 'A429ProcessA825', doc of BID of sID of A825 messages is equal to DIS_COMAPP_REVNO2
    COMMENT
    COMMENT Class 46
    COMMENT In function 'A429ProcessA825', doc of BID of sID of A825 messages is not equal to DIS_COMAPP_REVNO2
    COMMENT
    COMMENT Class 47
    COMMENT In function 'A429ProcessA825', doc of BID of sID of A825 messages is  equal to DIS_COMBOOT_REVNO1
    COMMENT
    COMMENT Class 48
    COMMENT In function 'A429ProcessA825', doc of BID of sID of A825 messages is  not equal to DIS_COMBOOT_REVNO1
    COMMENT
    COMMENT Class 49
    COMMENT In function 'A429ProcessA825', doc of BID of sID of A825 messages is  equal to DIS_COMBOOT_REVNO2
    COMMENT
    COMMENT Class 50
    COMMENT In function 'A429ProcessA825', doc of BID of sID of A825 messages is  not equal to DIS_COMBOOT_REVNO2
    COMMENT
    COMMENT Class 51
    COMMENT In function 'A429ProcessA825', doc of BID of sID of A825 messages is  equal to DIS_COMMAINT_REVNO1
    COMMENT
    COMMENT Class 52
    COMMENT In function 'A429ProcessA825', doc of BID of sID of A825 messages is  not equal to DIS_COMMAINT_REVNO1
    COMMENT
    COMMENT Class 53
    COMMENT In function 'A429ProcessA825', doc of BID of sID of A825 messages is  equal to DIS_COMMAINT_REVNO2
    COMMENT
    COMMENT Class 54
    COMMENT In function 'A429ProcessA825', doc of BID of sID of A825 messages is  not equal to DIS_COMMAINT_REVNO2
    COMMENT
    COMMENT Class 55
    COMMENT In function 'A429ProcessA825', doc of BID of sID of A825 messages is  equal to DIS_COMBOOT_CRC
    COMMENT
    COMMENT Class 56
    COMMENT In function 'A429ProcessA825', doc of BID of sID of A825 messages is  not equal to DIS_COMBOOT_CRC
    COMMENT
    COMMENT Class 57
    COMMENT In function 'A429ProcessA825', doc of BID of sID of A825 messages is  equal to DIS_COMMAINT_CRC
    COMMENT
    COMMENT Class 58
    COMMENT In function 'A429ProcessA825', doc of BID of sID of A825 messages is  not equal to DIS_COMMAINT_CRC
    COMMENT
    COMMENT Class 59
    COMMENT In function 'A429ProcessA825', doc of BID of sID of A825 messages is  equal to DIS_COMAPP_CRC
    COMMENT
    COMMENT Class 60
    COMMENT In function 'A429ProcessA825', doc of BID of sID of A825 messages is  not equal to DIS_COMAPP_CRC
    COMMENT
    COMMENT Class 61
    COMMENT In function 'A429ProcessA825', doc of BID of sID of A825 messages is  equal to F4_PBIT_ERR
    COMMENT
    COMMENT Class 62
    COMMENT In function 'A429ProcessA825', doc of BID of sID of A825 messages is  not equal to F4_PBIT_ERR
    COMMENT
    COMMENT Class 63
    COMMENT In function 'A429ProcessA825', doc of BID of sID of A825 messages is  equal to F4_CBIT_ERR
    COMMENT
    COMMENT Class 64
    COMMENT In function 'A429ProcessA825', doc of BID of sID of A825 messages is  not equal to F4_CBIT_ERR
    COMMENT
    COMMENT Class 65
    COMMENT In function 'A429ProcessA825', 9 and 10th bit of A429 word is greater than zero
    COMMENT
    COMMENT Class 66
    COMMENT In function 'A429ProcessA825', 9 and 10th bit of A429 word is less than or equal to zero.
    COMMENT
    COMMENT Class 67
    COMMENT The function 'A429ProcessA825', calls 'Process429Words'.
    COMMENT
    COMMENT Class 68
    COMMENT In function 'A429ProcessA825', u8PaySize of A825 messages is equal to EIGHT 
    COMMENT
    COMMENT Class 69
    COMMENT In function 'A429ProcessA825', u8PaySize of A825 messages is not equal to EIGHT
    COMMENT
    COMMENT Class 70
    COMMENT In function 'Process429Words',  SDI bits  is other than ZERO
    COMMENT
    COMMENT Class 71
    COMMENT In function 'Process429Words',  SDI bits  is euqal to ZERO
    COMMENT
    COMMENT Class 72
    COMMENT In function 'Process429Words' ,channel is ZERO 
    COMMENT
    COMMENT Class 73
    COMMENT In function 'Process429Words' ,channel is not  ZERO 
    COMMENT
    COMMENT Class 74
    COMMENT In function 'Process429Words' label of A429_data with indices channel and
    COMMENT loop index count is equal to received label  
    COMMENT
    COMMENT Class 75
    COMMENT In function 'Process429Words' when label of A429_data with indices channel and
    COMMENT loop index count is not equal to received label  
    COMMENT
    COMMENT Class 76
    COMMENT In function 'Process429Words', Active_eiu is equal to EIU1
    COMMENT
    COMMENT Class 77
    COMMENT In function 'Process429Words', Active_eiu is equal to EIU2
    COMMENT
    COMMENT Class 78
    COMMENT In function 'Process429Words', Active_eiu is other than EIU1 and EIU2
    COMMENT
    COMMENT Class 79
    COMMENT In function 'Process429Words', SDI value is equal to ONE
    COMMENT
    COMMENT Class 80
    COMMENT In function 'Process429Words', SDI value  is equal to TWO
    COMMENT
    COMMENT Class 81
    COMMENT In function 'Process429Words', SDI value  is other than ONE and TWO
    COMMENT
    COMMENT Class 82
    COMMENT In function 'Process429Words', label found flag is TRUE 
    COMMENT
    COMMENT Class 83
    COMMENT In function 'Process429Words', label found flag is FALSE 
    COMMENT
    COMMENT Class 84
    COMMENT In function 'Process429Words', Pbit_test_result is equal to ZERO
    COMMENT
    COMMENT Class 85
    COMMENT In function 'Process429Words',Pbit_test_result is not equal to ZERO
    COMMENT
    COMMENT Class 86
    COMMENT In function 'Process429Words', Type of A429_data is BNR 
    COMMENT
    COMMENT Class 87
    COMMENT In function 'Process429Words',  Type of A429_data is DDW 
    COMMENT
    COMMENT Class 88
    COMMENT In function 'Process429Words',  Type of A429_data is other than BNR and DDW
    COMMENT
    COMMENT Class 89
    COMMENT In function 'Process429Words', Display characteristic identifier is ZERO
    COMMENT
    COMMENT Class 90
    COMMENT In function 'Process429Words', Display characteristic identifier is not  ZERO
    COMMENT
    COMMENT Class 91
    COMMENT In function 'Process429Words', Sign bit is other than ZERO
    COMMENT
    COMMENT Class 92
    COMMENT In function 'Process429Words', Sign bit is equal to ZERO
    COMMENT
    COMMENT Class 93
    COMMENT In function 'Process429Words', result of addition of sig_bits of A429_data with indices
    COMMENT channel and index value where label is found and (start_bit of A429_data with indices 
    COMMENT channel and index value where label is found minus one) is DATA_28_BIT
    COMMENT
    COMMENT Class 94
    COMMENT In function 'Process429Words', result of addition of sig_bits of A429_data with indices
    COMMENT channel and index value where label is found and (start_bit of A429_data with indices 
    COMMENT channel and index value where label is found minus one) is not euqal to DATA_28_BIT
    COMMENT
    COMMENT Class 95
    COMMENT The function 'Process429Words',calls RTDSetParam
    COMMENT
    COMMENT Class 96
    COMMENT In function 'Process429Words',label of A429_data with indices channel and index value
    COMMENT where label is found is other than LABEL_0360
    COMMENT 
    COMMENT Class 97
    COMMENT In function 'Process429Words',label of A429_data with indices channel and index value
    COMMENT where label is found is LABEL_0360
    COMMENT
    COMMENT Class 98
    COMMENT In function 'Process429Words', Cas_cnt is other than zero 
    COMMENT
    COMMENT Class 99
    COMMENT In function 'Process429Words', Cas_cnt is equal to zero 
    COMMENT
    COMMENT Class 100
    COMMENT In function 'Process429Words',label of Cas_msg with index zero is equal to label value
    COMMENT
    COMMENT Class 101
    COMMENT In function 'Process429Words',label of Cas_msg with index zero is not equal to label value
    COMMENT
    COMMENT Class 102
    COMMENT In function 'Process429Words' ID value is FOUR
    COMMENT
    COMMENT Class 103
    COMMENT In function 'Process429Words' ID value is not FOUR
    COMMENT
    COMMENT Class 104
    COMMENT The function 'Process429Words' calls CasSetCasWord
    COMMENT
    COMMENT Class 105
    COMMENT In function 'Process429Words' wog_label of Auto_cool_down_tmr is equal to label
    COMMENT
    COMMENT Class 106
    COMMENT In function 'Process429Words' wog_label of Auto_cool_down_tmr is not equal to label
    COMMENT
    COMMENT Class 107
    COMMENT The function 'Process429Words' calls SetSysInfoWords
    COMMENT
    COMMENT Class 108
    COMMENT In function 'BinAsciiCRC', value is less than MAX_64_BIT
    COMMENT
    COMMENT Class 109
    COMMENT In function 'BinAsciiCRC', value is equal to MAX_64_BIT
    COMMENT
    COMMENT Class 110
    COMMENT In function 'BinAsciiCRC', value is greater than MAX_64_BIT 
    COMMENT
    COMMENT Class 111
    COMMENT The function 'A429Init' calls 'CasExtract'
    COMMENT
    COMMENT Class 112
    COMMENT The function 'A429Init' calls 'A429Extract' 
    COMMENT 
    COMMENT Class 113
    COMMENT In function 'A429Init', A429 port of A429 configuration data with loop counter as index is equal to ONE
    COMMENT 
    COMMENT Class 114
    COMMENT In function 'A429Init', A429 port of A429 configuration data with loop counter as index is equal to two 
    COMMENT 
    COMMENT Class 115
    COMMENT In function 'A429Init', A429 port of A429 configuration data with loop counter as index is not equal to ONE or TWO
    COMMENT 
    COMMENT Class 116
    COMMENT In function 'A429Init', A429 type of A429 configuration data with loop counter as index is equal to BNR
    COMMENT 
    COMMENT Class 117
    COMMENT In function 'A429Init', A429 type of A429 configuration data with loop counter as index is equal to DDW 
    COMMENT 
    COMMENT Class 118
    COMMENT In function 'A429Init', A429 type of A429 configuration data with loop counter as index is not equal to DDW or BNR
    COMMENT
    COMMENT Class 119
    COMMENT In function 'A429Init', Cas_cnt is equal to zero.
    COMMENT
    COMMENT Class 120
    COMMENT In function 'A429Init', Cas_cnt is not equal to zero.   
    COMMENT 
    COMMENT Class 121
    COMMENT In function 'A429Init', A429 label of A429 configuration data with loop counter as index is equal to  label of Cas_msg 
    COMMENT with index zero 
    COMMENT 
    COMMENT Class 122
    COMMENT In function 'A429Init', A429 type of A429 configuration data with loop counter as index is not equal to label of Cas_msg 
    COMMENT with index zero 
    COMMENT
    COMMENT Class 123
    COMMENT In function 'A429Init', Port1_label_count is equal to Port2_label_count
    COMMENT
    COMMENT Class 124
    COMMENT In function 'A429Init', Port1_label_count is not equal to Port2_label_count 
    COMMENT
    COMMENT Class 125
    COMMENT The function 'ProcessSysInfoWords' calls 'MemCpy'.
    COMMENT
    COMMENT Class 126
    COMMENT The function 'ProcessSysInfoWords' calls 'BinAsciiCRC'.
    COMMENT
    COMMENT Class 127
    COMMENT The function 'ProcessSysInfoWords' calls 'MemSet'.  
    COMMENT
    COMMENT Class 128
    COMMENT In function 'ProcessSysInfoWords', Bitmap_revno with index zero is not equal to CHAR_H 
    COMMENT
    COMMENT Class 129
    COMMENT In function 'ProcessSysInfoWords', Bitmap_revno with index zero is equal to CHAR_H  
    COMMENT
    COMMENT Class 130
    COMMENT In function 'ProcessSysInfoWords',  config_version with index zero of Config_data is not equal to CHAR_H        
    COMMENT
    COMMENT Class 131
    COMMENT In function 'ProcessSysInfoWords',  config_version with index zero of Config_data is equal to CHAR_H        
    COMMENT
    COMMENT Class 132
    COMMENT In function 'ProcessSysInfoWords', App_revno with index BUF_LEN_6 is not equal to CHAR_H    
    COMMENT
    COMMENT Class 133
    COMMENT In function 'ProcessSysInfoWords', App_revno with index BUF_LEN_6 is equal to CHAR_H        
    COMMENT
    COMMENT Class 134
    COMMENT In function 'ProcessSysInfoWords', Boot_revno with index BUF_LEN_6 is not equal to CHAR_H   
    COMMENT
    COMMENT Class 135
    COMMENT In function 'ProcessSysInfoWords', Boot_revno with index BUF_LEN_6 is equal to CHAR_H 
    COMMENT
    COMMENT Class 136
    COMMENT In function 'ProcessSysInfoWords', Maint_revno with index BUF_LEN_6 is not equal to CHAR_H 
    COMMENT
    COMMENT Class 137
    COMMENT In function 'ProcessSysInfoWords', Maint_revno with index BUF_LEN_6 is equal to CHAR_H  
    COMMENT
    COMMENT Class 140
    COMMENT In function 'ProcessSysInfoWords', Commf_part with index BUF_LEN_6 is not equal to CHAR_H   
    COMMENT
    COMMENT Class 141
    COMMENT In function 'ProcessSysInfoWords', Commf_part with index BUF_LEN_6 is equal to CHAR_H 
    COMMENT
    COMMENT Class 142
    COMMENT In function 'ProcessSysInfoWords', Commb_part with index BUF_LEN_6 is not equal to CHAR_H   
    COMMENT
    COMMENT Class 143
    COMMENT In function 'ProcessSysInfoWords', Commb_part with index BUF_LEN_6 is equal to CHAR_H 
    COMMENT
    COMMENT Class 144
    COMMENT In function 'ProcessSysInfoWords', Maint_part with index BUF_LEN_6 is not equal to CHAR_H 
    COMMENT
    COMMENT Class 145
    COMMENT In function 'ProcessSysInfoWords', Maint_part with index BUF_LEN_6 is equal to CHAR_H   
    COMMENT
    COMMENT Class 146
    COMMENT In function 'ProcessSysInfoWords', A429_data_recieved is TRUE
    COMMENT
    COMMENT Class 147
    COMMENT In function 'ProcessSysInfoWords', A429_data_recieved is not TRUE   
    COMMENT
    COMMENT Class 148
    COMMENT In function 'ProcessSysInfoWords', data1 of system info word with index as loop counter is equal to horizantal tab.
    COMMENT
    COMMENT Class 149
    COMMENT In function 'ProcessSysInfoWords', data1 of system info word with index as loop counter is equal to carriage return
    COMMENT
    COMMENT Class 150
    COMMENT In function 'ProcessSysInfoWords', data1 of system info word with index as loop counter is not equal to horizantal tab 
    COMMENT or carriage return  
    COMMENT
    COMMENT Class 151
    COMMENT In function 'ProcessSysInfoWords', data2 of system info word with index as loop counter is equal to carriage return
    COMMENT
    COMMENT Class 152
    COMMENT In function 'ProcessSysInfoWords', data2 of system info word with index as loop counter is equal to horizantal tab
    COMMENT
    COMMENT Class 153
    COMMENT In function 'ProcessSysInfoWords', data2 of system info word with index as loop counter is not equal to horizantal tab 
    COMMENT or carriage return  
    COMMENT
    COMMENT Class 154
    COMMENT In function 'ProcessSysInfoWords', first flag is equal to one
    COMMENT
    COMMENT Class 156
    COMMENT In function 'ProcessSysInfoWords', first flag is not equal to one
    COMMENT
    COMMENT Class 157
    COMMENT In function 'ProcessSysInfoWords', second  flag is equal to one
    COMMENT
    COMMENT Class 158
    COMMENT In function 'ProcessSysInfoWords', second  flag is not equal to one
    COMMENT
    COMMENT Class 159
    COMMENT In function 'ProcessSysInfoWords', third  flag is equal to one
    COMMENT
    COMMENT Class 160
    COMMENT In function 'ProcessSysInfoWords', third  flag is not equal to one  
    COMMENT
    COMMENT Class 161
    COMMENT In function 'ProcessSysInfoWords', sequence of system info word with index as loop counter is less than SIXTEEN
    COMMENT
    COMMENT Class 162
    COMMENT In function 'ProcessSysInfoWords', sequence of system info word with index as loop counter is greater than SIXTEEN
    COMMENT
    COMMENT Class 163
    COMMENT In function 'ProcessSysInfoWords', sequence of system info word with index as loop counter is equal to SIXTEEN  
    COMMENT
    COMMENT Class 164
    COMMENT In function 'ProcessSysInfoWords', sequence of system info word with index as loop counter is less than THIRTY_TWO
    COMMENT
    COMMENT Class 165
    COMMENT In function 'ProcessSysInfoWords', sequence of system info word with index as loop counter is greater than THIRTY_TWO
    COMMENT
    COMMENT Class 166
    COMMENT In function 'ProcessSysInfoWords', sequence of system info word with index as loop counter is equal to THIRTY_TWO
    COMMENT
    COMMENT Class 167
    COMMENT In function 'ProcessSysInfoWords', sequence of system info word with index as loop counter is less than SYS_INFO_WORDS_48
    COMMENT
    COMMENT Class 168
    COMMENT In function 'ProcessSysInfoWords', sequence of system info word with index as loop counter is greater than SYS_INFO_WORDS_48
    COMMENT
    COMMENT Class 169
    COMMENT In function 'ProcessSysInfoWords', sequence of system info word with index as loop counter is  equal to SYS_INFO_WORDS_48
    COMMENT
    COMMENT Class 170
    COMMENT In function 'ProcessSysInfoWords', sequence of system info word with index as loop counter is less than SYS_INFO_WORDS_64
    COMMENT
    COMMENT Class 171
    COMMENT In function 'ProcessSysInfoWords', sequence of system info word with index as loop counter is greater than SYS_INFO_WORDS_64
    COMMENT
    COMMENT Class 172
    COMMENT In function 'ProcessSysInfoWords', sequence of system info word with index as loop counter is equal to SYS_INFO_WORDS_64
    COMMENT
    COMMENT Class 173
    COMMENT In function 'ProcessSysInfoWords', sequence of system info word with index as loop counter is less than SYS_INFO_WORDS_80
    COMMENT
    COMMENT Class 174
    COMMENT In function 'ProcessSysInfoWords', sequence of system info word with index as loop counter is greater than SYS_INFO_WORDS_80
    COMMENT
    COMMENT Class 175
    COMMENT In function 'ProcessSysInfoWords', sequence of system info word with index as loop counter is equal to SYS_INFO_WORDS_80    
    COMMENT
    COMMENT Class 176
    COMMENT In function 'ProcessSysInfoWords', sequence of system info word with index as loop counter is not equal to ZERO 
    COMMENT
    COMMENT Class 177
    COMMENT In function 'ProcessSysInfoWords',sequence of system info word with index as loop counter is equal to ZERO      
    COMMENT
    COMMENT Class 178
    COMMENT In function 'ProcessSysInfoWords', Eiufli_part with index 0 is not equal to zero
    COMMENT
    COMMENT Class 179
    COMMENT In function 'ProcessSysInfoWords', Eiufli_part with index 0 is equal to zero
    COMMENT
    COMMENT Class 180
    COMMENT In function 'ProcessSysInfoWords', Eiucfg_part with index 0 is not equal to zero
    COMMENT
    COMMENT Class 181
    COMMENT In function 'ProcessSysInfoWords', Eiucfg_part with index 0 is equal to zero
    COMMENT
    COMMENT Class 182
    COMMENT In function 'ProcessSysInfoWords', Eiucmub_part with index 0 is not equal to zero.
    COMMENT
    COMMENT Class 183
    COMMENT In function 'ProcessSysInfoWords', Eiucmub_part with index 0 is equal to zero.
    COMMENT
    COMMENT Class 184
    COMMENT In function 'ProcessSysInfoWords', Eiucmuf_part  with index 0 is not equal to zero
    COMMENT
    COMMENT Class 185
    COMMENT In function 'ProcessSysInfoWords', Eiucmuf_part  with index 0 is equal to zero
    COMMENT
    COMMENT Class 186
    COMMENT In function 'ProcessSysInfoWords', Eiucmum_part with index 0 is not equal to zero.
    COMMENT
    COMMENT Class 187
    COMMENT In function 'ProcessSysInfoWords', Eiucmum_part with index 0 is equal to zero.  
    COMMENT
    COMMENT Class 188
    COMMENT The function 'A429ProcessA825' calls ProcessSWPartNum.
    COMMENT 
    COMMENT Class 192
    COMMENT The function 'SetSysInfoWords' stores all the system information words read from label 360.
    COMMENT
    COMMENT Class 201
    COMMENT The function 'A429ProcessA825' calls ProcessF4CbitErr.
    COMMENT
    COMMENT Class 202
    COMMENT The function 'A429ProcessA825' calls ProcessF4PbitErr.
    COMMENT
    COMMENT Class 206
    COMMENT The function 'A429ProcessA825' ssm is equal to zero.
    COMMENT
    COMMENT Class 207
    COMMENT The function 'A429ProcessA825' ssm is not equal to zero.    
    COMMENT 
    COMMENT class 208
    COMMENT In function 'StringCompare', Length of first string is equal to length of second string
    COMMENT 
    COMMENT class 209
    COMMENT In function 'StringCompare', Length of first string is not equal to length of second string
    COMMENT 
    COMMENT class 210
    COMMENT In function 'StringCompare', char1 with loop index  is equal to char2 with loop index 
    COMMENT 
    COMMENT class 211
    COMMENT In function 'StringCompare', char1 with loop index  is not equal to char2 with loop index 
    COMMENT 
    COMMENT class 212
    COMMENT The function 'StringCompare' calls 'StrLen'
    COMMENT 
    COMMENT class 213
    COMMENT The function 'SetSysAirFrameWords' stores all the system information words read from label 370
    COMMENT 
    COMMENT class 214
    COMMENT In function 'ProcessAirframeInfoWords', sequence of system airframe words with loop index is 
    COMMENT greater than ARCFT_MDL_BYTE
    COMMENT 
    COMMENT class 215
    COMMENT In function 'ProcessAirframeInfoWords', sequence of system airframe words with loop index is 
    COMMENT less than ARCFT_MDL_BYTE
    COMMENT 
    COMMENT class 216
    COMMENT In function 'ProcessAirframeInfoWords', sequence of system airframe words with loop index is 
    COMMENT equal to ARCFT_MDL_BYTE
    COMMENT 
    COMMENT class 217
    COMMENT In function 'ProcessAirframeInfoWords', index is greater than ARCFT_MDL_BYTE
    COMMENT 
    COMMENT class 218
    COMMENT In function 'ProcessAirframeInfoWords', index is less than ARCFT_MDL_BYTE
    COMMENT 
    COMMENT class 219
    COMMENT In function 'ProcessAirframeInfoWords', index is equal to ARCFT_MDL_BYTE
    COMMENT 
    COMMENT class 220
    COMMENT In function 'ProcessAirframeInfoWords', sequence of system airframe words with loop index is 
    COMMENT greater than ENGINE_TYPE_BYTE
    COMMENT 
    COMMENT class 221
    COMMENT In function 'ProcessAirframeInfoWords', sequence of system airframe words with loop index is 
    COMMENT less than ENGINE_TYPE_BYTE
    COMMENT 
    COMMENT class 222
    COMMENT In function 'ProcessAirframeInfoWords', sequence of system airframe words with loop index is 
    COMMENT equal to ENGINE_TYPE_BYTE
    COMMENT 
    COMMENT class 223
    COMMENT In function 'ProcessAirframeInfoWords', index is greater than ENGINE_TYPE_BYTE
    COMMENT 
    COMMENT class 224
    COMMENT In function 'ProcessAirframeInfoWords', index is less than ENGINE_TYPE_BYTE
    COMMENT 
    COMMENT class 225
    COMMENT In function 'ProcessAirframeInfoWords', index is equal to ENGINE_TYPE_BYTE
    COMMENT 
    COMMENT class 226
    COMMENT In function 'ProcessAirframeInfoWords', sequence of system airframe words with loop index is 
    COMMENT greater than ENGINE_SER_BYTE
    COMMENT 
    COMMENT class 227
    COMMENT In function 'ProcessAirframeInfoWords', sequence of system airframe words with loop index is 
    COMMENT less than ENGINE_SER_BYTE
    COMMENT 
    COMMENT class 228
    COMMENT In function 'ProcessAirframeInfoWords', sequence of system airframe words with loop index is 
    COMMENT equal to ENGINE_SER_BYTE
    COMMENT 
    COMMENT class 229
    COMMENT In function 'ProcessAirframeInfoWords', index is greater than ENGINE_SER_BYTE
    COMMENT 
    COMMENT class 230
    COMMENT In function 'ProcessAirframeInfoWords', index is less than ENGINE_SER_BYTE
    COMMENT 
    COMMENT class 231
    COMMENT In function 'ProcessAirframeInfoWords', index is equal to ENGINE_SER_BYTE
    COMMENT 
    COMMENT class 232
    COMMENT In function 'ProcessAirframeInfoWords', sequence of system airframe words with loop index is 
    COMMENT greater than AICFT_SER_BYTE
    COMMENT 
    COMMENT class 233
    COMMENT In function 'ProcessAirframeInfoWords', sequence of system airframe words with loop index is 
    COMMENT less than AICFT_SER_BYTE
    COMMENT 
    COMMENT class 234
    COMMENT In function 'ProcessAirframeInfoWords', sequence of system airframe words with loop index is 
    COMMENT equal to AICFT_SER_BYTE
    COMMENT 
    COMMENT class 235
    COMMENT In function 'ProcessAirframeInfoWords', index is greater than AICFT_SER_BYTE
    COMMENT 
    COMMENT class 236
    COMMENT In function 'ProcessAirframeInfoWords', index is less than AICFT_SER_BYTE
    COMMENT 
    COMMENT class 237
    COMMENT In function 'ProcessAirframeInfoWords', index is equal to AICFT_SER_BYTE
    COMMENT 
    COMMENT class 238
    COMMENT In function 'ProcessAirframeInfoWords', sequence of system airframe words with loop index is 
    COMMENT greater than AICFT_REGS_BYTE
    COMMENT 
    COMMENT class 239
    COMMENT In function 'ProcessAirframeInfoWords', sequence of system airframe words with loop index is 
    COMMENT less than AICFT_REGS_BYTE
    COMMENT 
    COMMENT class 240
    COMMENT In function 'ProcessAirframeInfoWords', sequence of system airframe words with loop index is 
    COMMENT equal to AICFT_REGS_BYTE
    COMMENT 
    COMMENT class 241
    COMMENT In function 'ProcessAirframeInfoWords', index is greater than AICFT_REGS_BYTE
    COMMENT 
    COMMENT class 242
    COMMENT In function 'ProcessAirframeInfoWords', index is less than AICFT_REGS_BYTE
    COMMENT 
    COMMENT class 243
    COMMENT In function 'ProcessAirframeInfoWords', index is equal to AICFT_REGS_BYTE
    COMMENT 
    COMMENT class 244
    COMMENT The function 'ProcessAirframeInfoWords', calls the function 'MemCpy'
    COMMENT 
    COMMENT class 245
    COMMENT The function 'ProcessAirframeInfoWords', calls the function 'StrLen'
    COMMENT 
    COMMENT class 246
    COMMENT In function 'ProcessAirframeInfoWords', Dau_config_id_disp with loop index is equall to space
    COMMENT 
    COMMENT class 247
    COMMENT In function 'ProcessAirframeInfoWords', Dau_config_id_disp with loop index is not equall to space
    COMMENT 
    COMMENT class 248
    COMMENT The function 'ProcessAirframeInfoWords', calls the function 'StringCompare'
    COMMENT 
    COMMENT class 249
    COMMENT In function 'ProcessAirframeInfoWords', return value of StringCompare with spilt word1
    COMMENT and aircraft model as parameters  is TRUE
    COMMENT 
    COMMENT class 250
    COMMENT In function 'ProcessAirframeInfoWords', return value of StringCompare with spilt word1
    COMMENT and aircraft model as parameters  is FALSE
    COMMENT 
    COMMENT class 251
    COMMENT In function 'ProcessAirframeInfoWords', return value of StringCompare with spilt word2
    COMMENT and engine type as parameters  is TRUE
    COMMENT 
    COMMENT class 252
    COMMENT In function 'ProcessAirframeInfoWords', return value of StringCompare with spilt word2
    COMMENT and engine type as parameters  is FALSE
    COMMENT 
    COMMENT class 253
    COMMENT The function 'ProcessSysInfoWords', calls the function 'ProcessAirframeInfoWords'
    COMMENT 
    COMMENT Class 255
    COMMENT In function 'Process429Words',label of A429_data with indices channel and index value
    COMMENT where label is found is other than LABEL_0370
    COMMENT 
    COMMENT Class 256
    COMMENT In function 'Process429Words',label of A429_data with indices channel and index value
    COMMENT where label is found is LABEL_0370
    COMMENT
    COMMENT Class 257
    COMMENT In function 'Process429Words',label is equal to label of Exceed_data with index 0
    COMMENT 
    COMMENT Class 258
    COMMENT In function 'Process429Words',label is not equal to label of Exceed_data with index 0
    COMMENT
    COMMENT Class 259
    COMMENT The function 'A429ProcessA825' ssm is equal to RTD_STAT_FAIL.
    COMMENT
    COMMENT Class 260
    COMMENT The function 'A429ProcessA825' ssm is not equal to not equal RTD_STAT_FAIL. 
    COMMENT
    COMMENT Class 261
    COMMENT The function 'Process429Words' Config_data.eng_sdi is equal to 1
    COMMENT
    COMMENT Class 262
    COMMENT The function 'Process429Words' Config_data.eng_sdi is other than 1
    COMMENT
    COMMENT Class 263
    COMMENT The function 'Process429Words' Config_data.channels.u16_x is equal to chann
    COMMENT
    COMMENT Class 264
    COMMENT The function 'Process429Words' Config_data.channels.u16_x is not equal to channel value
    COMMENT
    COMMENT Class 265
    COMMENT The function 'Process429Words' Config_data.channels.u16_y is equal to channel value
    COMMENT
    COMMENT Class 266
    COMMENT The function 'Process429Words' Config_data.channels.u16_y is not equal to channel value
    COMMENT
    COMMENT Class 267
    COMMENT In function 'A429ProcessA825', doc of BID of sID of A825 messages is equal to DIS_COMSL_REVNO2
    COMMENT
    COMMENT Class 268
    COMMENT In function 'A429ProcessA825', doc of BID of sID of A825 messages is not equal to DIS_COMSL_REVNO2
    COMMENT
    COMMENT Class 269
    COMMENT In function 'A429ProcessA825', doc of BID of sID of A825 messages is equal to DIS_COMSL_REVNO1
    COMMENT
    COMMENT Class 270
    COMMENT In function 'A429ProcessA825', doc of BID of sID of A825 messages is not equal to DIS_COMSL_REVNO1
    COMMENT
    COMMENT Class 271
    COMMENT In function 'A429ProcessA825', doc of BID of sID of A825 messages is equal to DIS_COMSL_CRC
    COMMENT
    COMMENT Class 272
    COMMENT In function 'A429ProcessA825', doc of BID of sID of A825 messages is not equal to DIS_COMSL_CRC
    COMMENT
    COMMENT Class 273
    COMMENT In function 'ProcessSWPartNum', doc of BID of sID of s_mess is DIS_COMMAINT_REVNO2
    COMMENT
    COMMENT Class 274
    COMMENT In function 'ProcessSWPartNum', doc of BID of sID of s_mess is other than DIS_COMMAINT_REVNO2
    COMMENT
    COMMENT Class 275
    COMMENT In function 'ProcessSWPartNum', doc of BID of sID of s_mess is DIS_COMSL_REVNO2
    COMMENT
    COMMENT Class 276
    COMMENT In function 'ProcessSWPartNum', doc of BID of sID of s_mess is other than DIS_COMSL_REVNO2
    COMMENT
    COMMENT Class 277
    COMMENT In function 'ProcessSWPartNum', doc of BID of sID of s_mess is DIS_COMSL_CRC
    COMMENT
    COMMENT Class 278
    COMMENT In function 'ProcessSWPartNum', doc of BID of sID of s_mess is other than DIS_COMSL_CRC
    COMMENT
    COMMENT Class 279
    COMMENT In function 'ProcessSysInfoWords', Maint_config_revno with index BUF_LEN_6 is not equal to CHAR_H 
    COMMENT
    COMMENT Class 280
    COMMENT In function 'ProcessSysInfoWords', Maint_config_revno with index BUF_LEN_6 is equal to CHAR_H  
    COMMENT
    COMMENT Class 281
    COMMENT In function 'ProcessSysInfoWords',  Soft_loader_revno with index BUF_LEN_6 is not equal to CHAR_H        
    COMMENT
    COMMENT Class 282
    COMMENT In function 'ProcessSysInfoWords',  Soft_loader_revno with index BUF_LEN_6 is equal to CHAR_H  
    COMMENT
    COMMENT Class 283
    COMMENT In function 'ProcessSysInfoWords',  Commsl_part with index BUF_LEN_6 is not equal to CHAR_H        
    COMMENT
    COMMENT Class 284
    COMMENT In function 'ProcessSysInfoWords',  Commsl_part with index BUF_LEN_6 is equal to CHAR_H
    COMMENT Invalid Class(es)
    COMMENT 
    COMMENT Class 193
    COMMENT In function 'BinAsciiCRC',invalid reference is passed to parameter 'out_buf'
    COMMENT
    COMMENT Class 189
    COMMENT In function 'MemCpy', invalid reference is passed to p_src.
    COMMENT
    COMMENT Class 190
    COMMENT In function 'MemCpy', invalid reference is passed to p_dst.
    COMMENT
    COMMENT Class 191
    COMMENT In function 'MemSet', invalid reference is passed to p_dst. 
    COMMENT
    COMMENT Class 203
    COMMENT In function 'A429ProcessA825', invalid reference is passed to s_mess. 
    COMMENT 
    COMMENT Class 204
    COMMENT In function 'ProcessF4PbitErr', invalid refernce is passed to s_mess
    COMMENT 
    COMMENT Class 205
    COMMENT In function 'ProcessF4CbitErr', invalid refernce is passed to s_mess     
    COMMENT
    COMMENT Class 285
    COMMENT In function 'Process429Words', scu_enable of Configuration data is not ONE
    COMMENT
    COMMENT Class 286
    COMMENT In function 'Process429Words', Cmu_fuel_flow is ONE
    COMMENT
    COMMENT Class 287
    COMMENT In function 'Process429Words', Md_engine_flag is TRUE
    COMMENT
    COMMENT Class 288
    COMMENT In function 'Process429Words', scu_enable of Configuration data is ONE
    COMMENT
    COMMENT Class 289
    COMMENT In function 'Process429Words', Cmu_fuel_flow is not ONE
    COMMENT
    COMMENT Class 290
    COMMENT In function 'Process429Words', Md_engine_flag is FALSE  
    COMMENT
    COMMENT Class 291
    COMMENT In function 'Process429Words', received label is LABEL_0244
    COMMENT
    COMMENT Class 292
    COMMENT In function 'Process429Words', received label is not LABEL_0244 
    COMMENT
    COMMENT Class 293
    COMMENT In function 'Process429Words', label of Cas_msg with index zero not equal to received label 
    COMMENT
    COMMENT Class 294
    COMMENT In function 'Process429Words', label of Cas_msg with index zero equal to received label 
    COMMENT
    COMMENT Class 295
    COMMENT In function 'Process429Words', label of Exceed_data with index zero not equal to received label 
    COMMENT
    COMMENT Class 296
    COMMENT In function 'Process429Words', label of Exceed_data with index zero equal to received label 
    COMMENT
    COMMENT Class 297
    COMMENT In function 'Process429Words', wog_label of Auto_cool_down_tmr not equal to received label  
    COMMENT
    COMMENT Class 298
    COMMENT In function 'Process429Words', wog_label of Auto_cool_down_tmr equal to received label      
    COMMENT
    COMMENT Class 299
    COMMENT In function 'Process429Words', timer id is ONE.     
    COMMENT
    COMMENT Class 300
    COMMENT In function 'Process429Words', timer id is not ONE.     
    COMMENT
    COMMENT Class 301
    COMMENT In function 'Process429Words',timer_label of Timer_settings with index timer of Page_settings is equal  
    COMMENT to label of A429_data indices of channel and loop index count
    COMMENT
    COMMENT Class 302
    COMMENT In function 'Process429Words',timer_label of Timer_settings with index timer of Page_settings is not equal  
    COMMENT to label of A429_data indices of channel and loop index count   
    COMMENT
    COMMENT Class 303
    COMMENT In function 'Process429Words',timer_sdi   
    COMMENT of Timer_settings with index timer of Page_settings is equal to sdi of  
    COMMENT A429_data indices of channel and loop index count   
    COMMENT
    COMMENT Class 304
    COMMENT In function 'Process429Words',timer_sdi   
    COMMENT of Timer_settings with index timer of Page_settings is not equal to sdi of  
    COMMENT A429_data indices of channel and loop index count   
    COMMENT
    COMMENT Class 305
    COMMENT In function 'Process429Words', timer id is TWO.     
    COMMENT
    COMMENT Class 306
    COMMENT In function 'Process429Words', timer id is not TWO.     
    COMMENT
    COMMENT Class 307
    COMMENT In function 'Process429Words', timer id is ZERO.        
    COMMENT
    COMMENT Class 308
    COMMENT In function 'Process429Words', timer id is not ZERO.    
    COMMENT
    COMMENT Class 309
    COMMENT In function 'Process429Words', label value is LABEL_0273    
    COMMENT
    COMMENT Class 310
    COMMENT In function 'Process429Words', label value is not LABEL_0273    
    COMMENT
    COMMENT Class 311
    COMMENT In function 'Process429Words', Md engine flag is TRUE   
    COMMENT
    COMMENT Class 312
    COMMENT In function 'Process429Words', Md engine flag is FALSE      
    COMMENT
    COMMENT Class 313
    COMMENT In function 'Process429Words', ff once flag is False    
    COMMENT
    COMMENT Class 314
    COMMENT In function 'Process429Words', ff once flag is TRUE 
    COMMENT
    COMMENT Class 315
    COMMENT In function 'Process429Words', id value is THREE    
    COMMENT
    COMMENT Class 316
    COMMENT In function 'Process429Words', id value is not THREE    
    COMMENT
    COMMENT Class 317
    COMMENT In function 'Process429Words', ssm is equal to ZERO 
    COMMENT
    COMMENT Class 318
    COMMENT In function 'Process429Words', ssm is not equal to ZERO 
    COMMENT
    COMMENT Class 319
    COMMENT In function 'Process429Words', Fault_log_adv  is TRUE   
    COMMENT
    COMMENT Class 320
    COMMENT In function 'Process429Words', Fault_log_adv is FALSE   
    COMMENT
    COMMENT Class 321
    COMMENT In function 'Process429Words', Pbit_test_result  is ZERO    
    COMMENT
    COMMENT Class 322
    COMMENT In function 'Process429Words', Pbit_test_result is not ZERO 
    COMMENT
    COMMENT Class 323
    COMMENT In function 'Process429Words', received label is equal 
    COMMENT  to LABEL_0247 or LABEL_055 or LABEL_057    
    COMMENT
    COMMENT Class 324
    COMMENT In function 'Process429Words', received label is not equal 
    COMMENT  to LABEL_0247 or LABEL_055 or LABEL_057    
    COMMENT
    COMMENT Class 325
    COMMENT In function 'Process429Words', Sign bit is other than ZERO
    COMMENT
    COMMENT Class 326
    COMMENT In function 'Process429Words', Sign bit is ZERO 
    COMMENT
    COMMENT Class 327
    COMMENT In function 'Process429Words', DATA_28_BIT is equal to A429_data of 
    COMMENT  indices of channel and loop index count of sig_bits plus A429_data of 
    COMMENT  indices channel and loop index count of start_bit minus ONE.
    COMMENT
    COMMENT Class 328
    COMMENT In function 'Process429Words', DATA_28_BIT is not equal to A429_data of 
    COMMENT  indices of channel and loop index count of sig_bits plus A429_data of 
    COMMENT  indices channel and loop index count of start_bit minus ONE.   
    COMMENT
    COMMENT Class 329
    COMMENT In function 'Process429Words', label of A429_data with index as  channel and loop index count 
    COMMENT is equal to LABEL_0247
    COMMENT
    COMMENT Class 330
    COMMENT In function 'Process429Words', label of A429_data with index as  channel and loop index count 
    COMMENT is not equal to LABEL_0247  
    COMMENT
    COMMENT Class 331
    COMMENT In function 'Process429Words', Du_position is TWO   
    COMMENT
    COMMENT Class 332
    COMMENT In function 'Process429Words', Du_position is ONE   
    COMMENT
    COMMENT Class 333
    COMMENT In function 'Process429Words', Du_position is otherthan ONE ,TWO    
    COMMENT
    COMMENT Class 334
    COMMENT In function 'Process429Words', ssm is THREE 
    COMMENT
    COMMENT Class 335
    COMMENT In function 'Process429Words', ssm is not THREE     
    COMMENT
    COMMENT Class 336
    COMMENT In function 'Process429Words', data is within range of (data >= 40 and data <=50)   
    COMMENT
    COMMENT Class 337
    COMMENT In function 'Process429Words', data is not within range of (data >= 40 and data <=50)   
    COMMENT
    COMMENT Class 338
    COMMENT In function 'Process429Words', data is within range of (data >= 151 and data <=425) 
    COMMENT
    COMMENT Class 339
    COMMENT In function 'Process429Words', data is not within range of (data >= 151 and data <=425) 
    COMMENT
    COMMENT Class 340
    COMMENT In function 'Process429Words', loop index count is equal to LABEL_0272  
    COMMENT
    COMMENT Class 341
    COMMENT In function 'Process429Words', loop index count is not equal to LABEL_0272      
    COMMENT
    COMMENT Class 342
    COMMENT In function 'Process429Words', sdi value is ZERO    
    COMMENT
    COMMENT Class 343
    COMMENT In function 'Process429Words', sdi value is not ZERO    
    COMMENT
    COMMENT Class 344
    COMMENT In function 'Process429Words', loop index count is equal to LABEL_0250  
    COMMENT
    COMMENT Class 345
    COMMENT In function 'Process429Words', loop index count is not equal to LABEL_0250      
    COMMENT
    COMMENT Class 346
    COMMENT In function 'Process429Words', scu label flag is equal to SEVEN     
    COMMENT
    COMMENT Class 347
    COMMENT In function 'Process429Words', scu label flag is not equal to SEVEN         
    COMMENT
    COMMENT Class 348
    COMMENT In function 'Process429Words', scu timer of index ZERO or scu timer of index ONE or scu 
    COMMENT  timer of index TWO is greater than RTD_MAX_INTERVAL    
    COMMENT
    COMMENT Class 349
    COMMENT In function 'Process429Words', scu timer of index ZERO or scu timer of index ONE or scu 
    COMMENT  timer of index TWO is equal to RTD_MAX_INTERVAL    
    COMMENT
    COMMENT Class 350
    COMMENT In function 'Process429Words', scu timer of index ZERO or scu timer of index ONE or scu 
    COMMENT  timer of index TWO is less than RTD_MAX_INTERVAL
    COMMENT
    COMMENT Class 351
    COMMENT In function 'A429Init', scu_enable of configuration data is equal to TRUE   
    COMMENT
    COMMENT Class 352
    COMMENT In function 'A429Init', scu_enable of configuration data is equal to FALSE  
    COMMENT
    COMMENT Class 353
    COMMENT In function 'A429Init', label of A429_data with index zero and loop counter value is equal to LABEL_0247
    COMMENT
    COMMENT Class 354
    COMMENT In function 'A429Init', label of A429_data with index zero and loop counter value is not equal to LABEL_0247
    COMMENT
    COMMENT Class 355
    COMMENT In function 'A429Init', label of A429_data with index zero and loop counter value is equal to LABEL_0272
    COMMENT
    COMMENT Class 356
    COMMENT In function 'A429Init', label of A429_data with index zero and loop counter value is not equal to LABEL_0272
    COMMENT
    COMMENT Class 357
    COMMENT In function 'A429Init', sdi of A429_data with index zero and loop counter value is equal to ZERO    
    COMMENT
    COMMENT Class 358
    COMMENT In function 'A429Init', sdi of A429_data with index zero and loop counter value is not equal to ZERO    
    COMMENT
    COMMENT Class 359
    COMMENT In function 'A429Init', label of A429_data with index zero and loop counter value is equal to LABEL_0250
    COMMENT
    COMMENT Class 360
    COMMENT In function 'A429Init', label of A429_data with index zero and loop counter value is not equal to LABEL_0250    
    COMMENT
    COMMENT Class 361
    COMMENT In function 'Process429Words', Du_identified  is FALSE
    COMMENT
    COMMENT Class 362
    COMMENT In function 'Process429Words', Du_identified  is TRUE   
    COMMENT
    COMMENT Class 363
    COMMENT In function 'Process429Words' label of A429_data with indices channel and
    COMMENT loop index count is equal to LABEL_0346  
    COMMENT
    COMMENT Class 364
    COMMENT In function 'Process429Words' when label of A429_data with indices channel and
    COMMENT loop index count is not equal to LABEL_0346   
    COMMENT
    COMMENT Class 365
    COMMENT The function 'Process429Words' ssm is equal to three.
    COMMENT
    COMMENT Class 366
    COMMENT The function 'Process429Words' ssm is not equal to three.
    COMMENT  
    COMMENT </ECD>

--------------------------------------------------------------------------------
--
-- STUB DECLARATIONS OF THE TESTED OR INTEGRATED UNITS
--
--------------------------------------------------------------------------------

SIMUL

    DEFINE STUB hdudispfa429_c

        #void A429Extract(T_UINT8 _in *address); 
    
        #void CasExtract(T_UINT8 _in *address);
 
        #void CasSetCasWord(T_UINT8 _in u8_index, T_UINT16 _in u16_cas_word); 
        
        #void RTDSetParam(T_UINT8 _in channel, T_UINT16 _in a429_tag, T_FLOAT _in s32_data, T_RTD_STATUS _in ertd_stat); 

        --variable str is made as _no because local variable address cannot be expected and 
        --the variable is verified in hdudispfa429_6.ptu.
        #T_UINT16 StrLen( T_CHAR _no *str);

    #void OffsetInttoIntArray(T_UINT8 sdi);
    #void GainInttoIntArray(T_UINT8 sdi);
    
    #void SetCMUFuelFlowEnable(T_UINT8  _in ff_enable_flag); 
    #void SetFuelFlowData(T_UINT8  _in a429_tag, T_FLOAT  _in data); 
    #void ProcessLmsScuProbeErr(T_UINT32  _in data, T_UINT8  _in status);
    #void ProcessLmsScuSysStatusErr(T_UINT32  _in data, T_UINT8  _in status); 
    #void ProcessingArinc01Fault(void); 
    #void ScuRTDSetParam(T_UINT8  _in channel, T_UINT16  _in a429_tag, T_UINT8  _in rtd_tag, T_FLOAT  _in s32_data, T_RTD_STATUS  _in ertd_stat); 

    
    END DEFINE

ELSE_SIMUL

    --No action defined as of now if the module is not simulated

END SIMUL

--------------------------------------------------------------------------------
--
-- ENVIRONMENTS DECLARATIONS
--
--------------------------------------------------------------------------------
--IF HOST

--No special things that have to be done on the host to run the test.

--ELSE

--No action defined for the target execution as of now

--END IF
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
-- TESTED FILE ENVIRONNEMENT
--------------------------------------------------------------------------------

-- Environment of the file hdudispfa429.c
ENVIRONMENT ENV_hdudispfa429_c

VAR Config_data.scu_enable,      init = 0,            ev = init
VAR Du_identified,      init = FALSE,            ev = init

END ENVIRONMENT -- ENV_hdudispfa429_c
--USE ENV_hdudispfa429_c

--------------------------------------------------------------------------------
--
-- SERVICES DECLARATIONS
--
--------------------------------------------------------------------------------
-------------------------------------------------------------------------------
-- Declaration of the service ProcessF4CbitErr
--------------------------------------------------------------------------------
SERVICE ProcessF4CbitErr
SERVICE_TYPE extern

    -- Tested service parameters declarations
    #T_A825_MESSAGE s_mess;

    ENVIRONMENT ENV_ProcessF4CbitErr
    
        STRUCTURE s_mess,       init = { lcc => EEC, sID => { BID => { doc => 0, rci => 0 } }, 
        &                       u8PaySize => 0, u8PayLoad => { others => 0 } },     ev = init
    
    END ENVIRONMENT -- ENV_ProcessF4CbitErr
    USE ENV_ProcessF4CbitErr

TEST 1
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT [hdudispfa429-ProcessF4CbitErr-DB-LLR-001]
    COMMENT The function does nothing when u8PayLoad with zero index of s_mess right shifted 
    COMMENT by zero times and bitwise AND with one is equal to zero.
    COMMENT Equivalence Class 2.
    COMMENT </TD> 

    ELEMENT

        COMMENT INPUT SECTION:
            
             --A825 messages
             STRUCTURE s_mess,      init = { lcc => EEC, sID => { BID => { sfid => 0, rsd => 0, 
             &                      lcl => 0, pvt => 0, doc => 0, rci => 0 } }, u8PaySize => 10,
             &                      u8PayLoad => { 0=> 0x100, others => 0 } },      ev = init
            
        
        COMMENT OUTPUT SECTION:

            --None

        COMMENT INPUT/OUTPUT SECTION:
            
            --None
        
        -- Stub Calls:
        SIMUL
            
            --None
    
        END SIMUL

        -- Calling the Unit Under Test :
        #ProcessF4CbitErr(&s_mess);

    END ELEMENT

END TEST -- TEST 1   

TEST 2
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT [hdudispfa429-ProcessF4CbitErr-DB-LLR-001]
    COMMENT The function set U16_message_words with one as index to U16_message_words with one as 
    COMMENT index bitwise OR with BIT_16_SET when u8PayLoad with zero index of s_mess right shifted by zero
    COMMENT times and bitwise AND with one is equal to ONE.
    COMMENT Equivalence Class 1.
    COMMENT </TD> 

    ELEMENT

        COMMENT INPUT SECTION:
            
            --A825 messages
            STRUCTURE s_mess,           init = { lcc => EEC, sID => { BID => { sfid => 0, rsd => 0, lcl => 0,
            &                            pvt => 0, doc => 0, rci => 0 } }, u8PaySize => 10, u8PayLoad => 
            &                            { 0=> 0x9, others => 0 } },     ev = init
                    
        COMMENT OUTPUT SECTION:

            -- Message words
            VAR U16_message_words[0],   init = 0x0,                       ev = BIT_16_SET
            
        COMMENT INPUT/OUTPUT SECTION:
            
            --None
        
        -- Stub Calls:
        SIMUL
            
            --None
    
        END SIMUL

        -- Calling the Unit Under Test :
        #ProcessF4CbitErr(&s_mess);

    END ELEMENT

END TEST -- TEST 2

--TEST 3
--FAMILY robustness 
--
--  COMMENT Test Description
--    COMMENT <TD> 
--    COMMENT [hdudispfa429-ProcessF4CbitErr-DB-LLR-001]
--    COMMENT This test case is written to check the robustness by passing invalid reference to s_mess
--    COMMENT Equivalence Class 205
--    COMMENT </TD> 
--
--    ELEMENT
--
--      COMMENT INPUT SECTION:
--          
--          -- None
--      
--        COMMENT OUTPUT SECTION:
--
--          --None
--
--        COMMENT INPUT/OUTPUT SECTION:
--            
--          --None
--        
--        -- Stub Calls:
--        SIMUL
--            
--          --None
--    
--        END SIMUL
--
--        -- Calling the Unit Under Test :
--      #ProcessF4CbitErr(NULL);
--
--    END ELEMENT
--
--END TEST -- TEST 3

END SERVICE -- ProcessF4CbitErr

--------------------------------------------------------------------------------
-- Declaration of the service ProcessF4PbitErr
--------------------------------------------------------------------------------
SERVICE ProcessF4PbitErr
SERVICE_TYPE extern

    -- Tested service parameters declarations
    #T_A825_MESSAGE s_mess;

    ENVIRONMENT ENV_ProcessF4PbitErr
    
    STRUCTURE s_mess,       init = { lcc => EEC, sID => { BID => { sfid => 0, rsd => 0, lcl => 0,
    &                       pvt => 0, doc => 0, rci => 0 } }, u8PaySize => 0, u8PayLoad => { others => 0 } },
    &                       ev = init
    
    END ENVIRONMENT -- ENV_ProcessF4PbitErr
    USE ENV_ProcessF4PbitErr

TEST 1
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT [hdudispfa429-ProcessF4PbitErr-DB-LLR-001]
    COMMENT The function set U16_message_words with zero as index to U16_message_words with zero
    COMMENT as index bitwise OR with BIT_SHIFT_BY_512 when u8PayLoad with zero index of s_mess right
    COMMENT shifted by zero times and bitwise AND with one is not equal to zero.
    COMMENT Equivalence Class 25.
    COMMENT </TD> 

    ELEMENT

        COMMENT INPUT SECTION:
            
            --A825 messages
            STRUCTURE s_mess,   init = { lcc => EEC, sID => { BID => { others=>0 } },
            &                   u8PaySize => 0, u8PayLoad => { 0=>0x1, others => 0 } }, ev = init            
        
        COMMENT OUTPUT SECTION:
            
            -- Message words
            VAR U16_message_words[0],   init =0x100,                ev = 0x300

        COMMENT INPUT/OUTPUT SECTION:
            
            --None
        
        -- Stub Calls:
        SIMUL
            
            --None
    
        END SIMUL

        -- Calling the Unit Under Test :
        #ProcessF4PbitErr(&s_mess);

    END ELEMENT

END TEST -- TEST 1   

TEST 2
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT [hdudispfa429-ProcessF4PbitErr-DB-LLR-002]
    COMMENT The function set U16_message_words with zero as index to U16_message_words with
    COMMENT zero as index bitwise OR with BIT_SHIFT_BY_1024 when u8PayLoad with zero index of
    COMMENT s_mess right shifted by one time and bitwise AND with one is not equal to zero.
    COMMENT Equivalence Class 27.
    COMMENT </TD> 

    ELEMENT

        COMMENT INPUT SECTION:
            
            --A825 messages
            STRUCTURE s_mess,   init = { lcc => EEC, sID => { BID => { others=> 0 } },
            &                   u8PaySize => 0, u8PayLoad => { 0=>0x2, others => 0 } },      ev = init

        COMMENT OUTPUT SECTION:

            -- Message words
            VAR U16_message_words[0],   init =0x100,                ev = 0x500

        COMMENT INPUT/OUTPUT SECTION:
            
            --None
        
        -- Stub Calls:
        SIMUL
            
            --None
    
        END SIMUL

        -- Calling the Unit Under Test :
        #ProcessF4PbitErr(&s_mess);

    END ELEMENT

END TEST -- TEST 2   

TEST 3
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT [hdudispfa429-ProcessF4PbitErr-DB-LLR-003]
    COMMENT The function set U16_message_words with zero as index to U16_message_words with 
    COMMENT zero as index bitwise OR with BIT_SHIFT_BY_256  when u8PayLoad with zero index of
    COMMENT s_mess right shifted by two times and bitwise AND with one is not equal to zero.
    COMMENT Equivalence Class 29.
    COMMENT </TD> 

    ELEMENT

        COMMENT INPUT SECTION:
            
            --A825 messages
            STRUCTURE s_mess,   init = { lcc => EEC, sID => { BID => { others=> 0 } },
            &                   u8PaySize => 0, u8PayLoad => { 0=>0x4, others => 0 } },     ev = init           
        
        COMMENT OUTPUT SECTION:

            -- Message words
            VAR U16_message_words[0],   init =0x1000,               ev = 0x1100

        COMMENT INPUT/OUTPUT SECTION:
            
            --None
        
        --Stub Calls:
        SIMUL
            
            --None
    
        END SIMUL

        --Calling the Unit Under Test :
        #ProcessF4PbitErr(&s_mess);

    END ELEMENT

END TEST -- TEST 3

TEST 4
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT [hdudispfa429-ProcessF4PbitErr-DB-LLR-004]
    COMMENT The function set U16_message_words with zero as index to U16_message_words with
    COMMENT zero as index bitwise OR with BIT_SHIFT_BY_2048  when u8PayLoad with zero index
    COMMENT of s_mess right shifted by three times and bitwise AND with one is not equal to zero.
    COMMENT Equivalence Class 31.
    COMMENT </TD> 

    ELEMENT

        COMMENT INPUT SECTION:
            
            --A825 messages
            STRUCTURE s_mess,   init = { lcc => EEC, sID => { BID => { others=> 0 } },
            &                   u8PaySize => 0, u8PayLoad => { 0=>0x8, others => 0 } },     ev = init
            
        COMMENT OUTPUT SECTION:

            -- Message words
            VAR U16_message_words[0],   init =0x100,                ev = 0x900

        COMMENT INPUT/OUTPUT SECTION:
            
            --None
        
        -- Stub Calls:
        SIMUL
            
            --None
    
        END SIMUL

        -- Calling the Unit Under Test :
        #ProcessF4PbitErr(&s_mess);

    END ELEMENT

END TEST -- TEST 4

TEST 5
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT [hdudispfa429-ProcessF4PbitErr-DB-LLR-005]
    COMMENT The function set U16_message_words with zero as index to U16_message_words with
    COMMENT zero as index bitwise OR with BIT_SHIFT_BY_4096 when u8PayLoad with zero index of
    COMMENT s_mess right shifted by four times and bitwise AND with one is not equal to zero.  
    COMMENT Equivalence Class 33.
    COMMENT </TD> 

    ELEMENT

        COMMENT INPUT SECTION:
            
            --A825 messages
            STRUCTURE s_mess,   init = { lcc => EEC, sID => { BID => { others=> 0 } },
            &                   u8PaySize => 0, u8PayLoad => { 0=>0x10, others => 0 } },    ev = init
            
        COMMENT OUTPUT SECTION:

            -- Message words
            VAR U16_message_words[0],   init =0x100,                ev = 0x1100

        COMMENT INPUT/OUTPUT SECTION:
            
            --None
        
        -- Stub Calls:
        SIMUL
            
            --None
    
        END SIMUL

        -- Calling the Unit Under Test :
        #ProcessF4PbitErr(&s_mess);

    END ELEMENT

END TEST -- TEST 5

TEST 6
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT [hdudispfa429-ProcessF4PbitErr-DB-LLR-006]
    COMMENT The function set U16_message_words with zero as index to U16_message_words with zero
    COMMENT as index bitwise OR with BIT_SHIFT_BY_128 when u8PayLoad with zero index of s_mess right
    COMMENT shifted by five times and bitwise AND with one is not equal to zero. 
    COMMENT Equivalence Class 35.
    COMMENT </TD> 

    ELEMENT

        COMMENT INPUT SECTION:
            
            --A825 messages
            STRUCTURE s_mess,   init = { lcc => EEC, sID => { BID => { others=> 0 } },
            &                   u8PaySize => 0, u8PayLoad => { 0=>0x20, others => 0 } },    ev = init
            
        COMMENT OUTPUT SECTION:
            
            --None
            
        COMMENT INPUT/OUTPUT SECTION:
            
            -- Message words
            VAR U16_message_words[0],   init =0x100,                ev = 0x180

        -- Stub Calls:
        SIMUL
            
            --None
    
        END SIMUL

        -- Calling the Unit Under Test :
        #ProcessF4PbitErr(&s_mess);

    END ELEMENT

END TEST -- TEST 6

TEST 7
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT [hdudispfa429-ProcessF4PbitErr-DB-LLR-007]
    COMMENT The function set U16_message_words with zero as index to U16_message_words
    COMMENT with zero as index bitwise OR with BIT_SHIFT_BY_4 when u8PayLoad with zero
    COMMENT index of s_mess right shifted by six times and bitwise AND with one is not equal to zero.
    COMMENT Equivalence Class 37.
    COMMENT </TD> 

    ELEMENT

        COMMENT INPUT SECTION:
            
            --A825 messages
            STRUCTURE s_mess,   init = { lcc => EEC, sID => { BID => { others=> 0 } },
            &                   u8PaySize => 0, u8PayLoad => { 0=>0x40, others => 0 } },    ev = init
            
        COMMENT OUTPUT SECTION:
            
            --None
            
        COMMENT INPUT/OUTPUT SECTION:
            
            -- Message words
            VAR U16_message_words[0],   init =0x100,                ev = 0x104

        -- Stub Calls:
        SIMUL
            
            --None
    
        END SIMUL

        -- Calling the Unit Under Test :
        #ProcessF4PbitErr(&s_mess);

    END ELEMENT

END TEST -- TEST 7

TEST 8
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT [hdudispfa429-ProcessF4PbitErr-DB-LLR-001]
    COMMENT The function does nothing when u8PayLoad with zero index of s_mess right shifted
    COMMENT by zero times and bitwise AND with zero is equal to zero.
    COMMENT Equivalence Class 26
    COMMENT
    COMMENT [hdudispfa429-ProcessF4PbitErr-DB-LLR-002]
    COMMENT The function does nothing when u8PayLoad with zero index of s_mess right shifted
    COMMENT by zero times and bitwise AND with one is equal to zero.
    COMMENT Equivalence Class 28
    COMMENT
    COMMENT [hdudispfa429-ProcessF4PbitErr-DB-LLR-003]
    COMMENT The function does nothing when u8PayLoad with zero index of s_mess right shifted
    COMMENT by zero times and bitwise AND with two is equal to zero.
    COMMENT Equivalence Class 30
    COMMENT
    COMMENT [hdudispfa429-ProcessF4PbitErr-DB-LLR-004]
    COMMENT The function does nothing when u8PayLoad with zero index of s_mess right shifted
    COMMENT by zero times and bitwise AND with three is equal to zero.
    COMMENT Equivalence Class 32
    COMMENT
    COMMENT [hdudispfa429-ProcessF4PbitErr-DB-LLR-005]
    COMMENT The function does nothing when u8PayLoad with zero index of s_mess right shifted
    COMMENT by zero times and bitwise AND with four is equal to zero.
    COMMENT Equivalence Class 34
    COMMENT
    COMMENT [hdudispfa429-ProcessF4PbitErr-DB-LLR-006]
    COMMENT The function does nothing when u8PayLoad with zero index of s_mess right shifted
    COMMENT by zero times and bitwise AND with five is equal to zero.
    COMMENT Equivalence Class 36
    COMMENT
    COMMENT [hdudispfa429-ProcessF4PbitErr-DB-LLR-007]
    COMMENT The function does nothing when u8PayLoad with zero index of s_mess right shifted
    COMMENT by zero times and bitwise AND with six is equal to zero.
    COMMENT Equivalence Class 38
    COMMENT
    COMMENT Equivalence Class .
    COMMENT </TD> 

    ELEMENT

        COMMENT INPUT SECTION:
            
            --A825 messages
            STRUCTURE s_mess,   init = { lcc => EEC, sID => { BID => { others=> 0} },
            &                   u8PaySize => 0, u8PayLoad => { 0=>0x80, others => 0 } },    ev = init
            
        COMMENT OUTPUT SECTION:
            
            --None
            
        COMMENT INPUT/OUTPUT SECTION:
            
            --None

        -- Stub Calls:
        SIMUL
            
            --None
    
        END SIMUL

        -- Calling the Unit Under Test :
        #ProcessF4PbitErr(&s_mess);

    END ELEMENT

END TEST -- TEST 8

--TEST 9
--FAMILY robustness

--  COMMENT Test Description
--    COMMENT <TD> 
--    COMMENT [hdudispfa429-ProcessF4PbitErr-DB-LLR-001]
--    COMMENT This test case is written to check the robustness by passing invalid reference to s_mess
--    COMMENT Equivalence Class 204 
--    COMMENT </TD> 
--
--    ELEMENT
--
--      COMMENT INPUT SECTION:
--          
--          --None
--      
--        COMMENT OUTPUT SECTION:
--
--          -- None
--
--        COMMENT INPUT/OUTPUT SECTION:
--            
--          --None
--        
--        -- Stub Calls:
--        SIMUL
--            
--          --None
--    
--        END SIMUL
--
--    -- Calling the Unit Under Test :
--    #ProcessF4PbitErr(NULL);
--
--    END ELEMENT
--
-- END TEST -- TEST 9

END SERVICE -- ProcessF4PbitErr

--------------------------------------------------------------------------------
-- Declaration of the service A429ProcessA825
--------------------------------------------------------------------------------
SERVICE A429ProcessA825
SERVICE_TYPE extern

    -- Tested service parameters declarations
  #T_A825_MESSAGE s_mess;
    
    ENVIRONMENT ENV_A429ProcessA825
    
        STRUCTURE s_mess,       init = { lcc => EEC, sID => { BID => { doc => 0, rci => 0 } }, u8PaySize => 0x2,
        &u8PayLoad => { others => 0 } },                                            ev = init
    
    END ENVIRONMENT -- ENV_A429ProcessA825
    USE ENV_A429ProcessA825

TEST 1
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT [hdudispfa429-A429ProcessA825-DB-LLR-001]
    COMMENT The function does the following when doc of BID of sID of s_mess is equal to A429_CHAN_1.
    COMMENT 1. Set Source to address of u8PayLoad of s_mess.
    COMMENT 2. Set Destination to address of A429 word.
    COMMENT 3. Copy the contents  of first four bytes of u8PayLoad of s_mess to Destination.
    COMMENT 4.Set Du_position to 9 and 10th bit of A429 word when 9 and 10th bit of A429 word
    COMMENT is greater than zero.
    COMMENT 5.Set Du_identified to TRUE when 9 and 10th bit of A429 word is greater than zero.
    COMMENT and Du_identified  is FALSE.
    COMMENT Equivalence Class 39,65,361
    COMMENT
    COMMENT [hdudispfa429-A429ProcessA825-DB-LLR-002]
    COMMENT The function call Process429Words with A429 word and zero as its parameters when doc
    COMMENT of BID of sID of s_mess is equal to A429_CHAN_1.
    COMMENT Equivalence Class 67
    COMMENT
    COMMENT [hdudispfa429-A429ProcessA825-DB-LLR-003]
    COMMENT The function does nothing when doc of BID of sID of s_mess is equal to A429_CHAN_1 and
    COMMENT u8PaySize of s_mess is not equal to EIGHT 
    COMMENT Equivalence Class 69
    COMMENT
    COMMENT [hdudispfa429-Process429Words-DB-LLR-001]
    COMMENT The function extract the label from i32_arinc_word.
    COMMENT Equivalence Class None
    COMMENT
    COMMENT [hdudispfa429-Process429Words-DB-LLR-002]
    COMMENT The function does the following
    COMMENT - extract the SDI bits from i32_arinc_word.
    COMMENT 
    COMMENT Equivalence Class 
    COMMENT 
    COMMENT [hdudispfa429-Process429Words-DB-LLR-003]
    COMMENT The function shall does the following 
    COMMENT 1. Extract the SSM from i32_arinc_word right shift with M_TWENTY_NINE And THREE.
    COMMENT 2. Set the maximum label value to Port1_label_count when channel is ZERO else set the maximum label to Port2_label_count.
    COMMENT 3. The function shall does the following when Config_data of eng_sdi is equal to ONE.
    COMMENT 1. Set the engine_sdi to SDI.
    COMMENT 2. Set the source_EIU1 to TRUE when Config_data of channels of u16_x is equal to channel. 
    COMMENT 1. Set the engine_sdi to ZERO.
    COMMENT 2. Set the source_EIU1 to TRUE when  ONE  is equal to  SDI.
    COMMENT The function shall does the following when EIU1 is equal to Active_eiu And source_EIU1 is equal to TRUE.
    COMMENT 1. Set the offset_value_cal with index engine_sdi to arinc word right shift of TEN  And EXTRACT_2BYTE.
    COMMENT 2. Call the function OffsetInttoArray with the parameter engine sdi.
    COMMENT 3. Set the Offset_bool with index engine sdi to true. when label is equal to LABEL_051 And Offset_bool with index engine sdi is equal to FALSE.

    COMMENT  Equivalence Class 72,261,263
    COMMENT
    COMMENT [hdudispfa429-Process429Words-DB-LLR-004] 
    COMMENT The function loop till maximum label count value AND label found flag is not TRUE
    COMMENT and does the following 
    COMMENT 1. Set label found flag to TRUE when label of A429_data with indices channel and loop index count is 
    COMMENT equal to received label And sdi of A429_data with indices channel and loop index count is equal to engine sdi, 
    COMMENT 2. Set the Zero to Dau_timer when label_found is equal to TRUE
    COMMENT 
    COMMENT Equivalence Class 75,83
    COMMENT </TD> 

    ELEMENT

        COMMENT INPUT SECTION:
            
            --A825 messages
            STRUCTURE s_mess,       init = { lcc => EEC, sID =>{ BID =>{  doc => A429_CHAN_1,others => 0 } },
            &                       u8PaySize =>0x2, u8PayLoad =>{0=>148,1=>0x0,2=>0x0,3=>0x0,others=>0x29 } },
            &                                                   ev = init
            
            -- A429 label
            VAR A429_data[0][3].label,  init = 0xD,             ev = init   
            
            -- Holds the port1 label count value
            VAR Port1_label_count,      init = 0x4,             ev = init
            
            -- Holds the currently active eiu
            VAR Active_eiu,             init = EIU1,            ev = init                      
        
            VAR Config_data.eng_sdi,    init = 1,               ev = init
            
            VAR Config_data.channels.u16_x, init = 0,           ev = init
            
            VAR Config_data.channels.u16_y, init = 1,           ev = init

            
            
        COMMENT OUTPUT SECTION:
            
         VAR Offset_value_cal[0],           init = 12,      ev = 0
            
           

        COMMENT INPUT/OUTPUT SECTION:
            
            --None
        
        -- Stub Calls:
        SIMUL
            
            STUB OffsetInttoIntArray(0)
    
        END SIMUL

        -- Calling the Unit Under Test :
        #A429ProcessA825(&s_mess);

    END ELEMENT

END TEST -- TEST 1




TEST 3
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT [hdudispfa429-A429ProcessA825-DB-LLR-001]
    COMMENT The function does the following when doc of BID of sID of s_mess is equal to A429_CHAN_1.
    COMMENT 1. Set Source to address of u8PayLoad of s_mess.
    COMMENT 2. Set Destination to address of A429 word.
    COMMENT 3.Copy the contents  of first four bytes of u8PayLoad of s_mess to Destination.
    COMMENT 4.Does nothing when 9 and 10th bit of A429 word is less than or equal to zero.
    COMMENT and Du_identified  is FALSE.
    COMMENT Equivalence Class 39,66,361
    COMMENT
    COMMENT [hdudispfa429-A429ProcessA825-DB-LLR-003]
    COMMENT The function does the following when doc of BID of sID of s_mess is equal to A429_CHAN_1 
    COMMENT and u8PaySize of s_mess is equal to EIGHT
    COMMENT 1. Set Source to address of u8PayLoad of s_mess with index 4.
    COMMENT 2. Set Destination to address of A429 word.
    COMMENT 3.Copy the contents of next four bytes of u8PayLoad of s_mess to Destination.
    COMMENT Equivalence Class 39,68
    COMMENT
    COMMENT [hdudispfa429-A429ProcessA825-DB-LLR-004]
    COMMENT The function call Process429Words with A429 word and zero as its parameters when
    COMMENT doc of  BID of sID of s_mess is equal to A429_CHAN_1 and u8PaySize of s_mess is equal to EIGHT.
    COMMENT Equivalence Class 39,67,68
    COMMENT
    COMMENT [hdudispfa429-Process429Words-DB-LLR-002]
    COMMENT The function does the following
    COMMENT - extract the SDI bits from i32_arinc_word.
    COMMENT - does nothing when SDI is equal to ZERO
    COMMENT Equivalence Class 71
    COMMENT
    COMMENT [hdudispfa429-Process429Words-DB-LLR-004] 
    COMMENT The function loop till maximum label count value AND label found flag is not TRUE
    COMMENT and does the following 
    COMMENT 1. Set label found flag to TRUE when label of A429_data with indices channel and loop index count is 
    COMMENT equal to received label And sdi of A429_data with indices channel and loop index count is equal to engine sdi, 
    COMMENT 2. Set the Zero to Dau_timer when label_found is equal to TRUE
    COMMENT 
    COMMENT Equivalence Class 75,83
    COMMENT </TD> 

    ELEMENT

        COMMENT INPUT SECTION:
            
            --A825 messages
            STRUCTURE s_mess,       init = { lcc => EEC, sID =>{ BID =>{  doc => A429_CHAN_1,others => 0 } },
            &                       u8PaySize =>0x8, u8PayLoad =>{0=>0x7C,1=>0xD8,2=>0x25,3=>0xF,others=>0x8 } },
            &                                                   ev = init
            
            -- A429 data values
            VAR A429_data[0][0].label,      init = 0xD,         ev = init
            
            -- Holds the port1 label count value
            VAR Port1_label_count,          init = 0x0,         ev = init
            
            -- Holds the currently active eiu
            VAR Active_eiu,                 init = 0x2,         ev = init
        
        COMMENT OUTPUT SECTION:

            --None

        COMMENT INPUT/OUTPUT SECTION:
        
            -- None
            
        
        -- Stub Calls:
        SIMUL
            
            --None
    
        END SIMUL

        -- Calling the Unit Under Test :
        #A429ProcessA825(&s_mess);

    END ELEMENT

END TEST -- TEST 3



TEST 6
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT [hdudispfa429-Process429Words-DB-LLR-005]
    COMMENT The function  does nothing 
    COMMENT when all of the below conditions are satisfied,
    COMMENT 1.Active_eiu is EIU1 AND SDI value is ONE  OR  hdudispfa429-A429ProcessA825-DB-LLR-001
    COMMENT  Result of above condition AND label found flag is TRUE AND Pbit_test_result is equal to ZERO
    COMMENT 2.Type of A429_data is other than BNR and 
    COMMENT MCDC covered - During first call to Process429Words [TTXXTT]
    COMMENT          - During first call to Process429Words [TFFXXX]
    COMMENT Equivalence Class 76,79,82,84,88
    COMMENT </TD> 

    ELEMENT

        COMMENT INPUT SECTION:
            
            --A825 messages
            STRUCTURE s_mess,       init = { lcc => EEC, sID =>{ BID =>{  doc => A429_CHAN_2,others => 0 } },
            &                       u8PaySize =>0x8, u8PayLoad =>{0=>0xBC,1=>0x81,2=>0x1D,3=>0x10,others=>0x8 } },
            &                                                               ev = init
            
            -- Holds the currently active eiu
            VAR Active_eiu,                 init = EIU1,                    ev = init
            
            -- A429 label
            VAR A429_data[1][0].label,      init = 0x3D,                    ev = init
            
            -- A429 type
            VAR A429_data[1][0].type,       init = BCD,                    ev = init
            
            -- Holds the port2 label count value
            VAR Port2_label_count,          init = 0x4,                     ev = init
        
        COMMENT OUTPUT SECTION:

            --None
                        
        COMMENT INPUT/OUTPUT SECTION:
            
            --None
            
        -- Stub Calls:
        SIMUL
            
            --None

        END SIMUL

        -- Calling the Unit Under Test :
        #A429ProcessA825(&s_mess);

    END ELEMENT

END TEST -- TEST 6





TEST 12
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT [hdudispfa429-Process429Words-DB-LLR-005] 
    COMMENT The function does nothing
    COMMENT when all of the below conditions are not satisfied,
    COMMENT 1.Active_eiu is EIU1 AND SDI value is ONE  OR 
    COMMENT  Active_eiu is EIU2 AND SDI value is TWO 
    COMMENT  Result of above condition AND label found flag is TRUE AND Pbit_test_result is
    COMMENT equal to ZERO
    COMMENT 2.Type of A429_data is other than BNR AND Display characteristic identifier(bit 11 to 15 in
    COMMENT arinc message) is ZERO
    COMMENT MCDC covered [FXFXXX]
    COMMENT Equivalence Class 78,81,88
    COMMENT </TD> 

    ELEMENT

        COMMENT INPUT SECTION:
            
            --A825 messages
            STRUCTURE s_mess,       init = { lcc => EEC, sID =>{ BID =>{  doc => A429_CHAN_1,
            &                       others => 0 } }, u8PaySize =>0x2, u8PayLoad =>{0=>0x7C,
            &                       1=>0xDA,2=>0x25,3=>0xF,others=>0x8 } },
            &                       ev = init
            
            VAR A429_data[1][0].type,       init = BCD,        ev = init
            
            VAR A429_data[0][3].label,      init = 0xD,         ev = init   
            
            -- Holds the port1 label count value
            VAR Port1_label_count,          init = 0x4,         ev = init
            
            -- Holds the currently active eiu
            VAR Active_eiu,                 init = 0x2,        ev = init                       
        
        COMMENT OUTPUT SECTION:

            -- Position value of Display Unit 
            VAR Du_position,            init =0x20,             ev = 0x2
                        
            -- DU position identification status
            VAR Du_identified,          init =FALSE,            ev = TRUE

        COMMENT INPUT/OUTPUT SECTION:
            
            -- None 
            
        -- Stub Calls:
        SIMUL
            
            --None
    
        END SIMUL

        -- Calling the Unit Under Test :
        #A429ProcessA825(&s_mess);

    END ELEMENT

END TEST -- TEST 12

TEST 13
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT [hdudispfa429-Process429Words-DB-LLR-005]
    COMMENT The function does nothing
    COMMENT when all of the below conditions are satisfied,
    COMMENT 1.Active_eiu is EIU1 AND SDI value is ONE  OR 
    COMMENT  Active_eiu is EIU2 AND SDI value is TWO 
    COMMENT  Result of above condition AND label found flag is TRUE AND Pbit_test_result is
    COMMENT not equal to ZERO
    COMMENT 2.Type of A429_data is BNR AND Display characteristic identifier(bit 11 to 15 in
    COMMENT arinc message) is ZERO
    COMMENT MCDC covered [TTXXTX]
    COMMENT Equivalence Class 76,79,82,85
    COMMENT </TD> 

    ELEMENT

        COMMENT INPUT SECTION:
            
            --A825 messages
            STRUCTURE s_mess,       init = { lcc => EEC, sID =>{ BID =>{  doc => A429_CHAN_1,
            &                       others => 0 } }, u8PaySize =>0x2, u8PayLoad =>{0=>0x7C,
            &                       1=>0xD9,2=>0x25,3=>0xF,others=>0x8 } },
            &                       ev = init
            
            VAR A429_data[0][0].label,                  init = 0x3E,            ev = init   
            
            -- Holds the port1 label count value
            VAR Port1_label_count,                      init = 0x4,             ev = init
            
            -- Holds the currently active eiu
            VAR Active_eiu,                             init = EIU1,            ev = init
            
            -- CPU pbit test result
            VAR Pbit_test_result,                       init = 0x1,             ev = init  
            
            -- A429 type
            VAR A429_data[1][0].type,                   init = BNR,             ev = init           
        
        COMMENT OUTPUT SECTION:

            -- Position value of Display Unit 
            VAR Du_position,                            init =0x20,             ev = 0x1
                        
            -- DU position identification status
            VAR Du_identified,                          init =FALSE,            ev = TRUE

        COMMENT INPUT/OUTPUT SECTION:
            
            -- None
        
        -- Stub Calls:
        SIMUL
            
            --None
    
        END SIMUL

        -- Calling the Unit Under Test :
        #A429ProcessA825(&s_mess);

    END ELEMENT

END TEST -- TEST 13

TEST 14
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT [hdudispfa429-Process429Words-DB-LLR-005]
    COMMENT The function does nothing
    COMMENT when all of the below conditions are satisfied,
    COMMENT 1.Active_eiu is EIU1 AND SDI value is ONE  OR 
    COMMENT  Active_eiu is EIU2 AND SDI value is TWO 
    COMMENT  Result of above condition AND label found flag is TRUE AND Pbit_test_result is
    COMMENT not equal to ZERO
    COMMENT 2.Type of A429_data is BNR AND Display characteristic identifier(bit 11 to 15 in
    COMMENT arinc message) is ZERO
    COMMENT MCDC covered [FXTTTF]
    COMMENT Equivalence Class 77,80,82,85
    COMMENT </TD> 

    ELEMENT

        COMMENT INPUT SECTION:
            
            --A825 messages
            STRUCTURE s_mess,       init = { lcc => EEC, sID =>{ BID =>{  doc => A429_CHAN_1,
            &                       others => 0 } }, u8PaySize =>0x2, u8PayLoad =>{0=>0x7C,
            &                       1=>0xDA,2=>0x25,3=>0xF,others=>0x8 } },
            &                       ev = init
            
            VAR A429_data[0][0].label,                  init = 0x3E,            ev = init   
            
            -- Holds the port1 label count value
            VAR Port1_label_count,                      init = 0x4,             ev = init
            
            -- Holds the currently active eiu
            VAR Active_eiu,                             init = EIU2,            ev = init
            
            -- CPU pbit test result
            VAR Pbit_test_result,                       init = 0x1,             ev = init
            
            -- A429 type
            VAR A429_data[1][0].type,                   init = BNR,             ev = init            
                            
        COMMENT OUTPUT SECTION:

            -- Position value of Display Unit 
            VAR Du_position,                            init =0x20,             ev = 0x2
                        
            -- DU position identification status
            VAR Du_identified,                          init =FALSE,            ev = TRUE

        COMMENT INPUT/OUTPUT SECTION:
            
            -- None
        
        -- Stub Calls:
        SIMUL
            
            --None
    
        END SIMUL

        -- Calling the Unit Under Test :
        #A429ProcessA825(&s_mess);

    END ELEMENT

END TEST -- TEST 14


TEST 15
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT [hdudispfa429-Process429Words-DB-LLR-005]
    COMMENT The function does nothing
    COMMENT when all of the below conditions are satisfied,
    COMMENT 1.Active_eiu is EIU1 AND SDI value is ONE  OR 
    COMMENT  Active_eiu is EIU2 AND SDI value is TWO 
    COMMENT  Result of above condition AND label found flag is FALSE AND Pbit_test_result is
    COMMENT equal to ZERO
    COMMENT MCDC covered [TTXXFX]
    COMMENT Equivalence Class 76,79,83,88,90
    COMMENT </TD> 

    ELEMENT

        COMMENT INPUT SECTION:
            
            --A825 messages
            STRUCTURE s_mess,       init = { lcc => EEC, sID =>{ BID =>{  doc => A429_CHAN_1,others => 0 } },
            &                       u8PaySize =>0x2, u8PayLoad =>{0=>0x7C,1=>0xD5,2=>0x25,3=>0xF,others=>0x8 } },
            &                       ev = init
                    
            -- Holds the port1 label count value
            VAR Port1_label_count,      init = 0x1,             ev = init
            
            VAR A429_data[0][0].label,  init = 0xFF,            ev = init   
            
            -- Holds the currently active eiu
            VAR Active_eiu,             init = EIU1,            ev = init
            
            -- CPU pbit test result
            VAR Pbit_test_result,       init = 0x1,             ev = init
               
        COMMENT OUTPUT SECTION:

            -- Position value of Display Unit 
            VAR Du_position,            init =0x20,             ev = 0x1
                        
            -- DU position identification status
            VAR Du_identified,          init =FALSE,            ev = TRUE

        COMMENT INPUT/OUTPUT SECTION:
            
            -- None
        
        -- Stub Calls:
        SIMUL
            
            --None
    
        END SIMUL

        -- Calling the Unit Under Test :
        #A429ProcessA825(&s_mess);

    END ELEMENT

END TEST -- TEST 15




TEST 18
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT
    COMMENT [hdudispfa429-Process429Words-DB-LLR-005]
    COMMENT The function does nothing 
    COMMENT  when all of the below conditions are satisfied,
    COMMENT 1.Active_eiu is EIU1 AND SDI value is ONE  OR 
    COMMENT   Active_eiu is EIU2 AND SDI value is TWO 
    COMMENT  Result of above condition AND label found flag is TRUE AND Pbit_test_result is equal to ZERO
    COMMENT 2.Type of A429_data is BNR AND Display characteristic identifier(bit 11 to 15 in arinc message) is ZERO[TF]
    COMMENT MCDC covered [TTXXTT]
    COMMENT Equivalence Class 76,79,82,84,86,90
    COMMENT
    COMMENT [hdudispfa429-Process429Words-DB-LLR-009]
    COMMENT The function does nothing when all of the below conditions are satisfied
    COMMENT 1.Active_eiu is EIU1 AND SDI value is ONE  OR 
    COMMENT   Result of above condition AND label found flag is TRUE AND Pbit_test_result 
    COMMENT is equal to ZERO MCDC covered [TTXXTT]
    COMMENT 2. Type of A429_data is DDW (MCDC : FXX)
    COMMENT Equivalence Class 76,79,82,84,87,86
    COMMENT </TD> 

    ELEMENT

        COMMENT INPUT SECTION:
            
            --A825 messages
            STRUCTURE s_mess,       init = { lcc => EEC, sID =>{ BID =>{  doc => A429_CHAN_2,others => 0 } },
            &                       u8PaySize =>0x1, u8PayLoad =>{0=>0xBC,1=>0xC1,2=>0xA0,3=>0x10,others=>0x8 } },
            &                       ev = init
            
            -- Holds the currently active eiu
            VAR Active_eiu,                 init = EIU1,            ev = init
            
            -- A429 label
            VAR A429_data[1][0].label,      init = 0x3D,            ev = init
            
            -- A429 type
            VAR A429_data[1][0].type,       init = BNR,             ev = init
            
            -- Holds the port2 label count value
            VAR Port2_label_count,          init = 0x4,             ev = init
        
        COMMENT OUTPUT SECTION:

            --None
                        
        COMMENT INPUT/OUTPUT SECTION:
            
            --None
            
        -- Stub Calls:
        SIMUL
            
            --None

        END SIMUL

        -- Calling the Unit Under Test :
        #A429ProcessA825(&s_mess);

    END ELEMENT

END TEST -- TEST 18


TEST 19
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT [hdudispfa429-A429ProcessA825-DB-LLR-009]
    COMMENT The function call the function ProcessSWPartNum with s_mess as parameter to process 
    COMMENT the software part number when doc of BID of sID of s_mess is not equal to A429_CHAN_1, 
    COMMENT  A429_CHAN_2   and doc of BID of sID of s_mess  is equal to DIS_COMAPP_REVNO1. 
    COMMENT Equivalence Class 40,42,43,188
    COMMENT </TD> 

    ELEMENT

        COMMENT INPUT SECTION:
            
            --A825 messages
            STRUCTURE s_mess,   init = { lcc => EEC, sID => { BID => { doc => DIS_COMAPP_REVNO1, 
            &                   others => 0 } }, u8PaySize => 0, u8PayLoad => { others=>0x10 } },       
            &                   ev = init

        COMMENT OUTPUT SECTION:

            --None

        COMMENT INPUT/OUTPUT SECTION:
            
            -- holds the communication flight part
            ARRAY Commf_part,   init ={ 0..5 =>0x00, 6..13=>0x5, others =>0 },  
            &                   ev ={0..5 =>0x00, 6..13=>0x10, others =>0}
        
        -- Stub Calls:
        SIMUL
            
            --None
    
        END SIMUL

        -- Calling the Unit Under Test :
        #A429ProcessA825(&s_mess);

    END ELEMENT

END TEST -- TEST 19

TEST 20
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT [hdudispfa429-A429ProcessA825-DB-LLR-010]
    COMMENT The function call the function ProcessSWPartNum with s_mess as parameter to process    
    COMMENT the software part number when doc of BID of sID of s_mess is not equal to A429_CHAN_1, 
    COMMENT A429_CHAN_2, DIS_COMAPP_REVNO1 and doc of BID of sID of s_mess  is equal to DIS_COMAPP_REVNO2.
    COMMENT Equivalence Class 40,42,44,45,188
    COMMENT </TD> 

    ELEMENT

        COMMENT INPUT SECTION:
            
            --A825 messages
            STRUCTURE s_mess,       init = { lcc => EEC, sID => { BID => { doc => DIS_COMAPP_REVNO2,
            &                       others => 0 } }, u8PaySize => 0, u8PayLoad => { others=>0x10 } },   
            &                       ev = init
            
        
        COMMENT OUTPUT SECTION:

            --None

        COMMENT INPUT/OUTPUT SECTION:
  
            -- holds the communication flight part
            ARRAY Commf_part,       init ={ 0..13 =>0x00, 14..20=>0x5, others =>0 },    
            &                       ev ={0.13=>0x00, 14..21=>0x10, others =>0}
        
        
        -- Stub Calls:
        SIMUL
            
            --None
    
        END SIMUL

        -- Calling the Unit Under Test :
        #A429ProcessA825(&s_mess);

    END ELEMENT

END TEST -- TEST 20

TEST 21
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT [hdudispfa429-A429ProcessA825-DB-LLR-011]
    COMMENT The function call the function ProcessSWPartNum with s_mess as parameter to process
    COMMENT the software part number if doc of BID of sID of s_mess is not equal to A429_CHAN_1,
    COMMENT A429_CHAN_2, DIS_COMAPP_REVNO1, DIS_COMAPP_REVNO2   and doc of BID of sID of s_mess  
    COMMENT is equal to DIS_COMBOOT_REVNO1.
    COMMENT Equivalence Class 40,42,44,46,47,188
    COMMENT </TD> 

    ELEMENT

        COMMENT INPUT SECTION:
            
            --A825 messages
            STRUCTURE s_mess,   init = { lcc => EEC, sID => { BID => { doc => DIS_COMBOOT_REVNO1,
            &                   others => 0 } }, u8PaySize => 0, u8PayLoad => { others=>0x50 } },   
            &                   ev = init
                   
        COMMENT OUTPUT SECTION:

            --None

        COMMENT INPUT/OUTPUT SECTION:
            
            -- holds the communication boot part
            ARRAY Commb_part,   init ={ 0..5 =>0x00, 6..13=>0x5, others =>0 },  
            &                   ev ={0..5 =>0x00, 6..13=>0x50, others =>0}
        
        -- Stub Calls:
        SIMUL
            
            --None
    
        END SIMUL

        -- Calling the Unit Under Test :
        #A429ProcessA825(&s_mess);

    END ELEMENT

END TEST -- TEST 21

TEST 22
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT [hdudispfa429-A429ProcessA825-DB-LLR-012]
    COMMENT The function call the function ProcessSWPartNum with s_mess as parameter to process 
    COMMENT the software part number  when doc of BID of sID of s_mess is not equal to A429_CHAN_1, 
    COMMENT A429_CHAN_2, DIS_COMAPP_REVNO1, DIS_COMAPP_REVNO2, DIS_COMBOOT_REVNO1  and doc of BID 
    COMMENT of sID of s_mess  is equal to DIS_COMBOOT_REVNO2.
    COMMENT Equivalence Class 40,42,44,46,48,49,188
    COMMENT </TD> 

    ELEMENT

        COMMENT INPUT SECTION:
            
            --A825 messages
            STRUCTURE s_mess,   init = { lcc => EEC, sID => { BID => { doc => DIS_COMBOOT_REVNO2,
            &                   others => 0 } }, u8PaySize => 0, u8PayLoad => { others=>0x50 } },
            &                   ev = init
                
        COMMENT OUTPUT SECTION:

            --None

        COMMENT INPUT/OUTPUT SECTION:
  
            -- holds the communication boot part
            ARRAY Commb_part,   init ={ others =>0x5 },  ev ={0..13 =>0x5, 14..21=>0x50, others =>0x5 }
        
        -- Stub Calls:
        SIMUL
            
            --None
    
        END SIMUL

        -- Calling the Unit Under Test :
        #A429ProcessA825(&s_mess);

    END ELEMENT

END TEST -- TEST 22

TEST 23
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT [hdudispfa429-A429ProcessA825-DB-LLR-013]
    COMMENT The function call the function ProcessSWPartNum with s_mess as parameter to process
    COMMENT the software part number  when doc of BID of sID of s_mess is not equal to A429_CHAN_1,
    COMMENT A429_CHAN_2, DIS_COMAPP_REVNO1, DIS_COMAPP_REVNO2, DIS_COMBOOT_REVNO1, DIS_COMBOOT_REVNO2
    COMMENT and doc of BID of sID of s_mess  is equal to DIS_COMMAINT_REVNO1.
    COMMENT Equivalence Class 40,42,44,46,48,50,51,188
    COMMENT </TD> 

    ELEMENT

        COMMENT INPUT SECTION:
            
            --A825 messages
            STRUCTURE s_mess,       init = { lcc => EEC, sID => { BID => { doc => DIS_COMMAINT_REVNO1,
            &                       others => 0 } }, u8PaySize => 0, u8PayLoad => { others=>0x10 } },
            &                       ev = init
                    
        COMMENT OUTPUT SECTION:

            --None

        COMMENT INPUT/OUTPUT SECTION:
            
            -- holds the maintainence part number
            ARRAY Maint_part,       init ={ 0..5 =>0x00, 6..13=>0x75, others =>0 },
            &                       ev ={0..5 =>0x00, 6..13=>0x10, others =>0}
        
        -- Stub Calls:
        SIMUL
            
            --None
    
        END SIMUL

        -- Calling the Unit Under Test :
        #A429ProcessA825(&s_mess);

    END ELEMENT

END TEST -- TEST 23

TEST 24
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT [hdudispfa429-A429ProcessA825-DB-LLR-014]
    COMMENT The function call the function ProcessSWPartNum with s_mess as parameter to process
    COMMENT the software part number  if doc of BID of sID of s_mess is not equal to A429_CHAN_1,
    COMMENT A429_CHAN_2, DIS_COMAPP_REVNO1, DIS_COMAPP_REVNO2, DIS_COMBOOT_REVNO1, DIS_COMBOOT_REVNO2,
    COMMENT DIS_COMMAINT_REVNO1  and doc of BID of sID of s_mess  is equal to DIS_COMMAINT_REVNO2.
    COMMENT Equivalence Class 40,42,44,46,48,50,52,53,188
    COMMENT </TD> 

    ELEMENT

        COMMENT INPUT SECTION:
            
            --A825 messages
            STRUCTURE s_mess,   init = { lcc => EEC, sID => { BID => { sfid => 0, rsd => 0, 
            &                   lcl => 0, pvt => 0, doc => DIS_COMMAINT_REVNO2, rci => 0 } },
            &                   u8PaySize => 0, u8PayLoad => { others=>0x10 } },    ev = init           
        
        COMMENT OUTPUT SECTION:

            --None

        COMMENT INPUT/OUTPUT SECTION:
  
            -- holds the maintainence part number
            ARRAY Maint_part,   init ={ 0..13 =>0x00, 14..21=>0x75, others =>0 },
            &                   ev ={0..13 =>0x00, 14..21=>0x10, others =>0}
        
        -- Stub Calls:
        SIMUL
            
            --None
    
        END SIMUL

        -- Calling the Unit Under Test :
        #A429ProcessA825(&s_mess);

    END ELEMENT

END TEST -- TEST 24

 TEST 25
  FAMILY nominal
  
    COMMENT Test Description
      COMMENT <TD> 
      COMMENT [hdudispfa429-A429ProcessA825-DB-LLR-015]
      COMMENT The function call the function ProcessSWPartNum with s_mess as parameter to process the
      COMMENT software part number  when doc of BID of sID of s_mess is not equal to A429_CHAN_1, 
      COMMENT A429_CHAN_2, DIS_COMAPP_REVNO1, DIS_COMAPP_REVNO2, DIS_COMBOOT_REVNO1, DIS_COMBOOT_REVNO2,
      COMMENT DIS_COMMAINT_REVNO1, DIS_COMMAINT_REVNO2 and doc of BID of sID of s_mess  
      COMMENT is equal to DIS_COMBOOT_CRC.
      COMMENT Equivalence Class 40,42,44,46,48,50,52,54,55,188
      COMMENT </TD> 
  
      ELEMENT
  
        COMMENT INPUT SECTION:
            
            --A825 messages
            STRUCTURE s_mess,       init = { lcc => EEC, sID => { BID => { doc => DIS_COMBOOT_CRC,
            &                       others => 0 } }, u8PaySize => 0, u8PayLoad =>{ 0=>0x7C,1=>0xDA,
            &                       2=>0x25,3=>0xF,others=>0x8}},               ev = init
            
        
          COMMENT OUTPUT SECTION:
  
            -- holds the communication boot part
            ARRAY Commb_part,       init ={others =>0 },    ev ={ 22=>55, 23=>67,24=>68,25=>65,26=>50, 
            &                                                     27=>53,28=>48,29=>70, others =>0}
  
          COMMENT INPUT/OUTPUT SECTION:
            
            -- None
            
          -- Stub Calls:
          SIMUL
              
            --None
      
          END SIMUL
  
          -- Calling the Unit Under Test :
        #A429ProcessA825(&s_mess);
  
      END ELEMENT
  
  END TEST -- TEST 25

TEST 26
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT [hdudispfa429-A429ProcessA825-DB-LLR-016]
    COMMENT The function call the function ProcessSWPartNum with s_mess as parameter to process
    COMMENT the software part number  when doc of BID of sID of s_mess is not equal to A429_CHAN_1, 
    COMMENT A429_CHAN_2, DIS_COMAPP_REVNO1, DIS_COMAPP_REVNO2, DIS_COMBOOT_REVNO1, DIS_COMBOOT_REVNO2, 
    COMMENT DIS_COMMAINT_REVNO1, DIS_COMMAINT_REVNO2, DIS_COMBOOT_CRC and doc of BID of sID of s_mess  
    COMMENT is equal to DIS_COMMAINT_CRC.
    COMMENT Equivalence Class 40,42,44,46,48,50,52,54,56,57,188
    COMMENT </TD> 

    ELEMENT

        COMMENT INPUT SECTION:
            
            --A825 messages
            STRUCTURE s_mess,       init = { lcc => EEC, sID => { BID => { doc => DIS_COMMAINT_CRC,
            &                       others => 0 } }, u8PaySize => 0, u8PayLoad => { 0=>0x7C,1=>0xDA,
            &                       2=>0x25,3=>0xF,others=>0x8 } },             ev = init

        COMMENT OUTPUT SECTION:
        
        -- holds the maintainence part number
        ARRAY Maint_part,           init ={ others =>0 },   ev ={22=>55, 23=>67,24=>68,25=>65,26=>50, 
        &                                                        27=>53,28=>48,29=>70, others =>0}
        
        COMMENT INPUT/OUTPUT SECTION:
            
            --None
            
        -- Stub Calls:
        SIMUL
            
            --None
    
        END SIMUL

        -- Calling the Unit Under Test :
        #A429ProcessA825(&s_mess);

    END ELEMENT

END TEST -- TEST 26

TEST 27
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT [hdudispfa429-A429ProcessA825-DB-LLR-017]
    COMMENT The function call the function ProcessSWPartNum with s_mess as parameter to process 
    COMMENT the software part number  if doc of BID of sID of s_mess is not equal to A429_CHAN_1,
    COMMENT A429_CHAN_2, DIS_COMAPP_REVNO1, DIS_COMAPP_REVNO2, DIS_COMBOOT_REVNO1, DIS_COMBOOT_REVNO2,
    COMMENT DIS_COMMAINT_REVNO1, DIS_COMMAINT_REVNO2, DIS_COMBOOT_CRC,DIS_COMMAINT_CRC and doc of BID
    COMMENT of sID of s_mess  is equal to DIS_COMAPP_CRC.
    COMMENT Equivalence Class 40,42,44,46,48,50,52,54,56,58,59,188
    COMMENT </TD> 

    ELEMENT

        COMMENT INPUT SECTION:
            
            --A825 messages
            STRUCTURE s_mess,       init = { lcc => EEC, sID => { BID => { doc => DIS_COMAPP_CRC,
            &                       others => 0 } }, u8PaySize => 0, u8PayLoad => { 0=>0x7C,1=>0xDA,
            &                       2=>0x25,3=>0xF,others=>0x8 } },                 ev = init

        COMMENT OUTPUT SECTION:

            -- holds the communication flight part
            ARRAY Commf_part,       init ={ others =>0 },ev ={22=>55, 23=>67,24=>68,25=>65,26=>50, 
            &                                                 27=>53,28=>48,29=>70, others =>0}
        

        COMMENT INPUT/OUTPUT SECTION:
  
            --None
            
        -- Stub Calls:
        SIMUL
            
            --None
    
        END SIMUL

        -- Calling the Unit Under Test :
        #A429ProcessA825(&s_mess);

    END ELEMENT

END TEST -- TEST 27

TEST 28
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT [hdudispfa429-A429ProcessA825-DB-LLR-018]
    COMMENT The function call the function ProcessF4PbitErr with s_mess as parameter to process 
    COMMENT the software part number  if doc of BID of sID of s_mess is not equal to A429_CHAN_1,
    COMMENT A429_CHAN_2, DIS_COMAPP_REVNO1, DIS_COMAPP_REVNO2, DIS_COMBOOT_REVNO1, DIS_COMBOOT_REVNO2,
    COMMENT DIS_COMMAINT_REVNO1, DIS_COMMAINT_REVNO2, DIS_COMBOOT_CRC, DIS_COMMAINT_CRC, DIS_COMAPP_CRC 
    COMMENT and doc of BID of sID of s_mess  is equal to F4_PBIT_ERR.
    COMMENT Equivalence Class 40,42,44,46,48,50,52,54,56,58,60,61,202
    COMMENT </TD> 

    ELEMENT

        COMMENT INPUT SECTION:
            
            --A825 messages
            STRUCTURE s_mess,       init = { lcc => EEC, sID => { BID => { doc => F4_PBIT_ERR,
            &                       others => 0 } }, u8PaySize => 0, u8PayLoad => { others=>0x10 } },
            &                       ev = init

        COMMENT OUTPUT SECTION:

            --None

        COMMENT INPUT/OUTPUT SECTION:
  
            --None
            
        -- Stub Calls:
        SIMUL
            
            --None
    
        END SIMUL

        -- Calling the Unit Under Test :
        #A429ProcessA825(&s_mess);

    END ELEMENT

END TEST -- TEST 28

TEST 29
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT [hdudispfa429-A429ProcessA825-DB-LLR-019]
    COMMENT The function call the function ProcessF4CbitErr with s_mess as parameter to process
    COMMENT the software part number  if doc of BID of sID of s_mess is not equal to A429_CHAN_1,
    COMMENT A429_CHAN_2, DIS_COMAPP_REVNO1, DIS_COMAPP_REVNO2, DIS_COMBOOT_REVNO1, DIS_COMBOOT_REVNO2,
    COMMENT DIS_COMMAINT_REVNO1 ,DIS_COMMAINT_REVNO2, DIS_COMBOOT_CRC, DIS_COMMAINT_CRC, DIS_COMAPP_CRC,
    COMMENT F4_PBIT_ERR and doc of BID of sID of s_mess  is equal to F4_CBIT_ERR. 
    COMMENT Equivalence Class 40,42,44,46,48,50,52,54,56,58,60,62,63,201
    COMMENT </TD> 

    ELEMENT

        COMMENT INPUT SECTION:
            
            --A825 messages
            STRUCTURE s_mess,       init = { lcc => EEC, sID => { BID => { doc => F4_CBIT_ERR,
            &                       others => 0 } }, u8PaySize => 0, u8PayLoad => { others=>0x10 } },
            &                       ev = init           
        
        COMMENT OUTPUT SECTION:

            --None

        COMMENT INPUT/OUTPUT SECTION:
  
            
        -- Stub Calls:
        SIMUL
            
            --None
    
        END SIMUL

        -- Calling the Unit Under Test :
        #A429ProcessA825(&s_mess);

    END ELEMENT

END TEST -- TEST 29

TEST 30
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT [hdudispfa429-A429ProcessA825-DB-LLR-019]
    COMMENT The function does nothing when doc of BID of sID of s_mess is not equal to A429_CHAN_1,
    COMMENT A429_CHAN_2, DIS_COMAPP_REVNO1, DIS_COMAPP_REVNO2, DIS_COMBOOT_REVNO1, DIS_COMBOOT_REVNO2,
    COMMENT DIS_COMMAINT_REVNO1 ,DIS_COMMAINT_REVNO2, DIS_COMBOOT_CRC, DIS_COMMAINT_CRC, DIS_COMAPP_CRC,
    COMMENT F4_PBIT_ERR and F4_CBIT_ERR. 
    COMMENT Equivalence Class 40,42,44,46,48,50,52,54,56,58,60,62,64
    COMMENT </TD> 

    ELEMENT

        COMMENT INPUT SECTION:
            
            --A825 messages
            STRUCTURE s_mess,       init = { lcc => EEC, sID => { BID => { doc => 0x10,
            &                       others => 0 } }, u8PaySize => 0, u8PayLoad => { others=>0x10 } },
            &                       ev = init
                   
        COMMENT OUTPUT SECTION:

            --None

        COMMENT INPUT/OUTPUT SECTION:
  
            --None
            
        -- Stub Calls:
        SIMUL
            
            --None
    
        END SIMUL

        -- Calling the Unit Under Test :
        #A429ProcessA825(&s_mess);

    END ELEMENT

END TEST -- TEST 30


--TEST 31
--FAMILY robustness
--
--  COMMENT Test Description
--    COMMENT <TD> 
--    COMMENT [hdudispfa429-A429ProcessA825-DB-LLR-001]
--    COMMENT This test case is written to pass invalid reference to s_mess
--    COMMENT Equivalence Class 203
--    COMMENT
--
--    COMMENT </TD> 
--
--    ELEMENT
--
--      COMMENT INPUT SECTION:
--          
--          --None
--      
--        COMMENT OUTPUT SECTION:
--
--          --None      
--
--        COMMENT INPUT/OUTPUT SECTION:
--            
--            --None
--        
--        -- Stub Calls:
--        SIMUL
--            
--          --None
--    
--        END SIMUL
--
--        -- Calling the Unit Under Test :
--      #A429ProcessA825(NULL);
--
--    END ELEMENT
--
--END TEST -- TEST 31





TEST 38
FAMILY nominal

   COMMENT Test Description
    COMMENT <TD> 
    COMMENT [hdudispfa429-A429ProcessA825-DB-LLR-001]
    COMMENT The function does the following when doc of BID of sID of s_mess is equal to A429_CHAN_1.
    COMMENT 1. Set Source to address of u8PayLoad of s_mess.
    COMMENT 2. Set Destination to address of A429 word.
    COMMENT 3. Copy the contents  of first four bytes of u8PayLoad of s_mess to Destination.
    COMMENT 4.Set Du_position to 9 and 10th bit of A429 word when 9 and 10th bit of A429 word
    COMMENT is greater than zero.
    COMMENT and Du_identified  is FALSE.
    COMMENT 5.Set Du_identified to TRUE when 9 and 10th bit of A429 word is greater than zero.
    COMMENT Equivalence Class 39,65,361
    COMMENT
    COMMENT [hdudispfa429-A429ProcessA825-DB-LLR-002]
    COMMENT The function call Process429Words with A429 word and zero as its parameters when doc
    COMMENT of BID of sID of s_mess is equal to A429_CHAN_1.
    COMMENT Equivalence Class 67
    COMMENT
    COMMENT [hdudispfa429-A429ProcessA825-DB-LLR-003]
    COMMENT The function does nothing when doc of BID of sID of s_mess is equal to A429_CHAN_1 and
    COMMENT u8PaySize of s_mess is not equal to EIGHT 
    COMMENT Equivalence Class 69
    COMMENT
    COMMENT [hdudispfa429-Process429Words-DB-LLR-001]
    COMMENT The function extract the label from i32_arinc_word.
    COMMENT Equivalence Class None
    COMMENT
    COMMENT [hdudispfa429-Process429Words-DB-LLR-002]
    COMMENT The function does the following
    COMMENT - extract the SDI bits from i32_arinc_word.
    COMMENT 
    COMMENT Equivalence Class 
    COMMENT 
    COMMENT [hdudispfa429-Process429Words-DB-LLR-003]
    COMMENT The function shall does the following 
    COMMENT 1. Extract the SSM from i32_arinc_word right shift with M_TWENTY_NINE And THREE.
    COMMENT 2. Set the maximum label value to Port1_label_count when channel is ZERO else set the maximum label to Port2_label_count.
    COMMENT 3. The function shall does the following when Config_data of eng_sdi is equal to ONE.
    COMMENT 1. Set the engine_sdi to SDI.
    COMMENT 2. Set the source_EIU1 to TRUE when Config_data of channels of u16_x is equal to channel. 
   COMMENT 1. Set the engine_sdi to ZERO.
   COMMENT 2. Set the source_EIU1 to TRUE when  ONE  is equal to  SDI.

    COMMENT  Equivalence Class 72,261,263
    COMMENT
    COMMENT [hdudispfa429-Process429Words-DB-LLR-004] 
    COMMENT The function loop till maximum label count value AND label found flag is not TRUE
    COMMENT and does the following 
    COMMENT 1. Set label found flag to TRUE when label of A429_data with indices channel and loop index count is 
    COMMENT equal to received label And sdi of A429_data with indices channel and loop index count is equal to engine sdi, 
    COMMENT 2. Set the Zero to Dau_timer when label_found is equal to TRUE
    COMMENT 
    COMMENT Equivalence Class 75,83
    COMMENT </TD> 
   COMMENT Test Description
    COMMENT <TD> 
    COMMENT [hdudispfa429-A429ProcessA825-DB-LLR-001]
    COMMENT The function does the following when doc of BID of sID of s_mess is equal to A429_CHAN_1.
    COMMENT 1. Set Source to address of u8PayLoad of s_mess.
    COMMENT 2. Set Destination to address of A429 word.
    COMMENT 3. Copy the contents  of first four bytes of u8PayLoad of s_mess to Destination.
    COMMENT 4.Set Du_position to 9 and 10th bit of A429 word when 9 and 10th bit of A429 word
    COMMENT is greater than zero.
    COMMENT and Du_identified  is FALSE.
    COMMENT 5.Set Du_identified to TRUE when 9 and 10th bit of A429 word is greater than zero.
    COMMENT Equivalence Class 39,65,361
    COMMENT
    COMMENT [hdudispfa429-A429ProcessA825-DB-LLR-002]
    COMMENT The function call Process429Words with A429 word and zero as its parameters when doc
    COMMENT of BID of sID of s_mess is equal to A429_CHAN_1.
    COMMENT Equivalence Class 67
    COMMENT
    COMMENT [hdudispfa429-A429ProcessA825-DB-LLR-003]
    COMMENT The function does nothing when doc of BID of sID of s_mess is equal to A429_CHAN_1 and
    COMMENT u8PaySize of s_mess is not equal to EIGHT 
    COMMENT Equivalence Class 69
    COMMENT
    COMMENT [hdudispfa429-Process429Words-DB-LLR-001]
    COMMENT The function extract the label from i32_arinc_word.
    COMMENT Equivalence Class None
    COMMENT
    COMMENT [hdudispfa429-Process429Words-DB-LLR-002]
    COMMENT The function does the following
    COMMENT - extract the SDI bits from i32_arinc_word.
    COMMENT 
    COMMENT Equivalence Class 
    COMMENT 
    COMMENT [hdudispfa429-Process429Words-DB-LLR-003]
    COMMENT The function shall does the following 
    COMMENT 1. Extract the SSM from i32_arinc_word right shift with M_TWENTY_NINE And THREE.
    COMMENT 2. Set the maximum label value to Port1_label_count when channel is ZERO else set the maximum label to Port2_label_count.
    COMMENT 3. The function shall does the following when Config_data of eng_sdi is equal to ONE.
    COMMENT 1. Set the engine_sdi to SDI.
    COMMENT 2. Set the source_EIU1 to TRUE when Config_data of channels of u16_x is equal to channel. 
    COMMENT 1. Set the engine_sdi to ZERO.
    COMMENT 2. Set the source_EIU1 to TRUE when  ONE  is equal to  SDI.
    COMMENT The function shall does the following when EIU2 is equal to Active_eiu And source_EIU2 is equal to TRUE.
    COMMENT 1. Set the Gain_value_cal with index engine sdi to arinc word right shift with TEN And EXTRACT_2BYTE.
    COMMENT 2. Call the function GainInttoIntArray with parameter engine sdi.
    COMMENT 3. Set the Gain_bool with index engine sdi to TRUE when label is equal to LABEL_052 And Offset_bool with index engine sdi is equal to FALSE. Otherwise does nothing

    COMMENT  Equivalence Class 72,261,263
    COMMENT
    COMMENT [hdudispfa429-Process429Words-DB-LLR-004] 
    COMMENT The function loop till maximum label count value AND label found flag is not TRUE
    COMMENT and does the following 
    COMMENT 1. Set label found flag to TRUE when label of A429_data with indices channel and loop index count is 
    COMMENT equal to received label And sdi of A429_data with indices channel and loop index count is equal to engine sdi, 
    COMMENT 2. Set the Zero to Dau_timer when label_found is equal to TRUE
    COMMENT 
    COMMENT Equivalence Class 75,83
    COMMENT </TD> 


    ELEMENT

        COMMENT INPUT SECTION:
            
            --A825 messages
            STRUCTURE s_mess,       init = { lcc => EEC, sID =>{ BID =>{  doc => A429_CHAN_1,others => 0 } },
            &                       u8PaySize =>0x2, u8PayLoad =>{0=>84,1=>0x0,2=>0x0,3=>0x0,others=>0x8 } },
            &                                                   ev = init
            
            -- A429 label
            VAR A429_data[0][3].label,  init = 0xD,             ev = init   
            
            -- Holds the port1 label count value
            VAR Port1_label_count,      init = 0x4,             ev = init
            
            -- Holds the currently active eiu
            VAR Active_eiu,             init = EIU2,            ev = init                      
        
            VAR Config_data.eng_sdi,    init = 1,               ev = init
            
            
            VAR Config_data.channels.u16_x, init = 1,           ev = init

            VAR Config_data.channels.u16_y, init = 0,           ev = init
            
            
        COMMENT OUTPUT SECTION:
            
           VAR Gain_value_cal[0],           init = 12,      ev = 0

           

        COMMENT INPUT/OUTPUT SECTION:
            
            --None
        
        -- Stub Calls:
        SIMUL
            
            STUB GainInttoIntArray(0)
    
        END SIMUL

        -- Calling the Unit Under Test :
        #A429ProcessA825(&s_mess);

    END ELEMENT

END TEST -- TEST 38


TEST 39
FAMILY nominal

   COMMENT Test Description
    COMMENT <TD> 
    COMMENT [hdudispfa429-A429ProcessA825-DB-LLR-001]
    COMMENT The function does the following when doc of BID of sID of s_mess is equal to A429_CHAN_1.
    COMMENT 1. Set Source to address of u8PayLoad of s_mess.
    COMMENT 2. Set Destination to address of A429 word.
    COMMENT 3. Copy the contents  of first four bytes of u8PayLoad of s_mess to Destination.
    COMMENT 4.Set Du_position to 9 and 10th bit of A429 word when 9 and 10th bit of A429 word
    COMMENT is greater than zero.
    COMMENT and Du_identified  is FALSE.
    COMMENT 5.Set Du_identified to TRUE when 9 and 10th bit of A429 word is greater than zero.
    COMMENT Equivalence Class 39,65,361
    COMMENT
    COMMENT [hdudispfa429-A429ProcessA825-DB-LLR-002]
    COMMENT The function call Process429Words with A429 word and zero as its parameters when doc
    COMMENT of BID of sID of s_mess is equal to A429_CHAN_1.
    COMMENT Equivalence Class 67
    COMMENT
    COMMENT [hdudispfa429-A429ProcessA825-DB-LLR-003]
    COMMENT The function does nothing when doc of BID of sID of s_mess is equal to A429_CHAN_1 and
    COMMENT u8PaySize of s_mess is not equal to EIGHT 
    COMMENT Equivalence Class 69
    COMMENT
    COMMENT [hdudispfa429-Process429Words-DB-LLR-001]
    COMMENT The function extract the label from i32_arinc_word.
    COMMENT Equivalence Class None
    COMMENT
    COMMENT [hdudispfa429-Process429Words-DB-LLR-002]
    COMMENT The function does the following
    COMMENT - extract the SDI bits from i32_arinc_word.
    COMMENT 
    COMMENT Equivalence Class 
    COMMENT 
    COMMENT [hdudispfa429-Process429Words-DB-LLR-003]
    COMMENT The function shall does the following 
    COMMENT 1. Extract the SSM from i32_arinc_word right shift with M_TWENTY_NINE And THREE.
    COMMENT 2. Set the maximum label value to Port1_label_count when channel is ZERO else set the maximum label to Port2_label_count.
    COMMENT 3. The function shall does the following when Config_data of eng_sdi is equal to ONE.
    COMMENT 1. Set the engine_sdi to SDI.
    COMMENT 2. Config_data of channels of u16_x  ans u16_y is not equal to channel. 
   COMMENT 1. Set the engine_sdi to ZERO.
   COMMENT 2. Set the source_EIU1 to TRUE when  ONE  is equal to  SDI.

    COMMENT  Equivalence Class 72,261,264,264
    COMMENT
    COMMENT [hdudispfa429-Process429Words-DB-LLR-004] 
    COMMENT The function loop till maximum label count value AND label found flag is not TRUE
    COMMENT and does the following 
    COMMENT 1. Set label found flag to TRUE when label of A429_data with indices channel and loop index count is 
    COMMENT equal to received label And sdi of A429_data with indices channel and loop index count is equal to engine sdi, 
    COMMENT 2. Set the Zero to Dau_timer when label_found is equal to TRUE
    COMMENT 
    COMMENT Equivalence Class 75,83
    COMMENT </TD> 


    ELEMENT

        COMMENT INPUT SECTION:
            
            --A825 messages
            STRUCTURE s_mess,       init = { lcc => EEC, sID =>{ BID =>{  doc => A429_CHAN_1,others => 0 } },
            &                       u8PaySize =>0x2, u8PayLoad =>{0=>0x29,1=>0xDA,2=>0x25,3=>0xF,others=>0x8 } },
            &                                                   ev = init
            
            -- A429 label
            VAR A429_data[0][3].label,  init = 0xD,             ev = init   
            
            -- Holds the port1 label count value
            VAR Port1_label_count,      init = 0x4,             ev = init
            
            -- Holds the currently active eiu
            VAR Active_eiu,             init = EIU2,            ev = init                      
        
            VAR Config_data.eng_sdi,    init = 1,               ev = init
            
            
            VAR Config_data.channels.u16_x, init = 112,         ev = init

            VAR Config_data.channels.u16_y, init = 245,         ev = init
            
            
        COMMENT OUTPUT SECTION:
            
            -- Position value of Display Unit 
            VAR Du_position,            init =0x20,             ev = 0x2
            
            -- DU position identification status
            VAR Du_identified,          init =FALSE,            ev = TRUE
            
           

        COMMENT INPUT/OUTPUT SECTION:
            
            --None
        
        -- Stub Calls:
        SIMUL
            
            --None
    
        END SIMUL

        -- Calling the Unit Under Test :
        #A429ProcessA825(&s_mess);

    END ELEMENT
END TEST -- TEST 39


TEST 40
FAMILY nominal
 
 
 
   COMMENT Test Description
    COMMENT <TD> 
    COMMENT [hdudispfa429-A429ProcessA825-DB-LLR-001]
    COMMENT The function does the following when doc of BID of sID of s_mess is equal to A429_CHAN_1.
    COMMENT 1. Set Source to address of u8PayLoad of s_mess.
    COMMENT 2. Set Destination to address of A429 word.
    COMMENT 3. Copy the contents  of first four bytes of u8PayLoad of s_mess to Destination.
    COMMENT 4.Set Du_position to 9 and 10th bit of A429 word when 9 and 10th bit of A429 word
    COMMENT is greater than zero.
    COMMENT and Du_identified  is FALSE.
    COMMENT 5.Set Du_identified to TRUE when 9 and 10th bit of A429 word is greater than zero.
    COMMENT Equivalence Class 39,65,361
    COMMENT
    COMMENT [hdudispfa429-A429ProcessA825-DB-LLR-002]
    COMMENT The function call Process429Words with A429 word and zero as its parameters when doc
    COMMENT of BID of sID of s_mess is equal to A429_CHAN_1.
    COMMENT Equivalence Class 67
    COMMENT
    COMMENT [hdudispfa429-A429ProcessA825-DB-LLR-003]
    COMMENT The function does nothing when doc of BID of sID of s_mess is equal to A429_CHAN_1 and
    COMMENT u8PaySize of s_mess is not equal to EIGHT 
    COMMENT Equivalence Class 69
    COMMENT
    COMMENT [hdudispfa429-Process429Words-DB-LLR-001]
    COMMENT The function extract the label from i32_arinc_word.
    COMMENT Equivalence Class None
    COMMENT
    COMMENT [hdudispfa429-Process429Words-DB-LLR-002]
    COMMENT The function does the following
    COMMENT - extract the SDI bits from i32_arinc_word.
    COMMENT 
    COMMENT Equivalence Class 
    COMMENT 
    COMMENT [hdudispfa429-Process429Words-DB-LLR-003]
    COMMENT The function shall does the following 
    COMMENT 1. Extract the SSM from i32_arinc_word right shift with M_TWENTY_NINE And THREE.
    COMMENT 2. Set the maximum label value to Port1_label_count when channel is ZERO else set the maximum label to Port2_label_count.
    COMMENT 3. The function shall does the following when Config_data of eng_sdi is equal to ONE.
    COMMENT 1. Set the engine_sdi to SDI.
    COMMENT 2. Config_data of channels of u16_x  ans u16_y is not equal to channel. 
   COMMENT 1. Set the engine_sdi to ZERO.
   COMMENT 2. Set the source_EIU1 to TRUE when  ONE  is equal to  SDI.

    COMMENT  Equivalence Class 72,261,264,266
    COMMENT
    COMMENT [hdudispfa429-Process429Words-DB-LLR-004] 
    COMMENT The function loop till maximum label count value AND label found flag is not TRUE
    COMMENT and does the following 
    COMMENT 1. Set label found flag to TRUE when label of A429_data with indices channel and loop index count is 
    COMMENT equal to received label And sdi of A429_data with indices channel and loop index count is equal to engine sdi, 
    COMMENT 2. Set the Zero to Dau_timer when label_found is equal to TRUE
    COMMENT 
    COMMENT Equivalence Class 75,83
    COMMENT </TD> 

    ELEMENT

        COMMENT INPUT SECTION:
            
            --A825 messages
            STRUCTURE s_mess,       init = { lcc => EEC, sID =>{ BID =>{  doc => A429_CHAN_1,others => 0 } },
            &                       u8PaySize =>0x2, u8PayLoad =>{0=>0x29,1=>0xDA,2=>0x25,3=>0xF,others=>0x8 } },
            &                                                   ev = init
            
            -- A429 label
            VAR A429_data[0][3].label,  init = 0xD,             ev = init   
            
            -- Holds the port1 label count value
            VAR Port1_label_count,      init = 0x4,             ev = init
            
            -- Holds the currently active eiu
            VAR Active_eiu,             init = EIU2,            ev = init                      
        
            VAR Config_data.eng_sdi,    init = 1,               ev = init
            
            
            VAR Config_data.channels.u16_x, init = 112,         ev = init

            VAR Config_data.channels.u16_y, init = 245,         ev = init
            
            
        COMMENT OUTPUT SECTION:
            
            -- Position value of Display Unit 
            VAR Du_position,            init =0x20,             ev = 0x2
            
            -- DU position identification status
            VAR Du_identified,          init =FALSE,            ev = TRUE
            
           

        COMMENT INPUT/OUTPUT SECTION:
            
            --None
        
        -- Stub Calls:
        SIMUL
            
            --None
    
        END SIMUL

        -- Calling the Unit Under Test :
        #A429ProcessA825(&s_mess);

    END ELEMENT
END TEST -- TEST 40


TEST 44
FAMILY nominal
 
 
 
   COMMENT Test Description
    COMMENT <TD> 
    COMMENT [hdudispfa429-A429ProcessA825-DB-LLR-001]
    COMMENT The function does the following when doc of BID of sID of s_mess is equal to A429_CHAN_1.
    COMMENT 1. Set Source to address of u8PayLoad of s_mess.
    COMMENT 2. Set Destination to address of A429 word.
    COMMENT 3. Copy the contents  of first four bytes of u8PayLoad of s_mess to Destination.
    COMMENT 4.Set Du_position to 9 and 10th bit of A429 word when 9 and 10th bit of A429 word
    COMMENT is greater than zero.
    COMMENT and Du_identified  is FALSE.
    COMMENT 5.Set Du_identified to TRUE when 9 and 10th bit of A429 word is greater than zero.
    COMMENT Equivalence Class 39,65,361
    COMMENT
    COMMENT [hdudispfa429-A429ProcessA825-DB-LLR-002]
    COMMENT The function call Process429Words with A429 word and zero as its parameters when doc
    COMMENT of BID of sID of s_mess is equal to A429_CHAN_1.
    COMMENT Equivalence Class 67
    COMMENT
    COMMENT [hdudispfa429-A429ProcessA825-DB-LLR-003]
    COMMENT The function does nothing when doc of BID of sID of s_mess is equal to A429_CHAN_1 and
    COMMENT u8PaySize of s_mess is not equal to EIGHT 
    COMMENT Equivalence Class 69
    COMMENT
    COMMENT [hdudispfa429-Process429Words-DB-LLR-001]
    COMMENT The function extract the label from i32_arinc_word.
    COMMENT Equivalence Class None
    COMMENT
    COMMENT [hdudispfa429-Process429Words-DB-LLR-002]
    COMMENT The function does the following
    COMMENT - extract the SDI bits from i32_arinc_word.
    COMMENT 
    COMMENT Equivalence Class 
    COMMENT 
    COMMENT [hdudispfa429-Process429Words-DB-LLR-003]
    COMMENT The function shall does the following 
    COMMENT 1. Extract the SSM from i32_arinc_word right shift with M_TWENTY_NINE And THREE.
    COMMENT 2. Set the maximum label value to Port1_label_count when channel is ZERO else set the maximum label to Port2_label_count.
    COMMENT 3. The function shall does the following when Config_data of eng_sdi is equal to ONE.
    COMMENT 1. Set the engine_sdi to SDI.
    COMMENT 2. Config_data of channels of u16_x  ans u16_y is not equal to channel. 
   COMMENT 1. Set the engine_sdi to ZERO.
   COMMENT 2. Set the source_EIU1 to TRUE when  ONE  is equal to  SDI.

    COMMENT  Equivalence Class 72,261,264,266
    COMMENT
    COMMENT [hdudispfa429-Process429Words-DB-LLR-004] 
    COMMENT The function loop till maximum label count value AND label found flag is not TRUE
    COMMENT and does the following 
    COMMENT 1. Set label found flag to TRUE when label of A429_data with indices channel and loop index count is 
    COMMENT equal to received label And sdi of A429_data with indices channel and loop index count is equal to engine sdi, 
    COMMENT 2. Set the Zero to Dau_timer when label_found is equal to TRUE
    COMMENT 
    COMMENT Equivalence Class 75,83
    COMMENT </TD> 

    ELEMENT

        COMMENT INPUT SECTION:
            
            --A825 messages
            STRUCTURE s_mess,       init = { lcc => EEC, sID =>{ BID =>{  doc => A429_CHAN_1,others => 0 } },
            &                       u8PaySize =>0x2, u8PayLoad =>{0=>84,1=>0x0,2=>0x0,3=>0x0,others=>0x8 } },
            &                                                   ev = init
            
            -- A429 label
            VAR A429_data[0][3].label,  init = 0xD,             ev = init   
            
            -- Holds the port1 label count value
            VAR Port1_label_count,      init = 0x4,             ev = init
            
            -- Holds the currently active eiu
            VAR Active_eiu,             init = EIU2,            ev = init                      
        
            VAR Config_data.eng_sdi,    init = 1,               ev = init
            
            
            VAR Config_data.channels.u16_x, init = 112,         ev = init

            VAR Config_data.channels.u16_y, init = 0,           ev = init
            
            VAR Gain_bool[0],               init = TRUE,        ev = init 
            
        COMMENT OUTPUT SECTION:
            
            --None
            
           

        COMMENT INPUT/OUTPUT SECTION:
            
            --None
        
        -- Stub Calls:
        SIMUL
            
            --None
    
        END SIMUL

        -- Calling the Unit Under Test :
        #A429ProcessA825(&s_mess);

    END ELEMENT
END TEST -- TEST 44

TEST 45
FAMILY nominal
    COMMENT Test Description
    COMMENT <TD> 
    COMMENT [hdudispfa429-A429ProcessA825-DB-LLR-001]
    COMMENT The function does the following when doc of BID of sID of s_mess is equal to A429_CHAN_1.
    COMMENT 1. Set Source to address of u8PayLoad of s_mess.
    COMMENT 2. Set Destination to address of A429 word.
    COMMENT 3. Copy the contents  of first four bytes of u8PayLoad of s_mess to Destination.
    COMMENT 4.Set Du_position to 9 and 10th bit of A429 word when 9 and 10th bit of A429 word
    COMMENT is greater than zero.
    COMMENT and Du_identified  is FALSE.
    COMMENT 5.Set Du_identified to TRUE when 9 and 10th bit of A429 word is greater than zero.
    COMMENT Equivalence Class 39,65,361
    COMMENT
    COMMENT [hdudispfa429-A429ProcessA825-DB-LLR-002]
    COMMENT The function call Process429Words with A429 word and zero as its parameters when doc
    COMMENT of BID of sID of s_mess is equal to A429_CHAN_1.
    COMMENT Equivalence Class 67
    COMMENT
    COMMENT [hdudispfa429-A429ProcessA825-DB-LLR-003]
    COMMENT The function does nothing when doc of BID of sID of s_mess is equal to A429_CHAN_1 and
    COMMENT u8PaySize of s_mess is not equal to EIGHT 
    COMMENT Equivalence Class 69
    COMMENT
    COMMENT [hdudispfa429-Process429Words-DB-LLR-001]
    COMMENT The function extract the label from i32_arinc_word.
    COMMENT Equivalence Class None
    COMMENT
    COMMENT [hdudispfa429-Process429Words-DB-LLR-002]
    COMMENT The function does the following
    COMMENT - extract the SDI bits from i32_arinc_word.
    COMMENT 
    COMMENT Equivalence Class 
    COMMENT 
    COMMENT [hdudispfa429-Process429Words-DB-LLR-003]
    COMMENT The function shall does the following 
    COMMENT 1. Extract the SSM from i32_arinc_word right shift with M_TWENTY_NINE And THREE.
    COMMENT 2. Set the maximum label value to Port1_label_count when channel is ZERO else set the maximum label to Port2_label_count.
    COMMENT 3. The function shall does the following when Config_data of eng_sdi is equal to ONE.
    COMMENT 1. Set the engine_sdi to SDI.
    COMMENT 2. Config_data of channels of u16_x  ans u16_y is not equal to channel. 
   COMMENT 1. Set the engine_sdi to ZERO.
   COMMENT 2. Set the source_EIU1 to TRUE when  ONE  is equal to  SDI.

    COMMENT  Equivalence Class 72,261,264,266
    COMMENT
    COMMENT [hdudispfa429-Process429Words-DB-LLR-004] 
    COMMENT The function loop till maximum label count value AND label found flag is not TRUE
    COMMENT and does the following 
    COMMENT 1. Set label found flag to TRUE when label of A429_data with indices channel and loop index count is 
    COMMENT equal to received label And sdi of A429_data with indices channel and loop index count is equal to engine sdi, 
    COMMENT 2. Set the Zero to Dau_timer when label_found is equal to TRUE
    COMMENT 
    COMMENT Equivalence Class 75,83
    COMMENT </TD> 

    ELEMENT

        COMMENT INPUT SECTION:
            
            --A825 messages
            STRUCTURE s_mess,       init = { lcc => EEC, sID =>{ BID =>{  doc => A429_CHAN_1,others => 0 } },
            &                       u8PaySize =>0x2, u8PayLoad =>{0=>148,1=>0x0,2=>0x0,3=>0x0,others=>0x8 } },
            &                                                   ev = init
            
            -- A429 label
            VAR A429_data[0][3].label,  init = 0xD,             ev = init   
            
            -- Holds the port1 label count value
            VAR Port1_label_count,      init = 0x4,             ev = init
            
            -- Holds the currently active eiu
            VAR Active_eiu,             init = EIU2,            ev = init                      
        
            VAR Config_data.eng_sdi,    init = 1,               ev = init
            
            
            VAR Config_data.channels.u16_x, init = 112,         ev = init

            VAR Config_data.channels.u16_y, init = 0,           ev = init
            
            VAR Offset_bool[0],             init = TRUE,        ev = init 
            
        COMMENT OUTPUT SECTION:
            
        --None
            
           

        COMMENT INPUT/OUTPUT SECTION:
            
            --None
        
        -- Stub Calls:
        SIMUL
            
            --None
    
        END SIMUL

        -- Calling the Unit Under Test :
        #A429ProcessA825(&s_mess);

    END ELEMENT
END TEST -- TEST 45

END SERVICE -- A429ProcessA825

--------------------------------------------------------------------------------
-- Declaration of the service ProcessSWPartNum
--------------------------------------------------------------------------------
SERVICE ProcessSWPartNum
SERVICE_TYPE extern

    -- Tested service parameters declarations
    #T_A825_MESSAGE s_mess;

    ENVIRONMENT ENV_ProcessSWPartNum
    STRUCTURE s_mess,       init = { lcc => EEC, sID => { BID => { doc => 0, rci => 0 } },
    &                       u8PaySize => 0, u8PayLoad => { others => 0 } },     ev = init
    END ENVIRONMENT -- ENV_ProcessSWPartNum
    USE ENV_ProcessSWPartNum

TEST 1
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT [hdudispfa429-ProcessSWPartNum-DB-LLR-001]
    COMMENT The function copies the content of u8PayLoad of s_mess to Commf_part by calling the 
    COMMENT function MemCpy with parameters address of Commf_part with index six, address of u8PayLoad
    COMMENT of s_mess and EIGHT when doc of BID of sID of s_mess is DIS_COMAPP_REVNO1.
    COMMENT Equivalence Class 5,23
    COMMENT </TD> 

    ELEMENT

        COMMENT INPUT SECTION:
            
            --Input A825 messages
            STRUCTURE s_mess,       init = { lcc => EEC, sID => { BID => { doc => DIS_COMAPP_REVNO1, 
            &                       others => 0 } }, u8PaySize => 0, u8PayLoad => { others => 0x10 } },     
            &                       ev = init
                
        COMMENT OUTPUT SECTION:

            --None

        COMMENT INPUT/OUTPUT SECTION:
            
            --Global array
            -- holds the communication flight part
            ARRAY Commf_part,       init ={ 0..5 =>0x00, 6..13=>0x5, others =>0 },              
            &                       ev ={0..5 =>0x00, 6..13=>0x10, others =>0}
        
        -- Stub Calls:
        SIMUL
            
            --None
    
        END SIMUL

        -- Calling the Unit Under Test :
        #ProcessSWPartNum(&s_mess);

    END ELEMENT

END TEST -- TEST 1   

TEST 2
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT [hdudispfa429-ProcessSWPartNum-DB-LLR-002]
    COMMENT The function copies the content of u8PayLoad of s_mess to Commf_part by calling the
    COMMENT function MemCpy with parameters address of Commf_part with index fourteen, address of
    COMMENT u8PayLoad of s_mess and EIGHT when doc of BID of sID of s_mess is DIS_COMAPP_REVNO2.
    COMMENT Equivalence Class 6,7,23
    COMMENT </TD> 

    ELEMENT

        COMMENT INPUT SECTION:
            
            --Input A825 messages
            STRUCTURE s_mess,       init = { lcc => EEC, sID => { BID => { doc => DIS_COMAPP_REVNO2, 
            &                       others => 0 } }, u8PaySize => 0, u8PayLoad => { others => 0x10 } },
            &                       ev = init
    
        COMMENT OUTPUT SECTION:

            --None

        COMMENT INPUT/OUTPUT SECTION:
            
            --Global array
            -- holds the communication flight part
            ARRAY Commf_part,       init ={ 0..13 =>0x00, 14..20=>0x5, others =>0 },                
            &                       ev ={0.13=>0x00, 14..21=>0x10, others =>0}
        
        -- Stub Calls:
        SIMUL
            
            --None
    
        END SIMUL

        -- Calling the Unit Under Test :
        #ProcessSWPartNum(&s_mess);

    END ELEMENT

END TEST -- TEST 2

TEST 3
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT [hdudispfa429-ProcessSWPartNum-DB-LLR-003]
    COMMENT The function copies the content of u8PayLoad of s_mess to Commb_part by calling the
    COMMENT function MemCpy with parameters address of Commb_part with index six, address of u8PayLoad
    COMMENT  of s_mess and EIGHT when doc of BID of sID of s_mess is DIS_COMBOOT_REVNO1.
    COMMENT Equivalence Class 6,8,9,23
    COMMENT </TD> 

    ELEMENT

        COMMENT INPUT SECTION:
            
            --Input A825 messages
            STRUCTURE s_mess,       init = { lcc => EEC, sID => { BID => { doc => DIS_COMBOOT_REVNO1, 
            &                       others => 0 } }, u8PaySize => 0, u8PayLoad => { others => 0x50 } },
            &                       ev = init
            
        COMMENT OUTPUT SECTION:

            --None

        COMMENT INPUT/OUTPUT SECTION:
            
            --Global array
            -- holds the communication boot part
            ARRAY Commb_part,       init ={ 0..5 =>0x00, 6..13=>0x5, others =>0 },              
            &                       ev ={0..5 =>0x00, 6..13=>0x50, others =>0}
        
        -- Stub Calls:
        SIMUL
            
            --None
    
        END SIMUL

        -- Calling the Unit Under Test :
        #ProcessSWPartNum(&s_mess);

    END ELEMENT

END TEST -- TEST 3

TEST 4
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT [hdudispfa429-ProcessSWPartNum-DB-LLR-004]
    COMMENT The function copies the content of u8PayLoad of s_mess to Commb_part by calling the
    COMMENT function MemCpy with parameters address of Commb_part with index fourteen, address of 
    COMMENT u8PayLoad of s_mess and EIGHT when doc of BID of sID of s_mess is DIS_COMBOOT_REVNO2.
    COMMENT Equivalence Class 6,8,10,11,23
    COMMENT </TD> 

    ELEMENT

        COMMENT INPUT SECTION:
            
            --Input A825 messages
            STRUCTURE s_mess,       init = { lcc => EEC, sID => { BID => { doc => DIS_COMBOOT_REVNO2, 
            &                       others => 0 } }, u8PaySize => 0, u8PayLoad => { others => 0x50 } }, 
            &                       ev = init
            
        COMMENT OUTPUT SECTION:

            --None

        COMMENT INPUT/OUTPUT SECTION:
            
            --Global array
            -- holds the communication boot part
            ARRAY Commb_part,       init ={ others =>0x5 },             
            &                       ev ={0..13 =>0x5, 14..21=>0x50, others =>0x5 }
        
        -- Stub Calls:
        SIMUL
            
            --None
    
        END SIMUL

        -- Calling the Unit Under Test :
        #ProcessSWPartNum(&s_mess);

    END ELEMENT

END TEST -- TEST 4


TEST 5
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT [hdudispfa429-ProcessSWPartNum-DB-LLR-005]
    COMMENT The function copies the content of u8PayLoad of s_mess to Maint_part by calling the
    COMMENT function MemCpy with parameters address of Maint_part with index six, address of u8PayLoad
    COMMENT of s_mess and EIGHT when doc of BID of sID of s_mess is DIS_COMMAINT_REVNO1.
    COMMENT Equivalence Class 6,8,10,12,13,23
    COMMENT </TD> 

    ELEMENT

        COMMENT INPUT SECTION:
            
            --Input A825 messages
            STRUCTURE s_mess,       init = { lcc => EEC, sID => { BID => { doc => DIS_COMMAINT_REVNO1, 
            &                       others => 0 } }, u8PaySize => 0, u8PayLoad => { others => 0x10} },
            &                       ev = init
            
        COMMENT OUTPUT SECTION:

            --None

        COMMENT INPUT/OUTPUT SECTION:
            
            --Global array
            -- holds the maintainence part number
            ARRAY Maint_part,       init ={ 0..5 =>0x00, 6..13=>0x75, others =>0 },             
            &                       ev ={0..5 =>0x00, 6..13=>0x10, others =>0}
        
        -- Stub Calls:
        SIMUL
            
            --None
    
        END SIMUL

        -- Calling the Unit Under Test :
        #ProcessSWPartNum(&s_mess);

    END ELEMENT

END TEST -- TEST 5

TEST 6
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT [hdudispfa429-ProcessSWPartNum-DB-LLR-006]
    COMMENT The function copies the content of u8PayLoad of s_mess to Maint_part by calling the 
    COMMENT function MemCpy with parameters address of Maint_part with index fourteen, address of 
    COMMENT u8PayLoad of s_mess and EIGHT when doc of BID of sID of s_mess is DIS_COMMAINT_REVNO2.
    COMMENT Equivalence Class 6,8,10,12,14,15,23
    COMMENT </TD> 

    ELEMENT

        COMMENT INPUT SECTION:
            
            --Input A825 messages
            STRUCTURE s_mess,       init = { lcc => EEC, sID => { BID => { sfid => 0, rsd => 0, 
            &                       lcl => 0, pvt => 0, doc => DIS_COMMAINT_REVNO2, rci => 0 } }, 
            &                       u8PaySize => 0, u8PayLoad => {  others => 0x10 } },     
            &                       ev = init

        COMMENT OUTPUT SECTION:

            --None

        COMMENT INPUT/OUTPUT SECTION:
            
            --Global array
            -- holds the maintainence part number
            ARRAY Maint_part,       init ={ 0..13 =>0x00, 14..21=>0x75, others =>0 },               
            &                       ev ={0..13 =>0x00, 14..21=>0x10, others =>0}
        
        -- Stub Calls:
        SIMUL
            
            --None
    
        END SIMUL

        -- Calling the Unit Under Test :
        #ProcessSWPartNum(&s_mess);

    END ELEMENT

END TEST -- TEST 6

TEST 7
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT [hdudispfa429-ProcessSWPartNum-DB-LLR-007]
    COMMENT The function does the following 
    COMMENT 1. copy the content of u8PayLoad of s_mess to CRCword by calling the function MemCpy
    COMMENT with parameters address of CRCword , address of u8PayLoad of s_mess and FOUR 
    COMMENT 2. call the function BinAsciiCRC with parameters CRCword and address of Commf_part with index 22.
    COMMENT when doc of BID of sID of s_mess is DIS_COMAPP_CRC. 
    COMMENT Equivalence Class 6,8,10,12,14,16,17,23,24
    COMMENT </TD> 

    ELEMENT

        COMMENT INPUT SECTION:
            
            --Input A825 messages
            STRUCTURE s_mess,   init = { lcc => EEC, sID => { BID => {  doc => DIS_COMAPP_CRC,
            &                   others => 0 } }, u8PaySize => 0, u8PayLoad => { 0=>0x7C,1=>0xDA,
            &                   2=>0x25,3=>0xF,others=>0x8  } },        ev = init

        COMMENT OUTPUT SECTION:

            
            -- holds the communication flight part
            ARRAY Commf_part,       init ={ others =>0 },   ev ={22=>55, 23=>67,24=>68,25=>65,
            &                       26=>50, 27=>53,28=>48,29=>70, others =>0}
        

        COMMENT INPUT/OUTPUT SECTION:
            
            --None
        
        -- Stub Calls:
        SIMUL
            
            --None
    
        END SIMUL

        -- Calling the Unit Under Test :
        #ProcessSWPartNum(&s_mess);

    END ELEMENT

END TEST -- TEST 7

TEST 8
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT [hdudispfa429-ProcessSWPartNum-DB-LLR-008]
    COMMENT The function does the following 
    COMMENT 1. copy the content of u8PayLoad of s_mess to CRCword by calling the function MemCpy 
    COMMENT with parameters address of CRCword , address of u8PayLoad of s_mess and FOUR 
    COMMENT 2. call the function BinAsciiCRC with parameters CRCword and address of Commb_part with
    COMMENT index 22. when doc of BID of sID of s_mess is DIS_COMBOOT_CRC.
    COMMENT Equivalence Class 6,8,10,12,14,16,18,19,23,24
    COMMENT </TD> 

    ELEMENT

        COMMENT INPUT SECTION:
            
            --Input A825 messages
            STRUCTURE s_mess,       init = { lcc => EEC, sID => { BID => { sfid => 0, rsd => 0, lcl => 0,
            &                       pvt => 0, doc => DIS_COMBOOT_CRC, rci => 0 } }, u8PaySize => 0, 
            &                       u8PayLoad => { 0=>0x7C,1=>0xDA,2=>0x25,3=>0xF,others=>0x8  }  },
            &                       ev = init

        COMMENT OUTPUT SECTION:

            -- holds the communication boot part
            ARRAY Commb_part,       init ={ others =>0 },   ev ={22=>55, 23=>67,24=>68,25=>65,
            &                       26=>50, 27=>53,28=>48,29=>70, others =>0}
        

        COMMENT INPUT/OUTPUT SECTION:
            
            --None
        
        -- Stub Calls:
        SIMUL
            
            --None
    
        END SIMUL

        -- Calling the Unit Under Test :
        #ProcessSWPartNum(&s_mess);

    END ELEMENT

END TEST -- TEST 8

TEST 9
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT [hdudispfa429-ProcessSWPartNum-DB-LLR-009]
    COMMENT The function does the following 
    COMMENT 1. copy the content of u8PayLoad of s_mess to CRCword by calling the function MemCpy
    COMMENT with parameters address of CRCword , address of u8PayLoad of s_mess and FOUR 
    COMMENT 2. call the function BinAsciiCRC with parameters CRCword and address of Maint_part with index 22.
    COMMENT when doc of BID of sID of s_mess is DIS_COMMAINT_CRC.
    COMMENT Equivalence Class 6,8,10,12,14,16,18,20,21,23,24,57
    COMMENT </TD> 

    ELEMENT

        COMMENT INPUT SECTION:
            
            --Input A825 messages
            STRUCTURE s_mess,       init = { lcc => EEC, sID => { BID => { sfid => 0, rsd => 0, lcl => 0,
            &                       pvt => 0, doc => DIS_COMMAINT_CRC, rci => 0 } }, u8PaySize => 0, 
            &                       u8PayLoad => { 0=>0x7C,1=>0xDA,2=>0x25,3=>0xF,others=>0x8 } },
            &                       ev = init

        COMMENT OUTPUT SECTION:

            -- holds the maintainence part number
            ARRAY Maint_part,       init ={ others =>0 },   ev ={22=>55, 23=>67,24=>68,25=>65,
            &                       26=>50, 27=>53,28=>48,29=>70, others =>0}

        COMMENT INPUT/OUTPUT SECTION:
            
            --None
        
        -- Stub Calls:
        SIMUL
            
            --None
    
        END SIMUL

        -- Calling the Unit Under Test :
        #ProcessSWPartNum(&s_mess);

    END ELEMENT

END TEST -- TEST 9


TEST 10
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT [hdudispfa429-ProcessSWPartNum-DB-LLR-009]
    COMMENT The function does nothing
    COMMENT when doc of BID of sID of s_mess is other than DIS_COMMAINT_CRC.
    COMMENT Equivalence Class 22
    COMMENT </TD> 

    ELEMENT

        COMMENT INPUT SECTION:
            
            --Input A825 messages
            STRUCTURE s_mess,       init = { lcc => EEC, sID => { BID => { sfid => 0, rsd => 0, lcl => 0,
            &                       pvt => 0, doc => 0xF, rci => 0 } }, u8PaySize => 0, 
            &                       u8PayLoad => { 0=>0x7C,1=>0xDA,2=>0x25,3=>0xF,others=>0x8 } },
            &                       ev = init

        COMMENT OUTPUT SECTION:
            
            --None

        COMMENT INPUT/OUTPUT SECTION:
            
            --None
        
        -- Stub Calls:
        SIMUL
            
            --None
    
        END SIMUL

        -- Calling the Unit Under Test :
        #ProcessSWPartNum(&s_mess);

    END ELEMENT

END TEST -- TEST 10

TEST 11
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT [hdudispfa429-ProcessSWPartNum-DB-LLR-006]
    COMMENT The function copies the content of u8PayLoad of s_mess to Maint_part by calling the 
    COMMENT function MemCpy with parameters address of Maint_part with index fourteen, address of 
    COMMENT u8PayLoad of s_mess and EIGHT when doc of BID of sID of s_mess is DIS_COMSL_REVNO1.
    COMMENT Equivalence Class 6,8,10,12,14,15,23,269
    COMMENT </TD> 

    ELEMENT

        COMMENT INPUT SECTION:
            
            --Input A825 messages
            STRUCTURE s_mess,       init = { lcc => EEC, sID => { BID => { sfid => 0, rsd => 0, 
            &                       lcl => 0, pvt => 0, doc => DIS_COMSL_REVNO1, rci => 0 } }, 
            &                       u8PaySize => 0, u8PayLoad => {  others => 0x10 } },     
            &                       ev = init

        COMMENT OUTPUT SECTION:

            --None

        COMMENT INPUT/OUTPUT SECTION:
            
            --Global array
            -- holds the maintainence part number
            ARRAY Maint_part,       init ={ 0..13 =>0x00, 14..21=>0x75, others =>0 },               
            &                       ev ={0..13 =>0, 14..21=>117, others =>0}
        
        -- Stub Calls:
        SIMUL
            
            --None
    
        END SIMUL

        -- Calling the Unit Under Test :
        #ProcessSWPartNum(&s_mess);

    END ELEMENT

END TEST -- TEST 11


TEST 12
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT [hdudispfa429-ProcessSWPartNum-DB-LLR-006]
    COMMENT The function copies the content of u8PayLoad of s_mess to Maint_part by calling the 
    COMMENT function MemCpy with parameters address of Maint_part with index fourteen, address of 
    COMMENT u8PayLoad of s_mess and EIGHT when doc of BID of sID of s_mess is DIS_COMMAINT_REVNO2.
    COMMENT Equivalence Class 6,8,10,12,14,15,23,275
    COMMENT </TD> 

    ELEMENT

        COMMENT INPUT SECTION:
            
            --Input A825 messages
            STRUCTURE s_mess,       init = { lcc => EEC, sID => { BID => { sfid => 0, rsd => 0, 
            &                       lcl => 0, pvt => 0, doc => DIS_COMSL_REVNO2, rci => 0 } }, 
            &                       u8PaySize => 0, u8PayLoad => {  others => 0x10 } },     
            &                       ev = init

        COMMENT OUTPUT SECTION:

            --None

        COMMENT INPUT/OUTPUT SECTION:
            
            --Global array
            -- holds the maintainence part number
            ARRAY Maint_part,       init ={ 0..13 =>0x00, 14..21=>0x75, others =>0 },               
            &                       ev ={0..13 =>0, 14..21=>117, others =>0}
        
        -- Stub Calls:
        SIMUL
            
            --None
    
        END SIMUL

        -- Calling the Unit Under Test :
        #ProcessSWPartNum(&s_mess);

    END ELEMENT

END TEST -- TEST 12


END SERVICE -- ProcessSWPartNum


--------------------------------------------------------------------------------
-- Declaration of the service MemCpy
--------------------------------------------------------------------------------
SERVICE MemCpy
SERVICE_TYPE extern

    -- Tested service parameters declarations
    #void *p_dest;
    #void *p_src;
    #T_UINT16 count;

    ENVIRONMENT ENV_MemCpy
    VAR p_dest,     init = 0,       ev = init
    VAR p_src,      init = 0,       ev = init
    VAR count,      init = 0,       ev = init
    END ENVIRONMENT -- ENV_MemCpy
    USE ENV_MemCpy
    
TEST 1
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT [hdudispfa429-MemCpy-DB-LLR-001]
    COMMENT The function copies data from source buffer into destination buffer for number of bytes
    COMMENT specified by count.     
    COMMENT Equivalence Class 3
    COMMENT </TD> 

    ELEMENT

        COMMENT INPUT SECTION:
            
            --temporary array
            ARRAY PTU_src,  init={others =>0x5},    ev =init            
            
            --pointer to destination buffer
            VAR p_dest,     init = PTU_dst,         ev = init
            
            --pointer to source buffer
            VAR p_src,      init =PTU_src,          ev = init
            
            --number of bytes to be copied
            VAR count,      init = 0xA,             ev = init

        COMMENT OUTPUT SECTION:

            --None

        COMMENT INPUT/OUTPUT SECTION:
            
            ARRAY PTU_dst,  init={others =>0xA},    ev ={others =>0x5}
        
        -- Stub Calls:
        SIMUL
            
            --None
    
        END SIMUL

        -- Calling the Unit Under Test :
        #MemCpy(p_dest, p_src, count);

    END ELEMENT

END TEST -- TEST 1   

TEST 2
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT [hdudispfa429-MemCpy-DB-LLR-001]
    COMMENT The function copies data from source buffer into destination buffer for number of bytes
    COMMENT specified by count.     
    COMMENT Equivalence Class 3
    COMMENT </TD> 

    ELEMENT

        COMMENT INPUT SECTION:
        
            --temporary array
            ARRAY PTU_src,  init={others =>0x5},    ev =init            
            
            --pointer to destination buffer
            VAR p_dest,     init = PTU_dst,         ev = init
            
            --pointer to source buffer
            VAR p_src,      init =PTU_src,          ev = init
            
            --number of bytes to be copied
            VAR count,      init = 0x1,             ev = init

        COMMENT OUTPUT SECTION:

            --None

        COMMENT INPUT/OUTPUT SECTION:
            
            ARRAY PTU_dst,  init={others =>0xA},    ev ={0=>0x5, others =>0xA}
        
        -- Stub Calls:
        SIMUL
            
            --None
    
        END SIMUL

        -- Calling the Unit Under Test :
        #MemCpy(p_dest, p_src, count);

    END ELEMENT

END TEST -- TEST 2

TEST 3
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT [hdudispfa429-MemCpy-DB-LLR-001]
    COMMENT The function copies data from source buffer into destination buffer for number of bytes
    COMMENT specified by count.     
    COMMENT Equivalence Class 3
    COMMENT </TD> 

    ELEMENT

        COMMENT INPUT SECTION:
        
            --temporary array
            ARRAY PTU_src,  init={others =>0x5},    ev =init
            
            --pointer to destination buffer
            VAR p_dest,     init = PTU_dst,         ev = init
            
            --pointer to source buffer
            VAR p_src,      init =PTU_src,          ev = init
            
            --number of bytes to be copied
            VAR count,      init = 0x0,             ev = init

        COMMENT OUTPUT SECTION:

            --None

        COMMENT INPUT/OUTPUT SECTION:
            
            ARRAY PTU_dst,  init={others =>0xA},    ev ={others =>0xA}
        
        -- Stub Calls:
        SIMUL
            
            --None
    
        END SIMUL

        -- Calling the Unit Under Test :
        #MemCpy(p_dest, p_src, count);

    END ELEMENT

END TEST -- TEST 3

TEST 4
FAMILY robustness

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT [hdudispfa429-MemCpy-DB-LLR-001]
    COMMENT The function copies data from source buffer into destination buffer for number of bytes
    COMMENT specified by count.
    COMMENT p_dst is passed with invalid reference.
    COMMENT Equivalence Class 190
    COMMENT </TD> 

    ELEMENT

        COMMENT INPUT SECTION:
            
            --temporary array
            ARRAY PTU_src,  init={others =>0x5},    ev =init
            
            --pointer to source buffer
            VAR p_src,      init =PTU_src,          ev = init
            
            --number of bytes to be copied
            VAR count,      init = 0x0,             ev = init

        COMMENT OUTPUT SECTION:

            --None

        COMMENT INPUT/OUTPUT SECTION:
            
            --None
        
        -- Stub Calls:
        SIMUL
            
            --None
    
        END SIMUL

        -- Calling the Unit Under Test :
        #MemCpy(NULL, p_src, count);

    END ELEMENT

END TEST -- TEST 4

TEST 5
FAMILY robustness

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT [hdudispfa429-MemCpy-DB-LLR-001]
    COMMENT The function copies data from source buffer into destination buffer for number of bytes
    COMMENT specified by count.  
    COMMENT p_src is passed with invalid reference.
    COMMENT Equivalence Class 189
    COMMENT </TD> 

    ELEMENT

        COMMENT INPUT SECTION:
            
            --pointer to destination buffer
            VAR p_dest,     init = PTU_dst,     ev = init       

            --number of bytes to be copied
            VAR count,      init = 0x0,             ev = init

        COMMENT OUTPUT SECTION:

            --None

        COMMENT INPUT/OUTPUT SECTION:
            
            --None

        
        -- Stub Calls:
        SIMUL
            
            --None
    
        END SIMUL

        -- Calling the Unit Under Test :
        #MemCpy(p_dest, NULL, count);

    END ELEMENT

END TEST -- TEST 5
END SERVICE -- MemCpy


--------------------------------------------------------------------------------
-- Declaration of the service MemSet
--------------------------------------------------------------------------------
SERVICE MemSet
SERVICE_TYPE extern

    -- Tested service parameters declarations
    #void *p_dest;
    #T_UINT16 val;
    #T_UINT16 cnt;

    ENVIRONMENT ENV_MemSet
    VAR p_dest,     init = 0,       ev = init
    VAR val,        init = 0,       ev = init
    VAR cnt,        init = 0,       ev = init
    END ENVIRONMENT -- ENV_MemSet
    USE ENV_MemSet

TEST 1
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT [hdudispfa429-MemSet-DB-LLR-001]
    COMMENT The function copies the data specified in val into destination buffer for number of
    COMMENT bytes specified by cnt.
    COMMENT Equivalence Class 4
    COMMENT </TD> 

    ELEMENT

        COMMENT INPUT SECTION:
        
            --pointer to destination buffer,
            VAR p_dest,     init = PTU_memSet,      ev = init

            --value to be copied into the destination buffer
            VAR val,        init = 0x100,       ev = init

            --number of bytes to be copied
            VAR cnt,        init = 10,          ev = init
        
        COMMENT OUTPUT SECTION:

            --None

        COMMENT INPUT/OUTPUT SECTION:
            
            ARRAY PTU_memSet,   init={others =>0xA},            ev ={others =>0x100}
        
        -- Stub Calls:
        SIMUL
            
            --None
    
        END SIMUL

        -- Calling the Unit Under Test :
        #MemSet(p_dest, val, cnt);

    END ELEMENT

END TEST -- TEST 1

TEST 2
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT [hdudispfa429-MemSet-DB-LLR-001]
    COMMENT The function copies the data specified in val into destination buffer for number of
    COMMENT bytes specified by cnt.
    COMMENT Equivalence Class 4
    COMMENT </TD> 

    ELEMENT

        COMMENT INPUT SECTION:
        
            --pointer to destination buffer,
            VAR p_dest,     init = PTU_memSet,      ev = init

            --value to be copied into the destination buffer
            VAR val,        init = 0x100,       ev = init

            --number of bytes to be copied
            VAR cnt,        init = 1,           ev = init
        
        COMMENT OUTPUT SECTION:

            --None

        COMMENT INPUT/OUTPUT SECTION:
            
            ARRAY PTU_memSet,   init={others =>0xA},            ev ={0=>0x100, others =>0xA}
        
        -- Stub Calls:
        SIMUL
            
            --None
    
        END SIMUL

        -- Calling the Unit Under Test :
        #MemSet(p_dest, val, cnt);

    END ELEMENT

END TEST -- TEST 2

TEST 3
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT [hdudispfa429-MemSet-DB-LLR-001]
    COMMENT The function copies the data specified in val into destination buffer for number of
    COMMENT bytes specified by cnt.
    COMMENT Equivalence Class 4
    COMMENT </TD> 

    ELEMENT

        COMMENT INPUT SECTION:
        
            --pointer to destination buffer,
            VAR p_dest,     init = PTU_memSet,      ev = init

            --value to be copied into the destination buffer
            VAR val,        init = 0x100,       ev = init

            --number of bytes to be copied
            VAR cnt,        init = 0,           ev = init
        
        COMMENT OUTPUT SECTION:

            --None

        COMMENT INPUT/OUTPUT SECTION:
            
            ARRAY PTU_memSet,   init={others =>0xA},            ev =init
        
        -- Stub Calls:
        SIMUL
            
            --None
    
        END SIMUL

        -- Calling the Unit Under Test :
        #MemSet(p_dest, val, cnt);

    END ELEMENT

END TEST -- TEST 3

--TEST 4
--FAMILY robustness
--
--  COMMENT Test Description
--    COMMENT <TD> 
--    COMMENT [hdudispfa429-MemSet-DB-LLR-001]
--    COMMENT The function copies the data specified in val into destination buffer for number of
--    COMMENT bytes specified by cnt.
--    COMMENT p_dest is passed with invalid reference.
--    COMMENT Equivalence Class 191
--    COMMENT </TD> 
--
--    ELEMENT
--
--      COMMENT INPUT SECTION:
--
--          --value to be copied into the destination buffer
--          VAR val,        init = 0x100,       ev = init
--
--          --number of bytes to be copied
--          VAR cnt,        init = 1,           ev = init
--      
--        COMMENT OUTPUT SECTION:
--
--          --None
--
--        COMMENT INPUT/OUTPUT SECTION:
--            
--          --None  
--                              
--        -- Stub Calls:
--        SIMUL
--            
--          --None
--    
--        END SIMUL
--
--        -- Calling the Unit Under Test :
--      #MemSet(NULL, val, cnt);
--
--    END ELEMENT
--
--END TEST -- TEST 4

END SERVICE -- MemSet

--------------------------------------------------------------------------------
-- Declaration of the service SetSysInfoWords
--------------------------------------------------------------------------------
SERVICE SetSysInfoWords
SERVICE_TYPE extern

-- Tested service parameters declarations
#T_UINT8 u8_index;
#T_UINT8 data1;
#T_UINT8 data2;

#T_UINT8 Commb_part[31];
#T_UINT8 Maint_part[31];    
#T_UINT8 Commf_part[31]; 
#T_UINT8 Boot_revno[31];
#T_UINT8 Maint_revno[31];
#T_UINT8 App_revno[31];
#T_UINT8 Config_id[55];
#T_UINT8 Bitmap_revno[25];
#T_UINT8 Dau_config_id_disp[55];
#T_UINT8 COnfig_data[50];
#T_UINT8 Eiu_heading[18];
#T_UINT8 Dau_config_id_dau[55];
#T_UINT8 Eiufli_part[31];

ENVIRONMENT ENV_SetSysInfoWords

-- system  information index
VAR u8_index,       init = 0,       ev = init

-- first input character
VAR data1,      init = 0,       ev = init

-- second input character
VAR data2,      init = 0,       ev = init

END ENVIRONMENT -- ENV_SetSysInfoWords
USE ENV_SetSysInfoWords

TEST 1
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD>
    COMMENT [hdudispfa429-SetSysInfoWords-DB-LLR-001]
    COMMENT The function does the following
    COMMENT a)  set data1 of system info words with index (u8_index modulo SYSINFO_LABEL_WORDS) to data1.
    COMMENT b)  set data2 of system info words with index (u8_index modulo SYSINFO_LABEL_WORDS) to data2.
    COMMENT c)  set sequence of system info words with index (u8_index modulo SYSINFO_LABEL_WORDS) to u8_index.
    COMMENT Equivalence Class 192
    COMMENT </TD>
    
    ELEMENT
    
        COMMENT INPUT SECTION:
            
            -- Holds system information index
            VAR u8_index,                           init = 10,                          ev = init
            
            -- Holds First character
            VAR data1,                              init = 15,                          ev = init
            
            -- Holds Second character
            VAR data2,                              init = 9,                           ev = init           
        
        COMMENT INPUT/OUTPUT SECTION:
        
            -- None
        
        COMMENT OUTPUT SECTION:
        
            -- None
        
        -- Stub Calls
        SIMUL
        
            STUB StrLen 1..7=>()0
        
        END SIMUL
        
    -- Calling The Unit under test  
    #SetSysInfoWords(u8_index, data1, data2);
    #ProcessSysInfoWords();
    END ELEMENT

END TEST -- TEST 1

TEST 2
FAMILY robustness

    COMMENT Test Description
    COMMENT <TD>
    COMMENT [hdudispfa429-SetSysInfoWords-DB-LLR-001]
    COMMENT The function does the following
    COMMENT a)  set data1 of system info words with index (u8_index modulo SYSINFO_LABEL_WORDS) to data1.
    COMMENT b)  set data2 of system info words with index (u8_index modulo SYSINFO_LABEL_WORDS) to data2.
    COMMENT c)  set sequence of system info words with index (u8_index modulo SYSINFO_LABEL_WORDS) to u8_index.
    COMMENT maximum value for parameter is passed
    COMMENT Equivalence Class 192
    COMMENT </TD>
    
    ELEMENT
    
        COMMENT INPUT SECTION:
        
            -- Holds system information index
            VAR u8_index,                           init = 255,                             ev = init

            -- Holds First character
            VAR data1,                              init = 255,                             ev = init

            -- Holds Second character
            VAR data2,                              init = 255,                             ev = init
        
        COMMENT INPUT/OUTPUT SECTION:
        
            -- None
        
        
        COMMENT OUTPUT SECTION:
        
            -- None
        
        -- Stub Calls
        SIMUL
        
            STUB StrLen 1..7=>()0
        
        END SIMUL
                
    -- Calling The Unit under test  
    #SetSysInfoWords(u8_index, data1, data2);
    #ProcessSysInfoWords();
    END ELEMENT

END TEST -- TEST 2

TEST 3
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD>
    COMMENT [hdudispfa429-SetSysInfoWords-DB-LLR-001]
    COMMENT The function does the following
    COMMENT a)  set data1 of system info words with index (u8_index modulo SYSINFO_LABEL_WORDS) to data1.
    COMMENT b)  set data2 of system info words with index (u8_index modulo SYSINFO_LABEL_WORDS) to data2.
    COMMENT c)  set sequence of system info words with index (u8_index modulo SYSINFO_LABEL_WORDS) to u8_index.
    COMMENT minimum value for parameter is passed
    COMMENT Equivalence Class 192
    COMMENT </TD>
    
    ELEMENT
    
        COMMENT INPUT SECTION:
        
            -- Holds system information index
            VAR u8_index,                               init = 0,                       ev = init

            -- Holds First character
            VAR data1,                                  init = 0,                       ev = init

            -- Holds Second character
            VAR data2,                                  init = 0,                       ev = init            
        
        COMMENT INPUT/OUTPUT SECTION:
        
            -- None
        
        COMMENT OUTPUT SECTION:
        
            -- None
        
        -- Stub Calls
        SIMUL
        
            STUB StrLen 1..7=>()0
        
        END SIMUL
                
    -- Calling The Unit under test  
    #SetSysInfoWords(u8_index, data1, data2);
    #ProcessSysInfoWords();
    END ELEMENT

END TEST -- TEST 3

END SERVICE -- SetSysInfoWords

--------------------------------------------------------------------------------
-- Declaration of the service BinAsciiCRC
--------------------------------------------------------------------------------
SERVICE BinAsciiCRC
SERVICE_TYPE extern

-- Tested service parameters declarations
#T_ULONG x_val;
#char  out_buf[200];

ENVIRONMENT ENV_BinAsciiCRC

    VAR x_val,      init = 0,       ev = init
    
END ENVIRONMENT -- ENV_BinAsciiCRC
USE ENV_BinAsciiCRC

TEST 1
FAMILY nominal
    
    COMMENT Test Description
    COMMENT <TD>
    COMMENT [hdudispfa429-BinAsciiCRC-DB-LLR-001]
    COMMENT The function does the following when x_val is less than or equal to MAX_64_BIT
    COMMENT a)  set out_buf of index six to return value of TO_HEX with parameter x_val logical AND with EXT_BIT_28_31 and 
    COMMENT     right shifted by SHIFT_BY_28.
    COMMENT b)  set out_buf of index seven to return value of TO_HEX with parameter x_val logical AND with EXT_BIT_24_27 
    COMMENT     and right shifted by SHIFT_BY_24
    COMMENT c)  set out_buf of index fourth to return value of TO_HEX with parameter x_val logical AND with EXT_BIT_20_23 
    COMMENT     and right shifted by SHIFT_BY_20
    COMMENT d)  set out_buf of index five to return value of TO_HEX with parameter x_val logical AND with EXT_BIT_16_19 
    COMMENT     and right shifted by SHIFT_BY_16
    COMMENT e)  set out_buf of index two to return value of TO_HEX with parameter x_val logical AND with EXT_BIT_12_15 and
    COMMENT     right shifted by SHIFT_BY_12
    COMMENT f)  set out_buf of index three to return value of TO_HEX with parameter x_val logical AND with EXT_BIT_8_11 and
    COMMENT     right shifted by SHIFT_BY_8
    COMMENT g)  set out_buf of index zero to return value of TO_HEX with parameter x_val logical AND with EXT_BIT_4_7 and 
    COMMENT     right shifted by SHIFT_BY_4
    COMMENT h)  set out_buf of index one to return value of TO_HEX with parameter x_val logical AND with EXT_BIT_0_3
    COMMENT i)  set out_buf of index eight to null character
    COMMENT Equivalence Class 109
    COMMENT </TD>
    
    ELEMENT
    
        COMMENT INPUT SECTION:
            
            -- Digits to be converted
            VAR x_val,          init = (T_UINT32)0xFFFFFFFF,  ev = init
        
        COMMENT INPUT/OUTPUT SECTION:
            
            -- None
                    
        COMMENT OUTPUT SECTION:
            
            -- Output ASCII character pointer
            VAR out_buf[6],     init = 0x55,        ev = 0x46
            
            -- Output ASCII character pointer
            VAR out_buf[7],     init = 0x45,        ev = 0x46
            
            -- Output ASCII character pointer
            VAR out_buf[4],     init = 0x51,        ev = 0x46
            
            -- Output ASCII character pointer
            VAR out_buf[5],     init = 0x52,        ev = 0x46
            
            -- Output ASCII character pointer
            VAR out_buf[2],     init = 0x53,        ev = 0x46
            
            -- Output ASCII character pointer
            VAR out_buf[3],     init = 0x25,        ev = 0x46
            
            -- Output ASCII character pointer
            VAR out_buf[0],     init = 0x15,        ev = 0x46
            
            -- Output ASCII character pointer
            VAR out_buf[1],     init = 0x41,        ev = 0x46
            
            -- Output ASCII character pointer
            VAR out_buf[8],     init = 0x05,        ev = '\0'
                
        -- Stub Calls
        SIMUL
        
            -- None
        
        END SIMUL
        
    -- Calling The Unit Under Test  
    #BinAsciiCRC(x_val, out_buf);
    END ELEMENT

END TEST -- TEST 1

TEST 2
FAMILY nominal
    
    COMMENT Test Description
    COMMENT <TD>
    COMMENT [hdudispfa429-BinAsciiCRC-DB-LLR-001]
    COMMENT The function does the following when x_val is less than or equal to MAX_64_BIT
    COMMENT a)  set out_buf of index six to return value of TO_HEX with parameter x_val logical AND with EXT_BIT_28_31 and
    COMMENT     right shifted by SHIFT_BY_28.
    COMMENT b)  set out_buf of index seven to return value of TO_HEX with parameter x_val logical AND with EXT_BIT_24_27 
    COMMENT     and right shifted by SHIFT_BY_24
    COMMENT c)  set out_buf of index fourth to return value of TO_HEX with parameter x_val logical AND with EXT_BIT_20_23 
    COMMENT     and right shifted by SHIFT_BY_20
    COMMENT d)  set out_buf of index five to return value of TO_HEX with parameter x_val logical AND with EXT_BIT_16_19 
    COMMENT     and right shifted by SHIFT_BY_16
    COMMENT e)  set out_buf of index two to return value of TO_HEX with parameter x_val logical AND with EXT_BIT_12_15 
    COMMENT     and right shifted by SHIFT_BY_12
    COMMENT f)  set out_buf of index three to return value of TO_HEX with parameter x_val logical AND with EXT_BIT_8_11
    COMMENT     and right shifted by SHIFT_BY_8
    COMMENT g)  set out_buf of index zero to return value of TO_HEX with parameter x_val logical AND with EXT_BIT_4_7 
    COMMENT     and right shifted by SHIFT_BY_4
    COMMENT h)  set out_buf of index one to return value of TO_HEX with parameter x_val logical AND with EXT_BIT_0_3
    COMMENT i)  set out_buf of index eight to null character
    COMMENT Equivalence Class 108
    COMMENT </TD>
    
    ELEMENT
    
        COMMENT INPUT SECTION:
        
            -- Digits to be converted
            VAR x_val,      init = 0x0,     ev = init
        
        COMMENT INPUT/OUTPUT SECTION:
            
             -- None
                    
        COMMENT OUTPUT SECTION:
        
            -- Output ASCII character pointer
            VAR out_buf[6],     init = 0x55,        ev = 48
            
            -- Output ASCII character pointer
            VAR out_buf[7],     init = 0x45,        ev = 48
            
            -- Output ASCII character pointer
            VAR out_buf[4],     init = 0x51,        ev = 48
            
            -- Output ASCII character pointer
            VAR out_buf[5],     init = 0x52,        ev = 48
            
            -- Output ASCII character pointer
            VAR out_buf[2],     init = 0x53,        ev = 48
            
            -- Output ASCII character pointer
            VAR out_buf[3],     init = 0x25,        ev = 48
            
            -- Output ASCII character pointer
            VAR out_buf[0],     init = 0x15,        ev = 48
            
            -- Output ASCII character pointer
            VAR out_buf[1],     init = 0x41,        ev = 48
                        
            -- Output ASCII character pointer
            VAR out_buf[8],     init = 0x05,        ev = 0x0
        
        -- Stub Calls
        SIMUL
        
            -- None
        
        END SIMUL
        
    -- Calling The Unit Under Test  
    #BinAsciiCRC(x_val, out_buf);
    END ELEMENT

END TEST -- TEST 2

TEST 3
FAMILY nominal
        
    COMMENT Test Description
    COMMENT <TD>
    COMMENT [hdudispfa429-BinAsciiCRC-DB-LLR-001]
    COMMENT The function does the following when x_val is less than or equal to MAX_64_BIT
    COMMENT a)  set out_buf of index six to return value of TO_HEX with parameter x_val logical AND with EXT_BIT_28_31 
    COMMENT     and right shifted by SHIFT_BY_28.
    COMMENT b)  set out_buf of index seven to return value of TO_HEX with parameter x_val logical AND with EXT_BIT_24_27 
    COMMENT     and right shifted by SHIFT_BY_24
    COMMENT c)  set out_buf of index fourth to return value of TO_HEX with parameter x_val logical AND with EXT_BIT_20_23 
    COMMENT     and right shifted by SHIFT_BY_20
    COMMENT d)  set out_buf of index five to return value of TO_HEX with parameter x_val logical AND with EXT_BIT_16_19 
    COMMENT     and right shifted by SHIFT_BY_16
    COMMENT e)  set out_buf of index two to return value of TO_HEX with parameter x_val logical AND with EXT_BIT_12_15 
    COMMENT     and right shifted by SHIFT_BY_12
    COMMENT f)  set out_buf of index three to return value of TO_HEX with parameter x_val logical AND with EXT_BIT_8_11 
    COMMENT     and right shifted by SHIFT_BY_8
    COMMENT g)  set out_buf of index zero to return value of TO_HEX with parameter x_val logical AND with EXT_BIT_4_7 
    COMMENT     and right shifted by SHIFT_BY_4
    COMMENT h)  set out_buf of index one to return value of TO_HEX with parameter x_val logical AND with EXT_BIT_0_3
    COMMENT i)  set out_buf of index eight to null character
    COMMENT Equivalence Class 108
    COMMENT </TD>
       
        ELEMENT
        
            COMMENT INPUT SECTION:
            
                -- Digits to be converted
            VAR x_val,      init = (T_UINT32)0x88888888,      ev = init
            
            COMMENT INPUT/OUTPUT SECTION:
                
                -- None
                        
            COMMENT OUTPUT SECTION:
            
                -- Output ASCII character pointer
            VAR out_buf[6],     init = 0x55,        ev = 56
                
                -- Output ASCII character pointer
            VAR out_buf[7],     init = 0x45,        ev = 56
                
                -- Output ASCII character pointer
            VAR out_buf[4],     init = 0x51,        ev = 56
                
                -- Output ASCII character pointer
            VAR out_buf[5],     init = 0x52,        ev = 56
                
                -- Output ASCII character pointer
            VAR out_buf[2],     init = 0x53,        ev = 56
                
                -- Output ASCII character pointer
            VAR out_buf[3],     init = 0x25,        ev = 56
                
                -- Output ASCII character pointer
            VAR out_buf[0],     init = 0x15,        ev = 56
                
                -- Output ASCII character pointer
            VAR out_buf[1],     init = 0x41,        ev = 56
                
                -- Output ASCII character pointer
            VAR out_buf[8],     init = 0x05,        ev = 0x0
            
        -- Stub Calls
        SIMUL
        
            -- None
        
        END SIMUL
                    
    -- Calling The Unit Under Test          
    #BinAsciiCRC(x_val, out_buf);
    END ELEMENT

END TEST -- TEST 3

-- TEST 4
-- FAMILY robustness
--      
--  COMMENT Test Description
--  COMMENT <TD>
--  COMMENT [hdudispfa429-BinAsciiCRC-DB-LLR-001]
--  COMMENT The function does the following when x_val is less than or equal to MAX_64_BIT
--  COMMENT a)  set out_buf of index six to return value of TO_HEX with parameter x_val logical AND with EXT_BIT_28_31
--  COMMENT and right shifted by SHIFT_BY_28.
--  COMMENT b)  set out_buf of index seven to return value of TO_HEX with parameter x_val logical AND with EXT_BIT_24_27
--  COMMENT and right shifted by SHIFT_BY_24
--  COMMENT c)  set out_buf of index fourth to return value of TO_HEX with parameter x_val logical AND with EXT_BIT_20_23 
--  COMMENT and right shifted by SHIFT_BY_20
--  COMMENT d)  set out_buf of index five to return value of TO_HEX with parameter x_val logical AND with EXT_BIT_16_19 
--  COMMENT and right shifted by SHIFT_BY_16
--  COMMENT e)  set out_buf of index two to return value of TO_HEX with parameter x_val logical AND with EXT_BIT_12_15 
--  COMMENT and right shifted by SHIFT_BY_12
--  COMMENT f)  set out_buf of index three to return value of TO_HEX with parameter x_val logical AND with EXT_BIT_8_11
--  COMMENT and right shifted by SHIFT_BY_8
--  COMMENT g)  set out_buf of index zero to return value of TO_HEX with parameter x_val logical AND with EXT_BIT_4_7 
--  COMMENT and right shifted by SHIFT_BY_4
--  COMMENT h)  set out_buf of index one to return value of TO_HEX with parameter x_val logical AND with EXT_BIT_0_3
--  COMMENT i)  set out_buf of index eight to null character
--  COMMENT Equivalence Class 193
--  COMMENT </TD>
--
--        ELEMENT
--        
--          COMMENT INPUT SECTION:
--          
--            --None           
--          
--          COMMENT INPUT/OUTPUT SECTION:
--              
--              -- None
--                      
--          COMMENT OUTPUT SECTION:
--          
--              --None           
--          
--      -- Stub Calls
--      SIMUL
--      
--          -- None
--      
--      END SIMUL
--                  
--  -- Calling The Unit Under Test          
--    #BinAsciiCRC(x_val, NULL);
--    END ELEMENT
--
--END TEST -- TEST 4

END SERVICE -- BinAsciiCRC

--------------------------------------------------------------------------------
-- Declaration of the service A429Init
--------------------------------------------------------------------------------
SERVICE A429Init
SERVICE_TYPE extern

TEST 1
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD>
    COMMENT [hdudispfa429-A429Init-DB-LLR-001]
    COMMENT The function extracts CAS data from the pdi by calling the function CasExtract with parameter CAS_MESSAGE_ADDRESS
    COMMENT and extracts A429 settings by calling the function A429Extract with parameter A429_MESSAGE_ADDRESS. 
    COMMENT Equivalence Class 111,112
    COMMENT
    COMMENT [hdudispfa429-A429Init-DB-LLR-002]
    COMMENT The function does nothing when the A429_settings_cnt is zero.
    COMMENT Equivalence Class None
    COMMENT
    COMMENT [hdudispfa429-A429Init-DB-LLR-008]
    COMMENT The function sets Port1_label_count to port1 index value and Port2_label_count to port2 index value 
    COMMENT Equivalence Class None
    COMMENT
    COMMENT [hdudispfa429-A429Init-DB-LLR-009]
    COMMENT The function does nothing when Port1_label_count is zero.
    COMMENT Equivalence Class 123
    COMMENT </TD>

    ELEMENT

        COMMENT INPUT SECTION:
            
            -- Counter for a429 settings
            VAR A429_settings_cnt,                      init=0,                     ev=init

        COMMENT INPUT/OUTPUT SECTION:

            -- Holds the port1 label count value
            VAR Port1_label_count,                      init=55,                    ev=0

            -- Holds the port2 label count value
            VAR Port2_label_count,                      init=90,                    ev=0

        COMMENT OUTPUT SECTION:

            -- None

        -- Stub Calls
        SIMUL

            -- function extract CAS data from the pdi
            STUB  A429Extract (A429_MESSAGE_ADDRESS) 

            -- function extracts A429  settings
            STUB CasExtract (CAS_MESSAGE_ADDRESS)

        END SIMUL

    #A429Init();
    END ELEMENT

END TEST -- TEST 1
    
TEST 2
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD>
    COMMENT [hdudispfa429-A429Init-DB-LLR-005]
    COMMENT The function loops from ZERO to A429_settings_cnt and does the following when A429_port of A429_cfg_data 
    COMMENT with index value loop counter is equal to TWO and A429_type of A429_cfg_data with index loop counter value is equal to BNR 
    COMMENT 1. Set label of A429_data with indices one and  port2 value to A429_label of A429_cfg_data with index loop counter value .
    COMMENT 2. Set type of A429_data with indices one and  port2 value to A429_type of A429_cfg_data with index loop counter value.
    COMMENT 3. Set sig_bits of A429_data with indices one and  port2 value to A429_bnr_bits  of A429_bnr_data  of label_data  of  
    COMMENT A429_cfg_data  with index loop counter value.
    COMMENT 4. Set start_bit of A429_data with indices one and  port2 value to A429_bnr_start_bit  of A429_bnr_data  of label_data 
    COMMENT of  A429_cfg_data  with index loop counter value.
    COMMENT 5. Set min_val of A429_data with indices one and  port2 value to A429_bnr_min of A429_bnr_data  of label_data  of  
    COMMENT A429_cfg_data  with index loop counter value.
    COMMENT 6. Set max_val of A429_data with indices one and  port2 value to A429_bnr_max of A429_bnr_data  of label_data  of  
    COMMENT A429_cfg_data  with index loop counter value.
    COMMENT 7. Set scale_factor of A429_data with indices one and  port2 value to A429_bnr_scale_fact of A429_bnr_data  of 
    COMMENT label_data  of  A429_cfg_data  with index loop counter value.
    COMMENT 8. Set offset of A429_data with indices one and  port2 value to A429_bnr_offset of A429_bnr_data  of label_data  
    COMMENT of  A429_cfg_data  with index loop counter value.
    COMMENT 9. Set timeout of A429_data with indices one and  port2 value to A429_bnr_timeout of A429_bnr_data  of label_data  
    COMMENT of  A429_cfg_data  with index loop counter value.
    COMMENT 10. Increment the port2 index value by one
    COMMENT Equivalence Class 114,116
    COMMENT
    COMMENT [hdudispfa429-A429Init-DB-LLR-009]
    COMMENT The function does nothing when Port1_label_count is not equal to Port2_label_count
    COMMENT Equivalence Class 124
    COMMENT </TD>

    ELEMENT

        COMMENT INPUT SECTION:

            -- Counter for a429 settings
            VAR A429_settings_cnt,                  init=1,             ev=init

            -- Holds the port1 label count value
            VAR Port1_label_count,                  init=55,            ev=0

            -- Holds the port2 label count value
            VAR Port2_label_count,                  init=90,            ev=1

        COMMENT INPUT/OUTPUT SECTION:

            -- A429 configuration data
            VAR A429_cfg_data[0].A429_port,         init=TWO,           ev=init

            -- A429 configuration data
            VAR A429_cfg_data[0].A429_type,         init=BNR,           ev=init

        COMMENT OUTPUT SECTION:

            VAR  A429_cfg_data[0].A429_label,       init=55,            ev=init

            -- A429 configuration data
            VAR A429_cfg_data[0].label_data.A429_bnr_data.A429_bnr_bits,
            &                                       init=128,           ev=init

            -- A429 configuration data
            VAR A429_cfg_data[0].label_data.A429_bnr_data.A429_bnr_start_bit,
            &                                       init=255,           ev=init

            -- A429 configuration data
            VAR A429_cfg_data[0].label_data.A429_bnr_data.A429_bnr_min, 
            &                                       init=155.0,         ev=init

            -- A429 configuration data
            VAR A429_cfg_data[0].label_data.A429_bnr_data.A429_bnr_max, 
            &                                       init=255.0,         ev=init

            -- A429 configuration data
            VAR A429_cfg_data[0].label_data.A429_bnr_data.A429_bnr_scale_fact,
            &                                       init=120.0,         ev=init

            -- A429 configuration data
            VAR A429_cfg_data[0].label_data.A429_bnr_data.A429_bnr_offset, 
            &                                       init=150,           ev=init

            -- A429 configuration data
            VAR A429_cfg_data[0].label_data.A429_bnr_data.A429_bnr_timeout,  
            &                                       init=855,           ev=init
                        
            VAR A429_data[1][0].label,              init=58,            ev=A429_cfg_data[0].A429_label

            VAR A429_data[1][0].type,               init=BCD,            ev=A429_cfg_data[0].A429_type

            -- A429 significant bits
            VAR A429_data[1][0].sig_bits,           init=54,            ev=A429_cfg_data[0].label_data.A429_bnr_data.A429_bnr_bits

            -- A429 start bits
            VAR A429_data[1][0].start_bit,          init=54,            ev=A429_cfg_data[0].label_data.A429_bnr_data.A429_bnr_start_bit

            -- A429 minimum val
            VAR A429_data[1][0].min_val,            init=54,            ev=A429_cfg_data[0].label_data.A429_bnr_data.A429_bnr_min
            
            -- A429 maximum val
            VAR A429_data[1][0].max_val,            init=54,            ev=A429_cfg_data[0].label_data.A429_bnr_data.A429_bnr_max

            -- A429 scale factor
            VAR A429_data[1][0].scale_factor,       init=54,            ev=A429_cfg_data[0].label_data.A429_bnr_data.A429_bnr_scale_fact

            -- A429 offset
            VAR A429_data[1][0].offset,             init=54,            ev=A429_cfg_data[0].label_data.A429_bnr_data.A429_bnr_offset

            -- A429 timeout
            VAR A429_data[1][0].timeout,            init=54,            ev=A429_cfg_data[0].label_data.A429_bnr_data.A429_bnr_timeout

        -- Stub Calls
        SIMUL

            -- function extract CAS data from the pdi
            STUB  A429Extract (A429_MESSAGE_ADDRESS) 

            -- function extracts A429  settings
            STUB CasExtract (CAS_MESSAGE_ADDRESS)

        END SIMUL
        
    -- Calling The Unit Under Test 
    #A429Init();
    END ELEMENT

END TEST -- TEST 2
    
TEST 3
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD>
    COMMENT [hdudispfa429-A429Init-DB-LLR-006]
    COMMENT The function loops from ZERO to A429_settings_cnt and does the following 
    COMMENT when all of the below conditions(a,b,c) are satisfied
    COMMENT a) A429_port of A429_cfg_data with index value loop counter is equal to TWO
    COMMENT b) A429_type of A429_cfg_data with index loop counter value is equal to DDW
    COMMENT c) Cas_cnt is other than zero AND A429_label of A429_cfg_data with index as loop counter is equal 
    COMMENT to label of Cas_msg with index zero 
    COMMENT  1. Set Cas_label_start_idx to addition of port index and one 
    COMMENT  2. loops from zero to CAU_WARN_MAX_ID and does the following:
    COMMENT 1.Set label of A429_data with indices one and  port2 value to A429_label of A429_cfg_data with
    COMMENT index loop counter value.
    COMMENT 2.Set type of A429_data with indices one and  port2 value to A429_type of A429_cfg_data with of 
    COMMENT A429_data with index port1 value.
    COMMENT 3.Set sig_bits of A429_data with indices one and  port2 value to DDW_SIG_BIT.
    COMMENT 4.Set start_bit of A429_data with indices one and  port2 value to ONE.
    COMMENT 5.Set min_val of A429_data with indices one and  port2 value to ONE.
    COMMENT 6.Set max_val of A429_data with indices one and  port2 value to ONE.
    COMMENT 7.Set scale_factor of A429_data with indices one and  port2 value to ONE.
    COMMENT 8.Set timeout of A429_data with indices one and  port2 value to A429_ddw_timeout of label_data of 
    COMMENT A429_cfg_data with index loop counter .
    COMMENT 9.Increment the port2 index value by one.
    COMMENT Equivalence Class 114,117,120,121
    COMMENT </TD>

    ELEMENT

        COMMENT INPUT SECTION:

            -- Counter for a429 settings
            VAR A429_settings_cnt,              init=1,                 ev=init

            -- Holds the port1 label count value
            VAR Port1_label_count,              init=55,                ev=0

            -- Holds the port2 label count value
            VAR Port2_label_count,              init=90,                ev=6

            -- Holds the CAS count
            VAR Cas_cnt,                        init=10,                ev=init

            -- CAS label
            VAR Cas_msg[0].label,               init=128,               ev=init

        COMMENT INPUT/OUTPUT SECTION:

            -- A429 configuration data
            VAR A429_cfg_data[0].A429_port,     init=TWO,               ev=init

            -- A429 configuration data
            VAR A429_cfg_data[0].A429_type,     init=DDW,               ev=init

        COMMENT OUTPUT SECTION:

            VAR Cas_label_start_idx,            init=5,                 ev=1

            -- A429 configuration data
            VAR A429_cfg_data[0].A429_label,    init=128,               ev=init

            -- A429 configuration data
            VAR A429_cfg_data[0].label_data.A429_ddw_timeout,       
            &                                   init=256,               ev=init
            
            -- A429 label
            VAR A429_data[1][0].label,          init=100,               ev=A429_cfg_data[0].A429_label
            
             -- A429 type
            VAR A429_data[1][0].type,           init=BCD,                ev=A429_cfg_data[0].A429_type
            
            -- A429 significant bits
            VAR A429_data[1][0].sig_bits,       init=65,                ev=DDW_SIG_BIT
            
            -- A429 start bits
            VAR A429_data[1][0].start_bit,      init=59,                ev=ONE
            
            -- A429 minimum val
            -- A429 minimum val
            VAR A429_data[1][0].min_val,        init=88.0,              ev=ONE
            
            -- A429 maximum val
            VAR A429_data[1][0].max_val,        init=55.0,              ev=ONE
            
            -- A429 data values
            VAR A429_data[1][0].scale_factor,   init=112.0,             ev=ONE
            
            VAR A429_data[1][0].timeout,        init=141,               ev=A429_cfg_data[0].label_data.A429_ddw_timeout

            VAR A429_data[1][1].label,          init=100,               ev=A429_cfg_data[0].A429_label
            
            VAR A429_data[1][1].type,           init=BCD,                ev=A429_cfg_data[0].A429_type
            
            VAR A429_data[1][1].sig_bits,       init=65,                ev=DDW_SIG_BIT
            
            VAR A429_data[1][1].start_bit,      init=59,                ev=ONE
            
            VAR A429_data[1][1].min_val,        init=88.0,              ev=ONE
            
            VAR A429_data[1][1].max_val,        init=55.0,              ev=ONE
            
            VAR A429_data[1][1].scale_factor,   init=112.0,             ev=ONE
            
            VAR A429_data[1][1].timeout,        init=141,               ev=A429_cfg_data[0].label_data.A429_ddw_timeout         

            VAR A429_data[1][2].label,          init=100,               ev=A429_cfg_data[0].A429_label
            
            VAR A429_data[1][2].type,           init=BCD,                ev=A429_cfg_data[0].A429_type
            
            VAR A429_data[1][2].sig_bits,       init=65,                ev=DDW_SIG_BIT
            
            VAR A429_data[1][2].start_bit,      init=59,                ev=ONE
            
            VAR A429_data[1][2].min_val,        init=88.0,              ev=ONE
            
            VAR A429_data[1][2].max_val,        init=55.0,              ev=ONE
            
            VAR A429_data[1][2].scale_factor,   init=112.0,             ev=ONE
            
            VAR A429_data[1][2].timeout,        init=141,               ev=A429_cfg_data[0].label_data.A429_ddw_timeout         
            
            VAR A429_data[1][3].label,          init=100,               ev=A429_cfg_data[0].A429_label
            
            VAR A429_data[1][3].type,           init=BCD,                ev=A429_cfg_data[0].A429_type
            
            VAR A429_data[1][3].sig_bits,       init=65,                ev=DDW_SIG_BIT
            
            VAR A429_data[1][3].start_bit,      init=59,                ev=ONE
            
            VAR A429_data[1][3].min_val,        init=88.0,              ev=ONE
            
            VAR A429_data[1][3].max_val,        init=55.0,              ev=ONE
            
            VAR A429_data[1][3].scale_factor,   init=112.0,             ev=ONE
            
            VAR A429_data[1][3].timeout,        init=141,               ev=A429_cfg_data[0].label_data.A429_ddw_timeout
                        
            VAR A429_data[1][4].label,          init=100,               ev=A429_cfg_data[0].A429_label
            
            VAR A429_data[1][4].type,           init=BCD,                ev=A429_cfg_data[0].A429_type
            
            VAR A429_data[1][4].sig_bits,       init=65,                ev=DDW_SIG_BIT
            
            VAR A429_data[1][4].start_bit,      init=59,                ev=ONE
            
            VAR A429_data[1][4].min_val,        init=88.0,              ev=ONE
            
            VAR A429_data[1][4].max_val,        init=55.0,              ev=ONE
            
            VAR A429_data[1][4].scale_factor,   init=112.0,             ev=ONE
            
            VAR A429_data[1][4].timeout,        init=141,               ev=A429_cfg_data[0].label_data.A429_ddw_timeout
            
            VAR A429_data[1][5].label,          init=100,               ev=A429_cfg_data[0].A429_label
            
            VAR A429_data[1][5].type,           init=BCD,                ev=A429_cfg_data[0].A429_type
            
            VAR A429_data[1][5].sig_bits,       init=65,                ev=DDW_SIG_BIT
            
            VAR A429_data[1][5].start_bit,      init=59,                ev=ONE
            
            VAR A429_data[1][5].min_val,        init=88.0,              ev=ONE
            
            VAR A429_data[1][5].max_val,        init=55.0,              ev=ONE
            
            VAR A429_data[1][5].scale_factor,   init=112.0,             ev=ONE
            
            VAR A429_data[1][5].timeout,        init=141,               ev=A429_cfg_data[0].label_data.A429_ddw_timeout
            
        -- Stub Calls   
        SIMUL

            -- function extract CAS data from the pdi
            STUB  A429Extract (A429_MESSAGE_ADDRESS) 

            -- function extracts A429  settings
            STUB CasExtract (CAS_MESSAGE_ADDRESS)

        END SIMUL

    -- Calling The Unit Under Test 
    #A429Init();
    END ELEMENT

END TEST -- TEST 3
    
    
TEST 4
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD>
    COMMENT [hdudispfa429-A429Init-DB-LLR-007]
    COMMENT The function loop from ZERO to A429_settings_cnt and does the following 
    COMMENT when all of the below conditions(a,b,c) are satisfied
    COMMENT a) A429_port of A429_cfg_data with index value loop counter is equal to TWO and 
    COMMENT b) A429_type of A429_cfg_data with index loop counter value is equal to DDW
    COMMENT c) Cas_cnt is zero OR  A429_label of A429_cfg_data with index as loop counter is equal to label of Cas_msg with index zero 
    COMMENT 1. Set label of A429_data with indices one and  port2 value to A429_label of A429_cfg_data with index loop counter value.
    COMMENT 2. Set type of A429_data with indices one and  port2 value to A429_type of A429_cfg_data with of A429_data with loop counter value.
    COMMENT 3. Set sig_bits of A429_data with indices one and  port2 value to DDW_SIG_BIT.
    COMMENT 4. Set start_bit of A429_data with indices one and  port2 value to ONE.
    COMMENT 5. Set min_val of A429_data with indices one and  port2 value to ONE.
    COMMENT 6. Set max_val of A429_data with indices one and  port2 value to ONE.
    COMMENT 7. Set scale_factor of A429_data with indices one and  port2 value to ONE.
    COMMENT 8. Set timeout of A429_data with indices one and  port2 value to A429_ddw_timeout of label_data of A429_cfg_data with index loop counter .
    COMMENT 9. Increment the port2 index value by one.
    COMMENT Equivalence Class 114,117,119,121
    COMMENT </TD>

    ELEMENT

        COMMENT INPUT SECTION:

            -- Counter for a429 settings
            VAR A429_settings_cnt,              init=1,                 ev=init

            -- Holds the port1 label count value
            VAR Port1_label_count,              init=55,                ev=0

            -- Holds the port2 label count value
            VAR Port2_label_count,              init=90,                ev=1

            -- Holds the CAS count
            VAR Cas_cnt,                        init=0,                 ev=init

            -- CAS label
            VAR Cas_msg[0].label,               init=128,               ev=init

        COMMENT INPUT/OUTPUT SECTION:

            -- A429 configuration data
            VAR A429_cfg_data[0].A429_port,     init=TWO,               ev=init

            -- A429 configuration data
            VAR A429_cfg_data[0].A429_type,     init=DDW,               ev=init

        COMMENT OUTPUT SECTION:

            VAR Cas_label_start_idx,            init=5,                 ev=init

            -- A429 configuration data
            VAR A429_cfg_data[0].A429_label,    init=128,               ev=init

            -- A429 configuration data
            VAR A429_cfg_data[0].label_data.A429_ddw_timeout,   
            &                                   init=256,               ev=init
            
            -- A429 label
            VAR A429_data[1][0].label,          init=100,               ev=A429_cfg_data[0].A429_label
            
            -- A429 label
            VAR A429_data[1][0].type,           init=BCD,               ev=A429_cfg_data[0].A429_type
            
            -- A429 significant bits
            VAR A429_data[1][0].sig_bits,       init=152,               ev=DDW_SIG_BIT
            
            -- A429 start bits
            VAR A429_data[1][0].start_bit,      init=212,               ev=ONE
            
            -- A429 minimum val
            VAR A429_data[1][0].min_val,        init=51.0,              ev=ONE
            
            -- A429 maximum val
            VAR A429_data[1][0].max_val,        init=23.,               ev=ONE
            
            -- A429 scale factor
            VAR A429_data[1][0].scale_factor,   init=118.0,             ev=ONE
            
            -- A429 timeout
            VAR A429_data[1][0].timeout,        init=112,               ev=A429_cfg_data[0].label_data.A429_ddw_timeout

        -- Stub Calls
        SIMUL

            -- function extract CAS data from the pdi
            STUB  A429Extract (A429_MESSAGE_ADDRESS) 

            -- function extracts A429  settings
            STUB CasExtract (CAS_MESSAGE_ADDRESS)

        END SIMUL

    -- Calling The Unit Under Test 
    #A429Init();
    END ELEMENT

END TEST -- TEST 4
    
TEST 5
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD>
    COMMENT [hdudispfa429-A429Init-DB-LLR-007]
    COMMENT The function loop from ZERO to A429_settings_cnt and does the following 
    COMMENT when all of the below conditions(a,b,c) are satisfied
    COMMENT a) A429_port of A429_cfg_data with index value loop counter is equal to TWO and 
    COMMENT b) A429_type of A429_cfg_data with index loop counter value is equal to DDW
    COMMENT c) Cas_cnt is not zero OR  A429_label of A429_cfg_data with index as loop counter is not equal to label of Cas_msg with index zero 
    COMMENT 1. Set label of A429_data with indices one and  port2 value to A429_label of A429_cfg_data with index loop counter value.
    COMMENT 2. Set type of A429_data with indices one and  port2 value to A429_type of A429_cfg_data with of A429_data with loop counter value.
    COMMENT 3. Set sig_bits of A429_data with indices one and  port2 value to DDW_SIG_BIT.
    COMMENT 4. Set start_bit of A429_data with indices one and  port2 value to ONE.
    COMMENT 5. Set min_val of A429_data with indices one and  port2 value to ONE.
    COMMENT 6. Set max_val of A429_data with indices one and  port2 value to ONE.
    COMMENT 7. Set scale_factor of A429_data with indices one and  port2 value to ONE.
    COMMENT 8. Set timeout of A429_data with indices one and  port2 value to A429_ddw_timeout of label_data of A429_cfg_data with index loop counter .
    COMMENT 9. Increment the port2 index value by one.
    COMMENT Equivalence Class 114,117,120,122
    COMMENT </TD>

    ELEMENT

        COMMENT INPUT SECTION:

            -- Counter for a429 settings
            VAR A429_settings_cnt,              init=1,                 ev=init

            -- Holds the port1 label count value
            VAR Port1_label_count,              init=55,                ev=0

            -- Holds the port2 label count value
            VAR Port2_label_count,              init=90,                ev=1

            -- Holds the CAS count
            VAR Cas_cnt,                        init=20,                ev=init

            -- CAS label
            VAR Cas_msg[0].label,               init=50,                ev=init

        COMMENT INPUT/OUTPUT SECTION:

            -- A429 configuration data
            VAR A429_cfg_data[0].A429_port,     init=TWO,               ev=init

            -- A429 configuration data
            VAR A429_cfg_data[0].A429_type,     init=DDW,               ev=init

        COMMENT OUTPUT SECTION:

            --VAR Cas_label_start_idx,          init=10,                ev=5

            -- A429 configuration data
            VAR A429_cfg_data[0].A429_label,    init=128,               ev=init

            -- A429 configuration data
            VAR A429_cfg_data[0].label_data.A429_ddw_timeout,       
            &                                   init=256,               ev=init
            
            -- A429 start label
            VAR A429_data[1][0].label,          init=44,                ev=A429_cfg_data[0].A429_label
            
            -- A429 start type
            VAR A429_data[1][0].type,           init=BCD,                ev=A429_cfg_data[0].A429_type
            
            -- A429 significant bits
            VAR A429_data[1][0].sig_bits,       init=225,               ev=DDW_SIG_BIT
            
            -- A429 start bits
            VAR A429_data[1][0].start_bit,      init=132,               ev=ONE
            
            -- A429 minimum val
            VAR A429_data[1][0].min_val,        init=53.,               ev=ONE
            
            -- A429 maximum val
            VAR A429_data[1][0].max_val,        init=112.0,             ev=ONE
            
            -- A429 scale factor
            VAR A429_data[1][0].scale_factor,   init=56.,               ev=ONE
            
            -- A429 start timeout
            VAR A429_data[1][0].timeout,        init=122,               ev=A429_cfg_data[0].label_data.A429_ddw_timeout

        -- Stub Calls
        SIMUL

            -- function extract CAS data from the pdi
            STUB  A429Extract (A429_MESSAGE_ADDRESS) 

            -- function extracts A429  settings
            STUB CasExtract (CAS_MESSAGE_ADDRESS)

        END SIMUL

    -- Calling The Unit Under Test 
    #A429Init();
    END ELEMENT

END TEST -- TEST 5
    
TEST 6
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD>
    COMMENT [hdudispfa429-A429Init-DB-LLR-007]
    COMMENT The function does nothing when
    COMMENT A429_type of A429_cfg_data with index loop counter value is other than BNR and DDW.
    COMMENT Equivalence Class 118
    COMMENT </TD>

    ELEMENT

        COMMENT INPUT SECTION:

            -- Counter for a429 settings
            VAR A429_settings_cnt,                init=1,               ev=init

            -- Holds the port1 label count value
            VAR Port1_label_count,                init=55,              ev=0

            -- Holds the port2 label count value
            VAR Port2_label_count,                init=90,              ev=0

        COMMENT INPUT/OUTPUT SECTION:

            -- A429 configuration data
            VAR A429_cfg_data[0].A429_port,       init=TWO,             ev=init

            -- A429 configuration data
            VAR A429_cfg_data[0].A429_type,       init=BCD,             ev=init

        COMMENT OUTPUT SECTION:

            -- None

        -- Stub Calls
        SIMUL

            -- function extract CAS data from the pdi
            STUB  A429Extract (A429_MESSAGE_ADDRESS) 

            -- function extracts A429  settings
            STUB CasExtract (CAS_MESSAGE_ADDRESS)

        END SIMUL

    -- Calling The Unit Under Test 
    #A429Init();
    END ELEMENT

END TEST -- TEST 6
    
TEST 7
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD>
    COMMENT [hdudispfa429-A429Init-DB-LLR-007]
    COMMENT The function does nothing when
    COMMENT A429_port of A429_cfg_data with index value loop counter is other than ONE and TWO
    COMMENT Equivalence Class 115
    COMMENT </TD

    ELEMENT

        COMMENT INPUT SECTION:

            -- Counter for a429 settings
            VAR A429_settings_cnt,               init=1,            ev=init

            -- Holds the port1 label count value
            VAR Port1_label_count,               init=55,           ev=0

            -- Holds the port2 label count value
            VAR Port2_label_count,               init=90,           ev=0

        COMMENT INPUT/OUTPUT SECTION:

            -- A429 configuration data
            VAR A429_cfg_data[0].A429_port,      init=10,           ev=init

        COMMENT OUTPUT SECTION:

            -- None 
            
        -- Stub Calls
        SIMUL

            -- function extract CAS data from the pdi
            STUB  A429Extract (A429_MESSAGE_ADDRESS) 

            -- function extracts A429  settings
            STUB CasExtract (CAS_MESSAGE_ADDRESS)

        END SIMUL

    -- Calling The Unit Under Test 
    #A429Init();
    END ELEMENT

END TEST -- TEST 7
    
TEST 8
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT [hdudispfa429-A429Init-DB-LLR-002]
    COMMENT The function loops from ZERO to A429_settings_cnt and does the following when A429_port of A429_cfg_data with index 
    COMMENT value loop counter is equal to ONE and A429_type of A429_cfg_data is equal to BNR
    COMMENT 1.  Set label of A429_data with indices zero and port1 index value to A429_label of A429_cfg_data with index loop 
    COMMENT counter value.
    COMMENT 2.  Set type of A429_data with indices zero and port1 index value to A429_type  of A429_cfg_data with index 
    COMMENT loop counter value.
    COMMENT 3.  Set sig_bits of A429_data with indices zero and port1 index value to A429_bnr_bits of A429_bnr_data of 
    COMMENT label_data of  A429_cfg_data with index loop counter value.
    COMMENT 4.  Set start_bit of A429_data with indices zero and port1 index value to A429_bnr_start_bit of A429_bnr_data 
    COMMENT of label_data of  A429_cfg_data with index loop counter value.
    COMMENT 5.  Set min_val of A429_data with indices zero and port1 index value to A429_bnr_min of A429_bnr_data of label_data 
    COMMENT of  A429_cfg_data with index loop counter value.
    COMMENT 6.  Set max_val of A429_data with indices zero and port1 index value to A429_bnr_max of A429_bnr_data of label_data 
    COMMENT of  A429_cfg_data with index loop counter value.
    COMMENT 7.  Set scale_factor of A429_data with indices zero and port1 index value to A429_bnr_scale_fact of A429_bnr_data of 
    COMMENT label_data of  A429_cfg_data with index loop counter value.
    COMMENT 8.  Set offset of A429_data with indices zero and port1 index value to A429_bnr_offset of A429_bnr_data of label_data 
    COMMENT of  A429_cfg_data with index loop counter value.
    COMMENT 9.  Set timeout of A429_data with indices zero and port1 index value to A429_bnr_timeout of A429_bnr_data of label_data 
    COMMENT of  A429_cfg_data with index loop counter value.
    COMMENT 10. Increment the port1 index value by one.
    COMMENT Equivalence Class 113,116
    COMMENT </TD>

    ELEMENT

        COMMENT INPUT SECTION:

            -- Counter for a429 settings
            VAR A429_settings_cnt,                      init=1,                 ev=init

            -- Holds the port1 label count value
            VAR Port1_label_count,                      init=55,                ev=1

            -- Holds the port2 label count value
            VAR Port2_label_count,                      init=90,                ev=0

        COMMENT INPUT/OUTPUT SECTION:

            -- A429 configuration data
            VAR A429_cfg_data[0].A429_port,             init=ONE,               ev=init

            -- A429 configuration data
            VAR A429_cfg_data[0].A429_type,             init=BNR,               ev=init

        COMMENT OUTPUT SECTION:

            -- A429 configuration data
            VAR A429_cfg_data[0].A429_label,            init=155,               ev=init
            
            -- A429 configuration data
            VAR A429_cfg_data[0].label_data.A429_bnr_data.A429_bnr_bits,        init=120,       ev=init
            
            -- A429 configuration data
            VAR A429_cfg_data[0].label_data.A429_bnr_data.A429_bnr_start_bit,   init=250,       ev=init

            -- A429 configuration data
            VAR A429_cfg_data[0].label_data.A429_bnr_data.A429_bnr_min,         init=150.0,     ev=init

            -- A429 configuration data
            VAR A429_cfg_data[0].label_data.A429_bnr_data.A429_bnr_max,         init=260.0,     ev=init

            -- A429 configuration data
            VAR A429_cfg_data[0].label_data.A429_bnr_data.A429_bnr_scale_fact,  init=55.0,      ev=init

            -- A429 configuration data
            VAR A429_cfg_data[0].label_data.A429_bnr_data.A429_bnr_offset,      init=852,       ev=init

            -- A429 configuration data
            VAR A429_cfg_data[0].label_data.A429_bnr_data.A429_bnr_timeout,     init=282,       ev=init
            
            -- A429 data values
            VAR A429_data[0][0].label,          init=15,        ev= A429_cfg_data[0].A429_label

            VAR A429_data[0][0].type,           init=BCD,       ev=A429_cfg_data[0].A429_type

            VAR A429_data[0][0].sig_bits,       init=50,        ev=A429_cfg_data[0].label_data.A429_bnr_data.A429_bnr_bits

            VAR A429_data[0][0].start_bit,      init=20,        ev=A429_cfg_data[0].label_data.A429_bnr_data.A429_bnr_start_bit

            VAR A429_data[0][0].min_val,        init=15.3,      ev=A429_cfg_data[0].label_data.A429_bnr_data.A429_bnr_min

            VAR A429_data[0][0].max_val,        init=16.3,      ev=A429_cfg_data[0].label_data.A429_bnr_data.A429_bnr_max

            VAR A429_data[0][0].scale_factor,   init=13.0,      ev=A429_cfg_data[0].label_data.A429_bnr_data.A429_bnr_scale_fact

            VAR A429_data[0][0].offset,         init=200,       ev=A429_cfg_data[0].label_data.A429_bnr_data.A429_bnr_offset

            VAR A429_data[0][0].timeout,        init=100,       ev=A429_cfg_data[0].label_data.A429_bnr_data.A429_bnr_timeout

        -- Stub Calls
        SIMUL

            -- function extract CAS data from the pdi
            STUB  A429Extract (A429_MESSAGE_ADDRESS) 

            -- function extracts A429  settings
            STUB CasExtract (CAS_MESSAGE_ADDRESS)

        END SIMUL

    -- Calling The Unit Under Test 
    #A429Init();
    END ELEMENT

END TEST -- TEST 8

TEST 9
FAMILY nominal

    COMMENT Test Description 
    COMMENT <TD>
    COMMENT [hdudispfa429-A429Init-DB-LLR-003]
    COMMENT The function loops from ZERO to A429_settings_cnt and does the following when A429_port of A429_cfg_data with index 
    COMMENT value loop counter is equal to ONE and A429_type of A429_cfg_data with index loop counter value is equal to DDW and 
    COMMENT Cas_cnt is other than ZERO AND A429_label  of  A429_cfg_data with index loop counter is equal to label of Cas_msg 
    COMMENT with index zero and does the following 
    COMMENT Loop from zero to CAU_WARN_MAX_ID :
    COMMENT 1. Set label of A429_data with indices zero and  port1 value to A429_label of A429_cfg_data with index loop counter value.
    COMMENT 2. Set type of A429_data with indices zero and  port1 value to A429_type of A429_cfg_data with of A429_data
    COMMENT with index port1 value.
    COMMENT 3. Set sig_bits of A429_data with indices zero and  port1 value to DDW_SIG_BIT.
    COMMENT 4. Set start_bit of A429_data with indices zero and  port1 value to ONE.
    COMMENT 5. Set min_val of A429_data with indices zero and  port1 value to ONE.
    COMMENT 6. Set max_val of A429_data with indices zero and  port1 value to ONE.
    COMMENT 7. Set scale_factor of A429_data with indices zero and  port1 value to ONE.
    COMMENT 8. Set timeout of A429_data with indices zero and  port1 value to A429_ddw_timeout of label_data of A429_cfg_data with 
    COMMENT index loop counter .
    COMMENT 9.  Increment the port1 index value by one.
    COMMENT Equivalence Class 113,117,120,121
    COMMENT </TD>

    ELEMENT

        COMMENT INPUT SECTION:

            -- Counter for a429 settings
            VAR A429_settings_cnt,              init=1,                 ev=init

            -- Holds the port1 label count value
            VAR Port1_label_count,              init=55,                ev=6

            -- Holds the port2 label count value
            VAR Port2_label_count,              init=90,                ev=0

            -- Holds the CAS count
            VAR Cas_cnt,                        init=15,                ev=init

            -- CAS label
            VAR Cas_msg[0].label,               init=155,               ev=init

        COMMENT INPUT/OUTPUT SECTION:

            -- A429 configuration data
            VAR A429_cfg_data[0].A429_port,     init=ONE,               ev=init

            -- A429 configuration data
            VAR A429_cfg_data[0].A429_type,     init=DDW,               ev=init


        COMMENT OUTPUT SECTION:

            -- A429 configuration data
            VAR A429_cfg_data[0].A429_label,    init=155,               ev=init

            -- A429 configuration data
            VAR A429_cfg_data[0].label_data.A429_ddw_timeout,      
            &                                   init=256,               ev=init
            
            -- A429 data values
            VAR A429_data[0][0].label,          init=100,               ev=A429_cfg_data[0].A429_label
            
            VAR A429_data[0][0].type,           init=BCD,                ev=A429_cfg_data[0].A429_type
            
            VAR A429_data[0][0].sig_bits,       init=100,                ev=DDW_SIG_BIT
            
            VAR A429_data[0][0].start_bit,      init=154,               ev=ONE
            
            VAR A429_data[0][0].min_val,        init=112.0,             ev=ONE
            
            VAR A429_data[0][0].max_val,        init=12.0,              ev=ONE
            
            VAR A429_data[0][0].scale_factor,   init=152.0,             ev=ONE
            
            VAR A429_data[0][0].timeout,        init=13,                ev=A429_cfg_data[0].label_data.A429_ddw_timeout
            

            VAR A429_data[0][1].label,          init=100,               ev=A429_cfg_data[0].A429_label
            
            VAR A429_data[0][1].type,           init=BCD,                ev=A429_cfg_data[0].A429_type
            
            VAR A429_data[0][1].sig_bits,       init=52,                ev=DDW_SIG_BIT
            
            VAR A429_data[0][1].start_bit,      init=254,               ev=ONE
            
            VAR A429_data[0][1].min_val,        init=112.0,             ev=ONE
            
            VAR A429_data[0][1].max_val,        init=12.0,              ev=ONE
            
            VAR A429_data[0][1].scale_factor,   init=152.0,             ev=ONE
            
            VAR A429_data[0][1].timeout,        init=13,                ev=A429_cfg_data[0].label_data.A429_ddw_timeout


            VAR A429_data[0][2].label,          init=100,               ev=A429_cfg_data[0].A429_label
            
            VAR A429_data[0][2].type,           init=BCD,                ev=A429_cfg_data[0].A429_type
            
            VAR A429_data[0][2].sig_bits,       init=52,                ev=DDW_SIG_BIT
            
            VAR A429_data[0][2].start_bit,      init=184,               ev=ONE
            
            VAR A429_data[0][2].min_val,        init=112.0,             ev=ONE
            
            VAR A429_data[0][2].max_val,        init=12.0,              ev=ONE
            
            VAR A429_data[0][2].scale_factor,   init=152.0,             ev=ONE
            
            VAR A429_data[0][2].timeout,        init=13,                ev=A429_cfg_data[0].label_data.A429_ddw_timeout
            
            
            VAR A429_data[0][3].label,          init=100,               ev=A429_cfg_data[0].A429_label
            
            VAR A429_data[0][3].type,           init=BCD,                ev=A429_cfg_data[0].A429_type
            
            VAR A429_data[0][3].sig_bits,       init=52,                ev=DDW_SIG_BIT
            
            VAR A429_data[0][3].start_bit,      init=122,               ev=ONE
            
            VAR A429_data[0][3].min_val,        init=112.0,             ev=ONE
            
            VAR A429_data[0][3].max_val,        init=12.0,              ev=ONE
            
            VAR A429_data[0][3].scale_factor,   init=152.0,             ev=ONE
            
            VAR A429_data[0][3].timeout,        init=13,                ev=A429_cfg_data[0].label_data.A429_ddw_timeout


            VAR A429_data[0][4].label,          init=100,               ev=A429_cfg_data[0].A429_label
            
            VAR A429_data[0][4].type,           init=BCD,                ev=A429_cfg_data[0].A429_type
            
            VAR A429_data[0][4].sig_bits,       init=52,                ev=DDW_SIG_BIT
            
            VAR A429_data[0][4].start_bit,      init=124,               ev=ONE
            
            VAR A429_data[0][4].min_val,        init=112.0,             ev=ONE
            
            VAR A429_data[0][4].max_val,        init=12.0,              ev=ONE
            
            VAR A429_data[0][4].scale_factor,   init=152.0,             ev=ONE
            
            VAR A429_data[0][4].timeout,        init=13,                ev=A429_cfg_data[0].label_data.A429_ddw_timeout
            
            
            VAR A429_data[0][5].label,          init=100,               ev=A429_cfg_data[0].A429_label
            
            VAR A429_data[0][5].type,           init=BCD,                ev=A429_cfg_data[0].A429_type
            
            VAR A429_data[0][5].sig_bits,       init=52,                ev=DDW_SIG_BIT
            
            VAR A429_data[0][5].start_bit,      init=225,               ev=ONE
            
            VAR A429_data[0][5].min_val,        init=112.0,             ev=ONE
            
            VAR A429_data[0][5].max_val,        init=12.0,              ev=ONE
            
            VAR A429_data[0][5].scale_factor,   init=152.0,             ev=ONE
            
            VAR A429_data[0][5].timeout,        init=13,                ev=A429_cfg_data[0].label_data.A429_ddw_timeout

        -- Stub Calls
        SIMUL

            -- function extract CAS data from the pdi
            STUB  A429Extract (A429_MESSAGE_ADDRESS) 

            -- function extracts A429  settings
            STUB CasExtract (CAS_MESSAGE_ADDRESS)

        END SIMUL

    -- Calling The Unit Under Test 
    #A429Init();
    END ELEMENT

END TEST -- TEST 9
    
TEST 10
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD>
    COMMENT [hdudispfa429-A429Init-DB-LLR-004]
    COMMENT The function loops from ZERO to A429_settings_cnt and does the following when A429_port of A429_cfg_data with index 
    COMMENT value loop counter is equal to ONE and A429_type of A429_cfg_data with index loop counter value is equal to DDW and 
    COMMENT Cas_cnt is ZERO OR A429_label  of  A429_cfg_data with index loop counter is not equal to label of Cas_msg with index 
    COMMENT zero and does the following 
    COMMENT 1. Set label of A429_data with indices zero and  port1 value to A429_label of A429_cfg_data with index loop counter value.
    COMMENT 2. Set type of A429_data with indices zero and  port1 value to A429_type of A429_cfg_data with of A429_data with 
    COMMENT loop counter value.
    COMMENT 3. Set sig_bits of A429_data with indices zero and  port1 value to DDW_SIG_BIT.
    COMMENT 4. Set start_bit of A429_data with indices zero and  port1 value to ONE.
    COMMENT 5. Set min_val of A429_data with indices zero and  port1 value to ONE.
    COMMENT 6. Set max_val of A429_data with indices zero and  port1 value to ONE.
    COMMENT 7. Set scale_factor of A429_data with indices zero and  port1 value to ONE.
    COMMENT 8. Set timeout of A429_data with indices zero and  port1 value to A429_ddw_timeout of label_data of A429_cfg_data 
    COMMENT with index loop counter .
    COMMENT 9. Increment the port1 index value by one
    COMMENT Equivalence Class 113,117,119
    COMMENT </TD>
    COMMENT

    ELEMENT

        COMMENT INPUT SECTION:

            -- Counter for a429 settings
            VAR A429_settings_cnt,              init=1,                 ev=init

            -- Holds the port1 label count value
            VAR Port1_label_count,              init=55,                ev=1

            -- Holds the port2 label count value
            VAR Port2_label_count,              init=90,                ev=0

            -- Holds the CAS count
            VAR Cas_cnt,                        init=0,                 ev=init

            -- CAS label
            VAR Cas_msg[0].label,               init=155,               ev=init

        COMMENT INPUT/OUTPUT SECTION:

            -- A429 configuration data
            VAR A429_cfg_data[0].A429_port,     init=ONE,               ev=init

            -- A429 configuration data
            VAR A429_cfg_data[0].A429_type,     init=DDW,               ev=init

        COMMENT OUTPUT SECTION:


            -- A429 configuration data
            VAR A429_cfg_data[0].A429_label,    init=155,               ev=init

            -- A429 configuration data
            VAR A429_cfg_data[0].label_data.A429_ddw_timeout,     
            &                                   init=256,               ev=init
            
            -- A429 data values
            VAR A429_data[0][0].label,          init=100,               ev=A429_cfg_data[0].A429_label
            
            VAR A429_data[0][0].type,           init=BCD,                ev=A429_cfg_data[0].A429_type
            
            VAR A429_data[0][0].sig_bits,       init=52,                ev=DDW_SIG_BIT
            
            VAR A429_data[0][0].start_bit,      init=154,               ev=ONE
            
            VAR A429_data[0][0].min_val,        init=112.0,             ev=ONE
            
            VAR A429_data[0][0].max_val,        init=12.0,              ev=ONE
            
            VAR A429_data[0][0].scale_factor,   init=152.0,             ev=ONE
            
            VAR A429_data[0][0].timeout,        init=13,                ev=A429_cfg_data[0].label_data.A429_ddw_timeout

        -- Stub Calls
        SIMUL

            -- function extract CAS data from the pdi
            STUB  A429Extract (A429_MESSAGE_ADDRESS) 
            
            -- function extracts A429  settings
            STUB CasExtract (CAS_MESSAGE_ADDRESS)

        END SIMUL

    -- Calling The Unit Under Test 
    #A429Init();
    END ELEMENT

END TEST -- TEST 10
    
TEST 11
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD>
    COMMENT [hdudispfa429-A429Init-DB-LLR-004]
    COMMENT The function loops from ZERO to A429_settings_cnt and does the following when A429_port of A429_cfg_data with index 
    COMMENT value loop counter is equal to ONE and A429_type of A429_cfg_data with index loop counter value is equal to DDW and 
    COMMENT Cas_cnt is not ZERO OR A429_label  of  A429_cfg_data with index loop counter is not equal to label of Cas_msg with index 
    COMMENT zero and does the following 
    COMMENT 1. Set label of A429_data with indices zero and  port1 value to A429_label of A429_cfg_data with index loop counter value.
    COMMENT 2. Set type of A429_data with indices zero and  port1 value to A429_type of A429_cfg_data with of A429_data with 
    COMMENT loop counter value.
    COMMENT 3. Set sig_bits of A429_data with indices zero and  port1 value to DDW_SIG_BIT.
    COMMENT 4. Set start_bit of A429_data with indices zero and  port1 value to ONE.
    COMMENT 5. Set min_val of A429_data with indices zero and  port1 value to ONE.
    COMMENT 6. Set max_val of A429_data with indices zero and  port1 value to ONE.
    COMMENT 7. Set scale_factor of A429_data with indices zero and  port1 value to ONE.
    COMMENT 8. Set timeout of A429_data with indices zero and  port1 value to A429_ddw_timeout of label_data of A429_cfg_data 
    COMMENT with index loop counter .
    COMMENT 9. Increment the port1 index value by one
    COMMENT Equivalence Class 113,117,120,122
    COMMENT </TD>
    COMMENT

    ELEMENT

        COMMENT INPUT SECTION:

            -- Counter for a429 settings
            VAR A429_settings_cnt,              init=1,                 ev=init

            -- Holds the port1 label count value
            VAR Port1_label_count,              init=55,                ev=1

            -- Holds the port2 label count value
            VAR Port2_label_count,              init=90,                ev=0

            -- Holds the CAS count
            VAR Cas_cnt,                        init=10,                ev=init

            -- CAS label
            VAR Cas_msg[0].label,               init=15,                ev=init

        COMMENT INPUT/OUTPUT SECTION:

            -- A429 configuration data
            VAR A429_cfg_data[0].A429_port,     init=ONE,               ev=init

            -- A429 configuration data
            VAR A429_cfg_data[0].A429_type,     init=DDW,               ev=init

        COMMENT OUTPUT SECTION:

            -- A429 configuration data
            VAR A429_cfg_data[0].A429_label,    init=155,               ev=init

            -- A429 configuration data
            VAR A429_cfg_data[0].label_data.A429_ddw_timeout,       
            &                                   init=256,               ev=init
            
            -- A429 data values
            VAR A429_data[0][0].label,          init=100,               ev=A429_cfg_data[0].A429_label
            
            VAR A429_data[0][0].type,           init=BCD,                ev=A429_cfg_data[0].A429_type
            
            VAR A429_data[0][0].sig_bits,       init=52,                ev=DDW_SIG_BIT
            
            VAR A429_data[0][0].start_bit,      init=44,                ev=ONE
            
            VAR A429_data[0][0].min_val,        init=112.0,             ev=ONE
            
            VAR A429_data[0][0].max_val,        init=12.0,              ev=ONE
            
            VAR A429_data[0][0].scale_factor,   init=152.0,             ev=ONE
            
            VAR A429_data[0][0].timeout,        init=13,                ev=A429_cfg_data[0].label_data.A429_ddw_timeout

        -- Stub Calls
        SIMUL

            -- function extract CAS data from the pdi
            STUB  A429Extract (A429_MESSAGE_ADDRESS) 

            -- function extracts A429  settings
            STUB CasExtract (CAS_MESSAGE_ADDRESS)
    
        END SIMUL

    -- Calling The Unit Under Test 
    #A429Init();
    END ELEMENT

END TEST -- TEST 11

TEST 12
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD>
    COMMENT [hdudispfa429-A429Init-DB-LLR-004]
    COMMENT The function does nothing when
    COMMENT A429_type of A429_cfg_data with index loop counter value is other than BNR and DDW
    COMMENT Equivalence Class 118
    COMMENT </TD>
    COMMENT

    ELEMENT

        COMMENT INPUT SECTION:

            -- Counter for a429 settings
            VAR A429_settings_cnt,                  init=1,             ev=init

            -- Holds the port1 label count value
            VAR Port1_label_count,                  init=55,            ev=0

            -- Holds the port2 label count value
            VAR Port2_label_count,                  init=90,            ev=0

        COMMENT INPUT/OUTPUT SECTION:

            -- A429 configuration data
            VAR A429_cfg_data[0].A429_port,         init=ONE,           ev=init

            -- A429 configuration data
            VAR A429_cfg_data[0].A429_type,         init=BCD,           ev=init

        COMMENT OUTPUT SECTION:

            -- None
            
        -- Stub Calls   
        SIMUL

            -- function extract CAS data from the pdi
            STUB  A429Extract (A429_MESSAGE_ADDRESS) 

            -- function extracts A429  settings
            STUB CasExtract (CAS_MESSAGE_ADDRESS)
    
        END SIMUL

    #A429Init();
    END ELEMENT

END TEST -- TEST 12

TEST 13
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD>
    COMMENT [hdudispfa429-A429Init-DB-LLR-004]
    COMMENT The function loops from ZERO to A429_settings_cnt and does the following when A429_port of A429_cfg_data with index 
    COMMENT value loop counter is equal to ONE and A429_type of A429_cfg_data with index loop counter value is equal to DDW and 
    COMMENT Cas_cnt is not ZERO OR A429_label  of  A429_cfg_data with index loop counter is not equal to label of Cas_msg with index 
    COMMENT zero and does the following 
    COMMENT 1. Set label of A429_data with indices zero and  port1 value to A429_label of A429_cfg_data with index loop counter value.
    COMMENT 2. Set type of A429_data with indices zero and  port1 value to A429_type of A429_cfg_data with of A429_data with 
    COMMENT loop counter value.
    COMMENT 3. Set sig_bits of A429_data with indices zero and  port1 value to DDW_SIG_BIT.
    COMMENT 4. Set start_bit of A429_data with indices zero and  port1 value to ONE.
    COMMENT 5. Set min_val of A429_data with indices zero and  port1 value to ONE.
    COMMENT 6. Set max_val of A429_data with indices zero and  port1 value to ONE.
    COMMENT 7. Set scale_factor of A429_data with indices zero and  port1 value to ONE.
    COMMENT 8. Set timeout of A429_data with indices zero and  port1 value to A429_ddw_timeout of label_data of A429_cfg_data 
    COMMENT with index loop counter .
    COMMENT 9. Increment the port1 index value by one
    COMMENT for loop is covered for two or more times
    COMMENT Equivalence Class 113,117,120,121
    COMMENT
    COMMENT [hdudispfa429-A429Init-DB-LLR-009]
    COMMENT The function does the following when Port1_label_count is equal to Port2_label_count
    COMMENT Loop from zero to Port1_label_count and scu_enable of configuration data is equal to False
    COMMENT 1. Set label of Parameters with index sum of port label loop counter and one to label of A429_data with
    COMMENT indices  zero and with index port label loop counter.
    COMMENT 2. Set Parameters_numbox with index sum of port label loop counter and one to label of A429_data with indices  
    COMMENT zero and with index port label loop counter.    
    COMMENT 3. Set type of Parameters with index sum of port label loop counter and one to type of A429_data with indices  
    COMMENT zero and with index port label loop counter
    COMMENT 4.Set type of Parameters_numbox with index sum of port label loop counter and one to type of A429_data with 
    COMMENT indices  zero and with index port label loop counter
    COMMENT for loop covered for one time
    COMMENT Equivalence Class 123
    COMMENT </TD >
    COMMENT

    ELEMENT

        COMMENT INPUT SECTION:

            -- Counter for a429 settings
            VAR A429_settings_cnt,              init=2,                 ev=init

            -- Holds the port1 label count value
            VAR Port1_label_count,              init=55,                ev=1

            -- Holds the port2 label count value
            VAR Port2_label_count,              init=90,                ev=1

            -- Holds the CAS count
            VAR Cas_cnt,                        init=10,                ev=init

            -- CAS label
            VAR Cas_msg[0].label,               init=155,               ev=init

        COMMENT INPUT/OUTPUT SECTION:

            -- A429 configuration data
            VAR A429_cfg_data[0].A429_port,     init=ONE,               ev=init

            -- A429 configuration data
            VAR A429_cfg_data[1].A429_port,     init=TWO,               ev=init

            -- A429 configuration data
            VAR A429_cfg_data[0].A429_type,     init=DDW,               ev=init

            -- A429 configuration data
            VAR A429_cfg_data[1].A429_type,     init=DDW,               ev=init

        COMMENT OUTPUT SECTION:

            -- A429 configuration data
            VAR A429_cfg_data[0].A429_label,    init=100,               ev=init

            -- A429 configuration data
            VAR A429_cfg_data[0].label_data.A429_ddw_timeout,    
            &                                   init=256,               ev=init

            -- A429 configuration data
            VAR A429_cfg_data[1].A429_label,    init=120,               ev=init

            -- A429 configuration data
            VAR A429_cfg_data[1].label_data.A429_ddw_timeout,     
            &                                   init=256,               ev=init         
            
            -- A429 data values
            VAR A429_data[0][0].label,          init=100,               ev=A429_cfg_data[0].A429_label
            
            VAR A429_data[0][0].type,           init=BCD,                ev=A429_cfg_data[0].A429_type
            
            VAR A429_data[0][0].sig_bits,       init=52,                ev=DDW_SIG_BIT
            
            VAR A429_data[0][0].start_bit,      init=54,                ev=ONE
            
            VAR A429_data[0][0].min_val,        init=112.0,             ev=ONE
            
            VAR A429_data[0][0].max_val,        init=12.0,              ev=ONE
            
            VAR A429_data[0][0].scale_factor,   init=152.0,             ev=ONE
            
            VAR A429_data[0][0].timeout,        init=13,                ev=A429_cfg_data[0].label_data.A429_ddw_timeout


            VAR A429_data[1][0].label,          init=100,               ev=A429_cfg_data[1].A429_label
            
            VAR A429_data[1][0].type,           init=BCD,                ev=A429_cfg_data[1].A429_type
            
            -- A429 significant bits
            VAR A429_data[1][0].sig_bits,       init=52,                ev=DDW_SIG_BIT
            
            -- A429 start bits
            VAR A429_data[1][0].start_bit,      init=64,                ev=ONE
            
            -- A429 minimum val
            VAR A429_data[1][0].min_val,        init=112.0,             ev=ONE
            
            -- A429 maximum val
            VAR A429_data[1][0].max_val,        init=12.0,              ev=ONE
            
            -- A429 scale factor
            VAR A429_data[1][0].scale_factor,   init=152.0,             ev=ONE
            
            VAR A429_data[1][0].timeout,        init=13,                ev=A429_cfg_data[1].label_data.A429_ddw_timeout            

            -- Parameter attributes 
            VAR Parameters[1].label,            init=120,               ev=A429_data[0][0].label

            -- Parameter attributes 
            VAR Parameters_numbox[1].label,     init=120,               ev=A429_data[0][0].label

            -- Parameter attributes 
            VAR Parameters[1].type,             init=BCD,               ev=A429_data[0][0].type

            -- Parameter attributes 
            VAR Parameters_numbox[1].type,      init=BCD,               ev=A429_data[0][0].type

        -- Stub Calls
        SIMUL

            -- function extract CAS data from the pdi
            STUB  A429Extract (A429_MESSAGE_ADDRESS) 

            -- function extracts A429  settings
            STUB CasExtract (CAS_MESSAGE_ADDRESS)
    
        END SIMUL

    -- Calling The Unit Under Test 
    #A429Init();
    END ELEMENT

END TEST -- TEST 13

TEST 14
FAMILY nominal

    COMMENT Test Description 
    COMMENT <TD> 
    COMMENT [hdudispfa429-A429Init-DB-LLR-009]
    COMMENT The function does the following when Port1_label_count is equal to Port2_label_count
    COMMENT Loop from zero to Port1_label_count and scu_enable of configuration data is equal to False
    COMMENT 1. Set label of Parameters with index sum of port label loop counter and one to label of A429_data with
    COMMENT indices  zero and with index port label loop counter.
    COMMENT 2. Set Parameters_numbox with index sum of port label loop counter and one to label of A429_data with indices  
    COMMENT zero and with index port label loop counter.    
    COMMENT 3. Set type of Parameters with index sum of port label loop counter and one to type of A429_data with indices  
    COMMENT zero and with index port label loop counter
    COMMENT 4.Set type of Parameters_numbox with index sum of port label loop counter and one to type of A429_data with 
    COMMENT indices  zero and with index port label loop counter
    COMMENT for loop covered for two or more times
    COMMENT Equivalence Class 123
    COMMENT </TD >

    ELEMENT

        COMMENT INPUT SECTION:

            -- Counter for a429 settings
            VAR A429_settings_cnt,              init=4,                 ev=init

            -- Holds the port1 label count value
            VAR Port1_label_count,              init=55,                ev=2

            -- Holds the port2 label count value
            VAR Port2_label_count,              init=90,                ev=2

            -- Holds the CAS count
            VAR Cas_cnt,                        init=10,                ev=init

            -- CAS label
            VAR Cas_msg[0].label,               init=15,                ev=init

        COMMENT INPUT/OUTPUT SECTION:

            -- A429 configuration data
            VAR A429_cfg_data[0].A429_port,     init=ONE,               ev=init

            -- A429 configuration data
            VAR A429_cfg_data[0].A429_type,     init=DDW,               ev=init

            -- A429 configuration data
            VAR A429_cfg_data[1].A429_port,     init=ONE,               ev=init

            -- A429 configuration data
            VAR A429_cfg_data[1].A429_type,     init=DDW,               ev=init

            -- A429 configuration data
            VAR A429_cfg_data[2].A429_port,     init=TWO,               ev=init

            -- A429 configuration data
            VAR A429_cfg_data[2].A429_type,     init=DDW,               ev=init

            -- A429 configuration data
            VAR A429_cfg_data[3].A429_port,     init=TWO,               ev=init

            -- A429 configuration data
            VAR A429_cfg_data[3].A429_type,     init=DDW,               ev=init

        COMMENT OUTPUT SECTION:

            -- A429 configuration data
            VAR A429_cfg_data[0].A429_label,    init=155,               ev=init

            -- A429 configuration data
            VAR A429_cfg_data[0].label_data.A429_ddw_timeout,  
            &                                   init=256,               ev=init

            -- A429 configuration data
            VAR A429_cfg_data[1].A429_label,    init=155,               ev=init

            -- A429 configuration data
            VAR A429_cfg_data[1].label_data.A429_ddw_timeout,  
            &                                   init=256,               ev=init

            -- A429 configuration data
            VAR A429_cfg_data[2].A429_label,    init=155,               ev=init

            -- A429 configuration data
            VAR A429_cfg_data[2].label_data.A429_ddw_timeout,  
            &                                   init=256,               ev=init

            -- A429 configuration data
            VAR A429_cfg_data[3].A429_label,    init=155,               ev=init

            -- A429 configuration data
            VAR A429_cfg_data[3].label_data.A429_ddw_timeout, 
            &                                   init=256,               ev=init
            
            -- A429 data values
            VAR A429_data[0][0].label,          init=100,               ev=A429_cfg_data[0].A429_label

            VAR A429_data[0][0].type,           init=BCD,                ev=A429_cfg_data[0].A429_type

            VAR A429_data[0][0].sig_bits,       init=52,                ev=DDW_SIG_BIT

            VAR A429_data[0][0].start_bit,      init=74,                ev=ONE

            VAR A429_data[0][0].min_val,        init=112.0,             ev=ONE

            VAR A429_data[0][0].max_val,        init=12.0,              ev=ONE

            VAR A429_data[0][0].scale_factor,   init=152.0,             ev=ONE

            VAR A429_data[0][0].timeout,        init=13,                ev=A429_cfg_data[0].label_data.A429_ddw_timeout

            VAR A429_data[0][1].label,          init=100,               ev=A429_cfg_data[1].A429_label

            VAR A429_data[0][1].type,           init=BCD,                ev=A429_cfg_data[1].A429_type

            VAR A429_data[0][1].sig_bits,       init=52,                ev=DDW_SIG_BIT

            VAR A429_data[0][1].start_bit,      init=24,                ev=ONE

            VAR A429_data[0][1].min_val,        init=112.0,             ev=ONE

            VAR A429_data[0][1].max_val,        init=12.0,              ev=ONE

            VAR A429_data[0][1].scale_factor,   init=152.0,             ev=ONE

            VAR A429_data[0][1].timeout,        init=13,                ev=A429_cfg_data[1].label_data.A429_ddw_timeout

            VAR A429_data[1][0].label,          init=100,               ev=A429_cfg_data[2].A429_label

            VAR A429_data[1][0].type,           init=BCD,                ev=A429_cfg_data[2].A429_type

            -- A429 significant bits
            VAR A429_data[1][0].sig_bits,       init=52,                ev=DDW_SIG_BIT

            -- A429 start bits
            VAR A429_data[1][0].start_bit,      init=224,               ev=ONE

            -- A429 minimum val
            VAR A429_data[1][0].min_val,        init=112.0,             ev=ONE

            -- A429 maximum val
            VAR A429_data[1][0].max_val,        init=12.0,              ev=ONE

            -- A429 scale factor
            VAR A429_data[1][0].scale_factor,   init=152.0,             ev=ONE

            VAR A429_data[1][0].timeout,        init=13,                ev=A429_cfg_data[2].label_data.A429_ddw_timeout

            VAR A429_data[1][1].label,          init=100,               ev=A429_cfg_data[3].A429_label

            VAR A429_data[1][1].type,           init=BCD,                ev=A429_cfg_data[3].A429_type

            VAR A429_data[1][1].sig_bits,       init=52,                ev=DDW_SIG_BIT

            VAR A429_data[1][1].start_bit,      init=34,                ev=ONE

            VAR A429_data[1][1].min_val,        init=112.0,             ev=ONE

            VAR A429_data[1][1].max_val,        init=12.0,              ev=ONE

            VAR A429_data[1][1].scale_factor,   init=152.0,             ev=ONE

            VAR A429_data[1][1].timeout,        init=13,                ev=A429_cfg_data[3].label_data.A429_ddw_timeout
            
            -- Parameter attributes 
            VAR Parameters[1].label,            init=120,               ev=A429_data[0][0].label

            -- Parameter attributes 
            VAR Parameters_numbox[1].label,    init=120,               ev=A429_data[0][0].label

            -- Parameter attributes 
            VAR Parameters[1].type,             init=BCD,               ev=A429_data[0][0].type

            -- Parameter attributes 
            VAR Parameters_numbox[1].type,      init=BCD,               ev=A429_data[0][0].type

            -- Parameter attributes 
            VAR Parameters[2].label,            init=120,               ev=A429_data[0][1].label

            -- Parameter attributes 
            VAR Parameters_numbox[2].label,    init=120,               ev=A429_data[0][1].label

            -- Parameter attributes 
            VAR Parameters[2].type,             init=BCD,               ev=A429_data[0][1].type

            -- Parameter attributes 
            VAR Parameters_numbox[2].type,      init=BCD,               ev=A429_data[0][1].type

        -- Stub Calls
        SIMUL
            
            -- function extract CAS data from the pdi
            STUB  A429Extract (A429_MESSAGE_ADDRESS) 

            -- function extracts A429  settings
            STUB CasExtract (CAS_MESSAGE_ADDRESS)
    
        END SIMUL

    -- Calling The Unit Under Test 
    #A429Init();
    END ELEMENT

END TEST -- TEST 14


END SERVICE -- A429Init






