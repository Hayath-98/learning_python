HEADER hdudispfgrapp,Source Code Ver : 1.17 ,TestScript Ver :1.8
--------------------------------------------------------------------------------
-- Author Name         : Anusha V
--
-- File Name           : hdudispfgrapp_1.ptu
--                       
-- Test Creation Date  : 30.10.2017
--
-- Tested Functions    : CompareLimit
--                       ScaleRead
--                       GrappSetPage
--                       RoundDialsInit
--                       NumberBoxInit
--                       FlightTimer
--                       GrappApp
--                       BarGraphInit
--			CarrotGraphInit
--			TextInit
--			TextBoxPdiInit
--
-- Version History     :
--
-- TEST-VERSION     TEST-DATE       TESTER NAME        MODIFICATIONS
-- ------------     ---------       -----------        -------------
--      1.1         30.10.2017      Anusha V           Created the PTU file.
--      1.2         11.11.2017      Anusha V           Updated as per #PR100171
--		1.3         14.11.2017      Anusha V           Updated as per #PR100171
--		1.4			10.04.2018		Akshay R K		   Updated as per #PR100201
--		1.5			28.07.2020		Vignesh Sunil	   Updated as per #PR100267
--		1.6			03.10.2020		Vignesh Sunil	   Updated as per #PR100281
--		1.7			28.04.2021		Vignesh Sunil	   Updated as per #PR100338
--		1.8			21.04.2022		Harshitha R	       Updated as per #PR1000371
--------------------------------------------------------------------------------
--
-- TESTED FILE INCLUDE DIRECTIVES 
--
--------------------------------------------------------------------------------

#/*============================================================================*/
#/* Module specific includes                                                   */
#/*============================================================================*/  

##include "hdudispfdemo.h"   /* contains functions for demo */
##include "hdudispfcas.h"             /* common defines and functions prototypes for CAS */
##include "hdudispfdma2d.h"  /* contains the common defines and functions prototypes for dma2d */
##include "hdudispffonts.h"        /* Contains different font information*/
##include "hdudispfglobalsettings.h"  /* Routines to read and write data to NVRAM  */
##include "hdudispfgrapp.h"           /* routines for all graph */
##include "hdudispfmenu.h"            /* contains prototype for menu module*/
##include "hdudispfpbs.h"          /* Contains functions prototypes of pbs.*/
##include "hdudispfpdidata.h"         /* contains routines for PDI data */
##include "hdudispfpolygon1.h"         /* provides routines for "scan line" method polygon fill.*/
##include "hdudispfpolygon2.h"         /*  Contains routines for polygons configuration.*/
##include "hdudispfresource.h"  /* provides central location to use On Chip Peripherals*/
##include "hdudispfrterror.h"           /* Provides sub routine for run time errors.*/
##include "hdudispfstmadc.h"       /* contains routines for STM ADC modules.*/
##include "hdudispftext.h"         /* Routines which maintain text display and updates */
##include "hdudispftextbox.h"         /* routines for text box draw and updtaes */
##include "hdudispftextbox.h"      /* routines for text box draw and updtaes */
##include "hdudispftimer.h"           /* Need timer for debounce. */
##include "hdudispfrtd.h"             /* Provide mapping for all A825 incoming parameters */
##include "hdudispfconfig.h"          /* contains page and color config information */
##include "hdudispfrounddial.h"    /* routines which draws and updates the round dial */
##include "hdudispfbargraphs.h"    /* Routines which maintain the "Real Time" bar-graphs */
##include "hdudispfnumbox.h"       /* Number box routines*/
##include "hdudispfcarrotgraph.h"       /* Carrot Graph routines*/
##include "hdudispfbinascii.h"     /*Utility routines to convert binary to ascii base 10.*/
##include "hdudispfpara.h"         /* prototype for builds faults, message and system information */
##include "hdudispfucos.h"            /* uC/OS routines for the real-time kernel */
##include "hdudispfforeground.h"      /* contains the routines for foreground layer of the display */
##include "hdulibbasictypes.h"      /* Contains basic header definations */

#/* updated as per PR 100083 */
##include "hdudispfa429.h"     /* Routines for arinc 429 */
##include "hdudispfoffside.h"  /* Screen, message and timer configuration */
##include "hdudispfpwm.h" /*maintains the pulse width modulation channels*/
##include "hdudispfpanel.h"   /* Contains functions prototypes of panel.*/
##include "hdudispfpbit.h"   /* Contains functions prototypes of panel.*/
##include "hdudispfpdicheck.h"
##include "hdudispflmsscu.h"  /* SCU rtd processing and error codes  */

--MACROS INCLUDED FOR THE PURPOSE OF TESTING

##define SPLASH_TIME     500   
##define DAU_CONNECTED   1
##define DEC_120         120U
##define DEC_160         160U
##define DEC_320         320U
##define DEC_50          50U
##define DEC_90          90U
##define DEC_131         131U
##define DEC_107         107U
##define DEC_225         225U
##define DEC_1400        1400U
##define DEC_2000        2000U
##define DEC_1050        1050U
##define DEC_990         990U
##define DEC_860         860U
##define DEC_1065        1065U
##define DEC_1220        1220U
##define DEC_694         694U
##define DEC_768         768U
##define DEC_120K        120000U
##define DEC_60          60U
##define DEC_670         670U
##define DEC_366         366U
##define DEC_523         523U
##define MAX_TIME        35999999UL
##define TICKS_PER_SECOND 1000U
##define SEC_PER_MIN     60U
##define MIN_PER_HOUR    60U
##define N1_NORMAL_OP       650U
##define COOLDOWN_AXIS_CALIBRATION 45U
##define PAGE_ADDR_OFFSET 0x100000
##define A429_DATA_SIZE   20U
##define MAX_A429_DATA    65U
##define ACDT_EXTRACT_ADDRS   0x61590000
##define BG_IMAGE_OFFSET 0x300000
##define SPLASH_SCREEN_ADDR  ((T_UINT16 *)0x60000000)
##define PRIMARY_SCREEN_ADDR  ((T_UINT16 *)0x60100000)
##define SECONDARY_SCREEN_ADDR  ((T_UINT16 *)0x60200000)
##define BG_IMAGE_ADDR  0x60000000
##define PAGE_BITMAP_NUM_OF_SECTOR 20U
--------------------------------------------------------------------------------
--
-- TESTED FILE DECLARATIONS 
--
--------------------------------------------------------------------------------

-- Declarations of the global variables of the tested file

    #T_UINT16 Cas_label_start_idx;
    #T_BOOL Cas_data_recieved; 
    #T_BOOL Cas_wog_data_recieved;
    #T_UINT8 Page_cas; 
    #T_TIMER Manual_timer; 
    #T_INT32 S32_data_exceed[4]; 
    #T_EXCEED_STRUCT Exceed_data[66]; 
    #T_UINT8 Exceed_cnt; 
    #T_UINT32 U32_critical_sr; 
    #T_BOOL Bitmap_crc_check_bit[20]; 
    #T_EIU Active_eiu; 
    #T_BOOL Cool_down_select; 
    #T_UINT8 Du_position; 
    #T_BOOL Nv_crc_fail; 
    #T_BOOL Demo_mode_activate; 
    #T_BOOL Demo_active; 
    #T_PBS Switches; 
    #T_BOOL Acdt_flag; 
    #T_UINT8 Tb_cnt; 
    #T_UINT8 Text_cnt;
    #T_UINT8 Cg_cnt; 
    #T_UINT8 Rd_cnt; 
    #T_PAGE Page_settings; 
    #T_TIMER Cool_timer; 
    #T_UINT8 Nb_cnt; 
    #T_UINT8 Bg_cnt;
    #T_UINT16 Port1_label_count; 
    #extern void CarrotGraphInit(T_CARROTGRAPHDEF * cg_list);
    #extern T_CHAR U8_circle[2];
    #extern T_INT8 U8_time_string[15];
    #extern void TextInit(T_TEXT * text_list);
    #extern void AppExDraw(void);
    #extern void ExmonCheck(void);
    #extern void RoundDialsInit(T_ROUNDDIALDEF * rd_list);
    #extern void TextBoxPdiInit(T_STEXTBOXPDIDATA * tb_list);
    #extern void NumberBoxInit(T_SNUMBOXDEF * nb_list);
    #extern void CoolDownTimer(void);
    #extern void ScaleRead(void);
    #extern void FlightTimer(void);
    #extern void BarGraphInit(T_SBARGRAPHDEF * bg_list);
    #extern void AppExTimerDraw(void);	
	#T_PARAM_TABLE Parameters_reading[256];	
	#T_UINT32 Cas_error;
	#T_UINT32 Timer_axis_error;
	#T_UINT32 Acdt_axis_error;
	#T_UINT32 Exceed_error;
    #T_UINT8 Pg_cnt;
    #T_BOOL Timer_flag;	
    #T_BOOL Page_parameter_error[20];	
    #T_CHAR  *dummyfunc();
    #T_UINT8 Timer_cnt;	
    #T_CONFIG_STRUCT Config_data;	
    #T_BOOL Fuel_flow_select;	
    #T_DISPLAYSIZE Display_size;	
    #T_UINT32 Ex_timer_error;	

    --  Declarations of the temporary variables of the tested file
        
    --Temporary variable created to be used in CompareLimit
    #T_UINT8 PTU_temp1;

    --Temporary variable created to be used in CompareLimit
    #T_UINT8 PTU_temp2;

    --Temporary variable created to be used in CompareLimit
    #T_INT8 PTU_temp3;

    --Temporary variable created to be used in CoolxBoxText
    #T_INT8 PTU_pc_string;

    --Temporary variable created to be used in CoolxBoxText and FlightTimer
    #T_UINT8 PTU_index=0;

    --Temporary variable created to be used in CoolxBoxText and FlightTimer 
    #T_UINT8 PTU_index1=0;
	
    #T_UINT8 PTU_index2=0;

    --Temporary variable created to be used in CoolxBoxText and FlightTimer
    #T_UINT32 PTU_src[10];

    --Temporary variable created to be used in CoolxBoxText and FlightTimer
    #T_INT8 PTU_dest[10];

    --Temporary variable created to be used in GrappInit
    #T_TIMER PTU_Splash_timer;

    --Temporary variable created to be used in GrappInit
    #T_TIMER PTU_cool_timer;

    --Temporary variable created to be used in GrappInit
    #T_UINT32 PTU_count=0;

    --Temporary variable created to be used in GrappApp
    #T_EPAGE_NUM PTU_e_page_temp;
        
    --Temporary variable created to be used in GrappApp
    #T_PARAM_TABLE PTU_parameters[50],PTU_parameters_numbox[50];
    #T_PARAM_TABLE PTU_Scu_parameters[3];
    
    --Temporary variable
    #T_UINT16 PTU_pu16Src;
    
    --Temporary variable
    #T_CHAR *PTU_char[20];
    
    --Temporary variable
    #T_CHAR PTU_temp11[10];
	
	#T_UINT8 PTU_pu8_string;
	
    --Temporary variable created to verify the parameters of function "RterrWidget"
    #T_CHAR  PTU_rterr_file[100];
    #T_CHAR  PTU_rterr_message[100];	
	
    #T_UINT32 index1;		

--------------------------------------------------------------------------------

BEGIN

    COMMENT  Author Name         : Anusha V
    COMMENT 
    COMMENT  File Name           : hdudispfgrapp_1.ptu
    COMMENT 
    COMMENT  Tested Functions    : CompareLimit
    COMMENT                        ScaleRead
    COMMENT                        GrappSetPage
    COMMENT                        RoundDialsInit
    COMMENT                        NumberBoxInit
    COMMENT                        FlightTimer
    COMMENT                        GrappApp
    COMMENT                        BarGraphInit
    COMMENT                        CarrotGraphInit
    COMMENT			   TextInit
    COMMENT			   TextBoxPdiInit
    COMMENT 
    COMMENT  Assumptions and Constraints
    COMMENT  <AC>
    COMMENT
    COMMENT  Assumption(s):
    COMMENT
    COMMENT  None
    COMMENT 
    COMMENT  Constraint(s):
    COMMENT 1. The PTU is been split into 6 due to static dependency.
    COMMENT
    COMMENT 2. Internal service is enabled in hdudispfgrapp_4.ptu in order to test the 
    COMMENT    following LLR's
    COMMENT  "hdudispfgrapp-CoolxBoxText-DB-LLR-001"
    COMMENT  "hdudispfgrapp-CoolxBoxText-DB-LLR-002"
    COMMENT  "hdudispfgrapp-CoolxBoxText-DB-LLR-003"
    COMMENT  "hdudispfgrapp-CoolxBoxText-DB-LLR-004"
    COMMENT
    COMMENT 3.Following Test script related warning is observed during Target Execution for stub function return value:
	COMMENT warning #120-D: 
	COMMENT return value type does not match the function type
	COMMENT return(Attol_ptr_out->ret);
	COMMENT
	COMMENT line 314: warning #188-D: 
	COMMENT        enumerated type mixed with another type
	COMMENT                  Ap_page1_bar_graphs[u8_i].ePenColor=Ap_page1_bar_graphs[u8_i].limColor[u8_j];                                                    ^
	COMMENT line 358: warning #188-D: 
	COMMENT       enumerated type mixed with another type
	COMMENT                  Page_num_boxes[u8_i].ePenColor=Page_num_boxes[u8_i].limColor[u8_j];
	COMMENT                                               ^
	COMMENT line 922: warning #188-D: 
	COMMENT        enumerated type mixed with another type
	COMMENT                                Exceed_data[loop_cntr].exceed_font, YELLOW,                                 ^
	COMMENT line 1002: warning #188-D: 
	COMMENT        enumerated type mixed with another type
	COMMENT                     Page_settings.timer_font, WHITE, TX_NO_FLASH, V_NORMAL, ALIGN_CENTER);
	COMMENT
    COMMENT  </AC>
    
    COMMENT  <ECD>
    COMMENT 
    COMMENT  Valid Class(es)
    COMMENT  Class 1
    COMMENT  In Function'GrappInit','TimerInstall' is called.
    COMMENT
    COMMENT  Class 2
    COMMENT  In Function'GrappInit','ForegroundLoadBackground'is called.
    COMMENT
    COMMENT  Class 3
    COMMENT  In Function'GrappInit',page_num of Page_settings is equal to ZERO.
    COMMENT
    COMMENT  Class 4
    COMMENT  In Function'GrappInit',page_num of Page_settings is not equal to ZERO.
    COMMENT
    COMMENT  Class 5
    COMMENT In function 'GrappSwithcScreens',Page_num is equal to e_new_page_num.
    COMMENT
    COMMENT  Class 6
    COMMENT In function 'GrappSwithcScreens',Page_num is not equal to e_new_page_num.
    COMMENT
    COMMENT  Class 7
    COMMENT In function 'GrappSwithcScreens','PwmBlink' is called.
    COMMENT
    COMMENT  Class 8
    COMMENT In function 'GrappSwithcScreens','LCDBackgroundOff'is called.
    COMMENT
    COMMENT  Class 9
    COMMENT In function 'GrappSwithcScreens','ForegroundClear' is called.
    COMMENT
    COMMENT  Class 10
    COMMENT In function 'GrappSwithcScreens','ForegroundLoadBackground' is called.
    COMMENT
    COMMENT  Class 11
    COMMENT In function 'GrappSwithcScreens','PdiPageDataInit' is called.
    COMMENT
    COMMENT  Class 12
    COMMENT In function 'GrappSwithcScreens','ExceedExtract' is called.
    COMMENT
    COMMENT  Class 13
    COMMENT In function 'GrappSwithcScreens','RoundDialsInit' is called.
    COMMENT
    COMMENT  Class 14
    COMMENT In function 'GrappSwithcScreens','NumberBoxInit' is called.
    COMMENT
    COMMENT  Class 15
    COMMENT In function 'GrappSwithcScreens','BarGraphInit' is called.
    COMMENT
    COMMENT  Class 16
    COMMENT In function 'GrappSwithcScreens','TextBoxOff' is called.
    COMMENT
    COMMENT  Class 17
    COMMENT In function 'GrappSwithcScreens',Acdt_flag is TRUE.
    COMMENT
    COMMENT  Class 18
    COMMENT In function 'GrappSwithcScreens','Acdt_flag is FALSE.
    COMMENT
    COMMENT  Class 19
    COMMENT  In Function'ScaleRead',type of Parameters is equal to BNR.
    COMMENT
    COMMENT  Class 20
    COMMENT  In Function'ScaleRead',type of Parameters is other than  BNR.
    COMMENT
    COMMENT  Class 21
    COMMENT  In Function'ScaleRead','RTDGetParam'is called.
    COMMENT
    COMMENT  Class 22
    COMMENT  In Function'ScaleRead','RTDGetParamDdw'is called.
    COMMENT
    COMMENT  Class 23
    COMMENT  In Function'CompareLimit',val is less than range.
    COMMENT
    COMMENT  Class 24
    COMMENT  In Function'CompareLimit',val is equal to the range.
    COMMENT
    COMMENT  Class 25
    COMMENT  In Function'CompareLimit',val is greater than range.
    COMMENT
    COMMENT  Class 26
    COMMENT  In Function'CompareLimit',val is not equal range.
    COMMENT
    COMMENT  Class 27
    COMMENT  In Function'CompareLimit',operator is equal to LESS_THAN.
    COMMENT
    COMMENT  Class 28
    COMMENT  In Function'CompareLimit',operator is equal to LESS_THAN_EQUAL.
    COMMENT
    COMMENT  Class 29
    COMMENT In Function'CompareLimit',operator is equal to EQUAL
    COMMENT
    COMMENT  Class 30
    COMMENT In Function'CompareLimit',operator is equal to GREATER_THAN_EQUAL.
    COMMENT
    COMMENT  Class 31
    COMMENT In Function'CompareLimit',operator is equal to GREATER_THAN.
    COMMENT
    COMMENT  Class 32
    COMMENT In Function'CompareLimit',operator is equal to NOT_EQUAL.
    COMMENT
    COMMENT  Class 33
    COMMENT  In Function'CompareLimit',operator is other than LESS_THAN,LESS_THAN_EQUAL,EQUAL,
    COMMENT  GREATER_THAN_EQUAL,GREATER_THAN,NOT_EQUAL.
    COMMENT
    COMMENT  Class 34
    COMMENT In Function'CoolxBoxText',cool_timer is greater than cool down variable.
    COMMENT
    COMMENT  Class 35
    COMMENT  In Function'RoundDialsInit','RoundDialAllocat' is called.
    COMMENT
    COMMENT  Class 36
    COMMENT  In Function'NumberBoxInit','NumboxAllocat' is called.
    COMMENT
    COMMENT  Class 37
    COMMENT  In Function'BarGraphInit','BargraphAllocat' is called.
    COMMENT
    COMMENT  Class 38
    COMMENT  In Function'FlightTimer',Manual_timer is greater than MAX_TIME.
    COMMENT
    COMMENT  Class 39
    COMMENT  In Function'FlightTimer',Manual_timer is less than MAX_TIME.
    COMMENT
    COMMENT  Class 40
    COMMENT  In Function'FlightTimer',Manual_timer is equal to MAX_TIME.
    COMMENT
    COMMENT  Class 41
    COMMENT  In Function'FlightTimer','BinasByteFormatInfo' is called.
    COMMENT
    COMMENT  Class 42
    COMMENT  In Function'FlightTimer','TextDispString' is called.
    COMMENT 
    COMMENT  Class 43
    COMMENT  In Function'GrappSetPage','OS_ENTER_CRITICAL' is called.
    COMMENT
    COMMENT  Class 200
    COMMENT  In Function'GrappSetPage','OS_EXIT_CRITICAL' is called.
    COMMENT
    COMMENT  Class 44
    COMMENT  In Function'ExmonCheck',stat of psParam of Ap_page1_bar_graphs is less than  PARAM_BAD
    COMMENT
    COMMENT  Class 45
    COMMENT  In Function'ExmonCheck',stat of psParam of Ap_page1_bar_graphs is greater than  PARAM_BAD
    COMMENT
    COMMENT  Class 46
    COMMENT  In Function'ExmonCheck',stat of psParam of Ap_page1_bar_graphs is equal to  PARAM_BAD
    COMMENT
    COMMENT  Class 47
    COMMENT  In Function'ExmonCheck',compare is equal to ONE 
    COMMENT
    COMMENT  Class 48
    COMMENT  In Function'ExmonCheck',compare is not equal to ONE 
    COMMENT
    COMMENT  Class 49
    COMMENT  In Function'ExmonCheck',ePenColor of Ap_page1_bar_graphs is equal to YELLOW
    COMMENT
    COMMENT  Class 50
    COMMENT  In Function'ExmonCheck',ePenColor of Ap_page1_bar_graphs is equal to RED
    COMMENT
    COMMENT  Class 51
    COMMENT  In Function'ExmonCheck',ePenColor of Ap_page1_bar_graphs is equal to GREEN
    COMMENT
    COMMENT  Class 52
    COMMENT  In Function'ExmonCheck',stat of psParam of Page_num_boxes is less than  PARAM_BAD
    COMMENT
    COMMENT  Class 53
    COMMENT  In Function'ExmonCheck',stat of psParam of Page_num_boxes is greater than  PARAM_BAD
    COMMENT
    COMMENT  Class 54
    COMMENT  In Function'ExmonCheck',stat of psParam of Page_num_boxes is equal to  PARAM_BAD
    COMMENT
    COMMENT  Class 55
    COMMENT  In Function'ExmonCheck',ePenColor of Page_num_boxes is equal to YELLOW
    COMMENT
    COMMENT  Class 56
    COMMENT  In Function'ExmonCheck',ePenColor of Page_num_boxes is equal to RED
    COMMENT
    COMMENT  Class 57
    COMMENT  In Function'ExmonCheck',ePenColor of Page_num_boxes is equal to GREEN
    COMMENT
    COMMENT  Class 58
    COMMENT  In Function'ExmonCheck',ePenColor of Ap_page1_bar_graphs is other than RED,GREEN and YELLOW.
    COMMENT
    COMMENT  Class 59
    COMMENT  In Function'ExmonCheck',ePenColor of Page_num_boxes is other than RED,GREEN and YELLOW.
    COMMENT
    COMMENT  Class 60
    COMMENT  In Function'GrappApp','ScaleRead' is called.
    COMMENT
    COMMENT  Class 61
    COMMENT  In Function'GrappApp','ExmonCheck' is called.
    COMMENT
    COMMENT  Class 62
    COMMENT  In Function'GrappApp','ForegroundLoadBackground' is called.
    COMMENT
    COMMENT  Class 63
    COMMENT  In Function'GrappApp','PdiPageDataInit ' is called.
    COMMENT
    COMMENT  Class 64
    COMMENT  In Function'GrappApp','RoundDialsInit  ' is called.
    COMMENT
    COMMENT  Class 65
    COMMENT  In Function'GrappApp','NumberBoxInit   ' is called.
    COMMENT
    COMMENT  Class 66
    COMMENT  In Function'GrappApp','BarGraphInit    ' is called.
    COMMENT
    COMMENT  Class 67
    COMMENT  In Function'GrappApp','MenuInit    ' is called.
    COMMENT
    COMMENT  Class 68
    COMMENT  In Function'GrappApp','TextBoxOff  ' is called.
    COMMENT
    COMMENT  Class 69
    COMMENT  In Function'GrappApp',acdt_flag is equal to TRUE.
    COMMENT
    COMMENT  Class 70
    COMMENT  In Function'GrappApp',acdt_flag is not equal to TRUE.
    COMMENT
    COMMENT  Class 71
    COMMENT  In Function'GrappApp',Nv_crc_fail is TRUE.
    COMMENT
    COMMENT  Class 72   
    COMMENT  In Function'GrappApp',Nv_crc_fail is not TRUE.
    COMMENT
    COMMENT  Class 73
    COMMENT  In Function'GrappApp','PageMenu' is called.
    COMMENT 
    COMMENT  Class 74
    COMMENT  In Function'GrappApp',Button b1 is true.
    COMMENT
    COMMENT  Class 75
    COMMENT  In Function'GrappApp',Button b2 is true.
    COMMENT
    COMMENT  Class 76
    COMMENT  In Function'GrappApp',Button b3 is true.
    COMMENT
    COMMENT  Class 77
    COMMENT  In Function'GrappApp',Button b4 is true.
    COMMENT
    COMMENT  Class 78
    COMMENT  In Function'GrappApp',Button b5 is true.
    COMMENT
    COMMENT  Class 79
    COMMENT  In Function'GrappApp',Button b6 is true.
    COMMENT
    COMMENT  Class 80
    COMMENT  In Function'GrappApp',Button b7 is true.
    COMMENT
    COMMENT  Class 81
    COMMENT  In Function'GrappApp',Button b8 is true.
    COMMENT
    COMMENT  Class 82
    COMMENT  In Function'GrappApp',Button c1 is true.
    COMMENT
    COMMENT  Class 83
    COMMENT  In Function'GrappApp',Button c2 is true.
    COMMENT
    COMMENT  Class 84
    COMMENT  In Function'GrappApp',Button c3 is true.
    COMMENT
    COMMENT  Class 85
    COMMENT  In Function'GrappApp',Button sLE.pressed is true.
    COMMENT
    COMMENT  Class 86
    COMMENT  In Function'GrappApp',Button sRE.pressed is true.
    COMMENT
    COMMENT  Class 87
    COMMENT  In Function'GrappApp',Button b1 is false.
    COMMENT
    COMMENT  Class 88
    COMMENT  In Function'GrappApp',Button b2 is false.
    COMMENT
    COMMENT  Class 89
    COMMENT  In Function'GrappApp',Button b3 is false.
    COMMENT
    COMMENT  Class 111
    COMMENT  In Function'GrappApp',Button b4 is false.
    COMMENT
    COMMENT  Class 90
    COMMENT  In Function'GrappApp',Button b5 is false.
    COMMENT
    COMMENT  Class 91
    COMMENT  In Function'GrappApp',Button b6 is false.
    COMMENT
    COMMENT  Class 92
    COMMENT  In Function'GrappApp',Button b7 is false.
    COMMENT
    COMMENT  Class 93
    COMMENT  In Function'GrappApp',Button b8 is false.
    COMMENT
    COMMENT  Class 94
    COMMENT  In Function'GrappApp',Button c1 is false.
    COMMENT
    COMMENT  Class 95
    COMMENT  In Function'GrappApp',Button c2 is false.
    COMMENT
    COMMENT  Class 96
    COMMENT  In Function'GrappApp',Button c3 is false.
    COMMENT
    COMMENT  Class 97
    COMMENT  In Function'GrappApp',Button sLE.pressed is false.
    COMMENT
    COMMENT  Class 98
    COMMENT  In Function'GrappApp',Button sRE.pressed is false.
    COMMENT
    COMMENT  Class 100
    COMMENT  In Function'GrappApp',Splash_timer is less than SPLASH_TIME.
    COMMENT
    COMMENT  Class 101
    COMMENT  In Function'GrappApp',Splash_timer is equal to SPLASH_TIME.
    COMMENT
    COMMENT  Class 102
    COMMENT  In Function'GrappApp',Splash_done is ZERO
    COMMENT
    COMMENT  Class 103
    COMMENT  In Function'GrappApp',Splash_done is not equal to ZERO
    COMMENT 
    COMMENT  Class 106
    COMMENT  In Function'GrappApp','OS_ENTER_CRITICAL' is called.
    COMMENT
    COMMENT  Class 107
    COMMENT  In Function'GrappApp','OS_EXIT_CRITICAL' is called.
    COMMENT
    COMMENT  Class 108
    COMMENT  In Function'GrappApp','OsTimeDly' is called.
    COMMENT
    COMMENT  Class 109
    COMMENT  In Function'GrappApp',Acdt_flag is true 
    COMMENT
    COMMENT  Class 110
    COMMENT  In Function'GrappApp','Acdt_flag is false. 
    COMMENT
    COMMENT  Class 112
    COMMENT  In Function'GrappApp',' PageMenu'is called.
    COMMENT
    COMMENT  Class 113
    COMMENT  In Function'GrappApp',' OffsideSwitchScreen'is called.
    COMMENT
    COMMENT  Class 114
    COMMENT  In Function'GrappApp',Du_position is equal to one.
    COMMENT
    COMMENT  Class 115
    COMMENT  In Function'GrappApp',Du_position is not equal to one.
    COMMENT
    COMMENT  Class 116
    COMMENT  In Function'CoolxBoxText',cool_timer is greater than cool down variable.
    COMMENT
    COMMENT  Class 117
    COMMENT  In Function'CoolxBoxText',cool_timer is less than cool down variable.
    COMMENT
    COMMENT  Class 118
    COMMENT  In Function'CoolxBoxText',cool_timer is equal to  cool down variable.
    COMMENT
    COMMENT  Class 119
    COMMENT  In Function'CoolxBoxText','BinasByteFormatInfo' is called.
    COMMENT
    COMMENT  Class 120
    COMMENT  In Function'CoolxBoxText','TextDispString' is called.
    COMMENT
    COMMENT  Class 121
    COMMENT  In Function'AppExDraw',stat of Exceedances is equal to PARAM_OK
    COMMENT
    COMMENT  Class 122
    COMMENT  In Function'AppExDraw',stat of Exceedances is not equal to PARAM_OK
    COMMENT
    COMMENT  Class 123
    COMMENT  In Function'AppExDraw',exceed_bit is set
    COMMENT
    COMMENT  Class 124
    COMMENT  In Function'AppExDraw',exceed_bit is reset
    COMMENT
    COMMENT  Class 125
    COMMENT  In Function'AppExDraw',r of exceed_reading bitwise And with result of ONE left shift by 
    COMMENT  exceed_bit of index loop_cntr of Exceed_data minus ONE is true.
    COMMENT
    COMMENT  Class 126
    COMMENT  In Function'AppExDraw',r of exceed_reading bitwise And with result of ONE left shift by 
    COMMENT  exceed_bit of index loop_cntr of Exceed_data minus ONE is false.
    COMMENT
    COMMENT  Class 127
    COMMENT  In Function'AppExDraw',S32_data_exceed bitwise And with result of ONE left shift by exceed_bit
    COMMENT  of index loop_cntr of Exceed_data minus ONE is true.
    COMMENT
    COMMENT  Class 128
    COMMENT  In Function'AppExDraw',S32_data_exceed bitwise And with result of ONE left shift by exceed_bit
    COMMENT  of index loop_cntr of Exceed_data minus ONE is false.
    COMMENT
    COMMENT  Class 129
    COMMENT  In Function'AppExDraw','TextDispString' is called.
    COMMENT 
    COMMENT  Class 130
    COMMENT  In Function'CoolDownTimer',return value of 'CompareLimit' is 0.
    COMMENT
    COMMENT  Class 131
    COMMENT  In Function'CoolDownTimer',return value of 'CompareLimit' is 1.
    COMMENT
    COMMENT  Class 132
    COMMENT  In Function'CoolDownTimer',result of logical AND of NOT of Inside_n1 and  value of 'CompareLimit' is TRUE.
    COMMENT
    COMMENT  Class 133
    COMMENT  In Function'CoolDownTimer',result of logical AND of NOT of Inside_n1 and  value of 'CompareLimit' is FALSE.
    COMMENT
    COMMENT  Class 134
    COMMENT  In Function'CoolDownTimer',Cool_down_select is equal to TRUE.
    COMMENT
    COMMENT  Class 135
    COMMENT  In Function'CoolDownTimer',Cool_down_select is equal to FALSE.
    COMMENT
    COMMENT  Class 136
    COMMENT  In Function'CoolDownTimer',Inside_n1 is equal to TRUE.
    COMMENT
    COMMENT  Class 137
    COMMENT  In Function'CoolDownTimer',Inside_n1 is equal to FALSE.
    COMMENT
    COMMENT  Class 138
    COMMENT  In Function'CoolDownTimer','CoolTimerStart'is called.
    COMMENT
    COMMENT  Class 139
    COMMENT  In Function'CoolDownTimer','TextBoxOn'is called.
    COMMENT
    COMMENT  Class 140
    COMMENT  In Function'CoolDownTimer','TextBoxOff'is called.
    COMMENT
    COMMENT  Class 141
    COMMENT  In Function'CoolDownTimer','CoolTimerStop'is called.
    COMMENT
    COMMENT  Class 142
    COMMENT  In Function'CoolDownTimer','CoolTimerReset'is called.
    COMMENT
    COMMENT  Class 143
    COMMENT  In Function'CoolDownTimer',r of wdog_data of Auto_cool_down_tmr is equal to ONE. 
    COMMENT
    COMMENT  Class 144
    COMMENT  In Function'CoolDownTimer',r of wdog_data of Auto_cool_down_tmr is not equal to ONE. 
    COMMENT
    COMMENT  Class 145
    COMMENT  In Function'CoolDownTimer',stat of acdt_reading of Auto_cool_down_tmr is less than PARAM_BAD.
    COMMENT     
    COMMENT  Class 146
    COMMENT  In Function'CoolDownTimer',stat of acdt_reading of Auto_cool_down_tmr is greater than PARAM_BAD.
    COMMENT 
    COMMENT  Class 147
    COMMENT  In Function'CoolDownTimer',stat of acdt_reading of Auto_cool_down_tmr is equal than PARAM_BAD.
    COMMENT 
    COMMENT  Class 148
    COMMENT  In Function'CoolDownTimer',Acdt_flag is TRUE
    COMMENT 
    COMMENT  Class 149
    COMMENT  In Function'CoolDownTimer',Acdt_flag is FALSE
    COMMENT 
    COMMENT  Class 150
    COMMENT  In Function'CoolDownTimer',stat of wdog_data of Auto_cool_down_tmr is less than PARAM_BAD.
    COMMENT
    COMMENT  Class 151
    COMMENT  In Function'CoolDownTimer',stat of wdog_data of Auto_cool_down_tmr is greater than PARAM_BAD.
    COMMENT
    COMMENT  Class 152
    COMMENT  In Function'CoolDownTimer',stat of wdog_data of Auto_cool_down_tmr is equal than PARAM_BAD.
    COMMENT
    COMMENT  Class 153
    COMMENT  In Function'AppDraw1',splash done is equal to zero
    COMMENT
    COMMENT  Class 154
    COMMENT  In Function'AppDraw1',splash done is not equal to zero
    COMMENT
    COMMENT  Class 155
    COMMENT  In Function'AppDraw1','TextBoxOff' is called.
    COMMENT
    COMMENT  Class 156
    COMMENT  In Function'AppDraw1',Page_cas is equal to one
    COMMENT
    COMMENT  Class 157
    COMMENT  In Function'AppDraw1',Page_cas is not equal to one
    COMMENT
    COMMENT  Class 158
    COMMENT  In Function'AppDraw1',Cas_wog_data_recieved is TRUE
    COMMENT
    COMMENT  Class 159
    COMMENT  In Function'AppDraw1',Cas_wog_data_recieved is FALSE
    COMMENT
    COMMENT  Class 160
    COMMENT  In Function'AppDraw1',Cas_data_recieved is TRUE
    COMMENT
    COMMENT  Class 161
    COMMENT  In Function'AppDraw1',Cas_data_recieved is FALSE
    COMMENT
    COMMENT  Class 162
    COMMENT  In Function'AppDraw1',stat of reading of Parameters with index Cas_label_start_idx is less than PARAM_BAD
    COMMENT
    COMMENT  Class 163
    COMMENT  In Function'AppDraw1',stat of reading of Parameters with index Cas_label_start_idx is greater than PARAM_BAD
    COMMENT
    COMMENT  Class 164
    COMMENT  In Function'AppDraw1',stat of reading of Parameters with index Cas_label_start_idx is equal to PARAM_BAD
    COMMENT
    COMMENT  Class 165
    COMMENT  In Function'AppDraw1',stat of reading of Parameters with index Cas_label_start_idx+1 is less than PARAM_BAD
    COMMENT
    COMMENT  Class 166
    COMMENT  In Function'AppDraw1',stat of reading of Parameters with index Cas_label_start_idx+1 is greater than PARAM_BAD
    COMMENT
    COMMENT  Class 167
    COMMENT  In Function'AppDraw1',stat of reading of Parameters with index Cas_label_start_idx+1 is equal to PARAM_BAD
    COMMENT
    COMMENT  Class 168
    COMMENT  In Function'AppDraw1',stat of reading of Parameters with index Cas_label_start_idx+2 is less than PARAM_BAD
    COMMENT
    COMMENT  Class 169
    COMMENT  In Function'AppDraw1',stat of reading of Parameters with index Cas_label_start_idx+2 is greater than PARAM_BAD
    COMMENT
    COMMENT  Class 170
    COMMENT  In Function'AppDraw1',stat of reading of Parameters with index Cas_label_start_idx+2 is equal to PARAM_BAD
    COMMENT 
    COMMENT  Class 171
    COMMENT  In Function'AppDraw1',stat of reading of Parameters with index Cas_label_start_idx+3 is less than PARAM_BAD
    COMMENT
    COMMENT  Class 172
    COMMENT  In Function'AppDraw1',stat of reading of Parameters with index Cas_label_start_idx+3 is greater to PARAM_BAD
    COMMENT
    COMMENT  Class 173
    COMMENT  In Function'AppDraw1',stat of reading of Parameters with index Cas_label_start_idx+3 is equal to PARAM_BAD
    COMMENT     
    COMMENT  Class 174
    COMMENT  In Function'AppDraw1',stat of reading of Parameters with index Cas_label_start_idx+4 is less than PARAM_BAD
    COMMENT
    COMMENT  Class 175
    COMMENT  In Function'AppDraw1',stat of reading of Parameters with index Cas_label_start_idx+4 is greater than PARAM_BAD
    COMMENT
    COMMENT  Class 176
    COMMENT  In Function'AppDraw1',stat of reading of Parameters with index Cas_label_start_idx+4 is equal to PARAM_BAD
    COMMENT 
    COMMENT  Class 177
    COMMENT  In Function'AppDraw1',stat of reading of Parameters with index Cas_label_start_idx+5 is less than PARAM_BAD
    COMMENT
    COMMENT  Class 178
    COMMENT  In Function'AppDraw1',stat of reading of Parameters with index Cas_label_start_idx+5 is greater than PARAM_BAD
    COMMENT
    COMMENT  Class 179
    COMMENT  In Function'AppDraw1',stat of reading of Parameters with index Cas_label_start_idx+5 is equal to PARAM_BAD
    COMMENT
    COMMENT  Class 180
    COMMENT  In Function'AppDraw1',stat of wog_data of Auto_cool_down_tmr is less than PARAM_BAD
    COMMENT 
    COMMENT  Class 181
    COMMENT  In Function'AppDraw1',stat of wog_data of Auto_cool_down_tmr is greater than PARAM_BAD
    COMMENT
    COMMENT  Class 182
    COMMENT  In Function'AppDraw1',stat of wog_data of Auto_cool_down_tmr is equal to PARAM_BAD
    COMMENT
    COMMENT  Class 183
    COMMENT  In Function'AppDraw1','CasDisplay' is called ,
    COMMENT
    COMMENT  Class 184
    COMMENT  In Function'AppDraw1',7th bit of page_menu of page_settings is equal to one.
    COMMENT
    COMMENT  Class 185
    COMMENT  In Function'AppDraw1',7th bit of page_menu of page_settings is not equal to one.
    COMMENT
    COMMENT  Class 186
    COMMENT  In Function'AppDraw1','FlightTimer' is called.
    COMMENT
    COMMENT  Class 187
    COMMENT  In Function'AppDraw1','CoolDownTimer' is called.
    COMMENT
    COMMENT  Class 188
    COMMENT  In Function'AppDraw1',Acdt_flag is TRUE    
    COMMENT
    COMMENT  Class 189
    COMMENT  In Function'AppDraw1',Acdt_flag is FALSE   
    COMMENT
    COMMENT  Class 190
    COMMENT  In Function'AppDraw1','AppExDraw' is called.
    COMMENT 
    COMMENT  Class 191
	COMMENT  In Function'GrappApp',Button sRE.twist is true.
    COMMENT
    COMMENT  Class 192
	COMMENT  In Function'GrappApp',Button sRE.twist is false.
	COMMENT
    COMMENT  Class 193
	COMMENT  In Function'GrappApp',Button sLE.twist is true.
    COMMENT
    COMMENT  Class 194
	COMMENT  In Function'GrappApp',Button sLE.twist is false.	
	COMMENT 
    COMMENT  Class 195
	COMMENT  In Function'GrappApp',Button Splash_b1_press is true.
    COMMENT
    COMMENT  Class 196
	COMMENT  In Function'GrappApp',Button Splash_b1_press is false.
    COMMENT
    COMMENT  Class 197
    COMMENT  In Function'GrappApp', Set_new_page is TRUE.
    COMMENT
	COMMENT  Class 198
    COMMENT  In Function'GrappApp', Set_new_page is FALSE.
    COMMENT
    COMMENT  Class 199
	COMMENT  In function'GrappApp', counter_airframe value is greater than AIFRAME_CHECK_SEC
    COMMENT
    COMMENT  Class 207
	COMMENT  In function 'GrappApp' counter_airframe value is equall to AIFRAME_CHECK_SEC
	COMMENT 
    COMMENT  Class 201
	COMMENT  In function 'GrappApp' counter_airframe value is less than AIFRAME_CHECK_SEC
    COMMENT
	COMMENT  Class 204
    COMMENT  The function 'GrappApp' calls the function 'ProcessAirframeInfoWords'
	COMMENT
	COMMENT  Class 205
    COMMENT  In function 'GrappApp' Demo_mode_activate is true
	COMMENT
	COMMENT  Class 206
    COMMENT  In function 'GrappApp' Demo_mode_activate is false
	COMMENT
    COMMENT  Class 208
    COMMENT  In Function'GrappApp',Splash_timer is greater than SPLASH_TIME.
	COMMENT
    COMMENT  Class 209
    COMMENT  In Function'GrappApp',Button b10 is true.
	COMMENT
    COMMENT  Class 210
    COMMENT  In Function'GrappApp',Button b11 is true.
	COMMENT
    COMMENT  Class 211
    COMMENT  In Function'GrappApp',Button b12 is true.
	COMMENT
    COMMENT  Class 212
    COMMENT  In Function'GrappApp',Button b13 is true.	
	COMMENT
    COMMENT  Class 213
    COMMENT  In Function'GrappApp',Button b10 is false.
	COMMENT
    COMMENT  Class 214
    COMMENT  In Function'GrappApp',Button b11 is false.
	COMMENT
    COMMENT  Class 215
    COMMENT  In Function'GrappApp',Button b12 is false.
	COMMENT
    COMMENT  Class 216
    COMMENT  In Function'GrappApp',Button b13 is false.		
	COMMENT
    COMMENT  Class 217
    COMMENT  In Function'GrappApp',The function CrcPages is called
	COMMENT
    COMMENT  Class 218
    COMMENT  In Function'GrappInit',The function GlobalExtract is called	
	COMMENT
    COMMENT  Class 219
    COMMENT  In Function'GrappApp',Bitmap_crc_check_bit with index Page_num is equal to FALSE	
	COMMENT
    COMMENT  Class 220
    COMMENT  In Function'GrappApp',Bitmap_crc_check_bit with index Page_num is equal to TRUE	
	COMMENT
    COMMENT  Class 221
    COMMENT  In Function'CarrotGraphInit',Call the function CarrotGraphAllocat with cg_list as its function parameter,
	COMMENT
    COMMENT  Class 222
    COMMENT  In Function'TextInit',Call the function TextAllocatPdi
	COMMENT
    COMMENT  Class 223
    COMMENT  In Function'TextBoxPdiInit',Call the function TextBoxPdiAllocate with cg_list as its function parameter,		
	COMMENT
    COMMENT  Class 224
    COMMENT  In Function'ScaleRead',Call the function ScuRTDGetParam 
	COMMENT
    COMMENT  Class 225
    COMMENT  In Function'ScaleRead',scu_enable of Config_data is TRUE
	COMMENT
    COMMENT  Class 226
    COMMENT  In Function'ScaleRead',scu_enable of Config_data is FALSE  
	COMMENT
    COMMENT  Class 227
    COMMENT  In Function'ScaleRead',Call the function AppExTimerDraw  
	COMMENT
    COMMENT  Class 228
    COMMENT  In Function'ScaleRead',scu_enable of Ex_timer_error is ZERO
	COMMENT
    COMMENT  Class 229
    COMMENT  In Function'ScaleRead',scu_enable of Ex_timer_error is not ZERO   
	COMMENT
    COMMENT  Class 230
    COMMENT  In Function'ScaleRead',Call the function OffsideFuelFlow 
	COMMENT
    COMMENT Invalid Class(es)   
    COMMENT
    COMMENT None
    COMMENT
    COMMENT </ECD>
--------------------------------------------------------------------------------
--
-- STUB DECLARATIONS OF THE TESTED OR INTEGRATED UNITS
--
--------------------------------------------------------------------------------
SIMUL

    DEFINE STUB hdudispfgrapp_c

        #void CasDisplay(); 

        #void CoolTimerReset(void); 

        #void CoolTimerStop(void); 

        #void TextBoxOn(T_STEXTBOXDATA _in *ps_this_box); 

        #void CoolTimerStart(void); 

        #void PageMenu(T_EPAGE_NUM _no back_grnd_page_num)
        #{
        #PTU_e_page_temp=back_grnd_page_num;
        #}

        #T_UINT32 SaveStatusReg(void); 

        #void RestoreStatusReg(T_UINT32 _in U32_critical_sr);

        #void MenuInit(); 

        #void OsTimeDly(T_UWORD _in ticks); 

        #void OffsideSwitchScreen(T_UINT8 _in u8_page_num); 

        #void PageExtract(T_UINT8 _in *address);

        #void TimerInstall( volatile T_TIMER _no *timer)
        #{
        #PTU_count++;
        #if(PTU_count==1)
        #{
        #timer=&PTU_Splash_timer;
        #}
        #else if(PTU_count==2)
        #{
        #timer=&PTU_cool_timer;
        #}
        #} 

        #void TextBoxOff(T_STEXTBOXDATA _in *ps_this_box); 

        #void ExceedExtract(T_UINT8 _in *address);

        #void PdiPageDataInit(T_UINT8 _in page_num);

        #void ForegroundLoadBackground(const T_UINT16 _in *pu16Src);


        #void ForegroundClear(void); 

        #void LCDBackgroundOff(); 

        #void PwmBlink();

        #void NumboxAllocat(T_SNUMBOXDEF _in *psNumBoxDef); 

        #void BargraphAllocat(T_SBARGRAPHDEF _in *psBarGraphDef); 

        #void RoundDialAllocat(T_ROUNDDIALDEF _in *round_dial_def); 
				
		#void CarrotGraphAllocat(T_CARROTGRAPHDEF  _in *carrot_graph_def);
				
		#void TextBoxPdiAllocate(T_STEXTBOXPDIDATA  _in *ps_this_box);		
		
		#void TextAllocatPdi(T_PTEXT  _in *pps_handle_add, T_UINT8  _no *pu8_string, T_UINT16  _in u16_x0, T_UINT16  _in u16_y0, T_ETXALIGN  _in e_tx_align, T_ETXFONT  _in e_tx_font, T_EPENCOLOR  _in e_pen_color, T_ETXV  _in e_txv, T_ETXFLASH  _in e_tx_flash)
		#{
		# pu8_string = &PTU_pu8_string;
		#}
		#
        #void TextDispString(char _no *pc_string[200], T_UINT16 _in u16_x, T_UINT16 _in u16_y, T_ETXFONT _in e_tx_font,
        #  T_EPENCOLOR _in e_pen_color, T_ETXFLASH _in e_tx_flash, T_ETXV _in e_txv, T_ETXALIGN _in e_tx_align)
        #{
        #pc_string=&PTU_pc_string;
        #}

        #T_INT8* BinasByteFormatInfo(void _no *src, T_UINT16 _in format, T_INT8 _no *dest)
        #{
        #PTU_src[PTU_index]=*((T_UINT32 *)src);
        #*dest=PTU_dest[PTU_index];
        #PTU_index++;
        #}

        #void RTDGetParamDdw(T_UINT16 _in a429_tag, T_PARAM_READING _no *ps_dest)
        #{
        #ps_dest = (T_PARAM_READING *)&PTU_parameters[PTU_index1];
        #}

        #void RTDGetParam(T_UINT16 _in a429_tag, T_PARAM_READING _no *ps_dest)
        #{
        #PTU_index1++;
        #if(PTU_index1==1)
        #{
        #ps_dest = (T_PARAM_READING *)&PTU_parameters[PTU_index1];
        #}
        #else 
        #ps_dest = (T_PARAM_READING *)&PTU_parameters_numbox[PTU_index1];
        #}

        #T_CHAR *dummyfunc()
        #{
        --# return (T_CHAR *)&PTU_char[0];
        #}
        
        #void OffsideCoolTimer(T_UINT8 _in cool_timer_state);
        
        #void GlobalSettingsSetEIU(T_EIU eiu);
		
		#void ProcessAirframeInfoWords(void);
		
		#void CrcPages(T_EPAGE_NUM  _in page_count);
		
        #void AppExTimerDraw(void);
		
		#void GlobalExtract(T_UINT8  _in *address);
		
        #void RterrWidget(T_CHAR _no *pc_file, T_INT32 _in s32_line_number, T_CHAR _no *pc_message)
        #{
        #   for(index1 = 0; index1<50;   index1++)
        #   {
        #    PTU_rterr_file[index1]=*(T_CHAR *)pc_file;
        #    pc_file++;
        #    PTU_rterr_message[index1]=*(T_CHAR *)pc_message;
        #    pc_message++;
        #   }
        #}	

		#void ScuRTDGetParam(T_UINT16  _in a429_tag, T_PARAM_READING  _no *ps_dest, T_A429_DATA_TYPE  _no a429_type)	
        #{
        #PTU_index2++;
        #ps_dest = (T_PARAM_READING *)&PTU_Scu_parameters[PTU_index2];
        #a429_type = (T_A429_DATA_TYPE)&PTU_Scu_parameters[PTU_index2];
        #}
		#void OffsideFuelFlow(T_UINT8  _in Fuel_flow_state); 	

		#void MemCpy(void * _in p_dest,  const void * _in p_src, T_UINT16  _in count);		
		
    END DEFINE
    
ELSE_SIMUL

    -- No action defined as of now if the module is not simulated
    
END SIMUL

--------------------------------------------------------------------------------
--
-- ENVIRONMENTS DECLARATIONS
--
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
-- TESTED FILE ENVIRONNEMENT
--------------------------------------------------------------------------------

-- Environment of the file hdudispfgrapp.c

--ENVIRONMENT ENV_hdudispfgrapp_c
--
--   None
--
--END ENVIRONMENT -- ENV_hdudispfgrapp_c
-- 
--USE ENV_hdudispfgrapp_c

--------------------------------------------------------------------------------
--
-- SERVICES DECLARATIONS
--
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
-- Declaration of the service CompareLimit
--------------------------------------------------------------------------------
SERVICE CompareLimit
SERVICE_TYPE extern

-- Tested service parameters declarations
    #T_FLOAT val;
    #T_FLOAT range;
    #T_UINT8 operator;
    
-- By function returned type declaration
    #T_UINT8 ret_CompareLimit;

ENVIRONMENT ENV_CompareLimit
    
    VAR val,                                    init = 0.0,                     ev = init

    VAR range,                                  init = 0.0,                     ev = init

    VAR operator,                               init = 0,                       ev = init

    VAR ret_CompareLimit,                       init = 0,                       ev = init
    
END ENVIRONMENT -- ENV_CompareLimit

USE ENV_CompareLimit

TEST 1
FAMILY nominal
    
    COMMENT  Test Description
    COMMENT  <TD>   
    COMMENT  [hdudispfgrapp-CompareLimit-DB-LLR-001]
    COMMENT  The function 'CompareLimit'sets return value as 1 if val is less than the range and operator is LESS_THAN .
    COMMENT  Equivalence Class 23,27
    COMMENT  </TD> 
    
    ELEMENT
        
        COMMENT INPUT SECTION:
            
            --limit value to be compared
            VAR val,                            init = 9,                       ev = init
            
            --Range to be compared
            VAR range,                          init = 10,                      ev = init
            
            --Operator value
            VAR operator,                       init = LESS_THAN,               ev = init
                
        COMMENT INPUT/OUTPUT SECTION:
                                        
            --None 
            
        COMMENT OUTPUT SECTION:
            
            --Return value of CompareLimit
            VAR ret_CompareLimit,               init = 0,                       ev = 1
                                
        -- Stub Calls:
                                    
        SIMUL
                    
            --None
            
        END SIMUL
        
        -- Calling the Unit Under Test          
        #ret_CompareLimit = CompareLimit(val, range, operator);
        
    END ELEMENT

END TEST -- TEST 1

TEST 2
FAMILY nominal
    
    COMMENT  Test Description
    COMMENT  <TD>   
    COMMENT  [hdudispfgrapp-CompareLimit-DB-LLR-001]
    COMMENT  The function 'CompareLimit'sets return value as 0 if val is equal to the range and operator is LESS_THAN .
    COMMENT  Equivalence Class 24,27
    COMMENT  </TD>
    
    ELEMENT
        
        COMMENT INPUT SECTION:
            
            --limit value to be compared
            VAR val,                                        init = 10,                                  ev = init

            --Range to be compared
            VAR range,                                      init = 10,                                  ev = init

            --Operator value
            VAR operator,                                   init = LESS_THAN,                           ev = init

        COMMENT INPUT/OUTPUT SECTION:
                                        
            --None 
            
        COMMENT OUTPUT SECTION:
                                
            --Return value of CompareLimit
            VAR ret_CompareLimit,                           init = 1,                                   ev = 0

        -- Stub Calls:
                                    
        SIMUL
                    
            --None
            
        END SIMUL
        
        -- Calling the Unit Under Test          
        #ret_CompareLimit = CompareLimit(val, range, operator);
        
    END ELEMENT

END TEST -- TEST 2

TEST 3
FAMILY nominal
    
    COMMENT  Test Description
    COMMENT  <TD>   
    COMMENT  [hdudispfgrapp-CompareLimit-DB-LLR-001]
    COMMENT  The function 'CompareLimit'sets return value as 0 if val is greater than  range and operator is LESS_THAN .
    COMMENT  Equivalence Class 25,27
    COMMENT  </TD>
    
    ELEMENT
        
        COMMENT INPUT SECTION:
            
            --limit value to be compared
            VAR val,                                            init = 11,                              ev = init

            --Range to be compared
            VAR range,                                          init = 10,                              ev = init

            --Operator value
            VAR operator,                                       init = LESS_THAN,                       ev = init
                
        COMMENT INPUT/OUTPUT SECTION:
                                        
            --None 
            
        COMMENT OUTPUT SECTION:
                                
            --Return value of CompareLimit
            VAR ret_CompareLimit,                               init = 1,                               ev = 0
                                
        -- Stub Calls:
                                    
        SIMUL
                    
            --None
            
        END SIMUL
        
        -- Calling the Unit Under Test          
        #ret_CompareLimit = CompareLimit(val, range, operator);
        
    END ELEMENT

END TEST -- TEST 3

TEST 4
FAMILY nominal
    
    COMMENT  Test Description
    COMMENT  <TD>   
    COMMENT  [hdudispfgrapp-CompareLimit-DB-LLR-002]
    COMMENT  The function 'CompareLimit'sets return value as 1 if val is less than the range and operator is LESS_THAN_EQUAL .
    COMMENT  Equivalence Class 23,28
    COMMENT  </TD>
    
    ELEMENT
        
        COMMENT INPUT SECTION:
            
            --limit value to be compared
            VAR val,                                        init = 9,                                   ev = init

            --Range to be compared
            VAR range,                                      init = 10,                                  ev = init

            --Operator value
            VAR operator,                                   init = LESS_THAN_EQUAL,                     ev = init

        COMMENT INPUT/OUTPUT SECTION:
                                        
            --None 
            
        COMMENT OUTPUT SECTION:
                                
            --Return value of CompareLimit
            VAR ret_CompareLimit,                           init = 0,                                   ev = 1
                                
        -- Stub Calls:
                                    
        SIMUL
                    
            --None
            
        END SIMUL
        
        -- Calling the Unit Under Test          
        #ret_CompareLimit = CompareLimit(val, range, operator);
        
    END ELEMENT

END TEST -- TEST 4

TEST 5
FAMILY nominal
    
    COMMENT  Test Description
    COMMENT  <TD>   
    COMMENT  [hdudispfgrapp-CompareLimit-DB-LLR-002]
    COMMENT  The function 'CompareLimit'sets return value as 1 if val is equal to the range and operator is LESS_THAN_EQUAL .
    COMMENT  Equivalence Class 24,28
    COMMENT  </TD>
    
    ELEMENT
        
        COMMENT INPUT SECTION:
            
            --limit value to be compared
            VAR val,                                    init = 10,                                  ev = init

            --Range to be compared
            VAR range,                                  init = 10,                                  ev = init

            --Operator value
            VAR operator,                               init = LESS_THAN_EQUAL,                     ev = init
                
        COMMENT INPUT/OUTPUT SECTION:
                                        
            --None 
            
        COMMENT OUTPUT SECTION:
                                
            --Return value of CompareLimit
            VAR ret_CompareLimit,                       init = 0,                                   ev = 1
                                
        -- Stub Calls:
                                    
        SIMUL
                    
            --None
            
        END SIMUL
        
        -- Calling the Unit Under Test          
        #ret_CompareLimit = CompareLimit(val, range, operator);
        
    END ELEMENT

END TEST -- TEST 5

TEST 6
FAMILY nominal
    
    COMMENT  Test Description
    COMMENT  <TD>   
    COMMENT  [hdudispfgrapp-CompareLimit-DB-LLR-002]
    COMMENT  The function 'CompareLimit'sets return value as 0 if val is greater than  range and operator is LESS_THAN_EQUAL .
    COMMENT  Equivalence Class 25,28
    COMMENT  </TD>
    
    ELEMENT
        
        COMMENT INPUT SECTION:
            
            --limit value to be compared
            VAR val,                                    init = 11,                                  ev = init

            --Range to be compared
            VAR range,                                  init = 10,                                  ev = init

            --Operator value
            VAR operator,                               init = LESS_THAN_EQUAL,                     ev = init

        COMMENT INPUT/OUTPUT SECTION:
                                        
            --None 
            
        COMMENT OUTPUT SECTION:
                                
            --Return value of CompareLimit
            VAR ret_CompareLimit,                       init = 1,                                   ev = 0

        -- Stub Calls:
                                    
        SIMUL
                    
            --None
            
        END SIMUL
        
        -- Calling the Unit Under Test          
        #ret_CompareLimit = CompareLimit(val, range, operator);
        
    END ELEMENT

END TEST -- TEST 6

TEST 7
FAMILY nominal
    
    COMMENT  Test Description
    COMMENT  <TD>   
    COMMENT  [hdudispfgrapp-CompareLimit-DB-LLR-003]
    COMMENT  The function 'CompareLimit'sets return value as 0 if val is less than the range and operator is EQUAL .
    COMMENT  Equivalence Class 26,29
    COMMENT  </TD>
    
    ELEMENT
        
        COMMENT INPUT SECTION:
            
            --limit value to be compared
            VAR val,                                    init = 9,                               ev = init

            --Range to be compared
            VAR range,                                  init = 10,                              ev = init

            --Operator value
            VAR operator,                               init = EQUAL,                           ev = init

        COMMENT INPUT/OUTPUT SECTION:
                                        
            --None 
            
        COMMENT OUTPUT SECTION:
                                
            --Return value of CompareLimit
            VAR ret_CompareLimit,                       init = 1,                               ev = 0
                                
        -- Stub Calls:
                                    
        SIMUL
                    
            --None
            
        END SIMUL
        
        -- Calling the Unit Under Test          
        #ret_CompareLimit = CompareLimit(val, range, operator);
        
    END ELEMENT

END TEST -- TEST 7

TEST 8
FAMILY nominal
    
    COMMENT  Test Description
    COMMENT  <TD>   
    COMMENT  [hdudispfgrapp-CompareLimit-DB-LLR-003]
    COMMENT  The function 'CompareLimit'sets return value as 1 if val is equal to the range and operator is EQUAL .
    COMMENT  Equivalence Class 24,29
    COMMENT  </TD>
    
    ELEMENT
        
        COMMENT INPUT SECTION:
            
            --limit value to be compared
            VAR val,                                        init = 10,                              ev = init

            --Range to be compared
            VAR range,                                      init = 10,                              ev = init

            --Operator value
            VAR operator,                                   init = EQUAL,                           ev = init

        COMMENT INPUT/OUTPUT SECTION:
                                        
            --None 
                                
        COMMENT OUTPUT SECTION:
                                
            --Return value of CompareLimit
            VAR ret_CompareLimit,                           init = 0,                               ev = 1
                                
        -- Stub Calls:
                                    
        SIMUL
                    
            --None
            
        END SIMUL
        
        -- Calling the Unit Under Test          
        #ret_CompareLimit = CompareLimit(val, range, operator);
        
    END ELEMENT

END TEST -- TEST 8

TEST 9
FAMILY nominal
    
    COMMENT  Test Description
    COMMENT  <TD>   
    COMMENT  [hdudispfgrapp-CompareLimit-DB-LLR-003]
    COMMENT  The function 'CompareLimit'sets return value as 0 if val is greater than  range and operator is EQUAL .
    COMMENT  Equivalence Class 25,29
    COMMENT  </TD>
    
    ELEMENT
        
        COMMENT INPUT SECTION:
            
            --limit value to be compared
            VAR val,                                            init = 11,                      ev = init

            --Range to be compared
            VAR range,                                          init = 10,                      ev = init

            --Operator value
            VAR operator,                                       init = EQUAL,                   ev = init
                
        COMMENT INPUT/OUTPUT SECTION:
                                        
            --None 
                              
        COMMENT OUTPUT SECTION:
                                
            --Return value of CompareLimit
            VAR ret_CompareLimit,                               init = 1,                       ev = 0

        -- Stub Calls:
                                    
        SIMUL
                    
            --None
            
        END SIMUL
        
        -- Calling the Unit Under Test          
        #ret_CompareLimit = CompareLimit(val, range, operator);
        
    END ELEMENT

END TEST -- TEST 9

TEST 10
FAMILY nominal
    
    COMMENT  Test Description
    COMMENT  <TD>   
    COMMENT  [hdudispfgrapp-CompareLimit-DB-LLR-004]
    COMMENT  The function 'CompareLimit'sets return value as 0 if val is less than the range and operator is GREATER_THAN_EQUAL .
    COMMENT  Equivalence Class 23,30
    COMMENT  </TD>
    
    ELEMENT
        
        COMMENT INPUT SECTION:
            
            --limit value to be compared
            VAR val,                                                    init = 9,                               ev = init

            --Range to be compared
            VAR range,                                                  init = 10,                              ev = init

            --Operator value
            VAR operator,                                               init = GREATER_THAN_EQUAL,              ev = init
                
        COMMENT INPUT/OUTPUT SECTION:
                                        
            --None 
                                
        COMMENT OUTPUT SECTION:
                                
            --Return value of CompareLimit
            VAR ret_CompareLimit,                                       init = 1,                                   ev = 0
                                
        -- Stub Calls:
                                    
        SIMUL
                    
            --None
            
        END SIMUL
        
        -- Calling the Unit Under Test          
        #ret_CompareLimit = CompareLimit(val, range, operator);
        
    END ELEMENT

END TEST -- TEST 10

TEST 11
FAMILY nominal
    
    COMMENT  Test Description
    COMMENT  <TD>   
    COMMENT  [hdudispfgrapp-CompareLimit-DB-LLR-004]
    COMMENT  The function 'CompareLimit'sets return value as 1 if val is equal to the range and operator is GREATER_THAN_EQUAL .
    COMMENT  Equivalence Class 24,30
    COMMENT  </TD>
    
    ELEMENT
        
        COMMENT INPUT SECTION:
            
            --limit value to be compared
            VAR val,                                        init = 10,                                  ev = init

            --Range to be compared
            VAR range,                                      init = 10,                                  ev = init

            --Operator value
            VAR operator,                                   init = GREATER_THAN_EQUAL,                  ev = init
                
        COMMENT INPUT/OUTPUT SECTION:
                                        
            --None 
                                
        COMMENT OUTPUT SECTION:
                                
            --Return value of CompareLimit
            VAR ret_CompareLimit,                           init = 0,                                   ev = 1
                                
        -- Stub Calls:
                                    
        SIMUL
                    
            --None
            
        END SIMUL
        
        -- Calling the Unit Under Test          
        #ret_CompareLimit = CompareLimit(val, range, operator);
        
    END ELEMENT

END TEST -- TEST 11

TEST 12
FAMILY nominal
    
    COMMENT  Test Description
    COMMENT  <TD>   
    COMMENT  [hdudispfgrapp-CompareLimit-DB-LLR-004]
    COMMENT  The function 'CompareLimit'sets return value as 1 if val is greater than  range and operator is GREATER_THAN_EQUAL .
    COMMENT  Equivalence Class 25,30
    COMMENT  </TD>
    
    ELEMENT
        
        COMMENT INPUT SECTION:
            
            --limit value to be compared
            VAR val,                                                init = 11,                          ev = init

            --Range to be compared
            VAR range,                                              init = 10,                          ev = init

            --Operator value
            VAR operator,                                           init = GREATER_THAN_EQUAL,          ev = init

        COMMENT INPUT/OUTPUT SECTION:

            --None 

        COMMENT OUTPUT SECTION:

            --Return value of CompareLimit
            VAR ret_CompareLimit,                                   init = 0,                           ev = 1

        -- Stub Calls:
                                    
        SIMUL
                    
            --None
            
        END SIMUL
        
        -- Calling the Unit Under Test          
        #ret_CompareLimit = CompareLimit(val, range, operator);
        
    END ELEMENT

END TEST -- TEST 12

TEST 13
FAMILY nominal
    
    COMMENT  Test Description
    COMMENT  <TD>   
    COMMENT  [hdudispfgrapp-CompareLimit-DB-LLR-005]
    COMMENT  The function 'CompareLimit'sets return value as 0 if val is less than the range and operator is GREATER_THAN .
    COMMENT  Equivalence Class 23,31
    COMMENT  </TD>
    
    ELEMENT
        
        COMMENT INPUT SECTION:
            
            --limit value to be compared
            VAR val,                                            init = 9,                               ev = init

            --Range to be compared
            VAR range,                                          init = 10,                              ev = init

            --Operator value
            VAR operator,                                       init = GREATER_THAN,                    ev = init

        COMMENT INPUT/OUTPUT SECTION:

            --None 

        COMMENT OUTPUT SECTION:

            --Return value of CompareLimit
            VAR ret_CompareLimit,                               init = 1,                               ev = 0
                                
        -- Stub Calls:
                                    
        SIMUL
                    
            --None
            
        END SIMUL
        
        -- Calling the Unit Under Test          
        #ret_CompareLimit = CompareLimit(val, range, operator);
        
    END ELEMENT

END TEST -- TEST 13

TEST 14
FAMILY nominal
    
    COMMENT  Test Description
    COMMENT  <TD>   
    COMMENT  [hdudispfgrapp-CompareLimit-DB-LLR-005]
    COMMENT  The function 'CompareLimit'sets return value as 0 if val is equal to the range and operator is GREATER_THAN .
    COMMENT  Equivalence Class 24,31
    COMMENT  </TD>
    
    ELEMENT
        
        COMMENT INPUT SECTION:
            
            --limit value to be compared
            VAR val,                                            init = 10,                              ev = init

            --Range to be compared
            VAR range,                                          init = 10,                              ev = init

            --Operator value
            VAR operator,                                       init = GREATER_THAN,                    ev = init

        COMMENT INPUT/OUTPUT SECTION:

            --None 

        COMMENT OUTPUT SECTION:

            --Return value of CompareLimit
            VAR ret_CompareLimit,                               init = 1,                               ev = 0
                                
        -- Stub Calls:
                                    
        SIMUL
                    
            --None
            
        END SIMUL
        
        -- Calling the Unit Under Test          
        #ret_CompareLimit = CompareLimit(val, range, operator);
        
    END ELEMENT

END TEST -- TEST 14

TEST 15
FAMILY nominal
    
    COMMENT  Test Description
    COMMENT  <TD>   
    COMMENT  [hdudispfgrapp-CompareLimit-DB-LLR-005]
    COMMENT  The function 'CompareLimit'sets return value as 1 if val is greater than  range and operator is GREATER_THAN .
    COMMENT  Equivalence Class 25,31
    COMMENT  </TD>
    
    ELEMENT
        
        COMMENT INPUT SECTION:
            
            --limit value to be compared
            VAR val,                                            init = 11,                              ev = init

            --Range to be compared
            VAR range,                                          init = 10,                              ev = init

            --Operator value
            VAR operator,                                       init = GREATER_THAN,                    ev = init

        COMMENT INPUT/OUTPUT SECTION:

            --None 

        COMMENT OUTPUT SECTION:

            --Return value of CompareLimit
            VAR ret_CompareLimit,                               init = 0,                               ev = 1
                                
        -- Stub Calls:
                                    
        SIMUL
                    
            --None
            
        END SIMUL
        
        -- Calling the Unit Under Test          
        #ret_CompareLimit = CompareLimit(val, range, operator);
        
    END ELEMENT

END TEST -- TEST 15

TEST 16
FAMILY nominal
    
    COMMENT  Test Description
    COMMENT  <TD>   
    COMMENT  [hdudispfgrapp-CompareLimit-DB-LLR-006]
    COMMENT  The function 'CompareLimit'sets return value as 1 if val is less than the range and operator is NOT_EQUAL .
    COMMENT  Equivalence Class 23,32
    COMMENT  </TD>
    
    ELEMENT
        
        COMMENT INPUT SECTION:
            
            --limit value to be compared
            VAR val,                                        init = 9,                               ev = init

            --Range to be compared
            VAR range,                                      init = 10,                              ev = init

            --Operator value
            VAR operator,                                   init = NOT_EQUAL,                       ev = init

        COMMENT INPUT/OUTPUT SECTION:

            --None 

        COMMENT OUTPUT SECTION:

            --Return value of CompareLimit
            VAR ret_CompareLimit,                           init = 0,                               ev = 1

        -- Stub Calls:
                                    
        SIMUL
                    
            --None
            
        END SIMUL
        
        -- Calling the Unit Under Test          
        #ret_CompareLimit = CompareLimit(val, range, operator);
        
    END ELEMENT

END TEST -- TEST 16

TEST 17
FAMILY nominal
    
    COMMENT  Test Description
    COMMENT  <TD>   
    COMMENT  [hdudispfgrapp-CompareLimit-DB-LLR-007]
    COMMENT  The function 'CompareLimit'sets return value as 0 if operator is other than LESS_THAN, LESS_THAN_EQUAL,
    COMMENT  EQUAL, GREATER_THAN_EQUAL, GREATER_THAN and NOT_EQUAL.
    COMMENT  Equivalence Class 33
    COMMENT  </TD>
    
    ELEMENT
        
        COMMENT INPUT SECTION:
            
            --Operator value
            VAR operator,                               init = INVALID,                 ev = init
                
        COMMENT INPUT/OUTPUT SECTION:
                                        
            --None 
                         
        COMMENT OUTPUT SECTION:
                                
            --Return value of CompareLimit
            VAR ret_CompareLimit,                       init = 1,                       ev = 0
                                
        -- Stub Calls:
                                    
        SIMUL
                    
            --None
            
        END SIMUL
        
        -- Calling the Unit Under Test          
        #ret_CompareLimit = CompareLimit(val, range, operator);
        
    END ELEMENT

END TEST -- TEST 17

TEST 18
FAMILY nominal
    
    COMMENT  Test Description
    COMMENT  <TD>   
    COMMENT  [hdudispfgrapp-CompareLimit-DB-LLR-006]
    COMMENT  The function 'CompareLimit'sets return value as 0 if val is equal to range and operator is NOT_EQUAL
    COMMENT  Equivalence Class 24,32
    COMMENT  </TD>
    
    ELEMENT
        
        COMMENT INPUT SECTION:
            
            --limit value to be compared
            VAR val,                                        init = 9,               ev = init

            --Range to be compared
            VAR range,                                      init = 9,               ev = init

            --Operator value
            VAR operator,                                   init = NOT_EQUAL,       ev = init
                
        COMMENT INPUT/OUTPUT SECTION:
                                        
            --None 
                                
        COMMENT OUTPUT SECTION:
                                
            --Return value of CompareLimit
            VAR ret_CompareLimit,                           init = 1,               ev = 0
                                
        -- Stub Calls:
                                    
        SIMUL
                    
            --None
            
        END SIMUL
        
        -- Calling the Unit Under Test          
        #ret_CompareLimit = CompareLimit(val, range, operator);
        
    END ELEMENT

END TEST -- TEST 18

END SERVICE -- CompareLimit

--------------------------------------------------------------------------------
-- Declaration of the service GrappSetPage
--------------------------------------------------------------------------------
SERVICE GrappSetPage
SERVICE_TYPE extern

-- Tested service parameters declarations
#T_UINT8 u8_set_page;

ENVIRONMENT ENV_GrappSetPage

    VAR u8_set_page,                                            init = 0,                       ev = init
    
END ENVIRONMENT -- ENV_GrappSetPage

USE ENV_GrappSetPage

TEST 1
FAMILY nominal
        
    COMMENT  Test Description
    COMMENT  <TD>   
    COMMENT  [hdudispfgrapp-GrappSetPage-DB-LLR-001]
    COMMENT  The function 'GrappSetPage' calls the macro OS_ENTER_CRITICAL.
    COMMENT  Equivalence Class 43
    COMMENT 
    COMMENT  [hdudispfgrapp-GrappSetPage-DB-LLR-002]
    COMMENT  The function 'GrappSetPage'sets the new page to TRUE and set the new page number to u8_set_page.
    COMMENT  Setting the new page number to EPAGE0
    COMMENT  Equivalence Class None
    COMMENT  
    COMMENT  [hdudispfgrapp-GrappSetPage-DB-LLR-003]
    COMMENT  The function 'GrappSetPage' calls the macro OS_EXIT_CRITICAL
    COMMENT  Equivalence Class 200
    COMMENT  </TD>

    ELEMENT

        COMMENT INPUT SECTION:

            --Input page number
            VAR u8_set_page,                                    init = 0,                       ev = init

        COMMENT INPUT/OUTPUT SECTION:

            --None

        COMMENT OUTPUT SECTION:

            --None

        -- Stub Calls:
        SIMUL

            --Saves the interrupt mask register
            STUB SaveStatusReg()32

            --Restores the interrupt disable mask to its original value
            STUB RestoreStatusReg(32)


        END SIMUL       
        -- Calling the Unit Under Test  
        #GrappSetPage(u8_set_page);

    END ELEMENT
    
END TEST -- TEST 1
    
TEST 2
FAMILY nominal
        
    COMMENT  Test Description
    COMMENT  <TD>   
    COMMENT  [hdudispfgrapp-GrappSetPage-DB-LLR-002]
    COMMENT  The function 'GrappSetPage'sets the new page to TRUE and set the new page number to u8_set_page.
    COMMENT  Setting the new page number to EPAGE1
    COMMENT  Equivalence Class None
    COMMENT  </TD>

    ELEMENT

        COMMENT INPUT SECTION:

            --Input page number
            VAR u8_set_page,                init = 1,               ev = init

        COMMENT INPUT/OUTPUT SECTION:

            --None

        COMMENT OUTPUT SECTION:

            --None

        -- Stub Calls:
        SIMUL

            --Saves the interrupt mask register
            STUB SaveStatusReg()32

            --Restores the interrupt disable mask to its original value
            STUB RestoreStatusReg(32)


        END SIMUL       
        -- Calling the Unit Under Test  
        #GrappSetPage(u8_set_page);

     END ELEMENT

END TEST -- TEST 2

TEST 3
FAMILY nominal

    COMMENT  Test Description
    COMMENT  <TD>   
    COMMENT  [hdudispfgrapp-GrappSetPage-DB-LLR-002]
    COMMENT  The function 'GrappSetPage'sets the new page to TRUE and set the new page number to u8_set_page.
    COMMENT  Setting the new page number to EPAGE2
    COMMENT  Equivalence Class None
    COMMENT  </TD>

    ELEMENT

        COMMENT INPUT SECTION:

            --Input page number
            VAR u8_set_page,                init = 2,               ev = init

        COMMENT INPUT/OUTPUT SECTION:

            --None

        COMMENT OUTPUT SECTION:

            --None

        -- Stub Calls:
        SIMUL

            --Saves the interrupt mask register
            STUB SaveStatusReg()32

            --Restores the interrupt disable mask to its original value
            STUB RestoreStatusReg(32)


        END SIMUL       
        -- Calling the Unit Under Test  
        #GrappSetPage(u8_set_page);

     END ELEMENT

END TEST -- TEST 3

TEST 4
FAMILY nominal

    COMMENT  Test Description
    COMMENT  <TD>   
    COMMENT  [hdudispfgrapp-GrappSetPage-DB-LLR-002]
    COMMENT  The function 'GrappSetPage'sets the new page to TRUE and set the new page number to u8_set_page.
    COMMENT  Setting the new page number to EPAGEMAX
    COMMENT  Equivalence Class None
    COMMENT  </TD>

    ELEMENT

        COMMENT INPUT SECTION:

            --Input page number
            VAR u8_set_page,                init = EPAGEMAX,                ev = init

        COMMENT INPUT/OUTPUT SECTION:

            --None

        COMMENT OUTPUT SECTION:

            --None

        -- Stub Calls:
        SIMUL

            --Saves the interrupt mask register
            STUB SaveStatusReg()32

            --Restores the interrupt disable mask to its original value
            STUB RestoreStatusReg(32)


        END SIMUL       
        -- Calling the Unit Under Test  
        #GrappSetPage(u8_set_page);

     END ELEMENT

END TEST -- TEST 4

TEST 5
FAMILY nominal

    COMMENT  Test Description
    COMMENT  <TD>   
    COMMENT  [hdudispfgrapp-GrappSetPage-DB-LLR-002]
    COMMENT  The function 'GrappSetPage'sets the new page to TRUE and set the new page number to u8_set_page.
    COMMENT  Setting the new page number to EPAGEINVALID
    COMMENT  Equivalence Class None
    COMMENT  </TD>

    ELEMENT

        COMMENT INPUT SECTION:

            --Input page number
            VAR u8_set_page,                init = 255,             ev = init

        COMMENT INPUT/OUTPUT SECTION:

            --None

        COMMENT OUTPUT SECTION:

            --None

        -- Stub Calls:
        SIMUL

            --Saves the interrupt mask register
            STUB SaveStatusReg()32

            --Restores the interrupt disable mask to its original value
            STUB RestoreStatusReg(32)


        END SIMUL       
        -- Calling the Unit Under Test  
        #GrappSetPage(u8_set_page);

     END ELEMENT

END TEST -- TEST 5

END SERVICE -- GrappSetPage


--------------------------------------------------------------------------------
-- Declaration of the service RoundDialsInit
--------------------------------------------------------------------------------
SERVICE RoundDialsInit
SERVICE_TYPE extern

-- Tested service parameters declarations
#T_ROUNDDIALDEF rd_list[5];

TEST 1
FAMILY nominal

    COMMENT  Test Description
    COMMENT  <TD>   
    COMMENT  [hdudispfgrapp-RoundDialsInit-DB-LLR-001]
    COMMENT  The function'RoundDialsInit' loops for 1 time and does the following till counter is less than Rd_cnt.
    COMMENT  1.Increment the counter value.
    COMMENT  2.Call the function RoundDialAllocat with rd_list as its function parameter.
    COMMENT  3.Increment rd_list by 1.
    COMMENT  Equivalence Class 35
    COMMENT  </TD>
    
    ELEMENT
    
        COMMENT INPUT SECTION:
            
            --Counter used to loop
            VAR Rd_cnt,                             init = 1,                   ev = init           
            
        COMMENT INPUT/OUTPUT SECTION:
            --None  
            
        COMMENT OUTPUT SECTION:
            --None
            
        -- Stub Calls:
        SIMUL
            
            --Allocate a single round dial
            STUB RoundDialAllocat (&rd_list)
            
        END SIMUL 
        
        -- Calling the Unit Under Test  
        #RoundDialsInit(&rd_list[0]);
    END ELEMENT

END TEST -- TEST 1

TEST 2
FAMILY nominal

    COMMENT  Test Description
    COMMENT  <TD>   
    COMMENT  [hdudispfgrapp-RoundDialsInit-DB-LLR-001]
    COMMENT  The function'RoundDialsInit' loops for 2 times and does the following till counter is less than Rd_cnt.
    COMMENT  1.Increment the counter value.
    COMMENT  2.Call the function RoundDialAllocat with rd_list as its function parameter.
    COMMENT  3.Increment rd_list by 1.
    COMMENT  Equivalence Class 35
    COMMENT  </TD>
    
    ELEMENT
    
        COMMENT INPUT SECTION:
            
            --Counter used to loop
            VAR Rd_cnt,                             init = 2,                   ev = init
                        
        COMMENT INPUT/OUTPUT SECTION:
            --None  
            
        COMMENT OUTPUT SECTION:
            --None
            
        -- Stub Calls:
        SIMUL
            
            --Allocate a single round dial
            STUB RoundDialAllocat (&rd_list[0])
            STUB RoundDialAllocat (&rd_list[1])
            
        END SIMUL 
        
        -- Calling the Unit Under Test  
        #RoundDialsInit(&rd_list[0]);
        
END ELEMENT

END TEST -- TEST 2

TEST 3
FAMILY nominal

    COMMENT  Test Description
    COMMENT  <TD>   
    COMMENT  [hdudispfgrapp-RoundDialsInit-DB-LLR-001]
    COMMENT  The function'RoundDialsInit' does nothing when counter is equal to 0.
    COMMENT  Equivalence Class 35
    COMMENT  </TD>
    
    ELEMENT
    
        COMMENT INPUT SECTION:
            
            --Counter used to loop
            VAR Rd_cnt,                             init = 0,                   ev = init
                        
        COMMENT INPUT/OUTPUT SECTION:
            --None  
            
        COMMENT OUTPUT SECTION:
            --None
            
        -- Stub Calls:
        SIMUL
            
            --None
            
        END SIMUL 
        
        -- Calling the Unit Under Test  
        #RoundDialsInit(&rd_list[0]);
        
    END ELEMENT

END TEST -- TEST 3

END SERVICE -- RoundDialsInit


--------------------------------------------------------------------------------
-- Declaration of the service NumberBoxInit
--------------------------------------------------------------------------------
SERVICE NumberBoxInit
SERVICE_TYPE extern

-- Tested service parameters declarations
#T_SNUMBOXDEF nb_list[5];

TEST 1
FAMILY nominal

    COMMENT  Test Description
    COMMENT  <TD>   
    COMMENT  [hdudispfgrapp-NumberBoxInit-DB-LLR-001]
    COMMENT  The function'NumberBoxInit' loops for 1 time and does the following till counter is less than Nb_cnt.
    COMMENT  1.Increment the counter value.
    COMMENT  2.Call the function NumboxAllocat with nb_list as its function parameter.
    COMMENT  3.Increment nb_list by 1.
    COMMENT  Equivalence Class 36
    COMMENT  </TD>
    
    ELEMENT
    
        COMMENT INPUT SECTION:
            
            --Counter used to loop
            VAR Nb_cnt,                             init = 1,                   ev = init
                        
        COMMENT INPUT/OUTPUT SECTION:
            --None  
            
        COMMENT OUTPUT SECTION:
            --None
            
        -- Stub Calls:
        SIMUL
            
            --Allocates number box structure
            STUB NumboxAllocat(&nb_list[0])
            
        
        END SIMUL 
        
        -- Calling the Unit Under Test  
        #NumberBoxInit(&nb_list[0]);
    END ELEMENT

END TEST -- TEST 1

TEST 2
FAMILY nominal

    COMMENT  Test Description
    COMMENT  <TD>   
    COMMENT  [hdudispfgrapp-NumberBoxInit-DB-LLR-001]
    COMMENT  The function'NumberBoxInit' loops for 2 times and does the following till counter is less than Nb_cnt.
    COMMENT  1.Increment the counter value.
    COMMENT  2.Call the function NumboxAllocat with nb_list as its function parameter.
    COMMENT  3.Increment nb_list by 1.
    COMMENT  Equivalence Class 36
    COMMENT  </TD>
    
    ELEMENT
    
        COMMENT INPUT SECTION:
            
            --Counter used to loop
            VAR Nb_cnt,                             init = 2,                   ev = init
                        
        COMMENT INPUT/OUTPUT SECTION:
            --None  
            
        COMMENT OUTPUT SECTION:
            --None
            
        -- Stub Calls:
        SIMUL
            
            --Allocates number box structure
            STUB NumboxAllocat(&nb_list[0])
            STUB NumboxAllocat(&nb_list[1])
        
        END SIMUL 
        
        -- Calling the Unit Under Test  
        #NumberBoxInit(&nb_list[0]);
    END ELEMENT

END TEST -- TEST 2

TEST 3
FAMILY nominal

    COMMENT  Test Description
    COMMENT  <TD>   
    COMMENT  [hdudispfgrapp-NumberBoxInit-DB-LLR-001]
    COMMENT  The function'NumberBoxInit' loops for 0 times and does nothing when Nb_cnt is equal to zero.
    COMMENT  Equivalence Class 36
    COMMENT  </TD>
    
    ELEMENT
    
        COMMENT INPUT SECTION:
            
            --Counter used to loop
            VAR Nb_cnt,                             init = 0,                   ev = init
                        
        COMMENT INPUT/OUTPUT SECTION:
            --None  
            
        COMMENT OUTPUT SECTION:
            --None
            
        -- Stub Calls:
        SIMUL
            
            --None
        
        END SIMUL 
        
        -- Calling the Unit Under Test  
        #NumberBoxInit(&nb_list[0]);
        
    END ELEMENT

END TEST -- TEST 3

END SERVICE -- NumberBoxInit
--------------------------------------------------------------------------------
-- Declaration of the service ScaleRead
--------------------------------------------------------------------------------
SERVICE ScaleRead
SERVICE_TYPE extern

TEST 1
FAMILY nominal

    COMMENT  Test Description
    COMMENT  <TD>
    COMMENT  [hdudispfgrapp-ScaleRead-DB-LLR-001]
    COMMENT  The function 'ScaleRead' loops for 2 times  from 1 to ParametersPort1_label_count and does the following,
    COMMENT  1)call the 'RTDGetParam' with loop index and reference to reading of Parameters with loop index as
    COMMENT  index as parameters and calls the 'RTDGetParam' with loop index and reference to reading of 
    COMMENT  Parameters_numbox with loop index as index as parameters  if type of Parameters with loop index as
    COMMENT  index is equal to BNR
    COMMENT  2)call the 'RTDGetParamDdw' with loop index and reference to reading of Parameters with loop index 
    COMMENT  as index as parameters when type of Parameters with loop index as index  is not equal to BNR.
    COMMENT  3)The function loop from 1 to Port1_label_count and do the following,
    COMMENT    1)Function loop from again ZERO to TWO and call the function ScuRTDGetParam 
    COMMENT    with parameter second loop index, reference to reading of Scu_parameters second loop index, 
    COMMENT    reference to type of Scu_parameters second loop index when scu_enable of Config_data is
    COMMENT  TRUE
    COMMENT  Equivalence class 19,20,21,22,224,225
    COMMENT  </TD>
    
    ELEMENT
    
        COMMENT INPUT SECTION:
                
            --data read from Parameters[0]
            VAR Port1_label_count,                  init = 2,           ev = init
			
            VAR Config_data.scu_enable,             init = TRUE,           ev = init

            --type of the parameter
            VAR Parameters[1].type,                 init = BNR,         ev = init

            --data read from Parameters[2]
            VAR PTU_parameters[1].reading,          init = NCD,         ev = init
            
            --data read from Parameters_numbox[1]
            VAR PTU_parameters_numbox[1].reading,   init = NCD,         ev = init
            
            --type of the parameter
            VAR Parameters[2].type,                 init = BCD,         ev = init
            
            --data read from Parameters[2]
            VAR PTU_parameters[3].reading,          init = NCD,         ev = init
			
			VAR Parameters_reading[1],					init = Parameters[1],		ev = init
			
			VAR Parameters_reading[2],					init = Parameters[2],		ev = init
			
			VAR PTU_Scu_parameters[0].reading,					init = NCD,		ev = init
			
			VAR PTU_Scu_parameters[1].reading,					init = NCD,		ev = init
			
			VAR PTU_Scu_parameters[2].reading,					init = NCD,		ev = init
  
			VAR PTU_Scu_parameters[0].type,						init = BCD,		ev = init
			
			VAR PTU_Scu_parameters[1].type,						init = BCD,		ev = init
			
			VAR PTU_Scu_parameters[2].type,						init = BCD,		ev = init
  
        COMMENT OUTPUT SECTION:
            
            --index used to call RTDGetParam
            VAR PTU_index1,                         init = 0,           ev = 2  
			
            VAR PTU_index2,                         init = 0,           ev = 6
                                    
        COMMENT INPUT/OUTPUT SECTION:
                                    
            --None 
                                    
        -- Stub Calls:
                                        
        SIMUL
            
            --reads the message from RTD 
            STUB RTDGetParam(1)
            STUB RTDGetParam(1)
            
            --reads the discrete word
            STUB RTDGetParamDdw(2)
			
            STUB ScuRTDGetParam(0)
            STUB ScuRTDGetParam(1)
            STUB ScuRTDGetParam(2)
            STUB ScuRTDGetParam(0)
            STUB ScuRTDGetParam(1)
            STUB ScuRTDGetParam(2)			

        END SIMUL
                                    
        -- Calling the Unit Under Test
        #ScaleRead();
    END ELEMENT

END TEST -- TEST 1


TEST 2
FAMILY nominal

    COMMENT  Test Description
    COMMENT  <TD>
    COMMENT  [hdudispfgrapp-ScaleRead-DB-LLR-001]
    COMMENT  The function 'ScaleRead' loops for 1 time and does the following,
    COMMENT  1)calls the 'RTDGetParamDdw' with loop index and reference to reading of Parameters with loop index 
    COMMENT  as index as parameters when type of Parameters with loop index as index  is not equal to BNR.
    COMMENT  Equivalence class 20,22,226
    COMMENT  </TD>
    
    ELEMENT
    
        COMMENT INPUT SECTION:
                
            --data read from Parameters[0]
            VAR Port1_label_count,                      init = 1,                   ev = init
			
            VAR Config_data.scu_enable,             	init = FALSE,           ev = init			

            --type of the parameter
            VAR Parameters[1].type,                     init = BCD,                 ev = init

            --data read from Parameters[2]
            VAR PTU_parameters[1].reading,              init = NCD,                 ev = init
			
			VAR Parameters_reading[1],					init = Parameters[1],		ev = init
            
            
        COMMENT OUTPUT SECTION:
                                    
            --None
                                    
        COMMENT INPUT/OUTPUT SECTION:
                                    
            --None 
                                    
        -- Stub Calls:
                                        
        SIMUL
            
            --reads the discrete word
            STUB RTDGetParamDdw(1)

        END SIMUL
                                    
        -- Calling the Unit Under Test
        #ScaleRead();
    END ELEMENT

END TEST -- TEST 2

TEST 3
FAMILY nominal

    COMMENT  Test Description
    COMMENT  <TD>
    COMMENT  [hdudispfgrapp-ScaleRead-DB-LLR-001]
    COMMENT  The function 'ScaleRead' loops for 0 times and does nothing
    COMMENT  Equivalence class None
    COMMENT  </TD>
    
    ELEMENT
    
        COMMENT INPUT SECTION:
                
            --data read from Parameters[0]
            VAR Port1_label_count,              init = 0,           ev = init
			
            VAR Config_data.scu_enable,             	init = FALSE,           ev = init					

            --type of the parameter
            VAR Parameters[1].type,             init = BCD,         ev = init
			
			VAR Parameters_reading[1],					init = Parameters[1],		ev = init			

            
        COMMENT OUTPUT SECTION:
                                    
            --None 
                                    
        COMMENT INPUT/OUTPUT SECTION:
                                    
            --None 
                                    
        -- Stub Calls:
                                        
        SIMUL
            
            --None

        END SIMUL
                                    
        -- Calling the Unit Under Test
        #ScaleRead();
    END ELEMENT

END TEST -- TEST 3

END SERVICE -- ScaleRead


--------------------------------------------------------------------------------
-- Declaration of the service FlightTimer
--------------------------------------------------------------------------------
SERVICE FlightTimer
SERVICE_TYPE extern


TEST 1
FAMILY nominal

    COMMENT  Test Description
    COMMENT  <TD>   
    COMMENT  [hdudispfgrapp-FlightTimer-DB-LLR-001]
    COMMENT  The function 'FlightTimer' sets Manual_timer to MAX_TIME if Manual_timer 
    COMMENT  is greater than MAX_TIME 
    COMMENT  Equivalence Class 38
    COMMENT
    COMMENT  [hdudispfgrapp-FlightTimer-DB-LLR-002]
    COMMENT  The function 'FlightTimer' does the following to calculate Hours, Seconds and Minutes as follows.
    COMMENT  1.Hours = Manual_timer divided by product of SEC_PER_MIN ,MIN_PER_HOUR and TICKS_PER_SECOND.
    COMMENT  2.Seconds = Manual_timer divided by TICKS_PER_SECOND.
    COMMENT  3.Minutes =  Seconds divided by SEC_PER_MIN.
    COMMENT  4.Seconds = Seconds modulus  by SEC_PER_MIN.
    COMMENT  5.Minutes =  Seconds modulus by MIN_PER_HOUR.
    COMMENT  Note: Local variables used in the LLR are implictly verified through the parameters passed to the stub 
    COMMENT  BinasByteFormatInfo.
    COMMENT  Equivalence Class None
    COMMENT 
    COMMENT [hdudispfgrapp-FlightTimer-DB-LLR-003]
    COMMENT  The function 'FlightTimer' sets the string to return value of function 'BinasByteFormatInfo' with 
    COMMENT  reference to hours , sum of ONEB,ONEW,UNSIGNED and NOLZB and U8_time_string as its parameter and 
    COMMENT  append the string with ':'.Increment string address by 1.
    COMMENT  Equivalence Class 41
    COMMENT 
    COMMENT  [hdudispfgrapp-FlightTimer-DB-LLR-004]
    COMMENT  The function 'FlightTimer'sets string to return value of function 'BinasByteFormatInfo' with reference
    COMMENT  to Minutes , sum of FOURB, TWOW,UNSIGNED and NOLZB and pc string as its parameter and append the string with
    COMMENT  ':'. Increment string address by 1.
    COMMENT  Equivalence Class 41
    COMMENT 
    COMMENT  [hdudispfgrapp-FlightTimer-DB-LLR-005]
    COMMENT  The function  'FlightTimer' calls the function 'BinasByteFormatInfo' with reference to Seconds , sum of 
    COMMENT  FOURB, TWOW,UNSIGNED and NOLZB and pc string as its parameter.
    COMMENT  Equivalence Class 41
    COMMENT 
    COMMENT  [hdudispfgrapp-FlightTimer-DB-LLR-006]
    COMMENT  The function 'FlightTimer' calls the function 'TextDispString' with the below parameters.
    COMMENT 1.  U8_time_string
    COMMENT 2.  u16_x of timer_axis of Page_settings.
    COMMENT 3.  u16_y of timer_axis of Page_settings.
    COMMENT 4.  timer_font of  Page_settings.
    COMMENT 5.  WHITE
    COMMENT 6.  TX_NO_FLASH
    COMMENT 7.  V_NORMAL
    COMMENT 8.  ALIGN_CENTER
    COMMENT  Equivalence Class 42
    COMMENT </TD>
    
    ELEMENT
        
        COMMENT INPUT SECTION:

            --None
            
        COMMENT INPUT/OUTPUT SECTION:

            --Manual timer is initialized
            VAR Manual_timer,                               init = 36000000,            ev = 35999999

            --Source for BinasByteFormatInfo
            VAR PTU_src[1],                                 init = 0,                   ev = 59

            --Destination for BinasByteFormatInfo
            VAR PTU_dest[1],                                init = 1,                   ev = init

            --Source for BinasByteFormatInfo
            VAR PTU_src[2],                                 init = 59,                  ev = init

            --Destination for BinasByteFormatInfo
            VAR PTU_dest[2],                                init = 1,                   ev = init

            --Source for BinasByteFormatInfo
            VAR PTU_src[3],                                 init = 59,                  ev = init

            --Destination for BinasByteFormatInfo
            VAR PTU_dest[3],                                init = 1,                   ev = init

            --String to be displayed
            VAR PTU_pc_string,                              init = 'A',                 ev = init   
            
        COMMENT OUTPUT SECTION:
    
            --None
            
        -- Stub Calls:
        SIMUL

            --Converts a binary number to ascii
            STUB BinasByteFormatInfo (ONEB+ONEW+UNSIGNED+NOLZB)&PTU_dest[2]

            --Converts a binary number to ascii
            STUB BinasByteFormatInfo (FOURB+TWOW+UNSIGNED+NOLZB)&PTU_dest[3]

            --Converts a binary number to ascii
            STUB BinasByteFormatInfo (FOURB+TWOW+UNSIGNED+NOLZB)&PTU_dest[4]

            --displays the string at specified location 
            STUB TextDispString(Page_settings.timer_axis.u16_x, Page_settings.timer_axis.u16_y,
            &       E_NO_FONT, WHITE, TX_NO_FLASH, V_NORMAL, ALIGN_CENTER)

        END SIMUL
        
        --Calling the Unit Under Test
        #FlightTimer();
        
    END ELEMENT

END TEST -- TEST 1
    
TEST 2
FAMILY nominal

    COMMENT  Test Description
    COMMENT  <TD>   
    COMMENT  [hdudispfgrapp-FlightTimer-DB-LLR-001]
    COMMENT  The function 'FlightTimer' does nothing when  Manual_timer 
    COMMENT  is equal to MAX_TIME 
    COMMENT  Equivalence Class 40
    COMMENT </TD>
    
    ELEMENT
        
        COMMENT INPUT SECTION:

            

        COMMENT INPUT/OUTPUT SECTION:
        
                --None
        
        COMMENT OUTPUT SECTION:
            
            --Manual timer is initialized
            VAR Manual_timer,                               init = 35999999,                 ev = init

            --Source for BinasByteFormatInfo
            VAR PTU_src[4],                                 init = 1,                        ev = 59

            --Destination for BinasByteFormatInfo
            VAR PTU_dest[4],                                init = 1,                  		 ev = init

            --Source for BinasByteFormatInfo
            VAR PTU_src[5],                                 init = 59,                 		 ev = init

            --Destination for BinasByteFormatInfo
            VAR PTU_dest[5],                                init = 1,                  		 ev = init

            --Source for BinasByteFormatInfo
            VAR PTU_src[6],                                 init = 59,                 		 ev = init

            --Destination for BinasByteFormatInfo
            VAR PTU_dest[6],                                init = 1,                  		 ev = init

            --String to be displayed
            VAR PTU_pc_string,                              init = 'A',                		 ev = init   
        	
        -- Stub Calls:
        SIMUL

            --Converts a binary number to ascii
            STUB BinasByteFormatInfo (ONEB+ONEW+UNSIGNED+NOLZB)&PTU_dest[5]

            --Converts a binary number to ascii
            STUB BinasByteFormatInfo (FOURB+TWOW+UNSIGNED+NOLZB)&PTU_dest[6]

            --Converts a binary number to ascii
            STUB BinasByteFormatInfo (FOURB+TWOW+UNSIGNED+NOLZB)&PTU_dest[7]

            --displays the string at specified location 
            STUB TextDispString(Page_settings.timer_axis.u16_x, Page_settings.timer_axis.u16_y,
            &       E_NO_FONT, WHITE, TX_NO_FLASH, V_NORMAL, ALIGN_CENTER)
        
        END SIMUL
                
        --Calling the Unit Under Test
        #FlightTimer();
                
    END ELEMENT

END TEST -- TEST 2  

TEST 3
FAMILY nominal

    COMMENT  Test Description
    COMMENT  <TD>   
    COMMENT  [hdudispfgrapp-FlightTimer-DB-LLR-001]
    COMMENT  The function 'FlightTimer'does nothing when Manual_timer 
    COMMENT  is less than MAX_TIME 
    COMMENT  Equivalence Class 39
    COMMENT </TD>
    
    ELEMENT
        
        COMMENT INPUT SECTION:

            --Manual timer is initialized
            VAR Manual_timer,                               init = 35999998,                ev = init

        COMMENT INPUT/OUTPUT SECTION:
        
                --None
        
        COMMENT OUTPUT SECTION:
        
            --None
        
        -- Stub Calls:
        SIMUL
        
            --Converts a binary number to ascii
            STUB BinasByteFormatInfo (ONEB+ONEW+UNSIGNED+NOLZB)&PTU_dest[5]

            --Converts a binary number to ascii
            STUB BinasByteFormatInfo (FOURB+TWOW+UNSIGNED+NOLZB)&PTU_dest[6]

            --Converts a binary number to ascii
            STUB BinasByteFormatInfo (FOURB+TWOW+UNSIGNED+NOLZB)&PTU_dest[7]

            --displays the string at specified location 
            STUB TextDispString(Page_settings.timer_axis.u16_x, Page_settings.timer_axis.u16_y,
            &       E_NO_FONT, WHITE, TX_NO_FLASH, V_NORMAL, ALIGN_CENTER)
        
        END SIMUL
                
        --Calling the Unit Under Test
        #FlightTimer();
                
    END ELEMENT

END TEST -- TEST 3

END SERVICE -- FlightTimer


--------------------------------------------------------------------------------
-- Declaration of the service BarGraphInit
--------------------------------------------------------------------------------
SERVICE BarGraphInit
SERVICE_TYPE extern

-- Tested service parameters declarations
#T_SBARGRAPHDEF bg_list[5];

TEST 1
FAMILY nominal

    COMMENT  Test Description
    COMMENT  <TD>   
    COMMENT  [hdudispfgrapp-BarGraphInit-DB-LLR-001]
    COMMENT  The function'BarGraphInit' loops for 1 time and does the following till counter is less than Bg_cnt.
    COMMENT  1.Increment the counter value.
    COMMENT  2.Call the function BargraphAllocat with bg_list as its function parameter.
    COMMENT  3.Increment bg_list by 1.
    COMMENT  Equivalence Class 37
    COMMENT  </TD>
            
    ELEMENT
            
        COMMENT INPUT SECTION:
                    
            --Counter used to loop
            VAR Bg_cnt,                             init = 1,                       ev = init
            
        COMMENT INPUT/OUTPUT SECTION:
            --None  
                    
        COMMENT OUTPUT SECTION:
            --None
                    
        -- Stub Calls:
        SIMUL
                    
            --Allocates number box structure
            STUB BargraphAllocat(&bg_list)
            
                
        END SIMUL 
                
        -- Calling the Unit Under Test  
        #BarGraphInit(&bg_list[0]);
        
    END ELEMENT

END TEST -- TEST 1

TEST 2
FAMILY nominal

    COMMENT  Test Description
    COMMENT  <TD>   
    COMMENT  [hdudispfgrapp-BarGraphInit-DB-LLR-001]
    COMMENT  The function'BarGraphInit' loops for 2 times and does the following till counter is less than Bg_cnt.
    COMMENT  1.Increment the counter value.
    COMMENT  2.Call the function BargraphAllocat with bg_list as its function parameter.
    COMMENT  3.Increment bg_list by 1.
    COMMENT  Equivalence Class 37
    COMMENT  TO cover while loop for one time 
    COMMENT  </TD>
            
    ELEMENT
            
        COMMENT INPUT SECTION:
                    
            --Counter used to loop
            VAR Bg_cnt,                             init = 2,                       ev = init
                        
        COMMENT INPUT/OUTPUT SECTION:
            --None  
                    
        COMMENT OUTPUT SECTION:
            --None
                    
        -- Stub Calls:
        SIMUL
                    
            --Allocates number box structure
            STUB BargraphAllocat(&bg_list[0])
            STUB BargraphAllocat(&bg_list[1])
                
        END SIMUL 
                
        -- Calling the Unit Under Test  
        #BarGraphInit(&bg_list[0]);
        
    END ELEMENT

END TEST -- TEST 2

TEST 3
FAMILY nominal

    COMMENT  Test Description
    COMMENT  <TD>   
    COMMENT  [hdudispfgrapp-BarGraphInit-DB-LLR-001]
    COMMENT  The function'BarGraphInit' loops for 0 time and does nothing when Bg_cnt is equal to zero.
    COMMENT  Equivalence Class 37
    COMMENT  TO cover while loop for one time 
    COMMENT  </TD>
            
    ELEMENT
            
        COMMENT INPUT SECTION:
                    
            --Counter used to loop
            VAR Bg_cnt,                             init = 0,                       ev = init
                        
        COMMENT INPUT/OUTPUT SECTION:
        
            --None  
                    
        COMMENT OUTPUT SECTION:
        
            --None
                    
        -- Stub Calls:
        SIMUL
                    
            --None
                
        END SIMUL 
                
        -- Calling the Unit Under Test  
        #BarGraphInit(&bg_list[0]);
        
    END ELEMENT

END TEST -- TEST 3

END SERVICE -- BarGraphInit

--------------------------------------------------------------------------------
-- Declaration of the service GrappApp
--------------------------------------------------------------------------------
SERVICE GrappApp
SERVICE_TYPE extern

    #T_PARAM_READING PTU_param,PTU_param1,PTU_param2,PTU_param3;
	#T_UINT32 PTU_temp;
    ENVIRONMENT ENV_GrappApp

        VAR Port1_label_count,          init = 0,       ev = init

        VAR Splash_done,                init = 0,       ev = init       

        VAR Splash_b1_press,            init = 0,       ev = init

        --Right Twist selection
        VAR Switches.sRE.twist,         init = 0,       ev = init   

        --Button 1
        VAR Switches.b1,                init = 0,       ev = init

        --Button 2
        VAR Switches.b2,                init = 0,       ev = init

        --Button 3
        VAR Switches.b3,                init = 0,       ev = init

        --Button 4
        VAR Switches.b4,                init = 0,       ev = init

        --Button 5
        VAR Switches.b5,                init = 0,       ev = init

        --Button 6
        VAR Switches.b6,                init = 0,       ev = init

        --Button 7
        VAR Switches.b7,                init = 0,       ev = init

        --Button 8
        VAR Switches.b8,                init = 0,       ev = init

        --Button c1
        VAR Switches.c1,                init = 0,       ev = init

        --Button c2
        VAR Switches.c2,                init = 0,       ev = init

        --Button c3
        VAR Switches.c3,                init = 0,       ev = init

        --Left Encoder selection
        VAR Switches.sLE.pressed,       init = 0,       ev = init

        --Right Encoder selection
        VAR Switches.sRE.pressed,       init = 0,       ev = init

    END ENVIRONMENT -- ENV_GrappApp
    USE ENV_GrappApp

TEST 37
FAMILY nominal

    COMMENT  Test Description
    COMMENT  <TD>   
    COMMENT  [hdudispfgrapp-GrappApp-DB-LLR-003]
    COMMENT  The function 'GrappApp' does the following when Splash done is zero and COND is true.
	COMMENT - Set splash done to 1.
	COMMENT - Set Page_num to EPAGE1,Cool_down_select to FALSE , Fuel_flow_select to FUEL_FLOW_ON and
	COMMENT   Active_eiu to EIU1 if Nv_crc_fail is equal to TRUE AND Du_position is equal to ONE
	COMMENT - Call functions OffsideSwitchScreen with Page_num as parameter,OffsideCoolTimer with Cool_down_select as parameter
	COMMENT  and GlobalSettingsSetEIU with  Active_eiu as parameter when Du_position is equal to ONE
	COMMENT - Call functions OsTimeDly with parameter 250 and ForegroundLoadBackground with sum of BG_IMAGE_ADDR and product 
	COMMENT of Page_num, PAGE_BITMAP_NUM_OF_SECTOR and SECTOR_SIZE as its parameter.
	COMMENT - Call the function PdiPageDataInit with Page_num as its parameter
	COMMENT - Call the function RoundDialsInit with Ap_page0_dials as its parameter
	COMMENT - Call the function NumberBoxInit with Page_num_boxes as its parameter
	COMMENT - Call the function BarGraphInit with Ap_page1_bar_graphs as its parameter
	COMMENT - Call function TextBoxOff with reference to Prim_cool_down_pop_up_box as parameter.
	COMMENT - Set s16ULX of Prim_cool_down_pop_up_box to u16_x of acdt_axis of Page_settings minus COOLDOWN_AXIS_CALIBRATION,
	COMMENT Set s16ULY of Prim_cool_down_pop_up_box to u16_y of acdt_axis of Page_settings minus COOLDOWN_AXIS_CALIBRATION when
	COMMENT Acdt_flag is equal to TRUE.
	COMMENT - Call function MenuInit.
	COMMENT 3.Return from the function.
	COMMENT
	COMMENT COND : COND1 OR COND2 OR COND3 OR COND4 OR COND5
	COMMENT
	COMMENT COND1 : Splash timer is greater than or equal to SPLASH_TIME  
	COMMENT COND2 : Splash_b1_press is zero AND any one of the buttons from Switches is pressed(i.e b1,b2,b3,b4,b5,b6,b7,b8,b10,b11,b12,b13,c1,c2,c3, sLE, sRe)
	COMMENT COND3 : twist of sLE of Switches is not equal to zero 
	COMMENT COND4 : twist of sRe of Switches is not equal to zero 
    COMMENT COND5 : flag which indicate first demo mode  Bitwise and Demo_active bitwise and of result of COND6
    COMMENT (MCDC  : FTFFFFFFFFFFFFFFFFFFFF)
    COMMENT Equivalence class 62,63,64,65,66,67,68,69,76,195,87,88,89,90,91,92,93,94,95,96,97,98,100,192,194,111,213,214,215,216   
    COMMENT  </TD>
    
    ELEMENT
    
        COMMENT INPUT SECTION:

            --Holds Button 1 press flag for splash screen
            VAR Splash_b1_press,        init = 0,       ev = init
			
            VAR Pg_cnt,        init = 1,       ev = init
			
            VAR Page_parameter_error,        init = FALSE,       ev = init
			
            VAR Ap_poly_graph[0].polygon_shape,        init = FG_RED_X_SHAPE,       ev = init

            --Right Twist selection
            VAR Switches.sRE.twist,     init = 0,       ev = init   

            VAR Switches.sLE.twist,     init = 0,       ev = init   
        
            --Button 1
            VAR Switches.b1,            init = 0,       ev = init
    
            --Button 2
            VAR Switches.b2,            init = 0,       ev = init
    
            --Button 3
            VAR Switches.b3,            init = 0,       ev = init
    
            --Button 4
            VAR Switches.b4,            init = 0,       ev = init
    
            --Button 5
            VAR Switches.b5,            init = 0,       ev = init
    
            --Button 6
            VAR Switches.b6,            init = 0,       ev = init
    
            --Button 7
            VAR Switches.b7,            init = 0,       ev = init
    
            --Button 8
            VAR Switches.b8,            init = 0,       ev = init
			
			--Button 10
            VAR Switches.b10,            init = 0,       ev = init
			
			--Button 11
            VAR Switches.b11,            init = 0,       ev = init
			
			--Button 12
            VAR Switches.b12,            init = 0,       ev = init
			
			--Button 13
            VAR Switches.b13,            init = 0,       ev = init
    
            --Button c1
            VAR Switches.c1,            init = 0,       ev = init
    
            --Button c2
            VAR Switches.c2,            init = 0,       ev = init
    
            --Button c3
            VAR Switches.c3,            init = 0,       ev = init
    
            --Left Encoder selection
            VAR Switches.sLE.pressed,   init = 0,       ev = init
    
            --Right Encoder selection
            VAR Switches.sRE.pressed,   init = 0,       ev = init
        

        COMMENT OUTPUT SECTION:

            -- None
                                                            
        COMMENT INPUT/OUTPUT SECTION:

            -- 
            VAR Splash_done,            init = 0,       ev = init                                                           
            
        -- Stub Calls:                                                              
        SIMUL

            --None
            
        END SIMUL           
       
        -- Calling the Unit Under Test 
        #GrappApp();
            
    END ELEMENT

END TEST -- TEST 37

TEST 38
FAMILY nominal

    COMMENT  Test Description
    COMMENT  <TD>   
    COMMENT  [hdudispfgrapp-GrappApp-DB-LLR-003]
    COMMENT  The function 'GrappApp' does the following when Splash done is zero and COND is true.
	COMMENT - Set splash done to 1.
	COMMENT - Set Page_num to EPAGE1,Cool_down_select to FALSE , Fuel_flow_select to FUEL_FLOW_ON and
	COMMENT   Active_eiu to EIU1 if Nv_crc_fail is equal to TRUE AND Du_position is equal to ONE
	COMMENT - Call functions OffsideSwitchScreen with Page_num as parameter,OffsideCoolTimer with Cool_down_select as parameter
	COMMENT  and GlobalSettingsSetEIU with  Active_eiu as parameter when Du_position is equal to ONE
	COMMENT - Call functions OsTimeDly with parameter 250 and ForegroundLoadBackground with sum of BG_IMAGE_ADDR and product 
	COMMENT of Page_num, PAGE_BITMAP_NUM_OF_SECTOR and SECTOR_SIZE as its parameter.
	COMMENT - Call the function PdiPageDataInit with Page_num as its parameter
	COMMENT - Call the function RoundDialsInit with Ap_page0_dials as its parameter
	COMMENT - Call the function NumberBoxInit with Page_num_boxes as its parameter
	COMMENT - Call the function BarGraphInit with Ap_page1_bar_graphs as its parameter
	COMMENT - Call function TextBoxOff with reference to Prim_cool_down_pop_up_box as parameter.
	COMMENT - Set s16ULX of Prim_cool_down_pop_up_box to u16_x of acdt_axis of Page_settings minus COOLDOWN_AXIS_CALIBRATION,
	COMMENT Set s16ULY of Prim_cool_down_pop_up_box to u16_y of acdt_axis of Page_settings minus COOLDOWN_AXIS_CALIBRATION when
	COMMENT Acdt_flag is equal to TRUE.
	COMMENT - Call function MenuInit.
	COMMENT 3.Return from the function.
	COMMENT
	COMMENT COND : COND1 OR COND2 OR COND3 OR COND4 OR COND5
	COMMENT
	COMMENT COND1 : Splash timer is greater than or equal to SPLASH_TIME  
	COMMENT COND2 : Splash_b1_press is zero AND any one of the buttons from Switches is pressed(i.e b1,b2,b3,b4,b5,b6,b7,b8,b10,b11,b12,b13,c1,c2,c3, sLE, sRe)
	COMMENT COND3 : twist of sLE of Switches is not equal to zero 
	COMMENT COND4 : twist of sRe of Switches is not equal to zero 
    COMMENT COND5 : flag which indicate first demo mode  Bitwise and Demo_active bitwise and of result of COND6
	COMMENT COND6 : splash timer is greater than or equal to SPLASH_TIME
    COMMENT  FFXXXXXXXXXXXXXXXXFFF 
    COMMENT  Equivalence class 62,63,64,65,66,67,68,69,76,196,87,88,89,90,91,92,93,94,95,96,97,98,100,102,192,194,111,196,213,214,215,216 
    COMMENT  </TD>
    
    ELEMENT
    
        COMMENT INPUT SECTION:
		
            VAR Pg_cnt,        init = 1,       ev = init
			
            VAR Ap_poly_graph[0].polygon_shape,        init = FG_RED_X_SHAPE,       ev = init		
			
			VAR Page_parameter_error,        init = FALSE,       ev = init

            --Holds Button 1 press flag for splash screen
            VAR Splash_b1_press,        init = 1,       ev = init
        
            --Right Twist selection
            VAR Switches.sRE.twist,     init = 0,       ev = init   
			
			----Left Twist selection
            VAR Switches.sLE.twist,     init = 0,       ev = init

        COMMENT OUTPUT SECTION:

            -- None
                                                            
        COMMENT INPUT/OUTPUT SECTION:

            -- 
            VAR Splash_done,            init = 0,       ev = init                                                           
            
        -- Stub Calls:                                                              
        SIMUL

            --None
            
        END SIMUL           
       
        -- Calling the Unit Under Test 
        #GrappApp();
            
    END ELEMENT

END TEST -- TEST 38


TEST 42
FAMILY nominal

    COMMENT  Test Description
    COMMENT  <TD>   
    COMMENT  [hdudispfgrapp-GrappApp-DB-LLR-003]
    COMMENT  The function 'GrappApp' does the following when Splash done is zero and COND is true.
	COMMENT - Set first demo mode flag to FALSE when Demo_Mode_Activatre is TRUE 
	COMMENT - Set splash done to 1.
	COMMENT - Set Page_num to EPAGE1,Cool_down_select to FALSE , Fuel_flow_select to FUEL_FLOW_ON and
	COMMENT   Active_eiu to EIU1 if Nv_crc_fail is equal to TRUE AND Du_position is equal to ONE	
	COMMENT - Call functions OsTimeDly with parameter 250 and ForegroundLoadBackground with sum of BG_IMAGE_ADDR and product 
	COMMENT of Page_num, PAGE_BITMAP_NUM_OF_SECTOR and SECTOR_SIZE as its parameter.
	COMMENT - Call the function PdiPageDataInit with Page_num as its parameter
	COMMENT - Call the function RoundDialsInit with Ap_page0_dials as its parameter
	COMMENT - Call the function NumberBoxInit with Page_num_boxes as its parameter
	COMMENT - Call the function BarGraphInit with Ap_page1_bar_graphs as its parameter
	COMMENT - Call function TextBoxOff with reference to Prim_cool_down_pop_up_box as parameter.
	COMMENT - - Call the function CrcPages with parameter as Page_num and set Bitmap_crc_check_bit with index Page_num to TRUE when Bitmap_crc_check_bit with index Page_num is equal to FALSE.
	COMMENT - Call function MenuInit.
	COMMENT 3.Return from the function.
	COMMENT
	COMMENT COND : COND1 OR COND2 OR COND3 OR COND4 OR COND5
	COMMENT
	COMMENT COND1 : Splash timer is greater than or equal to SPLASH_TIME  
	COMMENT COND2 : Splash_b1_press is zero AND any one of the buttons from Switches is pressed(i.e b1,b2,b3,b4,b5,b6,b7,b8,b10,b11,b12,b13,c1,c2,c3, sLE, sRe)
	COMMENT COND3 : twist of sLE of Switches is not equal to zero 
	COMMENT COND4 : twist of sRe of Switches is not equal to zero 
    COMMENT COND5 : flag which indicate first demo mode  Bitwise and Demo_active bitwise and of result of COND6
	COMMENT COND6 : splash timer is greater than or equal to SPLASH_TIME
	COMMENT MCDC Covered FTFFFFFFFFFFFFFFFFTXXX
    COMMENT  Equivalence class 62,63,64,65,66,67,68,70,195,86,108,100,110,72,115,87,88,89,111,90,91,92,93,94,95,96,97,192,194,196,217,219,205,213,214,215,216 
    COMMENT  </TD>
    
    ELEMENT
    
        COMMENT INPUT SECTION:
		
			VAR Pg_cnt,        init = 1,       ev = init
			
            VAR Ap_poly_graph[0].polygon_shape,        init = FG_RED_X_SHAPE,       ev = init

            VAR Splash_b1_press, 								init = ZERO, 				ev = init
  
			--Right Encoder selection
            VAR Switches.sRE.pressed,                           init = 1,                   ev = init
			
			VAR Demo_mode_activate,								init = TRUE,				ev = init
			
			VAR Demo_active,									init = TRUE,				ev = init
			
			VAR Page_parameter_error,        init = FALSE,       ev = init
			
			--VAR Bitmap_crc_check_bit[1],					init = FALSE,				ev = TRUE
			
        COMMENT OUTPUT SECTION:

            -- None
                                                            
        COMMENT INPUT/OUTPUT SECTION:

			VAR Splash_done,                					init = 0,       			ev = 1                                                         
            
        -- Stub Calls:                                                              
        SIMUL


            --allows the calling task to delay for a specific number of clock ticks
            STUB  OsTimeDly(250)
            
            --To load the background
            STUB ForegroundLoadBackground((T_UINT16 *)(BG_IMAGE_ADDR+(Page_num*PAGE_BITMAP_NUM_OF_SECTOR*SECTOR_SIZE)))
            
            --extracts page wise settings from PDI
            STUB PdiPageDataInit(Page_num)          

            --configures the timer initializations and all text boxes 
            STUB MenuInit()

            --disables the text box
            STUB TextBoxOff(&Prim_cool_down_pop_up_box)
			
			--Performs once CRC Check
			--STUB CrcPages(Page_num)
            
            
        END SIMUL           
       
        -- Calling the Unit Under Test 
        #GrappApp();
            
    END ELEMENT

END TEST -- TEST 42


TEST 43
FAMILY nominal

    COMMENT  Test Description
    COMMENT  <TD>   
    COMMENT  [hdudispfgrapp-GrappApp-DB-LLR-003]
    COMMENT  The function 'GrappApp' does the following when Splash done is zero and COND is true.
	COMMENT - Does nothing when Demo_Mode_Activatre is FALSE 
	COMMENT - Set splash done to 1.
	COMMENT - Set Page_num to EPAGE1,Cool_down_select to FALSE , Fuel_flow_select to FUEL_FLOW_ON and
	COMMENT   Active_eiu to EIU1 if Nv_crc_fail is equal to TRUE AND Du_position is equal to ONE	
	COMMENT - Call functions OsTimeDly with parameter 250 and ForegroundLoadBackground with sum of BG_IMAGE_ADDR and product 
	COMMENT of Page_num, PAGE_BITMAP_NUM_OF_SECTOR and SECTOR_SIZE as its parameter.
	COMMENT - Call the function PdiPageDataInit with Page_num as its parameter
	COMMENT - Call the function RoundDialsInit with Ap_page0_dials as its parameter
	COMMENT - Call the function NumberBoxInit with Page_num_boxes as its parameter
	COMMENT - Call the function BarGraphInit with Ap_page1_bar_graphs as its parameter
	COMMENT - Call function TextBoxOff with reference to Prim_cool_down_pop_up_box as parameter.
	COMMENT - Call function MenuInit.
	COMMENT 3.Return from the function.
	COMMENT
	COMMENT COND : COND1 OR COND2 OR COND3 OR COND4 OR COND5
	COMMENT
	COMMENT COND1 : Splash timer is greater than or equal to SPLASH_TIME  
	COMMENT COND2 : Splash_b1_press is zero AND any one of the buttons from Switches is pressed(i.e b1,b2,b3,b4,b5,b6,b7,b8,b10,b11,b12,b13,c1,c2,c3, sLE, sRe)
	COMMENT COND3 : twist of sLE of Switches is not equal to zero 
	COMMENT COND4 : twist of sRe of Switches is not equal to zero 
    COMMENT COND5 : flag which indicate first demo mode  Bitwise and Demo_active bitwise and of result of COND6
	COMMENT COND6 : splash timer is greater than or equal to SPLASH_TIME
	COMMENT MCDC Covered FTFFFFFFFFFFFFFFFFTXXX
    COMMENT Equivalence class 62,63,64,65,66,67,68,70,195,86,108,100,110,72,115,87,88,89,111,90,91,92,93,94,95,96,97,192,194,196,206,213,214,215,216 
	COMMENT
    COMMENT  </TD>
    
    ELEMENT
    
        COMMENT INPUT SECTION:
		
			VAR Pg_cnt,        init = 1,       ev = init
			
            VAR Ap_poly_graph[0].polygon_shape,        init = FG_RED_X_SHAPE,       ev = init

            VAR Splash_b1_press, 								init = ZERO, 				ev = init
        
			--Right Encoder selection
            VAR Switches.sRE.pressed,                           init = 1,                   ev = init
			
			VAR Demo_mode_activate,								init = FALSE,				ev = init
			
			VAR Demo_active,									init = FALSE,				ev = init
			
			VAR Page_parameter_error,        init = FALSE,       ev = init
			
			--VAR Bitmap_crc_check_bit[1],					init = TRUE,				ev = init
			
        COMMENT OUTPUT SECTION:

            -- None
                                                            
        COMMENT INPUT/OUTPUT SECTION:

			VAR Splash_done,                					init = 0,       			ev = 1                                                        
            
        -- Stub Calls:                                                              
        SIMUL



            --allows the calling task to delay for a specific number of clock ticks
            STUB  OsTimeDly(250)
            
            --To load the background
            STUB ForegroundLoadBackground((T_UINT16 *)(BG_IMAGE_ADDR+(Page_num*PAGE_BITMAP_NUM_OF_SECTOR*SECTOR_SIZE)))
            
            --extracts page wise settings from PDI
            STUB PdiPageDataInit(Page_num)          

            --configures the timer initializations and all text boxes 
            STUB MenuInit()

            --disables the text box
            STUB TextBoxOff(&Prim_cool_down_pop_up_box)
            
            
        END SIMUL           
       
        -- Calling the Unit Under Test 
        #GrappApp();
            
    END ELEMENT

END TEST -- TEST 43

TEST 1
FAMILY nominal

    COMMENT  Test Description
    COMMENT  <TD>   
    COMMENT  [hdudispfgrapp-GrappApp-DB-LLR-001]
    COMMENT  The function 'GrappApp' calls the function 'ScaleRead'.
    COMMENT  Equivalence class 60
    COMMENT  
    COMMENT  [hdudispfgrapp-GrappApp-DB-LLR-002]
    COMMENT  The function 'GrappApp' calls the function 'ExmonCheck'.
    COMMENT  Equivalence class 61
    COMMENT  
    COMMENT  [hdudispfgrapp-GrappApp-DB-LLR-003]
    COMMENT  The function 'GrappApp' does the following when Splash done is zero and COND is true.
	COMMENT - Set splash done to 1.
	COMMENT - Set Page_num to EPAGE1,Cool_down_select to FALSE , Fuel_flow_select to FUEL_FLOW_ON and
	COMMENT   Active_eiu to EIU1 if Nv_crc_fail is equal to TRUE AND Du_position is equal to ONE
	COMMENT - Call functions OffsideSwitchScreen with Page_num as parameter,OffsideCoolTimer with Cool_down_select as parameter
	COMMENT  and GlobalSettingsSetEIU with  Active_eiu as parameter when Du_position is equal to ONE
	COMMENT - Call functions OsTimeDly with parameter 250 and ForegroundLoadBackground with sum of BG_IMAGE_ADDR and product 
	COMMENT of Page_num, PAGE_BITMAP_NUM_OF_SECTOR and SECTOR_SIZE as its parameter.
	COMMENT - Call the function PdiPageDataInit with Page_num as its parameter
	COMMENT - Call the function RoundDialsInit with Ap_page0_dials as its parameter
	COMMENT - Call the function NumberBoxInit with Page_num_boxes as its parameter
	COMMENT - donothing when Bitmap_crc_check_bit with index Page_num is equal to TRUE.	
	COMMENT - Call the function BarGraphInit with Ap_page1_bar_graphs as its parameter
	COMMENT - Call function TextBoxOff with reference to Prim_cool_down_pop_up_box as parameter.
	COMMENT - Set s16ULX of Prim_cool_down_pop_up_box to u16_x of acdt_axis of Page_settings minus COOLDOWN_AXIS_CALIBRATION,
	COMMENT Set s16ULY of Prim_cool_down_pop_up_box to u16_y of acdt_axis of Page_settings minus COOLDOWN_AXIS_CALIBRATION when
	COMMENT Acdt_flag is equal to TRUE.
	COMMENT - Call function MenuInit.
	COMMENT 3.Return from the function.
	COMMENT
	COMMENT COND : COND1 OR COND2 OR COND3 OR COND4 OR COND5
	COMMENT
	COMMENT COND1 : Splash timer is greater than or equal to SPLASH_TIME  
	COMMENT COND2 : Splash_b1_press is zero AND any one of the buttons from Switches is pressed(i.e b1,b2,b3,b4,b5,b6,b7,b8,b10,b11,b12,b13,c1,c2,c3, sLE, sRe)
	COMMENT COND3 : twist of sLE of Switches is not equal to zero 
	COMMENT COND4 : twist of sRe of Switches is not equal to zero  
    COMMENT COND5 : flag which indicate first demo mode  Bitwise and Demo_active bitwise and of result of COND6
	COMMENT COND6 : splash timer is greater than or equal to SPLASH_TIME
	COMMENT
    COMMENT  Equivalence class 62,63,64,65,66,67,68,69,70,76,193,87,88,89,90,91,92,93,94,95,96,97,98,100,192,111,195,213,214,215,216,220 
    COMMENT  MCDC Covered FTFFFFFFFFFFFFFFFFFTXX
    COMMENT </TD>
    
    ELEMENT


        COMMENT INPUT SECTION:
		
			VAR Pg_cnt,        init = 1,       ev = init
			
            VAR Ap_poly_graph[0].polygon_shape,        init = FG_RED_X_SHAPE,       ev = init
        
            --data read from Parameters[0]                                              
            VAR Port1_label_count,                              init = 2,               ev = init

            --type of the parameter
            VAR Parameters[1].type,                             init = BNR,             ev = init

            --data read from Parameters[2]
            VAR PTU_parameters[1].reading,                      init = NCD,             ev = init
            
            --data read from Parameters[2]
            VAR PTU_parameters_numbox[1].reading,               init = NCD,             ev = init
            
            --type of the parameter
            VAR Parameters[2].type,                             init = BCD,             ev = init
            
            --data read from Parameters[2]
            VAR PTU_parameters_numbox[2].reading,               init = NCD,             ev = init
            
            --Counter value used to loop 
            VAR Bg_cnt,                                         init = 1,               ev = init
			
            VAR Cg_cnt,                                         init = 1,               ev = init
			
            VAR Text_cnt,                                       init = 1,               ev = init
			
            VAR Tb_cnt,                                         init = 1,               ev = init

            --Counter value used to loop 
            VAR Nb_cnt,                                         init = 1,               ev = init

            --Number limit
            --VAR Ap_page1_bar_graphs[0].numLimit,                init = 1,               ev = init   

            VAR Ap_page1_bar_graphs[0].psParam,                 init = &PTU_param,      ev = init

            --value of the channel 
            VAR PTU_param.fread,                                init = 1,               ev = init

            --limit value
            VAR Ap_page1_bar_graphs[0].limVal[0],               init = 1,               ev = init   

            --limit value type
            VAR Ap_page1_bar_graphs[0].limValtype[0],           init = EQUAL,           ev = init   

            --Color for different limits
            VAR Ap_page1_bar_graphs[0].limColor[0],             init = YELLOW,          ev = init   

            --Color of the bargraph
            VAR Ap_page1_bar_graphs[0].ePenColor,               init = YELLOW,          ev = init

            --Number limit
            VAR Page_num_boxes[0].numLimit,                     init = 1,               ev = init               

            VAR Page_num_boxes[0].psParam,                      init = &PTU_param1,     ev = init

            --Parameter r driving the number
            VAR PTU_param1.fread,                               init = 1,               ev = init

            --limit value
            VAR Page_num_boxes[0].limVal[0],                    init = 1,               ev = init   

            --limit value type
            VAR Page_num_boxes[0].limValtype[0],                init = EQUAL,           ev = init

            --Color for different limits
            VAR Page_num_boxes[0].limColor[0],                  init = YELLOW,          ev = init   

            --Pen color
            VAR Page_num_boxes[0].ePenColor,                    init = YELLOW,          ev = init
            
            --Holds Button 1 press flag for splash screen
            VAR Splash_b1_press,                                init = 0,               ev = init
            
            --Button 1
            VAR Switches.b1,                                    init = 0,               ev = init

            --Button 2
            VAR Switches.b2,                                    init = 0,               ev = init

            --Button 3
            VAR Switches.b3,                                    init = 0,               ev = init

            --Button 4
            VAR Switches.b4,                                    init = 0,               ev = init

            --Button 5
            VAR Switches.b5,                                    init = 0,               ev = init

            --Button 6
            VAR Switches.b6,                                    init = 0,               ev = init

            --Button 7
            VAR Switches.b7,                                    init = 0,               ev = init

            --Button 8
            VAR Switches.b8,                                    init = 0,               ev = init
			
			--Button 10
            VAR Switches.b10,            init = 0,       ev = init
			
			--Button 11
            VAR Switches.b11,            init = 0,       ev = init
			
			--Button 12
            VAR Switches.b12,            init = 0,       ev = init
			
			--Button 13
            VAR Switches.b13,            init = 0,       ev = init 

            --Button c1
            VAR Switches.c1,                                    init = 0,               ev = init

            --Button c2
            VAR Switches.c2,                                    init = 0,               ev = init

            --Button c3
            VAR Switches.c3,                                    init = 0,               ev = init

            --Left Encoder selection
            VAR Switches.sLE.pressed,                           init = 0,               ev = init

            --Right Encoder selection
            VAR Switches.sRE.pressed,                           init = 0,               ev = init

            --Left Twist selection
            VAR Switches.sLE.twist,                             init = 1,               ev = init
            
            --Right Twist selection
            VAR Switches.sRE.twist,                             init = 1,               ev = init
            
            --flag of page setting
            VAR Acdt_flag,                                      init = FALSE,           ev = init
									

            VAR Ap_page2_carrot[0].numLimit,                init = 1,                   ev = init   
    
            VAR Ap_page2_carrot[0].psParam,                 init = &PTU_param2,         ev = init
    
            --limit value
            VAR Ap_page2_carrot[0].limVal[0],               init = 1,                   ev = init   
    
            --limit value type
            VAR Ap_page2_carrot[0].limValtype[0],           init = EQUAL,               ev = init   
    
            --Color for different limits
            VAR Ap_page2_carrot[0].limColor[0],             init = YELLOW,              ev = init   
			
			VAR Ap_page2_carrot[0].sUpperLeft.u16Y0,			init = 1,               ev = init
			
			VAR Ap_page2_carrot[0].sDialCenterOffset.u16Y0,			init = 1,               ev = init
			
			VAR Ap_page2_carrot[0].sDigCenterOffset.u16Y0,			init = 1,               ev = init
			
			VAR Ap_page2_carrot[0].u16Format,					init = 1,               ev = init			
			
			
			--VAR Ap_page_tbs.eFontColor,						init = YELLOW,              ev = init
			
			VAR Ap_page_tbs[0].psParam,                 	init = &PTU_param3,         ev = init
			
            --Parameter r driving the number
            VAR PTU_param2.fread,                               init = 1,               ev = init

            --Parameter r driving the number
            VAR PTU_param3.fread,                               init = 1,               ev = init	 
			
			--VAR Bitmap_crc_check_bit[1],					init = TRUE,				ev = init
 
        COMMENT OUTPUT SECTION:
                                                            
             --Status of channel
            VAR PTU_param.stat,                                 init =PARAM_OK,             ev = init  

            --Parameter stat driving the number
            VAR PTU_param1.stat,                                init =PARAM_OK,             ev = init
            
            --
            VAR Splash_done,                                    init = ZERO,                ev = 1
			
			VAR Page_parameter_error,        init = FALSE,       ev = init
            
            
        COMMENT INPUT/OUTPUT SECTION:
                                                            
            --None  
            
        -- Stub Calls:
                                                                
        SIMUL
            
            --reads the message from RTD 
            STUB RTDGetParam(1)
            STUB RTDGetParam(1)

            --reads the discrete word
            STUB RTDGetParamDdw(2)
            
            --allows the calling task to delay for a specific number of clock ticks
            STUB  OsTimeDly(250)

            --To load the background
            STUB ForegroundLoadBackground((T_UINT16 *)(BG_IMAGE_ADDR+(Page_num*PAGE_BITMAP_NUM_OF_SECTOR*SECTOR_SIZE)))

            --extracts page wise settings from PDI
            STUB PdiPageDataInit(Page_num)

            --disables the text box
            STUB TextBoxOff(&Prim_cool_down_pop_up_box)

            --Allocates number box structure
            STUB NumboxAllocat(Page_num_boxes)

            --Allocates number box structure
            STUB BargraphAllocat(Ap_page1_bar_graphs)
			
			--Allocates Carrot Graph structure
			STUB CarrotGraphAllocat (Ap_page2_carrot)
				
			--Allocates Text structure
			STUB TextAllocatPdi(&Page_txt[0].ppsOwner,Page_txt[0].u16X0,Page_txt[0].u16Y0,Page_txt[0].eTXAlign,Page_txt[0].eTXFont,Page_txt[0].ePenColor,Page_txt[0].eTXV,Page_txt[0].eTXFlash)
				
			--Allocates Text Box structure
			STUB TextBoxPdiAllocate (Ap_page_tbs)			

            --configures the timer initializations and all text boxes 
            STUB MenuInit()

        END SIMUL
                                            
        -- Calling the Unit Under Test 
        #GrappApp();
        
    END ELEMENT

END TEST -- TEST 1

TEST 2
FAMILY nominal

    COMMENT  Test Description
    COMMENT  <TD>   
    COMMENT  [hdudispfgrapp-GrappApp-DB-LLR-003]
    COMMENT  The function 'GrappApp' does the following when Splash done is zero and COND is true.
	COMMENT - Set splash done to 1.
	COMMENT - Set Page_num to EPAGE1,Cool_down_select to FALSE , Fuel_flow_select to FUEL_FLOW_ON and
	COMMENT   Active_eiu to EIU1 if Nv_crc_fail is equal to TRUE AND Du_position is equal to ONE
	COMMENT - Call functions OffsideSwitchScreen with Page_num as parameter,OffsideCoolTimer with Cool_down_select as parameter
	COMMENT  and GlobalSettingsSetEIU with  Active_eiu as parameter when Du_position is equal to ONE
	COMMENT - Call functions OsTimeDly with parameter 250 and ForegroundLoadBackground with sum of BG_IMAGE_ADDR and product 
	COMMENT of Page_num, PAGE_BITMAP_NUM_OF_SECTOR and SECTOR_SIZE as its parameter.
	COMMENT - Call the function PdiPageDataInit with Page_num as its parameter
	COMMENT - Call the function RoundDialsInit with Ap_page0_dials as its parameter
	COMMENT - Call the function NumberBoxInit with Page_num_boxes as its parameter
	COMMENT - Call the function BarGraphInit with Ap_page1_bar_graphs as its parameter
	COMMENT - donothing when Bitmap_crc_check_bit with index Page_num is equal to TRUE.		
	COMMENT - Call function TextBoxOff with reference to Prim_cool_down_pop_up_box as parameter.
	COMMENT - Set s16ULX of Prim_cool_down_pop_up_box to u16_x of acdt_axis of Page_settings minus COOLDOWN_AXIS_CALIBRATION,
	COMMENT Set s16ULY of Prim_cool_down_pop_up_box to u16_y of acdt_axis of Page_settings minus COOLDOWN_AXIS_CALIBRATION when
	COMMENT Acdt_flag is equal to TRUE.
	COMMENT - Call function MenuInit.
	COMMENT 3.Return from the function.
	COMMENT
	COMMENT COND : COND1 OR COND2 OR COND3 OR COND4 OR COND5
	COMMENT
	COMMENT COND1 : Splash timer is greater than or equal to SPLASH_TIME  
	COMMENT COND2 : Splash_b1_press is zero AND any one of the buttons from Switches is pressed(i.e b1,b2,b3,b4,b5,b6,b7,b8,b10,b11,b12,b13,c1,c2,c3, sLE, sRe)
	COMMENT COND3 : twist of sLE of Switches is not equal to zero 
	COMMENT COND4 : twist of sRe of Switches is not equal to zero  
    COMMENT COND5 : flag which indicate first demo mode  Bitwise and Demo_active bitwise and of result of COND6
	COMMENT COND6 : splash timer is greater than or equal to SPLASH_TIME
    COMMENT Equivalence class 62,63,64,65,66,67,68,69,76,194,74,88,89,90,91,92,93,94,95,96,97,98,100,192,111,195,213,220,214,215,216 
    COMMENT  MCDC Covered  FTTXXXXXXXXXXXXXXXXXXX
    COMMENT </TD>
    
    ELEMENT


        COMMENT INPUT SECTION:
		
			VAR Pg_cnt,        init = 1,       ev = init
			
            VAR Ap_poly_graph[0].polygon_shape,        init = FG_RED_X_SHAPE,       ev = init
        
            --data read from Parameters[0]                                                        
            VAR Port1_label_count,                              init = 2,                           ev = init

            --type of the parameter
            VAR Parameters[1].type,                             init = BNR,                         ev = init

            --data read from Parameters[2]
            VAR PTU_parameters[1].reading,                      init = NCD,                         ev = init
            
            --data read from Parameters[2]
            VAR PTU_parameters_numbox[1].reading,               init = NCD,                         ev = init
            
            --type of the parameter
            VAR Parameters[2].type,                             init = BCD,                         ev = init
            
            --data read from Parameters[2]
            VAR PTU_parameters_numbox[2].reading,               init = NCD,                         ev = init
            
            --Counter value used to loop 
            VAR Bg_cnt,                                         init = 1,                           ev = init
			
			VAR Cg_cnt,                                         init = 1,               ev = init
			
            VAR Text_cnt,                                       init = 1,               ev = init
			
            VAR Tb_cnt,                                         init = 1,               ev = init

            --Counter value used to loop 
            VAR Nb_cnt,                                         init = 1,                           ev = init

            --Number limit
            VAR Ap_page1_bar_graphs[0].numLimit,                init = 1,                           ev = init   

            --
            VAR Ap_page1_bar_graphs[0].psParam,                 init = &PTU_param,                  ev = init

            --value of the channel 
            VAR PTU_param.fread,                                init = 1,                           ev = init

            --limit value
            VAR Ap_page1_bar_graphs[0].limVal[0],               init = 1,                           ev = init   

            --limit value type
            VAR Ap_page1_bar_graphs[0].limValtype[0],           init = EQUAL,                       ev = init   

            --Color for different limits
            VAR Ap_page1_bar_graphs[0].limColor[0],             init = YELLOW,                      ev = init   

            --Color of the bargraph
            VAR Ap_page1_bar_graphs[0].ePenColor,               init = YELLOW,                      ev = init

            --Number limit
            VAR Page_num_boxes[0].numLimit,                     init = 1,                           ev = init               

            VAR Page_num_boxes[0].psParam,                      init = &PTU_param1,                 ev = init

            --Parameter r driving the number
            VAR PTU_param1.fread,                               init = 1,                           ev = init

            --limit value
            VAR Page_num_boxes[0].limVal[0],                    init = 1,                           ev = init   

            --limit value type
            VAR Page_num_boxes[0].limValtype[0],                init = EQUAL,                       ev = init

            --Color for different limits
            VAR Page_num_boxes[0].limColor[0],                  init = YELLOW,                      ev = init   

            --Pen color
            VAR Page_num_boxes[0].ePenColor,                    init = YELLOW,                      ev = init
            
            --Holds Button 1 press flag for splash screen
            VAR Splash_b1_press,                                init = 0,                           ev = init
            
            --Button 1
            VAR Switches.b1,                                    init = 1,                           ev = init

            --Button 2
            VAR Switches.b2,                                    init = 0,                           ev = init

            --Button 3
            VAR Switches.b3,                                    init = 0,                           ev = init

            --Button 4
            VAR Switches.b4,                                    init = 0,                           ev = init

            --Button 5
            VAR Switches.b5,                                    init = 0,                           ev = init

            --Button 6
            VAR Switches.b6,                                    init = 0,                           ev = init

            --Button 7
            VAR Switches.b7,                                    init = 0,                           ev = init

            --Button 8
            VAR Switches.b8,                                    init = 0,                           ev = init
			
			--Button 10
            VAR Switches.b10,            						init = 0,      						ev = init
			
			--Button 11
            VAR Switches.b11,            						init = 0,       					ev = init
			
			--Button 12
            VAR Switches.b12,            						init = 0,       					ev = init
			
			--Button 13
            VAR Switches.b13,            						init = 0,       					ev = init 

            --Button c1
            VAR Switches.c1,                                    init = 0,                           ev = init

            --Button c2
            VAR Switches.c2,                                    init = 0,                           ev = init

            --Button c3
            VAR Switches.c3,                                    init = 0,                           ev = init

            --Left Encoder selection
            VAR Switches.sLE.pressed,                           init = 0,                           ev = init

            --Right Encoder selection
            VAR Switches.sRE.pressed,                           init = 0,                           ev = init
            
            --Left Twist selection
            VAR Switches.sLE.twist,                             init = 1,                           ev = init
            
            --Right Twist selection
            VAR Switches.sRE.twist,                             init = 1,                           ev = init
            
            --NV RAM CRC fail check
            VAR Nv_crc_fail,                                    init = FALSE,                       ev = init

            --Position value of Display Unit 
            VAR Du_position,                                    init = 0,                           ev = init

            --Counter used to loop
            VAR Rd_cnt,                                         init = 1,                           ev = init

            --flag of page setting
            VAR Acdt_flag,                                      init = TRUE,                        ev = init

            --X-Axis of the Bottom Center of Bar graph
            VAR Page_settings.acdt_axis.u16_x,                  init = 50,                          ev = init

            --Y-Axis of the Bottom Center of Bar graph
            VAR Page_settings.acdt_axis.u16_y,                  init = 50,                          ev = init
			
			--VAR Bitmap_crc_check_bit[1],					init = TRUE,				ev = init
			

             VAR Page_parameter_error,        init = FALSE,       ev = init   
            
        COMMENT OUTPUT SECTION:
                                                            
             --Status of channel
            VAR PTU_param.stat,                                 init = PARAM_OK,                            ev = init  

            --Parameter stat driving the number
            VAR PTU_param1.stat,                                init = PARAM_OK,                            ev = init
                                                            
        COMMENT INPUT/OUTPUT SECTION:
                                                            
            --Indicates the value of splash screen display
            VAR Splash_done,                                init = ZERO,                            ev = 1
            
        -- Stub Calls:
                                                                
        SIMUL
            
            --reads the message from RTD 
            STUB RTDGetParam(1)
            STUB RTDGetParam(1)

            --reads the discrete word
            STUB RTDGetParamDdw(2)

            --allows the calling task to delay for a specific number of clock ticks
            STUB  OsTimeDly(250)

            --To load the background
            STUB ForegroundLoadBackground((T_UINT16 *)(BG_IMAGE_ADDR+(Page_num*PAGE_BITMAP_NUM_OF_SECTOR*SECTOR_SIZE)))

            --extracts page wise settings from PDI
            STUB PdiPageDataInit(Page_num)

            --Allocate a single round dial
            STUB RoundDialAllocat(Ap_page0_dials)   

            --Allocates number box structure
            STUB NumboxAllocat(Page_num_boxes)

            --Allocates number box structure
            STUB BargraphAllocat(Ap_page1_bar_graphs)
			
			--Allocates Carrot Graph structure
			STUB CarrotGraphAllocat (Ap_page2_carrot)
				
			--Allocates Text structure
			STUB TextAllocatPdi(&Page_txt[0].ppsOwner,Page_txt[0].u16X0,Page_txt[0].u16Y0,Page_txt[0].eTXAlign,Page_txt[0].eTXFont,Page_txt[0].ePenColor,Page_txt[0].eTXV,Page_txt[0].eTXFlash)
				
			--Allocates Text Box structure
			STUB TextBoxPdiAllocate (Ap_page_tbs)

            --configures the timer initializations and all text boxes 
            STUB MenuInit()

            --disables the text box
            STUB TextBoxOff(&Prim_cool_down_pop_up_box)
           
        END SIMUL
                                            
        -- Calling the Unit Under Test 
        #GrappApp();
        
    END ELEMENT

END TEST -- TEST 2

TEST 3
FAMILY nominal

    COMMENT  Test Description
    COMMENT  <TD>   
    COMMENT  [hdudispfgrapp-GrappApp-DB-LLR-003]
    COMMENT  The function 'GrappApp' does the following when Splash done is zero and COND is true.
 	COMMENT - Set splash done to 1.
	COMMENT - Set Page_num to EPAGE1,Cool_down_select to FALSE , Fuel_flow_select to FUEL_FLOW_ON and
	COMMENT   Active_eiu to EIU1 if Nv_crc_fail is equal to TRUE AND Du_position is equal to ONE
 	COMMENT - Call functions OffsideSwitchScreen with Page_num as parameter,OffsideCoolTimer with Cool_down_select as parameter
 	COMMENT  and GlobalSettingsSetEIU with  Active_eiu as parameter when Du_position is equal to ONE
 	COMMENT - Call functions OsTimeDly with parameter 250 and ForegroundLoadBackground with sum of BG_IMAGE_ADDR and product 
 	COMMENT of Page_num, PAGE_BITMAP_NUM_OF_SECTOR and SECTOR_SIZE as its parameter.
 	COMMENT - Call the function PdiPageDataInit with Page_num as its parameter
 	COMMENT - Call the function RoundDialsInit with Ap_page0_dials as its parameter
 	COMMENT - Call the function NumberBoxInit with Page_num_boxes as its parameter
 	COMMENT - Call the function BarGraphInit with Ap_page1_bar_graphs as its parameter
 	COMMENT - Call function TextBoxOff with reference to Prim_cool_down_pop_up_box as parameter.
 	COMMENT - Set s16ULX of Prim_cool_down_pop_up_box to u16_x of acdt_axis of Page_settings minus COOLDOWN_AXIS_CALIBRATION,
 	COMMENT Set s16ULY of Prim_cool_down_pop_up_box to u16_y of acdt_axis of Page_settings minus COOLDOWN_AXIS_CALIBRATION when
 	COMMENT Acdt_flag is equal to TRUE.
 	COMMENT - Call function MenuInit.
 	COMMENT 3.Return from the function.
 	COMMENT
 	COMMENT COND : COND1 OR COND2 OR COND3 OR COND4 OR COND5
 	COMMENT
 	COMMENT COND1 : Splash timer is greater than or equal to SPLASH_TIME  
 	COMMENT COND2 : Splash_b1_press is zero AND any one of the buttons from Switches is pressed(i.e b1,b2,b3,b4,b5,b6,b7,b8,b10,b11,b12,b13,c1,c2,c3, sLE, sRe)
 	COMMENT COND3 : twist of sLE of Switches is not equal to zero 
	COMMENT COND4 : twist of sRe of Switches is not equal to zero  
    COMMENT COND5 : flag which indicate first demo mode  Bitwise and Demo_active bitwise and of result of COND6
	COMMENT COND6 : splash timer is greater than or equal to SPLASH_TIME
    COMMENT  Equivalence class 62,63,64,65,66,67,68,69,195,75,108,100,110,111,72,115,87,89,90,91,92,93,94,95,96,97,98,192,194,195,213,214,215,216 
    COMMENT  MCDC Covered  FTFTXXXXXXXXXXXXXXXXXX
    COMMENT </TD>
    
    ELEMENT


        COMMENT INPUT SECTION:
		
			VAR Pg_cnt,        init = 1,       ev = init
			
            VAR Ap_poly_graph[0].polygon_shape,        init = FG_RED_X_SHAPE,       ev = init
        
            --data read from Parameters[0]
            VAR Port1_label_count,                              init = 2,                           ev = init

            --type of the parameter
            VAR Parameters[1].type,                             init = BNR,                         ev = init

            --data read from Parameters[2]
            VAR PTU_parameters[1].reading,                      init = NCD,                         ev = init
            
            --data read from Parameters[2]
            VAR PTU_parameters_numbox[1].reading,               init = NCD,                         ev = init
            
            --type of the parameter
            VAR Parameters[2].type,                             init = BCD,                         ev = init
            
            --data read from Parameters[2]
            VAR PTU_parameters_numbox[2].reading,               init = NCD,                         ev = init
            
            --Counter value used to loop 
            VAR Bg_cnt,                                         init = 1,                           ev = init
			
			VAR Cg_cnt,                                         init = 1,               ev = init
			
            VAR Text_cnt,                                       init = 1,               ev = init
			
            VAR Tb_cnt,                                         init = 1,               ev = init

            --Counter value used to loop 
            VAR Nb_cnt,                                         init = 1,                           ev = init

            --Number limit
            VAR Ap_page1_bar_graphs[0].numLimit,                init = 1,                           ev = init   

			--Parameter driving the pointer
            VAR Ap_page1_bar_graphs[0].psParam,                 init = &PTU_param,                  ev = init

            --value of the channel 
            VAR PTU_param.fread,                                init = 1,                           ev = init

            --limit value
            VAR Ap_page1_bar_graphs[0].limVal[0],               init = 1,                           ev = init   

            --limit value type
            VAR Ap_page1_bar_graphs[0].limValtype[0],           init = EQUAL,                       ev = init   

            --Color for different limits
            VAR Ap_page1_bar_graphs[0].limColor[0],             init = YELLOW,                      ev = init   

            --Color of the bargraph
            VAR Ap_page1_bar_graphs[0].ePenColor,               init = YELLOW,                      ev = init

            --Number limit
            VAR Page_num_boxes[0].numLimit,                     init = 1,                           ev = init               

            VAR Page_num_boxes[0].psParam,                      init = &PTU_param1,                 ev = init

            --Parameter r driving the number
            VAR PTU_param1.fread,                               init = 1,                           ev = init

            --limit value
            VAR Page_num_boxes[0].limVal[0],                    init = 1,                           ev = init   

            --limit value type
            VAR Page_num_boxes[0].limValtype[0],                init = EQUAL,                       ev = init

            --Color for different limits
            VAR Page_num_boxes[0].limColor[0],                  init = YELLOW,                      ev = init   

            --Pen color
            VAR Page_num_boxes[0].ePenColor,                    init = YELLOW,                      ev = init
            
            --Button 1
            VAR Switches.b1,                                    init = 0,                           ev = init

            --Button 2
            VAR Switches.b2,                                    init = 1,                           ev = init

            --Button 3
            VAR Switches.b3,                                    init = 0,                           ev = init

            --Button 4
            VAR Switches.b4,                                    init = 0,                           ev = init

            --Button 5
            VAR Switches.b5,                                    init = 0,                           ev = init

            --Button 6
            VAR Switches.b6,                                    init = 0,                           ev = init

            --Button 7
            VAR Switches.b7,                                    init = 0,                           ev = init

            --Button 8
            VAR Switches.b8,                                    init = 0,                           ev = init
			
			--Button 10
            VAR Switches.b10,            init = 0,       ev = init
			
			--Button 11
            VAR Switches.b11,            init = 0,       ev = init
			
			--Button 12
            VAR Switches.b12,            init = 0,       ev = init
			
			--Button 13
            VAR Switches.b13,            init = 0,       ev = init 

            --Button c1
            VAR Switches.c1,                                    init = 0,                           ev = init

            --Button c2
            VAR Switches.c2,                                    init = 0,                           ev = init

            --Button c3
            VAR Switches.c3,                                    init = 0,                           ev = init

            --Left Encoder selection
            VAR Switches.sLE.pressed,                           init = 0,                           ev = init

            --Right Encoder selection
            VAR Switches.sRE.pressed,                           init = 0,                           ev = init

            --Holds Button 1 press flag for splash screen
            VAR Splash_b1_press,                                init = 0,                           ev = init
            
            --Left Twist selection
            VAR Switches.sLE.twist,                             init = 1,                           ev = init
            
            --Right Twist selection
            VAR Switches.sRE.twist,                             init = 1,                           ev = init
            
            --NV RAM CRC fail check
            VAR Nv_crc_fail,                                    init = FALSE,                       ev = init

            --Position value of Display Unit 
            VAR Du_position,                                    init = 0,                           ev = init

            --Counter used to loop
            VAR Rd_cnt,                                         init = 1,                           ev = init

            --flag of page setting
            VAR Acdt_flag,                                      init = TRUE,                        ev = init

            --X-Axis of the Bottom Center of Bar graph
            VAR Page_settings.acdt_axis.u16_x,                  init = 50,                          ev = init

            --Y-Axis of the Bottom Center of Bar graph
            VAR Page_settings.acdt_axis.u16_y,                  init = 50,                          ev = init
			
			--VAR Bitmap_crc_check_bit[1],					init = TRUE,				ev = init
			
			VAR Page_parameter_error,        init = FALSE,       ev = init
            
        COMMENT OUTPUT SECTION:
                                                            
             --Status of channel
            VAR PTU_param.stat,                                 init = PARAM_OK,                    ev = init  

            --Parameter stat driving the number
            VAR PTU_param1.stat,                                init = PARAM_OK,                    ev = init
                                                            
        COMMENT INPUT/OUTPUT SECTION:
                                                            
            --Indicates the value of splash screen display
                VAR Splash_done,                                init = ZERO,                        ev = 1
            
        -- Stub Calls:
                                                                
        SIMUL
            
            --reads the message from RTD 
            STUB RTDGetParam(1)
            STUB RTDGetParam(1)

            --reads the discrete word
            STUB RTDGetParamDdw(2)

            --allows the calling task to delay for a specific number of clock ticks
            STUB  OsTimeDly(250)

            --To load the background
            STUB ForegroundLoadBackground((T_UINT16 *)(BG_IMAGE_ADDR+(Page_num*PAGE_BITMAP_NUM_OF_SECTOR*SECTOR_SIZE)))

            --extracts page wise settings from PDI
            STUB PdiPageDataInit(Page_num)

            --Allocate a single round dial
            STUB RoundDialAllocat(Ap_page0_dials)   

            --Allocates number box structure
            STUB NumboxAllocat(Page_num_boxes)

            --Allocates number box structure
            STUB BargraphAllocat(Ap_page1_bar_graphs)
			
			--Allocates Carrot Graph structure
			STUB CarrotGraphAllocat (Ap_page2_carrot)
				
			--Allocates Text structure
			STUB TextAllocatPdi(&Page_txt[0].ppsOwner,Page_txt[0].u16X0,Page_txt[0].u16Y0,Page_txt[0].eTXAlign,Page_txt[0].eTXFont,Page_txt[0].ePenColor,Page_txt[0].eTXV,Page_txt[0].eTXFlash)
				
			--Allocates Text Box structure
			STUB TextBoxPdiAllocate (Ap_page_tbs)

            --configures the timer initializations and all text boxes 
            STUB MenuInit()

            --disables the text box
            STUB TextBoxOff(&Prim_cool_down_pop_up_box)

           
        END SIMUL
                                            
        -- Calling the Unit Under Test 
        #GrappApp();
        
    END ELEMENT

END TEST -- TEST 3

TEST 4
FAMILY nominal

    COMMENT  Test Description
    COMMENT  <TD>   
    COMMENT  [hdudispfgrapp-GrappApp-DB-LLR-003]
    COMMENT  The function 'GrappApp' does the following when Splash done is zero and COND is true.
 	COMMENT - Set splash done to 1.
	COMMENT - Set Page_num to EPAGE1,Cool_down_select to FALSE , Fuel_flow_select to FUEL_FLOW_ON and
	COMMENT   Active_eiu to EIU1 if Nv_crc_fail is equal to TRUE AND Du_position is equal to ONE
 	COMMENT - Call functions OffsideSwitchScreen with Page_num as parameter,OffsideCoolTimer with Cool_down_select as parameter
 	COMMENT  and GlobalSettingsSetEIU with  Active_eiu as parameter when Du_position is equal to ONE
 	COMMENT - Call functions OsTimeDly with parameter 250 and ForegroundLoadBackground with sum of BG_IMAGE_ADDR and product 
 	COMMENT of Page_num, PAGE_BITMAP_NUM_OF_SECTOR and SECTOR_SIZE as its parameter.
 	COMMENT - Call the function PdiPageDataInit with Page_num as its parameter
 	COMMENT - Call the function RoundDialsInit with Ap_page0_dials as its parameter
 	COMMENT - Call the function NumberBoxInit with Page_num_boxes as its parameter
 	COMMENT - Call the function BarGraphInit with Ap_page1_bar_graphs as its parameter
 	COMMENT - Call function TextBoxOff with reference to Prim_cool_down_pop_up_box as parameter.
 	COMMENT - Set s16ULX of Prim_cool_down_pop_up_box to u16_x of acdt_axis of Page_settings minus COOLDOWN_AXIS_CALIBRATION,
 	COMMENT Set s16ULY of Prim_cool_down_pop_up_box to u16_y of acdt_axis of Page_settings minus COOLDOWN_AXIS_CALIBRATION when
 	COMMENT Acdt_flag is equal to TRUE.
 	COMMENT - Call function MenuInit.
 	COMMENT 3.Return from the function.
 	COMMENT
 	COMMENT COND : COND1 OR COND2 OR COND3 OR COND4 OR COND5
 	COMMENT
 	COMMENT COND1 : Splash timer is greater than or equal to SPLASH_TIME  
 	COMMENT COND2 : Splash_b1_press is zero AND any one of the buttons from Switches is pressed(i.e b1,b2,b3,b4,b5,b6,b7,b8,b10,b11,b12,b13,c1,c2,c3, sLE, sRe)
 	COMMENT COND3 : twist of sLE of Switches is not equal to zero 
	COMMENT COND4 : twist of sRe of Switches is not equal to zero  
    COMMENT COND5 : flag which indicate first demo mode  Bitwise and Demo_active bitwise and of result of COND6
	COMMENT COND6 : splash timer is greater than or equal to SPLASH_TIME
    COMMENT  Equivalence class 62,63,64,65,66,67,68,69,195,76,108,100,110,111,72,115,87,88,90,91,92,93,94,95,96,97,98,192,194,195
	COMMENT 				   213,214,215,216 
    COMMENT  MCDC Covered FTFFTXXXXXXXXXXXXXXXXX
    COMMENT </TD>
    
    ELEMENT


        COMMENT INPUT SECTION:
		
			VAR Pg_cnt,        init = 1,       ev = init
			
            VAR Ap_poly_graph[0].polygon_shape,        init = FG_RED_X_SHAPE,       ev = init
        
            --data read from Parameters[0]
            VAR Port1_label_count,                              init = 2,                           ev = init

            --type of the parameter
            VAR Parameters[1].type,                             init = BNR,                         ev = init

            --data read from Parameters[2]
            VAR PTU_parameters[1].reading,                      init = NCD,                         ev = init
            
            --data read from Parameters[2]
            VAR PTU_parameters_numbox[1].reading,               init = NCD,                         ev = init
            
            --type of the parameter
            VAR Parameters[2].type,                             init = BCD,                         ev = init
            
            --data read from Parameters[2]
            VAR PTU_parameters_numbox[2].reading,               init = NCD,                         ev = init
            
            --Counter value used to loop 
            VAR Bg_cnt,                                         init = 1,                           ev = init
			
			VAR Cg_cnt,                                         init = 1,               ev = init
			
            VAR Text_cnt,                                       init = 1,               ev = init
			
            VAR Tb_cnt,                                         init = 1,               ev = init

            --Counter value used to loop 
            VAR Nb_cnt,                                         init = 1,                           ev = init

            --Number limit
            VAR Ap_page1_bar_graphs[0].numLimit,                init = 1,                           ev = init   

            VAR Ap_page1_bar_graphs[0].psParam,                 init = &PTU_param,                  ev = init

            --value of the channel 
            VAR PTU_param.fread,                                init = 1,                           ev = init

            --limit value
            VAR Ap_page1_bar_graphs[0].limVal[0],               init = 1,                           ev = init   

            --limit value type
            VAR Ap_page1_bar_graphs[0].limValtype[0],           init = EQUAL,                       ev = init   

            --Color for different limits
            VAR Ap_page1_bar_graphs[0].limColor[0],             init = YELLOW,                      ev = init   

            --Color of the bargraph
            VAR Ap_page1_bar_graphs[0].ePenColor,               init = YELLOW,                      ev = init

            --Number limit
            VAR Page_num_boxes[0].numLimit,                     init = 1,                           ev = init               

            VAR Page_num_boxes[0].psParam,                      init = &PTU_param1,                 ev = init

            --Parameter r driving the number
            VAR PTU_param1.fread,                               init = 1,                           ev = init

            --limit value
            VAR Page_num_boxes[0].limVal[0],                    init = 1,                           ev = init   

            --limit value type
            VAR Page_num_boxes[0].limValtype[0],                init = EQUAL,                       ev = init

            --Color for different limits
            VAR Page_num_boxes[0].limColor[0],                  init = YELLOW,                      ev = init   

            --Pen color
            VAR Page_num_boxes[0].ePenColor,                    init = YELLOW,                      ev = init
            
            --Holds Button 1 press flag for splash screen
            VAR Splash_b1_press,                                init = 0,                           ev = init

            --Left Twist selection
            VAR Switches.sLE.twist,                             init = 1,                           ev = init

            --Right Twist selection
            VAR Switches.sRE.twist,                             init = 1,                           ev = init
    
            --Button 1
            VAR Switches.b1,                                    init = 0,                           ev = init

            --Button 2
            VAR Switches.b2,                                    init = 0,                           ev = init

            --Button 3
            VAR Switches.b3,                                    init = 1,                           ev = init

            --Button 4
            VAR Switches.b4,                                    init = 0,                           ev = init

            --Button 5
            VAR Switches.b5,                                    init = 0,                           ev = init

            --Button 6
            VAR Switches.b6,                                    init = 0,                           ev = init

            --Button 7
            VAR Switches.b7,                                    init = 0,                           ev = init

            --Button 8
            VAR Switches.b8,                                    init = 0,                           ev = init
			
			--Button 10
            VAR Switches.b10,            init = 0,       ev = init
			
			--Button 11
            VAR Switches.b11,            init = 0,       ev = init
			
			--Button 12
            VAR Switches.b12,            init = 0,       ev = init
			
			--Button 13
            VAR Switches.b13,            init = 0,       ev = init 

            --Button c1
            VAR Switches.c1,                                    init = 0,                           ev = init

            --Button c2
            VAR Switches.c2,                                    init = 0,                           ev = init

            --Button c3
            VAR Switches.c3,                                    init = 0,                           ev = init

            --Left Encoder selection
            VAR Switches.sLE.pressed,                           init = 0,                           ev = init

            --Right Encoder selection
            VAR Switches.sRE.pressed,                           init = 0,                           ev = init
            
            --NV RAM CRC fail check
            VAR Nv_crc_fail,                                    init = FALSE,                       ev = init

            --Position value of Display Unit 
            VAR Du_position,                                    init = 0,                           ev = init

            --Counter used to loop
            VAR Rd_cnt,                                         init = 1,                           ev = init
            
            --flag of page setting
            VAR Acdt_flag,                                      init = TRUE,                        ev = init

            --X-Axis of the Bottom Center of Bar graph
            VAR Page_settings.acdt_axis.u16_x,                  init = 50,                          ev = init

            --Y-Axis of the Bottom Center of Bar graph
            VAR Page_settings.acdt_axis.u16_y,                  init = 50,                          ev = init
			
			--VAR Bitmap_crc_check_bit[1],					init = TRUE,				ev = init
			
			VAR Page_parameter_error,        init = FALSE,       ev = init
                
            
        COMMENT OUTPUT SECTION:
                                                            
             --Status of channel
            VAR PTU_param.stat,                                 init = PARAM_OK,                    ev = init  

            --Parameter stat driving the number
            VAR PTU_param1.stat,                                init = PARAM_OK,                    ev = init
                                                            
        COMMENT INPUT/OUTPUT SECTION:
                                                            
            --Indicates the value of splash screen display
                VAR Splash_done,                                init = ZERO,                        ev = 1
            
        -- Stub Calls:
                                                                
        SIMUL
            
            --reads the message from RTD 
            STUB RTDGetParam(1)
            STUB RTDGetParam(1)

            --reads the discrete word
            STUB RTDGetParamDdw(2)

            --allows the calling task to delay for a specific number of clock ticks
            STUB  OsTimeDly(250)

            --To load the background
            STUB ForegroundLoadBackground((T_UINT16 *)(BG_IMAGE_ADDR+(Page_num*PAGE_BITMAP_NUM_OF_SECTOR*SECTOR_SIZE)))

            --extracts page wise settings from PDI
            STUB PdiPageDataInit(Page_num)

            --Allocate a single round dial
            STUB RoundDialAllocat(Ap_page0_dials)   

            --Allocates number box structure
            STUB NumboxAllocat(Page_num_boxes)

            --Allocates number box structure
            STUB BargraphAllocat(Ap_page1_bar_graphs)
			
			--Allocates Carrot Graph structure
			STUB CarrotGraphAllocat (Ap_page2_carrot)
				
			--Allocates Text structure
			STUB TextAllocatPdi(&Page_txt[0].ppsOwner,Page_txt[0].u16X0,Page_txt[0].u16Y0,Page_txt[0].eTXAlign,Page_txt[0].eTXFont,Page_txt[0].ePenColor,Page_txt[0].eTXV,Page_txt[0].eTXFlash)
				
			--Allocates Text Box structure
			STUB TextBoxPdiAllocate (Ap_page_tbs)

            --configures the timer initializations and all text boxes 
            STUB MenuInit()

            --disables the text box
            STUB TextBoxOff(&Prim_cool_down_pop_up_box)
           
        END SIMUL
                                            
        -- Calling the Unit Under Test 
        #GrappApp();
        
    END ELEMENT

END TEST -- TEST 4


TEST 5
FAMILY nominal

    COMMENT  Test Description
    COMMENT  <TD>   
    COMMENT  [hdudispfgrapp-GrappApp-DB-LLR-003]
    COMMENT  The function 'GrappApp' does the following when Splash done is zero and COND is true.
 	COMMENT - Set splash done to 1.
	COMMENT - Set Page_num to EPAGE1,Cool_down_select to FALSE , Fuel_flow_select to FUEL_FLOW_ON and
	COMMENT   Active_eiu to EIU1 if Nv_crc_fail is equal to TRUE AND Du_position is equal to ONE
 	COMMENT - Call functions OffsideSwitchScreen with Page_num as parameter,OffsideCoolTimer with Cool_down_select as parameter
 	COMMENT  and GlobalSettingsSetEIU with  Active_eiu as parameter when Du_position is equal to ONE
 	COMMENT - Call functions OsTimeDly with parameter 250 and ForegroundLoadBackground with sum of BG_IMAGE_ADDR and product 
 	COMMENT of Page_num, PAGE_BITMAP_NUM_OF_SECTOR and SECTOR_SIZE as its parameter.
 	COMMENT - Call the function PdiPageDataInit with Page_num as its parameter
 	COMMENT - Call the function RoundDialsInit with Ap_page0_dials as its parameter
 	COMMENT - Call the function NumberBoxInit with Page_num_boxes as its parameter
 	COMMENT - Call the function BarGraphInit with Ap_page1_bar_graphs as its parameter
 	COMMENT - Call function TextBoxOff with reference to Prim_cool_down_pop_up_box as parameter.
 	COMMENT - Set s16ULX of Prim_cool_down_pop_up_box to u16_x of acdt_axis of Page_settings minus COOLDOWN_AXIS_CALIBRATION,
 	COMMENT Set s16ULY of Prim_cool_down_pop_up_box to u16_y of acdt_axis of Page_settings minus COOLDOWN_AXIS_CALIBRATION when
 	COMMENT Acdt_flag is equal to TRUE.
 	COMMENT - Call function MenuInit.
 	COMMENT 3.Return from the function.
 	COMMENT
 	COMMENT COND : COND1 OR COND2 OR COND3 OR COND4 OR COND5
 	COMMENT
 	COMMENT COND1 : Splash timer is greater than or equal to SPLASH_TIME  
 	COMMENT COND2 : Splash_b1_press is zero AND any one of the buttons from Switches is pressed(i.e b1,b2,b3,b4,b5,b6,b7,b8,b10,b11,b12,b13,c1,c2,c3, sLE, sRe)
 	COMMENT COND3 : twist of sLE of Switches is not equal to zero 
	COMMENT COND4 : twist of sRe of Switches is not equal to zero  
    COMMENT COND5 : flag which indicate first demo mode  Bitwise and Demo_active bitwise and of result of COND6
	COMMENT COND6 : splash timer is greater than or equal to SPLASH_TIME
    COMMENT  Equivalence class 62,63,64,65,66,67,68,69,195,77,108,100,110,72,115,87,88,89,90,91,92,93,94,95,96,97,98,192,194,195
	COMMENT 				   213,214,215,216 
    COMMENT  MCDC Covered  FTFFFTXXXXXXXXXXXXXXXX
    COMMENT </TD>
    
    ELEMENT


        COMMENT INPUT SECTION:
		
			VAR Pg_cnt,        init = 1,       ev = init
			
            VAR Ap_poly_graph[0].polygon_shape,        init = FG_RED_X_SHAPE,       ev = init
        
            --data read from Parameters[0]
            VAR Port1_label_count,                              init = 2,                           ev = init

            --type of the parameter
            VAR Parameters[1].type,                             init = BNR,                         ev = init

            --data read from Parameters[2]
            VAR PTU_parameters[1].reading,                      init = NCD,                         ev = init
            
            --data read from Parameters[2]
            VAR PTU_parameters_numbox[1].reading,               init = NCD,                         ev = init
            
            --type of the parameter
            VAR Parameters[2].type,                             init = BCD,                         ev = init
            
            --data read from Parameters[2]
            VAR PTU_parameters_numbox[2].reading,               init = NCD,                         ev = init
            
            --Counter value used to loop 
            VAR Bg_cnt,                                         init = 1,                           ev = init
			
			VAR Cg_cnt,                                         init = 1,               ev = init
			
            VAR Text_cnt,                                       init = 1,               ev = init
			
            VAR Tb_cnt,                                         init = 1,               ev = init

            --Counter value used to loop 
            VAR Nb_cnt,                                         init = 1,                           ev = init

            --Number limit
            VAR Ap_page1_bar_graphs[0].numLimit,                init = 1,                           ev = init   

            VAR Ap_page1_bar_graphs[0].psParam,                 init = &PTU_param,                  ev = init

            --value of the channel 
            VAR PTU_param.fread,                                init = 1,                           ev = init

            --limit value
            VAR Ap_page1_bar_graphs[0].limVal[0],               init = 1,                           ev = init   

            --limit value type
            VAR Ap_page1_bar_graphs[0].limValtype[0],           init = EQUAL,                       ev = init   

            --Color for different limits
            VAR Ap_page1_bar_graphs[0].limColor[0],             init = YELLOW,                      ev = init   

            --Color of the bargraph
            VAR Ap_page1_bar_graphs[0].ePenColor,               init = YELLOW,                      ev = init

            --Number limit
            VAR Page_num_boxes[0].numLimit,                     init = 1,                           ev = init               

            VAR Page_num_boxes[0].psParam,                      init = &PTU_param1,                 ev = init

            --Parameter r driving the number
            VAR PTU_param1.fread,                               init = 1,                           ev = init

            --limit value
            VAR Page_num_boxes[0].limVal[0],                    init = 1,                           ev = init   

            --limit value type
            VAR Page_num_boxes[0].limValtype[0],                init = EQUAL,                       ev = init

            --Color for different limits
            VAR Page_num_boxes[0].limColor[0],                  init = YELLOW,                      ev = init   

            --Pen color
            VAR Page_num_boxes[0].ePenColor,                    init = YELLOW,                      ev = init

            --Holds Button 1 press flag for splash screen
            VAR Splash_b1_press,                                init = 0,                           ev = init
            
            --Left Twist selection
            VAR Switches.sLE.twist,                             init = 1,                           ev = init
            
            --Right Twist selection
            VAR Switches.sRE.twist,                             init = 1,                           ev = init
                
            --Button 1
            VAR Switches.b1,                                    init = 0,                           ev = init

            --Button 2
            VAR Switches.b2,                                    init = 0,                           ev = init

            --Button 3
            VAR Switches.b3,                                    init = 0,                           ev = init

            --Button 4
            VAR Switches.b4,                                    init = 1,                           ev = init

            --Button 5
            VAR Switches.b5,                                    init = 0,                           ev = init

            --Button 6
            VAR Switches.b6,                                    init = 0,                           ev = init

            --Button 7
            VAR Switches.b7,                                    init = 0,                           ev = init

            --Button 8
            VAR Switches.b8,                                    init = 0,                           ev = init
			
			--Button 10
            VAR Switches.b10,            init = 0,       ev = init
			
			--Button 11
            VAR Switches.b11,            init = 0,       ev = init
			
			--Button 12
            VAR Switches.b12,            init = 0,       ev = init
			
			--Button 13
            VAR Switches.b13,            init = 0,       ev = init 

            --Button c1
            VAR Switches.c1,                                    init = 0,                           ev = init

            --Button c2
            VAR Switches.c2,                                    init = 0,                           ev = init

            --Button c3
            VAR Switches.c3,                                    init = 0,                           ev = init

            --Left Encoder selection
            VAR Switches.sLE.pressed,                           init = 0,                           ev = init

            --Right Encoder selection
            VAR Switches.sRE.pressed,                           init = 0,                           ev = init
            
            --NV RAM CRC fail check
            VAR Nv_crc_fail,                                    init = FALSE,                       ev = init

            --Position value of Display Unit 
            VAR Du_position,                                    init = 0,                           ev = init

            --Counter used to loop
            VAR Rd_cnt,                                         init = 1,                           ev = init

            --flag of page setting
            VAR Acdt_flag,                                      init = TRUE,                        ev = init

            --X-Axis of the Bottom Center of Bar graph
            VAR Page_settings.acdt_axis.u16_x,                  init = 50,                          ev = init

            --Y-Axis of the Bottom Center of Bar graph
            VAR Page_settings.acdt_axis.u16_y,                  init = 50,                          ev = init
			
			--VAR Bitmap_crc_check_bit[1],					init = TRUE,				ev = init
			
			VAR Page_parameter_error,        init = FALSE,       ev = init
                
            
        COMMENT OUTPUT SECTION:
                                                            
             --Status of channel
            VAR PTU_param.stat,                                 init = PARAM_OK,                    ev = init  
    
            --Parameter stat driving the number
            VAR PTU_param1.stat,                                init = PARAM_OK ,                   ev = init
                                                            
        COMMENT INPUT/OUTPUT SECTION:
                                                            
            --Indicates the value of splash screen display
                VAR Splash_done,                                init = ZERO,                        ev = 1
            
        -- Stub Calls:
                                                                
        SIMUL
            
            --reads the message from RTD 
            STUB RTDGetParam(1)
            STUB RTDGetParam(1)

            --reads the discrete word
            STUB RTDGetParamDdw(2)

            --allows the calling task to delay for a specific number of clock ticks
            STUB  OsTimeDly(250)

            --To load the background
            STUB ForegroundLoadBackground((T_UINT16 *)(BG_IMAGE_ADDR+(Page_num*PAGE_BITMAP_NUM_OF_SECTOR*SECTOR_SIZE)))

            --extracts page wise settings from PDI
            STUB PdiPageDataInit(Page_num)

            --Allocate a single round dial
            STUB RoundDialAllocat(Ap_page0_dials)   

            --Allocates number box structure
            STUB NumboxAllocat(Page_num_boxes)

            --Allocates number box structure
            STUB BargraphAllocat(Ap_page1_bar_graphs)
			
			--Allocates Carrot Graph structure
			STUB CarrotGraphAllocat (Ap_page2_carrot)
				
			--Allocates Text structure
			STUB TextAllocatPdi(&Page_txt[0].ppsOwner,Page_txt[0].u16X0,Page_txt[0].u16Y0,Page_txt[0].eTXAlign,Page_txt[0].eTXFont,Page_txt[0].ePenColor,Page_txt[0].eTXV,Page_txt[0].eTXFlash)
				
			--Allocates Text Box structure
			STUB TextBoxPdiAllocate (Ap_page_tbs)

            --configures the timer initializations and all text boxes 
            STUB MenuInit()

            --disables the text box
            STUB TextBoxOff(&Prim_cool_down_pop_up_box)

           
        END SIMUL
                                            
        -- Calling the Unit Under Test 
        #GrappApp();
        
    END ELEMENT

END TEST -- TEST 5

TEST 6
FAMILY nominal

    COMMENT  Test Description
    COMMENT  <TD>   
    COMMENT  [hdudispfgrapp-GrappApp-DB-LLR-003]
    COMMENT  The function 'GrappApp' does the following when Splash done is zero and COND is true.
 	COMMENT - Set splash done to 1.
	COMMENT - Set Page_num to EPAGE1,Cool_down_select to FALSE , Fuel_flow_select to FUEL_FLOW_ON and
	COMMENT   Active_eiu to EIU1 if Nv_crc_fail is equal to TRUE AND Du_position is equal to ONE
 	COMMENT - Call functions OffsideSwitchScreen with Page_num as parameter,OffsideCoolTimer with Cool_down_select as parameter
 	COMMENT  and GlobalSettingsSetEIU with  Active_eiu as parameter when Du_position is equal to ONE
 	COMMENT - Call functions OsTimeDly with parameter 250 and ForegroundLoadBackground with sum of BG_IMAGE_ADDR and product 
 	COMMENT of Page_num, PAGE_BITMAP_NUM_OF_SECTOR and SECTOR_SIZE as its parameter.
 	COMMENT - Call the function PdiPageDataInit with Page_num as its parameter
 	COMMENT - Call the function RoundDialsInit with Ap_page0_dials as its parameter
 	COMMENT - Call the function NumberBoxInit with Page_num_boxes as its parameter
 	COMMENT - Call the function BarGraphInit with Ap_page1_bar_graphs as its parameter
 	COMMENT - Call function TextBoxOff with reference to Prim_cool_down_pop_up_box as parameter.
 	COMMENT - Set s16ULX of Prim_cool_down_pop_up_box to u16_x of acdt_axis of Page_settings minus COOLDOWN_AXIS_CALIBRATION,
 	COMMENT Set s16ULY of Prim_cool_down_pop_up_box to u16_y of acdt_axis of Page_settings minus COOLDOWN_AXIS_CALIBRATION when
 	COMMENT Acdt_flag is equal to TRUE.
 	COMMENT - Call function MenuInit.
 	COMMENT 3.Return from the function.
 	COMMENT
 	COMMENT COND : COND1 OR COND2 OR COND3 OR COND4 OR COND5
 	COMMENT
 	COMMENT COND1 : Splash timer is greater than or equal to SPLASH_TIME  
 	COMMENT COND2 : Splash_b1_press is zero AND any one of the buttons from Switches is pressed(i.e b1,b2,b3,b4,b5,b6,b7,b8,b10,b11,b12,b13,c1,c2,c3, sLE, sRe)
 	COMMENT COND3 : twist of sLE of Switches is not equal to zero 
	COMMENT COND4 : twist of sRe of Switches is not equal to zero  
    COMMENT COND5 : flag which indicate first demo mode  Bitwise and Demo_active bitwise and of result of COND6
	COMMENT COND6 : splash timer is greater than or equal to SPLASH_TIME
    COMMENT  Equivalence class 62,63,64,65,66,67,68,69,195,78,108,100,110,72,115,87,88,89,111,91,92,93,94,95,96,97,98,192,194,195
	COMMENT 				   213,214,215,216 
    COMMENT  MCDC Covered FTFFFFTXXXXXXXXXXXXXXX
    COMMENT </TD>
    
    ELEMENT

        COMMENT INPUT SECTION:
		
			VAR Pg_cnt,        init = 1,       ev = init
			
            VAR Ap_poly_graph[0].polygon_shape,        init = FG_RED_X_SHAPE,       ev = init
        
            --data read from Parameters[0]
            VAR Port1_label_count,                              init = 2,                           ev = init

            --type of the parameter
            VAR Parameters[1].type,                             init = BNR,                         ev = init

            --data read from Parameters[2]
            VAR PTU_parameters[1].reading,                      init = NCD,                         ev = init
            
            --data read from Parameters[2]
            VAR PTU_parameters_numbox[1].reading,               init = NCD,                         ev = init
            
            --type of the parameter
            VAR Parameters[2].type,                             init = BCD,                         ev = init
            
            --data read from Parameters[2]
            VAR PTU_parameters_numbox[2].reading,               init = NCD,                         ev = init
            
            --Counter value used to loop 
            VAR Bg_cnt,                                         init = 1,                           ev = init
			
			VAR Cg_cnt,                                         init = 1,               ev = init
			
            VAR Text_cnt,                                       init = 1,               ev = init
			
            VAR Tb_cnt,                                         init = 1,               ev = init

            --Counter value used to loop 
            VAR Nb_cnt,                                         init = 1,                           ev = init

            --Number limit
            VAR Ap_page1_bar_graphs[0].numLimit,                init = 1,                           ev = init   

            VAR Ap_page1_bar_graphs[0].psParam,                 init = &PTU_param,                  ev = init

            --value of the channel 
            VAR PTU_param.fread,                                init = 1,                           ev = init

            --limit value
            VAR Ap_page1_bar_graphs[0].limVal[0],               init = 1,                           ev = init   

            --limit value type
            VAR Ap_page1_bar_graphs[0].limValtype[0],           init = EQUAL,                       ev = init   

            --Color for different limits
            VAR Ap_page1_bar_graphs[0].limColor[0],             init = YELLOW,                      ev = init   

            --Color of the bargraph
            VAR Ap_page1_bar_graphs[0].ePenColor,               init = YELLOW,                      ev = init

            --Number limit
            VAR Page_num_boxes[0].numLimit,                     init = 1,                           ev = init               

            VAR Page_num_boxes[0].psParam,                      init = &PTU_param1,                 ev = init

            --Parameter r driving the number
            VAR PTU_param1.fread,                               init = 1,                           ev = init

            --limit value
            VAR Page_num_boxes[0].limVal[0],                    init = 1,                           ev = init   

            --limit value type
            VAR Page_num_boxes[0].limValtype[0],                init = EQUAL,                       ev = init

            --Color for different limits
            VAR Page_num_boxes[0].limColor[0],                  init = YELLOW,                      ev = init   

            --Pen color
            VAR Page_num_boxes[0].ePenColor,                    init = YELLOW,                      ev = init

            --Holds Button 1 press flag for splash screen
            VAR Splash_b1_press,                                init = 0,                           ev = init
            
            --Left Twist selection
            VAR Switches.sLE.twist,                             init = 1,                           ev = init
            
            --Right Twist selection
            VAR Switches.sRE.twist,                             init = 1,                           ev = init
                
            --Button 1
            VAR Switches.b1,                                    init = 0,                           ev = init

            --Button 2
            VAR Switches.b2,                                    init = 0,                           ev = init

            --Button 3
            VAR Switches.b3,                                    init = 0,                           ev = init

            --Button 4
            VAR Switches.b4,                                    init = 0,                           ev = init

            --Button 5
            VAR Switches.b5,                                    init = 1,                           ev = init

            --Button 6
            VAR Switches.b6,                                    init = 0,                           ev = init

            --Button 7
            VAR Switches.b7,                                    init = 0,                           ev = init

            --Button 8
            VAR Switches.b8,                                    init = 0,                           ev = init
			
			--Button 10
            VAR Switches.b10,            init = 0,       ev = init
			
			--Button 11
            VAR Switches.b11,            init = 0,       ev = init
			
			--Button 12
            VAR Switches.b12,            init = 0,       ev = init
			
			--Button 13
            VAR Switches.b13,            init = 0,       ev = init 

            --Button c1
            VAR Switches.c1,                                    init = 0,                           ev = init

            --Button c2
            VAR Switches.c2,                                    init = 0,                           ev = init

            --Button c3
            VAR Switches.c3,                                    init = 0,                           ev = init

            --Left Encoder selection
            VAR Switches.sLE.pressed,                           init = 0,                           ev = init

            --Right Encoder selection
            VAR Switches.sRE.pressed,                           init = 0,                           ev = init
            
            --NV RAM CRC fail check
            VAR Nv_crc_fail,                                    init = FALSE,                       ev = init

            --Position value of Display Unit 
            VAR Du_position,                                    init = 0,                           ev = init

            --Counter used to loop
            VAR Rd_cnt,                                         init = 1,                           ev = init
            
            --flag of page setting
            VAR Acdt_flag,                                      init = TRUE,                        ev = init

            --X-Axis of the Bottom Center of Bar graph
            VAR Page_settings.acdt_axis.u16_x,                  init = 50,                          ev = init

            --Y-Axis of the Bottom Center of Bar graph
            VAR Page_settings.acdt_axis.u16_y,                  init = 50,                          ev = init
			
			--VAR Bitmap_crc_check_bit[1],					init = TRUE,				ev = init
			
			VAR Page_parameter_error,        init = FALSE,       ev = init
                
            
        COMMENT OUTPUT SECTION:
                                                            
             --Status of channel
            VAR PTU_param.stat,                                 init =PARAM_OK,                         ev = init  

            --Parameter stat driving the number
            VAR PTU_param1.stat,                                init =PARAM_OK,                         ev = init
                                                            
        COMMENT INPUT/OUTPUT SECTION:
                                                            
            --Indicates the value of splash screen display
                VAR Splash_done,                                init = ZERO,                        ev = 1
            
        -- Stub Calls:
                                                                
        SIMUL
            
            --reads the message from RTD 
            STUB RTDGetParam(1)
            STUB RTDGetParam(1)

            --reads the discrete word
            STUB RTDGetParamDdw(2)

            --allows the calling task to delay for a specific number of clock ticks
            STUB  OsTimeDly(250)

            --To load the background
            STUB ForegroundLoadBackground((T_UINT16 *)(BG_IMAGE_ADDR+(Page_num*PAGE_BITMAP_NUM_OF_SECTOR*SECTOR_SIZE)))

            --extracts page wise settings from PDI
            STUB PdiPageDataInit(Page_num)

            --Allocate a single round dial
            STUB RoundDialAllocat(Ap_page0_dials)   

            --Allocates number box structure
            STUB NumboxAllocat(Page_num_boxes)

            --Allocates number box structure
            STUB BargraphAllocat(Ap_page1_bar_graphs)
			
			--Allocates Carrot Graph structure
			STUB CarrotGraphAllocat (Ap_page2_carrot)
				
			--Allocates Text structure
			STUB TextAllocatPdi(&Page_txt[0].ppsOwner,Page_txt[0].u16X0,Page_txt[0].u16Y0,Page_txt[0].eTXAlign,Page_txt[0].eTXFont,Page_txt[0].ePenColor,Page_txt[0].eTXV,Page_txt[0].eTXFlash)
				
			--Allocates Text Box structure
			STUB TextBoxPdiAllocate (Ap_page_tbs)

            --configures the timer initializations and all text boxes 
            STUB MenuInit()

            --disables the text box
            STUB TextBoxOff(&Prim_cool_down_pop_up_box)

           
        END SIMUL
                                            
        -- Calling the Unit Under Test 
        #GrappApp();
        
    END ELEMENT

END TEST -- TEST 6

TEST 7
FAMILY nominal

    COMMENT  Test Description
    COMMENT  <TD>   
    COMMENT  [hdudispfgrapp-GrappApp-DB-LLR-003]
    COMMENT  The function 'GrappApp' does the following when Splash done is zero and COND is true.
 	COMMENT - Set splash done to 1.
	COMMENT - Set Page_num to EPAGE1,Cool_down_select to FALSE , Fuel_flow_select to FUEL_FLOW_ON and
	COMMENT   Active_eiu to EIU1 if Nv_crc_fail is equal to TRUE AND Du_position is equal to ONE
 	COMMENT - Call functions OffsideSwitchScreen with Page_num as parameter,OffsideCoolTimer with Cool_down_select as parameter
 	COMMENT  and GlobalSettingsSetEIU with  Active_eiu as parameter when Du_position is equal to ONE
 	COMMENT - Call functions OsTimeDly with parameter 250 and ForegroundLoadBackground with sum of BG_IMAGE_ADDR and product 
 	COMMENT of Page_num, PAGE_BITMAP_NUM_OF_SECTOR and SECTOR_SIZE as its parameter.
 	COMMENT - Call the function PdiPageDataInit with Page_num as its parameter
 	COMMENT - Call the function RoundDialsInit with Ap_page0_dials as its parameter
 	COMMENT - Call the function NumberBoxInit with Page_num_boxes as its parameter
 	COMMENT - Call the function BarGraphInit with Ap_page1_bar_graphs as its parameter
 	COMMENT - Call function TextBoxOff with reference to Prim_cool_down_pop_up_box as parameter.
 	COMMENT - Set s16ULX of Prim_cool_down_pop_up_box to u16_x of acdt_axis of Page_settings minus COOLDOWN_AXIS_CALIBRATION,
 	COMMENT Set s16ULY of Prim_cool_down_pop_up_box to u16_y of acdt_axis of Page_settings minus COOLDOWN_AXIS_CALIBRATION when
 	COMMENT Acdt_flag is equal to TRUE.
 	COMMENT - Call function MenuInit.
 	COMMENT 3.Return from the function.
 	COMMENT
 	COMMENT COND : COND1 OR COND2 OR COND3 OR COND4 OR COND5
 	COMMENT
 	COMMENT COND1 : Splash timer is greater than or equal to SPLASH_TIME  
 	COMMENT COND2 : Splash_b1_press is zero AND any one of the buttons from Switches is pressed(i.e b1,b2,b3,b4,b5,b6,b7,b8,b10,b11,b12,b13,c1,c2,c3, sLE, sRe)
 	COMMENT COND3 : twist of sLE of Switches is not equal to zero 
	COMMENT COND4 : twist of sRe of Switches is not equal to zero  
    COMMENT COND5 : flag which indicate first demo mode  Bitwise and Demo_active bitwise and of result of COND6
	COMMENT COND6 : splash timer is greater than or equal to SPLASH_TIME
    COMMENT  Equivalence class 62,63,64,65,66,67,68,69,195,79,108,100,110,72,115,87,88,89,111,90,92,93,94,95,96,97,98,192,194,195
	COMMENT 				   213,214,215,216 
    COMMENT  MCDC Covered  FTFFFFFTXXXXXXXXXXXXXX
    COMMENT </TD>
    
    ELEMENT


        COMMENT INPUT SECTION:
		
			VAR Pg_cnt,        init = 1,       ev = init
			
            VAR Ap_poly_graph[0].polygon_shape,        init = FG_RED_X_SHAPE,       ev = init
        
            --data read from Parameters[0]
            VAR Port1_label_count,                              init = 2,                   ev = init

            --type of the parameter
            VAR Parameters[1].type,                             init = BNR,                 ev = init

            --data read from Parameters[2]
            VAR PTU_parameters[1].reading,                      init = NCD,                 ev = init
            
            --data read from Parameters[2]
            VAR PTU_parameters_numbox[1].reading,               init = NCD,                 ev = init
            
            --type of the parameter
            VAR Parameters[2].type,                             init = BCD,                 ev = init
            
            --data read from Parameters[2]
            VAR PTU_parameters_numbox[2].reading,               init = NCD,                 ev = init
            
            --Counter value used to loop 
            VAR Bg_cnt,                                         init = 1,                   ev = init
			
			VAR Cg_cnt,                                         init = 1,               ev = init
			
            VAR Text_cnt,                                       init = 1,               ev = init
			
            VAR Tb_cnt,                                         init = 1,               ev = init

            --Counter value used to loop 
            VAR Nb_cnt,                                         init = 1,                   ev = init

            --Number limit
            VAR Ap_page1_bar_graphs[0].numLimit,                init = 1,                   ev = init   

            VAR Ap_page1_bar_graphs[0].psParam,                 init = &PTU_param,          ev = init

            --value of the channel 
            VAR PTU_param.fread,                                init = 1,                   ev = init

            --limit value
            VAR Ap_page1_bar_graphs[0].limVal[0],               init = 1,                   ev = init   

            --limit value type
            VAR Ap_page1_bar_graphs[0].limValtype[0],           init = EQUAL,               ev = init   

            --Color for different limits
            VAR Ap_page1_bar_graphs[0].limColor[0],             init = YELLOW,              ev = init   

            --Color of the bargraph
            VAR Ap_page1_bar_graphs[0].ePenColor,               init = YELLOW,              ev = init

            --Number limit
            VAR Page_num_boxes[0].numLimit,                     init = 1,                   ev = init               

            VAR Page_num_boxes[0].psParam,                      init = &PTU_param1,         ev = init

            --Parameter r driving the number
            VAR PTU_param1.fread,                               init = 1,                   ev = init

            --limit value
            VAR Page_num_boxes[0].limVal[0],                    init = 1,                   ev = init   

            --limit value type
            VAR Page_num_boxes[0].limValtype[0],                init = EQUAL,               ev = init

            --Color for different limits
            VAR Page_num_boxes[0].limColor[0],                  init = YELLOW,              ev = init   

            --Pen color
            VAR Page_num_boxes[0].ePenColor,                    init = YELLOW,              ev = init

            --Holds Button 1 press flag for splash screen
            VAR Splash_b1_press,                                init = 0,                   ev = init
            
            --Left Twist selection
            VAR Switches.sLE.twist,                             init = 1,                   ev = init
            
            --Right Twist selection
            VAR Switches.sRE.twist,                             init = 1,                   ev = init
                
            --Button 1
            VAR Switches.b1,                                    init = 0,                   ev = init

            --Button 2
            VAR Switches.b2,                                    init = 0,                   ev = init

            --Button 3
            VAR Switches.b3,                                    init = 0,                   ev = init

            --Button 4
            VAR Switches.b4,                                    init = 0,                   ev = init

            --Button 5
            VAR Switches.b5,                                    init = 0,                   ev = init

            --Button 6
            VAR Switches.b6,                                    init = 1,                   ev = init

            --Button 7
            VAR Switches.b7,                                    init = 0,                   ev = init

            --Button 8
            VAR Switches.b8,                                    init = 0,                   ev = init
			
			--Button 10
            VAR Switches.b10,            init = 0,       ev = init
			
			--Button 11
            VAR Switches.b11,            init = 0,       ev = init
			
			--Button 12
            VAR Switches.b12,            init = 0,       ev = init
			
			--Button 13
            VAR Switches.b13,            init = 0,       ev = init 

            --Button c1
            VAR Switches.c1,                                    init = 0,                   ev = init

            --Button c2
            VAR Switches.c2,                                    init = 0,                   ev = init

            --Button c3
            VAR Switches.c3,                                    init = 0,                   ev = init

            --Left Encoder selection
            VAR Switches.sLE.pressed,                           init = 0,                   ev = init

            --Right Encoder selection
            VAR Switches.sRE.pressed,                           init = 0,                   ev = init
            
            --NV RAM CRC fail check
            VAR Nv_crc_fail,                                    init = FALSE,               ev = init

            --Position value of Display Unit 
            VAR Du_position,                                    init = 0,                   ev = init

            --Counter used to loop
            VAR Rd_cnt,                                         init = 1,                   ev = init

            --flag of page setting
            VAR Acdt_flag,                                      init = TRUE,                ev = init

            --X-Axis of the Bottom Center of Bar graph
            VAR Page_settings.acdt_axis.u16_x,                  init = 50,                  ev = init

            --Y-Axis of the Bottom Center of Bar graph
            VAR Page_settings.acdt_axis.u16_y,                  init = 50,                  ev = init
			
			--VAR Bitmap_crc_check_bit[1],					init = TRUE,				ev = init
			
			VAR Page_parameter_error,        init = FALSE,       ev = init

            
        COMMENT OUTPUT SECTION:
                                                            
             --Status of channel    
            VAR PTU_param.stat,                                 init = PARAM_OK,            ev = init  

            --Parameter stat driving the number
            VAR PTU_param1.stat,                                init = PARAM_OK,            ev = init
                                                            
        COMMENT INPUT/OUTPUT SECTION:
                                                            
            --Indicates the value of splash screen display
                VAR Splash_done,                                init = ZERO,                ev = 1
            
        -- Stub Calls:
                                                                
        SIMUL
            
            --reads the message from RTD 
            STUB RTDGetParam(1)
            STUB RTDGetParam(1)

            --reads the discrete word
            STUB RTDGetParamDdw(2)

            --allows the calling task to delay for a specific number of clock ticks
            STUB  OsTimeDly(250)

            --To load the background
            STUB ForegroundLoadBackground((T_UINT16 *)(BG_IMAGE_ADDR+(Page_num*PAGE_BITMAP_NUM_OF_SECTOR*SECTOR_SIZE)))

            --extracts page wise settings from PDI
            STUB PdiPageDataInit(Page_num)

            --Allocate a single round dial
            STUB RoundDialAllocat(Ap_page0_dials)   

            --Allocates number box structure
            STUB NumboxAllocat(Page_num_boxes)

            --Allocates number box structure
            STUB BargraphAllocat(Ap_page1_bar_graphs)
			
			--Allocates Carrot Graph structure
			STUB CarrotGraphAllocat (Ap_page2_carrot)
				
			--Allocates Text structure
			STUB TextAllocatPdi(&Page_txt[0].ppsOwner,Page_txt[0].u16X0,Page_txt[0].u16Y0,Page_txt[0].eTXAlign,Page_txt[0].eTXFont,Page_txt[0].ePenColor,Page_txt[0].eTXV,Page_txt[0].eTXFlash)
				
			--Allocates Text Box structure
			STUB TextBoxPdiAllocate (Ap_page_tbs)

            --configures the timer initializations and all text boxes 
            STUB MenuInit()

            --disables the text box
            STUB TextBoxOff(&Prim_cool_down_pop_up_box)

           
        END SIMUL
                                            
        -- Calling the Unit Under Test 
        #GrappApp();
        
    END ELEMENT

END TEST -- TEST 7

TEST 8
FAMILY nominal

    COMMENT  Test Description
    COMMENT  <TD>   
    COMMENT  [hdudispfgrapp-GrappApp-DB-LLR-003]
    COMMENT  The function 'GrappApp' does the following when Splash done is zero and COND is true.
 	COMMENT - Set splash done to 1.
	COMMENT - Set Page_num to EPAGE1,Cool_down_select to FALSE , Fuel_flow_select to FUEL_FLOW_ON and
	COMMENT   Active_eiu to EIU1 if Nv_crc_fail is equal to TRUE AND Du_position is equal to ONE
 	COMMENT - Call functions OffsideSwitchScreen with Page_num as parameter,OffsideCoolTimer with Cool_down_select as parameter
 	COMMENT  and GlobalSettingsSetEIU with  Active_eiu as parameter when Du_position is equal to ONE
 	COMMENT - Call functions OsTimeDly with parameter 250 and ForegroundLoadBackground with sum of BG_IMAGE_ADDR and product 
 	COMMENT of Page_num, PAGE_BITMAP_NUM_OF_SECTOR and SECTOR_SIZE as its parameter.
 	COMMENT - Call the function PdiPageDataInit with Page_num as its parameter
 	COMMENT - Call the function RoundDialsInit with Ap_page0_dials as its parameter
 	COMMENT - Call the function NumberBoxInit with Page_num_boxes as its parameter
 	COMMENT - Call the function BarGraphInit with Ap_page1_bar_graphs as its parameter
 	COMMENT - Call function TextBoxOff with reference to Prim_cool_down_pop_up_box as parameter.
 	COMMENT - Set s16ULX of Prim_cool_down_pop_up_box to u16_x of acdt_axis of Page_settings minus COOLDOWN_AXIS_CALIBRATION,
 	COMMENT Set s16ULY of Prim_cool_down_pop_up_box to u16_y of acdt_axis of Page_settings minus COOLDOWN_AXIS_CALIBRATION when
 	COMMENT Acdt_flag is equal to TRUE.
 	COMMENT - Call function MenuInit.
 	COMMENT 3.Return from the function.
 	COMMENT
 	COMMENT COND : COND1 OR COND2 OR COND3 OR COND4 OR COND5
 	COMMENT
 	COMMENT COND1 : Splash timer is greater than or equal to SPLASH_TIME  
 	COMMENT COND2 : Splash_b1_press is zero AND any one of the buttons from Switches is pressed(i.e b1,b2,b3,b4,b5,b6,b7,b8,b10,b11,b12,b13,c1,c2,c3, sLE, sRe)
 	COMMENT COND3 : twist of sLE of Switches is not equal to zero 
	COMMENT COND4 : twist of sRe of Switches is not equal to zero  
    COMMENT COND5 : flag which indicate first demo mode  Bitwise and Demo_active bitwise and of result of COND6
	COMMENT COND6 : splash timer is greater than or equal to SPLASH_TIME
    COMMENT  Equivalence class 62,63,64,65,66,67,68,69,195,80,108,100,110,72,115,87,88,89,111,90,91,93,94,95,96,97,98,192,194,195
	COMMENT 				   213,214,215,216 
    COMMENT  MCDC Covered FTFFFFFFTXXXXXXXXXXXXX
    COMMENT </TD>
    
    ELEMENT


        COMMENT INPUT SECTION:
		
			VAR Pg_cnt,        init = 1,       ev = init
			
            VAR Ap_poly_graph[0].polygon_shape,        init = FG_RED_X_SHAPE,       ev = init
        
            --data read from Parameters[0]
            VAR Port1_label_count,                              init = 2,                           ev = init

            --type of the parameter
            VAR Parameters[1].type,                             init = BNR,                         ev = init

            --data read from Parameters[2]
            VAR PTU_parameters[1].reading,                      init = NCD,                         ev = init
            
            --data read from Parameters[2]
            VAR PTU_parameters_numbox[1].reading,               init = NCD,                         ev = init
            
            --type of the parameter
            VAR Parameters[2].type,                             init = BCD,                         ev = init
            
            --data read from Parameters[2]
            VAR PTU_parameters_numbox[2].reading,               init = NCD,                         ev = init
            
            --Counter value used to loop 
            VAR Bg_cnt,                                         init = 1,                           ev = init
			
			VAR Cg_cnt,                                         init = 1,               ev = init
			
            VAR Text_cnt,                                       init = 1,               ev = init
			
            VAR Tb_cnt,                                         init = 1,               ev = init

            --Counter value used to loop 
            VAR Nb_cnt,                                         init = 1,                           ev = init

            --Number limit
            VAR Ap_page1_bar_graphs[0].numLimit,                init = 1,                           ev = init   

            VAR Ap_page1_bar_graphs[0].psParam,                 init = &PTU_param,                  ev = init

            --value of the channel 
            VAR PTU_param.fread,                                init = 1,                           ev = init

            --limit value
            VAR Ap_page1_bar_graphs[0].limVal[0],               init = 1,                           ev = init   

            --limit value type
            VAR Ap_page1_bar_graphs[0].limValtype[0],           init = EQUAL,                       ev = init   

            --Color for different limits
            VAR Ap_page1_bar_graphs[0].limColor[0],             init = YELLOW,                      ev = init   

            --Color of the bargraph
            VAR Ap_page1_bar_graphs[0].ePenColor,               init = YELLOW,                      ev = init

            --Number limit
            VAR Page_num_boxes[0].numLimit,                     init = 1,                           ev = init               

            VAR Page_num_boxes[0].psParam,                      init = &PTU_param1,                 ev = init

            --Parameter r driving the number
            VAR PTU_param1.fread,                               init = 1,                           ev = init

            --limit value
            VAR Page_num_boxes[0].limVal[0],                    init = 1,                           ev = init   

            --limit value type
            VAR Page_num_boxes[0].limValtype[0],                init = EQUAL,                       ev = init

            --Color for different limits
            VAR Page_num_boxes[0].limColor[0],                  init = YELLOW,                      ev = init   

            --Pen color
            VAR Page_num_boxes[0].ePenColor,                    init = YELLOW,                      ev = init

            --Holds Button 1 press flag for splash screen
            VAR Splash_b1_press,                                init = 0,                           ev = init
            
            --Left Twist selection
            VAR Switches.sLE.twist,                             init = 1,                           ev = init
            
            --Right Twist selection
            VAR Switches.sRE.twist,                             init = 1,                           ev = init
                
            --Button 1
            VAR Switches.b1,                                    init = 0,                           ev = init

            --Button 2
            VAR Switches.b2,                                    init = 0,                           ev = init

            --Button 3
            VAR Switches.b3,                                    init = 0,                           ev = init

            --Button 4
            VAR Switches.b4,                                    init = 0,                           ev = init

            --Button 5
            VAR Switches.b5,                                    init = 0,                           ev = init

            --Button 6
            VAR Switches.b6,                                    init = 0,                           ev = init

            --Button 7
            VAR Switches.b7,                                    init = 1,                           ev = init

            --Button 8
            VAR Switches.b8,                                    init = 0,                           ev = init
			
			--Button 10
            VAR Switches.b10,            						init = 0,       					ev = init
			
			--Button 11
            VAR Switches.b11,           					 	init = 0,       					ev = init
			
			--Button 12
            VAR Switches.b12,            						init = 0,       					ev = init
			
			--Button 13
            VAR Switches.b13,            						init = 0,       					ev = init 

            --Button c1
            VAR Switches.c1,                                    init = 0,                           ev = init

            --Button c2
            VAR Switches.c2,                                    init = 0,                           ev = init

            --Button c3
            VAR Switches.c3,                                    init = 0,                           ev = init

            --Left Encoder selection
            VAR Switches.sLE.pressed,                           init = 0,                           ev = init

            --Right Encoder selection
            VAR Switches.sRE.pressed,                           init = 0,                           ev = init
            
            --NV RAM CRC fail check
            VAR Nv_crc_fail,                                    init = FALSE,                       ev = init

            --Position value of Display Unit 
            VAR Du_position,                                    init = 0,                           ev = init

            --Counter used to loop
            VAR Rd_cnt,                                         init = 1,                           ev = init
            
            --flag of page setting
            VAR Acdt_flag,                                      init = TRUE,                        ev = init

            --X-Axis of the Bottom Center of Bar graph
            VAR Page_settings.acdt_axis.u16_x,                  init = 50,                          ev = init

            --Y-Axis of the Bottom Center of Bar graph
            VAR Page_settings.acdt_axis.u16_y,                  init = 50,                          ev = init
			
			--VAR Bitmap_crc_check_bit[1],					init = TRUE,				ev = init
			
			VAR Page_parameter_error,        init = FALSE,       ev = init
            
        COMMENT OUTPUT SECTION:
                                                            
             --Status of channel
            VAR PTU_param.stat,                                 init = PARAM_OK,                    ev = init  

            --Parameter stat driving the number
            VAR PTU_param1.stat,                                init = PARAM_OK,                    ev = init
                                                            
        COMMENT INPUT/OUTPUT SECTION:
                                                            
            --Indicates the value of splash screen display
                VAR Splash_done,                                init = ZERO,                        ev = 1
            
        -- Stub Calls:
                                                                
        SIMUL
            
            --reads the message from RTD 
            STUB RTDGetParam(1)
            STUB RTDGetParam(1)

            --reads the discrete word
            STUB RTDGetParamDdw(2)

            --allows the calling task to delay for a specific number of clock ticks
            STUB  OsTimeDly(250)

            --To load the background
            STUB ForegroundLoadBackground((T_UINT16 *)(BG_IMAGE_ADDR+(Page_num*PAGE_BITMAP_NUM_OF_SECTOR*SECTOR_SIZE)))

            --extracts page wise settings from PDI
            STUB PdiPageDataInit(Page_num)

            --Allocate a single round dial
            STUB RoundDialAllocat(Ap_page0_dials)   

            --Allocates number box structure
            STUB NumboxAllocat(Page_num_boxes)

            --Allocates number box structure
            STUB BargraphAllocat(Ap_page1_bar_graphs)
			
			--Allocates Carrot Graph structure
			STUB CarrotGraphAllocat (Ap_page2_carrot)
				
			--Allocates Text structure
			STUB TextAllocatPdi(&Page_txt[0].ppsOwner,Page_txt[0].u16X0,Page_txt[0].u16Y0,Page_txt[0].eTXAlign,Page_txt[0].eTXFont,Page_txt[0].ePenColor,Page_txt[0].eTXV,Page_txt[0].eTXFlash)
				
			--Allocates Text Box structure
			STUB TextBoxPdiAllocate (Ap_page_tbs)

            --configures the timer initializations and all text boxes 
            STUB MenuInit()

            --disables the text box
            STUB TextBoxOff(&Prim_cool_down_pop_up_box)

        END SIMUL
                                            
        -- Calling the Unit Under Test 
        #GrappApp();
        
    END ELEMENT

END TEST -- TEST 8

TEST 9
FAMILY nominal

    COMMENT  Test Description
    COMMENT  <TD>   
    COMMENT  [hdudispfgrapp-GrappApp-DB-LLR-003]
    COMMENT  The function 'GrappApp' does the following when Splash done is zero and COND is true.
 	COMMENT - Set splash done to 1.
	COMMENT - Set Page_num to EPAGE1,Cool_down_select to FALSE , Fuel_flow_select to FUEL_FLOW_ON and
	COMMENT   Active_eiu to EIU1 if Nv_crc_fail is equal to TRUE AND Du_position is equal to ONE
 	COMMENT - Call functions OffsideSwitchScreen with Page_num as parameter,OffsideCoolTimer with Cool_down_select as parameter
 	COMMENT  and GlobalSettingsSetEIU with  Active_eiu as parameter when Du_position is equal to ONE
 	COMMENT - Call functions OsTimeDly with parameter 250 and ForegroundLoadBackground with sum of BG_IMAGE_ADDR and product 
 	COMMENT of Page_num, PAGE_BITMAP_NUM_OF_SECTOR and SECTOR_SIZE as its parameter.
 	COMMENT - Call the function PdiPageDataInit with Page_num as its parameter
 	COMMENT - Call the function RoundDialsInit with Ap_page0_dials as its parameter
 	COMMENT - Call the function NumberBoxInit with Page_num_boxes as its parameter
 	COMMENT - Call the function BarGraphInit with Ap_page1_bar_graphs as its parameter
 	COMMENT - Call function TextBoxOff with reference to Prim_cool_down_pop_up_box as parameter.
 	COMMENT - Set s16ULX of Prim_cool_down_pop_up_box to u16_x of acdt_axis of Page_settings minus COOLDOWN_AXIS_CALIBRATION,
 	COMMENT Set s16ULY of Prim_cool_down_pop_up_box to u16_y of acdt_axis of Page_settings minus COOLDOWN_AXIS_CALIBRATION when
 	COMMENT Acdt_flag is equal to TRUE.
 	COMMENT - Call function MenuInit.
 	COMMENT 3.Return from the function.
 	COMMENT
 	COMMENT COND : COND1 OR COND2 OR COND3 OR COND4 OR COND5
 	COMMENT
 	COMMENT COND1 : Splash timer is greater than or equal to SPLASH_TIME  
 	COMMENT COND2 : Splash_b1_press is zero AND any one of the buttons from Switches is pressed(i.e b1,b2,b3,b4,b5,b6,b7,b8,b10,b11,b12,b13,c1,c2,c3, sLE, sRe)
 	COMMENT COND3 : twist of sLE of Switches is not equal to zero 
	COMMENT COND4 : twist of sRe of Switches is not equal to zero  
    COMMENT COND5 : flag which indicate first demo mode  Bitwise and Demo_active bitwise and of result of COND6
	COMMENT COND6 : splash timer is greater than or equal to SPLASH_TIME
    COMMENT  Equivalence class 62,63,64,65,66,67,68,69,195,81,108,100,110,72,115,87,88,89,111,90,91,92,94,95,96,97,98,192,194,195
	COMMENT 				   213,214,215,216 
    COMMENT  MCDC Covered  FTFFFFFFFTXXXXXXXXXXXX
    COMMENT </TD>
    
    ELEMENT


        COMMENT INPUT SECTION:
		
			VAR Pg_cnt,        init = 1,       ev = init
			
            VAR Ap_poly_graph[0].polygon_shape,        init = FG_RED_X_SHAPE,       ev = init
        
            --data read from Parameters[0]
            VAR Port1_label_count,                              init = 2,               ev = init

            --type of the parameter
            VAR Parameters[1].type,                             init = BNR,             ev = init

            --data read from Parameters[2]
            VAR PTU_parameters[1].reading,                      init = NCD,             ev = init
            
            --data read from Parameters[2]
            VAR PTU_parameters_numbox[1].reading,               init = NCD,             ev = init
            
            --type of the parameter
            VAR Parameters[2].type,                             init = BCD,             ev = init
            
            --data read from Parameters[2]
            VAR PTU_parameters_numbox[2].reading,               init = NCD,             ev = init
            
            --Counter value used to loop 
            VAR Bg_cnt,             							init = 1,          		ev = init
			
			VAR Cg_cnt,                                         init = 1,               ev = init
			
            VAR Text_cnt,                                       init = 1,               ev = init
			
            VAR Tb_cnt,                                         init = 1,               ev = init

            --Counter value used to loop 
            VAR Nb_cnt,             							init = 1,           	ev = init

            --Number limit
            VAR Ap_page1_bar_graphs[0].numLimit,                init = 1,               ev = init   

            VAR Ap_page1_bar_graphs[0].psParam,                 init = &PTU_param,      ev = init

            --value of the channel 
            VAR PTU_param.fread,                                init = 1,               ev = init

            --limit value
            VAR Ap_page1_bar_graphs[0].limVal[0],               init = 1,               ev = init   

            --limit value type
            VAR Ap_page1_bar_graphs[0].limValtype[0],           init = EQUAL,           ev = init   

            --Color for different limits
            VAR Ap_page1_bar_graphs[0].limColor[0],             init = YELLOW,          ev = init   

            --Color of the bargraph
            VAR Ap_page1_bar_graphs[0].ePenColor,               init = YELLOW,          ev = init

            --Number limit
            VAR Page_num_boxes[0].numLimit,                     init = 1,               ev = init               

            VAR Page_num_boxes[0].psParam,                      init = &PTU_param1,     ev = init

            --Parameter r driving the number
            VAR PTU_param1.fread,                               init = 1,               ev = init

            --limit value
            VAR Page_num_boxes[0].limVal[0],                    init = 1,               ev = init   

            --limit value type
            VAR Page_num_boxes[0].limValtype[0],                init = EQUAL,           ev = init

            --Color for different limits
            VAR Page_num_boxes[0].limColor[0],                  init = YELLOW,          ev = init   

            --Pen color
            VAR Page_num_boxes[0].ePenColor,                    init = YELLOW,          ev = init

            --Holds Button 1 press flag for splash screen
            VAR Splash_b1_press,                                init = 0,               ev = init
            
            --Left Twist selection
            VAR Switches.sLE.twist,                             init = 1,               ev = init
            
            --Right Twist selection
            VAR Switches.sRE.twist,                             init = 1,               ev = init
                
            --Button 1
            VAR Switches.b1,                                    init = 0,               ev = init

            --Button 2
            VAR Switches.b2,                                    init = 0,               ev = init

            --Button 3
            VAR Switches.b3,                                    init = 0,               ev = init

            --Button 4
            VAR Switches.b4,                                    init = 0,               ev = init

            --Button 5
            VAR Switches.b5,                                    init = 0,               ev = init

            --Button 6
            VAR Switches.b6,                                    init = 0,               ev = init

            --Button 7
            VAR Switches.b7,                                    init = 0,               ev = init

            --Button 8
            VAR Switches.b8,                                    init = 1,               ev = init
			
			--Button 10
            VAR Switches.b10,            						init = 0,       					ev = init
			
			--Button 11
            VAR Switches.b11,           					 	init = 0,       					ev = init
			
			--Button 12
            VAR Switches.b12,            						init = 0,       					ev = init
			
			--Button 13
            VAR Switches.b13,            						init = 0,       					ev = init 

            --Button c1
            VAR Switches.c1,                                    init = 0,               ev = init

            --Button c2
            VAR Switches.c2,                                    init = 0,               ev = init

            --Button c3
            VAR Switches.c3,                                    init = 0,               ev = init

            --Left Encoder selection
            VAR Switches.sLE.pressed,                           init = 0,               ev = init

            --Right Encoder selection
            VAR Switches.sRE.pressed,                           init = 0,               ev = init
            
            --NV RAM CRC fail check
            VAR Nv_crc_fail,                                    init = FALSE,           ev = init

            --Position value of Display Unit 
            VAR Du_position,                                    init = 0,               ev = init

            --Counter used to loop
            VAR Rd_cnt,                                         init = 1,               ev = init
            
            --flag of page setting
            VAR Acdt_flag,                                      init = TRUE,            ev = init

            --X-Axis of the Bottom Center of Bar graph
            VAR Page_settings.acdt_axis.u16_x,                  init = 50,              ev = init

            --Y-Axis of the Bottom Center of Bar graph
            VAR Page_settings.acdt_axis.u16_y,                  init = 50,              ev = init   
			
			--VAR Bitmap_crc_check_bit[1],					init = TRUE,				ev = init
			
			VAR Page_parameter_error,        init = FALSE,       ev = init
            
        COMMENT OUTPUT SECTION:
                                                            
             --Status of channel
            VAR PTU_param.stat,                             	init = PARAM_OK,        ev = init  

            --Parameter stat driving the number
            VAR PTU_param1.stat,                            	init = PARAM_OK,        ev = init
                                                            
        COMMENT INPUT/OUTPUT SECTION:
                                                            
            --Indicates the value of splash screen display
                VAR Splash_done,                            	init = ZERO,            ev = 1
            
        -- Stub Calls:
                                                                
        SIMUL
            
            --reads the message from RTD 
            STUB RTDGetParam(1)
            STUB RTDGetParam(1)

            --reads the discrete word
            STUB RTDGetParamDdw(2)

            --allows the calling task to delay for a specific number of clock ticks
            STUB  OsTimeDly(250)

            --To load the background
            STUB ForegroundLoadBackground((T_UINT16 *)(BG_IMAGE_ADDR+(Page_num*PAGE_BITMAP_NUM_OF_SECTOR*SECTOR_SIZE)))

            --extracts page wise settings from PDI
            STUB PdiPageDataInit(Page_num)

            --Allocate a single round dial
            STUB RoundDialAllocat(Ap_page0_dials)   

            --Allocates number box structure
            STUB NumboxAllocat(Page_num_boxes)

            --Allocates number box structure
            STUB BargraphAllocat(Ap_page1_bar_graphs)
			
			--Allocates Carrot Graph structure
			STUB CarrotGraphAllocat (Ap_page2_carrot)
				
			--Allocates Text structure
			STUB TextAllocatPdi(&Page_txt[0].ppsOwner,Page_txt[0].u16X0,Page_txt[0].u16Y0,Page_txt[0].eTXAlign,Page_txt[0].eTXFont,Page_txt[0].ePenColor,Page_txt[0].eTXV,Page_txt[0].eTXFlash)
				
			--Allocates Text Box structure
			STUB TextBoxPdiAllocate (Ap_page_tbs)

            --configures the timer initializations and all text boxes 
            STUB MenuInit()

            --disables the text box
            STUB TextBoxOff(&Prim_cool_down_pop_up_box)

        END SIMUL
                                            
        -- Calling the Unit Under Test 
        #GrappApp();
        
    END ELEMENT

END TEST -- TEST 9

TEST 10
FAMILY nominal

    COMMENT  Test Description
    COMMENT  <TD>   
    COMMENT  [hdudispfgrapp-GrappApp-DB-LLR-003]
    COMMENT  The function 'GrappApp' does the following when Splash done is zero and COND is true.
 	COMMENT - Set splash done to 1.
	COMMENT - Set Page_num to EPAGE1,Cool_down_select to FALSE , Fuel_flow_select to FUEL_FLOW_ON and
	COMMENT   Active_eiu to EIU1 if Nv_crc_fail is equal to TRUE AND Du_position is equal to ONE
 	COMMENT - Call functions OffsideSwitchScreen with Page_num as parameter,OffsideCoolTimer with Cool_down_select as parameter
 	COMMENT  and GlobalSettingsSetEIU with  Active_eiu as parameter when Du_position is equal to ONE
 	COMMENT - Call functions OsTimeDly with parameter 250 and ForegroundLoadBackground with sum of BG_IMAGE_ADDR and product 
 	COMMENT of Page_num, PAGE_BITMAP_NUM_OF_SECTOR and SECTOR_SIZE as its parameter.
 	COMMENT - Call the function PdiPageDataInit with Page_num as its parameter
 	COMMENT - Call the function RoundDialsInit with Ap_page0_dials as its parameter
 	COMMENT - Call the function NumberBoxInit with Page_num_boxes as its parameter
 	COMMENT - Call the function BarGraphInit with Ap_page1_bar_graphs as its parameter
 	COMMENT - Call function TextBoxOff with reference to Prim_cool_down_pop_up_box as parameter.
 	COMMENT - Set s16ULX of Prim_cool_down_pop_up_box to u16_x of acdt_axis of Page_settings minus COOLDOWN_AXIS_CALIBRATION,
 	COMMENT Set s16ULY of Prim_cool_down_pop_up_box to u16_y of acdt_axis of Page_settings minus COOLDOWN_AXIS_CALIBRATION when
 	COMMENT Acdt_flag is equal to TRUE.
 	COMMENT - Call function MenuInit.
 	COMMENT 3.Return from the function.
 	COMMENT
 	COMMENT COND : COND1 OR COND2 OR COND3 OR COND4 OR COND5
 	COMMENT
 	COMMENT COND1 : Splash timer is greater than or equal to SPLASH_TIME  
 	COMMENT COND2 : Splash_b1_press is zero AND any one of the buttons from Switches is pressed(i.e b1,b2,b3,b4,b5,b6,b7,b8,b10,b11,b12,b13,c1,c2,c3, sLE, sRe)
 	COMMENT COND3 : twist of sLE of Switches is not equal to zero 
	COMMENT COND4 : twist of sRe of Switches is not equal to zero  
    COMMENT COND5 : flag which indicate first demo mode  Bitwise and Demo_active bitwise and of result of COND6
	COMMENT COND6 : splash timer is greater than or equal to SPLASH_TIME
    COMMENT  Equivalence class 62,63,64,65,66,67,68,69,195,82,108,100,110,72,115,87,88,89,111,90,91,92,93,95,96,97,98,192,194,195
	COMMENT 				   213,214,215,216 
    COMMENT  MCDC Covered FTFFFFFFFFFFFFTXXXXXXX
    COMMENT </TD>
    
    ELEMENT


        COMMENT INPUT SECTION:
		
			VAR Pg_cnt,        init = 1,       ev = init
			
            VAR Ap_poly_graph[0].polygon_shape,        init = FG_RED_X_SHAPE,       ev = init
        
            --data read from Parameters[0]
            VAR Port1_label_count,                              init = 2,                   ev = init

            --type of the parameter
            VAR Parameters[1].type,                             init = BNR,                 ev = init

            --data read from Parameters[2]
            VAR PTU_parameters[1].reading,                      init = NCD,                 ev = init
            
            --data read from Parameters[2]
            VAR PTU_parameters_numbox[1].reading,               init = NCD,                 ev = init
            
            --type of the parameter
            VAR Parameters[2].type,                             init = BCD,                 ev = init
            
            --data read from Parameters[2]
            VAR PTU_parameters_numbox[2].reading,               init = NCD,                 ev = init
            
            --Counter value used to loop 
            VAR Bg_cnt,                                         init = 1,                   ev = init
			
			VAR Cg_cnt,                                         init = 1,               ev = init
			
            VAR Text_cnt,                                       init = 1,               ev = init
			
            VAR Tb_cnt,                                         init = 1,               ev = init

            --Counter value used to loop 
            VAR Nb_cnt,                                         init = 1,                   ev = init

            --Number limit
            VAR Ap_page1_bar_graphs[0].numLimit,                init = 1,                   ev = init   

            VAR Ap_page1_bar_graphs[0].psParam,                 init = &PTU_param,          ev = init

            --value of the channel 
            VAR PTU_param.fread,                                init = 1,                   ev = init

            --limit value
            VAR Ap_page1_bar_graphs[0].limVal[0],               init = 1,                   ev = init   

            --limit value type
            VAR Ap_page1_bar_graphs[0].limValtype[0],           init = EQUAL,               ev = init   

            --Color for different limits    
            VAR Ap_page1_bar_graphs[0].limColor[0],             init = YELLOW,              ev = init   

            --Color of the bargraph
            VAR Ap_page1_bar_graphs[0].ePenColor,               init = YELLOW,              ev = init

            --Number limit
            VAR Page_num_boxes[0].numLimit,                     init = 1,                   ev = init               

            VAR Page_num_boxes[0].psParam,                      init = &PTU_param1,         ev = init

            --Parameter r driving the number
            VAR PTU_param1.fread,                               init = 1,                   ev = init

            --limit value
            VAR Page_num_boxes[0].limVal[0],                    init = 1,                   ev = init   

            --limit value type
            VAR Page_num_boxes[0].limValtype[0],                init = EQUAL,               ev = init

            --Color for different limits
            VAR Page_num_boxes[0].limColor[0],                  init = YELLOW,              ev = init   

            --Pen color
            VAR Page_num_boxes[0].ePenColor,                    init = YELLOW,              ev = init

            --Holds Button 1 press flag for splash screen
            VAR Splash_b1_press,                                init = 0,                   ev = init
            
            --Left Twist selection
            VAR Switches.sLE.twist,                             init = 1,                   ev = init
            
            --Right Twist selection
            VAR Switches.sRE.twist,                             init = 1,                   ev = init
                
            --Button 1
            VAR Switches.b1,                                    init = 0,                   ev = init

            --Button 2
            VAR Switches.b2,                                    init = 0,                   ev = init

            --Button 3
            VAR Switches.b3,                                    init = 0,                   ev = init

            --Button 4
            VAR Switches.b4,                                    init = 0,                   ev = init

            --Button 5
            VAR Switches.b5,                                    init = 0,                   ev = init

            --Button 6
            VAR Switches.b6,                                    init = 0,                   ev = init

            --Button 7
            VAR Switches.b7,                                    init = 0,                   ev = init

            --Button 8
            VAR Switches.b8,                                    init = 0,                   ev = init
			
			--Button 10
            VAR Switches.b10,            						init = 0,       					ev = init
			
			--Button 11
            VAR Switches.b11,           					 	init = 0,       					ev = init
			
			--Button 12
            VAR Switches.b12,            						init = 0,       					ev = init
			
			--Button 13
            VAR Switches.b13,            						init = 0,       					ev = init 

            --Button c1
            VAR Switches.c1,                                    init = 1,                   ev = init

            --Button c2
            VAR Switches.c2,                                    init = 0,                   ev = init

            --Button c3
            VAR Switches.c3,                                    init = 0,                   ev = init

            --Left Encoder selection
            VAR Switches.sLE.pressed,                           init = 0,                   ev = init

            --Right Encoder selection
            VAR Switches.sRE.pressed,                           init = 0,                   ev = init
            
            --NV RAM CRC fail check
            VAR Nv_crc_fail,                                    init = FALSE,               ev = init

            --Position value of Display Unit 
            VAR Du_position,                                    init = 0,                   ev = init

            --Counter used to loop
            VAR Rd_cnt,                                         init = 1,                   ev = init
            
            --flag of page setting
            VAR Acdt_flag,                                      init = TRUE,                ev = init

            --X-Axis of the Bottom Center of Bar graph
            VAR Page_settings.acdt_axis.u16_x,                  init = 50,                  ev = init

            --Y-Axis of the Bottom Center of Bar graph
            VAR Page_settings.acdt_axis.u16_y,                  init = 50,                  ev = init
			
			--VAR Bitmap_crc_check_bit[1],					init = TRUE,				ev = init
			
			VAR Page_parameter_error,        init = FALSE,       ev = init

            
        COMMENT OUTPUT SECTION:
                                                            
             --Status of channel
            VAR PTU_param.stat,                                 init = PARAM_OK,            ev = init  

            --Parameter stat driving the number
            VAR PTU_param1.stat,                                init = PARAM_OK,            ev = init
                                                            
        COMMENT INPUT/OUTPUT SECTION:
                                                            
            --Indicates the value of splash screen display
                VAR Splash_done,                                init = ZERO,                ev = 1
            
        -- Stub Calls:
                                                                
        SIMUL
            
            --reads the message from RTD 
            STUB RTDGetParam(1)
            STUB RTDGetParam(1)

            --reads the discrete word
            STUB RTDGetParamDdw(2)

            --allows the calling task to delay for a specific number of clock ticks
            STUB  OsTimeDly(250)

            --To load the background
            STUB ForegroundLoadBackground((T_UINT16 *)(BG_IMAGE_ADDR+(Page_num*PAGE_BITMAP_NUM_OF_SECTOR*SECTOR_SIZE)))

            --extracts page wise settings from PDI
            STUB PdiPageDataInit(Page_num)

            --Allocate a single round dial
            STUB RoundDialAllocat(Ap_page0_dials)   

            --Allocates number box structure
            STUB NumboxAllocat(Page_num_boxes)

            --Allocates number box structure
            STUB BargraphAllocat(Ap_page1_bar_graphs)
			
			--Allocates Carrot Graph structure
			STUB CarrotGraphAllocat (Ap_page2_carrot)
				
			--Allocates Text structure
			STUB TextAllocatPdi(&Page_txt[0].ppsOwner,Page_txt[0].u16X0,Page_txt[0].u16Y0,Page_txt[0].eTXAlign,Page_txt[0].eTXFont,Page_txt[0].ePenColor,Page_txt[0].eTXV,Page_txt[0].eTXFlash)
				
			--Allocates Text Box structure
			STUB TextBoxPdiAllocate (Ap_page_tbs)

            --configures the timer initializations and all text boxes 
            STUB MenuInit()

            --disables the text box
            STUB TextBoxOff(&Prim_cool_down_pop_up_box)

        
        END SIMUL
                                            
        -- Calling the Unit Under Test 
        #GrappApp();
        
    END ELEMENT

END TEST -- TEST 10

TEST 11
FAMILY nominal

    COMMENT  Test Description
    COMMENT  <TD>   
    COMMENT  [hdudispfgrapp-GrappApp-DB-LLR-003]
    COMMENT  The function 'GrappApp' does the following when Splash done is zero and COND is true.
 	COMMENT - Set splash done to 1.
	COMMENT - Set Page_num to EPAGE1,Cool_down_select to FALSE , Fuel_flow_select to FUEL_FLOW_ON and
	COMMENT   Active_eiu to EIU1 if Nv_crc_fail is equal to TRUE AND Du_position is equal to ONE
 	COMMENT - Call functions OffsideSwitchScreen with Page_num as parameter,OffsideCoolTimer with Cool_down_select as parameter
 	COMMENT  and GlobalSettingsSetEIU with  Active_eiu as parameter when Du_position is equal to ONE
 	COMMENT - Call functions OsTimeDly with parameter 250 and ForegroundLoadBackground with sum of BG_IMAGE_ADDR and product 
 	COMMENT of Page_num, PAGE_BITMAP_NUM_OF_SECTOR and SECTOR_SIZE as its parameter.
 	COMMENT - Call the function PdiPageDataInit with Page_num as its parameter
 	COMMENT - Call the function RoundDialsInit with Ap_page0_dials as its parameter
 	COMMENT - Call the function NumberBoxInit with Page_num_boxes as its parameter
 	COMMENT - Call the function BarGraphInit with Ap_page1_bar_graphs as its parameter
 	COMMENT - Call function TextBoxOff with reference to Prim_cool_down_pop_up_box as parameter.
 	COMMENT - Set s16ULX of Prim_cool_down_pop_up_box to u16_x of acdt_axis of Page_settings minus COOLDOWN_AXIS_CALIBRATION,
 	COMMENT Set s16ULY of Prim_cool_down_pop_up_box to u16_y of acdt_axis of Page_settings minus COOLDOWN_AXIS_CALIBRATION when
 	COMMENT Acdt_flag is equal to TRUE.
 	COMMENT - Call function MenuInit.
 	COMMENT 3.Return from the function.
 	COMMENT
 	COMMENT COND : COND1 OR COND2 OR COND3 OR COND4 OR COND5
 	COMMENT
 	COMMENT COND1 : Splash timer is greater than or equal to SPLASH_TIME  
 	COMMENT COND2 : Splash_b1_press is zero AND any one of the buttons from Switches is pressed(i.e b1,b2,b3,b4,b5,b6,b7,b8,b10,b11,b12,b13,c1,c2,c3, sLE, sRe)
 	COMMENT COND3 : twist of sLE of Switches is not equal to zero 
	COMMENT COND4 : twist of sRe of Switches is not equal to zero  
    COMMENT COND5 : flag which indicate first demo mode  Bitwise and Demo_active bitwise and of result of COND6
	COMMENT COND6 : splash timer is greater than or equal to SPLASH_TIME
    COMMENT  Equivalence class 62,63,64,65,66,67,68,69,195,83,108,100,110,72,115,87,88,89,111,90,91,92,93,94,96,97,98,192,194,195
	COMMENT 				   213,214,215,216 
    COMMENT  MCDC Covered  FTFFFFFFFFFFFFFTXXXXXX
    COMMENT </TD>
    
    ELEMENT


        COMMENT INPUT SECTION:
		
			VAR Pg_cnt,        init = 1,       ev = init
			
            VAR Ap_poly_graph[0].polygon_shape,        init = FG_RED_X_SHAPE,       ev = init
        
            --data read from Parameters[0]
            VAR Port1_label_count,                              init = 2,               ev = init

            --type of the parameter
            VAR Parameters[1].type,                             init = BNR,             ev = init

            --data read from Parameters[2]
            VAR PTU_parameters[1].reading,                      init = NCD,             ev = init
            
            --data read from Parameters[2]
            VAR PTU_parameters_numbox[1].reading,               init = NCD,             ev = init
            
            --type of the parameter
            VAR Parameters[2].type,                             init = BCD,             ev = init
            
            --data read from Parameters[2]
            VAR PTU_parameters_numbox[2].reading,               init = NCD,             ev = init
            
            --Counter value used to loop 
            VAR Bg_cnt,                                         init = 1,               ev = init
			
			VAR Cg_cnt,                                         init = 1,               ev = init
			
            VAR Text_cnt,                                       init = 1,               ev = init
			
            VAR Tb_cnt,                                         init = 1,               ev = init

            --Counter value used to loop 
            VAR Nb_cnt,                                         init = 1,               ev = init

            --Number limit
            VAR Ap_page1_bar_graphs[0].numLimit,                init = 1,               ev = init   

            VAR Ap_page1_bar_graphs[0].psParam,                 init = &PTU_param,      ev = init

            --value of the channel 
            VAR PTU_param.fread,                                init = 1,               ev = init

            --limit value
            VAR Ap_page1_bar_graphs[0].limVal[0],               init = 1,               ev = init   

            --limit value type
            VAR Ap_page1_bar_graphs[0].limValtype[0],           init = EQUAL,           ev = init   

            --Color for different limits
            VAR Ap_page1_bar_graphs[0].limColor[0],             init = YELLOW,          ev = init   

            --Color of the bargraph
            VAR Ap_page1_bar_graphs[0].ePenColor,               init = YELLOW,          ev = init

            --Number limit
            VAR Page_num_boxes[0].numLimit,                     init = 1,               ev = init               

            VAR Page_num_boxes[0].psParam,                      init = &PTU_param1,     ev = init

            --Parameter r driving the number
            VAR PTU_param1.fread,                               init = 1,               ev = init

            --limit value
            VAR Page_num_boxes[0].limVal[0],                    init = 1,               ev = init   

            --limit value type
            VAR Page_num_boxes[0].limValtype[0],                init = EQUAL,           ev = init

            --Color for different limits
            VAR Page_num_boxes[0].limColor[0],                  init = YELLOW,          ev = init   

            --Pen color
            VAR Page_num_boxes[0].ePenColor,                    init = YELLOW,          ev = init
            
            --Holds Button 1 press flag for splash screen
            VAR Splash_b1_press,                                init = 0,               ev = init
            
            --Left Twist selection
            VAR Switches.sLE.twist,                             init = 1,               ev = init
            
            --Right Twist selection
            VAR Switches.sRE.twist,                             init = 1,               ev = init
            
            --Button 1
            VAR Switches.b1,                                    init = 0,               ev = init

            --Button 2
            VAR Switches.b2,                                    init = 0,               ev = init

            --Button 3
            VAR Switches.b3,                                    init = 0,               ev = init

            --Button 4
            VAR Switches.b4,                                    init = 0,               ev = init

            --Button 5
            VAR Switches.b5,                                    init = 0,               ev = init

            --Button 6
            VAR Switches.b6,                                    init = 0,               ev = init

            --Button 7
            VAR Switches.b7,                                    init = 0,               ev = init

            --Button 8
            VAR Switches.b8,                                    init = 0,               ev = init
			
			--Button 10
            VAR Switches.b10,            						init = 0,       					ev = init
			
			--Button 11
            VAR Switches.b11,           					 	init = 0,       					ev = init
			
			--Button 12
            VAR Switches.b12,            						init = 0,       					ev = init
			
			--Button 13
            VAR Switches.b13,            						init = 0,       					ev = init 

            --Button c1
            VAR Switches.c1,                                    init = 0,               ev = init

            --Button c2
            VAR Switches.c2,                                    init = 1,               ev = init

            --Button c3
            VAR Switches.c3,                                    init = 0,               ev = init

            --Left Encoder selection
            VAR Switches.sLE.pressed,                           init = 0,               ev = init

            --Right Encoder selection
            VAR Switches.sRE.pressed,                           init = 0,               ev = init
            
            --NV RAM CRC fail check
            VAR Nv_crc_fail,                                    init = FALSE,           ev = init

            --Position value of Display Unit 
            VAR Du_position,                                    init = 0,               ev = init

            --Counter used to loop
            VAR Rd_cnt,                                         init = 1,               ev = init
            
            --flag of page setting
            VAR Acdt_flag,                                      init = TRUE,            ev = init

            --X-Axis of the Bottom Center of Bar graph
            VAR Page_settings.acdt_axis.u16_x,                  init = 50,              ev = init

            --Y-Axis of the Bottom Center of Bar graph
            VAR Page_settings.acdt_axis.u16_y,                  init = 50,              ev = init
			
			--VAR Bitmap_crc_check_bit[1],					init = TRUE,				ev = init
			
			VAR Page_parameter_error,        init = FALSE,       ev = init
                
            
        COMMENT OUTPUT SECTION:
                                                            
             --Status of channel
            VAR PTU_param.stat,                                 init = PARAM_OK,        ev = init  

            --Parameter stat driving the number
            VAR PTU_param1.stat,                                init = PARAM_OK,        ev = init
                                                            
        COMMENT INPUT/OUTPUT SECTION:
                                                            
            --Indicates the value of splash screen display
                VAR Splash_done,                                init = ZERO,            ev = 1
            
        -- Stub Calls:
                                                                
        SIMUL
            
            --reads the message from RTD 
            STUB RTDGetParam(1)
            STUB RTDGetParam(1)

            --reads the discrete word
            STUB RTDGetParamDdw(2)

            --allows the calling task to delay for a specific number of clock ticks
            STUB  OsTimeDly(250)

            --To load the background
            STUB ForegroundLoadBackground((T_UINT16 *)(BG_IMAGE_ADDR+(Page_num*PAGE_BITMAP_NUM_OF_SECTOR*SECTOR_SIZE)))

            --extracts page wise settings from PDI
            STUB PdiPageDataInit(Page_num)

            --Allocate a single round dial
            STUB RoundDialAllocat(Ap_page0_dials)   

            --Allocates number box structure
            STUB NumboxAllocat(Page_num_boxes)

            --Allocates number box structure
            STUB BargraphAllocat(Ap_page1_bar_graphs)
			
			--Allocates Carrot Graph structure
			STUB CarrotGraphAllocat (Ap_page2_carrot)
				
			--Allocates Text structure
			STUB TextAllocatPdi(&Page_txt[0].ppsOwner,Page_txt[0].u16X0,Page_txt[0].u16Y0,Page_txt[0].eTXAlign,Page_txt[0].eTXFont,Page_txt[0].ePenColor,Page_txt[0].eTXV,Page_txt[0].eTXFlash)
				
			--Allocates Text Box structure
			STUB TextBoxPdiAllocate (Ap_page_tbs)

            --configures the timer initializations and all text boxes 
            STUB MenuInit()

            --disables the text box
            STUB TextBoxOff(&Prim_cool_down_pop_up_box)
           
        END SIMUL
                                            
        -- Calling the Unit Under Test 
        #GrappApp();
        
    END ELEMENT

END TEST -- TEST 11

TEST 12
FAMILY nominal

    COMMENT  Test Description
    COMMENT  <TD>   
    COMMENT  [hdudispfgrapp-GrappApp-DB-LLR-003]
    COMMENT  The function 'GrappApp' does the following when Splash done is zero and COND is true.
 	COMMENT - Set splash done to 1.
	COMMENT - Set Page_num to EPAGE1,Cool_down_select to FALSE , Fuel_flow_select to FUEL_FLOW_ON and
	COMMENT   Active_eiu to EIU1 if Nv_crc_fail is equal to TRUE AND Du_position is equal to ONE
 	COMMENT - Call functions OffsideSwitchScreen with Page_num as parameter,OffsideCoolTimer with Cool_down_select as parameter
 	COMMENT  and GlobalSettingsSetEIU with  Active_eiu as parameter when Du_position is equal to ONE
 	COMMENT - Call functions OsTimeDly with parameter 250 and ForegroundLoadBackground with sum of BG_IMAGE_ADDR and product 
 	COMMENT of Page_num, PAGE_BITMAP_NUM_OF_SECTOR and SECTOR_SIZE as its parameter.
 	COMMENT - Call the function PdiPageDataInit with Page_num as its parameter
 	COMMENT - Call the function RoundDialsInit with Ap_page0_dials as its parameter
 	COMMENT - Call the function NumberBoxInit with Page_num_boxes as its parameter
 	COMMENT - Call the function BarGraphInit with Ap_page1_bar_graphs as its parameter
 	COMMENT - Call function TextBoxOff with reference to Prim_cool_down_pop_up_box as parameter.
 	COMMENT - Set s16ULX of Prim_cool_down_pop_up_box to u16_x of acdt_axis of Page_settings minus COOLDOWN_AXIS_CALIBRATION,
 	COMMENT Set s16ULY of Prim_cool_down_pop_up_box to u16_y of acdt_axis of Page_settings minus COOLDOWN_AXIS_CALIBRATION when
 	COMMENT Acdt_flag is equal to TRUE.
 	COMMENT - Call function MenuInit.
 	COMMENT 3.Return from the function.
 	COMMENT
 	COMMENT COND : COND1 OR COND2 OR COND3 OR COND4 OR COND5
 	COMMENT
 	COMMENT COND1 : Splash timer is greater than or equal to SPLASH_TIME  
 	COMMENT COND2 : Splash_b1_press is zero AND any one of the buttons from Switches is pressed(i.e b1,b2,b3,b4,b5,b6,b7,b8,b10,b11,b12,b13,c1,c2,c3, sLE, sRe)
 	COMMENT COND3 : twist of sLE of Switches is not equal to zero 
	COMMENT COND4 : twist of sRe of Switches is not equal to zero  
    COMMENT COND5 : flag which indicate first demo mode  Bitwise and Demo_active bitwise and of result of COND6
	COMMENT COND6 : splash timer is greater than or equal to SPLASH_TIME
    COMMENT  Equivalence class 62,63,64,65,66,67,68,69,195,84,108,100,110,72,115,87,88,89,111,90,91,92,93,94,95,97,98,192,194,195
	COMMENT 				   213,214,215,216 
    COMMENT  MCDC Covered  FTFFFFFFFFFFFFFFTXXXXX
    COMMENT </TD>
    
    ELEMENT


        COMMENT INPUT SECTION:
		
			VAR Pg_cnt,        init = 1,       ev = init
			
            VAR Ap_poly_graph[0].polygon_shape,        init = FG_RED_X_SHAPE,       ev = init
        
            --data read from Parameters[0]
            VAR Port1_label_count,                              init = 2,               ev = init

            --type of the parameter
            VAR Parameters[1].type,                             init = BNR,             ev = init

            --data read from Parameters[2]
            VAR PTU_parameters[1].reading,                      init = NCD,             ev = init
            
            --data read from Parameters[2]
            VAR PTU_parameters_numbox[1].reading,               init = NCD,             ev = init
            
            --type of the parameter
            VAR Parameters[2].type,                             init = BCD,             ev = init
            
            --data read from Parameters[2]
            VAR PTU_parameters_numbox[2].reading,               init = NCD,             ev = init
            
            --Counter value used to loop 
            VAR Bg_cnt,                                         init = 1,               ev = init
			
			VAR Cg_cnt,                                         init = 1,               ev = init
			
            VAR Text_cnt,                                       init = 1,               ev = init
			
            VAR Tb_cnt,                                         init = 1,               ev = init

            --Counter value used to loop 
            VAR Nb_cnt,                                         init = 1,               ev = init

            --Number limit
            VAR Ap_page1_bar_graphs[0].numLimit,                init = 1,               ev = init   

            VAR Ap_page1_bar_graphs[0].psParam,                 init = &PTU_param,      ev = init

            --value of the channel 
            VAR PTU_param.fread,                                init = 1,               ev = init

            --limit value
            VAR Ap_page1_bar_graphs[0].limVal[0],               init = 1,               ev = init   

            --limit value type
            VAR Ap_page1_bar_graphs[0].limValtype[0],           init = EQUAL,           ev = init   

            --Color for different limits
            VAR Ap_page1_bar_graphs[0].limColor[0],             init = YELLOW,          ev = init   

            --Color of the bargraph
            VAR Ap_page1_bar_graphs[0].ePenColor,               init = YELLOW,          ev = init

            --Number limit
            VAR Page_num_boxes[0].numLimit,                     init = 1,               ev = init               

            VAR Page_num_boxes[0].psParam,                      init = &PTU_param1,     ev = init

            --Parameter r driving the number
            VAR PTU_param1.fread,                               init = 1,               ev = init

            --limit value
            VAR Page_num_boxes[0].limVal[0],                    init = 1,               ev = init   

            --limit value type
            VAR Page_num_boxes[0].limValtype[0],                init = EQUAL,           ev = init

            --Color for different limits
            VAR Page_num_boxes[0].limColor[0],                  init = YELLOW,          ev = init   

            --Pen color
            VAR Page_num_boxes[0].ePenColor,                    init = YELLOW,          ev = init

            --Holds Button 1 press flag for splash screen
            VAR Splash_b1_press,                                init = 0,               ev = init
            
            --Left Twist selection
            VAR Switches.sLE.twist,                             init = 1,               ev = init
            
            --Right Twist selection
            VAR Switches.sRE.twist,                             init = 1,               ev = init
            
            --Button 1
            VAR Switches.b1,                                    init = 0,               ev = init

            --Button 2
            VAR Switches.b2,                                    init = 0,               ev = init

            --Button 3
            VAR Switches.b3,                                    init = 0,               ev = init

            --Button 4
            VAR Switches.b4,                                    init = 0,               ev = init

            --Button 5
            VAR Switches.b5,                                    init = 0,               ev = init

            --Button 6
            VAR Switches.b6,                                    init = 0,               ev = init

            --Button 7
            VAR Switches.b7,                                    init = 0,               ev = init

            --Button 8
            VAR Switches.b8,                                    init = 0,               ev = init
			
			--Button 10
            VAR Switches.b10,            						init = 0,       					ev = init
			
			--Button 11
            VAR Switches.b11,           					 	init = 0,       					ev = init
			
			--Button 12
            VAR Switches.b12,            						init = 0,       					ev = init
			
			--Button 13
            VAR Switches.b13,            						init = 0,       					ev = init 

            --Button c1
            VAR Switches.c1,                                    init = 0,               ev = init

            --Button c2
            VAR Switches.c2,                                    init = 0,               ev = init

            --Button c3
            VAR Switches.c3,                                    init = 1,               ev = init

            --Left Encoder selection
            VAR Switches.sLE.pressed,                           init = 0,               ev = init

            --Right Encoder selection
            VAR Switches.sRE.pressed,                           init = 0,               ev = init
            
            --NV RAM CRC fail check
            VAR Nv_crc_fail,                                    init = FALSE,           ev = init

            --Position value of Display Unit 
            VAR Du_position,                                    init = 0,               ev = init

            --Counter used to loop
            VAR Rd_cnt,                                         init = 1,               ev = init
            
            --flag of page setting
            VAR Acdt_flag,                                      init = TRUE,            ev = init

            --X-Axis of the Bottom Center of Bar graph
            VAR Page_settings.acdt_axis.u16_x,                  init = 50,              ev = init

            --Y-Axis of the Bottom Center of Bar graph
            VAR Page_settings.acdt_axis.u16_y,                  init = 50,              ev = init
			
			--VAR Bitmap_crc_check_bit[1],					init = TRUE,				ev = init
			
			VAR Page_parameter_error,        init = FALSE,       ev = init
                
            
        COMMENT OUTPUT SECTION:
                                                            
             --Status of channel
            VAR PTU_param.stat,                             init = PARAM_OK,            ev = init  

            --Parameter stat driving the number
            VAR PTU_param1.stat,                            init = PARAM_OK,            ev = init
                                                            
        COMMENT INPUT/OUTPUT SECTION:
                                                            
            --Indicates the value of splash screen display
                VAR Splash_done,                            init = ZERO,                ev = 1
            
        -- Stub Calls:
                                                                
        SIMUL
            
            --reads the message from RTD 
            STUB RTDGetParam(1)
            STUB RTDGetParam(1)

            --reads the discrete word
            STUB RTDGetParamDdw(2)

            --allows the calling task to delay for a specific number of clock ticks
            STUB  OsTimeDly(250)

            --To load the background
            STUB ForegroundLoadBackground((T_UINT16 *)(BG_IMAGE_ADDR+(Page_num*PAGE_BITMAP_NUM_OF_SECTOR*SECTOR_SIZE)))

            --extracts page wise settings from PDI
            STUB PdiPageDataInit(Page_num)

            --Allocate a single round dial
            STUB RoundDialAllocat(Ap_page0_dials)   

            --Allocates number box structure
            STUB NumboxAllocat(Page_num_boxes)

            --Allocates number box structure
            STUB BargraphAllocat(Ap_page1_bar_graphs)
			
			--Allocates Carrot Graph structure
			STUB CarrotGraphAllocat (Ap_page2_carrot)
				
			--Allocates Text structure
			STUB TextAllocatPdi(&Page_txt[0].ppsOwner,Page_txt[0].u16X0,Page_txt[0].u16Y0,Page_txt[0].eTXAlign,Page_txt[0].eTXFont,Page_txt[0].ePenColor,Page_txt[0].eTXV,Page_txt[0].eTXFlash)
				
			--Allocates Text Box structure
			STUB TextBoxPdiAllocate (Ap_page_tbs)

            --configures the timer initializations and all text boxes 
            STUB MenuInit()

            --disables the text box
            STUB TextBoxOff(&Prim_cool_down_pop_up_box)
           
        END SIMUL
                                            
        -- Calling the Unit Under Test 
        #GrappApp();
        
    END ELEMENT

END TEST -- TEST 12

TEST 13
FAMILY nominal

    COMMENT  Test Description
    COMMENT  <TD>   
    COMMENT  [hdudispfgrapp-GrappApp-DB-LLR-003]
    COMMENT  The function 'GrappApp' does the following when Splash done is zero and COND is true.
 	COMMENT - Set splash done to 1.
	COMMENT - Set Page_num to EPAGE1,Cool_down_select to FALSE , Fuel_flow_select to FUEL_FLOW_ON and
	COMMENT   Active_eiu to EIU1 if Nv_crc_fail is equal to TRUE AND Du_position is equal to ONE
 	COMMENT - Call functions OffsideSwitchScreen with Page_num as parameter,OffsideCoolTimer with Cool_down_select as parameter
 	COMMENT  and GlobalSettingsSetEIU with  Active_eiu as parameter when Du_position is equal to ONE
 	COMMENT - Call functions OsTimeDly with parameter 250 and ForegroundLoadBackground with sum of BG_IMAGE_ADDR and product 
 	COMMENT of Page_num, PAGE_BITMAP_NUM_OF_SECTOR and SECTOR_SIZE as its parameter.
 	COMMENT - Call the function PdiPageDataInit with Page_num as its parameter
 	COMMENT - Call the function RoundDialsInit with Ap_page0_dials as its parameter
 	COMMENT - Call the function NumberBoxInit with Page_num_boxes as its parameter
 	COMMENT - Call the function BarGraphInit with Ap_page1_bar_graphs as its parameter
 	COMMENT - Call function TextBoxOff with reference to Prim_cool_down_pop_up_box as parameter.
 	COMMENT - Set s16ULX of Prim_cool_down_pop_up_box to u16_x of acdt_axis of Page_settings minus COOLDOWN_AXIS_CALIBRATION,
 	COMMENT Set s16ULY of Prim_cool_down_pop_up_box to u16_y of acdt_axis of Page_settings minus COOLDOWN_AXIS_CALIBRATION when
 	COMMENT Acdt_flag is equal to TRUE.
 	COMMENT - Call function MenuInit.
 	COMMENT 3.Return from the function.
 	COMMENT
 	COMMENT COND : COND1 OR COND2 OR COND3 OR COND4 OR COND5
 	COMMENT
 	COMMENT COND1 : Splash timer is greater than or equal to SPLASH_TIME  
 	COMMENT COND2 : Splash_b1_press is zero AND any one of the buttons from Switches is pressed(i.e b1,b2,b3,b4,b5,b6,b7,b8,b10,b11,b12,b13,c1,c2,c3, sLE, sRe)
 	COMMENT COND3 : twist of sLE of Switches is not equal to zero 
	COMMENT COND4 : twist of sRe of Switches is not equal to zero  
    COMMENT COND5 : flag which indicate first demo mode  Bitwise and Demo_active bitwise and of result of COND6
	COMMENT COND6 : splash timer is greater than or equal to SPLASH_TIME
    COMMENT  Equivalence class 62,63,64,65,66,67,68,69,195,85,108,100,110,72,115,87,88,89,111,90,91,92,93,94,95,96,98,192,194,195,213,214,215,216
	COMMENT 				   213,214,215,216 
    COMMENT  MCDC Covered FTFFFFFFFFFFFFFFFTXXXX
    COMMENT </TD>
    
    ELEMENT


        COMMENT INPUT SECTION:
		
			VAR Pg_cnt,        init = 1,       ev = init
			
            VAR Ap_poly_graph[0].polygon_shape,        init = FG_RED_X_SHAPE,       ev = init
        
            --data read from Parameters[0]
            VAR Port1_label_count,                              init = 2,                           ev = init

            --type of the parameter
            VAR Parameters[1].type,                             init = BNR,                         ev = init

            --data read from Parameters[2]
            VAR PTU_parameters[1].reading,                      init = NCD,                         ev = init
            
            --data read from Parameters[2]
            VAR PTU_parameters_numbox[1].reading,               init = NCD,                         ev = init
            
            --type of the parameter
            VAR Parameters[2].type,                             init = BCD,                         ev = init
            
            --data read from Parameters[2]
            VAR PTU_parameters_numbox[2].reading,               init = NCD,                         ev = init
            
            --Counter value used to loop 
            VAR Bg_cnt,                                         init = 1,                           ev = init
			
			VAR Cg_cnt,                                         init = 1,               ev = init
			
            VAR Text_cnt,                                       init = 1,               ev = init
			
            VAR Tb_cnt,                                         init = 1,               ev = init

            --Counter value used to loop 
            VAR Nb_cnt,                                         init = 1,                           ev = init

            --Number limit
            VAR Ap_page1_bar_graphs[0].numLimit,                init = 1,                           ev = init   

            VAR Ap_page1_bar_graphs[0].psParam,                 init = &PTU_param,                  ev = init

            --value of the channel 
            VAR PTU_param.fread,                                init = 1,                           ev = init

            --limit value
            VAR Ap_page1_bar_graphs[0].limVal[0],               init = 1,                           ev = init   

            --limit value type
            VAR Ap_page1_bar_graphs[0].limValtype[0],           init = EQUAL,                       ev = init   

            --Color for different limits
            VAR Ap_page1_bar_graphs[0].limColor[0],             init = YELLOW,                      ev = init   

            --Color of the bargraph
            VAR Ap_page1_bar_graphs[0].ePenColor,               init = YELLOW,                      ev = init

            --Number limit
            VAR Page_num_boxes[0].numLimit,                     init = 1,                           ev = init               

            VAR Page_num_boxes[0].psParam,                      init = &PTU_param1,                 ev = init

            --Parameter r driving the number
            VAR PTU_param1.fread,                               init = 1,                           ev = init

            --limit value
            VAR Page_num_boxes[0].limVal[0],                    init = 1,                           ev = init   

            --limit value type
            VAR Page_num_boxes[0].limValtype[0],                init = EQUAL,                       ev = init

            --Color for different limits
            VAR Page_num_boxes[0].limColor[0],                  init = YELLOW,                      ev = init   

            --Pen color
            VAR Page_num_boxes[0].ePenColor,                    init = YELLOW,                      ev = init

            --Holds Button 1 press flag for splash screen
            VAR Splash_b1_press,                                init = 0,                           ev = init
            
            --Left Twist selection
            VAR Switches.sLE.twist,                             init = 1,                           ev = init
            
            --Right Twist selection
            VAR Switches.sRE.twist,                             init = 1,                           ev = init
            
            --Button 1
            VAR Switches.b1,                                    init = 0,                           ev = init

            --Button 2
            VAR Switches.b2,                                    init = 0,                           ev = init

            --Button 3
            VAR Switches.b3,                                    init = 0,                           ev = init

            --Button 4
            VAR Switches.b4,                                    init = 0,                           ev = init

            --Button 5
            VAR Switches.b5,                                    init = 0,                           ev = init

            --Button 6
            VAR Switches.b6,                                    init = 0,                           ev = init

            --Button 7
            VAR Switches.b7,                                    init = 0,                           ev = init

            --Button 8
            VAR Switches.b8,                                    init = 0,                           ev = init
			
			--Button 10
            VAR Switches.b10,            						init = 0,       					ev = init
			
			--Button 11
            VAR Switches.b11,           					 	init = 0,       					ev = init
			
			--Button 12
            VAR Switches.b12,            						init = 0,       					ev = init
			
			--Button 13
            VAR Switches.b13,            						init = 0,       					ev = init 

            --Button c1
            VAR Switches.c1,                                    init = 0,                           ev = init

            --Button c2
            VAR Switches.c2,                                    init = 0,                           ev = init

            --Button c3
            VAR Switches.c3,                                    init = 0,                           ev = init

            --Left Encoder selection
            VAR Switches.sLE.pressed,                           init = 1,                           ev = init

            --Right Encoder selection
            VAR Switches.sRE.pressed,                           init = 0,                           ev = init
            
            --NV RAM CRC fail check
            VAR Nv_crc_fail,                                    init = FALSE,                       ev = init
            
            --Position value of Display Unit 
            VAR Du_position,                                    init = 0,                           ev = init

            --Counter used to loop
            VAR Rd_cnt,                                         init = 1,                           ev = init

            --flag of page setting
            VAR Acdt_flag,                                      init = TRUE,                        ev = init

            --X-Axis of the Bottom Center of Bar graph
            VAR Page_settings.acdt_axis.u16_x,                  init = 50,                          ev = init

            --Y-Axis of the Bottom Center of Bar graph
            VAR Page_settings.acdt_axis.u16_y,                  init = 50,                          ev = init
			
			--VAR Bitmap_crc_check_bit[1],					init = TRUE,				ev = init
			
			VAR Page_parameter_error,        init = FALSE,       ev = init

            
        COMMENT OUTPUT SECTION:
                                                            
             --Status of channel
            VAR PTU_param.stat,                                 init = PARAM_OK,                    ev = init  

            --Parameter stat driving the number
            VAR PTU_param1.stat,                                init = PARAM_OK,                    ev = init
                                                            
        COMMENT INPUT/OUTPUT SECTION:
                                                            
            --Indicates the value of splash screen display
                VAR Splash_done,                                init = ZERO,                        ev = 1
            
        -- Stub Calls:
                                                                
        SIMUL
            
            --reads the message from RTD 
            STUB RTDGetParam(1)
            STUB RTDGetParam(1)

            --reads the discrete word
            STUB RTDGetParamDdw(2)

            --allows the calling task to delay for a specific number of clock ticks
            STUB  OsTimeDly(250)

            --To load the background
            STUB ForegroundLoadBackground((T_UINT16 *)(BG_IMAGE_ADDR+(Page_num*PAGE_BITMAP_NUM_OF_SECTOR*SECTOR_SIZE)))

            --extracts page wise settings from PDI
            STUB PdiPageDataInit(Page_num)

            --Allocate a single round dial
            STUB RoundDialAllocat(Ap_page0_dials)   

            --Allocates number box structure
            STUB NumboxAllocat(Page_num_boxes)

            --Allocates number box structure
            STUB BargraphAllocat(Ap_page1_bar_graphs)
			
			--Allocates Carrot Graph structure
			STUB CarrotGraphAllocat (Ap_page2_carrot)
				
			--Allocates Text structure
			STUB TextAllocatPdi(&Page_txt[0].ppsOwner,Page_txt[0].u16X0,Page_txt[0].u16Y0,Page_txt[0].eTXAlign,Page_txt[0].eTXFont,Page_txt[0].ePenColor,Page_txt[0].eTXV,Page_txt[0].eTXFlash)
				
			--Allocates Text Box structure
			STUB TextBoxPdiAllocate (Ap_page_tbs)

            --configures the timer initializations and all text boxes 
            STUB MenuInit()

            --disables the text box
            STUB TextBoxOff(&Prim_cool_down_pop_up_box)

            
        END SIMUL
                                            
        -- Calling the Unit Under Test 
        #GrappApp();
        
    END ELEMENT

END TEST -- TEST 13

TEST 14
FAMILY nominal

    COMMENT  Test Description
    COMMENT  <TD>   
    COMMENT  [hdudispfgrapp-GrappApp-DB-LLR-003]
    COMMENT  The function 'GrappApp' does the following when Splash done is zero and COND is true.
 	COMMENT - Set splash done to 1.
	COMMENT - Set Page_num to EPAGE1,Cool_down_select to FALSE , Fuel_flow_select to FUEL_FLOW_ON and
	COMMENT   Active_eiu to EIU1 if Nv_crc_fail is equal to TRUE AND Du_position is equal to ONE
 	COMMENT - Call functions OffsideSwitchScreen with Page_num as parameter,OffsideCoolTimer with Cool_down_select as parameter
 	COMMENT  and GlobalSettingsSetEIU with  Active_eiu as parameter when Du_position is equal to ONE
 	COMMENT - Call functions OsTimeDly with parameter 250 and ForegroundLoadBackground with sum of BG_IMAGE_ADDR and product 
 	COMMENT of Page_num, PAGE_BITMAP_NUM_OF_SECTOR and SECTOR_SIZE as its parameter.
 	COMMENT - Call the function PdiPageDataInit with Page_num as its parameter
 	COMMENT - Call the function RoundDialsInit with Ap_page0_dials as its parameter
 	COMMENT - Call the function NumberBoxInit with Page_num_boxes as its parameter
 	COMMENT - Call the function BarGraphInit with Ap_page1_bar_graphs as its parameter
 	COMMENT - Call function TextBoxOff with reference to Prim_cool_down_pop_up_box as parameter.
 	COMMENT - Set s16ULX of Prim_cool_down_pop_up_box to u16_x of acdt_axis of Page_settings minus COOLDOWN_AXIS_CALIBRATION,
 	COMMENT Set s16ULY of Prim_cool_down_pop_up_box to u16_y of acdt_axis of Page_settings minus COOLDOWN_AXIS_CALIBRATION when
 	COMMENT Acdt_flag is equal to TRUE.
 	COMMENT - Call function MenuInit.
 	COMMENT 3.Return from the function.
 	COMMENT
 	COMMENT COND : COND1 OR COND2 OR COND3 OR COND4 OR COND5
 	COMMENT
 	COMMENT COND1 : Splash timer is greater than or equal to SPLASH_TIME  
 	COMMENT COND2 : Splash_b1_press is zero AND any one of the buttons from Switches is pressed(i.e b1,b2,b3,b4,b5,b6,b7,b8,b10,b11,b12,b13,c1,c2,c3, sLE, sRe)
 	COMMENT COND3 : twist of sLE of Switches is not equal to zero 
	COMMENT COND4 : twist of sRe of Switches is not equal to zero  
    COMMENT COND5 : flag which indicate first demo mode  Bitwise and Demo_active bitwise and of result of COND6
	COMMENT COND6 : splash timer is greater than or equal to SPLASH_TIME
    COMMENT  Equivalence class 62,63,64,65,66,67,68,69,70,195,86,108,100,110,72,115,87,88,89,111,90,91,92,93,94,95,96,97,192,194,196
	COMMENT 				   213,214,215,216 
    COMMENT  MCDC Covered FTFFFFFFFFFFFFFFFFTXXX
    COMMENT </TD>
    
    ELEMENT


    COMMENT INPUT SECTION:
	
			VAR Pg_cnt,        init = 1,       ev = init
			
            VAR Ap_poly_graph[0].polygon_shape,        init = FG_RED_X_SHAPE,       ev = init
    
        --data read from Parameters[0]
        VAR Port1_label_count,                              init = 2,                               ev = init

        --type of the parameter
        VAR Parameters[1].type,                             init = BNR,                             ev = init

        --data read from Parameters[2]
        VAR PTU_parameters[1].reading,                      init = NCD,                             ev = init
        
        --data read from Parameters[2]
        VAR PTU_parameters_numbox[1].reading,               init = NCD,                             ev = init
        
        --type of the parameter
        VAR Parameters[2].type,                             init = BCD,                             ev = init
        
        --data read from Parameters[2]
        VAR PTU_parameters_numbox[2].reading,               init = NCD,                             ev = init
        
        --Counter value used to loop 
        VAR Bg_cnt,                                         init = 1,                               ev = init
		
		VAR Cg_cnt,                                         init = 1,               ev = init
			
            VAR Text_cnt,                                       init = 1,               ev = init
			
            VAR Tb_cnt,                                         init = 1,               ev = init

        --Counter value used to loop 
        VAR Nb_cnt,                                         init = 1,                               ev = init

        --Number limit
        VAR Ap_page1_bar_graphs[0].numLimit,                init = 1,                               ev = init   

        VAR Ap_page1_bar_graphs[0].psParam,                 init = &PTU_param,                      ev = init

        --value of the channel 
        VAR PTU_param.fread,                                init = 1,                               ev = init

        --limit value
        VAR Ap_page1_bar_graphs[0].limVal[0],               init = 1,                               ev = init   

        --limit value type
        VAR Ap_page1_bar_graphs[0].limValtype[0],           init = EQUAL,                           ev = init   

        --Color for different limits
        VAR Ap_page1_bar_graphs[0].limColor[0],             init = YELLOW,                          ev = init   

        --Color of the bargraph
        VAR Ap_page1_bar_graphs[0].ePenColor,               init = YELLOW,                          ev = init

        --Number limit
        VAR Page_num_boxes[0].numLimit,                     init = 1,                               ev = init               

        VAR Page_num_boxes[0].psParam,                      init = &PTU_param1,                     ev = init

        --Parameter r driving the number
        VAR PTU_param1.fread,                               init = 1,                               ev = init

        --limit value
        VAR Page_num_boxes[0].limVal[0],                    init = 1,                               ev = init   

        --limit value type
        VAR Page_num_boxes[0].limValtype[0],                init = EQUAL,                           ev = init

        --Color for different limits
        VAR Page_num_boxes[0].limColor[0],                  init = YELLOW,                          ev = init   

        --Pen color
        VAR Page_num_boxes[0].ePenColor,                    init = YELLOW,                          ev = init

        --Holds Button 1 press flag for splash screen
        VAR Splash_b1_press,                                init = 0,                               ev = init

        --Left Twist selection
        VAR Switches.sLE.twist,                             init = 1,                               ev = init

        --Right Twist selection
        VAR Switches.sRE.twist,                             init = 1,                               ev = init
            
        --Button 1
        VAR Switches.b1,                                    init = 0,                               ev = init

        --Button 2
        VAR Switches.b2,                                    init = 0,                               ev = init

        --Button 3
        VAR Switches.b3,                                    init = 0,                               ev = init

        --Button 4
        VAR Switches.b4,                                    init = 0,                               ev = init

        --Button 5
        VAR Switches.b5,                                    init = 0,                               ev = init

        --Button 6
        VAR Switches.b6,                                    init = 0,                               ev = init

        --Button 7
        VAR Switches.b7,                                    init = 0,                               ev = init

        --Button 8
        VAR Switches.b8,                                    init = 0,                               ev = init
		
		--Button 10
            VAR Switches.b10,            						init = 0,       					ev = init
			
			--Button 11
            VAR Switches.b11,           					 	init = 0,       					ev = init
			
			--Button 12
            VAR Switches.b12,            						init = 0,       					ev = init
			
			--Button 13
            VAR Switches.b13,            						init = 0,       					ev = init 

        --Button c1
        VAR Switches.c1,                                    init = 0,                               ev = init

        --Button c2
        VAR Switches.c2,                                    init = 0,                               ev = init

        --Button c3
        VAR Switches.c3,                                    init = 0,                               ev = init

        --Left Encoder selection
        VAR Switches.sLE.pressed,                           init = 0,                               ev = init

        --Right Encoder selection
        VAR Switches.sRE.pressed,                           init = 1,                               ev = init
        
        --NV RAM CRC fail check
        VAR Nv_crc_fail,                                    init = TRUE,                            ev = init

        --Position value of Display Unit 
        VAR Du_position,                                    init = 0,                               ev = init

        --Counter used to loop
        VAR Rd_cnt,                                         init = 1,                               ev = init
            
        --flag of page setting
        VAR Acdt_flag,                                      init = FALSE,                           ev = init
		
		--VAR Bitmap_crc_check_bit[1],					init = TRUE,				ev = init
		
		VAR Page_parameter_error,        init = FALSE,       ev = init
            
        
    COMMENT OUTPUT SECTION:
                                                        
         --Status of channel
        VAR PTU_param.stat,                                 init = PARAM_OK,                        ev = init  

        --Parameter stat driving the number
        VAR PTU_param1.stat,                                init = PARAM_OK,                        ev = init
                                                        
    COMMENT INPUT/OUTPUT SECTION:
                                                        
        --Indicates the value of splash screen display
            VAR Splash_done,                                init = ZERO,                            ev = 1
        
    -- Stub Calls:
                                                            
    SIMUL
        
        --reads the message from RTD 
        STUB RTDGetParam(1)
        STUB RTDGetParam(1)

        --reads the discrete word
        STUB RTDGetParamDdw(2)

        --
        STUB  OsTimeDly(250)

        --To load the background
        STUB ForegroundLoadBackground((T_UINT16 *)(BG_IMAGE_ADDR+(Page_num*PAGE_BITMAP_NUM_OF_SECTOR*SECTOR_SIZE)))

        --extracts page wise settings from PDI
        STUB PdiPageDataInit(Page_num)

        --Allocate a single round dial
        STUB RoundDialAllocat(Ap_page0_dials)   

        --Allocates number box structure
        STUB NumboxAllocat(Page_num_boxes)

        --Allocates number box structure
        STUB BargraphAllocat(Ap_page1_bar_graphs)
		
		--Allocates Carrot Graph structure
			STUB CarrotGraphAllocat (Ap_page2_carrot)
				
			--Allocates Text structure
			STUB TextAllocatPdi(&Page_txt[0].ppsOwner,Page_txt[0].u16X0,Page_txt[0].u16Y0,Page_txt[0].eTXAlign,Page_txt[0].eTXFont,Page_txt[0].ePenColor,Page_txt[0].eTXV,Page_txt[0].eTXFlash)
				
			--Allocates Text Box structure
			STUB TextBoxPdiAllocate (Ap_page_tbs)

        --configures the timer initializations and all text boxes 
        STUB MenuInit()

        --disables the text box
        STUB TextBoxOff(&Prim_cool_down_pop_up_box)

    
    END SIMUL
                                        
    -- Calling the Unit Under Test 
    #GrappApp();
        
    END ELEMENT

END TEST -- TEST 14

TEST 15
FAMILY nominal

    COMMENT  Test Description
    COMMENT  <TD>   
    COMMENT  [hdudispfgrapp-GrappApp-DB-LLR-003]
    COMMENT  The function 'GrappApp' does the following when Splash done is zero and COND is true.
 	COMMENT - Set splash done to 1.
	COMMENT - Set Page_num to EPAGE1,Cool_down_select to FALSE , Fuel_flow_select to FUEL_FLOW_ON and
	COMMENT   Active_eiu to EIU1 if Nv_crc_fail is equal to TRUE AND Du_position is equal to ONE
 	COMMENT - Call functions OffsideSwitchScreen with Page_num as parameter,OffsideCoolTimer with Cool_down_select as parameter
 	COMMENT  and GlobalSettingsSetEIU with  Active_eiu as parameter when Du_position is equal to ONE
 	COMMENT - Call functions OsTimeDly with parameter 250 and ForegroundLoadBackground with sum of BG_IMAGE_ADDR and product 
 	COMMENT of Page_num, PAGE_BITMAP_NUM_OF_SECTOR and SECTOR_SIZE as its parameter.
 	COMMENT - Call the function PdiPageDataInit with Page_num as its parameter
 	COMMENT - Call the function RoundDialsInit with Ap_page0_dials as its parameter
	COMMENT -- Call the function CrcPages with parameter as Page_num and set Bitmap_crc_check_bit with index Page_num to TRUE when Bitmap_crc_check_bit with index Page_num is equal to FALSE.
 	COMMENT - Call the function NumberBoxInit with Page_num_boxes as its parameter
 	COMMENT - Call the function BarGraphInit with Ap_page1_bar_graphs as its parameter
 	COMMENT - Call function TextBoxOff with reference to Prim_cool_down_pop_up_box as parameter.
 	COMMENT - Set s16ULX of Prim_cool_down_pop_up_box to u16_x of acdt_axis of Page_settings minus COOLDOWN_AXIS_CALIBRATION,
 	COMMENT Set s16ULY of Prim_cool_down_pop_up_box to u16_y of acdt_axis of Page_settings minus COOLDOWN_AXIS_CALIBRATION when
 	COMMENT Acdt_flag is equal to TRUE.
 	COMMENT - Call function MenuInit.
 	COMMENT 3.Return from the function.
 	COMMENT
 	COMMENT COND : COND1 OR COND2 OR COND3 OR COND4 OR COND5
 	COMMENT
 	COMMENT COND1 : Splash timer is greater than or equal to SPLASH_TIME  
 	COMMENT COND2 : Splash_b1_press is zero AND any one of the buttons from Switches is pressed(i.e b1,b2,b3,b4,b5,b6,b7,b8,b10,b11,b12,b13,c1,c2,c3, sLE, sRe)
 	COMMENT COND3 : twist of sLE of Switches is not equal to zero 
	COMMENT COND4 : twist of sRe of Switches is not equal to zero  
    COMMENT COND5 : flag which indicate first demo mode  Bitwise and Demo_active bitwise and of result of COND6
	COMMENT COND6 : splash timer is greater than or equal to SPLASH_TIME
    COMMENT  Equivalence class 62,63,64,65,66,67,68,69,195,86,108,100,110,72,115,87,88,89,111,90,91,92,93,94,95,96,97,192,217,219,194,213,214,215,216
	COMMENT 				   213,214,215,216 
    COMMENT  MCDC Covered   FTTXXXXXXXXXXXXXXXXXXX
    COMMENT  Equivalence class 103
    COMMENT 
    COMMENT  [hdudispfgrapp-GrappApp-DB-LLR-004]
    COMMENT  The function 'GrappApp' does the following
    COMMENT  1.Set previous button 1 to b1 of Switches
    COMMENT  2.Set temp page value to Page_num
    COMMENT  Equivalence class 103
    COMMENT 
    COMMENT  [hdudispfgrapp-GrappApp-DB-LLR-005]
    COMMENT  The function 'GrappApp' calls 'PageMenu' function with new page number as its parameter.
    COMMENT  Equivalence class 73
    COMMENT </TD>
    
    ELEMENT
    
    
        COMMENT INPUT SECTION:
		
			VAR Pg_cnt,        init = 1,       ev = init
			
            VAR Ap_poly_graph[0].polygon_shape,        init = FG_RED_X_SHAPE,       ev = init
            
            --data read from Parameters[0]
            VAR Port1_label_count,                              init = 2,                               ev = init
    
            --type of the parameter
            VAR Parameters[1].type,                             init = BNR,                             ev = init
    
            --data read from Parameters[2]
            VAR PTU_parameters[1].reading,                      init = NCD,                             ev = init
    
            --data read from Parameters[2]
            VAR PTU_parameters_numbox[1].reading,               init = NCD,                             ev = init
    
            --type of the parameter
            VAR Parameters[2].type,                             init = BCD,                             ev = init
    
            --data read from Parameters[2]
            VAR PTU_parameters_numbox[2].reading,               init = NCD,                             ev = init
            
            --Counter value used to loop 
            VAR Bg_cnt,                                         init = 1,                               ev = init
			
			VAR Cg_cnt,                                         init = 1,               ev = init
			
            VAR Text_cnt,                                       init = 1,               ev = init
			
            VAR Tb_cnt,                                         init = 1,               ev = init
    
            --Counter value used to loop 
            VAR Nb_cnt,                                         init = 1,                               ev = init
    
            --Number limit
            VAR Ap_page1_bar_graphs[0].numLimit,                init = 1,                               ev = init   
    
            VAR Ap_page1_bar_graphs[0].psParam,                 init = &PTU_param,                      ev = init
    
            --value of the channel 
            VAR PTU_param.fread,                                init = 1,                               ev = init
    
            --limit value
            VAR Ap_page1_bar_graphs[0].limVal[0],               init = 1,                               ev = init   
    
            --limit value type
            VAR Ap_page1_bar_graphs[0].limValtype[0],           init = EQUAL,                           ev = init   
    
            --Color for different limits
            VAR Ap_page1_bar_graphs[0].limColor[0],             init = YELLOW,                          ev = init   
    
            --Color of the bargraph
            VAR Ap_page1_bar_graphs[0].ePenColor,               init = YELLOW,                          ev = init
    
            --Number limit
            VAR Page_num_boxes[0].numLimit,                     init = 1,                               ev = init               
    
            VAR Page_num_boxes[0].psParam,                      init = &PTU_param1,                     ev = init
    
            --Parameter r driving the number
            VAR PTU_param1.fread,                               init = 1,                               ev = init
    
            --limit value
            VAR Page_num_boxes[0].limVal[0],                    init = 1,                               ev = init   
    
            --limit value type
            VAR Page_num_boxes[0].limValtype[0],                init = EQUAL,                           ev = init
    
            --Color for different limits
            VAR Page_num_boxes[0].limColor[0],                  init = YELLOW,                          ev = init   
    
            --Pen color
            VAR Page_num_boxes[0].ePenColor,                    init = YELLOW,                          ev = init

            --Holds Button 1 press flag for splash screen
            VAR Splash_b1_press,                                init = 0,                               ev = init
            
            --Left Twist selection
            VAR Switches.sLE.twist,                             init = 0,                               ev = init
            
            --Right Twist selection
            VAR Switches.sRE.twist,                             init = 1,                               ev = init   
            
            --Button 1
            VAR Switches.b1,                                    init = 1,                               ev = init
    
            --Button 2
            VAR Switches.b2,                                    init = 0,                               ev = init
    
            --Button 3
            VAR Switches.b3,                                    init = 0,                               ev = init
    
            --Button 4
            VAR Switches.b4,                                    init = 0,                               ev = init
    
            --Button 5
            VAR Switches.b5,                                    init = 0,                               ev = init
    
            --Button 6
            VAR Switches.b6,                                    init = 0,                               ev = init
    
            --Button 7
            VAR Switches.b7,                                    init = 0,                               ev = init
    
            --Button 8
            VAR Switches.b8,                                    init = 0,                               ev = init
			
			--Button 10
            VAR Switches.b10,            						init = 0,       					ev = init
			
			--Button 11
            VAR Switches.b11,           					 	init = 0,       					ev = init
			
			--Button 12
            VAR Switches.b12,            						init = 0,       					ev = init
			
			--Button 13
            VAR Switches.b13,            						init = 0,       					ev = init 
    
            --Button c1
            VAR Switches.c1,                                    init = 0,                               ev = init
    
            --Button c2
            VAR Switches.c2,                                    init = 0,                               ev = init
    
            --Button c3
            VAR Switches.c3,                                    init = 0,                               ev = init
    
            --Left Encoder selection
            VAR Switches.sLE.pressed,                           init = 0,                               ev = init
    
            --Right Encoder selection
            VAR Switches.sRE.pressed,                           init = 0,                               ev = init
            
            --NV RAM CRC fail check
            VAR Nv_crc_fail,                                    init = FALSE,                           ev = init
            
            --Position value of Display Unit 
            VAR Du_position,                                    init = 0,                               ev = init
            
            --Counter used to loop
            VAR Rd_cnt,                                         init = 1,                               ev = init
                
            --flag of page setting
            VAR Acdt_flag,                                      init = TRUE,                            ev = init
                
            --X-Axis of the Bottom Center of Bar graph
            VAR Page_settings.acdt_axis.u16_x,                  init = 50,                              ev = init
            
            --Y-Axis of the Bottom Center of Bar graph
            VAR Page_settings.acdt_axis.u16_y,                  init = 50,                              ev = init

            VAR Page_settings.page_num,                         init = 0,                               ev = init
			
			--VAR Bitmap_crc_check_bit[1],					init = FALSE,				ev = init
			
			VAR Page_parameter_error,        init = FALSE,       ev = init
            
            
            
        COMMENT OUTPUT SECTION:
                                                            
              --Status of channel
             VAR PTU_param.stat,                                init = PARAM_OK,                        ev = init  
             
             --Parameter stat driving the number
             VAR PTU_param1.stat,                               init = PARAM_OK,                        ev = init
             
             --Temporary variable is created for testing purpose
             VAR PTU_e_page_temp,                               init = EPAGE1,                          ev = init
            
        COMMENT INPUT/OUTPUT SECTION:
                                                            
            --Indicates the value of splash screen display
            VAR Splash_done,                                    init = ZERO,                                ev = 1
            
            --Page number
            VAR Page_num,                                       init = EPAGE0,                          ev = init
        
                
            --X coordinate of text box center
            VAR Prim_cool_down_pop_up_box.s16ULX,               init = 0,                                   ev = 5
            
            --Y coordinate of text box center
            VAR Prim_cool_down_pop_up_box.s16ULY,               init = 0,                                   ev = 5
            
        -- Stub Calls:
                                                                
        SIMUL
            
            --reads the message from RTD 
            STUB RTDGetParam(1)
            STUB RTDGetParam(1)
    
            --reads the discrete word
            STUB RTDGetParamDdw(2)

            --allows the calling task to delay for a specific number of clock ticks
            STUB  OsTimeDly(250)
            
            --To load the background
            STUB ForegroundLoadBackground((T_UINT16 *)(BG_IMAGE_ADDR+(Page_num*PAGE_BITMAP_NUM_OF_SECTOR*SECTOR_SIZE)))
            
            --extracts page wise settings from PDI
            STUB PdiPageDataInit(Page_num)
            
            --Allocate a single round dial
            STUB RoundDialAllocat(Ap_page0_dials)   
            
            --Allocates number box structure
            STUB NumboxAllocat(Page_num_boxes)
            
            --Allocates number box structure
            STUB BargraphAllocat(Ap_page1_bar_graphs)
			
			--Allocates Carrot Graph structure
			STUB CarrotGraphAllocat (Ap_page2_carrot)
				
			--Allocates Text structure
			STUB TextAllocatPdi(&Page_txt[0].ppsOwner,Page_txt[0].u16X0,Page_txt[0].u16Y0,Page_txt[0].eTXAlign,Page_txt[0].eTXFont,Page_txt[0].ePenColor,Page_txt[0].eTXV,Page_txt[0].eTXFlash)
				
			--Allocates Text Box structure
			STUB TextBoxPdiAllocate (Ap_page_tbs)
            
            --configures the timer initializations and all text boxes 
            STUB MenuInit()
            
            --disables the text box
            STUB TextBoxOff(&Prim_cool_down_pop_up_box)
			
			--Performs once CRC Check
			--STUB CrcPages(Page_num)
            
     
        END SIMUL
            
        -- Calling the Unit Under Test 
        #GrappApp();
            
    END ELEMENT
    
    

END TEST -- TEST 15

TEST 16
FAMILY nominal

    COMMENT  Test Description
    COMMENT  <TD>   
    COMMENT  [hdudispfgrapp-GrappApp-DB-LLR-003]
    COMMENT  The function 'GrappApp' does the following when Splash done is zero and COND is true.
 	COMMENT - Set splash done to 1.
	COMMENT - Set Page_num to EPAGE1,Cool_down_select to FALSE , Fuel_flow_select to FUEL_FLOW_ON and
	COMMENT   Active_eiu to EIU1 if Nv_crc_fail is equal to TRUE AND Du_position is equal to ONE
 	COMMENT - Call functions OffsideSwitchScreen with Page_num as parameter,OffsideCoolTimer with Cool_down_select as parameter
 	COMMENT  and GlobalSettingsSetEIU with  Active_eiu as parameter when Du_position is equal to ONE
 	COMMENT - Call functions OsTimeDly with parameter 250 and ForegroundLoadBackground with sum of BG_IMAGE_ADDR and product 
 	COMMENT of Page_num, PAGE_BITMAP_NUM_OF_SECTOR and SECTOR_SIZE as its parameter.
 	COMMENT - Call the function PdiPageDataInit with Page_num as its parameter
 	COMMENT - Call the function RoundDialsInit with Ap_page0_dials as its parameter
 	COMMENT - Call the function NumberBoxInit with Page_num_boxes as its parameter
 	COMMENT - Call the function BarGraphInit with Ap_page1_bar_graphs as its parameter
 	COMMENT - Call function TextBoxOff with reference to Prim_cool_down_pop_up_box as parameter.
 	COMMENT - Set s16ULX of Prim_cool_down_pop_up_box to u16_x of acdt_axis of Page_settings minus COOLDOWN_AXIS_CALIBRATION,
 	COMMENT Set s16ULY of Prim_cool_down_pop_up_box to u16_y of acdt_axis of Page_settings minus COOLDOWN_AXIS_CALIBRATION when
 	COMMENT Acdt_flag is equal to TRUE.
 	COMMENT - Call function MenuInit.
 	COMMENT 3.Return from the function.
 	COMMENT
 	COMMENT COND : COND1 OR COND2 OR COND3 OR COND4 OR COND5
 	COMMENT
 	COMMENT COND1 : Splash timer is greater than or equal to SPLASH_TIME  
 	COMMENT COND2 : Splash_b1_press is zero AND any one of the buttons from Switches is pressed(i.e b1,b2,b3,b4,b5,b6,b7,b8,b10,b11,b12,b13,c1,c2,c3, sLE, sRe)
 	COMMENT COND3 : twist of sLE of Switches is not equal to zero 
	COMMENT COND4 : twist of sRe of Switches is not equal to zero  
    COMMENT COND5 : flag which indicate first demo mode  Bitwise and Demo_active bitwise and of result of COND6
	COMMENT COND6 : splash timer is greater than or equal to SPLASH_TIME
    COMMENT  Equivalence class 62,63,64,65,66,67,68,69,195,86,108,100,110,72,115,87,88,89,111,90,91,92,93,94,95,96,97,191,194,
	COMMENT 				   213,214,215,216 
    COMMENT  MCDC Covered FTFFFFFFFFFFFFFFFFFFTX
    COMMENT  </TD>
    
    ELEMENT
    
        COMMENT INPUT SECTION:
		
			VAR Pg_cnt,        init = 1,       ev = init
			
            VAR Ap_poly_graph[0].polygon_shape,        init = FG_RED_X_SHAPE,       ev = init
            
            --data read from Parameters[0]
            VAR Port1_label_count,                              init = 2,                               ev = init
    
            --type of the parameter
            VAR Parameters[1].type,                             init = BNR,                             ev = init
    
            --data read from Parameters[2]
            VAR PTU_parameters[1].reading,                      init = NCD,                             ev = init
    
            --data read from Parameters[2]
            VAR PTU_parameters_numbox[1].reading,               init = NCD,                             ev = init
    
            --type of the parameter
            VAR Parameters[2].type,                             init = BCD,                             ev = init
    
            --data read from Parameters[2]
            VAR PTU_parameters_numbox[2].reading,               init = NCD,                             ev = init
            
            --Counter value used to loop
            VAR Bg_cnt,                                         init = 1,                               ev = init
			
			VAR Cg_cnt,                                         init = 1,               ev = init
			
            VAR Text_cnt,                                       init = 1,               ev = init
			
            VAR Tb_cnt,                                         init = 1,               ev = init
    
            --Counter value used to loop 
            VAR Nb_cnt,                                         init = 1,                               ev = init
    
            --Number limit
            VAR Ap_page1_bar_graphs[0].numLimit,                init = 1,                               ev = init   
    
            VAR Ap_page1_bar_graphs[0].psParam,                 init = &PTU_param,                      ev = init
    
            --value of the channel 
            VAR PTU_param.fread,                                init = 1,                               ev = init
    
            --limit value
            VAR Ap_page1_bar_graphs[0].limVal[0],               init = 1,                               ev = init   
    
            --limit value type
            VAR Ap_page1_bar_graphs[0].limValtype[0],           init = EQUAL,                           ev = init   
    
            --Color for different limits
            VAR Ap_page1_bar_graphs[0].limColor[0],             init = YELLOW,                          ev = init   
    
            --Color of the bargraph
            VAR Ap_page1_bar_graphs[0].ePenColor,               init = YELLOW,                          ev = init
    
            --Number limit
            VAR Page_num_boxes[0].numLimit,                     init = 1,                               ev = init               
        
            VAR Page_num_boxes[0].psParam,                      init = &PTU_param1,                     ev = init
        
            --Parameter r driving the number
            VAR PTU_param1.fread,                               init = 1,                               ev = init
    
            --limit value
            VAR Page_num_boxes[0].limVal[0],                    init = 1,                               ev = init   
    
            --limit value type
            VAR Page_num_boxes[0].limValtype[0],                init = EQUAL,                           ev = init
    
            --Color for different limits
            VAR Page_num_boxes[0].limColor[0],                  init = YELLOW,                          ev = init   
    
            --Pen color
            VAR Page_num_boxes[0].ePenColor,                    init = YELLOW,                          ev = init
            
            --Holds Button 1 press flag for splash screen
            VAR Splash_b1_press,                                init = 0,                               ev = init
            
            --Left Twist selection
            VAR Switches.sLE.twist,                             init = 0,                               ev = init
            
            --Right Twist selection
            VAR Switches.sRE.twist,                             init = 1,                               ev = init   
            
            --Button 1
            VAR Switches.b1,                                    init = 0,                               ev = init
    
            --Button 2
            VAR Switches.b2,                                    init = 0,                               ev = init
    
            --Button 3
            VAR Switches.b3,                                    init = 0,                               ev = init
    
            --Button 4
            VAR Switches.b4,                                    init = 0,                               ev = init
    
            --Button 5
            VAR Switches.b5,                                    init = 0,                               ev = init
    
            --Button 6
            VAR Switches.b6,                                    init = 0,                               ev = init
    
            --Button 7
            VAR Switches.b7,                                    init = 0,                               ev = init
    
            --Button 8
            VAR Switches.b8,                                    init = 0,                               ev = init
			
			--Button 10
            VAR Switches.b10,            						init = 0,       					ev = init
			
			--Button 11
            VAR Switches.b11,           					 	init = 0,       					ev = init
			
			--Button 12
            VAR Switches.b12,            						init = 0,       					ev = init
			
			--Button 13
            VAR Switches.b13,            						init = 0,       					ev = init 
    
            --Button c1
            VAR Switches.c1,                                    init = 0,                               ev = init
    
            --Button c2
            VAR Switches.c2,                                    init = 0,                               ev = init
    
            --Button c3
            VAR Switches.c3,                                    init = 0,                               ev = init
    
            --Left Encoder selection
            VAR Switches.sLE.pressed,                           init = 0,                               ev = init
    
            --Right Encoder selection
            VAR Switches.sRE.pressed,                           init = 0,                               ev = init
            
            --NV RAM CRC fail check
            VAR Nv_crc_fail,                                    init = FALSE,                           ev = init
            
            --Position value of Display Unit 
            VAR Du_position,                                    init = 0,                               ev = init
            
            --Counter used to loop
            VAR Rd_cnt,                                         init = 1,                               ev = init
            
            --flag of page setting
            VAR Acdt_flag,                                      init = TRUE,                            ev = init
			
			--VAR Bitmap_crc_check_bit[1],					init = TRUE,				ev = init
			
			VAR Page_parameter_error,        init = FALSE,       ev = init
            
        COMMENT OUTPUT SECTION:
                                                            
              --Status of channel
             VAR PTU_param.stat,                                init = PARAM_OK,                        ev = init  
             
             --Parameter stat driving the number
             VAR PTU_param1.stat,                               init = PARAM_OK,                        ev = init
             
                                                            
        COMMENT INPUT/OUTPUT SECTION:
                                                            
            --Indicates the value of splash screen display
            VAR Splash_done,                                    init = ZERO,                            ev = 1
            
            --Page number
            VAR Page_num,                                       init = EPAGE0,                          ev = init
        
            
        -- Stub Calls:
                                                                
        SIMUL
            
            --reads the message from RTD 
            STUB RTDGetParam(1)
            STUB RTDGetParam(1)
    
            --reads the discrete word
            STUB RTDGetParamDdw(2)
            
            --allows the calling task to delay for a specific number of clock ticks
            STUB  OsTimeDly(250)
            
            --To load the background
            STUB ForegroundLoadBackground((T_UINT16 *)(BG_IMAGE_ADDR+(Page_num*PAGE_BITMAP_NUM_OF_SECTOR*SECTOR_SIZE)))
            
            --extracts page wise settings from PDI
            STUB PdiPageDataInit(Page_num)          

            --configures the timer initializations and all text boxes 
            STUB MenuInit()

            --Allocate a single round dial
            STUB RoundDialAllocat(Ap_page0_dials)   
            
            --Allocates number box structure
            STUB NumboxAllocat(Page_num_boxes)
            
            --Allocates number box structure
            STUB BargraphAllocat(Ap_page1_bar_graphs)
			
			--Allocates Carrot Graph structure
			STUB CarrotGraphAllocat (Ap_page2_carrot)
				
			--Allocates Text structure
			STUB TextAllocatPdi(&Page_txt[0].ppsOwner,Page_txt[0].u16X0,Page_txt[0].u16Y0,Page_txt[0].eTXAlign,Page_txt[0].eTXFont,Page_txt[0].ePenColor,Page_txt[0].eTXV,Page_txt[0].eTXFlash)
				
			--Allocates Text Box structure
			STUB TextBoxPdiAllocate (Ap_page_tbs)
                        
            --disables the text box
            STUB TextBoxOff(&Prim_cool_down_pop_up_box)
     
        END SIMUL
            
        -- Calling the Unit Under Test 
        #GrappApp();
            
    END ELEMENT
    
END TEST -- TEST 16

TEST 17
FAMILY nominal

    COMMENT  Test Description
    COMMENT  <TD>   
    COMMENT  [hdudispfgrapp-GrappApp-DB-LLR-003]
    COMMENT  The function 'GrappApp' does the following when Splash done is zero and COND is true.
 	COMMENT - Set splash done to 1.
	COMMENT - Set Page_num to EPAGE1,Cool_down_select to FALSE , Fuel_flow_select to FUEL_FLOW_ON and
	COMMENT   Active_eiu to EIU1 if Nv_crc_fail is equal to TRUE AND Du_position is equal to ONE
 	COMMENT - Call functions OffsideSwitchScreen with Page_num as parameter,OffsideCoolTimer with Cool_down_select as parameter
 	COMMENT  and GlobalSettingsSetEIU with  Active_eiu as parameter when Du_position is equal to ONE
 	COMMENT - Call functions OsTimeDly with parameter 250 and ForegroundLoadBackground with sum of BG_IMAGE_ADDR and product 
 	COMMENT of Page_num, PAGE_BITMAP_NUM_OF_SECTOR and SECTOR_SIZE as its parameter.
 	COMMENT - Call the function PdiPageDataInit with Page_num as its parameter
 	COMMENT - Call the function RoundDialsInit with Ap_page0_dials as its parameter
 	COMMENT - Call the function NumberBoxInit with Page_num_boxes as its parameter
 	COMMENT - Call the function BarGraphInit with Ap_page1_bar_graphs as its parameter
 	COMMENT - Call function TextBoxOff with reference to Prim_cool_down_pop_up_box as parameter.
 	COMMENT - Set s16ULX of Prim_cool_down_pop_up_box to u16_x of acdt_axis of Page_settings minus COOLDOWN_AXIS_CALIBRATION,
 	COMMENT Set s16ULY of Prim_cool_down_pop_up_box to u16_y of acdt_axis of Page_settings minus COOLDOWN_AXIS_CALIBRATION when
 	COMMENT Acdt_flag is equal to TRUE.
 	COMMENT - Call function MenuInit.
 	COMMENT 3.Return from the function.
 	COMMENT
 	COMMENT COND : COND1 OR COND2 OR COND3 OR COND4 OR COND5
 	COMMENT
 	COMMENT COND1 : Splash timer is greater than or equal to SPLASH_TIME  
 	COMMENT COND2 : Splash_b1_press is zero AND any one of the buttons from Switches is pressed(i.e b1,b2,b3,b4,b5,b6,b7,b8,b10,b11,b12,b13,c1,c2,c3, sLE, sRe)
 	COMMENT COND3 : twist of sLE of Switches is not equal to zero 
	COMMENT COND4 : twist of sRe of Switches is not equal to zero  
    COMMENT COND5 : flag which indicate first demo mode  Bitwise and Demo_active bitwise and of result of COND6
	COMMENT COND6 : splash timer is greater than or equal to SPLASH_TIME
    COMMENT Equivalence class 62,63,64,65,66,67,68,69,195,86,108,100,110,72,115,87,88,89,111,90,91,92,93,94,95,96,97,191,193,196,
	COMMENT 				   213,214,215,216 
    COMMENT MCDC Covered  FFXXXXXXXXXXXXXXXXXTXX 
	COMMENT  </TD> 
    
    ELEMENT

        COMMENT INPUT SECTION:
		
			VAR Pg_cnt,        init = 1,       ev = init
			
            VAR Ap_poly_graph[0].polygon_shape,        init = FG_RED_X_SHAPE,       ev = init
            
            --data read from Parameters[0]
            VAR Port1_label_count,                              init = 2,                               ev = init
    
            --type of the parameter
            VAR Parameters[1].type,                             init = BNR,                             ev = init
    
            --data read from Parameters[2]
            VAR PTU_parameters[1].reading,                      init = NCD,                             ev = init
    
            --data read from Parameters[2]
            VAR PTU_parameters_numbox[1].reading,               init = NCD,                             ev = init
    
            --type of the parameter
            VAR Parameters[2].type,                             init = BCD,                             ev = init
    
            --data read from Parameters[2]
            VAR PTU_parameters_numbox[2].reading,               init = NCD,                             ev = init
        
            --Counter value used to loop 
            VAR Bg_cnt,                                         init = 1,                               ev = init
			
			VAR Cg_cnt,                                         init = 1,               ev = init
			
            VAR Text_cnt,                                       init = 1,               ev = init
			
            VAR Tb_cnt,                                         init = 1,               ev = init
    
            --Counter value used to loop 
            VAR Nb_cnt,                                         init = 1,                               ev = init
    
            --Number limit
            VAR Ap_page1_bar_graphs[0].numLimit,                init = 1,                               ev = init   
    
            VAR Ap_page1_bar_graphs[0].psParam,                 init = &PTU_param,                      ev = init
    
            --value of the channel 
            VAR PTU_param.fread,                                init = 1,                               ev = init
    
            --limit value
            VAR Ap_page1_bar_graphs[0].limVal[0],               init = 1,                               ev = init   
    
            --limit value type
            VAR Ap_page1_bar_graphs[0].limValtype[0],           init = EQUAL,                           ev = init   
    
            --Color for different limits
            VAR Ap_page1_bar_graphs[0].limColor[0],             init = YELLOW,                          ev = init   
    
            --Color of the bargraph
            VAR Ap_page1_bar_graphs[0].ePenColor,               init = YELLOW,                          ev = init
    
            --Number limit
            VAR Page_num_boxes[0].numLimit,                     init = 1,                               ev = init               
    
            VAR Page_num_boxes[0].psParam,                      init = &PTU_param1,                     ev = init
    
            --Parameter r driving the number
            VAR PTU_param1.fread,                               init = 1,                               ev = init
    
            --limit value
            VAR Page_num_boxes[0].limVal[0],                    init = 1,                               ev = init   
    
            --limit value type
            VAR Page_num_boxes[0].limValtype[0],                init = EQUAL,                           ev = init
    
            --Color for different limits
            VAR Page_num_boxes[0].limColor[0],                  init = YELLOW,                          ev = init   
    
            --Pen color
            VAR Page_num_boxes[0].ePenColor,                    init = YELLOW,                          ev = init

            --Holds Button 1 press flag for splash screen
            VAR Splash_b1_press,                                init = 1,                               ev = init
            
            --Left Twist selection
            VAR Switches.sLE.twist,                             init = 1,                               ev = init
            
            --Right Twist selection
            VAR Switches.sRE.twist,                             init = 1,                               ev = init   
            
            --Button 1
            VAR Switches.b1,                                    init = 1,                               ev = init
    
            --Button 2
            VAR Switches.b2,                                    init = 0,                               ev = init
    
            --Button 3
            VAR Switches.b3,                                    init = 0,                               ev = init
    
            --Button 4
            VAR Switches.b4,                                    init = 0,                               ev = init
    
            --Button 5
            VAR Switches.b5,                                    init = 0,                               ev = init
    
            --Button 6
            VAR Switches.b6,                                    init = 0,                               ev = init
    
            --Button 7
            VAR Switches.b7,                                    init = 0,                               ev = init
    
            --Button 8
            VAR Switches.b8,                                    init = 0,                               ev = init
			
			--Button 10
            VAR Switches.b10,            						init = 0,       					ev = init
			
			--Button 11
            VAR Switches.b11,           					 	init = 0,       					ev = init
			
			--Button 12
            VAR Switches.b12,            						init = 0,       					ev = init
			
			--Button 13
            VAR Switches.b13,            						init = 0,       					ev = init 
    
            --Button c1
            VAR Switches.c1,                                    init = 0,                               ev = init
    
            --Button c2
            VAR Switches.c2,                                    init = 0,                               ev = init
    
            --Button c3
            VAR Switches.c3,                                    init = 0,                               ev = init
    
            --Left Encoder selection
            VAR Switches.sLE.pressed,                           init = 0,                               ev = init
    
            --Right Encoder selection
            VAR Switches.sRE.pressed,                           init = 0,                               ev = init
            
            --NV RAM CRC fail check
            VAR Nv_crc_fail,                                    init = FALSE,                           ev = init
            
            --Position value of Display Unit 
            VAR Du_position,                                    init = 0,                               ev = init
            
            --Counter used to loop
            VAR Rd_cnt,                                         init = 1,                               ev = init
            
            --flag of page setting
            VAR Acdt_flag,                                      init = TRUE,                            ev = init

            --X-Axis of the Bottom Center of Bar graph
            VAR Page_settings.acdt_axis.u16_x,                  init = 50,                              ev = init

            --Y-Axis of the Bottom Center of Bar graph
            VAR Page_settings.acdt_axis.u16_y,                  init = 50,                              ev = init
                
            VAR Page_settings.page_num,                         init = 0,                               ev = init
			
			--VAR Bitmap_crc_check_bit[1],					init = TRUE,				ev = init
			
			VAR Page_parameter_error,        init = FALSE,       ev = init
            
        COMMENT OUTPUT SECTION:
                                                            
              --Status of channel
             VAR PTU_param.stat,                                init = PARAM_OK,                    ev = init  
             
             --Parameter stat driving the number
             VAR PTU_param1.stat,                               init = PARAM_OK,                    ev = init
             
                                                            
        COMMENT INPUT/OUTPUT SECTION:
                                                            
            --Indicates the value of splash screen display
            VAR Splash_done,                                    init = ZERO,                                ev = 1
            
            --Page number
            VAR Page_num,                                       init = EPAGE0,                          ev = init
        
                
            --X coordinate of text box center
            VAR Prim_cool_down_pop_up_box.s16ULX,               init = 0,                                   ev = 5
            
            --Y coordinate of text box center
            VAR Prim_cool_down_pop_up_box.s16ULY,               init = 0,                                   ev = 5
            
        -- Stub Calls:
                                                                
        SIMUL
            
            --reads the message from RTD 
            STUB RTDGetParam(1)
            STUB RTDGetParam(1)
    
            --reads the discrete word
            STUB RTDGetParamDdw(2)

            --
            STUB  OsTimeDly(250)
            
            --To load the background
            STUB ForegroundLoadBackground((T_UINT16 *)(BG_IMAGE_ADDR+(Page_num*PAGE_BITMAP_NUM_OF_SECTOR*SECTOR_SIZE)))
            
            --extracts page wise settings from PDI
            STUB PdiPageDataInit(Page_num)
            
            --Allocate a single round dial
            STUB RoundDialAllocat(Ap_page0_dials)   
            
            --Allocates number box structure
            STUB NumboxAllocat(Page_num_boxes)
            
            --Allocates number box structure
            STUB BargraphAllocat(Ap_page1_bar_graphs)
			
			--Allocates Carrot Graph structure
			STUB CarrotGraphAllocat (Ap_page2_carrot)
				
			--Allocates Text structure
			STUB TextAllocatPdi(&Page_txt[0].ppsOwner,Page_txt[0].u16X0,Page_txt[0].u16Y0,Page_txt[0].eTXAlign,Page_txt[0].eTXFont,Page_txt[0].ePenColor,Page_txt[0].eTXV,Page_txt[0].eTXFlash)
				
			--Allocates Text Box structure
			STUB TextBoxPdiAllocate (Ap_page_tbs)
            
            --configures the timer initializations and all text boxes 
            STUB MenuInit()
            
            --disables the text box
            STUB TextBoxOff(&Prim_cool_down_pop_up_box)
         
     
         END SIMUL
            
        -- Calling the Unit Under Test 
        #GrappApp();
            
    END ELEMENT
    
END TEST -- TEST 17

TEST 18
FAMILY nominal

    COMMENT  Test Description
    COMMENT  <TD>   
    COMMENT  [hdudispfgrapp-GrappApp-DB-LLR-003]
    COMMENT  The function 'GrappApp' does the following when Splash done is zero and COND is true.
 	COMMENT - Set splash done to 1.
	COMMENT - Set Page_num to EPAGE1,Cool_down_select to FALSE , Fuel_flow_select to FUEL_FLOW_ON and
	COMMENT   Active_eiu to EIU1 if Nv_crc_fail is equal to TRUE AND Du_position is equal to ONE
 	COMMENT - Call functions OffsideSwitchScreen with Page_num as parameter,OffsideCoolTimer with Cool_down_select as parameter
 	COMMENT  and GlobalSettingsSetEIU with  Active_eiu as parameter when Du_position is equal to ONE
 	COMMENT - Call functions OsTimeDly with parameter 250 and ForegroundLoadBackground with sum of BG_IMAGE_ADDR and product 
 	COMMENT of Page_num, PAGE_BITMAP_NUM_OF_SECTOR and SECTOR_SIZE as its parameter.
 	COMMENT - Call the function PdiPageDataInit with Page_num as its parameter
 	COMMENT - Call the function RoundDialsInit with Ap_page0_dials as its parameter
 	COMMENT - Call the function NumberBoxInit with Page_num_boxes as its parameter
 	COMMENT - Call the function BarGraphInit with Ap_page1_bar_graphs as its parameter
 	COMMENT - Call function TextBoxOff with reference to Prim_cool_down_pop_up_box as parameter.
 	COMMENT - Set s16ULX of Prim_cool_down_pop_up_box to u16_x of acdt_axis of Page_settings minus COOLDOWN_AXIS_CALIBRATION,
 	COMMENT Set s16ULY of Prim_cool_down_pop_up_box to u16_y of acdt_axis of Page_settings minus COOLDOWN_AXIS_CALIBRATION when
 	COMMENT Acdt_flag is equal to TRUE.
 	COMMENT - Call function MenuInit.
 	COMMENT 3.Return from the function.
 	COMMENT
 	COMMENT COND : COND1 OR COND2 OR COND3 OR COND4 OR COND5
 	COMMENT
 	COMMENT COND1 : Splash timer is greater than or equal to SPLASH_TIME  
 	COMMENT COND2 : Splash_b1_press is zero AND any one of the buttons from Switches is pressed(i.e b1,b2,b3,b4,b5,b6,b7,b8,b10,b11,b12,b13,c1,c2,c3, sLE, sRe)
 	COMMENT COND3 : twist of sLE of Switches is not equal to zero 
	COMMENT COND4 : twist of sRe of Switches is not equal to zero  
    COMMENT COND5 : flag which indicate first demo mode  Bitwise and Demo_active bitwise and of result of COND6
	COMMENT COND6 : splash timer is greater than or equal to SPLASH_TIME
    COMMENT  Equivalence class 62,63,64,65,66,67,68,69,195,86,108,100,110,72,115,87,88,89,111,90,91,92,93,94,95,96,97,191,193,196,
	COMMENT 				   213,214,215,216 
    COMMENT  MCDC Covered   FFXXXXXXXXXXXXXXXXXTXX 
	COMMENT  </TD> 
    
    ELEMENT
    
    
        COMMENT INPUT SECTION:
		
			VAR Pg_cnt,        init = 1,       ev = init
			
            VAR Ap_poly_graph[0].polygon_shape,        init = FG_RED_X_SHAPE,       ev = init
            
            --data read from Parameters[0]
            VAR Port1_label_count,                              init = 2,                               ev = init
    
            --type of the parameter
            VAR Parameters[1].type,                             init = BNR,                             ev = init
    
            --data read from Parameters[2]
            VAR PTU_parameters[1].reading,                      init = NCD,                             ev = init
    
            --data read from Parameters[2]
            VAR PTU_parameters_numbox[1].reading,               init = NCD,                             ev = init
    
            --type of the parameter
            VAR Parameters[2].type,                             init = BCD,                             ev = init
    
            --data read from Parameters[2]
            VAR PTU_parameters_numbox[2].reading,               init = NCD,                             ev = init
            
            --Counter value used to loop 
            VAR Bg_cnt,                                         init = 1,                               ev = init
			
			VAR Cg_cnt,                                         init = 1,               ev = init
			
            VAR Text_cnt,                                       init = 1,               ev = init
			
            VAR Tb_cnt,                                         init = 1,               ev = init
			
                --Counter value used to loop 
            VAR Nb_cnt,                                         init = 1,                               ev = init
    
            --Number limit
            VAR Ap_page1_bar_graphs[0].numLimit,                init = 1,                               ev = init   
    
            VAR Ap_page1_bar_graphs[0].psParam,                 init = &PTU_param,                      ev = init
    
            --value of the channel 
            VAR PTU_param.fread,                                init = 1,                               ev = init
    
            --limit value
            VAR Ap_page1_bar_graphs[0].limVal[0],               init = 1,                               ev = init   
    
            --limit value type
            VAR Ap_page1_bar_graphs[0].limValtype[0],           init = EQUAL,                           ev = init   
    
            --Color for different limits
            VAR Ap_page1_bar_graphs[0].limColor[0],             init = YELLOW,                          ev = init   
    
            --Color of the bargraph
            VAR Ap_page1_bar_graphs[0].ePenColor,               init = YELLOW,                          ev = init
    
            --Number limit
            VAR Page_num_boxes[0].numLimit,                     init = 1,                               ev = init               
    
            VAR Page_num_boxes[0].psParam,                      init = &PTU_param1,                     ev = init
    
            --Parameter r driving the number
            VAR PTU_param1.fread,                               init = 1,                               ev = init
    
            --limit value
            VAR Page_num_boxes[0].limVal[0],                    init = 1,                               ev = init   
    
            --limit value type
            VAR Page_num_boxes[0].limValtype[0],                init = EQUAL,                           ev = init
    
            --Color for different limits
            VAR Page_num_boxes[0].limColor[0],                  init = YELLOW,                          ev = init   
    
            --Pen color
            VAR Page_num_boxes[0].ePenColor,                    init = YELLOW,                          ev = init

            --Holds Button 1 press flag for splash screen
            VAR Splash_b1_press,                                init = 1,                               ev = init
            
            --Left Twist selection
            VAR Switches.sLE.twist,                             init = 1,                               ev = init
            
            --Right Twist selection
            VAR Switches.sRE.twist,                             init = 1,                               ev = init   
        
            --Button 1
            VAR Switches.b1,                                    init = 0,                               ev = init
    
            --Button 2
            VAR Switches.b2,                                    init = 1,                               ev = init
    
            --Button 3
            VAR Switches.b3,                                    init = 0,                               ev = init
    
            --Button 4
            VAR Switches.b4,                                    init = 0,                               ev = init
    
            --Button 5
            VAR Switches.b5,                                    init = 0,                               ev = init
    
            --Button 6
            VAR Switches.b6,                                    init = 0,                               ev = init
    
            --Button 7
            VAR Switches.b7,                                    init = 0,                               ev = init
    
            --Button 8
            VAR Switches.b8,                                    init = 0,                               ev = init
			
			--Button 10
            VAR Switches.b10,            						init = 0,       					ev = init
			
			--Button 11
            VAR Switches.b11,           					 	init = 0,       					ev = init
			
			--Button 12
            VAR Switches.b12,            						init = 0,       					ev = init
			
			--Button 13
            VAR Switches.b13,            						init = 0,       					ev = init 
    
            --Button c1
            VAR Switches.c1,                                    init = 0,                               ev = init
    
            --Button c2
            VAR Switches.c2,                                    init = 0,                               ev = init
    
            --Button c3
            VAR Switches.c3,                                    init = 0,                               ev = init
    
            --Left Encoder selection
            VAR Switches.sLE.pressed,                           init = 0,                               ev = init
    
            --Right Encoder selection
            VAR Switches.sRE.pressed,                           init = 0,                               ev = init
            
            --NV RAM CRC fail check
            VAR Nv_crc_fail,                                    init = FALSE,                           ev = init
            
            --Position value of Display Unit 
            VAR Du_position,                                    init = 0,                               ev = init
            
            --Counter used to loop
            VAR Rd_cnt,                                         init = 1,                               ev = init
                
            --flag of page setting
            VAR Acdt_flag,                                      init = TRUE,                            ev = init

            --X-Axis of the Bottom Center of Bar graph
            VAR Page_settings.acdt_axis.u16_x,                  init = 50,                              ev = init

            --Y-Axis of the Bottom Center of Bar graph
            VAR Page_settings.acdt_axis.u16_y,                  init = 50,                              ev = init
            
    		--Holds the page number value
            VAR Page_settings.page_num,                         init = 0,                               ev = init
			
			--VAR Bitmap_crc_check_bit[1],					init = TRUE,				ev = init
			
			VAR Page_parameter_error,        init = FALSE,       ev = init
            
        COMMENT OUTPUT SECTION:
                                                            
              --Status of channel
             VAR PTU_param.stat,                                init = PARAM_OK,                        ev = init  
             
             --Parameter stat driving the number
             VAR PTU_param1.stat,                               init = PARAM_OK,                        ev = init
             
                                                            
        COMMENT INPUT/OUTPUT SECTION:
                                                            
            --Indicates the value of splash screen display
            VAR Splash_done,                                    init = ZERO,                            ev = 1
            
            --Page number
            VAR Page_num,                                       init = EPAGE0,                          ev = init
        
                
            --X coordinate of text box center
            VAR Prim_cool_down_pop_up_box.s16ULX,               init = 0,                               ev = 5
            
            --Y coordinate of text box center
            VAR Prim_cool_down_pop_up_box.s16ULY,               init = 0,                               ev = 5
            
        -- Stub Calls:
                                                                
        SIMUL
            
            --reads the message from RTD 
            STUB RTDGetParam(1)
            STUB RTDGetParam(1)
    
            --reads the discrete word
            STUB RTDGetParamDdw(2)

            --allows the calling task to delay for a specific number of clock ticks
            STUB  OsTimeDly(250)
            
            --To load the background
            STUB ForegroundLoadBackground((T_UINT16 *)(BG_IMAGE_ADDR+(Page_num*PAGE_BITMAP_NUM_OF_SECTOR*SECTOR_SIZE)))
            
            --extracts page wise settings from PDI
            STUB PdiPageDataInit(Page_num)
            
            --Allocate a single round dial
            STUB RoundDialAllocat(Ap_page0_dials)   
            
            --Allocates number box structure
            STUB NumboxAllocat(Page_num_boxes)
            
            --Allocates number box structure
            STUB BargraphAllocat(Ap_page1_bar_graphs)
			
			--Allocates Carrot Graph structure
			STUB CarrotGraphAllocat (Ap_page2_carrot)
				
			--Allocates Text structure
			STUB TextAllocatPdi(&Page_txt[0].ppsOwner,Page_txt[0].u16X0,Page_txt[0].u16Y0,Page_txt[0].eTXAlign,Page_txt[0].eTXFont,Page_txt[0].ePenColor,Page_txt[0].eTXV,Page_txt[0].eTXFlash)
				
			--Allocates Text Box structure
			STUB TextBoxPdiAllocate (Ap_page_tbs)
            
            --configures the timer initializations and all text boxes 
            STUB MenuInit()
            
            --disables the text box
            STUB TextBoxOff(&Prim_cool_down_pop_up_box)
     
        END SIMUL
            
        -- Calling the Unit Under Test 
        #GrappApp();
            
    END ELEMENT
    
END TEST -- TEST 18

TEST 19
FAMILY nominal
    COMMENT  Test Description
    COMMENT  <TD>   
    COMMENT  [hdudispfgrapp-GrappApp-DB-LLR-003]
    COMMENT  The function 'GrappApp' does the following when Splash done is zero and COND is true.
 	COMMENT - Set splash done to 1.
	COMMENT - Set Page_num to EPAGE1,Cool_down_select to FALSE , Fuel_flow_select to FUEL_FLOW_ON and
	COMMENT   Active_eiu to EIU1 if Nv_crc_fail is equal to TRUE AND Du_position is equal to ONE
 	COMMENT - Call functions OffsideSwitchScreen with Page_num as parameter,OffsideCoolTimer with Cool_down_select as parameter
 	COMMENT  and GlobalSettingsSetEIU with  Active_eiu as parameter when Du_position is equal to ONE
 	COMMENT - Call functions OsTimeDly with parameter 250 and ForegroundLoadBackground with sum of BG_IMAGE_ADDR and product 
 	COMMENT of Page_num, PAGE_BITMAP_NUM_OF_SECTOR and SECTOR_SIZE as its parameter.
 	COMMENT - Call the function PdiPageDataInit with Page_num as its parameter
 	COMMENT - Call the function RoundDialsInit with Ap_page0_dials as its parameter
 	COMMENT - Call the function NumberBoxInit with Page_num_boxes as its parameter
 	COMMENT - Call the function BarGraphInit with Ap_page1_bar_graphs as its parameter
 	COMMENT - Call function TextBoxOff with reference to Prim_cool_down_pop_up_box as parameter.
 	COMMENT - Set s16ULX of Prim_cool_down_pop_up_box to u16_x of acdt_axis of Page_settings minus COOLDOWN_AXIS_CALIBRATION,
 	COMMENT Set s16ULY of Prim_cool_down_pop_up_box to u16_y of acdt_axis of Page_settings minus COOLDOWN_AXIS_CALIBRATION when
 	COMMENT Acdt_flag is equal to TRUE.
 	COMMENT - Call function MenuInit.
 	COMMENT 3.Return from the function.
 	COMMENT
 	COMMENT COND : COND1 OR COND2 OR COND3 OR COND4 OR COND5
 	COMMENT
 	COMMENT COND1 : Splash timer is greater than or equal to SPLASH_TIME  
 	COMMENT COND2 : Splash_b1_press is zero AND any one of the buttons from Switches is pressed(i.e b1,b2,b3,b4,b5,b6,b7,b8,b10,b11,b12,b13,c1,c2,c3, sLE, sRe)
 	COMMENT COND3 : twist of sLE of Switches is not equal to zero 
	COMMENT COND4 : twist of sRe of Switches is not equal to zero  
    COMMENT COND5 : flag which indicate first demo mode  Bitwise and Demo_active bitwise and of result of COND6
	COMMENT COND6 : splash timer is greater than or equal to SPLASH_TIME
    COMMENT  Equivalence class 62,63,64,65,66,67,68,69,195,86,108,100,110,72,115,87,88,89,111,90,91,92,93,94,95,96,97,191,193,196,
    COMMENT NOTE: repeated MCDC till test case 29 is for the purpose of individual switch condition coverage 
	COMMENT 				   213,214,215,216 
    COMMENT  MCDC Covered   FFXXXXXXXXXXXXXXXXXTXX 
	COMMENT  </TD> 
    
    ELEMENT
    
    
        COMMENT INPUT SECTION:
		
			VAR Pg_cnt,        init = 1,       ev = init
			
            VAR Ap_poly_graph[0].polygon_shape,        init = FG_RED_X_SHAPE,       ev = init
            
            --data read from Parameters[0]
            VAR Port1_label_count,                              init = 2,                           ev = init
    
            --type of the parameter
            VAR Parameters[1].type,                             init = BNR,                         ev = init
    
            --data read from Parameters[2]
            VAR PTU_parameters[1].reading,                      init = NCD,                         ev = init
    
            --data read from Parameters[2]
            VAR PTU_parameters_numbox[1].reading,               init = NCD,                         ev = init
    
            --type of the parameter
            VAR Parameters[2].type,                             init = BCD,                         ev = init
    
            --data read from Parameters[2]
            VAR PTU_parameters_numbox[2].reading,               init = NCD,                         ev = init
            
            --Counter value used to loop 
            VAR Bg_cnt,                                         init = 1,                           ev = init
			
			VAR Cg_cnt,                                         init = 1,               ev = init
			
            VAR Text_cnt,                                       init = 1,               ev = init
			
            VAR Tb_cnt,                                         init = 1,               ev = init
    
            --Counter value used to loop 
            VAR Nb_cnt,                                         init = 1,                           ev = init
    
            --Number limit
            VAR Ap_page1_bar_graphs[0].numLimit,                init = 1,                           ev = init   
    
            VAR Ap_page1_bar_graphs[0].psParam,                 init = &PTU_param,                  ev = init
    
            --value of the channel 
            VAR PTU_param.fread,                                init = 1,                           ev = init
    
            --limit value
            VAR Ap_page1_bar_graphs[0].limVal[0],               init = 1,                           ev = init   
    
            --limit value type
            VAR Ap_page1_bar_graphs[0].limValtype[0],           init = EQUAL,                       ev = init   
    
            --Color for different limits
            VAR Ap_page1_bar_graphs[0].limColor[0],             init = YELLOW,                      ev = init   
    
            --Color of the bargraph
            VAR Ap_page1_bar_graphs[0].ePenColor,               init = YELLOW,                      ev = init
    
            --Number limit
            VAR Page_num_boxes[0].numLimit,                     init = 1,                           ev = init               
    
            VAR Page_num_boxes[0].psParam,                      init = &PTU_param1,                 ev = init
    
            --Parameter r driving the number
            VAR PTU_param1.fread,                               init = 1,                           ev = init
    
            --limit value
            VAR Page_num_boxes[0].limVal[0],                    init = 1,                           ev = init   
    
            --limit value type
            VAR Page_num_boxes[0].limValtype[0],                init = EQUAL,                       ev = init
    
            --Color for different limits
            VAR Page_num_boxes[0].limColor[0],                  init = YELLOW,                      ev = init   
    
            --Pen color
            VAR Page_num_boxes[0].ePenColor,                    init = YELLOW,                      ev = init

            --Holds Button 1 press flag for splash screen
            VAR Splash_b1_press,                                init = 1,                           ev = init
            
            --Left Twist selection
            VAR Switches.sLE.twist,                             init = 1,                           ev = init
            
            --Right Twist selection
            VAR Switches.sRE.twist,                             init = 1,                           ev = init   
        
            --Button 1
            VAR Switches.b1,                                    init = 0,                           ev = init
    
            --Button 2
            VAR Switches.b2,                                    init = 0,                           ev = init
    
            --Button 3
            VAR Switches.b3,                                    init = 1,                           ev = init
    
            --Button 4
            VAR Switches.b4,                                    init = 0,                           ev = init
    
            --Button 5
            VAR Switches.b5,                                    init = 0,                           ev = init
    
            --Button 6
            VAR Switches.b6,                                    init = 0,                           ev = init
    
            --Button 7
            VAR Switches.b7,                                    init = 0,                           ev = init
    
            --Button 8
            VAR Switches.b8,                                    init = 0,                           ev = init
			
			--Button 10
            VAR Switches.b10,            						init = 0,       					ev = init
			
			--Button 11
            VAR Switches.b11,           					 	init = 0,       					ev = init
			
			--Button 12
            VAR Switches.b12,            						init = 0,       					ev = init
			
			--Button 13
            VAR Switches.b13,            						init = 0,       					ev = init 
    
            --Button c1
            VAR Switches.c1,                                    init = 0,                           ev = init
    
            --Button c2
            VAR Switches.c2,                                    init = 0,                           ev = init
    
            --Button c3
            VAR Switches.c3,                                    init = 0,                           ev = init
    
            --Left Encoder selection
            VAR Switches.sLE.pressed,                           init = 0,                           ev = init
    
            --Right Encoder selection
            VAR Switches.sRE.pressed,                           init = 0,                           ev = init
            
            --NV RAM CRC fail check
            VAR Nv_crc_fail,                                    init = FALSE,                       ev = init
            
            --Position value of Display Unit 
            VAR Du_position,                                    init = 0,                           ev = init
            
            --Counter used to loop
            VAR Rd_cnt,                                         init = 1,                           ev = init
            
            --flag of page setting
            VAR Acdt_flag,                                      init = TRUE,                        ev = init
            
            --X-Axis of the Bottom Center of Bar graph
            VAR Page_settings.acdt_axis.u16_x,                  init = 50,                          ev = init
            
            --Y-Axis of the Bottom Center of Bar graph
            VAR Page_settings.acdt_axis.u16_y,                  init = 50,                          ev = init
            
            VAR Page_settings.page_num,                         init = 0,                           ev = init
			
			--VAR Bitmap_crc_check_bit[1],					init = TRUE,				ev = init
			
			VAR Page_parameter_error,        init = FALSE,       ev = init
            
        COMMENT OUTPUT SECTION:
                                                            
              --Status of channel
             VAR PTU_param.stat,                                init = PARAM_OK,                    ev = init  
             
             --Parameter stat driving the number
             VAR PTU_param1.stat,                               init = PARAM_OK,                    ev = init   
                                                            
        COMMENT INPUT/OUTPUT SECTION:
                                                            
            --Indicates the value of splash screen display
            VAR Splash_done,                                    init = ZERO,                        ev = 1
            
            --Page number
            VAR Page_num,                                       init = EPAGE0,                      ev = init
                    
            --X coordinate of text box center
            VAR Prim_cool_down_pop_up_box.s16ULX,               init = 0,                           ev = 5
            
            --Y coordinate of text box center
            VAR Prim_cool_down_pop_up_box.s16ULY,               init = 0,                           ev = 5
            
        -- Stub Calls:
                                                                
        SIMUL
            
            --reads the message from RTD 
            STUB RTDGetParam(1)
            STUB RTDGetParam(1)
            
            --reads the discrete word
            STUB RTDGetParamDdw(2)
            
            --allows the calling task to delay for a specific number of clock ticks
            STUB  OsTimeDly(250)
            
            --To load the background
            STUB ForegroundLoadBackground((T_UINT16 *)(BG_IMAGE_ADDR+(Page_num*PAGE_BITMAP_NUM_OF_SECTOR*SECTOR_SIZE)))
            
            --extracts page wise settings from PDI
            STUB PdiPageDataInit(Page_num)
            
            --Allocate a single round dial
            STUB RoundDialAllocat(Ap_page0_dials)   
            
            --Allocates number box structure
            STUB NumboxAllocat(Page_num_boxes)
            
            --Allocates number box structure
            STUB BargraphAllocat(Ap_page1_bar_graphs)
			
			--Allocates Carrot Graph structure
			STUB CarrotGraphAllocat (Ap_page2_carrot)
				
			--Allocates Text structure
			STUB TextAllocatPdi(&Page_txt[0].ppsOwner,Page_txt[0].u16X0,Page_txt[0].u16Y0,Page_txt[0].eTXAlign,Page_txt[0].eTXFont,Page_txt[0].ePenColor,Page_txt[0].eTXV,Page_txt[0].eTXFlash)
				
			--Allocates Text Box structure
			STUB TextBoxPdiAllocate (Ap_page_tbs)
            
            --configures the timer initializations and all text boxes 
            STUB MenuInit()
            
            --disables the text box
            STUB TextBoxOff(&Prim_cool_down_pop_up_box)
        
        END SIMUL
        
        -- Calling the Unit Under Test 
        #GrappApp();
            
    END ELEMENT
    
END TEST -- TEST 19

TEST 20
FAMILY nominal

    COMMENT  Test Description
    COMMENT  <TD>   
    COMMENT  [hdudispfgrapp-GrappApp-DB-LLR-003]
    COMMENT  The function 'GrappApp' does the following when Splash done is zero and COND is true.
 	COMMENT - Set splash done to 1.
	COMMENT - Set Page_num to EPAGE1,Cool_down_select to FALSE , Fuel_flow_select to FUEL_FLOW_ON and
	COMMENT   Active_eiu to EIU1 if Nv_crc_fail is equal to TRUE AND Du_position is equal to ONE
 	COMMENT - Call functions OffsideSwitchScreen with Page_num as parameter,OffsideCoolTimer with Cool_down_select as parameter
 	COMMENT  and GlobalSettingsSetEIU with  Active_eiu as parameter when Du_position is equal to ONE
 	COMMENT - Call functions OsTimeDly with parameter 250 and ForegroundLoadBackground with sum of BG_IMAGE_ADDR and product 
 	COMMENT of Page_num, PAGE_BITMAP_NUM_OF_SECTOR and SECTOR_SIZE as its parameter.
 	COMMENT - Call the function PdiPageDataInit with Page_num as its parameter
 	COMMENT - Call the function RoundDialsInit with Ap_page0_dials as its parameter
 	COMMENT - Call the function NumberBoxInit with Page_num_boxes as its parameter
 	COMMENT - Call the function BarGraphInit with Ap_page1_bar_graphs as its parameter
 	COMMENT - Call function TextBoxOff with reference to Prim_cool_down_pop_up_box as parameter.
 	COMMENT - Set s16ULX of Prim_cool_down_pop_up_box to u16_x of acdt_axis of Page_settings minus COOLDOWN_AXIS_CALIBRATION,
 	COMMENT Set s16ULY of Prim_cool_down_pop_up_box to u16_y of acdt_axis of Page_settings minus COOLDOWN_AXIS_CALIBRATION when
 	COMMENT Acdt_flag is equal to TRUE.
 	COMMENT - Call function MenuInit.
 	COMMENT 3.Return from the function.
 	COMMENT
 	COMMENT COND : COND1 OR COND2 OR COND3 OR COND4 OR COND5
 	COMMENT
 	COMMENT COND1 : Splash timer is greater than or equal to SPLASH_TIME  
 	COMMENT COND2 : Splash_b1_press is zero AND any one of the buttons from Switches is pressed(i.e b1,b2,b3,b4,b5,b6,b7,b8,b10,b11,b12,b13,c1,c2,c3, sLE, sRe)
 	COMMENT COND3 : twist of sLE of Switches is not equal to zero 
	COMMENT COND4 : twist of sRe of Switches is not equal to zero  
    COMMENT COND5 : flag which indicate first demo mode  Bitwise and Demo_active bitwise and of result of COND6
	COMMENT COND6 : splash timer is greater than or equal to SPLASH_TIME
    COMMENT  Equivalence class 62,63,64,65,66,67,68,69,195,86,108,100,110,72,115,87,88,89,111,90,91,92,93,94,95,96,97,191,193,196,
	COMMENT 				   213,214,215,216 
    COMMENT  MCDC Covered   FFXXXXXXXXXXXXXXXXXTXX 
	COMMENT  </TD> 
    
    ELEMENT
    
    
        COMMENT INPUT SECTION:
		
			VAR Pg_cnt,        init = 1,       ev = init
			
            VAR Ap_poly_graph[0].polygon_shape,        init = FG_RED_X_SHAPE,       ev = init
            
            --data read from Parameters[0]
            VAR Port1_label_count,                              init = 2,                               ev = init
    
            --type of the parameter
            VAR Parameters[1].type,                             init = BNR,                             ev = init
    
            --data read from Parameters[2]
            VAR PTU_parameters[1].reading,                      init = NCD,                             ev = init
    
            --data read from Parameters[2]
            VAR PTU_parameters_numbox[1].reading,               init = NCD,                             ev = init
    
            --type of the parameter
            VAR Parameters[2].type,                             init = BCD,                             ev = init
    
            --data read from Parameters[2]
            VAR PTU_parameters_numbox[2].reading,               init = NCD,                             ev = init
            
            --Counter value used to loop 
            VAR Bg_cnt,                                         init = 1,                               ev = init
			
			VAR Cg_cnt,                                         init = 1,               ev = init
			
            VAR Text_cnt,                                       init = 1,               ev = init
			
            VAR Tb_cnt,                                         init = 1,               ev = init
    
            --Counter value used to loop 
            VAR Nb_cnt,                                         init = 1,                               ev = init
    
            --Number limit
            VAR Ap_page1_bar_graphs[0].numLimit,                init = 1,                               ev = init   
    
            VAR Ap_page1_bar_graphs[0].psParam,                 init = &PTU_param,                      ev = init
    
            --value of the channel 
            VAR PTU_param.fread,                                init = 1,                               ev = init
    
            --limit value
            VAR Ap_page1_bar_graphs[0].limVal[0],               init = 1,                               ev = init   
    
            --limit value type
            VAR Ap_page1_bar_graphs[0].limValtype[0],           init = EQUAL,                           ev = init   
    
            --Color for different limits
            VAR Ap_page1_bar_graphs[0].limColor[0],             init = YELLOW,                          ev = init   
    
            --Color of the bargraph
            VAR Ap_page1_bar_graphs[0].ePenColor,               init = YELLOW,                          ev = init
    
            --Number limit
            VAR Page_num_boxes[0].numLimit,                     init = 1,                               ev = init               
    
            VAR Page_num_boxes[0].psParam,                      init = &PTU_param1,                     ev = init
    
            --Parameter r driving the number
            VAR PTU_param1.fread,                               init = 1,                               ev = init
    
            --limit value
            VAR Page_num_boxes[0].limVal[0],                    init = 1,                               ev = init   
    
            --limit value type
            VAR Page_num_boxes[0].limValtype[0],                init = EQUAL,                           ev = init
    
            --Color for different limits
            VAR Page_num_boxes[0].limColor[0],                  init = YELLOW,                          ev = init   
    
            --Pen color
            VAR Page_num_boxes[0].ePenColor,                    init = YELLOW,                          ev = init

            --Holds Button 1 press flag for splash screen
            VAR Splash_b1_press,                                init = 1,                               ev = init
            
            --Left Twist selection
            VAR Switches.sLE.twist,                             init = 1,                               ev = init
            
            --Right Twist selection
            VAR Switches.sRE.twist,                             init = 1,                               ev = init   
        
            --Button 1
            VAR Switches.b1,                                    init = 0,                               ev = init
    
            --Button 2
            VAR Switches.b2,                                    init = 0,                               ev = init
    
            --Button 3
            VAR Switches.b3,                                    init = 0,                               ev = init
    
            --Button 4
            VAR Switches.b4,                                    init = 1,                               ev = init
    
            --Button 5
            VAR Switches.b5,                                    init = 0,                               ev = init
    
            --Button 6
            VAR Switches.b6,                                    init = 0,                               ev = init
    
            --Button 7
            VAR Switches.b7,                                    init = 0,                               ev = init
    
            --Button 8
            VAR Switches.b8,                                    init = 0,                               ev = init
			
			--Button 10
            VAR Switches.b10,            						init = 0,       					ev = init
			
			--Button 11
            VAR Switches.b11,           					 	init = 0,       					ev = init
			
			--Button 12
            VAR Switches.b12,            						init = 0,       					ev = init
			
			--Button 13
            VAR Switches.b13,            						init = 0,       					ev = init 
    
            --Button c1
            VAR Switches.c1,                                    init = 0,                               ev = init
    
            --Button c2
            VAR Switches.c2,                                    init = 0,                               ev = init
    
            --Button c3
            VAR Switches.c3,                                    init = 0,                               ev = init
    
            --Left Encoder selection
            VAR Switches.sLE.pressed,                           init = 0,                               ev = init
    
            --Right Encoder selection
            VAR Switches.sRE.pressed,                           init = 0,                               ev = init
            
            --NV RAM CRC fail check
            VAR Nv_crc_fail,                                    init = FALSE,                           ev = init
            
            --Position value of Display Unit 
            VAR Du_position,                                    init = 0,                               ev = init
            
            --Counter used to loop
            VAR Rd_cnt,                                         init = 1,                               ev = init
            
            --flag of page setting
            VAR Acdt_flag,                                      init = TRUE,                            ev = init

            --X-Axis of the Bottom Center of Bar graph
            VAR Page_settings.acdt_axis.u16_x,                  init = 50,                              ev = init

            --Y-Axis of the Bottom Center of Bar graph
            VAR Page_settings.acdt_axis.u16_y,                  init = 50,                              ev = init
                    
            VAR Page_settings.page_num,                         init = 0,                               ev = init
			
			--VAR Bitmap_crc_check_bit[1],					init = TRUE,				ev = init
			
			VAR Page_parameter_error,        init = FALSE,       ev = init
            
        COMMENT OUTPUT SECTION:
                                                            
              --Status of channel
             VAR PTU_param.stat,                                init = PARAM_OK,                        ev = init  
             
             --Parameter stat driving the number
             VAR PTU_param1.stat,                               init = PARAM_OK,                        ev = init
                                                                        
        COMMENT INPUT/OUTPUT SECTION:
                                                            
            --Indicates the value of splash screen display
            VAR Splash_done,                                    init = ZERO,                            ev = 1
            
            --Page number
            VAR Page_num,                                       init = EPAGE0,                          ev = init
            
            --X coordinate of text box center
            VAR Prim_cool_down_pop_up_box.s16ULX,               init = 0,                               ev = 5
            
            --Y coordinate of text box center
            VAR Prim_cool_down_pop_up_box.s16ULY,               init = 0,                               ev = 5
            
        -- Stub Calls:
                                                                
        SIMUL
            
            --reads the message from RTD 
            STUB RTDGetParam(1)
            STUB RTDGetParam(1)
    
            --reads the discrete word
            STUB RTDGetParamDdw(2)

            --allows the calling task to delay for a specific number of clock ticks
            STUB  OsTimeDly(250)
            
            --To load the background
            STUB ForegroundLoadBackground((T_UINT16 *)(BG_IMAGE_ADDR+(Page_num*PAGE_BITMAP_NUM_OF_SECTOR*SECTOR_SIZE)))
            
            --extracts page wise settings from PDI
            STUB PdiPageDataInit(Page_num)
            
            --Allocate a single round dial
            STUB RoundDialAllocat(Ap_page0_dials)   
            
            --Allocates number box structure
            STUB NumboxAllocat(Page_num_boxes)
            
            --Allocates number box structure
            STUB BargraphAllocat(Ap_page1_bar_graphs)
			
			--Allocates Carrot Graph structure
			STUB CarrotGraphAllocat (Ap_page2_carrot)
				
			--Allocates Text structure
			STUB TextAllocatPdi(&Page_txt[0].ppsOwner,Page_txt[0].u16X0,Page_txt[0].u16Y0,Page_txt[0].eTXAlign,Page_txt[0].eTXFont,Page_txt[0].ePenColor,Page_txt[0].eTXV,Page_txt[0].eTXFlash)
				
			--Allocates Text Box structure
			STUB TextBoxPdiAllocate (Ap_page_tbs)
            
            --configures the timer initializations and all text boxes 
            STUB MenuInit()
            
            --disables the text box
            STUB TextBoxOff(&Prim_cool_down_pop_up_box)
            
     
        END SIMUL
            
        -- Calling the Unit Under Test 
        #GrappApp();
            
    END ELEMENT
    
END TEST -- TEST 20

TEST 21
FAMILY nominal

    COMMENT  Test Description
    COMMENT  <TD>   
    COMMENT  [hdudispfgrapp-GrappApp-DB-LLR-003]
    COMMENT  The function 'GrappApp' does the following when Splash done is zero and COND is true.
 	COMMENT - Set splash done to 1.
	COMMENT - Set Page_num to EPAGE1,Cool_down_select to FALSE , Fuel_flow_select to FUEL_FLOW_ON and
	COMMENT   Active_eiu to EIU1 if Nv_crc_fail is equal to TRUE AND Du_position is equal to ONE
 	COMMENT - Call functions OffsideSwitchScreen with Page_num as parameter,OffsideCoolTimer with Cool_down_select as parameter
 	COMMENT  and GlobalSettingsSetEIU with  Active_eiu as parameter when Du_position is equal to ONE
 	COMMENT - Call functions OsTimeDly with parameter 250 and ForegroundLoadBackground with sum of BG_IMAGE_ADDR and product 
 	COMMENT of Page_num, PAGE_BITMAP_NUM_OF_SECTOR and SECTOR_SIZE as its parameter.
 	COMMENT - Call the function PdiPageDataInit with Page_num as its parameter
 	COMMENT - Call the function RoundDialsInit with Ap_page0_dials as its parameter
 	COMMENT - Call the function NumberBoxInit with Page_num_boxes as its parameter
 	COMMENT - Call the function BarGraphInit with Ap_page1_bar_graphs as its parameter
 	COMMENT - Call function TextBoxOff with reference to Prim_cool_down_pop_up_box as parameter.
 	COMMENT - Set s16ULX of Prim_cool_down_pop_up_box to u16_x of acdt_axis of Page_settings minus COOLDOWN_AXIS_CALIBRATION,
 	COMMENT Set s16ULY of Prim_cool_down_pop_up_box to u16_y of acdt_axis of Page_settings minus COOLDOWN_AXIS_CALIBRATION when
 	COMMENT Acdt_flag is equal to TRUE.
 	COMMENT - Call function MenuInit.
 	COMMENT 3.Return from the function.
 	COMMENT
 	COMMENT COND : COND1 OR COND2 OR COND3 OR COND4 OR COND5
 	COMMENT
 	COMMENT COND1 : Splash timer is greater than or equal to SPLASH_TIME  
 	COMMENT COND2 : Splash_b1_press is zero AND any one of the buttons from Switches is pressed(i.e b1,b2,b3,b4,b5,b6,b7,b8,b10,b11,b12,b13,c1,c2,c3, sLE, sRe)
 	COMMENT COND3 : twist of sLE of Switches is not equal to zero 
	COMMENT COND4 : twist of sRe of Switches is not equal to zero  
    COMMENT COND5 : flag which indicate first demo mode  Bitwise and Demo_active bitwise and of result of COND6
	COMMENT COND6 : splash timer is greater than or equal to SPLASH_TIME
    COMMENT  Equivalence class 62,63,64,65,66,67,68,69,195,86,108,100,110,72,115,87,88,89,111,90,91,92,93,94,95,96,97,191,193,196,213,214,215,216
    COMMENT  MCDC Covered   FFXXXXXXXXXXXXXXXXXTXX 
	COMMENT  </TD> 
    
    ELEMENT
    
    
        COMMENT INPUT SECTION:
		
			VAR Pg_cnt,        init = 2,       ev = init
			
            VAR Ap_poly_graph[0].polygon_shape,        init = FG_STANDARD_POINTER,       ev = init
            VAR Ap_poly_graph[1].polygon_shape,        init = FG_RED_X_SHAPE,       ev = init
            
            --data read from Parameters[0]
            VAR Port1_label_count,                              init = 2,                               ev = init
    
            --type of the parameter
            VAR Parameters[1].type,                             init = BNR,                             ev = init
    
            --data read from Parameters[2]
            VAR PTU_parameters[1].reading,                      init = NCD,                             ev = init
    
            --data read from Parameters[2]
            VAR PTU_parameters_numbox[1].reading,             	init = NCD,                             ev = init
    
            --type of the parameter
            VAR Parameters[2].type,                             init = BCD,                             ev = init
    
            --data read from Parameters[2]
            VAR PTU_parameters_numbox[2].reading,               init = NCD,                             ev = init
            
            --Counter value used to loop 
            VAR Bg_cnt,                                         init = 1,                               ev = init
			
			VAR Cg_cnt,                                         init = 1,               ev = init
			
            VAR Text_cnt,                                       init = 1,               ev = init
			
            VAR Tb_cnt,                                         init = 1,               ev = init
                --Counter value used to loop 
            VAR Nb_cnt,                                         init = 1,                               ev = init
    
            --Number limit
            VAR Ap_page1_bar_graphs[0].numLimit,                init = 1,                               ev = init   
    
            VAR Ap_page1_bar_graphs[0].psParam,                 init = &PTU_param,                      ev = init
    
            --value of the channel 
            VAR PTU_param.fread,                                init = 1,                               ev = init
    
            --limit value
            VAR Ap_page1_bar_graphs[0].limVal[0],               init = 1,                               ev = init   
    
            --limit value type
            VAR Ap_page1_bar_graphs[0].limValtype[0],           init = EQUAL,                           ev = init   
    
            --Color for different limits
            VAR Ap_page1_bar_graphs[0].limColor[0],             init = YELLOW,                          ev = init   
    
            --Color of the bargraph
            VAR Ap_page1_bar_graphs[0].ePenColor,               init = YELLOW,                          ev = init
    
            --Number limit
            VAR Page_num_boxes[0].numLimit,                     init = 1,                               ev = init               
    
            VAR Page_num_boxes[0].psParam,                      init = &PTU_param1,                     ev = init
    
            --Parameter r driving the number
            VAR PTU_param1.fread,                               init = 1,                               ev = init
    
            --limit value
            VAR Page_num_boxes[0].limVal[0],                    init = 1,                               ev = init   
    
            --limit value type
            VAR Page_num_boxes[0].limValtype[0],                init = EQUAL,                           ev = init
    
            --Color for different limits
            VAR Page_num_boxes[0].limColor[0],                  init = YELLOW,                          ev = init   
    
            --Pen color
            VAR Page_num_boxes[0].ePenColor,                    init = YELLOW,                          ev = init

            --Holds Button 1 press flag for splash screen
            VAR Splash_b1_press,                                init = 1,                               ev = init
            
            --Left Twist selection
            VAR Switches.sLE.twist,                             init = 1,                               ev = init
            
            --Right Twist selection
            VAR Switches.sRE.twist,                             init = 1,                               ev = init   
        
            --Button 1
            VAR Switches.b1,                                    init = 0,                               ev = init
    
            --Button 2
            VAR Switches.b2,                                    init = 0,                               ev = init
    
            --Button 3
            VAR Switches.b3,                                    init = 0,                               ev = init
    
            --Button 4
            VAR Switches.b4,                                    init = 0,                               ev = init
    
            --Button 5
            VAR Switches.b5,                                    init = 1,                               ev = init
    
            --Button 6
            VAR Switches.b6,                                    init = 0,                               ev = init
    
            --Button 7
            VAR Switches.b7,                                    init = 0,                               ev = init
    
            --Button 8
            VAR Switches.b8,                                    init = 0,                               ev = init
			
			--Button 10
            VAR Switches.b10,            						init = 0,       					ev = init
			
			--Button 11
            VAR Switches.b11,           					 	init = 0,       					ev = init
			
			--Button 12
            VAR Switches.b12,            						init = 0,       					ev = init
			
			--Button 13
            VAR Switches.b13,            						init = 0,       					ev = init 
    
            --Button c1
            VAR Switches.c1,                                    init = 0,                               ev = init
    
            --Button c2
            VAR Switches.c2,                                    init = 0,                               ev = init
    
            --Button c3
            VAR Switches.c3,                                    init = 0,                               ev = init
    
            --Left Encoder selection
            VAR Switches.sLE.pressed,                           init = 0,                               ev = init
    
            --Right Encoder selection
            VAR Switches.sRE.pressed,                           init = 0,                               ev = init
            
            --NV RAM CRC fail check
            VAR Nv_crc_fail,                                    init = FALSE,                           ev = init
            
            --Position value of Display Unit 
            VAR Du_position,                                    init = 0,                               ev = init
            
            --Counter used to loop
            VAR Rd_cnt,                                         init = 1,                               ev = init
            
            --flag of page setting
            VAR Acdt_flag,                                      init = TRUE,                            ev = init

            --X-Axis of the Bottom Center of Bar graph
            VAR Page_settings.acdt_axis.u16_x,                  init = 50,                              ev = init

            --Y-Axis of the Bottom Center of Bar graph
            VAR Page_settings.acdt_axis.u16_y,                  init = 50,                              ev = init
            
            VAR Page_settings.page_num,                         init = 0,                               ev = init
			
			--VAR Bitmap_crc_check_bit[1],					    init = TRUE,				ev = init
			
			VAR Page_parameter_error,        init = FALSE,       ev = init
            
        COMMENT OUTPUT SECTION:
        
              --Status of channel
             VAR PTU_param.stat,                                init = PARAM_OK,                        ev = init  
             
             --Parameter stat driving the number
             VAR PTU_param1.stat,                               init = PARAM_OK,                        ev = init
                                                                
        COMMENT INPUT/OUTPUT SECTION:
                                                            
            --Indicates the value of splash screen display
            VAR Splash_done,                                    init = ZERO,                            ev = 1
            
            --Page number
            VAR Page_num,                                       init = EPAGE0,                          ev = init
        
            --X coordinate of text box center
            VAR Prim_cool_down_pop_up_box.s16ULX,               init = 0,                               ev = 5
            
            --Y coordinate of text box center
            VAR Prim_cool_down_pop_up_box.s16ULY,               init = 0,                               ev = 5
                    
        -- Stub Calls:
        SIMUL
            
            --reads the message from RTD 
            STUB RTDGetParam(1)
            STUB RTDGetParam(1)
    
            --reads the discrete word
            STUB RTDGetParamDdw(2)

            --allows the calling task to delay for a specific number of clock ticks
            STUB  OsTimeDly(250)
            
            --To load the background
            STUB ForegroundLoadBackground((T_UINT16 *)(BG_IMAGE_ADDR+(Page_num*PAGE_BITMAP_NUM_OF_SECTOR*SECTOR_SIZE)))
            
            --extracts page wise settings from PDI
            STUB PdiPageDataInit(Page_num)
            
            --Allocate a single round dial
            STUB RoundDialAllocat(Ap_page0_dials)   
            
            --Allocates number box structure
            STUB NumboxAllocat(Page_num_boxes)
            
            --Allocates number box structure
            STUB BargraphAllocat(Ap_page1_bar_graphs)
			
			--Allocates Carrot Graph structure
			STUB CarrotGraphAllocat (Ap_page2_carrot)
				
			--Allocates Text structure
			STUB TextAllocatPdi(&Page_txt[0].ppsOwner,Page_txt[0].u16X0,Page_txt[0].u16Y0,Page_txt[0].eTXAlign,Page_txt[0].eTXFont,Page_txt[0].ePenColor,Page_txt[0].eTXV,Page_txt[0].eTXFlash)
				
			--Allocates Text Box structure
			STUB TextBoxPdiAllocate (Ap_page_tbs)
            
            --configures the timer initializations and all text boxes 
            STUB MenuInit()
            
            --disables the text box
            STUB TextBoxOff(&Prim_cool_down_pop_up_box)

        END SIMUL
            
        -- Calling the Unit Under Test 
        #GrappApp();
            
    END ELEMENT
    
END TEST -- TEST 21

TEST 22
FAMILY nominal

    COMMENT  Test Description
    COMMENT  <TD>   
    COMMENT  [hdudispfgrapp-GrappApp-DB-LLR-003]
    COMMENT  The function 'GrappApp' does the following when Splash done is zero and COND is true.
 	COMMENT - Set splash done to 1.
	COMMENT - Set Page_num to EPAGE1,Cool_down_select to FALSE , Fuel_flow_select to FUEL_FLOW_ON and
	COMMENT   Active_eiu to EIU1 if Nv_crc_fail is equal to TRUE AND Du_position is equal to ONE
 	COMMENT - Call functions OffsideSwitchScreen with Page_num as parameter,OffsideCoolTimer with Cool_down_select as parameter
 	COMMENT  and GlobalSettingsSetEIU with  Active_eiu as parameter when Du_position is equal to ONE
 	COMMENT - Call functions OsTimeDly with parameter 250 and ForegroundLoadBackground with sum of BG_IMAGE_ADDR and product 
 	COMMENT of Page_num, PAGE_BITMAP_NUM_OF_SECTOR and SECTOR_SIZE as its parameter.
 	COMMENT - Call the function PdiPageDataInit with Page_num as its parameter
 	COMMENT - Call the function RoundDialsInit with Ap_page0_dials as its parameter
 	COMMENT - Call the function NumberBoxInit with Page_num_boxes as its parameter
 	COMMENT - Call the function BarGraphInit with Ap_page1_bar_graphs as its parameter
 	COMMENT - Call function TextBoxOff with reference to Prim_cool_down_pop_up_box as parameter.
 	COMMENT - Set s16ULX of Prim_cool_down_pop_up_box to u16_x of acdt_axis of Page_settings minus COOLDOWN_AXIS_CALIBRATION,
 	COMMENT Set s16ULY of Prim_cool_down_pop_up_box to u16_y of acdt_axis of Page_settings minus COOLDOWN_AXIS_CALIBRATION when
 	COMMENT Acdt_flag is equal to TRUE.
 	COMMENT - Call function MenuInit.
 	COMMENT 3.Return from the function.
 	COMMENT
 	COMMENT COND : COND1 OR COND2 OR COND3 OR COND4 OR COND5
 	COMMENT
 	COMMENT COND1 : Splash timer is greater than or equal to SPLASH_TIME  
 	COMMENT COND2 : Splash_b1_press is zero AND any one of the buttons from Switches is pressed(i.e b1,b2,b3,b4,b5,b6,b7,b8,b10,b11,b12,b13,c1,c2,c3, sLE, sRe)
 	COMMENT COND3 : twist of sLE of Switches is not equal to zero 
	COMMENT COND4 : twist of sRe of Switches is not equal to zero  
    COMMENT COND5 : flag which indicate first demo mode  Bitwise and Demo_active bitwise and of result of COND6
	COMMENT COND6 : splash timer is greater than or equal to SPLASH_TIME
    COMMENT  Equivalence class 62,63,64,65,66,67,68,69,195,86,108,100,110,72,115,87,88,89,111,90,91,92,93,94,95,96,97,191,193,196,213,214,215,216
    COMMENT  MCDC Covered   FFXXXXXXXXXXXXXXXXXTXX 
	COMMENT  </TD> 
    
    ELEMENT
    
    
        COMMENT INPUT SECTION:
		
			VAR Pg_cnt,        init = 1,       ev = init
			
            VAR Ap_poly_graph[0].polygon_shape,        init = FG_STANDARD_POINTER,       ev = init
            
            --data read from Parameters[0]
            VAR Port1_label_count,                              init = 2,                               ev = init
    
            --type of the parameter
            VAR Parameters[1].type,                             init = BNR,                             ev = init
    
            --data read from Parameters[2]
            VAR PTU_parameters[1].reading,                      init = NCD,                             ev = init
    
            --data read from Parameters[2]
            VAR PTU_parameters_numbox[1].reading,               init = NCD,                             ev = init
    
            --type of the parameter
            VAR Parameters[2].type,                             init = BCD,                             ev = init
    
            --data read from Parameters[2]
            VAR PTU_parameters_numbox[2].reading,               init = NCD,                             ev = init
            
            --Counter value used to loop 
            VAR Bg_cnt,                                         init = 1,                               ev = init
			
			VAR Cg_cnt,                                         init = 1,               ev = init
			
            VAR Text_cnt,                                       init = 1,               ev = init
			
            VAR Tb_cnt,                                         init = 1,               ev = init
    
            --Counter value used to loop 
            VAR Nb_cnt,                                         init = 1,                               ev = init
    
            --Number limit
            VAR Ap_page1_bar_graphs[0].numLimit,                init = 1,                               ev = init   
    
            VAR Ap_page1_bar_graphs[0].psParam,                 init = &PTU_param,                      ev = init
    
            --value of the channel 
            VAR PTU_param.fread,                                init = 1,                               ev = init
    
            --limit value
            VAR Ap_page1_bar_graphs[0].limVal[0],               init = 1,                               ev = init   
    
            --limit value type
            VAR Ap_page1_bar_graphs[0].limValtype[0],           init = EQUAL,                           ev = init   
    
            --Color for different limits
            VAR Ap_page1_bar_graphs[0].limColor[0],             init = YELLOW,                          ev = init   
    
            --Color of the bargraph
            VAR Ap_page1_bar_graphs[0].ePenColor,               init = YELLOW,                          ev = init
    
            --Number limit
            VAR Page_num_boxes[0].numLimit,                     init = 1,                               ev = init               
    
            VAR Page_num_boxes[0].psParam,                      init = &PTU_param1,                     ev = init
    
            --Parameter r driving the number
            VAR PTU_param1.fread,                               init = 1,                               ev = init
    
            --limit value
            VAR Page_num_boxes[0].limVal[0],                    init = 1,                               ev = init   
    
            --limit value type
            VAR Page_num_boxes[0].limValtype[0],                init = EQUAL,                           ev = init
    
            --Color for different limits
            VAR Page_num_boxes[0].limColor[0],                  init = YELLOW,                          ev = init   
    
            --Pen color
            VAR Page_num_boxes[0].ePenColor,                    init = YELLOW,                          ev = init

            --Holds Button 1 press flag for splash screen
            VAR Splash_b1_press,                                init = 1,                               ev = init
            
            --Left Twist selection
            VAR Switches.sLE.twist,                             init = 1,                               ev = init
            
            --Right Twist selection
            VAR Switches.sRE.twist,                             init = 1,                               ev = init   
        
            --Button 1
            VAR Switches.b1,                                    init = 0,                               ev = init
    
            --Button 2
            VAR Switches.b2,                                    init = 0,                               ev = init
    
            --Button 3
            VAR Switches.b3,                                    init = 0,                               ev = init
    
            --Button 4
            VAR Switches.b4,                                    init = 0,                               ev = init
    
            --Button 5
            VAR Switches.b5,                                    init = 0,                               ev = init
    
            --Button 6
            VAR Switches.b6,                                    init = 1,                               ev = init
    
            --Button 7
            VAR Switches.b7,                                    init = 0,                               ev = init
    
            --Button 8
            VAR Switches.b8,                                    init = 0,                               ev = init
			
			--Button 10
            VAR Switches.b10,            						init = 0,       					ev = init
			
			--Button 11
            VAR Switches.b11,           					 	init = 0,       					ev = init
			
			--Button 12
            VAR Switches.b12,            						init = 0,       					ev = init
			
			--Button 13
            VAR Switches.b13,            						init = 0,       					ev = init 
    
            --Button c1
            VAR Switches.c1,                                    init = 0,                               ev = init
    
            --Button c2
            VAR Switches.c2,                                    init = 0,                               ev = init
    
            --Button c3
            VAR Switches.c3,                                    init = 0,                               ev = init
    
            --Left Encoder selection
            VAR Switches.sLE.pressed,                           init = 0,                               ev = init
    
            --Right Encoder selection
            VAR Switches.sRE.pressed,                           init = 0,                               ev = init
            
            --NV RAM CRC fail check
            VAR Nv_crc_fail,                                    init = FALSE,                           ev = init
            
            --Position value of Display Unit 
            VAR Du_position,                                    init = 0,                               ev = init
            
            --Counter used to loop
            VAR Rd_cnt,                                         init = 1,                               ev = init
            
            --flag of page setting
            VAR Acdt_flag,                                      init = TRUE,                            ev = init
            
            --X-Axis of the Bottom Center of Bar graph
            VAR Page_settings.acdt_axis.u16_x,                  init = 50,                              ev = init
            
            --Y-Axis of the Bottom Center of Bar graph
            VAR Page_settings.acdt_axis.u16_y,                  init = 50,                              ev = init
            
            VAR Page_settings.page_num,                         init = 0,                               ev = init
			
			--VAR Bitmap_crc_check_bit[1],					init = TRUE,				ev = init
			
			VAR Page_parameter_error,        init = FALSE,       ev = init
            
        COMMENT OUTPUT SECTION:
                                                            
              --Status of channel
             VAR PTU_param.stat,                                init = PARAM_OK,                        ev = init  
             
             --Parameter stat driving the number
             VAR PTU_param1.stat,                               init = PARAM_OK,                        ev = init
             
                                                            
        COMMENT INPUT/OUTPUT SECTION:
                                                            
            --Indicates the value of splash screen display
            VAR Splash_done,                                    init = ZERO,                            ev = 1
            
            --Page number
            VAR Page_num,                                       init = EPAGE0,                          ev = init
        
                
            --X coordinate of text box center
            VAR Prim_cool_down_pop_up_box.s16ULX,               init = 0,                               ev = 5
            
            --Y coordinate of text box center
            VAR Prim_cool_down_pop_up_box.s16ULY,               init = 0,                               ev = 5
            
        -- Stub Calls:
                                                                
        SIMUL
            
            --reads the message from RTD 
            STUB RTDGetParam(1)
            STUB RTDGetParam(1)
    
            --reads the discrete word
            STUB RTDGetParamDdw(2)

            --allows the calling task to delay for a specific number of clock ticks
            STUB  OsTimeDly(250)
            
            --To load the background
            STUB ForegroundLoadBackground((T_UINT16 *)(BG_IMAGE_ADDR+(Page_num*PAGE_BITMAP_NUM_OF_SECTOR*SECTOR_SIZE)))
            
            --extracts page wise settings from PDI
            STUB PdiPageDataInit(Page_num)
            
            --Allocate a single round dial
            STUB RoundDialAllocat(Ap_page0_dials)   
            
            --Allocates number box structure
            STUB NumboxAllocat(Page_num_boxes)
            
            --Allocates number box structure
            STUB BargraphAllocat(Ap_page1_bar_graphs)
			
			--Allocates Carrot Graph structure
			STUB CarrotGraphAllocat (Ap_page2_carrot)
				
			--Allocates Text structure
			STUB TextAllocatPdi(&Page_txt[0].ppsOwner,Page_txt[0].u16X0,Page_txt[0].u16Y0,Page_txt[0].eTXAlign,Page_txt[0].eTXFont,Page_txt[0].ePenColor,Page_txt[0].eTXV,Page_txt[0].eTXFlash)
				
			--Allocates Text Box structure
			STUB TextBoxPdiAllocate (Ap_page_tbs)
            
            --configures the timer initializations and all text boxes 
            STUB MenuInit()
			
            STUB RterrWidget(739)
            
            --disables the text box
            STUB TextBoxOff(&Prim_cool_down_pop_up_box)
            
            
        END SIMUL
            
        -- Calling the Unit Under Test 
        #GrappApp();
            
    END ELEMENT
    
END TEST -- TEST 22

TEST 23
FAMILY nominal

    COMMENT  Test Description
    COMMENT  <TD>   
    COMMENT  [hdudispfgrapp-GrappApp-DB-LLR-003]
    COMMENT  The function 'GrappApp' does the following when Splash done is zero and COND is true.
 	COMMENT - Set splash done to 1.
	COMMENT - Set Page_num to EPAGE1,Cool_down_select to FALSE , Fuel_flow_select to FUEL_FLOW_ON and
	COMMENT   Active_eiu to EIU1 if Nv_crc_fail is equal to TRUE AND Du_position is equal to ONE
 	COMMENT - Call functions OffsideSwitchScreen with Page_num as parameter,OffsideCoolTimer with Cool_down_select as parameter
 	COMMENT  and GlobalSettingsSetEIU with  Active_eiu as parameter when Du_position is equal to ONE
 	COMMENT - Call functions OsTimeDly with parameter 250 and ForegroundLoadBackground with sum of BG_IMAGE_ADDR and product 
 	COMMENT of Page_num, PAGE_BITMAP_NUM_OF_SECTOR and SECTOR_SIZE as its parameter.
 	COMMENT - Call the function PdiPageDataInit with Page_num as its parameter
 	COMMENT - Call the function RoundDialsInit with Ap_page0_dials as its parameter
 	COMMENT - Call the function NumberBoxInit with Page_num_boxes as its parameter
 	COMMENT - Call the function BarGraphInit with Ap_page1_bar_graphs as its parameter
 	COMMENT - Call function TextBoxOff with reference to Prim_cool_down_pop_up_box as parameter.
 	COMMENT - Set s16ULX of Prim_cool_down_pop_up_box to u16_x of acdt_axis of Page_settings minus COOLDOWN_AXIS_CALIBRATION,
 	COMMENT Set s16ULY of Prim_cool_down_pop_up_box to u16_y of acdt_axis of Page_settings minus COOLDOWN_AXIS_CALIBRATION when
 	COMMENT Acdt_flag is equal to TRUE.
 	COMMENT - Call function MenuInit.
 	COMMENT 3.Return from the function.
 	COMMENT
 	COMMENT COND : COND1 OR COND2 OR COND3 OR COND4 OR COND5
 	COMMENT
 	COMMENT COND1 : Splash timer is greater than or equal to SPLASH_TIME  
 	COMMENT COND2 : Splash_b1_press is zero AND any one of the buttons from Switches is pressed(i.e b1,b2,b3,b4,b5,b6,b7,b8,b10,b11,b12,b13,c1,c2,c3, sLE, sRe)
 	COMMENT COND3 : twist of sLE of Switches is not equal to zero 
	COMMENT COND4 : twist of sRe of Switches is not equal to zero  
    COMMENT COND5 : flag which indicate first demo mode  Bitwise and Demo_active bitwise and of result of COND6
	COMMENT COND6 : splash timer is greater than or equal to SPLASH_TIME
    COMMENT  Equivalence class 62,63,64,65,66,67,68,69,195,86,108,100,110,72,115,87,88,89,111,90,91,92,93,94,95,96,97,191,193,196,213,214,215,216
    COMMENT  MCDC Covered   FFXXXXXXXXXXXXXXXXXTXX 
	COMMENT  </TD> 

    ELEMENT
    
    
        COMMENT INPUT SECTION:
		
			VAR Pg_cnt,        init = 0,       ev = init
			
            VAR Ap_poly_graph[0].polygon_shape,        init = FG_RED_X_SHAPE,       ev = init
            
            --data read from Parameters[0]
            VAR Port1_label_count,                              init = 2,                   ev = init
    
            --type of the parameter
            VAR Parameters[1].type,                             init = BNR,                 ev = init
    
            --data read from Parameters[2]
            VAR PTU_parameters[1].reading,                      init = NCD,                 ev = init
    
            --data read from Parameters[2]
            VAR PTU_parameters_numbox[1].reading,               init = NCD,                 ev = init
    
            --type of the parameter
            VAR Parameters[2].type,                             init = BCD,                 ev = init
    
            --data read from Parameters[2]
            VAR PTU_parameters_numbox[2].reading,               init = NCD,                 ev = init
            
            --Counter value used to loop 
            VAR Bg_cnt,                                         init = 1,                   ev = init
			
			VAR Cg_cnt,                                         init = 1,               ev = init
			
            VAR Text_cnt,                                       init = 1,               ev = init
			
            VAR Tb_cnt,                                         init = 1,               ev = init
    
            --Counter value used to loop 
            VAR Nb_cnt,                                         init = 1,                   ev = init
    
            --Number limit
            VAR Ap_page1_bar_graphs[0].numLimit,                init = 1,                   ev = init   
    
            VAR Ap_page1_bar_graphs[0].psParam,                 init = &PTU_param,          ev = init
    
            --value of the channel 
            VAR PTU_param.fread,                                init = 1,                   ev = init
    
            --limit value
            VAR Ap_page1_bar_graphs[0].limVal[0],               init = 1,                   ev = init   
    
            --limit value type
            VAR Ap_page1_bar_graphs[0].limValtype[0],           init = EQUAL,               ev = init   
    
            --Color for different limits
            VAR Ap_page1_bar_graphs[0].limColor[0],             init = YELLOW,              ev = init   
    
            --Color of the bargraph
            VAR Ap_page1_bar_graphs[0].ePenColor,               init = YELLOW,              ev = init
    
            --Number limit
            VAR Page_num_boxes[0].numLimit,                     init = 1,                   ev = init               
    
            VAR Page_num_boxes[0].psParam,                      init = &PTU_param1,         ev = init
    
            --Parameter r driving the number
            VAR PTU_param1.fread,                               init = 1,                   ev = init
    
            --limit value
            VAR Page_num_boxes[0].limVal[0],                    init = 1,                   ev = init   
    
            --limit value type
            VAR Page_num_boxes[0].limValtype[0],                init = EQUAL,               ev = init
    
            --Color for different limits
            VAR Page_num_boxes[0].limColor[0],                  init = YELLOW,              ev = init   
    
            --Pen color
            VAR Page_num_boxes[0].ePenColor,                    init = YELLOW,              ev = init

            --Holds Button 1 press flag for splash screen
            VAR Splash_b1_press,                                init = 1,                   ev = init
            
            --Left Twist selection
            VAR Switches.sLE.twist,                             init = 1,                   ev = init
            
            --Right Twist selection
            VAR Switches.sRE.twist,                             init = 1,                   ev = init   
        
            --Button 1
            VAR Switches.b1,                                    init = 0,                   ev = init
    
            --Button 2
            VAR Switches.b2,                                    init = 0,                   ev = init
    
            --Button 3
            VAR Switches.b3,                                    init = 0,                   ev = init
    
            --Button 4
            VAR Switches.b4,                                    init = 0,                   ev = init
    
            --Button 5
            VAR Switches.b5,                                    init = 0,                   ev = init
    
            --Button 6
            VAR Switches.b6,                                    init = 0,                   ev = init
    
            --Button 7
            VAR Switches.b7,                                    init = 1,                   ev = init
    
            --Button 8
            VAR Switches.b8,                                    init = 0,                   ev = init
			
			--Button 10
            VAR Switches.b10,            						init = 0,       					ev = init
			
			--Button 11
            VAR Switches.b11,           					 	init = 0,       					ev = init
			
			--Button 12
            VAR Switches.b12,            						init = 0,       					ev = init
			
			--Button 13
            VAR Switches.b13,            						init = 0,       					ev = init 
    
            --Button c1
            VAR Switches.c1,                                    init = 0,                   ev = init
    
            --Button c2
            VAR Switches.c2,                                    init = 0,                   ev = init
    
            --Button c3
            VAR Switches.c3,                                    init = 0,                   ev = init
    
            --Left Encoder selection
            VAR Switches.sLE.pressed,                           init = 0,                   ev = init
    
            --Right Encoder selection
            VAR Switches.sRE.pressed,                           init = 0,                   ev = init
            
            --NV RAM CRC fail check
            VAR Nv_crc_fail,                                    init = FALSE,               ev = init
            
            --Position value of Display Unit 
            VAR Du_position,                                    init = 0,                   ev = init
            
            --Counter used to loop
            VAR Rd_cnt,                                         init = 1,                   ev = init
            
            --flag of page setting
            VAR Acdt_flag,                                      init = TRUE,                ev = init
            
            --X-Axis of the Bottom Center of Bar graph
            VAR Page_settings.acdt_axis.u16_x,                  init = 50,                  ev = init
            
            --Y-Axis of the Bottom Center of Bar graph
            VAR Page_settings.acdt_axis.u16_y,                  init = 50,                  ev = init
            
    
            VAR Page_settings.page_num,                         init = 0,                   ev = init
			
			--VAR Bitmap_crc_check_bit[1],					init = TRUE,				ev = init
			
			VAR Page_parameter_error,        init = FALSE,       ev = init
            
        COMMENT OUTPUT SECTION:
                                                            
              --Status of channel
             VAR PTU_param.stat,                                init = PARAM_OK,            ev = init  
             
             --Parameter stat driving the number
             VAR PTU_param1.stat,                               init = PARAM_OK,            ev = init
             
                                                            
        COMMENT INPUT/OUTPUT SECTION:
                                                            
            --Indicates the value of splash screen display
            VAR Splash_done,                                    init = ZERO,                ev = 1
            
            --Page number
            VAR Page_num,                                       init = EPAGE0,              ev = init
        
            --X coordinate of text box center
            VAR Prim_cool_down_pop_up_box.s16ULX,               init = 0,                   ev = 5
            
            --Y coordinate of text box center
            VAR Prim_cool_down_pop_up_box.s16ULY,               init = 0,                   ev = 5
            
        -- Stub Calls:
                                                                
        SIMUL
            
            --reads the message from RTD 
            STUB RTDGetParam(1)
            STUB RTDGetParam(1)
    
            --reads the discrete word
            STUB RTDGetParamDdw(2)
			
			STUB RterrWidget(739)

            --allows the calling task to delay for a specific number of clock ticks
            STUB  OsTimeDly(250)
            
            --To load the background
            STUB ForegroundLoadBackground((T_UINT16 *)(BG_IMAGE_ADDR+(Page_num*PAGE_BITMAP_NUM_OF_SECTOR*SECTOR_SIZE)))
            
            --extracts page wise settings from PDI
            STUB PdiPageDataInit(Page_num)
            
            --Allocate a single round dial
            STUB RoundDialAllocat(Ap_page0_dials)   
            
            --Allocates number box structure
            STUB NumboxAllocat(Page_num_boxes)
            
            --Allocates number box structure
            STUB BargraphAllocat(Ap_page1_bar_graphs)
			
			--Allocates Carrot Graph structure
			STUB CarrotGraphAllocat (Ap_page2_carrot)
				
			--Allocates Text structure
			STUB TextAllocatPdi(&Page_txt[0].ppsOwner,Page_txt[0].u16X0,Page_txt[0].u16Y0,Page_txt[0].eTXAlign,Page_txt[0].eTXFont,Page_txt[0].ePenColor,Page_txt[0].eTXV,Page_txt[0].eTXFlash)
				
			--Allocates Text Box structure
			STUB TextBoxPdiAllocate (Ap_page_tbs)
            
            --configures the timer initializations and all text boxes 
            STUB MenuInit()
            
            --disables the text box
            STUB TextBoxOff(&Prim_cool_down_pop_up_box)
            
            
     
        END SIMUL
            
        -- Calling the Unit Under Test 
        #GrappApp();
            
    END ELEMENT
    
END TEST -- TEST 23

TEST 24
FAMILY nominal

    COMMENT  Test Description
    COMMENT  <TD>   
    COMMENT  [hdudispfgrapp-GrappApp-DB-LLR-003]
    COMMENT  The function 'GrappApp' does the following when Splash done is zero and COND is true.
 	COMMENT - Set splash done to 1.
	COMMENT - Set Page_num to EPAGE1,Cool_down_select to FALSE , Fuel_flow_select to FUEL_FLOW_ON and
	COMMENT   Active_eiu to EIU1 if Nv_crc_fail is equal to TRUE AND Du_position is equal to ONE
 	COMMENT - Call functions OffsideSwitchScreen with Page_num as parameter,OffsideCoolTimer with Cool_down_select as parameter
 	COMMENT  and GlobalSettingsSetEIU with  Active_eiu as parameter when Du_position is equal to ONE
 	COMMENT - Call functions OsTimeDly with parameter 250 and ForegroundLoadBackground with sum of BG_IMAGE_ADDR and product 
 	COMMENT of Page_num, PAGE_BITMAP_NUM_OF_SECTOR and SECTOR_SIZE as its parameter.
 	COMMENT - Call the function PdiPageDataInit with Page_num as its parameter
 	COMMENT - Call the function RoundDialsInit with Ap_page0_dials as its parameter
 	COMMENT - Call the function NumberBoxInit with Page_num_boxes as its parameter
 	COMMENT - Call the function BarGraphInit with Ap_page1_bar_graphs as its parameter
 	COMMENT - Call function TextBoxOff with reference to Prim_cool_down_pop_up_box as parameter.
 	COMMENT - Set s16ULX of Prim_cool_down_pop_up_box to u16_x of acdt_axis of Page_settings minus COOLDOWN_AXIS_CALIBRATION,
 	COMMENT Set s16ULY of Prim_cool_down_pop_up_box to u16_y of acdt_axis of Page_settings minus COOLDOWN_AXIS_CALIBRATION when
 	COMMENT Acdt_flag is equal to TRUE.
 	COMMENT - Call function MenuInit.
 	COMMENT 3.Return from the function.
 	COMMENT
 	COMMENT COND : COND1 OR COND2 OR COND3 OR COND4 OR COND5
 	COMMENT
 	COMMENT COND1 : Splash timer is greater than or equal to SPLASH_TIME  
 	COMMENT COND2 : Splash_b1_press is zero AND any one of the buttons from Switches is pressed(i.e b1,b2,b3,b4,b5,b6,b7,b8,b10,b11,b12,b13,c1,c2,c3, sLE, sRe)
 	COMMENT COND3 : twist of sLE of Switches is not equal to zero 
	COMMENT COND4 : twist of sRe of Switches is not equal to zero  
    COMMENT COND5 : flag which indicate first demo mode  Bitwise and Demo_active bitwise and of result of COND6
	COMMENT COND6 : splash timer is greater than or equal to SPLASH_TIME
    COMMENT  Equivalence class 62,63,64,65,66,67,68,69,195,86,108,100,110,72,115,87,88,89,111,90,91,92,93,94,95,96,97,191,193,196
    COMMENT  MCDC Covered   FFXXXXXXXXXXXXXXXXXTXX 
	COMMENT  </TD> 

    ELEMENT
    
    
        COMMENT INPUT SECTION:
		
			VAR Pg_cnt,        init = 1,       ev = init
			
            VAR Ap_poly_graph[0].polygon_shape,        init = FG_RED_X_SHAPE,       ev = init
            
            --data read from Parameters[0]
            VAR Port1_label_count,                              init = 2,                               ev = init
    
            --type of the parameter
            VAR Parameters[1].type,                             init = BNR,                             ev = init
    
            --data read from Parameters[2]
            VAR PTU_parameters[1].reading,                      init = NCD,                             ev = init
    
            --data read from Parameters[2]
            VAR PTU_parameters_numbox[1].reading,               init = NCD,                             ev = init
    
            --type of the parameter
            VAR Parameters[2].type,                             init = BCD,                             ev = init
    
            --data read from Parameters[2]
            VAR PTU_parameters_numbox[2].reading,               init = NCD,                             ev = init
            
            --Counter value used to loop 
            VAR Bg_cnt,                                         init = 1,                               ev = init
			
			VAR Cg_cnt,                                         init = 1,               ev = init
			
            VAR Text_cnt,                                       init = 1,               ev = init
			
            VAR Tb_cnt,                                         init = 1,               ev = init
    
            --Counter value used to loop 
            VAR Nb_cnt,                                         init = 1,                               ev = init
    
            --Number limit
            VAR Ap_page1_bar_graphs[0].numLimit,                init = 1,                               ev = init   
    
            VAR Ap_page1_bar_graphs[0].psParam,                 init = &PTU_param,                      ev = init
    
            --value of the channel 
            VAR PTU_param.fread,                                init = 1,                               ev = init
    
            --limit value
            VAR Ap_page1_bar_graphs[0].limVal[0],               init = 1,                               ev = init   
    
            --limit value type
            VAR Ap_page1_bar_graphs[0].limValtype[0],           init = EQUAL,                           ev = init   
    
            --Color for different limits
            VAR Ap_page1_bar_graphs[0].limColor[0],             init = YELLOW,                          ev = init   
    
            --Color of the bargraph
            VAR Ap_page1_bar_graphs[0].ePenColor,               init = YELLOW,                          ev = init
    
            --Number limit
            VAR Page_num_boxes[0].numLimit,                     init = 1,                               ev = init               
    
            VAR Page_num_boxes[0].psParam,                      init = &PTU_param1,                     ev = init
    
            --Parameter r driving the number
            VAR PTU_param1.fread,                               init = 1,                               ev = init
    
            --limit value
            VAR Page_num_boxes[0].limVal[0],                    init = 1,                               ev = init   
    
            --limit value type
            VAR Page_num_boxes[0].limValtype[0],                init = EQUAL,                           ev = init
    
            --Color for different limits
            VAR Page_num_boxes[0].limColor[0],                  init = YELLOW,                          ev = init   
    
            --Pen color
            VAR Page_num_boxes[0].ePenColor,                    init = YELLOW,                          ev = init

            --Holds Button 1 press flag for splash screen
            VAR Splash_b1_press,                                init = 1,                               ev = init
            
            --Left Twist selection
            VAR Switches.sLE.twist,                             init = 1,                               ev = init
            
            --Right Twist selection
            VAR Switches.sRE.twist,                             init = 1,                               ev = init   
        
            --Button 1
            VAR Switches.b1,                                    init = 0,                               ev = init
    
            --Button 2
            VAR Switches.b2,                                    init = 0,                               ev = init
    
            --Button 3
            VAR Switches.b3,                                    init = 0,                               ev = init
    
            --Button 4
            VAR Switches.b4,                                    init = 0,                               ev = init
    
            --Button 5
            VAR Switches.b5,                                    init = 0,                               ev = init
    
            --Button 6
            VAR Switches.b6,                                    init = 0,                               ev = init
    
            --Button 7
            VAR Switches.b7,                                    init = 0,                               ev = init
    
            --Button 8
            VAR Switches.b8,                                    init = 1,                               ev = init
			
			--Button 10
            VAR Switches.b10,            						init = 0,       					ev = init
			
			--Button 11
            VAR Switches.b11,           					 	init = 0,       					ev = init
			
			--Button 12
            VAR Switches.b12,            						init = 0,       					ev = init
			
			--Button 13
            VAR Switches.b13,            						init = 0,       					ev = init 
    
            --Button c1
            VAR Switches.c1,                                    init = 0,                               ev = init
    
            --Button c2
            VAR Switches.c2,                                    init = 0,                               ev = init
    
            --Button c3
            VAR Switches.c3,                                    init = 0,                               ev = init
    
            --Left Encoder selection
            VAR Switches.sLE.pressed,                           init = 0,                               ev = init
    
            --Right Encoder selection
            VAR Switches.sRE.pressed,                           init = 0,                               ev = init
            
            --NV RAM CRC fail check
            VAR Nv_crc_fail,                                    init = FALSE,                           ev = init
            
            --Position value of Display Unit 
            VAR Du_position,                                    init = 0,                               ev = init
            
            --Counter used to loop
            VAR Rd_cnt,                                         init = 1,                               ev = init
            
            --flag of page setting
            VAR Acdt_flag,                                      init = TRUE,                            ev = init

            --X-Axis of the Bottom Center of Bar graph
            VAR Page_settings.acdt_axis.u16_x,                  init = 50,                              ev = init

            --Y-Axis of the Bottom Center of Bar graph
            VAR Page_settings.acdt_axis.u16_y,                  init = 50,                              ev = init
            
            --VAR Bitmap_crc_check_bit[1],					init = TRUE,				ev = init
    
            VAR Page_settings.page_num,                         init = 0,                               ev = init
			
			VAR Page_parameter_error,        init = TRUE,       ev = init
            
        COMMENT OUTPUT SECTION:
                                                            
              --Status of channel
             VAR PTU_param.stat,                                init = PARAM_OK,                    ev = init  
             
             --Parameter stat driving the number
             VAR PTU_param1.stat,                               init = PARAM_OK,                    ev = init
             
                                                            
        COMMENT INPUT/OUTPUT SECTION:
                                                            
            --Indicates the value of splash screen display
            VAR Splash_done,                                    init = ZERO,                                ev = 1
            
            --Page number
            VAR Page_num,                                       init = EPAGE0,                              ev = init
        
                
            --X coordinate of text box center
            VAR Prim_cool_down_pop_up_box.s16ULX,               init = 0,                                   ev = 5
            
            --Y coordinate of text box center
            VAR Prim_cool_down_pop_up_box.s16ULY,               init = 0,                                   ev = 5
            
        -- Stub Calls:
                                                                
        SIMUL
            
            --reads the message from RTD 
            STUB RTDGetParam(1)
            STUB RTDGetParam(1)
    
            --reads the discrete word
            STUB RTDGetParamDdw(2)

            --allows the calling task to delay for a specific number of clock ticks
            STUB  OsTimeDly(250)
            
            --To load the background
            STUB ForegroundLoadBackground((T_UINT16 *)(BG_IMAGE_ADDR+(Page_num*PAGE_BITMAP_NUM_OF_SECTOR*SECTOR_SIZE)))
            
            --extracts page wise settings from PDI
            STUB PdiPageDataInit(Page_num)  
           
            --configures the timer initializations and all text boxes 
            STUB MenuInit()
            
            --disables the text box
            STUB TextBoxOff(&Prim_cool_down_pop_up_box)
            
     
        END SIMUL
            
        -- Calling the Unit Under Test 
        #GrappApp();
            
    END ELEMENT
    
END TEST -- TEST 24

TEST 25
FAMILY nominal

    COMMENT  Test Description
    COMMENT  <TD>   
    COMMENT  [hdudispfgrapp-GrappApp-DB-LLR-003]
    COMMENT  The function 'GrappApp' does the following when Splash done is zero and COND is true.
 	COMMENT - Set splash done to 1.
	COMMENT - Set Page_num to EPAGE1,Cool_down_select to FALSE , Fuel_flow_select to FUEL_FLOW_ON and
	COMMENT   Active_eiu to EIU1 if Nv_crc_fail is equal to TRUE AND Du_position is equal to ONE
 	COMMENT - Call functions OffsideSwitchScreen with Page_num as parameter,OffsideCoolTimer with Cool_down_select as parameter
 	COMMENT  and GlobalSettingsSetEIU with  Active_eiu as parameter when Du_position is equal to ONE
 	COMMENT - Call functions OsTimeDly with parameter 250 and ForegroundLoadBackground with sum of BG_IMAGE_ADDR and product 
 	COMMENT of Page_num, PAGE_BITMAP_NUM_OF_SECTOR and SECTOR_SIZE as its parameter.
 	COMMENT - Call the function PdiPageDataInit with Page_num as its parameter
 	COMMENT - Call the function RoundDialsInit with Ap_page0_dials as its parameter
 	COMMENT - Call the function NumberBoxInit with Page_num_boxes as its parameter
 	COMMENT - Call the function BarGraphInit with Ap_page1_bar_graphs as its parameter
 	COMMENT - Call function TextBoxOff with reference to Prim_cool_down_pop_up_box as parameter.
 	COMMENT - Set s16ULX of Prim_cool_down_pop_up_box to u16_x of acdt_axis of Page_settings minus COOLDOWN_AXIS_CALIBRATION,
 	COMMENT Set s16ULY of Prim_cool_down_pop_up_box to u16_y of acdt_axis of Page_settings minus COOLDOWN_AXIS_CALIBRATION when
 	COMMENT Acdt_flag is equal to TRUE.
 	COMMENT - Call function MenuInit.
 	COMMENT 3.Return from the function.
 	COMMENT
 	COMMENT COND : COND1 OR COND2 OR COND3 OR COND4 OR COND5
 	COMMENT
 	COMMENT COND1 : Splash timer is greater than or equal to SPLASH_TIME  
 	COMMENT COND2 : Splash_b1_press is zero AND any one of the buttons from Switches is pressed(i.e b1,b2,b3,b4,b5,b6,b7,b8,b10,b11,b12,b13,c1,c2,c3, sLE, sRe)
 	COMMENT COND3 : twist of sLE of Switches is not equal to zero 
	COMMENT COND4 : twist of sRe of Switches is not equal to zero  
    COMMENT COND5 : flag which indicate first demo mode  Bitwise and Demo_active bitwise and of result of COND6
	COMMENT COND6 : splash timer is greater than or equal to SPLASH_TIME
    COMMENT  Equivalence class 62,63,64,65,66,67,68,69,195,86,108,100,110,72,115,87,88,89,111,90,91,92,93,94,95,96,97,191,193,196,213,214,215,216
    COMMENT  MCDC Covered   FFXXXXXXXXXXXXXXXXXTXX 
	COMMENT  </TD> 
    
    ELEMENT
    
    
        COMMENT INPUT SECTION:
		
			VAR Pg_cnt,        init = 1,       ev = init
			
            VAR Ap_poly_graph[0].polygon_shape,        init = FG_RED_X_SHAPE,       ev = init
            
            --data read from Parameters[0]
            VAR Port1_label_count,                              init = 2,                               ev = init
    
            --type of the parameter
            VAR Parameters[1].type,                             init = BNR,                             ev = init
    
            --data read from Parameters[2]
            VAR PTU_parameters[1].reading,                      init = NCD,                             ev = init
    
            --data read from Parameters[2]
            VAR PTU_parameters_numbox[1].reading,               init = NCD,                             ev = init
    
            --type of the parameter
            VAR Parameters[2].type,                             init = BCD,                             ev = init
    
            --data read from Parameters[2]
            VAR PTU_parameters_numbox[2].reading,               init = NCD,                             ev = init
            
            --Counter value used to loop 
            VAR Bg_cnt,                                         init = 1,                               ev = init
			
			VAR Cg_cnt,                                         init = 1,               ev = init
			
            VAR Text_cnt,                                       init = 1,               ev = init
			
            VAR Tb_cnt,                                         init = 1,               ev = init
    
            --Counter value used to loop 
            VAR Nb_cnt,                                         init = 1,                               ev = init
    
            --Number limit
            VAR Ap_page1_bar_graphs[0].numLimit,                init = 1,                               ev = init   
    
            VAR Ap_page1_bar_graphs[0].psParam,                 init = &PTU_param,                      ev = init
    
            --value of the channel 
            VAR PTU_param.fread,                                init = 1,                               ev = init
    
            --limit value
            VAR Ap_page1_bar_graphs[0].limVal[0],               init = 1,                               ev = init   
    
            --limit value type
            VAR Ap_page1_bar_graphs[0].limValtype[0],           init = EQUAL,                           ev = init   
    
            --Color for different limits
            VAR Ap_page1_bar_graphs[0].limColor[0],             init = YELLOW,                          ev = init   
    
            --Color of the bargraph
            VAR Ap_page1_bar_graphs[0].ePenColor,               init = YELLOW,                          ev = init
    
            --Number limit
            VAR Page_num_boxes[0].numLimit,                     init = 1,                               ev = init               
    
            VAR Page_num_boxes[0].psParam,                      init = &PTU_param1,                     ev = init
    
            --Parameter r driving the number
            VAR PTU_param1.fread,                               init = 1,                               ev = init
    
            --limit value
            VAR Page_num_boxes[0].limVal[0],                    init = 1,                               ev = init   
    
            --limit value type
            VAR Page_num_boxes[0].limValtype[0],                init = EQUAL,                           ev = init
    
            --Color for different limits
            VAR Page_num_boxes[0].limColor[0],                  init = YELLOW,                          ev = init   
    
            --Pen color
            VAR Page_num_boxes[0].ePenColor,                    init = YELLOW,                          ev = init

            --Holds Button 1 press flag for splash screen
            VAR Splash_b1_press,                                init = 1,                               ev = init
            
            --Left Twist selection
            VAR Switches.sLE.twist,                             init = 1,                               ev = init
            
            --Right Twist selection
            VAR Switches.sRE.twist,                             init = 1,                               ev = init   
        
            --Button 1
            VAR Switches.b1,                                    init = 0,                               ev = init
    
            --Button 2
            VAR Switches.b2,                                    init = 0,                               ev = init
    
            --Button 3
            VAR Switches.b3,                                    init = 0,                               ev = init
    
            --Button 4
            VAR Switches.b4,                                    init = 0,                               ev = init
    
            --Button 5
            VAR Switches.b5,                                    init = 0,                               ev = init
    
            --Button 6
            VAR Switches.b6,                                    init = 0,                               ev = init
    
            --Button 7
            VAR Switches.b7,                                    init = 0,                               ev = init
    
            --Button 8
            VAR Switches.b8,                                    init = 0,                               ev = init
			
			--Button 10
            VAR Switches.b10,            						init = 0,       					ev = init
			
			--Button 11
            VAR Switches.b11,           					 	init = 0,       					ev = init
			
			--Button 12
            VAR Switches.b12,            						init = 0,       					ev = init
			
			--Button 13
            VAR Switches.b13,            						init = 0,       					ev = init 
    
            --Button c1
            VAR Switches.c1,                                    init = 1,                               ev = init
    
            --Button c2
            VAR Switches.c2,                                    init = 0,                               ev = init
    
            --Button c3
            VAR Switches.c3,                                    init = 0,                               ev = init
    
            --Left Encoder selection
            VAR Switches.sLE.pressed,                           init = 0,                               ev = init
    
            --Right Encoder selection
            VAR Switches.sRE.pressed,                           init = 0,                               ev = init
            
            --NV RAM CRC fail check
            VAR Nv_crc_fail,                                    init = FALSE,                           ev = init
            
            --Position value of Display Unit 
            VAR Du_position,                                    init = 0,                               ev = init
            
            --Counter used to loop
            VAR Rd_cnt,                                         init = 1,                               ev = init
            
            --flag of page setting
            VAR Acdt_flag,                                      init = TRUE,                            ev = init

            --X-Axis of the Bottom Center of Bar graph
            VAR Page_settings.acdt_axis.u16_x,                  init = 50,                              ev = init

            --Y-Axis of the Bottom Center of Bar graph
            VAR Page_settings.acdt_axis.u16_y,                  init = 50,                              ev = init
            
    
            VAR Page_settings.page_num,                         init = 0,                               ev = init
			
			--VAR Bitmap_crc_check_bit[1],					init = TRUE,				ev = init
            
        COMMENT OUTPUT SECTION:
                                                            
              --Status of channel
             VAR PTU_param.stat,                                init = PARAM_OK,                   	 	ev = init  
             
             --Parameter stat driving the number
             VAR PTU_param1.stat,                               init = PARAM_OK,                    	ev = init
			 
			VAR Page_parameter_error,        init = FALSE,       ev = init			 
             
                                                            
        COMMENT INPUT/OUTPUT SECTION:
                                                            
            --Indicates the value of splash screen display
            VAR Splash_done,                                    init = ZERO,                            ev = 1
            
            --Page number
            VAR Page_num,                                       init = EPAGE0,                          ev = init
        
                
            --X coordinate of text box center
            VAR Prim_cool_down_pop_up_box.s16ULX,               init = 0,                               ev = 5
            
            --Y coordinate of text box center
            VAR Prim_cool_down_pop_up_box.s16ULY,               init = 0,                               ev = 5
            
        -- Stub Calls:
                                                                
        SIMUL
            
            --reads the message from RTD 
            STUB RTDGetParam(1)
            STUB RTDGetParam(1)
    
            --reads the discrete word
            STUB RTDGetParamDdw(2)

            --allows the calling task to delay for a specific number of clock ticks
            STUB  OsTimeDly(250)
            
            --To load the background
            STUB ForegroundLoadBackground((T_UINT16 *)(BG_IMAGE_ADDR+(Page_num*PAGE_BITMAP_NUM_OF_SECTOR*SECTOR_SIZE)))
            
            --extracts page wise settings from PDI
            STUB PdiPageDataInit(Page_num)
            
            --Allocate a single round dial
            STUB RoundDialAllocat(Ap_page0_dials)   
            
            --Allocates number box structure
            STUB NumboxAllocat(Page_num_boxes)
            
            --Allocates number box structure
            STUB BargraphAllocat(Ap_page1_bar_graphs)
			
			--Allocates Carrot Graph structure
			STUB CarrotGraphAllocat (Ap_page2_carrot)
				
			--Allocates Text structure
			STUB TextAllocatPdi(&Page_txt[0].ppsOwner,Page_txt[0].u16X0,Page_txt[0].u16Y0,Page_txt[0].eTXAlign,Page_txt[0].eTXFont,Page_txt[0].ePenColor,Page_txt[0].eTXV,Page_txt[0].eTXFlash)
				
			--Allocates Text Box structure
			STUB TextBoxPdiAllocate (Ap_page_tbs)
            
            --configures the timer initializations and all text boxes 
            STUB MenuInit()
            
            --disables the text box
            STUB TextBoxOff(&Prim_cool_down_pop_up_box)
            
        
     
        END SIMUL
            
        -- Calling the Unit Under Test 
        #GrappApp();
            
    END ELEMENT
    
END TEST -- TEST 25

TEST 26
FAMILY nominal

    COMMENT  Test Description
    COMMENT  <TD>   
    COMMENT  [hdudispfgrapp-GrappApp-DB-LLR-003]
    COMMENT  The function 'GrappApp' does the following when Splash done is zero and COND is true.
 	COMMENT - Set splash done to 1.
	COMMENT - Set Page_num to EPAGE1,Cool_down_select to FALSE , Fuel_flow_select to FUEL_FLOW_ON and
	COMMENT   Active_eiu to EIU1 if Nv_crc_fail is equal to TRUE AND Du_position is equal to ONE
 	COMMENT - Call functions OffsideSwitchScreen with Page_num as parameter,OffsideCoolTimer with Cool_down_select as parameter
 	COMMENT  and GlobalSettingsSetEIU with  Active_eiu as parameter when Du_position is equal to ONE
 	COMMENT - Call functions OsTimeDly with parameter 250 and ForegroundLoadBackground with sum of BG_IMAGE_ADDR and product 
 	COMMENT of Page_num, PAGE_BITMAP_NUM_OF_SECTOR and SECTOR_SIZE as its parameter.
 	COMMENT - Call the function PdiPageDataInit with Page_num as its parameter
 	COMMENT - Call the function RoundDialsInit with Ap_page0_dials as its parameter
 	COMMENT - Call the function NumberBoxInit with Page_num_boxes as its parameter
 	COMMENT - Call the function BarGraphInit with Ap_page1_bar_graphs as its parameter
 	COMMENT - Call function TextBoxOff with reference to Prim_cool_down_pop_up_box as parameter.
 	COMMENT - Set s16ULX of Prim_cool_down_pop_up_box to u16_x of acdt_axis of Page_settings minus COOLDOWN_AXIS_CALIBRATION,
 	COMMENT Set s16ULY of Prim_cool_down_pop_up_box to u16_y of acdt_axis of Page_settings minus COOLDOWN_AXIS_CALIBRATION when
 	COMMENT Acdt_flag is equal to TRUE.
 	COMMENT - Call function MenuInit.
 	COMMENT 3.Return from the function.
 	COMMENT
 	COMMENT COND : COND1 OR COND2 OR COND3 OR COND4 OR COND5
 	COMMENT
 	COMMENT COND1 : Splash timer is greater than or equal to SPLASH_TIME  
 	COMMENT COND2 : Splash_b1_press is zero AND any one of the buttons from Switches is pressed(i.e b1,b2,b3,b4,b5,b6,b7,b8,b10,b11,b12,b13,c1,c2,c3, sLE, sRe)
 	COMMENT COND3 : twist of sLE of Switches is not equal to zero 
	COMMENT COND4 : twist of sRe of Switches is not equal to zero  
    COMMENT COND5 : flag which indicate first demo mode  Bitwise and Demo_active bitwise and of result of COND6
	COMMENT COND6 : splash timer is greater than or equal to SPLASH_TIME
    COMMENT  Equivalence class 62,63,64,65,66,67,68,69,195,86,108,100,110,72,115,87,88,89,111,90,91,92,93,94,95,96,97,191,193,196,213,214,215,216
    COMMENT  MCDC Covered   FFXXXXXXXXXXXXXXXXXTXX 
	COMMENT  </TD> 
    
    ELEMENT
    
    
        COMMENT INPUT SECTION:
		
			VAR Pg_cnt,        init = 1,       ev = init
			
            VAR Ap_poly_graph[0].polygon_shape,        init = FG_RED_X_SHAPE,       ev = init
            
            --data read from Parameters[0]
            VAR Port1_label_count,                              init = 2,                   ev = init
    
            --type of the parameter
            VAR Parameters[1].type,                             init = BNR,                 ev = init
    
            --data read from Parameters[2]
            VAR PTU_parameters[1].reading,                      init = NCD,                 ev = init
    
            --data read from Parameters[2]
            VAR PTU_parameters_numbox[1].reading,               init = NCD,                 ev = init
    
            --type of the parameter
            VAR Parameters[2].type,                             init = BCD,                 ev = init
    
            --data read from Parameters[2]
            VAR PTU_parameters_numbox[2].reading,               init = NCD,                 ev = init
            
            --Counter value used to loop 
            VAR Bg_cnt,                                         init = 1,                   ev = init
			
			VAR Cg_cnt,                                         init = 1,               ev = init
			
            VAR Text_cnt,                                       init = 1,               ev = init
			
            VAR Tb_cnt,                                         init = 1,               ev = init
    
            --Counter value used to loop 
            VAR Nb_cnt,                                         init = 1,                   ev = init
    
            --Number limit
            VAR Ap_page1_bar_graphs[0].numLimit,                init = 1,                   ev = init   
    
            VAR Ap_page1_bar_graphs[0].psParam,                 init = &PTU_param,          ev = init
    
            --value of the channel 
            VAR PTU_param.fread,                                init = 1,                   ev = init
    
            --limit value
            VAR Ap_page1_bar_graphs[0].limVal[0],               init = 1,                   ev = init   
    
            --limit value type
            VAR Ap_page1_bar_graphs[0].limValtype[0],           init = EQUAL,               ev = init   
    
            --Color for different limits
            VAR Ap_page1_bar_graphs[0].limColor[0],             init = YELLOW,              ev = init   
    
            --Color of the bargraph
            VAR Ap_page1_bar_graphs[0].ePenColor,               init = YELLOW,              ev = init
    
            --Number limit
            VAR Page_num_boxes[0].numLimit,                     init = 1,                   ev = init               
    
            VAR Page_num_boxes[0].psParam,                      init = &PTU_param1,         ev = init
    
            --Parameter r driving the number
            VAR PTU_param1.fread,                               init = 1,                   ev = init
    
            --limit value
            VAR Page_num_boxes[0].limVal[0],                    init = 1,                   ev = init   
    
            --limit value type
            VAR Page_num_boxes[0].limValtype[0],                init = EQUAL,               ev = init
    
            --Color for different limits
            VAR Page_num_boxes[0].limColor[0],                  init = YELLOW,              ev = init   
    
            --Pen color
            VAR Page_num_boxes[0].ePenColor,                    init = YELLOW,              ev = init

            --Holds Button 1 press flag for splash screen
            VAR Splash_b1_press,                                init = 1,                   ev = init
            
            --Left Twist selection
            VAR Switches.sLE.twist,                             init = 1,                   ev = init
            
            --Right Twist selection
            VAR Switches.sRE.twist,                             init = 1,                   ev = init   
        
            --Button 1
            VAR Switches.b1,                                    init = 0,                   ev = init
    
            --Button 2
            VAR Switches.b2,                                    init = 0,                   ev = init
    
            --Button 3
            VAR Switches.b3,                                    init = 0,                   ev = init
    
            --Button 4
            VAR Switches.b4,                                    init = 0,                   ev = init
    
            --Button 5
            VAR Switches.b5,                                    init = 0,                   ev = init
    
            --Button 6
            VAR Switches.b6,                                    init = 0,                   ev = init
    
            --Button 7
            VAR Switches.b7,                                    init = 0,                   ev = init
    
            --Button 8
            VAR Switches.b8,                                    init = 0,                   ev = init
			
			--Button 10
            VAR Switches.b10,            						init = 0,       					ev = init
			
			--Button 11
            VAR Switches.b11,           					 	init = 0,       					ev = init
			
			--Button 12
            VAR Switches.b12,            						init = 0,       					ev = init
			
			--Button 13
            VAR Switches.b13,            						init = 0,       					ev = init 
    
            --Button c1
            VAR Switches.c1,                                    init = 0,                   ev = init
    
            --Button c2
            VAR Switches.c2,                                    init = 1,                   ev = init
    
            --Button c3
            VAR Switches.c3,                                    init = 0,                   ev = init
    
            --Left Encoder selection
            VAR Switches.sLE.pressed,                           init = 0,                   ev = init
    
            --Right Encoder selection
            VAR Switches.sRE.pressed,                           init = 0,                   ev = init
            
            --NV RAM CRC fail check
            VAR Nv_crc_fail,                                    init = FALSE,               ev = init
            
            --Position value of Display Unit 
            VAR Du_position,                                    init = 0,                   ev = init
            
            --Counter used to loop
            VAR Rd_cnt,                                         init = 1,                   ev = init
            
            --flag of page setting
            VAR Acdt_flag,                                      init = TRUE,                ev = init
            
            --X-Axis of the Bottom Center of Bar graph
            VAR Page_settings.acdt_axis.u16_x,                  init = 50,                  ev = init
            
            --Y-Axis of the Bottom Center of Bar graph
            VAR Page_settings.acdt_axis.u16_y,                  init = 50,                  ev = init
            
            VAR Page_settings.page_num,                         init = 0,                   ev = init
			
			--VAR Bitmap_crc_check_bit[1],					init = TRUE,				ev = init
			
			VAR Page_parameter_error,        init = FALSE,       ev = init
            
        COMMENT OUTPUT SECTION:
                                                            
              --Status of channel
             VAR PTU_param.stat,                                init = PARAM_OK,            ev = init  
             
             --Parameter stat driving the number
             VAR PTU_param1.stat,                               init =PARAM_OK,             ev = init
             
                                                            
        COMMENT INPUT/OUTPUT SECTION:
                                                            
            --Indicates the value of splash screen display
            VAR Splash_done,                                    init = ZERO,                ev = 1
            
            --Page number
            VAR Page_num,                                       init = EPAGE0,              ev = init
        
                
            --X coordinate of text box center
            VAR Prim_cool_down_pop_up_box.s16ULX,               init = 0,                   ev = 5
            
            --Y coordinate of text box center
            VAR Prim_cool_down_pop_up_box.s16ULY,               init = 0,                   ev = 5
            
        -- Stub Calls:
                                                                
        SIMUL
            
            --reads the message from RTD 
            STUB RTDGetParam(1)
            STUB RTDGetParam(1)
    
            --reads the discrete word
            STUB RTDGetParamDdw(2)

            -- allows the calling task to delay for a specific number of clock ticks
            STUB  OsTimeDly(250)
            
            --To load the background
            STUB ForegroundLoadBackground((T_UINT16 *)(BG_IMAGE_ADDR+(Page_num*PAGE_BITMAP_NUM_OF_SECTOR*SECTOR_SIZE)))
            
            --extracts page wise settings from PDI
            STUB PdiPageDataInit(Page_num)
            
            --Allocate a single round dial
            STUB RoundDialAllocat(Ap_page0_dials)   
            
            --Allocates number box structure
            STUB NumboxAllocat(Page_num_boxes)
            
            --Allocates number box structure
            STUB BargraphAllocat(Ap_page1_bar_graphs)
			
			--Allocates Carrot Graph structure
			STUB CarrotGraphAllocat (Ap_page2_carrot)
				
			--Allocates Text structure
			STUB TextAllocatPdi(&Page_txt[0].ppsOwner,Page_txt[0].u16X0,Page_txt[0].u16Y0,Page_txt[0].eTXAlign,Page_txt[0].eTXFont,Page_txt[0].ePenColor,Page_txt[0].eTXV,Page_txt[0].eTXFlash)
				
			--Allocates Text Box structure
			STUB TextBoxPdiAllocate (Ap_page_tbs)
            
            --configures the timer initializations and all text boxes 
            STUB MenuInit()
            
            --disables the text box
            STUB TextBoxOff(&Prim_cool_down_pop_up_box)
            
            
     
        END SIMUL
        
        -- Calling the Unit Under Test 
        #GrappApp();
            
    END ELEMENT
    
END TEST -- TEST 26

TEST 27
FAMILY nominal

    COMMENT  Test Description
    COMMENT  <TD>   
    COMMENT  [hdudispfgrapp-GrappApp-DB-LLR-003]
    COMMENT  The function 'GrappApp' does the following when Splash done is zero and COND is true.
 	COMMENT - Set splash done to 1.
	COMMENT - Set Page_num to EPAGE1,Cool_down_select to FALSE , Fuel_flow_select to FUEL_FLOW_ON and
	COMMENT   Active_eiu to EIU1 if Nv_crc_fail is equal to TRUE AND Du_position is equal to ONE
 	COMMENT - Call functions OffsideSwitchScreen with Page_num as parameter,OffsideCoolTimer with Cool_down_select as parameter
 	COMMENT  and GlobalSettingsSetEIU with  Active_eiu as parameter when Du_position is equal to ONE
 	COMMENT - Call functions OsTimeDly with parameter 250 and ForegroundLoadBackground with sum of BG_IMAGE_ADDR and product 
 	COMMENT of Page_num, PAGE_BITMAP_NUM_OF_SECTOR and SECTOR_SIZE as its parameter.
 	COMMENT - Call the function PdiPageDataInit with Page_num as its parameter
 	COMMENT - Call the function RoundDialsInit with Ap_page0_dials as its parameter
 	COMMENT - Call the function NumberBoxInit with Page_num_boxes as its parameter
 	COMMENT - Call the function BarGraphInit with Ap_page1_bar_graphs as its parameter
 	COMMENT - Call function TextBoxOff with reference to Prim_cool_down_pop_up_box as parameter.
 	COMMENT - Set s16ULX of Prim_cool_down_pop_up_box to u16_x of acdt_axis of Page_settings minus COOLDOWN_AXIS_CALIBRATION,
 	COMMENT Set s16ULY of Prim_cool_down_pop_up_box to u16_y of acdt_axis of Page_settings minus COOLDOWN_AXIS_CALIBRATION when
 	COMMENT Acdt_flag is equal to TRUE.
 	COMMENT - Call function MenuInit.
 	COMMENT 3.Return from the function.
 	COMMENT
 	COMMENT COND : COND1 OR COND2 OR COND3 OR COND4 OR COND5
 	COMMENT
 	COMMENT COND1 : Splash timer is greater than or equal to SPLASH_TIME  
 	COMMENT COND2 : Splash_b1_press is zero AND any one of the buttons from Switches is pressed(i.e b1,b2,b3,b4,b5,b6,b7,b8,b10,b11,b12,b13,c1,c2,c3, sLE, sRe)
 	COMMENT COND3 : twist of sLE of Switches is not equal to zero 
	COMMENT COND4 : twist of sRe of Switches is not equal to zero  
    COMMENT COND5 : flag which indicate first demo mode  Bitwise and Demo_active bitwise and of result of COND6
	COMMENT COND6 : splash timer is greater than or equal to SPLASH_TIME
    COMMENT  Equivalence class 62,63,64,65,66,67,68,69,195,86,108,100,110,72,115,87,88,89,111,90,91,92,93,94,95,96,97,191,193,196,213,214,215,216
    COMMENT  MCDC Covered   FFXXXXXXXXXXXXXXXXXTXX 
	COMMENT  </TD> 

    ELEMENT
    
    
        COMMENT INPUT SECTION:
		
			VAR Pg_cnt,        init = 1,       ev = init
			
            VAR Ap_poly_graph[0].polygon_shape,        init = FG_RED_X_SHAPE,       ev = init
            
            --data read from Parameters[0]
            VAR Port1_label_count,                              init = 2,                   ev = init
    
            --type of the parameter
            VAR Parameters[1].type,                             init = BNR,                 ev = init
    
            --data read from Parameters[2]
            VAR PTU_parameters[1].reading,                      init = NCD,                 ev = init
    
            --data read from Parameters[2]
            VAR PTU_parameters_numbox[1].reading,               init = NCD,                 ev = init
    
            --type of the parameter
            VAR Parameters[2].type,                             init = BCD,                 ev = init
    
            --data read from Parameters[2]
            VAR PTU_parameters_numbox[2].reading,               init = NCD,                 ev = init
            
            --Counter value used to loop 
            VAR Bg_cnt,                                         init = 1,                   ev = init
			
			VAR Cg_cnt,                                         init = 1,               ev = init
			
            VAR Text_cnt,                                       init = 1,               ev = init
			
            VAR Tb_cnt,                                         init = 1,               ev = init
    
            --Counter value used to loop 
            VAR Nb_cnt,                                         init = 1,                   ev = init
    
            --Number limit
            VAR Ap_page1_bar_graphs[0].numLimit,                init = 1,                   ev = init   
    
            VAR Ap_page1_bar_graphs[0].psParam,                 init = &PTU_param,          ev = init
    
            --value of the channel 
            VAR PTU_param.fread,                                init = 1,                   ev = init
    
            --limit value
            VAR Ap_page1_bar_graphs[0].limVal[0],               init = 1,                   ev = init   
    
            --limit value type
            VAR Ap_page1_bar_graphs[0].limValtype[0],           init = EQUAL,               ev = init   
    
            --Color for different limits
            VAR Ap_page1_bar_graphs[0].limColor[0],             init = YELLOW,              ev = init   
    
            --Color of the bargraph
            VAR Ap_page1_bar_graphs[0].ePenColor,               init = YELLOW,              ev = init
    
            --Number limit
            VAR Page_num_boxes[0].numLimit,                     init = 1,                   ev = init               
    
            VAR Page_num_boxes[0].psParam,                      init = &PTU_param1,         ev = init
    
            --Parameter r driving the number
            VAR PTU_param1.fread,                               init = 1,                   ev = init
    
            --limit value
            VAR Page_num_boxes[0].limVal[0],                    init = 1,                   ev = init   
    
            --limit value type
            VAR Page_num_boxes[0].limValtype[0],                init = EQUAL,               ev = init
    
            --Color for different limits
            VAR Page_num_boxes[0].limColor[0],                  init = YELLOW,              ev = init   
    
            --Pen color
            VAR Page_num_boxes[0].ePenColor,                    init = YELLOW,              ev = init

            --Holds Button 1 press flag for splash screen
            VAR Splash_b1_press,                                init = 1,                   ev = init
            
            --Left Twist selection
            VAR Switches.sLE.twist,                             init = 1,                   ev = init
            
            --Right Twist selection
            VAR Switches.sRE.twist,                             init = 1,                   ev = init   
        
            --Button 1
            VAR Switches.b1,                                    init = 0,                   ev = init
    
            --Button 2
            VAR Switches.b2,                                    init = 0,                   ev = init
    
            --Button 3
            VAR Switches.b3,                                    init = 0,                   ev = init
    
            --Button 4
            VAR Switches.b4,                                    init = 0,                   ev = init
    
            --Button 5
            VAR Switches.b5,                                    init = 0,                   ev = init
    
            --Button 6
            VAR Switches.b6,                                    init = 0,                   ev = init
    
            --Button 7
            VAR Switches.b7,                                    init = 0,                   ev = init
    
            --Button 8
            VAR Switches.b8,                                    init = 0,                   ev = init
			
			--Button 10
            VAR Switches.b10,            						init = 0,       					ev = init
			
			--Button 11
            VAR Switches.b11,           					 	init = 0,       					ev = init
			
			--Button 12
            VAR Switches.b12,            						init = 0,       					ev = init
			
			--Button 13
            VAR Switches.b13,            						init = 0,       					ev = init 
    
            --Button c1
            VAR Switches.c1,                                    init = 0,                   ev = init
    
            --Button c2
            VAR Switches.c2,                                    init = 0,                   ev = init
    
            --Button c3
            VAR Switches.c3,                                    init = 1,                   ev = init
    
            --Left Encoder selection
            VAR Switches.sLE.pressed,                           init = 0,                   ev = init
    
            --Right Encoder selection
            VAR Switches.sRE.pressed,                           init = 0,                   ev = init
            
            --NV RAM CRC fail check
            VAR Nv_crc_fail,                                    init = FALSE,               ev = init
            
            --Position value of Display Unit 
            VAR Du_position,                                    init = 0,                   ev = init
            
            --Counter used to loop
            VAR Rd_cnt,                                         init = 1,                   ev = init
            
            --flag of page setting
            VAR Acdt_flag,                                      init = TRUE,                ev = init
            
            --X-Axis of the Bottom Center of Bar graph
            VAR Page_settings.acdt_axis.u16_x,                  init = 50,                  ev = init
            
            --Y-Axis of the Bottom Center of Bar graph
            VAR Page_settings.acdt_axis.u16_y,                  init = 50,                  ev = init
                
            VAR Page_settings.page_num,                         init = 0,                   ev = init
			
			--VAR Bitmap_crc_check_bit[1],					init = TRUE,				ev = init
			
			VAR Page_parameter_error,        init = FALSE,       ev = init
            
        COMMENT OUTPUT SECTION:
                                                            
              --Status of channel
             VAR PTU_param.stat,                                init = PARAM_OK,            ev = init  
             
             --Parameter stat driving the number
             VAR PTU_param1.stat,                               init = PARAM_OK,            ev = init
             
                                                            
        COMMENT INPUT/OUTPUT SECTION:
                                                            
            --Indicates the value of splash screen display
            VAR Splash_done,                                    init = ZERO,                ev = 1
            
            --Page number
            VAR Page_num,                                       init = EPAGE0,              ev = init
            
            --X coordinate of text box center.
            VAR Prim_cool_down_pop_up_box.s16ULX,               init = 0,                   ev = 5
            
            --Y coordinate of text box center.
            VAR Prim_cool_down_pop_up_box.s16ULY,               init = 0,                   ev = 5
            
        -- Stub Calls:
                                                                
        SIMUL
            
            --reads the message from RTD 
            STUB RTDGetParam(1)
            STUB RTDGetParam(1)
    
            --reads the discrete word
            STUB RTDGetParamDdw(2)

            --allows the calling task to delay for a specific number of clock ticks
            STUB  OsTimeDly(250)
            
            --To load the background
            STUB ForegroundLoadBackground((T_UINT16 *)(BG_IMAGE_ADDR+(Page_num*PAGE_BITMAP_NUM_OF_SECTOR*SECTOR_SIZE)))
            
            --extracts page wise settings from PDI
            STUB PdiPageDataInit(Page_num)
            
            --Allocate a single round dial
            STUB RoundDialAllocat(Ap_page0_dials)   
            
            --Allocates number box structure
            STUB NumboxAllocat(Page_num_boxes)
            
            --Allocates number box structure
            STUB BargraphAllocat(Ap_page1_bar_graphs)
			
			--Allocates Carrot Graph structure
			STUB CarrotGraphAllocat (Ap_page2_carrot)
				
			--Allocates Text structure
			STUB TextAllocatPdi(&Page_txt[0].ppsOwner,Page_txt[0].u16X0,Page_txt[0].u16Y0,Page_txt[0].eTXAlign,Page_txt[0].eTXFont,Page_txt[0].ePenColor,Page_txt[0].eTXV,Page_txt[0].eTXFlash)
				
			--Allocates Text Box structure
			STUB TextBoxPdiAllocate (Ap_page_tbs)
            
            --configures the timer initializations and all text boxes 
            STUB MenuInit()
            
            --disables the text box
            STUB TextBoxOff(&Prim_cool_down_pop_up_box)
            
            
            
     
        END SIMUL
        
        -- Calling the Unit Under Test 
        #GrappApp();
            
    END ELEMENT
    
END TEST -- TEST 27

TEST 28
FAMILY nominal

    COMMENT  Test Description
    COMMENT  <TD>   
    COMMENT  [hdudispfgrapp-GrappApp-DB-LLR-003]
    COMMENT  The function 'GrappApp' does the following when Splash done is zero and COND is true.
 	COMMENT - Set splash done to 1.
	COMMENT - Set Page_num to EPAGE1,Cool_down_select to FALSE , Fuel_flow_select to FUEL_FLOW_ON and
	COMMENT   Active_eiu to EIU1 if Nv_crc_fail is equal to TRUE AND Du_position is equal to ONE
 	COMMENT - Call functions OffsideSwitchScreen with Page_num as parameter,OffsideCoolTimer with Cool_down_select as parameter
 	COMMENT  and GlobalSettingsSetEIU with  Active_eiu as parameter when Du_position is equal to ONE
 	COMMENT - Call functions OsTimeDly with parameter 250 and ForegroundLoadBackground with sum of BG_IMAGE_ADDR and product 
 	COMMENT of Page_num, PAGE_BITMAP_NUM_OF_SECTOR and SECTOR_SIZE as its parameter.
 	COMMENT - Call the function PdiPageDataInit with Page_num as its parameter
 	COMMENT - Call the function RoundDialsInit with Ap_page0_dials as its parameter
 	COMMENT - Call the function NumberBoxInit with Page_num_boxes as its parameter
 	COMMENT - Call the function BarGraphInit with Ap_page1_bar_graphs as its parameter
 	COMMENT - Call function TextBoxOff with reference to Prim_cool_down_pop_up_box as parameter.
 	COMMENT - Set s16ULX of Prim_cool_down_pop_up_box to u16_x of acdt_axis of Page_settings minus COOLDOWN_AXIS_CALIBRATION,
 	COMMENT Set s16ULY of Prim_cool_down_pop_up_box to u16_y of acdt_axis of Page_settings minus COOLDOWN_AXIS_CALIBRATION when
 	COMMENT Acdt_flag is equal to TRUE.
 	COMMENT - Call function MenuInit.
 	COMMENT 3.Return from the function.
 	COMMENT
 	COMMENT COND : COND1 OR COND2 OR COND3 OR COND4 OR COND5
 	COMMENT
 	COMMENT COND1 : Splash timer is greater than or equal to SPLASH_TIME  
 	COMMENT COND2 : Splash_b1_press is zero AND any one of the buttons from Switches is pressed(i.e b1,b2,b3,b4,b5,b6,b7,b8,b10,b11,b12,b13,c1,c2,c3, sLE, sRe)
 	COMMENT COND3 : twist of sLE of Switches is not equal to zero 
	COMMENT COND4 : twist of sRe of Switches is not equal to zero  
    COMMENT COND5 : flag which indicate first demo mode  Bitwise and Demo_active bitwise and of result of COND6
	COMMENT COND6 : splash timer is greater than or equal to SPLASH_TIME
    COMMENT  Equivalence class 62,63,64,65,66,67,68,69,195,86,108,100,110,72,115,87,88,89,111,90,91,92,93,94,95,96,97,191,193,196,213,214,215,216
    COMMENT  MCDC Covered   FFXXXXXXXXXXXXXXXXXTXX 
	COMMENT  </TD> 
    
    ELEMENT
    
    
        COMMENT INPUT SECTION:
		
			VAR Pg_cnt,        init = 1,       ev = init
			
            VAR Ap_poly_graph[0].polygon_shape,        init = FG_RED_X_SHAPE,       ev = init
            
            --data read from Parameters[0]
            VAR Port1_label_count,                              init = 2,                   ev = init
    
            --type of the parameter
            VAR Parameters[1].type,                             init = BNR,                 ev = init
    
            --data read from Parameters[2]
            VAR PTU_parameters[1].reading,                      init = NCD,                 ev = init
    
            --data read from Parameters[2]
            VAR PTU_parameters_numbox[1].reading,               init = NCD,                 ev = init
    
            --type of the parameter
            VAR Parameters[2].type,                             init = BCD,                 ev = init
    
            --data read from Parameters[2]
            VAR PTU_parameters_numbox[2].reading,               init = NCD,                 ev = init
            
            --Counter value used to loop 
            VAR Bg_cnt,                                         init = 1,                   ev = init
			
			VAR Cg_cnt,                                         init = 1,               ev = init
			
            VAR Text_cnt,                                       init = 1,               ev = init
			
            VAR Tb_cnt,                                         init = 1,               ev = init
    
            --Counter value used to loop 
            VAR Nb_cnt,                                         init = 1,                   ev = init
    
            --Number limit
            VAR Ap_page1_bar_graphs[0].numLimit,                init = 1,                   ev = init   
    
            VAR Ap_page1_bar_graphs[0].psParam,                 init = &PTU_param,          ev = init
    
            --value of the channel 
            VAR PTU_param.fread,                                init = 1,                   ev = init
    
            --limit value
            VAR Ap_page1_bar_graphs[0].limVal[0],               init = 1,                   ev = init   
    
            --limit value type
            VAR Ap_page1_bar_graphs[0].limValtype[0],           init = EQUAL,               ev = init   
    
            --Color for different limits
            VAR Ap_page1_bar_graphs[0].limColor[0],             init = YELLOW,              ev = init   
    
            --Color of the bargraph
            VAR Ap_page1_bar_graphs[0].ePenColor,               init = YELLOW,              ev = init
    
            --Number limit
            VAR Page_num_boxes[0].numLimit,                     init = 1,                   ev = init               
    
            VAR Page_num_boxes[0].psParam,                      init = &PTU_param1,         ev = init
    
            --Parameter r driving the number
            VAR PTU_param1.fread,                               init = 1,                   ev = init
    
            --limit value
            VAR Page_num_boxes[0].limVal[0],                    init = 1,                   ev = init   
    
            --limit value type
            VAR Page_num_boxes[0].limValtype[0],                init = EQUAL,               ev = init
    
            --Color for different limits
            VAR Page_num_boxes[0].limColor[0],                  init = YELLOW,              ev = init   
    
            --Pen color
            VAR Page_num_boxes[0].ePenColor,                    init = YELLOW,              ev = init

            --Holds Button 1 press flag for splash screen
            VAR Splash_b1_press,                                init = 1,                   ev = init
            
            --Left Twist selection
            VAR Switches.sLE.twist,                             init = 1,                   ev = init
            
            --Right Twist selection
            VAR Switches.sRE.twist,                             init = 1,                   ev = init   
        
            --Button 1
            VAR Switches.b1,                                    init = 0,                   ev = init
    
            --Button 2
            VAR Switches.b2,                                    init = 0,                   ev = init
    
            --Button 3
            VAR Switches.b3,                                    init = 0,                   ev = init
    
            --Button 4
            VAR Switches.b4,                                    init = 0,                   ev = init
    
            --Button 5
            VAR Switches.b5,                                    init = 0,                   ev = init
    
            --Button 6
            VAR Switches.b6,                                    init = 0,                   ev = init
    
            --Button 7
            VAR Switches.b7,                                    init = 0,                   ev = init
    
            --Button 8
            VAR Switches.b8,                                    init = 0,                   ev = init
			
			--Button 10
            VAR Switches.b10,            						init = 0,       					ev = init
			
			--Button 11
            VAR Switches.b11,           					 	init = 0,       					ev = init
			
			--Button 12
            VAR Switches.b12,            						init = 0,       					ev = init
			
			--Button 13
            VAR Switches.b13,            						init = 0,       					ev = init 
    
            --Button c1
            VAR Switches.c1,                                    init = 0,                   ev = init
    
            --Button c2
            VAR Switches.c2,                                    init = 0,                   ev = init
    
            --Button c3
            VAR Switches.c3,                                    init = 0,                   ev = init
    
            --Left Encoder selection
            VAR Switches.sLE.pressed,                           init = 1,                   ev = init
    
            --Right Encoder selection
            VAR Switches.sRE.pressed,                           init = 0,                   ev = init
            
            --NV RAM CRC fail check
            VAR Nv_crc_fail,                                    init = FALSE,               ev = init
            
            --Position value of Display Unit 
            VAR Du_position,                                    init = 0,                   ev = init
            
            --Counter used to loop
            VAR Rd_cnt,                                         init = 1,                   ev = init
            
            --flag of page setting
            VAR Acdt_flag,                                      init = TRUE,                ev = init
            
            --X-Axis of the Bottom Center of Bar graph
            VAR Page_settings.acdt_axis.u16_x,                  init = 50,                  ev = init
            
            --Y-Axis of the Bottom Center of Bar graph
            VAR Page_settings.acdt_axis.u16_y,                  init = 50,                  ev = init
            
            --VAR Bitmap_crc_check_bit[1],					init = TRUE,				ev = init
    
            VAR Page_settings.page_num,                         init = 0,                   ev = init
			
			VAR Page_parameter_error,        init = FALSE,       ev = init
            
        COMMENT OUTPUT SECTION:
                                                            
              --Status of channel
             VAR PTU_param.stat,                                init = PARAM_OK,            ev = init  
             
             --Parameter stat driving the number
             VAR PTU_param1.stat,                               init = PARAM_OK,            ev = init
             
                                                            
        COMMENT INPUT/OUTPUT SECTION:
                                                            
            --Indicates the value of splash screen display
            VAR Splash_done,                                    init = ZERO,                ev = 1
            
            --Page number
            VAR Page_num,                                       init = EPAGE0,              ev = init
        
                
            --X coordinate of text box center
            VAR Prim_cool_down_pop_up_box.s16ULX,               init = 0,                   ev = 5
            
            --Y coordinate of text box center
            VAR Prim_cool_down_pop_up_box.s16ULY,               init = 0,                   ev = 5
            
        -- Stub Calls:
                                                                    
        SIMUL
                
            --reads the message from RTD 
            STUB RTDGetParam(1)
            STUB RTDGetParam(1)
    
            --reads the discrete word
            STUB RTDGetParamDdw(2)

            --allows the calling task to delay for a specific number of clock ticks
            STUB  OsTimeDly(250)
            
            --To load the background
            STUB ForegroundLoadBackground((T_UINT16 *)(BG_IMAGE_ADDR+(Page_num*PAGE_BITMAP_NUM_OF_SECTOR*SECTOR_SIZE)))
            
            --extracts page wise settings from PDI
            STUB PdiPageDataInit(Page_num)
            
            --Allocate a single round dial
            STUB RoundDialAllocat(Ap_page0_dials)   
            
            --Allocates number box structure
            STUB NumboxAllocat(Page_num_boxes)
            
            --Allocates number box structure
            STUB BargraphAllocat(Ap_page1_bar_graphs)
			
			--Allocates Carrot Graph structure
			STUB CarrotGraphAllocat (Ap_page2_carrot)
				
			--Allocates Text structure
			STUB TextAllocatPdi(&Page_txt[0].ppsOwner,Page_txt[0].u16X0,Page_txt[0].u16Y0,Page_txt[0].eTXAlign,Page_txt[0].eTXFont,Page_txt[0].ePenColor,Page_txt[0].eTXV,Page_txt[0].eTXFlash)
				
			--Allocates Text Box structure
			STUB TextBoxPdiAllocate (Ap_page_tbs)
            
            --configures the timer initializations and all text boxes 
            STUB MenuInit()
            
            --disables the text box
            STUB TextBoxOff(&Prim_cool_down_pop_up_box)
            
        END SIMUL
            
        -- Calling the Unit Under Test 
        #GrappApp();
            
    END ELEMENT
    
END TEST -- TEST 28

TEST 29
FAMILY nominal

    COMMENT  Test Description
    COMMENT  <TD>   
    COMMENT  [hdudispfgrapp-GrappApp-DB-LLR-003]
    COMMENT  The function 'GrappApp' does the following when Splash done is zero and COND is true.
 	COMMENT - Set splash done to 1.
	COMMENT - Set Page_num to EPAGE1,Cool_down_select to FALSE , Fuel_flow_select to FUEL_FLOW_ON and
	COMMENT   Active_eiu to EIU1 if Nv_crc_fail is equal to TRUE AND Du_position is equal to ONE
 	COMMENT - Call functions OffsideSwitchScreen with Page_num as parameter,OffsideCoolTimer with Cool_down_select as parameter
 	COMMENT  and GlobalSettingsSetEIU with  Active_eiu as parameter when Du_position is equal to ONE
 	COMMENT - Call functions OsTimeDly with parameter 250 and ForegroundLoadBackground with sum of BG_IMAGE_ADDR and product 
 	COMMENT of Page_num, PAGE_BITMAP_NUM_OF_SECTOR and SECTOR_SIZE as its parameter.
 	COMMENT - Call the function PdiPageDataInit with Page_num as its parameter
 	COMMENT - Call the function RoundDialsInit with Ap_page0_dials as its parameter
 	COMMENT - Call the function NumberBoxInit with Page_num_boxes as its parameter
 	COMMENT - Call the function BarGraphInit with Ap_page1_bar_graphs as its parameter
 	COMMENT - Call function TextBoxOff with reference to Prim_cool_down_pop_up_box as parameter.
 	COMMENT - Set s16ULX of Prim_cool_down_pop_up_box to u16_x of acdt_axis of Page_settings minus COOLDOWN_AXIS_CALIBRATION,
 	COMMENT Set s16ULY of Prim_cool_down_pop_up_box to u16_y of acdt_axis of Page_settings minus COOLDOWN_AXIS_CALIBRATION when
 	COMMENT Acdt_flag is equal to TRUE.
 	COMMENT - Call function MenuInit.
 	COMMENT 3.Return from the function.
 	COMMENT
 	COMMENT COND : COND1 OR COND2 OR COND3 OR COND4 OR COND5
 	COMMENT
 	COMMENT COND1 : Splash timer is greater than or equal to SPLASH_TIME  
 	COMMENT COND2 : Splash_b1_press is zero AND any one of the buttons from Switches is pressed(i.e b1,b2,b3,b4,b5,b6,b7,b8,b10,b11,b12,b13,c1,c2,c3, sLE, sRe)
 	COMMENT COND3 : twist of sLE of Switches is not equal to zero 
	COMMENT COND4 : twist of sRe of Switches is not equal to zero  
    COMMENT COND5 : flag which indicate first demo mode  Bitwise and Demo_active bitwise and of result of COND6
	COMMENT COND6 : splash timer is greater than or equal to SPLASH_TIME
    COMMENT  Equivalence class 62,63,64,65,66,67,68,69,195,86,108,100,110,72,115,87,88,89,111,90,91,92,93,94,95,96,97,191,193,196,213,214,215,216
    COMMENT  MCDC Covered   FFXXXXXXXXXXXXXXXXXTXX 
	COMMENT  </TD> 
    
    ELEMENT
    
    
        COMMENT INPUT SECTION:
		
			VAR Pg_cnt,        init = 1,       ev = init
			
            VAR Ap_poly_graph[0].polygon_shape,        init = FG_RED_X_SHAPE,       ev = init
            
            --data read from Parameters[0]
            VAR Port1_label_count,                              init = 2,                   ev = init
    
            --type of the parameter
            VAR Parameters[1].type,                             init = BNR,                 ev = init
    
            --data read from Parameters[2]
            VAR PTU_parameters[1].reading,                      init = NCD,                 ev = init
    
            --data read from Parameters[2]
            VAR PTU_parameters_numbox[1].reading,               init = NCD,                 ev = init
    
            --type of the parameter
            VAR Parameters[2].type,                             init = BCD,                 ev = init
    
            --data read from Parameters[2]
            VAR PTU_parameters_numbox[2].reading,               init = NCD,                 ev = init
            
            --Counter value used to loop 
            VAR Bg_cnt,                                         init = 1,                   ev = init
			
			VAR Cg_cnt,                                         init = 1,               ev = init
			
            VAR Text_cnt,                                       init = 1,               ev = init
			
            VAR Tb_cnt,                                         init = 1,               ev = init
    
            --Counter value used to loop 
            VAR Nb_cnt,                                         init = 1,                   ev = init
    
            --Number limit
            VAR Ap_page1_bar_graphs[0].numLimit,                init = 1,                   ev = init   
    
            VAR Ap_page1_bar_graphs[0].psParam,                 init = &PTU_param,          ev = init
    
            --value of the channel 
            VAR PTU_param.fread,                                init = 1,                   ev = init
    
            --limit value
            VAR Ap_page1_bar_graphs[0].limVal[0],               init = 1,                   ev = init   
    
            --limit value type
            VAR Ap_page1_bar_graphs[0].limValtype[0],           init = EQUAL,               ev = init   
    
            --Color for different limits
            VAR Ap_page1_bar_graphs[0].limColor[0],             init = YELLOW,              ev = init   
    
            --Color of the bargraph
            VAR Ap_page1_bar_graphs[0].ePenColor,               init = YELLOW,              ev = init
    
            --Number limit
            VAR Page_num_boxes[0].numLimit,                     init = 1,                   ev = init               
    
            VAR Page_num_boxes[0].psParam,                      init = &PTU_param1,         ev = init
    
            --Parameter r driving the number
            VAR PTU_param1.fread,                               init = 1,                   ev = init
    
            --limit value
            VAR Page_num_boxes[0].limVal[0],                    init = 1,                   ev = init   
    
            --limit value type
            VAR Page_num_boxes[0].limValtype[0],                init = EQUAL,               ev = init
    
            --Color for different limits
            VAR Page_num_boxes[0].limColor[0],                  init = YELLOW,              ev = init   
    
            --Pen color
            VAR Page_num_boxes[0].ePenColor,                    init = YELLOW,              ev = init

            --Holds Button 1 press flag for splash screen
            VAR Splash_b1_press,                                init = 1,                   ev = init
            
            --Left Twist selection
            VAR Switches.sLE.twist,                             init = 1,                   ev = init
            
            --Right Twist selection
            VAR Switches.sRE.twist,                             init = 1,                   ev = init   
        
            --Button 1
            VAR Switches.b1,                                    init = 0,                   ev = init
    
            --Button 2
            VAR Switches.b2,                                    init = 0,                   ev = init
    
            --Button 3
            VAR Switches.b3,                                    init = 0,                   ev = init
    
            --Button 4
            VAR Switches.b4,                                    init = 0,                   ev = init
    
            --Button 5
            VAR Switches.b5,                                    init = 0,                   ev = init
    
            --Button 6
            VAR Switches.b6,                                    init = 0,                   ev = init
    
            --Button 7
            VAR Switches.b7,                                    init = 0,                   ev = init
    
            --Button 8
            VAR Switches.b8,                                    init = 0,                   ev = init
			
			--Button 10
            VAR Switches.b10,            						init = 0,       					ev = init
			
			--Button 11
            VAR Switches.b11,           					 	init = 0,       					ev = init
			
			--Button 12
            VAR Switches.b12,            						init = 0,       					ev = init
			
			--Button 13
            VAR Switches.b13,            						init = 0,       					ev = init 
    
            --Button c1
            VAR Switches.c1,                                    init = 0,                   ev = init
    
            --Button c2
            VAR Switches.c2,                                    init = 0,                   ev = init
    
            --Button c3
            VAR Switches.c3,                                    init = 0,                   ev = init
    
            --Left Encoder selection
            VAR Switches.sLE.pressed,                           init = 0,                   ev = init
    
            --Right Encoder selection
            VAR Switches.sRE.pressed,                           init = 1,                   ev = init
            
            --NV RAM CRC fail check
            VAR Nv_crc_fail,                                    init = FALSE,               ev = init
            
            --Position value of Display Unit 
            VAR Du_position,                                    init = 0,                   ev = init
            
            --Counter used to loop
            VAR Rd_cnt,                                         init = 1,                   ev = init
            
            --flag of page setting
            VAR Acdt_flag,                                      init = TRUE,                ev = init
            
            --X-Axis of the Bottom Center of Bar graph
            VAR Page_settings.acdt_axis.u16_x,                  init = 50,                  ev = init
            
            --Y-Axis of the Bottom Center of Bar graph
            VAR Page_settings.acdt_axis.u16_y,                  init = 50,                  ev = init
			
            --VAR Bitmap_crc_check_bit[1],					init = TRUE,				ev = init
			
			VAR Page_parameter_error,        init = FALSE,       ev = init
            
    
            VAR Page_settings.page_num,                         init = 0,                   ev = init
            
        COMMENT OUTPUT SECTION:
                                                            
              --Status of channel
             VAR PTU_param.stat,                                init = PARAM_OK,            ev = init  
             
             --Parameter stat driving the number
             VAR PTU_param1.stat,                               init = PARAM_OK,            ev = init
             
                                                            
        COMMENT INPUT/OUTPUT SECTION:
                                                            
            --
            VAR Splash_done,                                    init = ZERO,                ev = 1
            
            --Page number
            VAR Page_num,                                       init = EPAGE0,              ev = init
        
                
            --X coordinate of text box center
            VAR Prim_cool_down_pop_up_box.s16ULX,               init = 0,                   ev = 5
            
            --Y coordinate of text box center
            VAR Prim_cool_down_pop_up_box.s16ULY,               init = 0,                   ev = 5
            
        -- Stub Calls:
                                                                    
        SIMUL
                
            --reads the message from RTD 
            STUB RTDGetParam(1)
            STUB RTDGetParam(1)
    
            --reads the discrete word
            STUB RTDGetParamDdw(2)

            --allows the calling task to delay for a specific number of clock ticks
            STUB  OsTimeDly(250)
            
            --To load the background
            STUB ForegroundLoadBackground((T_UINT16 *)(BG_IMAGE_ADDR+(Page_num*PAGE_BITMAP_NUM_OF_SECTOR*SECTOR_SIZE)))
            
            --extracts page wise settings from PDI
            STUB PdiPageDataInit(Page_num)
            
            --Allocate a single round dial
            STUB RoundDialAllocat(Ap_page0_dials)   
            
            --Allocates number box structure
            STUB NumboxAllocat(Page_num_boxes)
            
            --Allocates number box structure
            STUB BargraphAllocat(Ap_page1_bar_graphs)
			
			--Allocates Carrot Graph structure
			STUB CarrotGraphAllocat (Ap_page2_carrot)
				
			--Allocates Text structure
			STUB TextAllocatPdi(&Page_txt[0].ppsOwner,Page_txt[0].u16X0,Page_txt[0].u16Y0,Page_txt[0].eTXAlign,Page_txt[0].eTXFont,Page_txt[0].ePenColor,Page_txt[0].eTXV,Page_txt[0].eTXFlash)
				
			--Allocates Text Box structure
			STUB TextBoxPdiAllocate (Ap_page_tbs)
            
            --configures the timer initializations and all text boxes 
            STUB MenuInit()
            
            --disables the text box
            STUB TextBoxOff(&Prim_cool_down_pop_up_box)
            
        END SIMUL
            
        -- Calling the Unit Under Test 
        #GrappApp();
            
    END ELEMENT
    
END TEST -- TEST 29

TEST 30
FAMILY nominal

    COMMENT  Test Description
    COMMENT  <TD>   
    COMMENT  [hdudispfgrapp-GrappApp-DB-LLR-003]
    COMMENT  The function 'GrappApp' does the following when Splash done is zero and COND is true.
 	COMMENT - Set splash done to 1.
	COMMENT - Set Page_num to EPAGE1,Cool_down_select to FALSE , Fuel_flow_select to FUEL_FLOW_ON and
	COMMENT   Active_eiu to EIU1 if Nv_crc_fail is equal to TRUE AND Du_position is equal to ONE
 	COMMENT - Call functions OffsideSwitchScreen with Page_num as parameter,OffsideCoolTimer with Cool_down_select as parameter
 	COMMENT  and GlobalSettingsSetEIU with  Active_eiu as parameter when Du_position is equal to ONE
 	COMMENT - Call functions OsTimeDly with parameter 250 and ForegroundLoadBackground with sum of BG_IMAGE_ADDR and product 
 	COMMENT of Page_num, PAGE_BITMAP_NUM_OF_SECTOR and SECTOR_SIZE as its parameter.
 	COMMENT - Call the function PdiPageDataInit with Page_num as its parameter
 	COMMENT - Call the function RoundDialsInit with Ap_page0_dials as its parameter
 	COMMENT - Call the function NumberBoxInit with Page_num_boxes as its parameter
 	COMMENT - Call the function BarGraphInit with Ap_page1_bar_graphs as its parameter
 	COMMENT - Call function TextBoxOff with reference to Prim_cool_down_pop_up_box as parameter.
 	COMMENT - Set s16ULX of Prim_cool_down_pop_up_box to u16_x of acdt_axis of Page_settings minus COOLDOWN_AXIS_CALIBRATION,
 	COMMENT Set s16ULY of Prim_cool_down_pop_up_box to u16_y of acdt_axis of Page_settings minus COOLDOWN_AXIS_CALIBRATION when
 	COMMENT Acdt_flag is equal to TRUE.
 	COMMENT - Call function MenuInit.
 	COMMENT 3.Return from the function.
 	COMMENT
 	COMMENT COND : COND1 OR COND2 OR COND3 OR COND4 OR COND5
 	COMMENT
 	COMMENT COND1 : Splash timer is greater than or equal to SPLASH_TIME  
 	COMMENT COND2 : Splash_b1_press is zero AND any one of the buttons from Switches is pressed(i.e b1,b2,b3,b4,b5,b6,b7,b8,b10,b11,b12,b13,c1,c2,c3, sLE, sRe)
 	COMMENT COND3 : twist of sLE of Switches is not equal to zero 
	COMMENT COND4 : twist of sRe of Switches is not equal to zero  
    COMMENT COND5 : flag which indicate first demo mode  Bitwise and Demo_active bitwise and of result of COND6
	COMMENT COND6 : splash timer is greater than or equal to SPLASH_TIME
    COMMENT  Equivalence class 62,63,64,65,66,67,68,69,195,86,108,100,110,72,115,87,88,89,111,90,91,92,93,94,95,96,97,191,193,196,213,214,215,216
    COMMENT  MCDC Covered  FFXXXXXXXXXXXXXXXXXFTX
    COMMENT  </TD>
    
    ELEMENT
    
    
        COMMENT INPUT SECTION:
		
			VAR Pg_cnt,        init = 1,       ev = init
			
            VAR Ap_poly_graph[0].polygon_shape,        init = FG_RED_X_SHAPE,       ev = init
            
            --data read from Parameters[0]
            VAR Port1_label_count,                              init = 2,                   ev = init
    
            --type of the parameter
            VAR Parameters[1].type,                             init = BNR,                 ev = init
    
            --data read from Parameters[2]
            VAR PTU_parameters[1].reading,                      init = NCD,                 ev = init
    
            --data read from Parameters[2]
            VAR PTU_parameters_numbox[1].reading,               init = NCD,                 ev = init
    
            --type of the parameter
            VAR Parameters[2].type,                             init = BCD,                 ev = init
    
            --data read from Parameters[2]
            VAR PTU_parameters_numbox[2].reading,               init = NCD,                 ev = init
            
            --Counter value used to loop 
            VAR Bg_cnt,                                         init = 1,                   ev = init
			
			VAR Cg_cnt,                                         init = 1,               ev = init
			
            VAR Text_cnt,                                       init = 1,               ev = init
			
            VAR Tb_cnt,                                         init = 1,               ev = init
    
            --Counter value used to loop 
            VAR Nb_cnt,                                         init = 1,                   ev = init
    
            --Number limit
            VAR Ap_page1_bar_graphs[0].numLimit,                init = 1,                   ev = init   
    
            VAR Ap_page1_bar_graphs[0].psParam,                 init = &PTU_param,          ev = init
    
            --value of the channel 
            VAR PTU_param.fread,                                init = 1,                   ev = init
    
            --limit value
            VAR Ap_page1_bar_graphs[0].limVal[0],               init = 1,                   ev = init   
    
            --limit value type
            VAR Ap_page1_bar_graphs[0].limValtype[0],           init = EQUAL,               ev = init   
    
            --Color for different limits
            VAR Ap_page1_bar_graphs[0].limColor[0],             init = YELLOW,              ev = init   
    
            --Color of the bargraph
            VAR Ap_page1_bar_graphs[0].ePenColor,               init = YELLOW,              ev = init
    
            --Number limit
            VAR Page_num_boxes[0].numLimit,                     init = 1,                   ev = init               
    
            VAR Page_num_boxes[0].psParam,                      init = &PTU_param1,         ev = init
    
            --Parameter r driving the number
            VAR PTU_param1.fread,                               init = 1,                   ev = init
    
            --limit value
            VAR Page_num_boxes[0].limVal[0],                    init = 1,                   ev = init   
    
            --limit value type
            VAR Page_num_boxes[0].limValtype[0],                init = EQUAL,               ev = init
    
            --Color for different limits
            VAR Page_num_boxes[0].limColor[0],                  init = YELLOW,              ev = init   
    
            --Pen color
            VAR Page_num_boxes[0].ePenColor,                    init = YELLOW,              ev = init

            --Holds Button 1 press flag for splash screen
            VAR Splash_b1_press,                                init = 1,                   ev = init
            
            --Left Twist selection
            VAR Switches.sLE.twist,                             init = 0,                   ev = init
            
            --Right Twist selection
            VAR Switches.sRE.twist,                             init = 1,                   ev = init   
        
            --Button 1
            VAR Switches.b1,                                    init = 0,                   ev = init
    
            --Button 2
            VAR Switches.b2,                                    init = 0,                   ev = init
    
            --Button 3
            VAR Switches.b3,                                    init = 0,                   ev = init
    
            --Button 4
            VAR Switches.b4,                                    init = 0,                   ev = init
    
            --Button 5
            VAR Switches.b5,                                    init = 0,                   ev = init
    
            --Button 6
            VAR Switches.b6,                                    init = 0,                   ev = init
    
            --Button 7
            VAR Switches.b7,                                    init = 0,                   ev = init
    
            --Button 8
            VAR Switches.b8,                                    init = 0,                   ev = init
			
			--Button 10
            VAR Switches.b10,            						init = 0,       					ev = init
			
			--Button 11
            VAR Switches.b11,           					 	init = 0,       					ev = init
			
			--Button 12
            VAR Switches.b12,            						init = 0,       					ev = init
			
			--Button 13
            VAR Switches.b13,            						init = 0,       					ev = init 
    
            --Button c1
            VAR Switches.c1,                                    init = 0,                   ev = init
    
            --Button c2
            VAR Switches.c2,                                    init = 0,                   ev = init
    
            --Button c3
            VAR Switches.c3,                                    init = 0,                   ev = init
    
            --Left Encoder selection
            VAR Switches.sLE.pressed,                           init = 0,                   ev = init
    
            --Right Encoder selection
            VAR Switches.sRE.pressed,                           init = 0,                   ev = init
            
            --NV RAM CRC fail check
            VAR Nv_crc_fail,                                    init = FALSE,               ev = init
            
            --Position value of Display Unit 
            VAR Du_position,                                    init = 0,                   ev = init
            
            --Counter used to loop
            VAR Rd_cnt,                                         init = 1,                   ev = init
            
            --flag of page setting
            VAR Acdt_flag,                                      init = TRUE,                ev = init
            
            --X-Axis of the Bottom Center of Bar graph
            VAR Page_settings.acdt_axis.u16_x,                  init = 50,                  ev = init
            
            --Y-Axis of the Bottom Center of Bar graph
            VAR Page_settings.acdt_axis.u16_y,                  init = 50,                  ev = init
            
            
    
            VAR Page_settings.page_num,                         init = 0,                   ev = init
			
			--VAR Bitmap_crc_check_bit[1],					init = TRUE,				ev = init
			
			VAR Page_parameter_error,        init = FALSE,       ev = init
            
        COMMENT OUTPUT SECTION:
                                                            
              --Status of channel
             VAR PTU_param.stat,                                init = PARAM_OK,            ev = init  
             
             --Parameter stat driving the number
             VAR PTU_param1.stat,                               init = PARAM_OK,            ev = init
             
                                                            
        COMMENT INPUT/OUTPUT SECTION:
                                                            
            --Indicates the value of splash screen display
            VAR Splash_done,                                    init = ZERO,                ev = 1
            
            --Page number
            VAR Page_num,                                       init = EPAGE0,              ev = init
        
                
            --X coordinate of text box center
            VAR Prim_cool_down_pop_up_box.s16ULX,               init = 0,                   ev = 5
            
            --Y coordinate of text box center
            VAR Prim_cool_down_pop_up_box.s16ULY,               init = 0,                   ev = 5
            
        -- Stub Calls:
                                                                    
        SIMUL
                
            --reads the message from RTD 
            STUB RTDGetParam(1)
            STUB RTDGetParam(1)
    
            --reads the discrete word
            STUB RTDGetParamDdw(2)

            --allows the calling task to delay for a specific number of clock ticks
            STUB  OsTimeDly(250)
            
            --To load the background
            STUB ForegroundLoadBackground((T_UINT16 *)(BG_IMAGE_ADDR+(Page_num*PAGE_BITMAP_NUM_OF_SECTOR*SECTOR_SIZE)))
            
            --extracts page wise settings from PDI
            STUB PdiPageDataInit(Page_num)
            
            --Allocate a single round dial
            STUB RoundDialAllocat(Ap_page0_dials)   
            
            --Allocates number box structure
            STUB NumboxAllocat(Page_num_boxes)
            
            --Allocates number box structure
            STUB BargraphAllocat(Ap_page1_bar_graphs)
			
			--Allocates Carrot Graph structure
			STUB CarrotGraphAllocat (Ap_page2_carrot)
				
			--Allocates Text structure
			STUB TextAllocatPdi(&Page_txt[0].ppsOwner,Page_txt[0].u16X0,Page_txt[0].u16Y0,Page_txt[0].eTXAlign,Page_txt[0].eTXFont,Page_txt[0].ePenColor,Page_txt[0].eTXV,Page_txt[0].eTXFlash)
				
			--Allocates Text Box structure
			STUB TextBoxPdiAllocate (Ap_page_tbs)
            
            --configures the timer initializations and all text boxes 
            STUB MenuInit()
            
            --disables the text box
            STUB TextBoxOff(&Prim_cool_down_pop_up_box)
            
        END SIMUL
            
        -- Calling the Unit Under Test 
        #GrappApp();
            
    END ELEMENT
    
END TEST -- TEST 30

TEST 31
FAMILY nominal

    COMMENT  Test Description
    COMMENT  <TD>   
    COMMENT  [hdudispfgrapp-GrappApp-DB-LLR-003]
    COMMENT  The function 'GrappApp' does the following when Splash done is zero and COND is true.
 	COMMENT - Set splash done to 1.
	COMMENT - Set Page_num to EPAGE1,Cool_down_select to FALSE , Fuel_flow_select to FUEL_FLOW_ON and
	COMMENT   Active_eiu to EIU1 if Nv_crc_fail is equal to TRUE AND Du_position is equal to ONE
 	COMMENT - Call functions OffsideSwitchScreen with Page_num as parameter,OffsideCoolTimer with Cool_down_select as parameter
 	COMMENT  and GlobalSettingsSetEIU with  Active_eiu as parameter when Du_position is equal to ONE
 	COMMENT - Call functions OsTimeDly with parameter 250 and ForegroundLoadBackground with sum of BG_IMAGE_ADDR and product 
 	COMMENT of Page_num, PAGE_BITMAP_NUM_OF_SECTOR and SECTOR_SIZE as its parameter.
 	COMMENT - Call the function PdiPageDataInit with Page_num as its parameter
 	COMMENT - Call the function RoundDialsInit with Ap_page0_dials as its parameter
 	COMMENT - Call the function NumberBoxInit with Page_num_boxes as its parameter
 	COMMENT - Call the function BarGraphInit with Ap_page1_bar_graphs as its parameter
 	COMMENT - Call function TextBoxOff with reference to Prim_cool_down_pop_up_box as parameter.
 	COMMENT - Set s16ULX of Prim_cool_down_pop_up_box to u16_x of acdt_axis of Page_settings minus COOLDOWN_AXIS_CALIBRATION,
 	COMMENT Set s16ULY of Prim_cool_down_pop_up_box to u16_y of acdt_axis of Page_settings minus COOLDOWN_AXIS_CALIBRATION when
 	COMMENT Acdt_flag is equal to TRUE.
 	COMMENT - Call function MenuInit.
 	COMMENT 3.Return from the function.
 	COMMENT
 	COMMENT COND : COND1 OR COND2 OR COND3 OR COND4 OR COND5
 	COMMENT
 	COMMENT COND1 : Splash timer is greater than or equal to SPLASH_TIME  
 	COMMENT COND2 : Splash_b1_press is zero AND any one of the buttons from Switches is pressed(i.e b1,b2,b3,b4,b5,b6,b7,b8,b10,b11,b12,b13,c1,c2,c3, sLE, sRe)
 	COMMENT COND3 : twist of sLE of Switches is not equal to zero 
	COMMENT COND4 : twist of sRe of Switches is not equal to zero  
    COMMENT COND5 : flag which indicate first demo mode  Bitwise and Demo_active bitwise and of result of COND6
	COMMENT COND6 : splash timer is greater than or equal to SPLASH_TIME
    COMMENT  Equivalence class 62,63,64,65,66,67,68,69,195,86,108,100,110,72,115,87,88,89,111,90,91,92,93,94,95,96,97,191,193,196,213,214,215,216
    COMMENT  MCDC Covered   FFXXXXXXXXXXXXXXXXXTXX
    COMMENT  </TD>
    
    ELEMENT
    
    
        COMMENT INPUT SECTION:
		
			VAR Pg_cnt,        init = 1,       ev = init
			
            VAR Ap_poly_graph[0].polygon_shape,        init = FG_RED_X_SHAPE,       ev = init
            
            --data read from Parameters[0]
            VAR Port1_label_count,                              init = 2,                   ev = init
    
            --type of the parameter
            VAR Parameters[1].type,                             init = BNR,                 ev = init
    
            --data read from Parameters[2]
            VAR PTU_parameters[1].reading,                      init = NCD,                 ev = init
    
            --data read from Parameters[2]
            VAR PTU_parameters_numbox[1].reading,               init = NCD,                 ev = init
    
            --type of the parameter
            VAR Parameters[2].type,                             init = BCD,                 ev = init
    
            --data read from Parameters[2]
            VAR PTU_parameters_numbox[2].reading,               init = NCD,                 ev = init
            
            --Counter value used to loop 
            VAR Bg_cnt,                                         init = 1,                   ev = init
			
			VAR Cg_cnt,                                         init = 1,               ev = init
			
            VAR Text_cnt,                                       init = 1,               ev = init
			
            VAR Tb_cnt,                                         init = 1,               ev = init
    
            --Counter value used to loop 
            VAR Nb_cnt,                                         init = 1,                   ev = init
    
            --Number limit
            VAR Ap_page1_bar_graphs[0].numLimit,                init = 1,                   ev = init   
    
            VAR Ap_page1_bar_graphs[0].psParam,                 init = &PTU_param,          ev = init
    
            --value of the channel 
            VAR PTU_param.fread,                                init = 1,                   ev = init
    
            --limit value
            VAR Ap_page1_bar_graphs[0].limVal[0],               init = 1,                   ev = init   
    
            --limit value type
            VAR Ap_page1_bar_graphs[0].limValtype[0],           init = EQUAL,               ev = init   
    
            --Color for different limits
            VAR Ap_page1_bar_graphs[0].limColor[0],             init = YELLOW,              ev = init   
    
            --Color of the bargraph
            VAR Ap_page1_bar_graphs[0].ePenColor,               init = YELLOW,              ev = init
    
            --Number limit
            VAR Page_num_boxes[0].numLimit,                     init = 1,                   ev = init               
    
            VAR Page_num_boxes[0].psParam,                      init = &PTU_param1,         ev = init
    
            --Parameter r driving the number
            VAR PTU_param1.fread,                               init = 1,                   ev = init
    
            --limit value
            VAR Page_num_boxes[0].limVal[0],                    init = 1,                   ev = init   
    
            --limit value type
            VAR Page_num_boxes[0].limValtype[0],                init = EQUAL,               ev = init
    
            --Color for different limits
            VAR Page_num_boxes[0].limColor[0],                  init = YELLOW,              ev = init   
    
            --Pen color
            VAR Page_num_boxes[0].ePenColor,                    init = YELLOW,              ev = init

            --Holds Button 1 press flag for splash screen
            VAR Splash_b1_press,                                init = 1,                   ev = init
            
            --Left Twist selection
            VAR Switches.sLE.twist,                             init = 1,                   ev = init
            
            --Right Twist selection
            VAR Switches.sRE.twist,                             init = 0,                   ev = init   
        
            --Button 1
            VAR Switches.b1,                                    init = 0,                   ev = init
    
            --Button 2
            VAR Switches.b2,                                    init = 0,                   ev = init
    
            --Button 3
            VAR Switches.b3,                                    init = 0,                   ev = init
    
            --Button 4
            VAR Switches.b4,                                    init = 0,                   ev = init
    
            --Button 5
            VAR Switches.b5,                                    init = 0,                   ev = init
    
            --Button 6
            VAR Switches.b6,                                    init = 0,                   ev = init
    
            --Button 7
            VAR Switches.b7,                                    init = 0,                   ev = init
    
            --Button 8
            VAR Switches.b8,                                    init = 0,                   ev = init
			
			--Button 10
            VAR Switches.b10,            						init = 0,       					ev = init
			
			--Button 11
            VAR Switches.b11,           					 	init = 0,       					ev = init
			
			--Button 12
            VAR Switches.b12,            						init = 0,       					ev = init
			
			--Button 13
            VAR Switches.b13,            						init = 0,       					ev = init 
    
            --Button c1
            VAR Switches.c1,                                    init = 0,                   ev = init
    
            --Button c2
            VAR Switches.c2,                                    init = 0,                   ev = init
    
            --Button c3
            VAR Switches.c3,                                    init = 0,                   ev = init
    
            --Left Encoder selection
            VAR Switches.sLE.pressed,                           init = 0,                   ev = init
    
            --Right Encoder selection
            VAR Switches.sRE.pressed,                           init = 0,                   ev = init
            
            --NV RAM CRC fail check
            VAR Nv_crc_fail,                                    init = FALSE,               ev = init
            
            --Position value of Display Unit 
            VAR Du_position,                                    init = 0,                   ev = init
            
            --Counter used to loop
            VAR Rd_cnt,                                         init = 1,                   ev = init
            
            --flag of page setting
            VAR Acdt_flag,                                      init = TRUE,                ev = init
            
            --X-Axis of the Bottom Center of Bar graph
            VAR Page_settings.acdt_axis.u16_x,                  init = 50,                  ev = init
            
            --Y-Axis of the Bottom Center of Bar graph
            VAR Page_settings.acdt_axis.u16_y,                  init = 50,                  ev = init
			
			--VAR Bitmap_crc_check_bit[1],					init = TRUE,				ev = init
            
            VAR Page_parameter_error,        init = FALSE,       ev = init
    
            VAR Page_settings.page_num,                         init = 0,                   ev = init
            
        COMMENT OUTPUT SECTION:
                                                            
              --Status of channel
             VAR PTU_param.stat,                                init = PARAM_OK,            ev = init  
             
             --Parameter stat driving the number
             VAR PTU_param1.stat,                               init = PARAM_OK,            ev = init
             
                                                            
        COMMENT INPUT/OUTPUT SECTION:
                                                            
            --Indicates the value of splash screen display
            VAR Splash_done,                                    init = ZERO,                ev = 1
            
            --Page number
            VAR Page_num,                                       init = EPAGE0,              ev = init
        
                
            --X coordinate of text box center
            VAR Prim_cool_down_pop_up_box.s16ULX,               init = 0,                   ev = 5
            
            --Y coordinate of text box center
            VAR Prim_cool_down_pop_up_box.s16ULY,               init = 0,                   ev = 5
            
        -- Stub Calls:
                                                                    
        SIMUL
                
            --reads the message from RTD 
            STUB RTDGetParam(1)
            STUB RTDGetParam(1)
    
            --reads the discrete word
            STUB RTDGetParamDdw(2)

            --allows the calling task to delay for a specific number of clock ticks
            STUB  OsTimeDly(250)
            
            --To load the background
            STUB ForegroundLoadBackground((T_UINT16 *)(BG_IMAGE_ADDR+(Page_num*PAGE_BITMAP_NUM_OF_SECTOR*SECTOR_SIZE)))
            
            --extracts page wise settings from PDI
            STUB PdiPageDataInit(Page_num)
            
            --Allocate a single round dial
            STUB RoundDialAllocat(Ap_page0_dials)   
            
            --Allocates number box structure
            STUB NumboxAllocat(Page_num_boxes)
            
            --Allocates number box structure
            STUB BargraphAllocat(Ap_page1_bar_graphs)
			
			--Allocates Carrot Graph structure
			STUB CarrotGraphAllocat (Ap_page2_carrot)
				
			--Allocates Text structure
			STUB TextAllocatPdi(&Page_txt[0].ppsOwner,Page_txt[0].u16X0,Page_txt[0].u16Y0,Page_txt[0].eTXAlign,Page_txt[0].eTXFont,Page_txt[0].ePenColor,Page_txt[0].eTXV,Page_txt[0].eTXFlash)
				
			--Allocates Text Box structure
			STUB TextBoxPdiAllocate (Ap_page_tbs)
            
            --configures the timer initializations and all text boxes 
            STUB MenuInit()
            
            --disables the text box
            STUB TextBoxOff(&Prim_cool_down_pop_up_box)
            
        END SIMUL
            
        -- Calling the Unit Under Test 
        #GrappApp();
            
    END ELEMENT
    
END TEST -- TEST 31

TEST 32
FAMILY nominal
    
    COMMENT  <TD>
    COMMENT  [hdudispfgrapp-GrappApp-DB-LLR-003]
    COMMENT  The function 'GrappApp' does the following when Splash done is zero and any of the below conditions is true.
    COMMENT  1.Splash timer is greater than or equal to SPLASH_TIME  
    COMMENT  2.Any one of the buttons from Switches is pressed(i.e (not of previous button 1 and b1),b2,b3,b4,b5,b6,b7,b8,
    COMMENT  c1,c2,c3, sLE, sRe)
    COMMENT  - Set splash done to 1.
	COMMENT - Set Page_num to EPAGE1,Cool_down_select to FALSE , Fuel_flow_select to FUEL_FLOW_ON and
	COMMENT   Active_eiu to EIU1 if Nv_crc_fail is equal to TRUE AND Du_position is equal to ONE
    COMMENT  - Call function OffsideSwitchScreen with Page_num as parameter if Du_position is equal to ONE
    COMMENT  - Call function OsTimeDly with parameter 250 and ForegroundLoadBackground with sum of BG_IMAGE_ADDR and product 
    COMMENT   of Page_num, PAGE_BITMAP_NUM_OF_SECTOR and SECTOR_SIZE as its parameter.
    COMMENT  - Call the function PdiPageDataInit with Page_num as its parameter
    COMMENT  - Call the function RoundDialsInit with Ap_page0_dials as its parameter
    COMMENT  - Call the function NumberBoxInit with Page_num_boxes as its parameter
    COMMENT  - Call the function BarGraphInit with Ap_page1_bar_graphs as its parameter
    COMMENT  - Call function TextBoxOff with reference to Prim_cool_down_pop_up_box as parameter.
    COMMENT  - Set s16ULX of Prim_cool_down_pop_up_box to u16_x of acdt_axis of Page_settings minus COOLDOWN_AXIS_CALIBRATION,
    COMMENT  Set s16ULY of Prim_cool_down_pop_up_box to u16_y of acdt_axis of Page_settings minus COOLDOWN_AXIS_CALIBRATION when
    COMMENT  Acdt_flag is equal to TRUE.
    COMMENT  - Call function MenuInit.
    COMMENT  3.Return from the function.  
    COMMENT  MCDC Covered  TXXXXXXXXXXXXXXXXXXXXX
    COMMENT  Equivalence class 62,63,64,65,66,67,68,71,101,109,112,113,114,197,87,88,89,90,91,92,93,94,95,96,97,98,192,194,196,213,214,215,216
    COMMENT  
    COMMENT [hdudispfgrapp-GrappInit-DB-LLR-003]
    COMMENT The function 'GrappInit' sets splash timer to SPLASH_TIME when page_num of Page_settings is  equal to zero
    COMMENT  Equivalence Class 4
    COMMENT  </TD>
    
    ELEMENT
    
    
        COMMENT INPUT SECTION:
		
			VAR Pg_cnt,        init = 1,       ev = init
			
            VAR Ap_poly_graph[0].polygon_shape,        init = FG_RED_X_SHAPE,       ev = init
                
            --data read from Parameters[0]
            VAR Port1_label_count,                              init = 2,                               ev = init
    
            --type of the parameter
            VAR Parameters[1].type,                             init = BNR,                             ev = init
    
            --data read from Parameters[2]
            VAR PTU_parameters[1].reading,                      init = NCD,                             ev = init
    
            --data read from Parameters[2]
            VAR PTU_parameters_numbox[1].reading,               init = NCD,                             ev = init
    
            --type of the parameter
            VAR Parameters[2].type,                             init = BCD,                             ev = init
    
            --data read from Parameters[2]
            VAR PTU_parameters_numbox[2].reading,               init = NCD,                             ev = init
            
            --Counter value used to loop 
            VAR Bg_cnt,                                         init = 1,                               ev = init
			
			VAR Cg_cnt,                                         init = 1,               ev = init
			
            VAR Text_cnt,                                       init = 1,               ev = init
			
            VAR Tb_cnt,                                         init = 1,               ev = init
    
            --Counter value used to loop 
            VAR Nb_cnt,                                         init = 1,                               ev = init
    
            --Number limit
            VAR Ap_page1_bar_graphs[0].numLimit,                init = 1,                               ev = init   
    
            VAR Ap_page1_bar_graphs[0].psParam,                 init = &PTU_param,                      ev = init
    
            --value of the channel 
            VAR PTU_param.fread,                                init = 1,                               ev = init
    
            --limit value
            VAR Ap_page1_bar_graphs[0].limVal[0],               init = 1,                               ev = init   
    
            --limit value type
            VAR Ap_page1_bar_graphs[0].limValtype[0],           init = EQUAL,                           ev = init   
    
            --Color for different limits
            VAR Ap_page1_bar_graphs[0].limColor[0],             init = YELLOW,                          ev = init   
    
            --Color of the bargraph
            VAR Ap_page1_bar_graphs[0].ePenColor,               init = YELLOW,                          ev = init
    
            --Number limit
            VAR Page_num_boxes[0].numLimit,                     init = 1,                               ev = init               
    
            VAR Page_num_boxes[0].psParam,                      init = &PTU_param1,                     ev = init
    
            --Parameter r driving the number
            VAR PTU_param1.fread,                               init = 1,                               ev = init
    
            --limit value
            VAR Page_num_boxes[0].limVal[0],                    init = 1,                               ev = init   
    
            --limit value type
            VAR Page_num_boxes[0].limValtype[0],                init = EQUAL,                           ev = init
    
            --Color for different limits
            VAR Page_num_boxes[0].limColor[0],                  init = YELLOW,                          ev = init   
    
            --Pen color
            VAR Page_num_boxes[0].ePenColor,                    init = YELLOW,                          ev = init

            --Holds Button 1 press flag for splash screen
            VAR Splash_b1_press,                                init = 1,                               ev = init
            
            --Left Twist selection
            VAR Switches.sLE.twist,                             init = 1,                               ev = init
            
            --Right Twist selection
            VAR Switches.sRE.twist,                             init = 0,                               ev = init   
            
            --Button 1
            VAR Switches.b1,                                    init = 0,                               ev = init
    
            --Button 2
            VAR Switches.b2,                                    init = 0,                               ev = init
    
            --Button 3
            VAR Switches.b3,                                    init = 0,                               ev = init
    
            --Button 4
            VAR Switches.b4,                                    init = 0,                               ev = init
    
            --Button 5
            VAR Switches.b5,                                    init = 0,                               ev = init
    
            --Button 6
            VAR Switches.b6,                                    init = 0,                               ev = init
    
            --Button 7
            VAR Switches.b7,                                    init = 0,                               ev = init
    
            --Button 8
            VAR Switches.b8,                                    init = 0,                               ev = init
			
			--Button 10
            VAR Switches.b10,            						init = 0,       					ev = init
			
			--Button 11
            VAR Switches.b11,           					 	init = 0,       					ev = init
			
			--Button 12
            VAR Switches.b12,            						init = 0,       					ev = init
			
			--Button 13
            VAR Switches.b13,            						init = 0,       					ev = init 
    
            --Button c1
            VAR Switches.c1,                                    init = 0,                               ev = init
    
            --Button c2
            VAR Switches.c2,                                    init = 0,                               ev = init
    
            --Button c3
            VAR Switches.c3,                                    init = 0,                               ev = init
    
            --Left Encoder selection
            VAR Switches.sLE.pressed,                           init = 0,                               ev = init
    
            --Right Encoder selection
            VAR Switches.sRE.pressed,                           init = 0,                               ev = init
            
            --NV RAM CRC fail check
            VAR Nv_crc_fail,                                    init = TRUE,                            ev = init
            
            --Position value of Display Unit 
            VAR Du_position,                                    init = 1,                               ev = init
            
            --Counter used to loop
            VAR Rd_cnt,                                         init = 1,                               ev = init
                
            --flag of page setting
            VAR Acdt_flag,                                      init = TRUE,                            ev = init
            
            --X-Axis of the Bottom Center of Bar graph
            VAR Page_settings.acdt_axis.u16_x,                  init = 50,                              ev = init
            
            --Y-Axis of the Bottom Center of Bar graph
            VAR Page_settings.acdt_axis.u16_y,                  init = 50,                              ev = init
            
            VAR Prim_cool_down_pop_up_box.fill,                 init = &dummyfunc,                     ev = init
    
            VAR Page_settings.page_num,                         init = 0,                               ev = init
			
			--VAR Bitmap_crc_check_bit[1],					init = FALSE,				ev = TRUE
			
			VAR Page_parameter_error,        init = FALSE,       ev = init
            
        COMMENT OUTPUT SECTION:
                                                                
             --Status of channel
            VAR PTU_param.stat,                                 init = PARAM_OK,                        ev = init  
            
            --Parameter stat driving the number
            VAR PTU_param1.stat,                                init = PARAM_OK,                        ev = init
                 
            -- active eiu will be set to EIU1
            VAR Active_eiu,										init = EIU2,							ev=EIU1
            
            -- cool down select is set to false
            VAR Cool_down_select,								init = TRUE,							ev=FALSE
			
            VAR Fuel_flow_select,								init = FUEL_FLOW_OFF,					ev=FUEL_FLOW_ON
            
        COMMENT INPUT/OUTPUT SECTION:
                                                                
            --Indicates the value of splash screen display
            VAR Splash_done,                                    init = ZERO,                            ev = 1
            
            --Page number
            VAR Page_num,                                       init = EPAGE1,                          ev = init
            
            --X coordinate of text box center
            VAR Prim_cool_down_pop_up_box.s16ULX,               init = 0,                               ev = 5
            
            --Y coordinate of text box center
            VAR Prim_cool_down_pop_up_box.s16ULY,               init = 0,                               ev = 5
                
        -- Stub Calls:
        SIMUL
                
            --reads the message from RTD 
            STUB RTDGetParam(1)
            STUB RTDGetParam(1)
    
            --reads the discrete word
            STUB RTDGetParamDdw(2)
            
            --triggers the transmission of switch screen service code
            STUB OffsideSwitchScreen(Page_num)
            
            --allows the calling task to delay for a specific number of clock ticks
            STUB  OsTimeDly(250)
            
            --To load the background
            STUB ForegroundLoadBackground((T_UINT16 *)(BG_IMAGE_ADDR+(Page_num*PAGE_BITMAP_NUM_OF_SECTOR*SECTOR_SIZE)))
            
            --extracts page wise settings from PDI
            STUB PdiPageDataInit(Page_num)
            
            --Allocate a single round dial
            STUB RoundDialAllocat(Ap_page0_dials)   
            
            --Allocates number box structure
            STUB NumboxAllocat(Page_num_boxes)
            
            --Allocates number box structure
            STUB BargraphAllocat(Ap_page1_bar_graphs)
			
			--Allocates Carrot Graph structure
			STUB CarrotGraphAllocat (Ap_page2_carrot)
				
			--Allocates Text structure
			STUB TextAllocatPdi(&Page_txt[0].ppsOwner,Page_txt[0].u16X0,Page_txt[0].u16Y0,Page_txt[0].eTXAlign,Page_txt[0].eTXFont,Page_txt[0].ePenColor,Page_txt[0].eTXV,Page_txt[0].eTXFlash)
				
			--Allocates Text Box structure
			STUB TextBoxPdiAllocate (Ap_page_tbs)
            
            --configures the timer initializations and all text boxes 
            STUB MenuInit()
            
            --disables the text box
            STUB TextBoxOff(&Prim_cool_down_pop_up_box)
            
            --TimerInstall is called to increment the timer
            STUB TimerInstall()

            --TimerInstall is called to increment the timer
            STUB TimerInstall()

            --extracts page settings from pdi
            STUB PageExtract((T_UINT8 *)(FOREGROUND_SETTING_ADDRESS+(19*SECTOR_SIZE)))
            
            --triggers the transmission of start timer service code
            STUB OffsideCoolTimer(FALSE)
            
            --sets Active EIU
            STUB GlobalSettingsSetEIU(EIU1)
			
			STUB GlobalExtract((T_UINT8 *)GLOBAL_SETTING_ADDRESS)
			
			STUB OffsideFuelFlow(0)
                
        END SIMUL
            
            --function is called to make splash timer equal to SPLASH_TIME
            #GrappInit();
                                                
            -- Calling the Unit Under Test 
            #GrappApp();
            
    END ELEMENT

END TEST -- TEST 32

TEST 33
FAMILY nominal

    COMMENT  Test Description
    COMMENT  <TD>   
    COMMENT  [hdudispfgrapp-GrappApp-DB-LLR-003]
    COMMENT  The function 'GrappApp' does the following when Splash done is zero and COND is true.
 	COMMENT - Set splash done to 1.
	COMMENT - Set Page_num to EPAGE1,Cool_down_select to FALSE , Fuel_flow_select to FUEL_FLOW_ON and
	COMMENT   Active_eiu to EIU1 if Nv_crc_fail is equal to TRUE AND Du_position is equal to ONE
 	COMMENT - Call functions OffsideSwitchScreen with Page_num as parameter,OffsideCoolTimer with Cool_down_select as parameter
 	COMMENT  and GlobalSettingsSetEIU with  Active_eiu as parameter when Du_position is equal to ONE
 	COMMENT - Call functions OsTimeDly with parameter 250 and ForegroundLoadBackground with sum of BG_IMAGE_ADDR and product 
 	COMMENT of Page_num, PAGE_BITMAP_NUM_OF_SECTOR and SECTOR_SIZE as its parameter.
 	COMMENT - Call the function PdiPageDataInit with Page_num as its parameter
 	COMMENT - Call the function RoundDialsInit with Ap_page0_dials as its parameter
 	COMMENT - Call the function NumberBoxInit with Page_num_boxes as its parameter
 	COMMENT - Call the function BarGraphInit with Ap_page1_bar_graphs as its parameter
 	COMMENT - Call function TextBoxOff with reference to Prim_cool_down_pop_up_box as parameter.
 	COMMENT - Set s16ULX of Prim_cool_down_pop_up_box to u16_x of acdt_axis of Page_settings minus COOLDOWN_AXIS_CALIBRATION,
 	COMMENT Set s16ULY of Prim_cool_down_pop_up_box to u16_y of acdt_axis of Page_settings minus COOLDOWN_AXIS_CALIBRATION when
 	COMMENT Acdt_flag is equal to TRUE.
 	COMMENT - Call function MenuInit.
 	COMMENT 3.Return from the function.
 	COMMENT
 	COMMENT COND : COND1 OR COND2 OR COND3 OR COND4 OR COND5
 	COMMENT
 	COMMENT COND1 : Splash timer is greater than or equal to SPLASH_TIME  
 	COMMENT COND2 : Splash_b1_press is zero AND any one of the buttons from Switches is pressed(i.e b1,b2,b3,b4,b5,b6,b7,b8,b10,b11,b12,b13,c1,c2,c3, sLE, sRe)
 	COMMENT COND3 : twist of sLE of Switches is not equal to zero 
	COMMENT COND4 : twist of sRe of Switches is not equal to zero  
    COMMENT COND5 : flag which indicate first demo mode  Bitwise and Demo_active bitwise and of result of COND6
	COMMENT COND6 : splash timer is greater than or equal to SPLASH_TIME
    COMMENT  Equivalence class 62,63,64,65,66,67,68,69,195,108,100,110,72,115,87,88,89,111,90,91,92,93,94,95,96,97,191,194,196,153,197,213,214,215,216
    COMMENT  MCDC Covered  FFXXXXXXXXXXXXXXXXTXXX
    COMMENT  </TD>
    
    ELEMENT
    
    
        COMMENT INPUT SECTION:
		
			VAR Pg_cnt,        init = 1,       ev = init
			
            VAR Ap_poly_graph[0].polygon_shape,        init = FG_RED_X_SHAPE,       ev = init
            
            --data read from Parameters[0]
            VAR Port1_label_count,                              init = 2,                   ev = init
    
            --type of the parameter
            VAR Parameters[1].type,                             init = BNR,                 ev = init
    
            --data read from Parameters[2]
            VAR PTU_parameters[1].reading,                      init = NCD,                 ev = init
    
            --data read from Parameters[2]
            VAR PTU_parameters_numbox[1].reading,               init = NCD,                 ev = init
    
            --type of the parameter
            VAR Parameters[2].type,                             init = BCD,                 ev = init
    
            --data read from Parameters[2]
            VAR PTU_parameters_numbox[2].reading,               init = NCD,                 ev = init
            
            --Counter value used to loop 
            VAR Bg_cnt,                                         init = 1,                   ev = init
			
			VAR Cg_cnt,                                         init = 1,               ev = init
			
            VAR Text_cnt,                                       init = 1,               ev = init
			
            VAR Tb_cnt,                                         init = 1,               ev = init
    
            --Counter value used to loop 
            VAR Nb_cnt,                                         init = 1,                   ev = init
    
            --Number limit
            VAR Ap_page1_bar_graphs[0].numLimit,                init = 1,                   ev = init   
    
            VAR Ap_page1_bar_graphs[0].psParam,                 init = &PTU_param,          ev = init
    
            --value of the channel 
            VAR PTU_param.fread,                                init = 1,                   ev = init
    
            --limit value
            VAR Ap_page1_bar_graphs[0].limVal[0],               init = 1,                   ev = init   
    
            --limit value type
            VAR Ap_page1_bar_graphs[0].limValtype[0],           init = EQUAL,               ev = init   
    
            --Color for different limits
            VAR Ap_page1_bar_graphs[0].limColor[0],             init = YELLOW,              ev = init   
    
            --Color of the bargraph
            VAR Ap_page1_bar_graphs[0].ePenColor,               init = YELLOW,              ev = init
    
            --Number limit
            VAR Page_num_boxes[0].numLimit,                     init = 1,                   ev = init               
    
            VAR Page_num_boxes[0].psParam,                      init = &PTU_param1,         ev = init
    
            --Parameter r driving the number
            VAR PTU_param1.fread,                               init = 1,                   ev = init
    
            --limit value
            VAR Page_num_boxes[0].limVal[0],                    init = 1,                   ev = init   
    
            --limit value type
            VAR Page_num_boxes[0].limValtype[0],                init = EQUAL,               ev = init
    
            --Color for different limits
            VAR Page_num_boxes[0].limColor[0],                  init = YELLOW,              ev = init   
    
            --Pen color
            VAR Page_num_boxes[0].ePenColor,                    init = YELLOW,              ev = init

            --Holds Button 1 press flag for splash screen
            VAR Splash_b1_press,                                init = 1,                   ev = init
            
            --Left Twist selection
            VAR Switches.sLE.twist,                             init = 1,                   ev = init
            
            --Right Twist selection
            VAR Switches.sRE.twist,                             init = 0,                   ev = init   
        
            --Button 1
            VAR Switches.b1,                                    init = 0,                   ev = init
    
            --Button 2
            VAR Switches.b2,                                    init = 0,                   ev = init
    
            --Button 3
            VAR Switches.b3,                                    init = 0,                   ev = init
    
            --Button 4
            VAR Switches.b4,                                    init = 0,                   ev = init
    
            --Button 5
            VAR Switches.b5,                                    init = 0,                   ev = init
    
            --Button 6
            VAR Switches.b6,                                    init = 0,                   ev = init
    
            --Button 7
            VAR Switches.b7,                                    init = 0,                   ev = init
    
            --Button 8
            VAR Switches.b8,                                    init = 0,                   ev = init
			
			--Button 10
            VAR Switches.b10,            						init = 0,       					ev = init
			
			--Button 11
            VAR Switches.b11,           					 	init = 0,       					ev = init
			
			--Button 12
            VAR Switches.b12,            						init = 0,       					ev = init
			
			--Button 13
            VAR Switches.b13,            						init = 0,       					ev = init 
    
            --Button c1
            VAR Switches.c1,                                    init = 0,                   ev = init
    
            --Button c2
            VAR Switches.c2,                                    init = 0,                   ev = init
    
            --Button c3
            VAR Switches.c3,                                    init = 0,                   ev = init
    
            --Left Encoder selection
            VAR Switches.sLE.pressed,                           init = 0,                   ev = init
    
            --Right Encoder selection
            VAR Switches.sRE.pressed,                           init = 0,                   ev = init
            
            --NV RAM CRC fail check
            VAR Nv_crc_fail,                                    init = FALSE,               ev = init
            
            --Position value of Display Unit 
            VAR Du_position,                                    init = 0,                   ev = init
            
            --Counter used to loop
            VAR Rd_cnt,                                         init = 1,                   ev = init
                
            --flag of page setting
            VAR Acdt_flag,                                      init = TRUE,                ev = init
            
            --X-Axis of the Bottom Center of Bar graph
            VAR Page_settings.acdt_axis.u16_x,                  init = 50,                  ev = init
            
            --Y-Axis of the Bottom Center of Bar graph
            VAR Page_settings.acdt_axis.u16_y,                  init = 50,                  ev = init
            
            VAR Page_parameter_error,        init = FALSE,       ev = init
    
            VAR Page_settings.page_num,                         init = 0,                   ev = init
			
			--VAR Bitmap_crc_check_bit[1],					init = TRUE,				ev = init
            
        COMMENT OUTPUT SECTION:
                                                            
              --Status of channel
             VAR PTU_param.stat,                                init = PARAM_OK,            ev = init  
             
             --Parameter stat driving the number
             VAR PTU_param1.stat,                               init = PARAM_OK,            ev = init
             
                                                            
        COMMENT INPUT/OUTPUT SECTION:
                                                            
            --Indicates the value of splash screen display
            VAR Splash_done,                                    init = ZERO,                ev = 1
            
            --Page number
            VAR Page_num,                                       init = EPAGE0,              ev = init
        
                
            --X coordinate of text box center
            VAR Prim_cool_down_pop_up_box.s16ULX,               init = 0,                   ev = 5
            
            --Y coordinate of text box center
            VAR Prim_cool_down_pop_up_box.s16ULY,               init = 0,                   ev = 5
            
        -- Stub Calls:
                                                                    
        SIMUL
                
            --reads the message from RTD 
            STUB RTDGetParam(1)
            STUB RTDGetParam(1)
    
            --reads the discrete word
            STUB RTDGetParamDdw(2)

            --allows the calling task to delay for a specific number of clock ticks
            STUB  OsTimeDly(250)
            
            --To load the background
            STUB ForegroundLoadBackground((T_UINT16 *)(BG_IMAGE_ADDR+(Page_num*PAGE_BITMAP_NUM_OF_SECTOR*SECTOR_SIZE)))
            
            --extracts page wise settings from PDI
            STUB PdiPageDataInit(Page_num)
            
            --Allocate a single round dial
            STUB RoundDialAllocat(Ap_page0_dials)   
            
            --Allocates number box structure
            STUB NumboxAllocat(Page_num_boxes)
            
            --Allocates number box structure
            STUB BargraphAllocat(Ap_page1_bar_graphs)
			
			--Allocates Carrot Graph structure
			STUB CarrotGraphAllocat (Ap_page2_carrot)
				
			--Allocates Text structure
			STUB TextAllocatPdi(&Page_txt[0].ppsOwner,Page_txt[0].u16X0,Page_txt[0].u16Y0,Page_txt[0].eTXAlign,Page_txt[0].eTXFont,Page_txt[0].ePenColor,Page_txt[0].eTXV,Page_txt[0].eTXFlash)
				
			--Allocates Text Box structure
			STUB TextBoxPdiAllocate (Ap_page_tbs)
            
            --configures the timer initializations and all text boxes 
            STUB MenuInit()
            
            --disables the text box
            STUB TextBoxOff(&Prim_cool_down_pop_up_box)
            
        END SIMUL
            
        -- Calling the Unit Under Test 
        #GrappApp();
            
    END ELEMENT
    
END TEST -- TEST 33

TEST 34
FAMILY nominal

    COMMENT  Test Description
    COMMENT  <TD>   
    COMMENT  [hdudispfgrapp-GrappApp-DB-LLR-003]
    COMMENT  The function 'GrappApp' does nothing when Splash done is not equal to zero
    COMMENT  Equivalence class 154
    COMMENT  
    COMMENT  [hdudispfgrapp-GrappApp-DB-LLR-004]
    COMMENT  1.Set temp page value to Page_num
	COMMENT  2. If new page set is equal to TRUE then do the following
    COMMENT  	a.Call the macro OS_ENTER_CRITICAL.
    COMMENT  	b.Set the new page value to FALSE
    COMMENT  	c.set temp page value to New_page_num
    COMMENT  	d.Call the macro OS_EXIT_CRITICAL.  
    COMMENT  Equivalence class 106,107
    COMMENT

    COMMENT  </TD>
    
    ELEMENT
    
        COMMENT INPUT SECTION:
		
			VAR Pg_cnt,        init = 1,       ev = init
			
            VAR Ap_poly_graph[0].polygon_shape,        init = FG_RED_X_SHAPE,       ev = init
                
            --data read from Parameters[0]
            VAR Port1_label_count,                              init = 2,                               ev = init
    
            --type of the parameter
            VAR Parameters[1].type,                             init = BNR,                             ev = init
    
            --data read from Parameters[2]
            VAR PTU_parameters[1].reading,                      init = NCD,                             ev = init
    
            --data read from Parameters[2]
            VAR PTU_parameters_numbox[1].reading,               init = NCD,                             ev = init
    
            --type of the parameter
            VAR Parameters[2].type,                             init = BCD,                             ev = init
    
            --data read from Parameters[2]
            VAR PTU_parameters_numbox[2].reading,               init = NCD,                             ev = init
            
            --Counter value used to loop 
            VAR Bg_cnt,                                         init = 1,                               ev = init
			
			VAR Cg_cnt,                                         init = 1,               ev = init
			
            VAR Text_cnt,                                       init = 1,               ev = init
			
            VAR Tb_cnt,                                         init = 1,               ev = init
    
            --Counter value used to loop 
            VAR Nb_cnt,                                         init = 1,                               ev = init
    
            --Number limit
            VAR Ap_page1_bar_graphs[0].numLimit,                init = 1,                               ev = init   
    
            VAR Ap_page1_bar_graphs[0].psParam,                 init = &PTU_param,                      ev = init
    
            --value of the channel 
            VAR PTU_param.fread,                                init = 1,                               ev = init
    
            --limit value
            VAR Ap_page1_bar_graphs[0].limVal[0],               init = 1,                               ev = init   
    
            --limit value type
            VAR Ap_page1_bar_graphs[0].limValtype[0],           init = EQUAL,                           ev = init   
    
            --Color for different limits
            VAR Ap_page1_bar_graphs[0].limColor[0],             init = YELLOW,                          ev = init   
    
            --Color of the bargraph
            VAR Ap_page1_bar_graphs[0].ePenColor,               init = YELLOW,                          ev = init
    
            --Number limit
            VAR Page_num_boxes[0].numLimit,                     init = 1,                               ev = init               
    
            VAR Page_num_boxes[0].psParam,                      init = &PTU_param1,                     ev = init
    
            --Parameter r driving the number
            VAR PTU_param1.fread,                               init = 1,                               ev = init
    
            --limit value
            VAR Page_num_boxes[0].limVal[0],                    init = 1,                               ev = init   
    
            --limit value type
            VAR Page_num_boxes[0].limValtype[0],                init = EQUAL,                           ev = init
    
            --Color for different limits
            VAR Page_num_boxes[0].limColor[0],                  init = YELLOW,                          ev = init   
    
            --Pen color
            VAR Page_num_boxes[0].ePenColor,                    init = YELLOW,                          ev = init
    
            --Indicates the value of splash screen display
            VAR Splash_done,                                    init = 1,                               ev = init
            
            --Button 1
            VAR Switches.b1,                                    init = 0,                               ev = init
			
			VAR Page_parameter_error,        init = FALSE,       ev = init
                
        COMMENT OUTPUT SECTION:
                                                                
             --Status of channel
            VAR PTU_param.stat,                                 init = PARAM_OK,                        ev = init  
            
            --Parameter stat driving the number
            VAR PTU_param1.stat,                                init = PARAM_OK,                        ev = init
                 
            --temporary variable is crested for testing purporse
            
            
            VAR PTU_e_page_temp,                                init = EPAGE0,                          ev = EPAGE1
            
        COMMENT INPUT/OUTPUT SECTION:
                                                                
                
            --Page number
            VAR Page_num,                                       init = EPAGE1,                          ev = EPAGE1
        
                
        -- Stub Calls:                                                      
        SIMUL
                
            --reads the message from RTD 
            STUB RTDGetParam(1)
            STUB RTDGetParam(1)
    
            --reads the discrete word
            STUB RTDGetParamDdw(2)
            
            --Performs page menu operations
            STUB PageMenu()
            
            --Saves the interrupt mask register
            STUB SaveStatusReg()3
            
            --Restores the interrupt disable mask to its original value
            STUB RestoreStatusReg(3)
            
            --Saves the interrupt mask register
            STUB SaveStatusReg()4

            --Restores the interrupt disable mask to its original value
            STUB RestoreStatusReg(4)
            
        END SIMUL
                
            --
            #GrappSetPage(1);
            -- Calling the Unit Under Test 
            #GrappApp();
            
    END ELEMENT
    
    
END TEST -- TEST 34

TEST 35
FAMILY nominal

    COMMENT  Test Description
    COMMENT  <TD>   
    COMMENT  [hdudispfgrapp-GrappApp-DB-LLR-003]
    COMMENT  The function 'GrappApp' does the following when Splash done is zero and COND is true.
 	COMMENT - Set splash done to 1.
	COMMENT - Set Page_num to EPAGE1,Cool_down_select to FALSE , Fuel_flow_select to FUEL_FLOW_ON and
	COMMENT   Active_eiu to EIU1 if Nv_crc_fail is equal to TRUE AND Du_position is equal to ONE
 	COMMENT - Call functions OffsideSwitchScreen with Page_num as parameter,OffsideCoolTimer with Cool_down_select as parameter
 	COMMENT  and GlobalSettingsSetEIU with  Active_eiu as parameter when Du_position is equal to ONE
 	COMMENT - Call functions OsTimeDly with parameter 250 and ForegroundLoadBackground with sum of BG_IMAGE_ADDR and product 
 	COMMENT of Page_num, PAGE_BITMAP_NUM_OF_SECTOR and SECTOR_SIZE as its parameter.
 	COMMENT - Call the function PdiPageDataInit with Page_num as its parameter
 	COMMENT - Call the function RoundDialsInit with Ap_page0_dials as its parameter
 	COMMENT - Call the function NumberBoxInit with Page_num_boxes as its parameter
 	COMMENT - Call the function BarGraphInit with Ap_page1_bar_graphs as its parameter
 	COMMENT - Call function TextBoxOff with reference to Prim_cool_down_pop_up_box as parameter.
 	COMMENT - Set s16ULX of Prim_cool_down_pop_up_box to u16_x of acdt_axis of Page_settings minus COOLDOWN_AXIS_CALIBRATION,
 	COMMENT Set s16ULY of Prim_cool_down_pop_up_box to u16_y of acdt_axis of Page_settings minus COOLDOWN_AXIS_CALIBRATION when
 	COMMENT Acdt_flag is equal to TRUE.
 	COMMENT - Call function MenuInit.
 	COMMENT 3.Return from the function.
 	COMMENT
 	COMMENT COND : COND1 OR COND2 OR COND3 OR COND4 OR COND5
 	COMMENT
 	COMMENT COND1 : Splash timer is greater than or equal to SPLASH_TIME  
 	COMMENT COND2 : Splash_b1_press is zero AND any one of the buttons from Switches is pressed(i.e b1,b2,b3,b4,b5,b6,b7,b8,b10,b11,b12,b13,c1,c2,c3, sLE, sRe)
 	COMMENT COND3 : twist of sLE of Switches is not equal to zero 
	COMMENT COND4 : twist of sRe of Switches is not equal to zero  
    COMMENT COND5 : flag which indicate first demo mode  Bitwise and Demo_active bitwise and of result of COND6
	COMMENT COND6 : splash timer is greater than or equal to SPLASH_TIME
    COMMENT  Equivalence class 62,63,64,65,66,67,68,69,195,108,100,110,72,115,87,88,89,111,90,91,92,93,94,95,96,97,191,194,196,153,197,213,214,215,216
    COMMENT  MCDC Covered  FFXXXXXXXXXXXXXXXXFFF
    COMMENT  </TD>
    
    ELEMENT
    
    
        COMMENT INPUT SECTION:
		
			VAR Pg_cnt,        init = 1,       ev = init
			
            VAR Ap_poly_graph[0].polygon_shape,        init = FG_RED_X_SHAPE,       ev = init
            
            --data read from Parameters[0]
            VAR Port1_label_count,                              init = 2,                   ev = init
    
            --type of the parameter
            VAR Parameters[1].type,                             init = BNR,                 ev = init
    
            --data read from Parameters[2]
            VAR PTU_parameters[1].reading,                      init = NCD,                 ev = init
    
            --data read from Parameters[2]
            VAR PTU_parameters_numbox[1].reading,               init = NCD,                 ev = init
    
            --type of the parameter
            VAR Parameters[2].type,                             init = BCD,                 ev = init
    
            --data read from Parameters[2]
            VAR PTU_parameters_numbox[2].reading,               init = NCD,                 ev = init
            
            --Counter value used to loop 
            VAR Bg_cnt,                                         init = 1,                   ev = init
			
            VAR Cg_cnt,                                         init = 1,               ev = init
			
            VAR Text_cnt,                                       init = 1,               ev = init
			
            VAR Tb_cnt,                                         init = 1,               ev = init
    
            --Counter value used to loop 
            VAR Nb_cnt,                                         init = 1,                   ev = init
    
            --Number limit
            VAR Ap_page1_bar_graphs[0].numLimit,                init = 1,                   ev = init   
    
            VAR Ap_page1_bar_graphs[0].psParam,                 init = &PTU_param,          ev = init
    
            --value of the channel 
            VAR PTU_param.fread,                                init = 1,                   ev = init
    
            --limit value
            VAR Ap_page1_bar_graphs[0].limVal[0],               init = 1,                   ev = init   
    
            --limit value type
            VAR Ap_page1_bar_graphs[0].limValtype[0],           init = EQUAL,               ev = init   
    
            --Color for different limits
            VAR Ap_page1_bar_graphs[0].limColor[0],             init = YELLOW,              ev = init   
    
            --Color of the bargraph
            VAR Ap_page1_bar_graphs[0].ePenColor,               init = YELLOW,              ev = init
    
            --Number limit
            VAR Page_num_boxes[0].numLimit,                     init = 1,                   ev = init               
    
            VAR Page_num_boxes[0].psParam,                      init = &PTU_param1,         ev = init
    
            --Parameter r driving the number
            VAR PTU_param1.fread,                               init = 1,                   ev = init
    
            --limit value
            VAR Page_num_boxes[0].limVal[0],                    init = 1,                   ev = init   
    
            --limit value type
            VAR Page_num_boxes[0].limValtype[0],                init = EQUAL,               ev = init
    
            --Color for different limits
            VAR Page_num_boxes[0].limColor[0],                  init = YELLOW,              ev = init   
    
            --Pen color
            VAR Page_num_boxes[0].ePenColor,                    init = YELLOW,              ev = init

            --Holds Button 1 press flag for splash screen
            VAR Splash_b1_press,                                init = 1,                   ev = init
            
            --Left Twist selection
            VAR Switches.sLE.twist,                             init = 0,                   ev = init
            
            --Right Twist selection
            VAR Switches.sRE.twist,                             init = 0,                   ev = init   
        
            --Button 1
            VAR Switches.b1,                                    init = 0,                   ev = init
    
            --Button 2
            VAR Switches.b2,                                    init = 0,                   ev = init
    
            --Button 3
            VAR Switches.b3,                                    init = 0,                   ev = init
    
            --Button 4
            VAR Switches.b4,                                    init = 0,                   ev = init
    
            --Button 5
            VAR Switches.b5,                                    init = 0,                   ev = init
    
            --Button 6
            VAR Switches.b6,                                    init = 0,                   ev = init
    
            --Button 7
            VAR Switches.b7,                                    init = 0,                   ev = init
    
            --Button 8
            VAR Switches.b8,                                    init = 0,                   ev = init
			
			--Button 10
            VAR Switches.b10,            						init = 0,       					ev = init
			
			--Button 11
            VAR Switches.b11,           					 	init = 0,       					ev = init
			
			--Button 12
            VAR Switches.b12,            						init = 0,       					ev = init
			
			--Button 13
            VAR Switches.b13,            						init = 0,       					ev = init 
    
            --Button c1
            VAR Switches.c1,                                    init = 0,                   ev = init
    
            --Button c2
            VAR Switches.c2,                                    init = 0,                   ev = init
    
            --Button c3
            VAR Switches.c3,                                    init = 0,                   ev = init
    
            --Left Encoder selection
            VAR Switches.sLE.pressed,                           init = 0,                   ev = init
    
            --Right Encoder selection
            VAR Switches.sRE.pressed,                           init = 0,                   ev = init
            
            --NV RAM CRC fail check
            VAR Nv_crc_fail,                                    init = FALSE,               ev = init
            
            --Position value of Display Unit 
            VAR Du_position,                                    init = 0,                   ev = init
            
            --Counter used to loop
            VAR Rd_cnt,                                         init = 1,                   ev = init
                
            --flag of page setting
            VAR Acdt_flag,                                      init = TRUE,                ev = init
            
            --X-Axis of the Bottom Center of Bar graph
            VAR Page_settings.acdt_axis.u16_x,                  init = 50,                  ev = init
            
            --Y-Axis of the Bottom Center of Bar graph
            VAR Page_settings.acdt_axis.u16_y,                  init = 50,                  ev = init
            
            VAR Page_parameter_error,        init = FALSE,       ev = init
    
            VAR Page_settings.page_num,                         init = 0,                   ev = init
			
			--VAR Bitmap_crc_check_bit[1],					init = TRUE,				ev = init
            
        COMMENT OUTPUT SECTION:
                                                            
              --Status of channel
             VAR PTU_param.stat,                                init = PARAM_OK,            ev = init  
             
             --Parameter stat driving the number
             VAR PTU_param1.stat,                               init = PARAM_OK,            ev = init
             
                                                            
        COMMENT INPUT/OUTPUT SECTION:
                                                            
            --Indicates the value of splash screen display
            VAR Splash_done,                                    init = ZERO,                ev = 1
            
            --Page number
            VAR Page_num,                                       init = EPAGE0,              ev = init
        
                
            --X coordinate of text box center
            VAR Prim_cool_down_pop_up_box.s16ULX,               init = 0,                   ev = 5
            
            --Y coordinate of text box center
            VAR Prim_cool_down_pop_up_box.s16ULY,               init = 0,                   ev = 5
            
        -- Stub Calls:
                                                                    
        SIMUL
                
            --reads the message from RTD 
            STUB RTDGetParam(1)
            STUB RTDGetParam(1)
    
            --reads the discrete word
            STUB RTDGetParamDdw(2)

            --allows the calling task to delay for a specific number of clock ticks
            STUB  OsTimeDly(250)
            
            --To load the background
            STUB ForegroundLoadBackground((T_UINT16 *)(BG_IMAGE_ADDR+(Page_num*PAGE_BITMAP_NUM_OF_SECTOR*SECTOR_SIZE)))
            
            --extracts page wise settings from PDI
            STUB PdiPageDataInit(Page_num)
            
            --Allocate a single round dial
            STUB RoundDialAllocat(Ap_page0_dials)   
            
            --Allocates number box structure
            STUB NumboxAllocat(Page_num_boxes)
            
            --Allocates number box structure
            STUB BargraphAllocat(Ap_page1_bar_graphs)
			
			--Allocates Carrot Graph structure
			STUB CarrotGraphAllocat (Ap_page2_carrot)
				
			--Allocates Text structure
			STUB TextAllocatPdi(&Page_txt[0].ppsOwner,Page_txt[0].u16X0,Page_txt[0].u16Y0,Page_txt[0].eTXAlign,Page_txt[0].eTXFont,Page_txt[0].ePenColor,Page_txt[0].eTXV,Page_txt[0].eTXFlash)
				
			--Allocates Text Box structure
			STUB TextBoxPdiAllocate (Ap_page_tbs)
            
            --configures the timer initializations and all text boxes 
            STUB MenuInit()
            
            --disables the text box
            STUB TextBoxOff(&Prim_cool_down_pop_up_box)
            
        END SIMUL
            
        -- Calling the Unit Under Test 
        #GrappApp();
            
    END ELEMENT
    
END TEST -- TEST 35

TEST 36
FAMILY nominal

    COMMENT  Test Description
    COMMENT  <TD>   
    COMMENT  [hdudispfgrapp-GrappApp-DB-LLR-004]
    COMMENT  The function does nothing when new page set is other than TRUE 
    COMMENT  Equivalence class 198
    COMMENT  </TD>
    
    ELEMENT
    
        COMMENT INPUT SECTION:

            VAR Pg_cnt,        init = 1,       ev = init
			
            VAR Ap_poly_graph[0].polygon_shape,        init = FG_RED_X_SHAPE,       ev = init
        
        COMMENT OUTPUT SECTION:

            -- None
                                                            
        COMMENT INPUT/OUTPUT SECTION:

            -- 
            VAR Splash_done,            init = 1,       ev = init                                                           
            
        -- Stub Calls:                                                              
        SIMUL

            --Performs page menu operations
            STUB PageMenu()
            
        END SIMUL           
       
        -- Calling the Unit Under Test 
        #GrappApp();
            
    END ELEMENT

END TEST -- TEST 36


TEST 41
FAMILY nominal

    COMMENT  Test Description
    COMMENT  <TD>   
    COMMENT  [hdudispfgrapp-GrappApp-DB-LLR-006]
    COMMENT  The function 'GrappApp' does nothing when airframe counter is less than AIFRAME_CHECK_SEC
	COMMENT
    COMMENT  Equivalence class 201
    COMMENT  </TD>
    
    ELEMENT
    
        COMMENT INPUT SECTION:
		
			VAR Pg_cnt,        init = 1,       ev = init
			
            VAR Ap_poly_graph[0].polygon_shape,        init = FG_RED_X_SHAPE,       ev = init

            VAR Splash_done,            init = 1,       ev = init
        
        COMMENT OUTPUT SECTION:

            -- None
                                                            
        COMMENT INPUT/OUTPUT SECTION:

            -- None
            
        -- Stub Calls:                                                              
        SIMUL

            --Performs page menu operations
			
            STUB PageMenu()
            
			
        END SIMUL           
       
        -- Calling the Unit Under Test 
        #GrappApp();
            
    END ELEMENT

END TEST -- TEST 41

TEST 40
FAMILY nominal

    COMMENT  Test Description
    COMMENT  <TD>   
    COMMENT  [hdudispfgrapp-GrappApp-DB-LLR-006]
    COMMENT  The function 'GrappApp' does the following
	COMMENT  1.Increment Airframe counter by one.
	COMMENT  2.Set counter airframe to AIFRAME_CHECK_SEC and callS the function ProcessAirframeInfoWords  
	COMMENT  when airframe counter is greater than AIFRAME_CHECK_SEC
    COMMENT   
    COMMENT  Equivalence class 199,204
    COMMENT  </TD>
    
    ELEMENT
    
        COMMENT INPUT SECTION:

            VAR Pg_cnt,        init = 1,       ev = init
			
            VAR Ap_poly_graph[0].polygon_shape,        init = FG_RED_X_SHAPE,       ev = init
        
        COMMENT OUTPUT SECTION:

            -- None
                                                            
        COMMENT INPUT/OUTPUT SECTION:

            VAR Splash_done,            	init = 1,       ev = init    
	
			
        -- Stub Calls:                                                              
        SIMUL

            --Performs page menu operations
            STUB PageMenu()
            
			
        END SIMUL           
       
        -- Calling the Unit Under Test 
        #GrappApp();
            
    END ELEMENT
	
	--Function GrappApp is called for 1500 times to increment counter_airframe to 1502
	#Splash_done=1;
	#for(PTU_temp=0;PTU_temp<1500;PTU_temp++)
	#GrappApp();
	
	ELEMENT
    
        COMMENT INPUT SECTION:

           VAR Pg_cnt,        init = 1,       ev = init
			
            VAR Ap_poly_graph[0].polygon_shape,        init = FG_RED_X_SHAPE,       ev = init
        
        COMMENT OUTPUT SECTION:

            -- None
                                                            
        COMMENT INPUT/OUTPUT SECTION:

            
            VAR Splash_done,            init = 1,       ev = init                                                           
            
			
        -- Stub Calls:                                                              
        SIMUL

            --Performs page menu operations
            STUB PageMenu()
			
			--system information words read from label 370
			STUB ProcessAirframeInfoWords()
			
        END SIMUL           
       
        -- Calling the Unit Under Test 
        #GrappApp();
            
    END ELEMENT
END TEST -- TEST 40

END SERVICE -- GrappApp


--------------------------------------------------------------------------------
-- Declaration of the service CarrotGraphInit
--------------------------------------------------------------------------------
SERVICE CarrotGraphInit
SERVICE_TYPE extern

    -- Tested service parameters declarations
    #T_CARROTGRAPHDEF cg_list[5];

    TEST 1
    FAMILY nominal

    COMMENT  Test Description
    COMMENT  <TD>   
    COMMENT  [hdudispfgrapp-CarrotGraphInit-DB-LLR-001]
    COMMENT  The function'CarrotGraphInit' loops for 1 time and does the following till counter is less than Cg_cnt.
    COMMENT  1.Increment the counter value.
    COMMENT  2.Call the function CarrotGraphAllocat with cg_list as its function parameter.
    COMMENT  3.Increment cg_list by 1.
    COMMENT  Equivalence Class 221
    COMMENT  </TD>	

        ELEMENT
        
		 COMMENT INPUT SECTION:
            
            --Counter used to loop
            VAR Cg_cnt,                             init = 1,                   ev = init           
            
        COMMENT INPUT/OUTPUT SECTION:
            --None  
            
        COMMENT OUTPUT SECTION:
            --None
            
        -- Stub Calls:
        SIMUL
            
            --Allocate a single round dial
            STUB CarrotGraphAllocat (&cg_list)
            
        END SIMUL 
        
        -- Calling the Unit Under Test  
        #CarrotGraphInit(&cg_list[0]);
        END ELEMENT

    END TEST -- TEST 1
	
	TEST 2
	FAMILY nominal

    COMMENT  Test Description
    COMMENT  <TD>   
    COMMENT  [hdudispfgrapp-CarrotGraphInit-DB-LLR-001]
    COMMENT  The function'CarrotGraphInit' loops for 2 times and does the following till counter is less than Cg_cnt.
    COMMENT  1.Increment the counter value.
    COMMENT  2.Call the function CarrotGraphAllocat with cg_list as its function parameter.
    COMMENT  3.Increment cg_list by 1.
    COMMENT  Equivalence Class 221
    COMMENT  </TD>
    
    ELEMENT
    
        COMMENT INPUT SECTION:
            
            --Counter used to loop
            VAR Cg_cnt,                             init = 2,                   ev = init
                        
        COMMENT INPUT/OUTPUT SECTION:
            --None  
            
        COMMENT OUTPUT SECTION:
            --None
            
        -- Stub Calls:
        SIMUL
            
            --Allocate a single round dial
            STUB CarrotGraphAllocat (&cg_list[0])
            STUB CarrotGraphAllocat (&cg_list[1])
            
        END SIMUL 
        
        -- Calling the Unit Under Test  
        #CarrotGraphInit(&cg_list[0]);
        
	END ELEMENT

	END TEST -- TEST 2	

	TEST 3
	FAMILY nominal

    COMMENT  Test Description
    COMMENT  <TD>   
    COMMENT  [hdudispfgrapp-CarrotGraphInit-DB-LLR-001]
    COMMENT  The function'CarrotGraphInit' does nothing when counter is equal to 0.
    COMMENT  Equivalence Class 
    COMMENT  </TD>
    
    ELEMENT
    
        COMMENT INPUT SECTION:
            
            --Counter used to loop
            VAR Cg_cnt,                             init = 0,                   ev = init
                        
        COMMENT INPUT/OUTPUT SECTION:
            --None  
            
        COMMENT OUTPUT SECTION:
            --None
            
        -- Stub Calls:
        SIMUL
            
            --None
            
        END SIMUL 
        
        -- Calling the Unit Under Test  
        #CarrotGraphInit(&cg_list[0]);
        
    END ELEMENT

	END TEST -- TEST 3

END SERVICE -- CarrotGraphInit


--------------------------------------------------------------------------------
-- Declaration of the service TextInit
--------------------------------------------------------------------------------
SERVICE TextInit
SERVICE_TYPE extern

    -- Tested service parameters declarations
    #T_TEXT text_list[5];

    TEST 1
    FAMILY nominal
    COMMENT  Test Description
    COMMENT  <TD>   
    COMMENT  [hdudispfgrapp-TextInit-DB-LLR-001]
    COMMENT  The function'TextInit' loops for 1 time and does the following till counter is less than Text_cnt.
    COMMENT  1.Increment the counter value.
    COMMENT  2.Call the function TextAllocatPdi with text_list as its function parameter.
    COMMENT  3.Increment text_list by 1.
    COMMENT  Equivalence Class 222
    COMMENT  </TD>
    
    ELEMENT
    
        COMMENT INPUT SECTION:
            
            --Counter used to loop
            VAR Text_cnt,                             init = 1,                   ev = init    
			
			VAR PTU_pu8_string,				init = 1,				ev  = init
            
        COMMENT INPUT/OUTPUT SECTION:
            --None  
            
        COMMENT OUTPUT SECTION:
            --None
            
        -- Stub Calls:
        SIMUL
            
            --Allocate a single round dial
            STUB TextAllocatPdi(&text_list[0].ppsOwner,text_list[0].u16X0,text_list[0].u16Y0,text_list[0].eTXAlign,text_list[0].eTXFont,text_list[0].ePenColor,text_list[0].eTXV,text_list[0].eTXFlash)
            
        END SIMUL 
		
		-- Calling the Unit Under Test  
        #TextInit(&text_list[0]);
    END ELEMENT

    END TEST -- TEST 1
	
    TEST 2
    FAMILY nominal
    COMMENT  Test Description
    COMMENT  <TD>   
    COMMENT  [hdudispfgrapp-TextInit-DB-LLR-001]
    COMMENT  The function'TextInit' loops for 2 time and does the following till counter is less than Text_cnt.
    COMMENT  1.Increment the counter value.
    COMMENT  2.Call the function TextAllocatPdi 
    COMMENT  3.Increment text_list by 1.
    COMMENT  Equivalence Class 222
    COMMENT  </TD>
    
    ELEMENT
    
        COMMENT INPUT SECTION:
            
            --Counter used to loop
            VAR Text_cnt,                             init = 2,                   ev = init   

			VAR PTU_pu8_string,				init = 1,				ev  = init
            
        COMMENT INPUT/OUTPUT SECTION:
            --None  
            
        COMMENT OUTPUT SECTION:
            --None
            
        -- Stub Calls:
        SIMUL
            
            --Allocate a single round dial
			
			STUB TextAllocatPdi(&text_list[0].ppsOwner,text_list[0].u16X0,text_list[0].u16Y0,text_list[0].eTXAlign,text_list[0].eTXFont,text_list[0].ePenColor,text_list[0].eTXV,text_list[0].eTXFlash)
			
			STUB TextAllocatPdi(&text_list[1].ppsOwner,text_list[1].u16X0,text_list[1].u16Y0,text_list[1].eTXAlign,text_list[1].eTXFont,text_list[1].ePenColor,text_list[1].eTXV,text_list[1].eTXFlash)
			
			
            --STUB TextAllocatPdi(&text_list[0])
			
			--STUB TextAllocatPdi(&text_list[1])
            
        END SIMUL 
		
		-- Calling the Unit Under Test  
        #TextInit(&text_list[0]);
    END ELEMENT

    END TEST -- TEST 2	
	
    TEST 3
    FAMILY nominal
    COMMENT  Test Description
    COMMENT  <TD>   
    COMMENT  [hdudispfgrapp-TextInit-DB-LLR-001]
    COMMENT  The function'TextInit' does nothing when counter is equal to 0.
    COMMENT  Equivalence Class
    COMMENT  </TD>
    
    ELEMENT
    
        COMMENT INPUT SECTION:
            
            --Counter used to loop
            VAR Text_cnt,                             init = 0,                   ev = init           
            
        COMMENT INPUT/OUTPUT SECTION:
            --None  
            
        COMMENT OUTPUT SECTION:
            --None
            
        -- Stub Calls:
        SIMUL
            
            --None
            
        END SIMUL 
		
		-- Calling the Unit Under Test  
        #TextInit(&text_list[0]);
    END ELEMENT

    END TEST -- TEST 3	

END SERVICE -- TextInit

--------------------------------------------------------------------------------
-- Declaration of the service TextBoxPdiInit
--------------------------------------------------------------------------------
SERVICE TextBoxPdiInit
SERVICE_TYPE extern

    -- Tested service parameters declarations
    #T_STEXTBOXPDIDATA tb_list[5];

    TEST 1
    FAMILY nominal
    COMMENT  Test Description
    COMMENT  <TD>   
    COMMENT  [hdudispfgrapp-TextBoxPdiInit-DB-LLR-001]
    COMMENT  The function'TextBoxPdiInit' loops for 1 time and does the following till counter is less than Tb_cnt.
    COMMENT  1.Increment the counter value.
    COMMENT  2.Call the function TextBoxPdiAllocate with tb_list as its function parameter.
    COMMENT  3.Increment tb_list by 1.
    COMMENT  Equivalence Class 223
    COMMENT  </TD>
    
    ELEMENT
    
        COMMENT INPUT SECTION:
            
            --Counter used to loop
            VAR Tb_cnt,                             init = 1,                   ev = init           
            
        COMMENT INPUT/OUTPUT SECTION:
            --None  
            
        COMMENT OUTPUT SECTION:
            --None
            
        -- Stub Calls:
        SIMUL
            
            --Allocate a single round dial
            STUB TextBoxPdiAllocate (&tb_list)
            
        END SIMUL 
		
		-- Calling the Unit Under Test  
        #TextBoxPdiInit(&tb_list[0]);
    END ELEMENT
	
    END TEST -- TEST 1
	
	TEST 2
    FAMILY nominal
    COMMENT  Test Description
    COMMENT  <TD>   
    COMMENT  [hdudispfgrapp-TextBoxPdiInit-DB-LLR-001]
    COMMENT  The function'TextBoxPdiInit' loops for 2 time and does the following till counter is less than Tb_cnt.
    COMMENT  1.Increment the counter value.
    COMMENT  2.Call the function TextBoxPdiAllocate with tb_list as its function parameter.
    COMMENT  3.Increment tb_list by 1.
    COMMENT  Equivalence Class 223
    COMMENT  </TD>
    
    ELEMENT
    
        COMMENT INPUT SECTION:
            
            --Counter used to loop
            VAR Tb_cnt,                             init = 2,                   ev = init           
            
        COMMENT INPUT/OUTPUT SECTION:
            --None  
            
        COMMENT OUTPUT SECTION:
            --None
            
        -- Stub Calls:
        SIMUL
            
            --Allocate a single round dial
            STUB TextBoxPdiAllocate (&tb_list[0])
            STUB TextBoxPdiAllocate (&tb_list[1])
            
        END SIMUL 
		
		-- Calling the Unit Under Test  
        #TextBoxPdiInit(&tb_list[0]);
    END ELEMENT
	
    END TEST -- TEST 2
	
	TEST 3
    FAMILY nominal
    COMMENT  Test Description
    COMMENT  <TD>   
    COMMENT  [hdudispfgrapp-TextBoxPdiInit-DB-LLR-001]
    COMMENT  The function'TextBoxPdiInit' does nothing when counter is equal to 0.
    COMMENT  Equivalence Class 
    COMMENT  </TD>
    
    ELEMENT
    
        COMMENT INPUT SECTION:
            
            --Counter used to loop
            VAR Tb_cnt,                             init = 0,                   ev = init           
            
        COMMENT INPUT/OUTPUT SECTION:
            --None  
            
        COMMENT OUTPUT SECTION:
            --None
            
        -- Stub Calls:
        SIMUL
            
            --None
            
        END SIMUL 
		
		-- Calling the Unit Under Test  
        #TextBoxPdiInit(&tb_list[0]);
    END ELEMENT
	
    END TEST -- TEST 3	

END SERVICE -- TextBoxPdiInit




