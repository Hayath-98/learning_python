HEADER hdulibstm32f7xxhalcrc, Source Code Ver : 1.3 , TestScript Ver : 1.3
--------------------------------------------------------------------------------
-- Author Name          : Swathi G
--
-- File Name        	: hdulibstm32f7xxhalcrc.ptu
--
-- Test Creation Date  	: 30.08.2017
--
-- Tested Functions 	: HalCrcInit
--                        HalCrcAccumulate
--                        CrcHandle8
--                        CrcHandle16
--
-- Version History     : 
--
-- TEST-VERSION      	TEST-DATE   		TESTER NAME   		MODIFICATIONS
--  ------------        ---------           -----------        -------------
--  1.1                 30.08.2017          Swathi G           Created the PTU file.
--  1.2                 10.11.2017          Swathi G           Updated as per #PR100171.
--  1.3                 14.11.2017          Swathi G           Updated as per #PR100171.
--------------------------------------------------------------------------------
--
-- TESTED FILE INCLUDE DIRECTIVES 
--
--------------------------------------------------------------------------------

#/*============================================================================*/
#/* Module specific includes                                                   */
#/*============================================================================*/

##include "hdulibstm32f7xxhal.h"
##include "hdulibstm32f7xxhalcrc.h"
##include "hdulibbasictypes.h"
--------------------------------------------------------------------------------
--
-- TESTED FILE DECLARATIONS 
--
--------------------------------------------------------------------------------

-- Declarations of the global variables of the tested file

    --None

-- Declarations of the temporary variables of the tested file

    --None

--------------------------------------------------------------------------------

BEGIN

    COMMENT Author Name      : Swathi G
    COMMENT
    COMMENT File Name        : hdulibstm32f7xxhalcrc.ptu 
    COMMENT
    COMMENT Tested Functions : HalCrcInit
    COMMENT                    HalCrcAccumulate
    COMMENT                    CrcHandle8
    COMMENT                    CrcHandle16
    COMMENT
    COMMENT Assumptions and Constraints
    COMMENT <AC>
    COMMENT
    COMMENT Assumption(s):
    COMMENT 1. The value of buffer_length in function 'HalCrcAccumulate' is considerd to be 100 the maximum value.
    COMMENT
    COMMENT Constraint(s):
    COMMENT 1. Following Test script related warnings are observed during Target Execution for volatile keyword member/variable:
    COMMENT    warning #191-D: type qualifier is meaningless on cast type
    COMMENT
    COMMENT 2. The macros '__HAL_LOCK' and '__HAL_UNLOCK' contains the do while loop implementation which cannot be covered for more 
    COMMENT than 1 time as the while loop condition contains 'ZERO'.
    COMMENT </AC>

    COMMENT Equivalence Class Description
    COMMENT <ECD>
    COMMENT
    COMMENT Valid Class(es)
    COMMENT Class 1
    COMMENT In function 'HalCrcInit', h_crc is null. 
    COMMENT
    COMMENT Class 2
    COMMENT In function 'HalCrcInit', h_crc is not null. 
    COMMENT
    COMMENT Class 30
    COMMENT In function 'HalCrcInit' state of h_crc is equal to HAL_CRC_STATE_RESET.
    COMMENT
    COMMENT Class 31
    COMMENT In function 'HalCrcInit' state of h_crc is not equal to HAL_CRC_STATE_RESET.
    COMMENT
    COMMENT Class 3
    COMMENT In function 'HalCrcInit' the function 'HalCRCMspInit' is called. 
    COMMENT
    COMMENT Class 5
    COMMENT In function 'HalCrcInit' the value of DefaultPolynomialUse of Init of h_crc is DEFAULT_POLYNOMIAL_ENABLE. 
    COMMENT
    COMMENT Class 32
    COMMENT In function 'HalCrcInit' the value of DefaultPolynomialUse of Init of h_crc is not DEFAULT_POLYNOMIAL_ENABLE. 
    COMMENT
    COMMENT Class 6
    COMMENT In function 'HalCrcInit' the macro 'MODIFY_REG' is called 
    COMMENT
    COMMENT Class 33
    COMMENT In function 'HalCrcInit' the macro 'WRITE_REG' is called 
    COMMENT
    COMMENT Class 7
    COMMENT In function 'HalCrcInit' the function 'HalCrcExPolynomialSet' is called.
    COMMENT
    COMMENT Class 8
    COMMENT The function 'HalCrcInit' the return value of the function HalCrcExPolynomialSet is not equal to HAL_OK. 
    COMMENT
    COMMENT Class 9
    COMMENT The function 'HalCrcInit' the return value of the function HalCrcExPolynomialSet is equal to HAL_OK.
    COMMENT
    COMMENT Class 10
    COMMENT The function 'HalCrcInit' the DefaultInitValueUse value of Init of h_crc is equal to DEFAULT_INIT_VALUE_ENABLE.
    COMMENT
    COMMENT Class 11
    COMMENT The function 'HalCrcInit' the DefaultInitValueUse value of Init of h_crc is not equal to DEFAULT_INIT_VALUE_ENABLE.	
    COMMENT
    COMMENT Class 15
    COMMENT The function 'HalCrcAccumulate' calls the macro '__HAL_LOCK'.
    COMMENT
    COMMENT Class 16
    COMMENT The function 'HalCrcAccumulate' the InputDataFormat of h_crc is equal to CRC_INPUTDATA_FORMAT_WORDS.
    COMMENT	
    COMMENT Class 17
    COMMENT The function 'HalCrcAccumulate' the function 'CrcHandle8' is called.
    COMMENT
    COMMENT Class 34
    COMMENT The function 'HalCrcAccumulate' the InputDataFormat of h_crc is equal to CRC_INPUTDATA_FORMAT_BYTES.
    COMMENT	
    COMMENT Class 35
    COMMENT The function 'HalCrcAccumulate' the function 'CrcHandle16' is called.
    COMMENT
    COMMENT Class 18
    COMMENT The function 'HalCrcAccumulate' the InputDataFormat of h_crc is equal to CRC_INPUTDATA_FORMAT_HALFWORDS.
    COMMENT
    COMMENT Class 36
    COMMENT The function 'HalCrcAccumulate' the InputDataFormat of h_crc is other than CRC_INPUTDATA_FORMAT_HALFWORDS, 
    COMMENT CRC_INPUTDATA_FORMAT_BYTES and CRC_INPUTDATA_FORMAT_WORDS.
    COMMENT
    COMMENT Class 19
    COMMENT The function 'HalCrcAccumulate' calls the macro '__HAL_UNLOCK'.
    COMMENT
    COMMENT Class 22
    COMMENT The function 'CrcHandle8' the buffer_length mod FOUR is not equal to ZERO.
    COMMENT
    COMMENT Class 37
    COMMENT The function 'CrcHandle8' the buffer_length mod FOUR is equal to ZERO.
    COMMENT
    COMMENT Class 38
    COMMENT The function 'CrcHandle8' the buffer_length mod FOUR is equal to ONE.
    COMMENT
    COMMENT Class 39
    COMMENT The function 'CrcHandle8' the buffer_length mod FOUR is not equal to ONE.
    COMMENT
    COMMENT Class 23
    COMMENT The function 'CrcHandle8' the value of buffer_length mod FOUR is equal to TWO.
    COMMENT
    COMMENT Class 40
    COMMENT The function 'CrcHandle8' the value of buffer_length mod FOUR is not equal to TWO.
    COMMENT
    COMMENT Class 24
    COMMENT The function 'CrcHandle8' the value of buffer_length mod FOUR is equal to THREE.
    COMMENT
    COMMENT Class 41
    COMMENT The function 'CrcHandle8' the value of buffer_length mod FOUR is not equal to THREE.
    COMMENT
    COMMENT Class 26
    COMMENT The function 'CrcHandle16' the buffer_length mod TWO is equal to ZERO.
    COMMENT
    COMMENT Class 27
    COMMENT The function 'CrcHandle16' the buffer_length mod TWO is not equal to ZERO.
    COMMENT
    COMMENT Invalid Class(es)
    COMMENT Class 29
    COMMENT In function 'HalCrcAccumulate' the input parameter h_crc is passed as NULL.
    COMMENT
    COMMENT </ECD>

	
--------------------------------------------------------------------------------
--
-- STUB DECLARATIONS OF THE TESTED OR INTEGRATED UNITS
--
--------------------------------------------------------------------------------

SIMUL

    DEFINE STUB hdulibstm32f7xxhalcrc_c
	
        #T_HAL_STATUS HalCrcExPolynomialSet(T_CRC_HANDLE *h_crc, T_UINT32 Pol, T_UINT32 PolyLength); 
        #void HalCRCMspInit();
		
	END DEFINE

ELSE_SIMUL

    -- No action defined as of now if the module is not simulated
   
END SIMUL
--------------------------------------------------------------------------------
--
-- ENVIRONMENTS DECLARATIONS
--
--------------------------------------------------------------------------------

--IF HOST

-- No special things that have to be done on the host to run the test.

--ELSE

-- No action defined for the target execution as of now

--END IF

--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
-- TESTED FILE ENVIRONMENT
--------------------------------------------------------------------------------

-- Environment of the file hdulibstm32f7xxhalcrc.c
--ENVIRONMENT ENV_hdulibstm32f7xxhalcrc_c

--  None

--END ENVIRONMENT -- ENV_hdulibstm32f7xxhalcrc_c

--USE ENV_hdulibstm32f7xxhalcrc_c

--------------------------------------------------------------------------------
--
-- SERVICES DECLARATIONS
--
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
-- Declaration of the service HalCrcInit
--------------------------------------------------------------------------------
SERVICE HalCrcInit
SERVICE_TYPE extern

    -- Tested service parameters declarations
    #T_CRC_HANDLE h_crc;
    -- By function returned type declaration
    #T_HAL_STATUS ret_HalCrcInit;
    #T_CRC PTU_instance;
 
    -- Default Variables 
    ENVIRONMENT ENV_HalCrcInit
    
        VAR ret_HalCrcInit,     init = HAL_OK,      ev = init
    
    END ENVIRONMENT -- ENV_HalCrcInit
    USE ENV_HalCrcInit

TEST 1
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD>
	COMMENT [hdulibstm32f7xxhalcrc-HalCrcInit-DB-LLR-001]
    COMMENT The function does nothing, when the value of h_crc is not NULL
    COMMENT Equivalence Class 2  
	COMMENT
    COMMENT [hdulibstm32f7xxhalcrc-HalCrcInit-DB-LLR-003]
    COMMENT The function HalCrcInit changes the CRC pheripheral state to HAL_CRC_STATE_BUSY
    COMMENT Equivalence Class None 
    COMMENT
	COMMENT [hdulibstm32f7xxhalcrc-HalCrcInit-DB-LLR-002]
    COMMENT The function HalCrcInit does nothing when State of h_crc is not equal to HAL_CRC_STATE_RESET.
    COMMENT Equivalence Class 31
	COMMENT
    COMMENT [hdulibstm32f7xxhalcrc-HalCrcInit-DB-LLR-004]
    COMMENT The function HalCrcInit does the following when value of DefaultPolynomialUse of Init of 
    COMMENT h_crc is DEFAULT_POLYNOMIAL_ENABLE.
    COMMENT 1. Call the macro WRITE_REG with parameters POL of Instance of h_crc and DEFAULT_CRC32_POLY
    COMMENT 2. Call the macro MODIFY_REG with parameters  CR of Instance of h_crc , CRC_CR_POLYSIZE  and CRC_POLYLENGTH_32B.
    COMMENT Equivalence Class 5, 6, 33 
    COMMENT
    COMMENT [hdulibstm32f7xxhalcrc-HalCrcInit-DB-LLR-006]
    COMMENT The function HalCrcInit Calls the macro WRITE_REG with parameters INIT of Instance of h_crc and 
    COMMENT DEFAULT_CRC_INITVALUE when the DefaultInitValueUse value of Init of h_crc is equal to 
    COMMENT DEFAULT_INIT_VALUE_ENABLE.
    COMMENT Equivalence Class 10, 33
    COMMENT
    COMMENT [hdulibstm32f7xxhalcrc-HalCrcInit-DB-LLR-007]
    COMMENT The function HalCrcInit calls the macro MODIFY_REG  with parameters CR of Instance of h_crc, 
    COMMENT CRC_CR_REV_IN and InputDataInversionMode of Init of h_crc.
    COMMENT Equivalence Class 6
    COMMENT
    COMMENT [hdulibstm32f7xxhalcrc-HalCrcInit-DB-LLR-008]
    COMMENT The function HalCrcInit Call the macro MODIFY_REG  with parameters CR of Instance of h_crc, 
    COMMENT CRC_CR_REV_OUT and OutputDataInversionMode of Init of h_crc.
    COMMENT Equivalence Class 6
    COMMENT
    COMMENT [hdulibstm32f7xxhalcrc-HalCrcInit-DB-LLR-009]
    COMMENT The function HalCrcInit set State of h_crc to HAL_CRC_STATE_READY and return HAL_OK.
    COMMENT Equivalence Class None 
    COMMENT
    COMMENT </TD>
    
    ELEMENT
       
	COMMENT INPUT SECTION:
       
            --None
    
        COMMENT INPUT/OUTPUT SECTION:
       
            --Holds the values required for CRC calculation
            STRUCTURE h_crc.Init, init = { DefaultPolynomialUse => (T_UINT8)DEFAULT_POLYNOMIAL_ENABLE, DefaultInitValueUse => DEFAULT_INIT_VALUE_ENABLE, 
            &     GeneratingPolynomial => 0, CRCLength => 0, InitValue => 0, InputDataInversionMode => 0x08, OutputDataInversionMode => 0x10 }, ev = init
       
            --Holds CRC Register base address
            VAR h_crc.Instance,            init = (T_CRC *)&PTU_instance,                     ev = init
    	
            --Holds the CRC polynomial register value
            VAR PTU_instance.POL,          init = 31278,                                      ev = DEFAULT_CRC32_POLY
    
            --Holds the CRC Control register value
            VAR PTU_instance.CR,           init = 0x07,                                       ev = 0x1F
    
            --Holds the CRC communication state
            VAR h_crc.State,               init = HAL_CRC_STATE_ERROR,                        ev = HAL_CRC_STATE_READY
      
        COMMENT OUTPUT SECTION:   
       
            --Holds the Initial CRC value register
            VAR PTU_instance.INIT,         init = 15,                                         ev = DEFAULT_CRC_INITVALUE 
		
            -- Holds the HalCrcInit function return value
            VAR ret_HalCrcInit,            init = HAL_ERROR,                                  ev = HAL_OK
                
        -- Stub Calls :
        SIMUL

            --No Stubs

        END SIMUL

        -- Calling the Unit Under Test :
        #ret_HalCrcInit = HalCrcInit(&h_crc);
    
    END ELEMENT

END TEST -- TEST 1

TEST 2
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD>
    COMMENT [hdulibstm32f7xxhalcrc-HalCrcInit-DB-LLR-001]
    COMMENT The function returns HAL_ERROR, since the value of h_crc is NULL
    COMMENT Equivalence Class 1  
    COMMENT </TD>
    
    ELEMENT
     
        COMMENT INPUT SECTION:
    
            --None
	
        COMMENT INPUT/OUTPUT SECTION:   

            --None

        COMMENT OUTPUT SECTION:   
        
            -- Holds the HalCrcInit function return value
            VAR ret_HalCrcInit,     init = HAL_OK,      ev = HAL_ERROR            
        
        -- Stub Calls :
        SIMUL

            --No Stubs

        END SIMUL

        -- Calling the Unit Under Test :
        #ret_HalCrcInit = HalCrcInit(NULL);
    
    END ELEMENT

END TEST -- TEST 2

TEST 3
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD>
    COMMENT [hdulibstm32f7xxhalcrc-HalCrcInit-DB-LLR-002]
    COMMENT The function HalCrcInit does the following when State of h_crc is equal to HAL_CRC_STATE_RESET.
    COMMENT 1.Set HAL_UNLOCKED to Lock member of h_crc.
    COMMENT 2.Call the function HalCRCMspInit to initialize the low level hardware.
    COMMENT Equivalence Class 3, 30
    COMMENT
    COMMENT [hdulibstm32f7xxhalcrc-HalCrcInit-DB-LLR-006]
    COMMENT The function HalCrcInit call's the macro WRITE_REG with parameters INIT of Instance of h_crc and InitValue of 
    COMMENT Init of h_crc. when the DefaultInitValueUse value of Init of h_crc is not equal to DEFAULT_INIT_VALUE_ENABLE. 
    COMMENT Equivalence Class 11
    COMMENT </TD>
    	
    ELEMENT
        
      	COMMENT INPUT SECTION:
		 
            --None
	  
        COMMENT INPUT/OUTPUT SECTION:   
        
            --Holds the values required for CRC calculation
            STRUCTURE h_crc.Init, init = { DefaultPolynomialUse => (T_UINT8)DEFAULT_POLYNOMIAL_ENABLE, DefaultInitValueUse => 1, GeneratingPolynomial => 0, 
            &                                               CRCLength => 0, InitValue => 0, InputDataInversionMode => 0, OutputDataInversionMode => 1 }, ev = init            
            
            --Holds CRC Register base address
            VAR h_crc.Instance,                    init = (T_CRC *)&PTU_instance,                    ev = init
        	
            --Holds the CRC communication state
            VAR h_crc.State,                       init = HAL_CRC_STATE_RESET,                       ev = HAL_CRC_STATE_READY
            
            --Holds the CRC polynomial register value
            VAR PTU_instance.POL,                  init = 5,                                         ev = DEFAULT_CRC32_POLY
            
            --Holds the CRC Control register value
            VAR PTU_instance.CR,                   init = 0x5,                                       ev = init
			
            --Holds the Initial CRC value register
            VAR PTU_instance.INIT,                 init = 5,                                         ev = 0       

        COMMENT OUTPUT SECTION:   
            
            -- Holds the HalCrcInit function return value
            VAR ret_HalCrcInit,                    init = HAL_ERROR,                                 ev = HAL_OK
			
			--Holds the CRC Locking object value
            VAR h_crc.Lock,                        init = HAL_LOCKED,                                ev = HAL_UNLOCKED
                
         -- Stub Calls :
        SIMUL
          		
            STUB  HalCRCMspInit()
          		
        END SIMUL

        -- Calling the Unit Under Test :
        #ret_HalCrcInit = HalCrcInit(&h_crc);

    END ELEMENT

END TEST -- TEST 3

TEST 4
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD>
    COMMENT [hdulibstm32f7xxhalcrc-HalCrcInit-DB-LLR-005]
    COMMENT The function HalCrcInit does the following when value of DefaultPolynomialUse of Init of h_crc is 
    COMMENT not equal to DEFAULT_POLYNOMIAL_ENABLE.
    COMMENT 1. Return's HAL_ERROR when the return value of the function HalCrcExPolynomialSet called with 
    COMMENT    parameters h_crc, GeneratingPolynomial of Init of h_crc and CRCLength of Init of h_crc 
    COMMENT    is not equal to HAL_OK.
    COMMENT Equivalence Class 32, 7, 8
    COMMENT
    COMMENT </TD>

    ELEMENT
    
    	COMMENT INPUT SECTION:
    
            --None
	
        COMMENT INPUT/OUTPUT SECTION:
    
            --Holds the values required for CRC calculation
            STRUCTURE h_crc.Init, init = { DefaultPolynomialUse => (T_UINT8)DEFAULT_POLYNOMIAL_DISABLE, DefaultInitValueUse => 0, 
            &                                                              GeneratingPolynomial => 0x80000000, CRCLength => (T_UINT32)0x18, InitValue => 0, 
            &                                                              InputDataInversionMode => 0, OutputDataInversionMode => 0 }, ev = init            
        
            --Holds CRC Register base address
            VAR h_crc.Instance,                  init = (T_CRC *)&PTU_instance,                     ev = init
        	
            --Holds the CRC polynomial register value
            VAR PTU_instance.POL,                init = 0,                                          ev = 0
        	
            --Holds the CRC Control register value
            VAR PTU_instance.CR,                 init = 0,                                          ev = init 
			
            --Holds the CRC communication state
            VAR h_crc.State,                     init = HAL_CRC_STATE_READY,                        ev = HAL_CRC_STATE_BUSY        
	
        COMMENT OUTPUT SECTION:   
        
            -- Holds the HalCrcInit function return value
            VAR ret_HalCrcInit,                  init = HAL_OK,                                     ev = HAL_ERROR                

            -- Stub Calls :
            SIMUL
		
                STUB  HalCrcExPolynomialSet((T_CRC_HANDLE *)&h_crc, (T_UINT32)h_crc.Init.GeneratingPolynomial, (T_UINT32)h_crc.Init.CRCLength)HAL_ERROR
		
            END SIMUL

            -- Calling the Unit Under Test:
            #ret_HalCrcInit = HalCrcInit(&h_crc);
    
    END ELEMENT

END TEST -- TEST 4

TEST 5
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD>
    COMMENT [hdulibstm32f7xxhalcrc-HalCrcInit-DB-LLR-005]
    COMMENT The function HalCrcInit does the following when value of DefaultPolynomialUse of Init of h_crc is 
    COMMENT not equal to DEFAULT_POLYNOMIAL_ENABLE.
    COMMENT 1. does nothing when the return value of the function HalCrcExPolynomialSet called with 
    COMMENT    parameters h_crc, GeneratingPolynomial of Init of h_crc and CRCLength of Init of h_crc 
    COMMENT    is equal to HAL_OK.
    COMMENT Equivalence Class 9, 7, 32
    COMMENT </TD>
	
    ELEMENT
    
        COMMENT INPUT SECTION:
        
            --None
    
        COMMENT INPUT/OUTPUT SECTION: 
        
            --Holds the values required for CRC calculation
            STRUCTURE h_crc.Init, init = { DefaultPolynomialUse => (T_UINT8)DEFAULT_POLYNOMIAL_DISABLE, DefaultInitValueUse => 0, 
            &                                               GeneratingPolynomial => 0x80000000, CRCLength => 0, InitValue => 0, InputDataInversionMode => 0, 
            &                                                            OutputDataInversionMode => 0 },         ev = init
          
            --Holds CRC Register base address
            VAR h_crc.Instance,                          init = (T_CRC *)&PTU_instance,               ev = init
			
            --Holds the CRC polynomial register value
            VAR PTU_instance.POL,                        init = 0,                                    ev = 0
			
            --Holds the CRC Control register value
            VAR PTU_instance.CR,                         init = 5,                                    ev = init
			
            --Holds the CRC communication state
            VAR h_crc.State,                             init = HAL_CRC_STATE_BUSY,                   ev = HAL_CRC_STATE_READY
    
        COMMENT OUTPUT SECTION:   
        
            -- Holds the HalCrcInit function return value
            VAR ret_HalCrcInit,                          init = HAL_ERROR,                            ev = HAL_OK
            
        -- Stub Calls :
        SIMUL
	
            STUB  HalCrcExPolynomialSet((T_CRC_HANDLE *)&h_crc, (T_UINT32)h_crc.Init.GeneratingPolynomial, (T_UINT32)h_crc.Init.CRCLength)HAL_OK
		
        END SIMUL

        -- Calling the Unit Under Test :
        #ret_HalCrcInit = HalCrcInit(&h_crc);
    
    END ELEMENT

END TEST -- TEST 5

END SERVICE -- HalCrcInit

--------------------------------------------------------------------------------
-- Declaration of the service HalCrcAccumulate
--------------------------------------------------------------------------------
SERVICE HalCrcAccumulate
SERVICE_TYPE extern

    -- Tested service parameters declarations
    #T_CRC_HANDLE h_crc;
    #T_UINT32 p_buffer[100];
    #T_UINT32 buffer_length;
    -- By function returned type declaration
    #T_UINT32 ret_HalCrcAccumulate;
    #T_CRC PTU_instance;

    ENVIRONMENT ENV_HalCrcAccumulate
    
    VAR ret_HalCrcAccumulate,     init = 0,       ev = init
    END ENVIRONMENT -- ENV_HalCrcAccumulate
    USE ENV_HalCrcAccumulate

TEST 1
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD>
    COMMENT [hdulibstm32f7xxhalcrc-HalCrcAccumulate-DB-LLR-001]
    COMMENT The function HalCrcAccumulate lock's the process by calling __HAL_LOCK with parameter h_crc and 
    COMMENT set the State of h_crc to HAL_CRC_STATE_BUSY
    COMMENT Equivalence Class 15
    COMMENT
    COMMENT [hdulibstm32f7xxhalcrc-HalCrcAccumulate-DB-LLR-002]
    COMMENT The function HalCrcAccumulate does the following.
    COMMENT When InputDataFormat of h_crc is equal to CRC_INPUTDATA_FORMAT_BYTES then call the function CrcHandle8 
    COMMENT with parameters h_crc, p_buffer and buffer_length and store the return value in a temporary variable.
    COMMENT Equivalence Class 34, 17
    COMMENT
    COMMENT [hdulibstm32f7xxhalcrc-HalCrcAccumulate-DB-LLR-003]
    COMMENT The function HalCrcAccumulate set the State of h_crc to HAL_CRC_STATE_READY and unlock the 
    COMMENT process by calling __HAL_UNLOCK with parameter h_crc.
    COMMENT Equivalence Class 19
    COMMENT
    COMMENT [hdulibstm32f7xxhalcrc-HalCrcAccumulate-DB-LLR-004]
    COMMENT The function HalCrcAccumulate returns the computed CRC value.
    COMMENT Equivalence Class None
    COMMENT
    COMMENT [hdulibstm32f7xxhalcrc-CrcHandle8-DB-LLR-001]
    COMMENT The function CrcHandle8 loop buffer_length divide by four times and does the following.
    COMMENT 1.Copy each 4 byte of content of p_buffer to DR of Instance of h_crc.
    COMMENT in this test case while loop is exercised for 2 or more times.
    COMMENT Equivalence Class None
    COMMENT
    COMMENT [hdulibstm32f7xxhalcrc-CrcHandle8-DB-LLR-003]
    COMMENT The function CrcHandle8 does the following. when buffer_length mod FOUR is not equal to 
    COMMENT ZERO and buffer_length mod FOUR is equal to TWO then content of p_buffer with index latest 
    COMMENT loop counter value multiplied by FOUR left shift by EIGHT bitwise OR with content of 
    COMMENT p_buffer with index  as(loop counter value multiplied by FOUR plus ONE )is stored 
    COMMENT in DR of Instance of h_crc.
	COMMENT In this test case the buffer length value is tested for the nominal boundary value
    COMMENT Equivalence Class 22, 23
    COMMENT
    COMMENT [hdulibstm32f7xxhalcrc-CrcHandle8-DB-LLR-005]
    COMMENT The function CrcHandle8 return's the computed  CRC value (value of DR of Instance of h_crc).
    COMMENT Equivalence Class None
    COMMENT
    COMMENT </TD>
	
    ELEMENT
    
	COMMENT INPUT SECTION:
    
            --Holds the buffer length
            VAR buffer_length,                          init = 50,                                              ev = init
        
            --Holds the CRC Data format
            VAR h_crc.InputDataFormat,                  init = CRC_INPUTDATA_FORMAT_BYTES,                      ev = init
        
            --Holds the CRC buffer content
            ARRAY p_buffer,                             init = { 0..49 => 96, others => 95 },                   ev = init
		
        COMMENT INPUT/OUTPUT SECTION:   

            --Holds the values required for CRC calculation
            STRUCTURE h_crc.Init,                       init = { DefaultPolynomialUse => (T_UINT8)DEFAULT_POLYNOMIAL_ENABLE, DefaultInitValueUse => 0, 
            &                                                    GeneratingPolynomial => 0, CRCLength => 0, InitValue => 0, InputDataInversionMode => 0, 
            &                                                    OutputDataInversionMode => 0 },                ev = init    

            --Holds CRC Register base address
            VAR h_crc.Instance,                         init = (T_CRC *)&PTU_instance,                          ev =init
		
            --Holds the CRC Data register value
            VAR PTU_instance.DR,                        init = 5,                                               ev = 0x60006000 
			
            --Holds the CRC communication state
            VAR h_crc.State,                            init = HAL_CRC_STATE_RESET,                             ev = HAL_CRC_STATE_READY
			
            --Holds the CRC Locking object value
            VAR h_crc.Lock,                             init = HAL_UNLOCKED,                                    ev = init

        COMMENT OUTPUT SECTION:           
				
            -- Holds the HalCrcAccumulate function return value
            VAR ret_HalCrcAccumulate,                   init = 0,                                               ev = 0x60006000

        -- Stub Calls :
        SIMUL
		
            --No stubs
		
        END SIMUL

        -- Calling the Unit Under Test :
           #ret_HalCrcAccumulate = HalCrcAccumulate(&h_crc, p_buffer, buffer_length);
    
    END ELEMENT

END TEST -- TEST 1

TEST 2
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD>
    COMMENT [hdulibstm32f7xxhalcrc-HalCrcAccumulate-DB-LLR-002]
    COMMENT The function HalCrcAccumulate does the following.
    COMMENT when InputDataFormat of h_crc is equal to CRC_INPUTDATA_FORMAT_HALFWORDS 
    COMMENT then call the function CrcHandle16 with parameters h_crc, p_buffer and 
    COMMENT buffer_length and store the return value in a temporary variable.
    COMMENT Equivalence Class 18, 35
    COMMENT
    COMMENT [hdulibstm32f7xxhalcrc-CrcHandle16-DB-LLR-001]
    COMMENT The function CrcHandle16 loops buffer_length divide by two times and does the following.
    COMMENT 1. content of p_buffer with index latest loop counter value multiplied by TWO left shift 
    COMMENT    by SIXTEEN bitwise OR with content of p_buffer with index  as(loop counter value 
    COMMENT    multiplied by TWO plus ONE )is stored in DR of Instance of h_crc.
	COMMENT In this test case the buffer length value is tested for the nominal boundary value
    COMMENT Equivalence Class None
    COMMENT
	COMMENT [hdulibstm32f7xxhalcrc-CrcHandle16-DB-LLR-002]
    COMMENT The function CrcHandle16 does nothing when buffer_length mod TWO is equal  to ZERO.
    COMMENT Equivalence Class 26
    COMMENT
    COMMENT [hdulibstm32f7xxhalcrc-CrcHandle16-DB-LLR-003]
    COMMENT The function CrcHandle16 return the computed  CRC value (value of DR of Instance of h_crc).
    COMMENT Equivalence Class None
    COMMENT
    COMMENT </TD>
	
    ELEMENT
    
        COMMENT INPUT SECTION:
    
            --Holds the buffer length
            VAR buffer_length,                         init = 50,                                          ev = init
			
            --Holds the CRC Data format
            VAR h_crc.InputDataFormat,                 init = CRC_INPUTDATA_FORMAT_HALFWORDS,              ev = init	
			
            --Holds the CRC buffer content
            ARRAY p_buffer,                            init = { 0..49 => 96, others => 95 },               ev = init
			
        COMMENT INPUT/OUTPUT SECTION:   

            --Holds the values required for CRC calculation
            STRUCTURE h_crc.Init,                      init = { DefaultPolynomialUse => (T_UINT8)DEFAULT_POLYNOMIAL_ENABLE, 
            &                                                  DefaultInitValueUse => 0, GeneratingPolynomial => 0, CRCLength => 0, InitValue => 0, 
            &                                                  InputDataInversionMode => 0, OutputDataInversionMode => 0 },      ev = init 

            --Holds CRC Register base address
            VAR h_crc.Instance,                        init = (T_CRC *)&PTU_instance,                      ev =init
			
            --Holds the CRC Data register value
            VAR PTU_instance.DR,                       init = 0,                                           ev =0x600000
			
            --Holds the CRC communication state
            VAR h_crc.State,                           init = HAL_CRC_STATE_RESET,                         ev = HAL_CRC_STATE_READY
			
            --Holds the CRC Locking object value
            VAR h_crc.Lock,                            init = HAL_UNLOCKED,                                ev = HAL_UNLOCKED

        COMMENT OUTPUT SECTION:   
        
            -- Holds the HalCrcAccumulate function return value
            VAR ret_HalCrcAccumulate,                  init = 0,                                           ev = 0x600000

        -- Stub Calls :
        SIMUL

            --No Stubs

        END SIMUL
		
        -- Calling the Unit Under Test :
            #ret_HalCrcAccumulate = HalCrcAccumulate(&h_crc, p_buffer, buffer_length);
    
    END ELEMENT

END TEST -- TEST 2

TEST 3
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD>
    COMMENT [hdulibstm32f7xxhalcrc-HalCrcAccumulate-DB-LLR-002]
    COMMENT The function HalCrcAccumulate does the following.
    COMMENT when InputDataFormat of h_crc is equal to CRC_INPUTDATA_FORMAT_HALFWORDS 
    COMMENT then call the function CrcHandle16 with parameters h_crc, p_buffer and 
    COMMENT buffer_length and store the return value in a temporary variable.
    COMMENT Equivalence Class 18, 35
    COMMENT
    COMMENT [hdulibstm32f7xxhalcrc-CrcHandle16-DB-LLR-001]
    COMMENT The function CrcHandle16 loops buffer_length divide by two times and does the following.
    COMMENT 1. content of p_buffer with index latest loop counter value multiplied by TWO left shift 
    COMMENT    by SIXTEEN bitwise OR with content of p_buffer with index  as(loop counter value 
    COMMENT    multiplied by TWO plus ONE )is stored in DR of Instance of h_crc. (for loop is exercided for 1 time)
    COMMENT Equivalence Class None
    COMMENT
    COMMENT [hdulibstm32f7xxhalcrc-CrcHandle16-DB-LLR-002]
    COMMENT The function CrcHandle16 does the following. when buffer_length mod TWO is not equal  to 
    COMMENT ZERO then content of p_buffer with index latest loop counter value multiplied by 
    COMMENT TWO is stored in DR of Instance of h_crc.
	COMMENT In this test case the buffer length value is tested for the minimum+1 boundary value
    COMMENT Equivalence Class 27
    COMMENT </TD>
	
    ELEMENT
    
        COMMENT INPUT SECTION:
    
            --Holds the buffer length
            VAR buffer_length,                          init = 1,                                            ev = init
			
            --Holds the CRC Data format
            VAR h_crc.InputDataFormat,                  init = CRC_INPUTDATA_FORMAT_HALFWORDS,               ev = init
			
            --Holds the CRC buffer content
            ARRAY p_buffer,                             init = { 0 => 96, others => 95 },                    ev = init
			
        COMMENT INPUT/OUTPUT SECTION:   

            --Holds the values required for CRC calculation
            STRUCTURE h_crc.Init,                       init = { DefaultPolynomialUse => (T_UINT8)DEFAULT_POLYNOMIAL_ENABLE, DefaultInitValueUse => 0, 
            &                                              GeneratingPolynomial => 0, CRCLength => 0, InitValue => 0, InputDataInversionMode => 0, 
            &                                              OutputDataInversionMode => 0 },                   ev = init

            --Holds CRC Register base address
            VAR h_crc.Instance,                         init = (T_CRC *)&PTU_instance,                       ev =init
			
            --Holds the CRC Data register value
            VAR PTU_instance.DR,                        init = 0,                                            ev = 0x60
			
            --Holds the CRC communication state
            VAR h_crc.State,                            init = HAL_CRC_STATE_RESET,                          ev = HAL_CRC_STATE_READY
			
            --Holds the CRC Locking object value
            VAR h_crc.Lock,                             init = HAL_UNLOCKED,                                 ev = init

        COMMENT OUTPUT SECTION:   
        
            -- Holds the HalCrcAccumulate function return value
            VAR ret_HalCrcAccumulate,                   init = 0,                                            ev = 0x60
			
        -- Stub Calls :
        SIMUL

            --No Stubs

        END SIMUL

        -- Calling the Unit Under Test :
            #ret_HalCrcAccumulate = HalCrcAccumulate(&h_crc, p_buffer, buffer_length);
			
    END ELEMENT

 END TEST -- TEST 3

TEST 4
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD>
    COMMENT [hdulibstm32f7xxhalcrc-HalCrcAccumulate-DB-LLR-002]
    COMMENT The function HalCrcAccumulate does the following.
    COMMENT When InputDataFormat of h_crc is equal to CRC_INPUTDATA_FORMAT_BYTES then call the function CrcHandle8 
    COMMENT with parameters h_crc, p_buffer and buffer_length and store the return value in a temporary variable.
    COMMENT Equivalence Class 17, 34
    COMMENT
    COMMENT [hdulibstm32f7xxhalcrc-CrcHandle8-DB-LLR-001]
    COMMENT The function CrcHandle8 loop buffer_length divide by four times and does the following.
    COMMENT 1.Copy each 4 byte of content of p_buffer to DR of Instance of h_crc.
    COMMENT in this test case for loop is exercised for 0 times.
    COMMENT Equivalence Class None
    COMMENT
    COMMENT [hdulibstm32f7xxhalcrc-CrcHandle8-DB-LLR-002]
    COMMENT The function CrcHandle8 does the following.
    COMMENT when buffer_length mod FOUR is not equal to ZERO and buffer_length mod FOUR is equal to 
    COMMENT ONE then content of p_buffer with index latest loop counter value multiplied by FOUR 
    COMMENT is stored in DR of Instance of h_crc.
	COMMENT In this test case the buffer length value is tested for the minimum+1 boundary value
    COMMENT Equivalence Class 22, 38, 41 
    COMMENT </TD>
	
    ELEMENT
    
        COMMENT INPUT SECTION:
    
            --Holds the buffer length
            VAR buffer_length,                                  init = 1,                                         ev = init
			
            --Holds the CRC Data format
            VAR h_crc.InputDataFormat,                          init = CRC_INPUTDATA_FORMAT_BYTES,                ev = init
			
            --Holds the CRC buffer content
            ARRAY p_buffer,                                     init = { 0 => 96, others => 95 },                 ev = init
			
        COMMENT INPUT/OUTPUT SECTION:   

            --Holds the values required for CRC calculation
            STRUCTURE h_crc.Init,                               init = { DefaultPolynomialUse => (T_UINT8)DEFAULT_POLYNOMIAL_ENABLE, DefaultInitValueUse => 0, 
            &                                                               GeneratingPolynomial => 0, CRCLength => 0, InitValue => 0, InputDataInversionMode => 0, 
            &                                                               OutputDataInversionMode => 0 },       ev = init

            --Holds CRC Register base address
            VAR h_crc.Instance,                                 init = (T_CRC *)&PTU_instance,                    ev =init
			
            --Holds the CRC Data register value
            VAR PTU_instance.DR,                                init = 0,                                         ev = 0x60
			
            --Holds the CRC communication state
            VAR h_crc.State,                                    init = HAL_CRC_STATE_RESET,                       ev = HAL_CRC_STATE_READY
			
            --Holds the CRC Locking object value
            VAR h_crc.Lock,                                     init = HAL_UNLOCKED,                              ev = init

        COMMENT OUTPUT SECTION:   
        
            -- Holds the HalCrcAccumulate function return value
            VAR ret_HalCrcAccumulate,                           init = 0,                                         ev = 0x60
			
        -- Stub Calls :
        SIMUL

            --No Stubs

        END SIMUL

        -- Calling the Unit Under Test :
        #ret_HalCrcAccumulate = HalCrcAccumulate(&h_crc, p_buffer, buffer_length);
			
    END ELEMENT

END TEST -- TEST 4

TEST 5
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD>
    COMMENT [hdulibstm32f7xxhalcrc-HalCrcAccumulate-DB-LLR-002]
    COMMENT The function HalCrcAccumulate does the following.
    COMMENT When InputDataFormat of h_crc is equal to CRC_INPUTDATA_FORMAT_BYTES then call the function CrcHandle8 
    COMMENT with parameters h_crc, p_buffer and buffer_length and store the return value in a temporary variable.
    COMMENT Equivalence Class 17, 34
    COMMENT
    COMMENT [hdulibstm32f7xxhalcrc-CrcHandle8-DB-LLR-001]
    COMMENT The function CrcHandle8 loop buffer_length divide by four times and does the following.
    COMMENT 1.Copy each 4 byte of content of p_buffer to DR of Instance of h_crc.
    COMMENT in this test case for loop is exercised for 2 or more times.
    COMMENT Equivalence Class None
    COMMENT
    COMMENT [hdulibstm32f7xxhalcrc-CrcHandle8-DB-LLR-004]
    COMMENT The function CrcHandle8 does the following.
    COMMENT when buffer_length mod FOUR is not equal to ZERO and buffer_length mod FOUR is equal to THREE then 
    COMMENT 1. content of p_buffer with index latest loop counter value multiplied by FOUR left shift by 
    COMMENT   EIGHT bitwise OR with content of p_buffer with index  as(loop counter value multiplied by FOUR 
    COMMENT   plus ONE )is stored in DR of Instance of h_crc.
    COMMENT 2. content of p_buffer with index latest loop counter value multiplied by FOUR plus TWO 
    COMMENT    stored in DR of Instance of h_crc.
	COMMENT In this test case the buffer length value is tested for the maximum-1 boundary value
    COMMENT Equivalence Class 22, 39, 40, 24
    COMMENT </TD>
	
    ELEMENT
    
        COMMENT INPUT SECTION:
    
            --Holds the buffer length
            VAR buffer_length,                         init = 99,                                        ev = init
		
            --Holds the CRC Data format
            VAR h_crc.InputDataFormat,                 init = CRC_INPUTDATA_FORMAT_BYTES,                ev = init
		
            --Holds the CRC buffer content
            ARRAY p_buffer,                            init = { 0..98 => 96, others => 95 },             ev = init
			
        COMMENT INPUT/OUTPUT SECTION:   

            --Holds the values required for CRC calculation
            STRUCTURE h_crc.Init,                      init = { DefaultPolynomialUse => (T_UINT8)DEFAULT_POLYNOMIAL_ENABLE, DefaultInitValueUse => 0, 
            &                                                   GeneratingPolynomial => 0, CRCLength => 0, InitValue => 0, InputDataInversionMode => 0, 
            &                                                   OutputDataInversionMode => 0 },          ev = init

            --Holds CRC Register base address
            VAR h_crc.Instance,                        init = (T_CRC *)&PTU_instance,                    ev = init
		
            --Holds the CRC Data register value
            VAR PTU_instance.DR,                       init = 0,                                         ev = 0x60006000
		
            --Holds the CRC communication state
            VAR h_crc.State,                           init = HAL_CRC_STATE_RESET,                       ev = HAL_CRC_STATE_READY
		
            --Holds the CRC Locking object value
            VAR h_crc.Lock,                            init = HAL_UNLOCKED,                              ev = init

        COMMENT OUTPUT SECTION:   
        
            -- Holds the HalCrcAccumulate function return value
            VAR ret_HalCrcAccumulate,                  init = 0,                                         ev = 0x60006000
			
        -- Stub Calls :
        SIMUL

            --No Stubs

        END SIMUL

        -- Calling the Unit Under Test :
        #ret_HalCrcAccumulate = HalCrcAccumulate(&h_crc, p_buffer, buffer_length);
			
    END ELEMENT

END TEST -- TEST 5

TEST 6
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD>
    COMMENT [hdulibstm32f7xxhalcrc-HalCrcAccumulate-DB-LLR-002]
    COMMENT The function HalCrcAccumulate does the following.
    COMMENT When InputDataFormat of h_crc is equal to CRC_INPUTDATA_FORMAT_BYTES then call the function CrcHandle8 
    COMMENT with parameters h_crc, p_buffer and buffer_length and store the return value in a temporary variable.
    COMMENT Equivalence Class 17, 34
    COMMENT
    COMMENT [hdulibstm32f7xxhalcrc-CrcHandle8-DB-LLR-001]
    COMMENT The function CrcHandle8 loop buffer_length divide by four times and does the following.
    COMMENT 1.Copy each 4 byte of content of p_buffer to DR of Instance of h_crc.
    COMMENT in this test case while loop is exercised for 2 or more times.
	COMMENT In this test case the buffer length value is tested for the maximum boundary value
    COMMENT Equivalence Class None
    COMMENT </TD>
	
    ELEMENT
    
        COMMENT INPUT SECTION:
    
            --Holds the buffer length
            VAR buffer_length,                                 init = 100,                                           ev = init
	
            --Holds the CRC Data format
            VAR h_crc.InputDataFormat,                         init = CRC_INPUTDATA_FORMAT_BYTES,                    ev = init
	
            --Holds the CRC buffer content
            ARRAY p_buffer,                                    init = { others => 96 },                              ev = init
		
        COMMENT INPUT/OUTPUT SECTION:   

            --Holds the values required for CRC calculation
            STRUCTURE h_crc.Init,                              init = { DefaultPolynomialUse => (T_UINT8)DEFAULT_POLYNOMIAL_ENABLE, DefaultInitValueUse => 0, 
            &                                                      GeneratingPolynomial => 0, CRCLength => 0, InitValue => 0, InputDataInversionMode => 0, 
            &                                                              OutputDataInversionMode => 0 },           ev = init

            --Holds CRC Register base address
            VAR h_crc.Instance,                                init = (T_CRC *)&PTU_instance,                        ev = init
	
            --Holds the CRC Data register value
            VAR PTU_instance.DR,                               init = 0,                                             ev = 0x60000000
	
            --Holds the CRC communication state
            VAR h_crc.State,                                   init = HAL_CRC_STATE_RESET,                           ev = HAL_CRC_STATE_READY
	
            --Holds the CRC Locking object value
            VAR h_crc.Lock,                                    init = HAL_UNLOCKED,                                  ev = init

        COMMENT OUTPUT SECTION:   
        
            -- Holds the HalCrcAccumulate function return value
            VAR ret_HalCrcAccumulate,                          init = 0,                                             ev = 0x60000000
			
        -- Stub Calls :
        SIMUL

            --No Stubs

        END SIMUL

        -- Calling the Unit Under Test :
        #ret_HalCrcAccumulate = HalCrcAccumulate(&h_crc, p_buffer, buffer_length);
			
    END ELEMENT

END TEST -- TEST 6

TEST 7
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD>
    COMMENT [hdulibstm32f7xxhalcrc-HalCrcAccumulate-DB-LLR-002]
    COMMENT The function HalCrcAccumulate does nothing as the input value 
    COMMENT of InputDataFormat of h_crc is other than CRC_INPUTDATA_FORMAT_WORDS, CRC_INPUTDATA_FORMAT_BYTES and 
    COMMENT CRC_INPUTDATA_FORMAT_HALFWORDS.
    COMMENT Equivalence Class 36
    COMMENT </TD>
	
    ELEMENT
    
        COMMENT INPUT SECTION:
			
            --Holds the CRC Data format
            VAR h_crc.InputDataFormat,                                 init = 0,                                    ev = init
			
        COMMENT INPUT/OUTPUT SECTION:   

            --Holds the values required for CRC calculation
            STRUCTURE h_crc.Init,                                      init = { DefaultPolynomialUse => (T_UINT8)DEFAULT_POLYNOMIAL_ENABLE, DefaultInitValueUse => 0, 
            &                                                               GeneratingPolynomial => 0, CRCLength => 0, InitValue => 0, InputDataInversionMode => 0, 
            &                                                                     OutputDataInversionMode => 0 },   ev = init

            --Holds CRC Register base address
            VAR h_crc.Instance,                                        init = (T_CRC *)&PTU_instance,               ev = init
		
            --Holds the CRC Data register value
            VAR PTU_instance.DR,                                       init = 0,                                    ev = init
		
            --Holds the CRC communication state
            VAR h_crc.State,                                           init = HAL_CRC_STATE_RESET,                  ev = HAL_CRC_STATE_READY
		
            --Holds the CRC Locking object value
            VAR h_crc.Lock,                                            init = HAL_UNLOCKED,                         ev = init

        COMMENT OUTPUT SECTION:   
       
            -- Holds the HalCrcAccumulate function return value
            VAR ret_HalCrcAccumulate,                                  init = 10,                                   ev = 0
			
        -- Stub Calls :
        SIMUL
		
            --No stubs
		
        END SIMUL

        -- Calling the Unit Under Test :
        #ret_HalCrcAccumulate = HalCrcAccumulate(&h_crc, NULL, 0);
			
    END ELEMENT

END TEST -- TEST 7

TEST 8
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD>
    COMMENT [hdulibstm32f7xxhalcrc-HalCrcAccumulate-DB-LLR-002]
    COMMENT The function HalCrcAccumulate does the following.
    COMMENT 1. when InputDataFormat of h_crc is equal to CRC_INPUTDATA_FORMAT_WORDS then does the following.
    COMMENT    a. loop buffer_length times and store the content of p_buffer with loop counter as 
    COMMENT       index to DR of Instance of h_crc.(for loop is exercised for 0 time)
    COMMENT    b. Store the value of DR to a temporary variable.
	COMMENT In this test case the buffer length value is tested for the minimum boundary value
    COMMENT Equivalence Class 16
    COMMENT </TD>
	
    ELEMENT
    
        COMMENT INPUT SECTION:
    
            --Holds the buffer length
            VAR buffer_length,                                 init = 0,                                              ev = init
			
            --Holds the CRC Data format
            VAR h_crc.InputDataFormat,                         init = CRC_INPUTDATA_FORMAT_WORDS,                     ev = init
							
        COMMENT INPUT/OUTPUT SECTION:   
        
            --Holds the values required for CRC calculation
            STRUCTURE h_crc.Init,                              init = { DefaultPolynomialUse => (T_UINT8)DEFAULT_POLYNOMIAL_ENABLE, DefaultInitValueUse => 0, 
            &                                                    GeneratingPolynomial => 0, CRCLength => 0, InitValue => 0, InputDataInversionMode => 0, 
            &                                                      OutputDataInversionMode => 0 },                    ev = init

            --Holds CRC Register base address
            VAR h_crc.Instance,                                init = (T_CRC *)&PTU_instance,                         ev =init
			
            --Holds the CRC Data register value
            VAR PTU_instance.DR,                               init = 0,                                              ev = 0
			
            --Holds the CRC communication state
            VAR h_crc.State,                                   init = HAL_CRC_STATE_RESET,                            ev = HAL_CRC_STATE_READY
			
            --Holds the CRC Locking object value
            VAR h_crc.Lock,                                    init = HAL_UNLOCKED,                                   ev = init

        COMMENT OUTPUT SECTION:   
        
            -- Holds the HalCrcAccumulate function return value
            VAR ret_HalCrcAccumulate,                          init = 0,                                              ev = 0
			
        -- Stub Calls :
        SIMUL

            --No Stubs

        END SIMUL

        -- Calling the Unit Under Test :
        #ret_HalCrcAccumulate = HalCrcAccumulate(&h_crc, NULL, buffer_length);
			
    END ELEMENT

END TEST -- TEST 8

TEST 9
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD>
    COMMENT [hdulibstm32f7xxhalcrc-HalCrcAccumulate-DB-LLR-002]
    COMMENT The function HalCrcAccumulate does the following.
    COMMENT 1. when InputDataFormat of h_crc is equal to CRC_INPUTDATA_FORMAT_WORDS then does the following.
    COMMENT    a. loop buffer_length times and store the content of p_buffer with loop counter as 
    COMMENT       index to DR of Instance of h_crc.(for loop is exercised for 1 time)
    COMMENT    b. Store the value of DR to a temporary variable.
	COMMENT In this test case the buffer length value is tested for the minimum+1 boundary value
    COMMENT Equivalence Class 16
    COMMENT </TD>
	
    ELEMENT
    
        COMMENT INPUT SECTION:
    
            --Holds the buffer length
            VAR buffer_length,                         init = 1,                                        ev = init
			
            --Holds the CRC Data format
            VAR h_crc.InputDataFormat,                 init = CRC_INPUTDATA_FORMAT_WORDS,               ev = init
			
            --Holds the CRC buffer content
            ARRAY p_buffer,                            init = { 0 => 96, others => 95 },                ev = init
			
        COMMENT INPUT/OUTPUT SECTION:   

            --Holds the values required for CRC calculation
            STRUCTURE h_crc.Init,                      init = { DefaultPolynomialUse => (T_UINT8)DEFAULT_POLYNOMIAL_ENABLE, DefaultInitValueUse => 0, 
            &                                                     GeneratingPolynomial => 0, CRCLength => 0, InitValue => 0, InputDataInversionMode => 0, 
            &                                                    OutputDataInversionMode => 0 },        ev = init

            --Holds CRC Register base address
            VAR h_crc.Instance,                        init = (T_CRC *)&PTU_instance,                   ev = init
			
            --Holds the CRC Data register value
            VAR PTU_instance.DR,                       init = 0,                                        ev = 96
			
            --Holds the CRC communication state
            VAR h_crc.State,                           init = HAL_CRC_STATE_RESET,                      ev = HAL_CRC_STATE_READY
			
            --Holds the CRC Locking object value
            VAR h_crc.Lock,                            init = HAL_UNLOCKED,                             ev = init

        COMMENT OUTPUT SECTION:   
        
            -- Holds the HalCrcAccumulate function return value
            VAR ret_HalCrcAccumulate,                  init = 0,                                        ev = 96
			
        -- Stub Calls :
        SIMUL

            --No Stubs

        END SIMUL

        -- Calling the Unit Under Test :
        #ret_HalCrcAccumulate = HalCrcAccumulate(&h_crc, p_buffer, buffer_length);
			
    END ELEMENT

END TEST -- TEST 9
	
TEST 10
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD>
	COMMENT [hdulibstm32f7xxhalcrc-HalCrcAccumulate-DB-LLR-002]
    COMMENT The function HalCrcAccumulate does the following.
    COMMENT When InputDataFormat of h_crc is equal to CRC_INPUTDATA_FORMAT_BYTES then call the function CrcHandle8 
    COMMENT with parameters h_crc, p_buffer and buffer_length and store the return value in a temporary variable.
    COMMENT IN this test case the for loop is exercised for 0 times
    COMMENT Equivalence Class 17, 34
    COMMENT
    COMMENT [hdulibstm32f7xxhalcrc-CrcHandle8-DB-LLR-001]
    COMMENT The function CrcHandle8 does not loop, since the buffer_length divide by four times is 
    COMMENT not greater than 0 as the buffer length is 0.
	COMMENT In this test case the buffer length value is tested for the minimum boundary value
    COMMENT Equivalence Class None
    COMMENT </TD>
	
    ELEMENT
    
        COMMENT INPUT SECTION:
    
            --Holds the buffer length
            VAR buffer_length,                   init = 0,                                  ev = init
			
            --Holds the CRC Data format
            VAR h_crc.InputDataFormat,           init = CRC_INPUTDATA_FORMAT_BYTES,         ev = init
			
        COMMENT INPUT/OUTPUT SECTION:   

            --Holds the values required for CRC calculation
            STRUCTURE h_crc.Init,                init = { DefaultPolynomialUse => (T_UINT8)DEFAULT_POLYNOMIAL_ENABLE, DefaultInitValueUse => 0, 
            &                                      GeneratingPolynomial => 0, CRCLength => 0, InitValue => 0, InputDataInversionMode => 0, 
            &                                      OutputDataInversionMode => 0 },          ev = init           

            --Holds CRC Register base address
            VAR h_crc.Instance,                  init = (T_CRC *)&PTU_instance,             ev =init
			
            --Holds the CRC Data register value
            VAR PTU_instance.DR,                 init = 6,                                  ev = init
			
            --Holds the CRC communication state
            VAR h_crc.State,                     init = HAL_CRC_STATE_RESET,                ev = HAL_CRC_STATE_READY
			
            --Holds the CRC Locking object value
            VAR h_crc.Lock,                      init = HAL_UNLOCKED,                       ev = init

        COMMENT OUTPUT SECTION:   
       
            -- Holds the HalCrcAccumulate function return value
            VAR ret_HalCrcAccumulate,            init = 10,                                 ev = 0x6
			
        -- Stub Calls :
        SIMUL

            --No Stubs

        END SIMUL

        -- Calling the Unit Under Test :
        #ret_HalCrcAccumulate = HalCrcAccumulate(&h_crc, NULL, buffer_length);
			
    END ELEMENT

END TEST -- TEST 10

TEST 11
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD>
    COMMENT [hdulibstm32f7xxhalcrc-HalCrcAccumulate-DB-LLR-002]
    COMMENT The function HalCrcAccumulate does the following.
    COMMENT when InputDataFormat of h_crc is equal to CRC_INPUTDATA_FORMAT_HALFWORDS 
    COMMENT then call the function CrcHandle16 with parameters h_crc, p_buffer and 
    COMMENT buffer_length and store the return value in a temporary variable.
    COMMENT Equivalence Class 18, 35
    COMMENT
    COMMENT [hdulibstm32f7xxhalcrc-CrcHandle16-DB-LLR-001]
    COMMENT The function CrcHandle16 loops buffer_length divide by two times and does the following.
    COMMENT 1. content of p_buffer with index latest loop counter value multiplied by TWO left shift 
    COMMENT    by SIXTEEN bitwise OR with content of p_buffer with index  as(loop counter value 
    COMMENT    multiplied by TWO plus ONE )is stored in DR of Instance of h_crc. (for loop is exercided for 2 or more time)
    COMMENT Equivalence Class None
    COMMENT
    COMMENT [hdulibstm32f7xxhalcrc-CrcHandle16-DB-LLR-002]
    COMMENT The function CrcHandle16 does the following. when buffer_length mod TWO is not equal  to 
    COMMENT ZERO then content of p_buffer with index latest loop counter value multiplied by 
    COMMENT TWO is stored in DR of Instance of h_crc.
	COMMENT In this test case the buffer length value is tested for the maximum-1 boundary value
    COMMENT Equivalence Class 27
    COMMENT </TD>
	
    ELEMENT
    
        COMMENT INPUT SECTION:
    
            --Holds the buffer length
            VAR buffer_length,                                  init = 99,                                     ev = init
			
            --Holds the CRC Data format
            VAR h_crc.InputDataFormat,                          init = CRC_INPUTDATA_FORMAT_HALFWORDS,         ev = init
			
            --Holds the CRC buffer content
            ARRAY p_buffer,                                     init = { 0..98 => 96, others => 95 },          ev = init
			
        COMMENT INPUT/OUTPUT SECTION:   

            --Holds the values required for CRC calculation
            STRUCTURE h_crc.Init,                               init = { DefaultPolynomialUse => (T_UINT8)DEFAULT_POLYNOMIAL_ENABLE, DefaultInitValueUse => 0, 
            &                                                        GeneratingPolynomial => 0, CRCLength => 0, InitValue => 0, InputDataInversionMode => 0, 
            &                                                        OutputDataInversionMode => 0 },           ev = init

            --Holds CRC Register base address
            VAR h_crc.Instance,                                 init = (T_CRC *)&PTU_instance,                 ev =init
			
            --Holds the CRC Data register value
            VAR PTU_instance.DR,                                init = 0,                                      ev = 0x600060
			
            --Holds the CRC communication state
            VAR h_crc.State,                                    init = HAL_CRC_STATE_RESET,                    ev = HAL_CRC_STATE_READY
			
            --Holds the CRC Locking object value
            VAR h_crc.Lock,                                     init = HAL_UNLOCKED,                           ev = init

        COMMENT OUTPUT SECTION:   
        
            -- Holds the HalCrcAccumulate function return value
            VAR ret_HalCrcAccumulate,                           init = 10,                                     ev = 0x600060
			
        -- Stub Calls :
        SIMUL

            --No Stubs

        END SIMUL

        -- Calling the Unit Under Test :
        #ret_HalCrcAccumulate = HalCrcAccumulate(&h_crc, p_buffer, buffer_length);
			
    END ELEMENT

END TEST -- TEST 11

TEST 12
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD>
    COMMENT [hdulibstm32f7xxhalcrc-HalCrcAccumulate-DB-LLR-002]
    COMMENT The function HalCrcAccumulate does the following.
    COMMENT when InputDataFormat of h_crc is equal to CRC_INPUTDATA_FORMAT_HALFWORDS 
    COMMENT then call the function CrcHandle16 with parameters h_crc, p_buffer and 
    COMMENT buffer_length and store the return value in a temporary variable.
    COMMENT Equivalence Class 18, 35
    COMMENT
    COMMENT [hdulibstm32f7xxhalcrc-CrcHandle16-DB-LLR-001]
    COMMENT The function CrcHandle16 loops buffer_length divide by two times and does the following.
    COMMENT 1. content of p_buffer with index latest loop counter value multiplied by TWO left shift 
    COMMENT    by SIXTEEN bitwise OR with content of p_buffer with index  as(loop counter value 
    COMMENT    multiplied by TWO plus ONE )is stored in DR of Instance of h_crc. (for loop is exercided for 0 time)
	COMMENT In this test case the buffer length value is tested for the minimum boundary value
    COMMENT Equivalence Class None
    COMMENT </TD>
	
    ELEMENT
    
        COMMENT INPUT SECTION:
    
            --Holds the buffer length
            VAR buffer_length,                            init = 0,                                           ev = init
			
            --Holds the CRC Data format
            VAR h_crc.InputDataFormat,                    init = CRC_INPUTDATA_FORMAT_HALFWORDS,              ev = init
							
        COMMENT INPUT/OUTPUT SECTION:   

            --Holds the values required for CRC calculation
            STRUCTURE h_crc.Init,                         init = { DefaultPolynomialUse => (T_UINT8)DEFAULT_POLYNOMIAL_ENABLE, DefaultInitValueUse => 0, 
            &                                              GeneratingPolynomial => 0, CRCLength => 0, InitValue => 0, InputDataInversionMode => 0, 
            &                                              OutputDataInversionMode => 0 },                    ev = init

            --Holds CRC Register base address
            VAR h_crc.Instance,                           init = (T_CRC *)&PTU_instance,                      ev = init
			
            --Holds the CRC Data register value
            VAR PTU_instance.DR,                          init = 6,                                           ev = init
			
            --Holds the CRC communication state
            VAR h_crc.State,                              init = HAL_CRC_STATE_RESET,                         ev = HAL_CRC_STATE_READY
			
            --Holds the CRC Locking object value
            VAR h_crc.Lock,                               init = HAL_UNLOCKED,                                ev = init

        COMMENT OUTPUT SECTION:   
        
            -- Holds the HalCrcAccumulate function return value
            VAR ret_HalCrcAccumulate,                     init = 10,                                          ev = 0x6
			
        -- Stub Calls :
        SIMUL

            --No Stubs

        END SIMUL

        -- Calling the Unit Under Test :
        #ret_HalCrcAccumulate = HalCrcAccumulate(&h_crc, NULL, buffer_length);
			
    END ELEMENT

END TEST -- TEST 12

TEST 13
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD>
    COMMENT [hdulibstm32f7xxhalcrc-HalCrcAccumulate-DB-LLR-002]
    COMMENT The function HalCrcAccumulate does the following.
    COMMENT 1. when InputDataFormat of h_crc is equal to CRC_INPUTDATA_FORMAT_WORDS then does the following.
    COMMENT    a. loop buffer_length times and store the content of p_buffer with loop counter as 
    COMMENT       index to DR of Instance of h_crc.(for loop is exercised for 2 or more time)
    COMMENT    b.Store the value of DR to a temporary variable.
	COMMENT In this test case the buffer length value is tested for the nominal boundary value
	COMMENT Equivalence class 16
    COMMENT </TD>
	
    ELEMENT
    
        COMMENT INPUT SECTION:
    
            --Holds the buffer length
            VAR buffer_length,                             init = 50,                                             ev = init
			
            --Holds the CRC Data format
            VAR h_crc.InputDataFormat,                     init = CRC_INPUTDATA_FORMAT_WORDS,                     ev = init
			
            --Holds the CRC buffer content
            ARRAY p_buffer,                                init = { 0..49 => 96, others => 95 },                  ev = init
			
        COMMENT INPUT/OUTPUT SECTION:   

            --Holds the values required for CRC calculation
            STRUCTURE h_crc.Init,                          init = { DefaultPolynomialUse => (T_UINT8)DEFAULT_POLYNOMIAL_ENABLE, DefaultInitValueUse => 0, 
            &                                                GeneratingPolynomial => 0, CRCLength => 0, InitValue => 0, InputDataInversionMode => 0, 
            &                                                OutputDataInversionMode => 0 },                      ev = init

            --Holds CRC Register base address
            VAR h_crc.Instance,                            init = (T_CRC *)&PTU_instance,                         ev =init
			
            --Holds the CRC Data register value
            VAR PTU_instance.DR,                           init = 10,                                             ev = 0x60
			
            --Holds the CRC communication state
            VAR h_crc.State,                               init = HAL_CRC_STATE_RESET,                            ev = HAL_CRC_STATE_READY
			
            --Holds the CRC Locking object value
            VAR h_crc.Lock,                                init = HAL_UNLOCKED,                                   ev = init

        COMMENT OUTPUT SECTION:   
        
            -- Holds the HalCrcAccumulate function return value
            VAR ret_HalCrcAccumulate,                      init = 1,                                              ev = 0x60
			
        -- Stub Calls :
        SIMUL

            --No Stubs

        END SIMUL

        -- Calling the Unit Under Test :
        #ret_HalCrcAccumulate = HalCrcAccumulate(&h_crc, p_buffer, buffer_length);
			
    END ELEMENT

END TEST -- TEST 13

TEST 14
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD>
    COMMENT [hdulibstm32f7xxhalcrc-HalCrcAccumulate-DB-LLR-002]
    COMMENT The function HalCrcAccumulate does the following.
    COMMENT 1. when InputDataFormat of h_crc is equal to CRC_INPUTDATA_FORMAT_WORDS then does the following.
    COMMENT    a. loop buffer_length times and store the content of p_buffer with loop counter as 
    COMMENT       index to DR of Instance of h_crc.(for loop is exercised for 2 or more time)
    COMMENT    b.Store the value of DR to a temporary variable.
	COMMENT In this test case the buffer length value is tested for the maximum-1 boundary value
    COMMENT Equivalence Class 16
    COMMENT </TD>
	
    ELEMENT
    
        COMMENT INPUT SECTION:
    
            --Holds the buffer length
            VAR buffer_length,                                            init = 99,                                 ev = init
			
            --Holds the CRC Data format
            VAR h_crc.InputDataFormat,                                    init = CRC_INPUTDATA_FORMAT_WORDS,         ev = init
			
            --Holds the CRC buffer content
            ARRAY p_buffer,                                               init = { 0..98 => 96, others => 95 },      ev = init
			
        COMMENT INPUT/OUTPUT SECTION:   

            --Holds the values required for CRC calculation
            STRUCTURE h_crc.Init,                                         init = { DefaultPolynomialUse => (T_UINT8)DEFAULT_POLYNOMIAL_ENABLE, DefaultInitValueUse => 0, 
            &                                                                GeneratingPolynomial => 0, CRCLength => 0, InitValue => 0, InputDataInversionMode => 0, 
            &                                                                 OutputDataInversionMode => 0 },        ev = init
			
            --Holds CRC Register base address
            VAR h_crc.Instance,                                           init = (T_CRC *)&PTU_instance,             ev =init
			
            --Holds the CRC Data register value
            VAR PTU_instance.DR,                                          init = 0,                                  ev = 0x60
			
            --Holds the CRC communication state
            VAR h_crc.State,                                              init = HAL_CRC_STATE_RESET,                ev = HAL_CRC_STATE_READY
			
            --Holds the CRC Locking object value
            VAR h_crc.Lock,                                               init = HAL_UNLOCKED,                       ev = init

        COMMENT OUTPUT SECTION:   
        
            -- Holds the HalCrcAccumulate function return value
            VAR ret_HalCrcAccumulate,                                     init = 1,                                  ev = 0x60

        -- Stub Calls :
        SIMUL

            --No Stubs

        END SIMUL

        -- Calling the Unit Under Test :
        #ret_HalCrcAccumulate = HalCrcAccumulate(&h_crc, p_buffer, buffer_length);
			
    END ELEMENT

END TEST -- TEST 14

TEST 15
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD>
    COMMENT [hdulibstm32f7xxhalcrc-HalCrcAccumulate-DB-LLR-002]
    COMMENT The function HalCrcAccumulate does the following.
    COMMENT 1. when InputDataFormat of h_crc is equal to CRC_INPUTDATA_FORMAT_WORDS then does the following.
    COMMENT    a. loop buffer_length times and store the content of p_buffer with loop counter as 
    COMMENT       index to DR of Instance of h_crc.(for loop is exercised for 2 or more time)
    COMMENT    b.Store the value of DR to a temporary variable.
	COMMENT In this test case the buffer length value is tested for the maximum boundary value
    COMMENT Equivalence Class 16
    COMMENT </TD>
	
    ELEMENT
    
        COMMENT INPUT SECTION:
    
            --Holds the buffer length
            VAR buffer_length,                                   init = 100,                                      ev = init
			
            --Holds the CRC Data format
            VAR h_crc.InputDataFormat,                           init = CRC_INPUTDATA_FORMAT_WORDS,               ev = init
			
            --Holds the CRC buffer content
            ARRAY p_buffer,                                      init = { others => 96 },                         ev = init
			
        COMMENT INPUT/OUTPUT SECTION:   

            --Holds the values required for CRC calculation
            STRUCTURE h_crc.Init,                                init = { DefaultPolynomialUse => (T_UINT8)DEFAULT_POLYNOMIAL_ENABLE, DefaultInitValueUse => 0, 
            &                                                       GeneratingPolynomial => 0, CRCLength => 0, InitValue => 0, InputDataInversionMode => 0, 
            &                                                         OutputDataInversionMode => 0 },             ev = init    

            --Holds CRC Register base address
            VAR h_crc.Instance,                                  init = (T_CRC *)&PTU_instance,                   ev = init
			
            --Holds the CRC Data register value
            VAR PTU_instance.DR,                                 init = 0,                                        ev = 96
			
            --Holds the CRC communication state
            VAR h_crc.State,                                     init = HAL_CRC_STATE_RESET,                      ev = HAL_CRC_STATE_READY
			
            --Holds the CRC Locking object value
            VAR h_crc.Lock,                                      init = HAL_UNLOCKED,                             ev = init

        COMMENT OUTPUT SECTION:   
        
            -- Holds the HalCrcAccumulate function return value
            VAR ret_HalCrcAccumulate,                            init = 1,                                        ev = 96
			
        -- Stub Calls :
        SIMUL

            --No Stubs

        END SIMUL

        -- Calling the Unit Under Test :
        #ret_HalCrcAccumulate = HalCrcAccumulate(&h_crc, p_buffer, buffer_length);
			
    END ELEMENT

END TEST -- TEST 15

TEST 16
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD>
    COMMENT [hdulibstm32f7xxhalcrc-HalCrcAccumulate-DB-LLR-002]
    COMMENT The function HalCrcAccumulate does the following.
    COMMENT when InputDataFormat of h_crc is equal to CRC_INPUTDATA_FORMAT_HALFWORDS 
    COMMENT then call the function CrcHandle16 with parameters h_crc, p_buffer and 
    COMMENT buffer_length and store the return value in a temporary variable.
    COMMENT Equivalence Class 18, 35
    COMMENT
    COMMENT [hdulibstm32f7xxhalcrc-CrcHandle16-DB-LLR-001]
    COMMENT The function CrcHandle16 loops buffer_length divide by two times and does the following.
    COMMENT 1. content of p_buffer with index latest loop counter value multiplied by TWO left shift 
    COMMENT    by SIXTEEN bitwise OR with content of p_buffer with index  as(loop counter value 
    COMMENT    multiplied by TWO plus ONE )is stored in DR of Instance of h_crc. (for loop is exercided for 2 or more time)
    COMMENT Equivalence Class None
	COMMENT In this test case the buffer length value is tested for the maximum boundary value
    COMMENT </TD>
    ELEMENT
    
        COMMENT INPUT SECTION:
    
            --Holds the buffer length
            VAR buffer_length,                              init = 100,                                  ev = init
			
            --Holds the CRC Data format
            VAR h_crc.InputDataFormat,                      init = CRC_INPUTDATA_FORMAT_HALFWORDS,       ev = init
			
            --Holds the CRC buffer content
            ARRAY p_buffer,                                 init = { others => 96 },                     ev = init
							
        COMMENT INPUT/OUTPUT SECTION:   

            --Holds the values required for CRC calculation
            STRUCTURE h_crc.Init,                            init = { DefaultPolynomialUse => (T_UINT8)DEFAULT_POLYNOMIAL_ENABLE, DefaultInitValueUse => 0, 
            &                                                           GeneratingPolynomial => 0, CRCLength => 0, InitValue => 0, InputDataInversionMode => 0, 
            &                                                           OutputDataInversionMode => 0 },  ev = init

            --Holds CRC Register base address
            VAR h_crc.Instance,                              init = (T_CRC *)&PTU_instance,              ev = init
			
            --Holds the CRC Data register value
            VAR PTU_instance.DR,                             init = 6,                                   ev = 0x600000
			
            --Holds the CRC communication state
            VAR h_crc.State,                                 init = HAL_CRC_STATE_RESET,                 ev = HAL_CRC_STATE_READY
			
            --Holds the CRC Locking object value
            VAR h_crc.Lock,                                  init = HAL_UNLOCKED,                        ev = init

        COMMENT OUTPUT SECTION:   
        
            -- Holds the HalCrcAccumulate function return value
            VAR ret_HalCrcAccumulate,                        init = 10,                                  ev = 0x600000
			
        -- Stub Calls :
        SIMUL

            --No Stubs

        END SIMUL

        -- Calling the Unit Under Test :
        #ret_HalCrcAccumulate = HalCrcAccumulate(&h_crc, p_buffer, buffer_length);
			
    END ELEMENT

END TEST -- TEST 16

TEST 17
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD>
    COMMENT [hdulibstm32f7xxhalcrc-HalCrcAccumulate-DB-LLR-002]
    COMMENT The function HalCrcAccumulate does the following.
    COMMENT when InputDataFormat of h_crc is equal to CRC_INPUTDATA_FORMAT_HALFWORDS 
    COMMENT then call the function CrcHandle16 with parameters h_crc, p_buffer and 
    COMMENT buffer_length and store the return value in a temporary variable.
    COMMENT Equivalence Class 18
    COMMENT
    COMMENT [hdulibstm32f7xxhalcrc-CrcHandle16-DB-LLR-001]
    COMMENT The function CrcHandle16 loops buffer_length divide by two times and does the following.
    COMMENT 1. content of p_buffer with index latest loop counter value multiplied by TWO left shift 
    COMMENT    by SIXTEEN bitwise OR with content of p_buffer with index  as(loop counter value 
    COMMENT    multiplied by TWO plus ONE )is stored in DR of Instance of h_crc. (for loop is exercided for 1 time)
    COMMENT Equivalence Class None
    COMMENT </TD>
    
    ELEMENT
    
        COMMENT INPUT SECTION:
    
            --Holds the buffer length
            VAR buffer_length,                                 init = 2,                                          ev = init
			
            --Holds the CRC Data format
            VAR h_crc.InputDataFormat,                         init = CRC_INPUTDATA_FORMAT_HALFWORDS,             ev = init
			
            --Holds the CRC buffer content
            ARRAY p_buffer,                                    init = { 0..1 => 96, others => 95 },               ev = init
							
        COMMENT INPUT/OUTPUT SECTION:   

            --Holds the values required for CRC calculation
            STRUCTURE h_crc.Init,                              init = { DefaultPolynomialUse => (T_UINT8)DEFAULT_POLYNOMIAL_ENABLE, DefaultInitValueUse => 0, 
            &                                                      GeneratingPolynomial => 0, CRCLength => 0, InitValue => 0, InputDataInversionMode => 0, 
            &                                                      OutputDataInversionMode => 0 },                ev = init
            
            --Holds CRC Register base address
            VAR h_crc.Instance,                                init = (T_CRC *)&PTU_instance,                     ev = init
			
            --Holds the CRC Data register value
            VAR PTU_instance.DR,                               init = 6,                                          ev = 0x600000
			
            --Holds the CRC communication state
            VAR h_crc.State,                                   init = HAL_CRC_STATE_RESET,                        ev = HAL_CRC_STATE_READY
			
            --Holds the CRC Locking object value
            VAR h_crc.Lock,                                    init = HAL_UNLOCKED,                               ev = init

        COMMENT OUTPUT SECTION:   
        
            -- Holds the HalCrcAccumulate function return value
            VAR ret_HalCrcAccumulate,                          init = 10,                                         ev = 0x600000
			
        -- Stub Calls :
        SIMUL

            --No Stubs

        END SIMUL

        -- Calling the Unit Under Test :
        #ret_HalCrcAccumulate = HalCrcAccumulate(&h_crc, p_buffer, buffer_length);
			
    END ELEMENT

END TEST -- TEST 17
	
TEST 18
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD>
    COMMENT [hdulibstm32f7xxhalcrc-HalCrcAccumulate-DB-LLR-002]
    COMMENT The function HalCrcAccumulate does the following.
    COMMENT When InputDataFormat of h_crc is equal to CRC_INPUTDATA_FORMAT_BYTES then call the function CrcHandle8 
    COMMENT with parameters h_crc, p_buffer and buffer_length and store the return value in a temporary variable.
    COMMENT IN this test case the for loop is exercised for 2 or more times
    COMMENT Equivalence Class 17, 34
    COMMENT
    COMMENT [hdulibstm32f7xxhalcrc-CrcHandle8-DB-LLR-001]
    COMMENT The function CrcHandle8 loop buffer_length divide by four times and does the following.
    COMMENT 1.Copy each 4 byte of content of p_buffer to DR of Instance of h_crc.
    COMMENT in this test case while loop is exercised for 1 time.
    COMMENT Equivalence Class None
	COMMENT
	COMMENT [hdulibstm32f7xxhalcrc-CrcHandle8-DB-LLR-002]
    COMMENT The function CrcHandle8 does nothing when buffer_length mod FOUR is equal to ZERO and 
	COMMENT buffer_length mod FOUR is equal to ONE 
    COMMENT Equivalence Class 37
    COMMENT </TD>
	
    ELEMENT
    
        COMMENT INPUT SECTION:
    
            --Holds the buffer length
            VAR buffer_length,                          init = 4,                                             ev = init
			
            --Holds the CRC Data format
            VAR h_crc.InputDataFormat,                  init = CRC_INPUTDATA_FORMAT_BYTES,                    ev = init
			
            --Holds the CRC buffer content
            ARRAY p_buffer,                             init = { 0..3 => 96, others => 95 },                  ev = init
			
        COMMENT INPUT/OUTPUT SECTION:   

            --Holds the values required for CRC calculation
            STRUCTURE h_crc.Init,                       init = { DefaultPolynomialUse => (T_UINT8)DEFAULT_POLYNOMIAL_ENABLE, DefaultInitValueUse => 0, 
            &                                              GeneratingPolynomial => 0, CRCLength => 0, InitValue => 0, InputDataInversionMode => 0, 
            &                                               OutputDataInversionMode => 0 },                   ev = init           

            --Holds CRC Register base address
            VAR h_crc.Instance,                         init = (T_CRC *)&PTU_instance,                        ev =init
			
            --Holds the CRC Data register value
            VAR PTU_instance.DR,                        init = 6,                                             ev = 0x60000000
			
            --Holds the CRC communication state
            VAR h_crc.State,                            init = HAL_CRC_STATE_RESET,                           ev = HAL_CRC_STATE_READY
			
            --Holds the CRC Locking object value
            VAR h_crc.Lock,                             init = HAL_UNLOCKED,                                  ev = init

        COMMENT OUTPUT SECTION:   
        
            -- Holds the HalCrcAccumulate function return value
            VAR ret_HalCrcAccumulate,                   init = 10,                                            ev = 0x60000000
			
        -- Stub Calls :
        SIMUL

            --No Stubs

        END SIMUL

        -- Calling the Unit Under Test :
        #ret_HalCrcAccumulate = HalCrcAccumulate(&h_crc, p_buffer, buffer_length);
			
    END ELEMENT

END TEST -- TEST 18

--TEST 19
--FAMILY robustness
--
--    COMMENT Test Description
--    COMMENT <TD>
--    COMMENT [hdulibstm32f7xxhalcrc-HalCrcAccumulate-DB-LLR-002]
--    COMMENT This test case is to test HalCrcAccumulate with h_crc as NULL input value
--    COMMENT Equivalence Class 29
--    COMMENT </TD>
--	
--    ELEMENT
--    
--        COMMENT INPUT SECTION:
--    
--            --Holds the buffer length
--            VAR buffer_length,                          init = 4,                                             ev = init
--						
--            --Holds the CRC buffer content
--            ARRAY p_buffer,                             init = { 0..3 => 96, others => 95 },                  ev = init
--			
--        COMMENT INPUT/OUTPUT SECTION:   
--
--            --None
--
--        COMMENT OUTPUT SECTION:   
--        
--            --None
--			
--        -- Stub Calls :
--        SIMUL
--
--            --No Stubs
--
--        END SIMUL
--
--        -- Calling the Unit Under Test :
--        #ret_HalCrcAccumulate = HalCrcAccumulate(NULL, p_buffer, buffer_length);
--			
--   END ELEMENT
--
--END TEST -- TEST 19

END SERVICE -- HalCrcAccumulate