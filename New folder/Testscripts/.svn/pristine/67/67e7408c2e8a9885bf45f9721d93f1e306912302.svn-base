HEADER hdudispfrounddial,Source Code Ver : 1.8,TestScript Ver : 1.2
--------------------------------------------------------------------------------
-- Author Name          : Swaroopa N
--
-- File Name            : hdudispfrounddial_5.ptu
--
-- Test Creation Date   : 30.07.2020
--
-- Tested Functions     : RoundDialUpdate
-- 
-- Version History     :
--
-- TEST-VERSION        TEST-DATE       TESTER NAME        MODIFICATIONS
--  ------------       ---------       -----------        ---  
--     1.1            30.07.2020      Swaroopa N        created the ptu file
--     1.2            03.10.2020      Vignesh Sunil      Updated as per #PR100281
-------------------------------------------------------------------------------
--
-- TESTED FILE INCLUDE DIRECTIVES 
--
--------------------------------------------------------------------------------

#/*============================================================================*/
#/* Module specific includes                                                   */
#/*============================================================================*/ 

##include "hdudispffonts.h"       
##include "hdudispfpolygon1.h"    
##include "hdudispfrterror.h"     
##include "hdudispftext.h"        
##include "hdudispfrounddial.h"   
##include "hdudispfbinascii.h"
##include "hdudispfpdidata.h"
--------------------------------------------------------------------------------
--
-- TESTED FILE DECLARATIONS 
--
--------------------------------------------------------------------------------

-- Declarations of the global variables of the tested file
   
   #extern T_CHAR glob_file_name[];
--------------------------------------------------------------------------------

BEGIN

    COMMENT Author name      : Pallavi V N
    COMMENT
    COMMENT File name        : hdudispfrounddial_5.ptu
    COMMENT
    COMMENT Tested functions : RoundDialUpdate
    COMMENT                    RoundDialClear
    COMMENT 
    COMMENT Assumptions and Constraints
    COMMENT <AC>
    COMMENT Assumption(s):
    COMMENT None
    COMMENT
    COMMENT Constraint(s):
    COMMENT 1) In function "RoundDialDraw" for loop cannot be coverd for 0 loop as it is contrlled by a macro
    COMMENT     Code snippet:
    COMMENT     for(assc_indx=0;assc_indx<ASSC_LABEL_INDX;assc_indx++)
    COMMENT 
    COMMENT 2) Source file "hdudispfrounddial.c" is modified for testing purpose to verify the file name
    COMMENT    T_CHAR glob_file_name[] = __FILE__;
    COMMENT
    COMMENT 3) PTU has been split as 1 to 10 due to static dependency.
    COMMENT
    COMMENT 4) Following Test script related warning is observed during Target Execution for stub function return value:
    COMMENT    warning #120-D: 
    COMMENT    return value type does not match the function type
    COMMENT    return(Attol_ptr_out->ret);
    COMMENT
    COMMENT		warning #188-D: 
    COMMENT		enumerated type mixed with another type
    COMMENT		_os_232_hdudispfrounddial_c_PolygonsPsPolyInit[2]._datain.e_poly_shape = 1
    COMMENT
    COMMENT		warning #188-D:
    COMMENT		enumerated type mixed with another type
    COMMENT		_os_232_hdudispfrounddial_c_PolygonsPsPolyInit[3]._datain.e_poly_shape = 378;
    COMMENT
    COMMENT 5)	Following source code related warning is observed 
    COMMENT		warning #188-D: 
    COMMENT		enumerated type mixed with another type
    COMMENT		ps_ptr_src->psShape = PolygonsPsPolyInit(ps_ptr_src->s32PtrShape,
    COMMENT
    COMMENT</AC>
    
    COMMENT Equivalence Class Description
    COMMENT <ECD>
    COMMENT
    COMMENT Valid Class(es)
    COMMENT 
    COMMENT Class 1
    COMMENT In function "RoundDialAllocat" RterrWidget function is called.
    COMMENT  
    COMMENT Class 2
    COMMENT In function "RoundDialAllocat" number round dials installed is equal to MAX_ROUND_DIALS.
    COMMENT  
    COMMENT Class 3
    COMMENT In function "RoundDialAllocat" number round dials installed is not equal to MAX_ROUND_DIALS.
    COMMENT  
    COMMENT Class 4
    COMMENT In function "RoundDialAllocat" shall loop till s32PtrShape of source pointer is not null.
    COMMENT   
    COMMENT Class 5
    COMMENT In function "RoundDialAllocat" shall not loop when s32PtrShape of source pointer is null.
    COMMENT   
    COMMENT Class 6
    COMMENT In function "RoundDialAllocat" PolygonsPsPolyInit function is called
    COMMENT    
    COMMENT Class 7
    COMMENT In function "RoundDialAllocat" PolygonsPsDuplicate function is called
    COMMENT    
    COMMENT Class 8
    COMMENT In function "RoundDialAllocat" LookupTableLookup function is called
    COMMENT    
    COMMENT Class 9
    COMMENT In function "RoundDialAllocat" BinasGetWidth function is called
    COMMENT    
    COMMENT Class 10
    COMMENT In function "RoundDialAllocat" BinasByteFormatInfoBE function is called
    COMMENT    
    COMMENT Class 11
    COMMENT In function "RoundDialAllocat" TextAllocat function is called 
    COMMENT    
    COMMENT Class 12
    COMMENT In function "RoundDialUpdate"  WidgetsUpdateRT function is called
    COMMENT    
    COMMENT Class 13
    COMMENT In function "RoundDialUpdate" LookupTableLookup function is called
    COMMENT    
    COMMENT Class 14
    COMMENT In function "RoundDialUpdate" pText of sWidgetParm of Round dial is not equal to ZERO
    COMMENT    
    COMMENT Class 15
    COMMENT In function "RoundDialUpdate" pText of sWidgetParm of Round dial is equal to ZERO
    COMMENT      
    COMMENT Class 16
    COMMENT In function "RoundDialUpdate" stat of psParam of round_dial_def of Round dial is equal to PARAM_BAD.
    COMMENT      
    COMMENT Class 17
    COMMENT In function "RoundDialUpdate"  stat of psParam of round_dial_def of Round dial is less than PARAM_BAD.
    COMMENT      
    COMMENT Class 18
    COMMENT In function "RoundDialUpdate"  stat of psParam of round_dial_def of Round dial is greater than PARAM_BAD.
    COMMENT      
    COMMENT Class 19
    COMMENT In function "RoundDialUpdate" WidgetsNumUpdate function is called 
    COMMENT      
    COMMENT Class 20
    COMMENT In function "RoundDialUpdate" PolygonsvPolarToRect function is called 
    COMMENT      
    COMMENT Class 21
    COMMENT In function "RoundDialUpdate" pText of sWidgetParm of ps_round_dial is other than NULL
    COMMENT      
    COMMENT Class 22
    COMMENT In function "RoundDialUpdate" pText of sWidgetParm of ps_round_dial is equal to NULL
    COMMENT      
    COMMENT Class 23
    COMMENT In function "RoundDialUpdate" field width is not equal to zero
    COMMENT        
    COMMENT Class 24
    COMMENT In function "RoundDialUpdate" field width is equal to zero
    COMMENT        
    COMMENT Class 25
    COMMENT In function "RoundDialUpdate" TextUpdate function is called 
    COMMENT        
    COMMENT Class 26
    COMMENT In function "RoundDialDraw" stat of psParam of round_dial_def of Round dial  is equal to PARAM_BAD 
    COMMENT        
    COMMENT Class 27
    COMMENT In function "RoundDialDraw" stat of psParam of round_dial_def of Round dial  is greater than PARAM_BAD 
    COMMENT       
    COMMENT Class 28
    COMMENT In function "RoundDialDraw" stat of psParam of round_dial_def of Round dial  is less than PARAM_BAD 
    COMMENT       
    COMMENT Class 29
    COMMENT In function "RoundDialDraw" psDisRegion of round_dial_def of Round dial is not equal to NULL 
    COMMENT       
    COMMENT Class 30
    COMMENT In function "RoundDialDraw" psDisRegion of round_dial_def of Round dial is equal to NULL  
    COMMENT       
    COMMENT Class 31
    COMMENT In function "RoundDialDraw" WidgetsRedX function is called 
    COMMENT       
    COMMENT Class 32
    COMMENT In function "RoundDialDraw"  psShape of Spec pointer is not equal to zero.
    COMMENT       
    COMMENT Class 33
    COMMENT In function "RoundDialDraw"  psShape of Spec pointer is equal to zero.
    COMMENT       
    COMMENT Class 34
    COMMENT In function "RoundDialClear" round dial is not equal to zero
    COMMENT       
    COMMENT Class 35
    COMMENT In function "RoundDialClear" round dial is equal to zero
    COMMENT       
    COMMENT Class 36
    COMMENT In function "RoundDialDraw"  PolygonDrawPoly function is called.
    COMMENT       
    COMMENT Class 37
    COMMENT In function "RoundDialDraw"  associated_labels of round_dial_def of Round dial is not equal to 0 .
    COMMENT       
    COMMENT Class 38
    COMMENT In function "RoundDialDraw"  associated_labels of round_dial_def of Round dial is equal to 0 .
    COMMENT       
    COMMENT Class 39
    COMMENT In function "RoundDialDraw"  associated_labels of  round_dial_def of Round dial is equal to label of round_dial_def of A_round_dial .
    COMMENT       
    COMMENT Class 40
    COMMENT In function "RoundDialDraw"  associated_labels of  round_dial_def of Round dial is not equal to label of round_dial_def of A_round_dial .
    COMMENT       
    COMMENT Class 41
    COMMENT In function "RoundDialDraw"   Array round dail status is FALSE.
    COMMENT       
    COMMENT Class 42
    COMMENT In function "RoundDialDraw"   Array round dail status is TRUE
    COMMENT       
    COMMENT Class 43
    COMMENT In function "RoundDialDraw"   stat of psParam of round_dial_def of A_round_dial is less than PARAM_BAD.
    COMMENT       
    COMMENT Class 44
    COMMENT In function "RoundDialDraw"   stat of psParam of round_dial_def of A_round_dial is greater than PARAM_BAD.
    COMMENT       
    COMMENT Class 45
    COMMENT In function "RoundDialDraw"   stat of psParam of round_dial_def of A_round_dial is equal to PARAM_BAD.
    COMMENT       
    COMMENT Class 46
    COMMENT In function "RoundDialDraw"   Draw dail status is equal to TRUE.
    COMMENT       
    COMMENT Class 47
    COMMENT In function "RoundDialDraw"   Draw dail status is not equal to TRUE.
    COMMENT       
    COMMENT Class 48
    COMMENT In function "RoundDialUpdate"  CalculatePower function is called.
    COMMENT       
    COMMENT Class 49
    COMMENT In function "RoundDialUpdate". BinasGetWidth function is called 
    COMMENT      
	COMMENT Class 51
	COMMENT In function "RoundDialUpdate" vernStatus of round_dial_def of ps_round_dial is equal to ONE.
	COMMENT      
	COMMENT Class 52
	COMMENT In function "RoundDialUpdate" vernStatus of round_dial_def of ps_round_dial is not equal to ONE.
	COMMENT
	COMMENT Class 53
	COMMENT In function "RoundDialUpdate" vernPos of round_dial_def of ps_round_dial is greater than ONE.
	COMMENT
	COMMENT Class 54
	COMMENT In function "RoundDialUpdate" vernPos of round_dial_def of ps_round_dial less than  ONE.
	COMMENT
	COMMENT Class 55
	COMMENT In function "RoundDialUpdate" vernPos of round_dial_def of ps_round_dial is equal to ONE.
	COMMENT
	COMMENT Class 56
	COMMENT In function "RoundDialUpdate" vernPos of round_dial_def of ps_round_dial is not equal to ONE.
	COMMENT
	COMMENT Class 57
	COMMENT In function "RoundDialUpdate" s32Scaler of sWidgetParm of ps_round_dial is greater than ZERO.
	COMMENT
	COMMENT Class 58
	COMMENT In function "RoundDialUpdate" s32Scaler of sWidgetParm of ps_round_dial is less than ZERO.
	COMMENT
	COMMENT Class 59
	COMMENT In function "RoundDialUpdate" s32Scaler of sWidgetParm of ps_round_dial is equal to ZERO.
	COMMENT
	COMMENT Class 60
	COMMENT In function "RoundDialUpdate" s32PtrShape of asPtrSpec of round_dial_def of ps_round_dial is equal to EMOVINGROUNDDIAL.
	COMMENT
	COMMENT Class 61
	COMMENT In function "RoundDialUpdate" s32PtrShape of asPtrSpec of round_dial_def of ps_round_dial is not equal to EMOVINGROUNDDIAL.
	COMMENT    
    COMMENT Invalid Class(es)
    COMMENT  
    COMMENT Class 50
    COMMENT In function 'RoundDialAllocat', parameter 'round_dial_def' is NULL. 
    COMMENT  
    COMMENT </ECD>    
    
--------------------------------------------------------------------------------
--
-- STUB DECLARATIONS OF THE TESTED OR INTEGRATED UNITS
--
--------------------------------------------------------------------------------
SIMUL

DEFINE STUB hdudispfrounddial_c

    --Temporary variables declaration
    --created to verify the parameter ps_param of function WidgetsUpdateRT
    #T_PARAM_READING PTU_ps_param;
    --created to verify the parameter ps_widget_parm_in of function WidgetsUpdateRT
    #T_SWIDGETPARAM PTU_ps_widget_parm_in;
    #T_SWIDGETPARAM PTU_ps_widget_parm_out;
    --created to verify the parameter table of function LookupTableLookup
    #T_LOOKUP_TABLE PTU_table;
    --created to verify the parameter stat of function LookupTableLookup
    #T_PARAM_STAT PTU_stat;
    #T_PTEXT PTU_pText;
    --created to verify the parameter pps_poly_red_x of function WidgetsRedX
    #T_SPOLY PTU_pps_poly_red_x_in, PTU_pps_poly_red_x_out;
    #T_ROUNDDIALDEF PTU_round_dial_def;
    --created to verify the parameter ps_dis_region of function WidgetsRedX
    #T_SDISREGION PTU_ps_dis_region;
    --created to verify the parameter pps_handle_add of function TextAllocat
    #T_TEXT *PTU_pps_handle_add_out,PTU_pps_handle_add_in;
    --created to verify return value of function BinasByteFormatInfoBE 
    #T_INT8 PTU_BinasByteFormatInfoBE_return;
    --created to verify the parameter pu8_string of function TextAllocat
    #T_UINT8 PTU_pu8_string[13];
    --created to verify the parameter dest of function BinasByteFormatInfoBE
    #T_INT8 PTU_dest[13],PTU_i;
    --created to verify return value of function PolygonsPsPolyInit 
    #T_SPOLY PTU_PolygonsPsPolyInit_return,PTU_PolygonsPsPolyInit_return_1;
    --created to verify return value of function PolygonsPsDuplicate 
    #T_SPOLY PTU_PolygonsPsDuplicate_return;
    --created to verify the parameter pc_message of function RterrWidget
    #char PTU_pc_message[200];
    --created to verify the parameter pc_file of function RterrWidget
    #char PTU_pc_file[200],PTU_temp;
	--created to verify the parameter ps_poly of function PolygonsvPolarToRect
	#T_SPOLY ps_poly_PTU;

    --created to verify the member psDisRegion of structure round_dial_def 
    #T_SDISREGION PTU_psDisRegion;
    --created to verify the member psGeometry of structure round_dial_def 
    #T_LOOKUP_TABLE PTU_psGeometry; 
    --created to verify the member psParam of structure round_dial_def
    #T_PARAM_READING  PTU_psParam;
    --created to verify the member pRoundDial->psPolyRedX of structure round_dial_def
    #T_SPOLY PTU_psPolyRedX;
    --created to verify the parameter ps_poly of functionPolygonDrawPoly
    #T_SPOLY *PTU_ps_poly;
    --created to verify the member x,y of psGeometry of structure round_dial_def
    #T_INT32 PTU_x, PTU_y;  
    --created to verify the parameter p_text of TextUpdate    
    #T_PTEXT TextUpdate_p_text_1;
    #T_TEXT TextUpdate_p_text;
    --created to verify the parameter param of WidgetsNumUpdate    
    #T_PARAM_READING PTU_WidgetsNumUpdate_param;
    --created to verify the parameter ps_widget_param of WidgetsNumUpdate 
    #T_SWIDGETPARAM  PTU_WidgetsNumUpdate_ps_widget_param;
    --created to verify the parameter ac_dig_text of WidgetsNumUpdate 
    #T_CHAR  PTU_WidgetsNumUpdate_ac_dig_text;
    --created to verify the member asPtrSpec of structure round_dial_def 
    #T_SPOLY PTU_psShape;
    
    -- Parameter ps_poly is made as _no as it is verified explicitly
    #void PolygonDrawPoly(T_SPOLY  _no *ps_poly, T_EPENCOLOR  _in e_color);
    -- parameters ps_dis_region and pps_poly_red_x are made _no and is verified explicitly
    #void WidgetsRedX(T_SDISREGION  _no ps_dis_region, T_SPOLY _no **pps_poly_red_x)
    #{
    #     PTU_ps_dis_region = *ps_dis_region;
    #     PTU_pps_poly_red_x_in = *((T_SPOLY *)pps_poly_red_x);
    #     *((T_SPOLY *)pps_poly_red_x) = PTU_pps_poly_red_x_out;
    #}
    -- parameter p_text is made _no and is verified explicitly
    #void TextUpdate(T_PTEXT _no p_text, T_EPENCOLOR  _in e_pen_color, T_ETXFLASH  _in e_tx_flash, T_ETXV  _in e_txv)
    #{
    # TextUpdate_p_text_1 = p_text;
    # TextUpdate_p_text.u16X0 = TextUpdate_p_text_1->u16X0;
    # TextUpdate_p_text.u16Y0 = TextUpdate_p_text_1->u16Y0;
    # TextUpdate_p_text.eTXAlign = TextUpdate_p_text_1->eTXAlign;
    # TextUpdate_p_text.eTXFont = TextUpdate_p_text_1->eTXFont;
    # TextUpdate_p_text.ePenColor = TextUpdate_p_text_1->ePenColor;
    # TextUpdate_p_text.eTXV = TextUpdate_p_text_1->eTXV;
    # TextUpdate_p_text.eTXFlash = TextUpdate_p_text_1->eTXFlash;
    #
    #}
	--parameter ps_poly is made _no and is verified explicitly
   -- #void PolygonsvPolarToRect(T_SPOLY  _in ps_poly, T_INT32  _in s32_xoff, T_INT32  _in s32_yoff, T_UINT16  _in u16_len, T_UINT32  _in u32_rot);  
    #void PolygonsvPolarToRect(T_SPOLY  _no ps_poly, T_INT32  _in s32_xoff, T_INT32  _in s32_yoff, T_UINT16  _in u16_len, T_INT32  _in u32_rot, T_INT32  _in u32_rot_rd, T_BOOL  _in moving_rd)
    #{
	#ps_poly_PTU = *ps_poly;
	#}
    -- parameters param, ps_widget_param and ac_dig_text are made _no and is verified explicitly
    #void WidgetsNumUpdate(T_PARAM_READING  _no *param, T_SWIDGETPARAM  _no *ps_widget_param, T_CHAR  _no *ac_dig_text, T_UINT16  _in u16_format, T_EPENCOLOR _in e_pen_color)
    #{
    # PTU_WidgetsNumUpdate_param = *param;
    # PTU_WidgetsNumUpdate_ps_widget_param = *ps_widget_param;
    # PTU_WidgetsNumUpdate_ac_dig_text = *ac_dig_text;
    #}
    -- The parameters are made _no and is verified explicitly
    #void WidgetsUpdateRT(T_PARAM_READING  _no ps_param, T_SWIDGETPARAM  _no *ps_widget_parm)
    #{
    #   PTU_ps_param.r = ps_param->r;
    #   PTU_ps_param.stat = ps_param->stat;
    #   PTU_ps_widget_parm_in = *ps_widget_parm;
    #   ps_widget_parm->s32Dig = PTU_ps_widget_parm_out.s32Dig;
    #   ps_widget_parm->s32DisDig = PTU_ps_widget_parm_out.s32DisDig;
    #   ps_widget_parm->eDIsDigStat = PTU_ps_widget_parm_out.eDIsDigStat;
    #   ps_widget_parm->pText = PTU_ps_widget_parm_out.pText;
    #   ps_widget_parm->s32Scaler = PTU_ps_widget_parm_out.s32Scaler;
    #   ps_widget_parm->s32ScalerStep = PTU_ps_widget_parm_out.s32ScalerStep;
    #}
    -- The parameters "pps_handle_add" and "pu8_string" are made _no and  verified explicitly
    #void TextAllocat(T_PTEXT  _no *pps_handle_add, T_UINT8  _no *pu8_string, T_UINT16  _in u16_x0, T_UINT16  _in u16_y0, T_ETXALIGN  _in e_tx_align, T_ETXFONT  _in e_tx_font, T_EPENCOLOR  _in e_pen_color, T_ETXV  _in e_txv, T_ETXFLASH  _in e_tx_flash)
    #{   
    #   for(PTU_i =0; PTU_i<13;PTU_i++)
    #   {  
    #   PTU_pu8_string[PTU_i] = pu8_string[PTU_i] ;
    #   }
    #   PTU_pps_handle_add_out = *pps_handle_add;
    #   PTU_pps_handle_add_in =  *PTU_pps_handle_add_out;
    #}
    -- The parameters "src" and "dest" are made _no and  verified explicitly
    #T_INT8* BinasByteFormatInfoBE(void * _no src, T_UINT16  _in format, char _no dest[200])
    #{
    #   for(PTU_i =0; PTU_i<13;PTU_i++)
    #   dest[PTU_i] = PTU_dest[PTU_i];
    #}
    #T_UINT16 BinasGetWidth(T_UINT16  _in format); 
    
    -- The parameters "table" and "stat" are made _no and  verified explicitly
    #T_INT32 LookupTableLookup( const  T_LOOKUP_TABLE _no *table, T_INT32 _in ind_var, T_PARAM_STAT _no *stat)
    #{
    # PTU_table = *table;
    # PTU_stat = *stat;
    #}     
    
    #T_SPOLY* PolygonsPsDuplicate(T_SPOLY  _in ps_poly_src);
    
    #T_SPOLY* PolygonsPsPolyInit(T_ESTOCKSHAPE  _in e_poly_shape, T_FLOAT  _in fx_scale, T_INT16  _in s16_xoff, T_FLOAT  _in fy_scale, T_INT16  _in s16_yoff, T_INT16  _in s16_rot);
    
    -- The parameters "pc_file" and "pc_message" are made _no and  verified explicitly
    #void RterrWidget(char _no pc_file[200], T_INT32 _in s32_line_number, char _no pc_message[200])
    #{
    #  PTU_temp = 0;
    #  while(pc_file[PTU_temp]!= ZERO)
    #  {
    #    PTU_pc_file[PTU_temp]= pc_file[PTU_temp];   //Verify pc_file path 
    #    PTU_temp = PTU_temp+1;
    #  }
    #    PTU_pc_file[PTU_temp]= ZERO;
    #
    #  PTU_temp = 0;
    #  while(pc_message[PTU_temp]!= ZERO)
    #  {
    #    PTU_pc_message[PTU_temp]= pc_message[PTU_temp];  //Verify pc_message
    #    PTU_temp = PTU_temp+1;
    #  }
    #    PTU_pc_message[PTU_temp]= ZERO;
    #}    
    #T_FLOAT CalculatePower(T_FLOAT _in value, T_INT32 _in mul);
    
END DEFINE

ELSE_SIMUL
        -- No action defined as of now if the module is not simulated
END SIMUL
--------------------------------------------------------------------------------
--
-- ENVIRONMENTS DECLARATIONS
--
--------------------------------------------------------------------------------
--IF HOST

-- No special things that have to be done on the host to run the test.
--ELSE
-- No action defined for the targetexecution as of now
--END IF
--------------------------------------------------------------------------------
-- TESTED FILE ENVIRONNEMENT
--------------------------------------------------------------------------------
--Environment of the hdudispfrounddial.c

--ENVIRONMENT ENV_hdudispfrounddial_c

    --None
    
--END ENVIRONMENT -- ENV_hdudispfrounddial_c
--USE ENV_hdudispfrounddial_c
--------------------------------------------------------------------------------
--
-- SERVICES DECLARATIONS
--
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
-- Declaration of the service RoundDialUpdate
--------------------------------------------------------------------------------
SERVICE RoundDialUpdate
SERVICE_TYPE extern


    -- Tested service parameters declarations
    #T_ROUNDDIALDEF round_dial_def;

    ENVIRONMENT ENV_RoundDialUpdate

            VAR round_dial_def.sUpperLeft,       init = { u16X0 => 0, u16Y0 => 0 },      ev = init
            VAR round_dial_def.sDialCenterOffset,init = { u16X0 => 0, u16Y0 => 0 },      ev = init
            VAR round_dial_def.psGeometry,       init = &PTU_psGeometry,                 ev = init
            VAR round_dial_def.psParam,          init = &PTU_psParam,                    ev = init
            VAR round_dial_def.asPtrSpec,        init = { others => { s32PtrShape => 0, ePenColor => BLACK, psShape => NIL } },
            &                                                             ev = init 
            VAR round_dial_def.ptr_scale,        init = { others => { u16X0 => 0, u16Y0 => 0 } },
            &                                                             ev = init 
            VAR round_dial_def.ptr_scale_offset,        init = { others => { u16X0 => 0, u16Y0 => 0 } },
            &                                                             ev = init 
            VAR round_dial_def.usLength,         init = 0,                               ev = init
            VAR round_dial_def.u16Format,        init = 0,                               ev = init
            VAR round_dial_def.eFont,            init = E_LARGE_FONT,                    ev = init
            VAR round_dial_def.numLimit,         init = 0,                               ev = init
            VAR round_dial_def.limVal,           init = { others => 0.0 },               ev = init
            VAR round_dial_def.limValtype,       init = { others => 0 },               ev = init
            VAR round_dial_def.limColor,         init = { others => 0 },               ev = init
            VAR round_dial_def.sDigCenterOffset, init = { u16X0 => 0, u16Y0 => 0 },      ev = init
            VAR round_dial_def.psDisRegion,      init = &PTU_psDisRegion,                ev = init
			VAR round_dial_def.vernStatus,	     init = 0,                				ev = init
			VAR round_dial_def.vernPos,		     init = 0.0,                			ev = init
            
    END ENVIRONMENT -- ENV_RoundDialUpdate
    USE ENV_RoundDialUpdate  

	TEST 13
    FAMILY nominal

        ELEMENT
        
        COMMENT Test Description
        COMMENT <TD> 
        COMMENT [hdudispfrounddial-RoundDialUpdate-DB-LLR-001]
        COMMENT for all teh round dials
        COMMENT 1.Sets the decimal number to last 3 bits of u16Format of round_dial_def of 
        COMMENT pointer to structure T_ROUNDDIAL right shifted by FOUR
        COMMENT 2.Sets member r of psParam of round_dial_def of Round dail to result of 
        COMMENT (sum of FIVE and product of fread of psParam of  round_dial_def of pointer to structure T_ROUNDDIAL ,
        COMMENT  THOUSAND and return value of function CalculatePower with parameters TEN and decimal value.) divided by TEN
        COMMENT 3.Calls the function WidgetsUpdateRT 
        COMMENT Equivalence Class 12,48
        COMMENT 
        COMMENT [hdudispfrounddial-RoundDialUpdate-DB-LLR-002]
        COMMENT for each round dials
        COMMENT 1.Sets ps_round_dial to address of A_round_dial with u16_round_dial_cntr as index. 
        COMMENT Equivalence Class None
		COMMENT
		COMMENT [hdudispfrounddial-RoundDialUpdate-DB-LLR-007]
		COMMENT when vernStatus of round_dial_def of pointer to structure T_ROUNDDIAL is equal to ONE and 
		COMMENT do the following 
		COMMENT when vernPos of round_dial_def of ps_round_dial is equal to ONE and the function   
		COMMENT do the following 
		COMMENT 1.Sets s32Scaler of sWidgetParm of ps_round_dial to result of 
		COMMENT ((s32Scaler of sWidgetParm of ps_round_dial is modulus) with product of
		COMMENT (vernPos of round_dial_def of ps_round_dial and TEN)) 
		COMMENT 2.Sets s32Scaler of sWidgetParm of ps_round_dial to result of 
		COMMENT (product of (s32Scaler of sWidgetParm of ps_round_dial) and (TEN) and
		COMMENT (TEN devide with vernPos of round_dial_def of ps_round_dial )) 
		COMMENT 3.Sets vernscalertemp to product of of fread of psParam of  round_dial_def of pointer to structure T_ROUNDDIAL 
		COMMENT and ONE_HUNDRED). 
		COMMENT 4.Sets vernscalertemp to (vernscalertemp dived with ONE_HUNDRED).
		COMMENT 5.Sets s32Scaler of sWidgetParm of ps_round_dial to result of (addition of Sets s32Scaler of sWidgetParm of 
		COMMENT ps_round_dial and vernscalertemp.
		COMMENT Equivalence Class 51,55

        COMMENT </TD>         
        
        COMMENT  INPUT SECTION:
           
           STRUCTURE PTU_ps_widget_parm_out,     init = {eDIsDigStat => PARAM_ADVISORY, 
            &                                            s32ScalerStep =>2, 
            &                                            pText => NIL,  
            &                                            s32Dig => 3,  
            &                                            s32DisDig => 4, 
            &                                            s32Scaler => 5},                 ev = init
            
        COMMENT INPUT/OUTPUT SECTION:

            --inputs for the function RoundDialAllocat start
             
            VAR PTU_psGeometry,                init = { x => &PTU_x, 
            &                                           y => &PTU_y},    ev = init
            VAR round_dial_def.psGeometry,     init = &PTU_psGeometry,   ev = init
            VAR PTU_psParam,                   init = {fread => 10.0,
            &                                          stat => PARAM_BAD,
            &                                          others => 10},   
            &                                                            ev = {r => 1000, 
            &                                                                  others=>init}
            VAR round_dial_def.psParam,        init = &PTU_psParam,      ev = init
            VAR round_dial_def.asPtrSpec,      init = { others => 
            &                                            { s32PtrShape => 0, 
            &                                              ePenColor => BLACK,
            &                                              psShape => NIL } },
            &                                                            ev = init 

            VAR round_dial_def.u16Format,      init = 0,                 ev = init
            VAR round_dial_def.eFont,          init = E_NO_FONT,         ev = init
            VAR round_dial_def.pRoundDial->sWidgetParm.s32Scaler,init = 0,ev = 0

            VAR PTU_table,                     init = NIL,               ev = { x => &PTU_x, 
            &                                                                   y => &PTU_y}
            VAR PTU_stat,                      init = RANGE_ERROR,       ev = PARAM_OK
            --VAR round_dial_def.pRoundDial->acDigText[0],init = CIRCLE_E, ev = RED_X
			VAR round_dial_def.vernStatus,	   init = 1,               	 ev = init
			VAR round_dial_def.vernPos,		   init = 1.0,               ev = init

            
           --inputs for the function RoundDialAllocat end
        COMMENT OUTPUT SECTION:
           
           STRUCTURE PTU_ps_widget_parm_in,      init = {eDIsDigStat => PARAM_ADVISORY, 
            &                                            s32ScalerStep =>1, 
            &                                            pText => NIL,  
            &                                            s32Dig => 1,  
            &                                            s32DisDig => 1, 
            &                                            s32Scaler => 1},             
            &                                      ev = {eDIsDigStat => PARAM_OK, 
            &                                            s32ScalerStep =>0, 
            &                                            pText => NIL,  
            &                                            s32Dig => 1000,  
            &                                            s32DisDig => 1000, 
            &                                            s32Scaler => 1000}

           --Stub Calls:
        SIMUL   
        
            STUB LookupTableLookup 1 => (1000)-32768 -- called in RoundDialAllocat
            STUB BinasGetWidth 1 => (0)100        -- called in RoundDialAllocat
            STUB WidgetsUpdateRT()
            STUB LookupTableLookup 2 => (0)-32768
            STUB CalculatePower((T_FLOAT)TEN,(T_INT32)0)1.0
            STUB CalculatePower((T_FLOAT)TEN,(T_INT32)0)1.0

        END SIMUL
            
    -- Function called to delete round dial
        #RoundDialClear();
        -- Function called to create a round dial
        #RoundDialAllocat(&round_dial_def);
        
        -- Function under test
        #RoundDialUpdate();
        
        END ELEMENT

    END TEST -- TEST 13
    
END SERVICE -- RoundDialUpdate










