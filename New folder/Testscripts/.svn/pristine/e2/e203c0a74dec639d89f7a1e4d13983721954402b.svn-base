HEADER hdulibstm32f4xxgpio,Source Code Ver : 1.2,TestScript Ver : 1.3
--------------------------------------------------------------------------------
-- Author Name         : Manu K M
--
-- File Name           : hdulibstm32f4xxgpio.ptu
--
-- Test Creation Date  : 12.09.2017
--
-- Tested Functions    : GpioInit
--                       GpioSetBits
--                       GpioResetBits
--                       GpioReadInputDataBit
--                       GpioToggleBits
--                       GpioPinAFConfig
--
-- Version History     :
--
--  TEST-VERSION         TEST-DATE               TESTER NAME        MODIFICATIONS
--   ------------        ---------               -----------        -------------
--    1.1                12.09.2017              Manu K M    	    Created the ptu file.
--    1.2                10.11.2017              Manu K M          Updated as per #PR100171.
--    1.3                14.11.2017              Manu K M          Updated as per #PR100171.
--
--------------------------------------------------------------------------------
--
-- TESTED FILE INCLUDE DIRECTIVES 
--
--------------------------------------------------------------------------------

#/*============================================================================*/
#/* Module specific includes                                                   */
#/*============================================================================*/

##include "hdulibstm32f4xxgpio.h"     
##include "hdulibstm32f4xxrcc.h"      
##include "hdulibbasicfunc.h"         
##include "hdulibstm32f4xx.h"      
   
--------------------------------------------------------------------------------
--
-- TESTED FILE DECLARATIONS 
--
--------------------------------------------------------------------------------

-- Declarations of the global variables of the tested file

    --None

-- Declarations of the temporary variable

    --None
--------------------------------------------------------------------------------

BEGIN

    COMMENT Author Name      : Manu K M
    COMMENT
    COMMENT File Name        : hdulibstm32f4xxgpio.ptu
    COMMENT
    COMMENT Tested Functions : GpioInit
    COMMENT                    GpioSetBits
    COMMENT                    GpioResetBits
    COMMENT                    GpioReadInputDataBit
    COMMENT                    GpioToggleBits
    COMMENT                    GpioPinAFConfig
    COMMENT
    COMMENT
    COMMENT Assumptions and Constraints
    COMMENT <AC>
    COMMENT
    COMMENT Assumption(s):
    COMMENT None
    COMMENT 
    COMMENT Constraint(s): 
    COMMENT 1. The for loop present in the function GpioInit cannot be covered for 0 and 1 time as the 
	COMMENT    loop is controlled by the macro GPIO_PERIPHERALS
	COMMENT 
	COMMENT 2. During the testscript generation following warnings were obtianed 
	COMMENT
	COMMENT    cGnuSTM32F4\Thdulibstm32f4xxgpio.c: In function 'SRV4_GPIOINIT':
	COMMENT    cGnuSTM32F4\Thdulibstm32f4xxgpio.c:4930:1: warning: this decimal constant is unsigned only in ISO C90
	COMMENT    cGnuSTM32F4\Thdulibstm32f4xxgpio.c:4930:1: warning: this decimal constant is unsigned only in ISO C90
    COMMENT </AC>
    
	COMMENT Equivalence Class Description
	COMMENT <ECD>
	COMMENT 
	COMMENT Valid  Class(es)
	COMMENT Class 1
	COMMENT In function 'GpioInit', position parameter is equal to current_pin parameter.
	COMMENT  
	COMMENT Class 2
	COMMENT In function 'GpioInit', position parameter is not equal to current_pin parameter.
	COMMENT  
	COMMENT Class 3
	COMMENT In function 'GpioInit',gpio_mode of gpio_init_struct is equal to GPIO_MODE_OUT. 
	COMMENT  
	COMMENT Class 4
	COMMENT In function 'GpioInit',gpio_mode of gpio_init_struct is not equal to GPIO_MODE_OUT.
	COMMENT  
	COMMENT Class 5
	COMMENT In function 'GpioInit',gpio_mode of gpio_init_struct is equal to GPIO_MODE_AF. 
	COMMENT  
	COMMENT Class 6
	COMMENT In function 'GpioInit',gpio_mode of gpio_init_struct is not equal to GPIO_MODE_AF.
	COMMENT
	COMMENT Class 7
	COMMENT In function 'GpioReadInputDataBit',gpio_pin in gpio_x input data register(IDR) is SET.
	COMMENT  
	COMMENT Class 8
	COMMENT In function 'GpioReadInputDataBit',gpio_pin in gpio_x input data register(IDR) is not SET.  
	COMMENT 
	COMMENT Class 16
	COMMENT The function 'GpioSetBits',sets the selected data port bits.
	COMMENT 
	COMMENT Class 17
	COMMENT The function 'GpioResetBits',clears the selected data port bits.
	COMMENT 
	COMMENT Class 18
	COMMENT The function 'GpioToggleBits',toggles the specified GPIO pins.
	COMMENT 
	COMMENT Class 19
	COMMENT The function 'GpioPinAFConfig',changes the mapping of the specified pin to the alternate function.
	COMMENT 	
	COMMENT Invalid Class(es)
	COMMENT Class 9
	COMMENT In function 'GpioInit',Invalid Reference is passed to gpio_x parameter.
	COMMENT
	COMMENT Class 10
	COMMENT In function 'GpioInit' Invalid Reference is passed to gpio_init_struct parameter.
	COMMENT
	COMMENT Class 11
	COMMENT In function 'GpioSetBits',Invalid Reference is passed to gpio_x parameter.
	COMMENT	
	COMMENT Class 12
	COMMENT In function 'GpioResetBits',Invalid Reference is passed to gpio_x parameter.
	COMMENT 
	COMMENT Class 13
	COMMENT In function 'GpioReadInputDataBit',Invalid Reference is passed to gpio_x parameter.
	COMMENT 
	COMMENT Class 14
	COMMENT In function 'GpioToggleBits',Invalid Reference is passed to gpio_x parameter.
	COMMENT 
	COMMENT Class 15
	COMMENT In function 'GpioPinAFConfig',Invalid Reference is passed to gpio_x parameter.
	COMMENT </ECD>
	
--------------------------------------------------------------------------------
--
-- STUB DECLARATIONS OF THE TESTED OR INTEGRATED UNITS
--
--------------------------------------------------------------------------------

SIMUL
 
	DEFINE STUB hdulibstm32f4xxgpio_c

		-- No stubs

	END DEFINE
 
ELSE_SIMUL
 
    -- No action defined as of now if the module is not simulated
 
END SIMUL
	
--------------------------------------------------------------------------------
--
-- ENVIRONMENTS DECLARATIONS
--
--------------------------------------------------------------------------------

--IF HOST

-- No special things that have to be done on the host to run the test.

--ELSE

-- No action defined for the target execution as of now

--END IF 

--------------------------------------------------------------------------------
-- TESTED FILE ENVIRONNEMENT
--------------------------------------------------------------------------------

-- Environment of the file hdulibstm32f4xxgpio.c

--ENVIRONMENT ENV_hdulibstm32f4xxgpio_c

    --None

--END ENVIRONMENT --ENV_hdulibstm32f4xxgpio_c

--USE ENV_hdulibstm32f4xxgpio_c

--------------------------------------------------------------------------------
--
-- SERVICES DECLARATIONS
--
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
-- Declaration of the service GpioSetBits
--------------------------------------------------------------------------------
SERVICE GpioSetBits
SERVICE_TYPE extern

-- Tested service parameters declarations

    #T_GPIO_TYPE gpio_x;
    #T_UINT16 gpio_pin;

ENVIRONMENT ENV_GpioSetBits
    
	STRUCTURE gpio_x,		init = { MODER => 0, OTYPER => 0, OSPEEDR => 0, PUPDR => 0, IDR => 0, ODR => 0, BSRRL => 0, BSRRH => 0, LCKR => 0, 
	&								AFR => { others => 0 } },		 			ev = init
	
    VAR gpio_pin,			init = 0,											ev = init
    
END ENVIRONMENT -- ENV_GpioSetBits

USE ENV_GpioSetBits

TEST 1
FAMILY nominal  

	COMMENT Test Description
    COMMENT <TD> 
    COMMENT [hdulibstm32f4xxgpio-GpioSetBits-CB-LLR-001]
    COMMENT The function 'GpioSetBits' sets GPIO port bit set/reset low register(BSRRL) with
    COMMENT the received Gpio pin value GPIO_PIN_0.
    COMMENT Equivalence Class 16
    COMMENT
	COMMENT </TD>
    
	ELEMENT
	
		COMMENT INPUT SECTION:

            --Holds the GPIO pin input value(pin number)
            VAR gpio_pin,                       	init =  GPIO_PIN_0 ,               		ev = init

        COMMENT OUTPUT SECTION:
			
			 --Sets the received Gpio pin to low register (BSRRL) of gpio_x.
             VAR gpio_x.BSRRL,         				init = 0,                  				ev = GPIO_PIN_0

        COMMENT INPUT/OUTPUT SECTION:
				
				--None

        --Stub Calls :
        SIMUL

            --No Stubs

        END SIMUL

        --Calling the Unit Under Test :				
        #GpioSetBits(&gpio_x, gpio_pin);
        
	END ELEMENT

END TEST -- TEST 1
	
TEST 2
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT [hdulibstm32f4xxgpio-GpioSetBits-CB-LLR-001]
    COMMENT The function 'GpioSetBits' sets GPIO port bit set/reset low register(BSRRL) with
    COMMENT the received Gpio pin value GPIO_PIN_1. 
    COMMENT Equivalence Class 16
	COMMENT
    COMMENT </TD>
	
    ELEMENT
	
		COMMENT INPUT SECTION:

            --Holds the GPIO pin input value(pin number)
            VAR gpio_pin,                       		init =  GPIO_PIN_1,               		ev = init

        COMMENT OUTPUT SECTION:

			 --Sets the received Gpio pin to low register (BSRRL) of gpio_x.
             VAR gpio_x.BSRRL,         					init = 0,                  				ev = GPIO_PIN_1

        COMMENT INPUT/OUTPUT SECTION:
				
				--None

        --Stub Calls :
        SIMUL

            --No Stubs

        END SIMUL

        --Calling the Unit Under Test :		
        #GpioSetBits(&gpio_x, gpio_pin);
     
	END ELEMENT

END TEST -- TEST 2
	
TEST 3
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT [hdulibstm32f4xxgpio-GpioSetBits-CB-LLR-001]
    COMMENT The function 'GpioSetBits' sets GPIO port bit set/reset low register(BSRRL) with
    COMMENT the received Gpio pin value GPIO_PIN_2.
    COMMENT Equivalence Class 16
    COMMENT
	COMMENT </TD>

    ELEMENT
		
		COMMENT INPUT SECTION:

            --Holds the GPIO pin input value(pin number)
            VAR gpio_pin,                       init =  GPIO_PIN_2,               	ev = init

        COMMENT OUTPUT SECTION:
			
			 --Sets the received Gpio pin to low register (BSRRL) of gpio_x.
             VAR gpio_x.BSRRL,         			init = 0,                  			ev = GPIO_PIN_2

        COMMENT INPUT/OUTPUT SECTION:
				
				--None
        
		--Stub Calls :
        SIMUL

            --No Stubs

        END SIMUL

        --Calling the Unit Under Test :	
        #GpioSetBits(&gpio_x, gpio_pin);
        
	END ELEMENT

END TEST -- TEST 3
 
TEST 4
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT [hdulibstm32f4xxgpio-GpioSetBits-CB-LLR-001] 
    COMMENT The function 'GpioSetBits' sets GPIO port bit set/reset low register(BSRRL) with
    COMMENT the received Gpio pin value GPIO_PIN_3.
    COMMENT Equivalence Class 16
	COMMENT
    COMMENT </TD>

    ELEMENT
		
		COMMENT INPUT SECTION:

            --Holds the GPIO pin input value(pin number)
            VAR gpio_pin,                       init =  GPIO_PIN_3,               	ev = init

        COMMENT OUTPUT SECTION:
		
			 --Sets the received Gpio pin to low register (BSRRL) of gpio_x.
             VAR gpio_x.BSRRL,         			init = 0,            	      		ev = GPIO_PIN_3

        COMMENT INPUT/OUTPUT SECTION:
				
				--None
        
		--Stub Calls :
        SIMUL

            --No Stubs

        END SIMUL

        --Calling the Unit Under Test :				
        #GpioSetBits(&gpio_x, gpio_pin);
        
	END ELEMENT

END TEST -- TEST 4
 
TEST 5
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT [hdulibstm32f4xxgpio-GpioSetBits-CB-LLR-001]
    COMMENT The function 'GpioSetBits' sets GPIO port bit set/reset low register(BSRRL) with
    COMMENT the received Gpio pin value GPIO_PIN_4.
    COMMENT Equivalence Class 16
	COMMENT
    COMMENT </TD>

    ELEMENT
	
		COMMENT INPUT SECTION:

            --Holds the GPIO pin input value(pin number)
            VAR gpio_pin,                       	init =  GPIO_PIN_4,               	ev = init

        COMMENT OUTPUT SECTION:

			 --Sets the received Gpio pin to low register (BSRRL) of gpio_x.
             VAR gpio_x.BSRRL,         				init = 0,                  			ev = GPIO_PIN_4

        COMMENT INPUT/OUTPUT SECTION:
				
				--None

        --Stub Calls :
        SIMUL

            --No Stubs

        END SIMUL

        --Calling the Unit Under Test :				
        #GpioSetBits(&gpio_x, gpio_pin);
        
	END ELEMENT

END TEST -- TEST 5
 
TEST 6
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT [hdulibstm32f4xxgpio-GpioSetBits-CB-LLR-001]
    COMMENT The function 'GpioSetBits' sets GPIO port bit set/reset low register(BSRRL) with
    COMMENT the received Gpio pin value GPIO_PIN_5. 
    COMMENT Equivalence Class 16
	COMMENT
    COMMENT </TD>

    ELEMENT
		
		COMMENT INPUT SECTION:

            --Holds the GPIO pin input value(pin number)
            VAR gpio_pin,                       init =  GPIO_PIN_5,               	ev = init

        COMMENT OUTPUT SECTION:

			 --Sets the received Gpio pin to low register (BSRRL) of gpio_x.
             VAR gpio_x.BSRRL,         			init = 0,                  			ev = GPIO_PIN_5

        COMMENT INPUT/OUTPUT SECTION:
				
				--None

        --Stub Calls : 
        SIMUL

            --No Stubs

        END SIMUL

        --Calling the Unit Under Test :
        #GpioSetBits(&gpio_x, gpio_pin);
        
	END ELEMENT

END TEST -- TEST 6
 
TEST 7
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT [hdulibstm32f4xxgpio-GpioSetBits-CB-LLR-001] 
    COMMENT The function 'GpioSetBits' sets GPIO port bit set/reset low register(BSRRL) with
    COMMENT the received Gpio pin value GPIO_PIN_6.
    COMMENT Equivalence Class 16
	COMMENT
    COMMENT </TD>

    ELEMENT
	
		COMMENT INPUT SECTION:

            --Holds the GPIO pin input value(pin number)
            VAR gpio_pin,                       init =  GPIO_PIN_6,               	ev = init

        COMMENT OUTPUT SECTION:

			 --Sets the received Gpio pin to low register (BSRRL) of gpio_x.
             VAR gpio_x.BSRRL,         			init = 0,                	  		ev = GPIO_PIN_6

        COMMENT INPUT/OUTPUT SECTION:
				
				--None

        --Stub Calls :
        SIMUL

            --No Stubs

        END SIMUL

        --Calling the Unit Under Test :				
        #GpioSetBits(&gpio_x, gpio_pin);
        
	END ELEMENT

END TEST -- TEST 7
 
TEST 8
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT [hdulibstm32f4xxgpio-GpioSetBits-CB-LLR-001]
    COMMENT The function 'GpioSetBits' sets GPIO port bit set/reset low register(BSRRL) with
    COMMENT the received Gpio pin value GPIO_PIN_7.
    COMMENT Equivalence Class 16
	COMMENT
    COMMENT </TD>

    ELEMENT
	
		COMMENT INPUT SECTION:

            --Holds the GPIO pin input value(pin number)
            VAR gpio_pin,                       init =  GPIO_PIN_7,               	ev = init

        COMMENT OUTPUT SECTION:

			 --Sets the received Gpio pin to low register (BSRRL) of gpio_x.
             VAR gpio_x.BSRRL,         			init = 0,               	   		ev = GPIO_PIN_7

        COMMENT INPUT/OUTPUT SECTION:
				
				--None

        --Stub Calls :
        SIMUL

            --No Stubs

        END SIMUL

        --Calling the Unit Under Test :				
        #GpioSetBits(&gpio_x, gpio_pin);
        
	END ELEMENT

END TEST -- TEST 8
 
TEST 9
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT [hdulibstm32f4xxgpio-GpioSetBits-CB-LLR-001]
    COMMENT The function 'GpioSetBits' sets GPIO port bit set/reset low register(BSRRL) with
    COMMENT the received Gpio pin value GPIO_PIN_8. 
    COMMENT Equivalence Class 16
	COMMENT
    COMMENT </TD>

    ELEMENT
		COMMENT INPUT SECTION:

            --Holds the GPIO pin input value(pin number)
            VAR gpio_pin,                       init =  GPIO_PIN_8,               	ev = init

        COMMENT OUTPUT SECTION:

			 --Sets the received Gpio pin to low register (BSRRL) of gpio_x.
             VAR gpio_x.BSRRL,         			init = 0,                 	 		ev = GPIO_PIN_8

        COMMENT INPUT/OUTPUT SECTION:
				
				--None

        --Stub Calls :   
        SIMUL

            --No Stubs

        END SIMUL

        --Calling the Unit Under Test :	
        #GpioSetBits(&gpio_x, gpio_pin);
     
	END ELEMENT

END TEST -- TEST 9
 
TEST 10
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT [hdulibstm32f4xxgpio-GpioSetBits-CB-LLR-001]
    COMMENT The function 'GpioSetBits' sets GPIO port bit set/reset low register(BSRRL) with
    COMMENT the received Gpio pin value GPIO_PIN_9.
    COMMENT Equivalence Class 16
	COMMENT
    COMMENT </TD>

    ELEMENT
	
		COMMENT INPUT SECTION:

            --Holds the GPIO pin input value(pin number)
            VAR gpio_pin,                       init =  GPIO_PIN_9,               	ev = init

        COMMENT OUTPUT SECTION:

			 --Sets the received Gpio pin to low register (BSRRL) of gpio_x.
             VAR gpio_x.BSRRL,         			init = 0,                 	 		ev = GPIO_PIN_9

        COMMENT INPUT/OUTPUT SECTION:
				
				--None
        --Stub Calls :
        SIMUL

            --No Stubs

        END SIMUL
        
        --Calling the Unit Under Test :				
        #GpioSetBits(&gpio_x, gpio_pin);
       
	END ELEMENT

END TEST -- TEST 10
 
TEST 11
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT [hdulibstm32f4xxgpio-GpioSetBits-CB-LLR-001]
    COMMENT The function 'GpioSetBits' sets GPIO port bit set/reset low register(BSRRL) with
    COMMENT the received Gpio pin value GPIO_PIN_10.
    COMMENT Equivalence Class 16
	COMMENT
    COMMENT </TD>


    ELEMENT
	
		COMMENT INPUT SECTION:

            --Holds the GPIO pin input value(pin number)
            VAR gpio_pin,                       init =  GPIO_PIN_10,               	ev = init

        COMMENT OUTPUT SECTION:

			--Sets the received Gpio pin to low register (BSRRL) of gpio_x.
            VAR gpio_x.BSRRL,         			init = 0,                 	 		ev = GPIO_PIN_10

        COMMENT INPUT/OUTPUT SECTION:
				
				--None

        --Stub Calls :
        SIMUL

            --No Stubs

        END SIMUL
        
        --Calling the Unit Under Test :				
        #GpioSetBits(&gpio_x, gpio_pin);
        
	END ELEMENT

END TEST -- TEST 11
 
TEST 12
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT [hdulibstm32f4xxgpio-GpioSetBits-CB-LLR-001]
    COMMENT The function 'GpioSetBits' sets GPIO port bit set/reset low register(BSRRL) with
    COMMENT the received Gpio pin value GPIO_PIN_11. 
    COMMENT Equivalence Class 16
	COMMENT
    COMMENT </TD>

    ELEMENT
		COMMENT INPUT SECTION:

            --Holds the GPIO pin input value(pin number)
            VAR gpio_pin,                       init =  GPIO_PIN_11,               		ev = init

        COMMENT OUTPUT SECTION:

			--Sets the received Gpio pin to low register (BSRRL) of gpio_x.
			VAR gpio_x.BSRRL,         			init = 0,                  				ev = GPIO_PIN_11

        COMMENT INPUT/OUTPUT SECTION:
				
				--None
        
		--Stub Calls :
        SIMUL

            --No Stubs

        END SIMUL
        
        --Calling the Unit Under Test :
        #GpioSetBits(&gpio_x, gpio_pin);
        
	END ELEMENT

END TEST -- TEST 12
 
TEST 13
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT [hdulibstm32f4xxgpio-GpioSetBits-CB-LLR-001]
    COMMENT The function 'GpioSetBits' sets GPIO port bit set/reset low register(BSRRL) with
    COMMENT the received Gpio pin value GPIO_PIN_12.
    COMMENT Equivalence Class 16
	COMMENT
    COMMENT </TD>


    ELEMENT
	
		COMMENT INPUT SECTION:

            --Holds the GPIO pin input value(pin number)
            VAR gpio_pin,                       init =  GPIO_PIN_12,               		ev = init

        COMMENT OUTPUT SECTION:
		
			--Sets the received Gpio pin to low register (BSRRL) of gpio_x.
             VAR gpio_x.BSRRL,         			init = 0,                  				ev = GPIO_PIN_12

        COMMENT INPUT/OUTPUT SECTION:
				
				--None

        --Stub Calls :
        SIMUL

            --No Stubs

        END SIMUL
        
        --Calling the Unit Under Test :
        #GpioSetBits(&gpio_x, gpio_pin);
      
	END ELEMENT

END TEST -- TEST 13
 
TEST 14
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT [hdulibstm32f4xxgpio-GpioSetBits-CB-LLR-001]
    COMMENT The function 'GpioSetBits' sets GPIO port bit set/reset low register(BSRRL) with
    COMMENT the received Gpio pin value GPIO_PIN_13.
    COMMENT Equivalence Class 16
	COMMENT
    COMMENT </TD>


    ELEMENT
	
		COMMENT INPUT SECTION:

            --Holds the GPIO pin input value(pin number)
            VAR gpio_pin,                       init =  GPIO_PIN_13,               	ev = init

        COMMENT OUTPUT SECTION:
			
			--Sets the received Gpio pin to low register (BSRRL) of gpio_x.
             VAR gpio_x.BSRRL,         			init = 0,                 	 		ev = GPIO_PIN_13

        COMMENT INPUT/OUTPUT SECTION:
				
				--None
				
        --Stub Calls :
        SIMUL

            --No Stubs

        END SIMUL
        
        --Calling the Unit Under Test :	
        #GpioSetBits(&gpio_x, gpio_pin);
		
    END ELEMENT

END TEST -- TEST 14
 
TEST 15
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT [hdulibstm32f4xxgpio-GpioSetBits-CB-LLR-001]
    COMMENT The function 'GpioSetBits' sets GPIO port bit set/reset low register(BSRRL) with
    COMMENT the received Gpio pin value GPIO_PIN_14.
    COMMENT Equivalence Class 16
	COMMENT
    COMMENT </TD>
    
	ELEMENT
	
		COMMENT INPUT SECTION:

            --Holds the GPIO pin input value(pin number)
            VAR gpio_pin,                       init =  GPIO_PIN_14,               	ev = init

        COMMENT OUTPUT SECTION:

			--Sets the received Gpio pin to low register (BSRRL) of gpio_x.
            VAR gpio_x.BSRRL,         			init = 0,                  			ev = GPIO_PIN_14

        COMMENT INPUT/OUTPUT SECTION:
				
				--None
		--Stub Calls :
        SIMUL

            --No Stubs

        END SIMUL
        
        --Calling the Unit Under Test :		
        #GpioSetBits(&gpio_x, gpio_pin);
        
	END ELEMENT

END TEST -- TEST 15
 
TEST 16
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT [hdulibstm32f4xxgpio-GpioSetBits-CB-LLR-001]
    COMMENT The function 'GpioSetBits' sets GPIO port bit set/reset low register(BSRRL) with
    COMMENT the received Gpio pin value GPIO_PIN_15.
    COMMENT Equivalence Class 16
	COMMENT
    COMMENT </TD>

    ELEMENT
	
		COMMENT INPUT SECTION:

			--Holds the GPIO pin input value(pin number)
            VAR gpio_pin,                       init =  GPIO_PIN_15,               	ev = init

        COMMENT OUTPUT SECTION:

			--Sets the received Gpio pin to low register (BSRRL) of gpio_x.
            VAR gpio_x.BSRRL,         			init = 0,               	   		ev = GPIO_PIN_15

        COMMENT INPUT/OUTPUT SECTION:
				
				--None
		
		 --Stub Calls :
        SIMUL

            --No Stubs

        END SIMUL
        
        --Calling the Unit Under Test :
        #GpioSetBits(&gpio_x, gpio_pin);
        
	END ELEMENT

END TEST -- TEST 16
 
TEST 17
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT [hdulibstm32f4xxgpio-GpioSetBits-CB-LLR-001]
    COMMENT The function 'GpioSetBits' sets GPIO port bit set/reset low register(BSRRL) with
    COMMENT the received Gpio pin value GPIO_PIN_ALL. 
    COMMENT Equivalence Class 16
	COMMENT
    COMMENT </TD>

    ELEMENT
	
		COMMENT INPUT SECTION:

            --Holds the GPIO pin input value(pin number)
            VAR gpio_pin,                       init =  GPIO_PIN_ALL,               ev = init

        COMMENT OUTPUT SECTION:

			--Sets the received Gpio pin to low register (BSRRL) of gpio_x.
            VAR gpio_x.BSRRL,         			init = 0,                  			ev = GPIO_PIN_ALL

        COMMENT INPUT/OUTPUT SECTION:
				
				--None
        --Stub Calls :
        SIMUL

            --No Stubs

        END SIMUL
        
        --Calling the Unit Under Test :					
        #GpioSetBits(&gpio_x, gpio_pin);
        
	END ELEMENT

END TEST -- TEST 17

--TEST 18
--FAMILY robustness
--
--    COMMENT Test Description
--    COMMENT <TD> 
--    COMMENT [hdulibstm32f4xxgpio-GpioSetBits-CB-LLR-001]
--    COMMENT Since 'gpio_x' is passed as NULL, it shows abnormal behaviour and hence it is commented.
--    COMMENT Equivalence Class 11
--    COMMENT </TD>
--
--    ELEMENT
--
--        COMMENT INPUT SECTION:
--
--         	--None
--
--        COMMENT OUTPUT SECTION:
--
--          --None
--
--        COMMENT INPUT/OUTPUT SECTION:
--
--       	--None
--
--        --Stub Calls :
--        SIMUL
--
--          --No Stubs
--
--        END SIMUL
--
--        --Calling the Unit Under Test :
--        #GpioSetBits(NULL,gpio_pin);
--
--    END ELEMENT
--   
--END TEST -- TEST 18

END SERVICE -- GpioSetBits

--------------------------------------------------------------------------------
-- Declaration of the service GpioToggleBits
--------------------------------------------------------------------------------
SERVICE GpioToggleBits
SERVICE_TYPE extern

-- Tested service parameters declarations

    #T_GPIO_TYPE gpio_x;
    #T_UINT16 gpio_pin;

ENVIRONMENT ENV_GpioToggleBits
   
	STRUCTURE gpio_x,		init = { MODER => 0, OTYPER => 0, OSPEEDR => 0, PUPDR => 0, IDR => 0, ODR => 0, BSRRL => 0, BSRRH => 0, LCKR => 0,
	&								AFR => { others => 0 } },	ev = init
   
	VAR gpio_pin,			init = 0,							ev = init
    
END ENVIRONMENT -- ENV_GpioToggleBits
   
USE ENV_GpioToggleBits

TEST 1
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT [hdulibstm32f4xxgpio-GpioToggleBits-CB-LLR-001]
    COMMENT 1.The function 'GpioToggleBits' toggles the received gpio pins in Gpio output data register (ODR).
    COMMENT 2.gpio_pin tested for value GPIO_PIN_0.
    COMMENT 3.ODR tested for minimum value 0x0 
    COMMENT Equivalence Class 18
	COMMENT
    COMMENT </TD>

     ELEMENT

        COMMENT INPUT SECTION:

            --Holds the GPIO pin input value(pin number)
            VAR gpio_pin,           	init = GPIO_PIN_0 ,           		ev = init

        COMMENT INPUT/OUTPUT SECTION:
            
            --Holds Gpio output data register content
            VAR gpio_x.ODR,       		init = 0x0,                     	ev = 0x1

        COMMENT OUTPUT SECTION:
                        
            --None
            
        --Stub Calls :
        SIMUL

            --No Stubs

        END SIMUL

        --Calling the Unit Under Test :
        #GpioToggleBits(&gpio_x, gpio_pin);
        
	END ELEMENT

END TEST -- TEST 1
	
TEST 2
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT [hdulibstm32f4xxgpio-GpioToggleBits-CB-LLR-001]
    COMMENT 1.The function 'GpioToggleBits' toggles the received gpio pins in Gpio output data register (ODR).
    COMMENT 2.gpio_pin tested for value GPIO_PIN_1.
    COMMENT 3.ODR tested for minimum+1 value 0x1
    COMMENT Equivalence Class 18
	COMMENT
    COMMENT </TD>

     ELEMENT

        COMMENT INPUT SECTION:

            --Holds the GPIO pin input value(pin number)
            VAR gpio_pin,           	init = GPIO_PIN_1 ,           	ev = init

        COMMENT INPUT/OUTPUT SECTION:
            
            --Holds Gpio output data register content
            VAR gpio_x.ODR,       		init = 0x1,                     ev = 0x3

        COMMENT OUTPUT SECTION:
                        
            --None
            
        --Stub Calls :
        SIMUL

            --No Stubs

        END SIMUL

        --Calling the Unit Under Test :
        #GpioToggleBits(&gpio_x, gpio_pin);
       
	END ELEMENT

END TEST -- TEST 2
	
TEST 3
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT [hdulibstm32f4xxgpio-GpioToggleBits-CB-LLR-001]
    COMMENT 1.The function 'GpioToggleBits' toggles the received gpio pins in Gpio output data register (ODR).
    COMMENT 2.gpio_pin tested for value GPIO_PIN_2.
    COMMENT 3.ODR tested for nominal value 0xFFFF 
    COMMENT Equivalence Class 18
	COMMENT
    COMMENT </TD>


     ELEMENT

        COMMENT INPUT SECTION:

            --Holds the GPIO pin input value(pin number)
            VAR gpio_pin,           		init = GPIO_PIN_2 ,           		ev = init

        COMMENT INPUT/OUTPUT SECTION:
            
            --Holds Gpio output data register content
            VAR gpio_x.ODR,       			init = (T_VLT_UINT32)0xFFFF,                     	ev = (T_VLT_UINT32)0xFFFB

        COMMENT OUTPUT SECTION:
                        
            --None
            
        --Stub Calls :
        SIMUL

            --No Stubs

        END SIMUL

        --Calling the Unit Under Test :
        #GpioToggleBits(&gpio_x, gpio_pin);
     
	END ELEMENT

END TEST -- TEST 3
	

TEST 4
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT [hdulibstm32f4xxgpio-GpioToggleBits-CB-LLR-001]
    COMMENT 1.The function 'GpioToggleBits' toggles the received gpio pins in Gpio output data register (ODR).
    COMMENT 2.gpio_pin tested for value GPIO_PIN_3.
    COMMENT 3.ODR tested for maximum value 0xFFFFFFFF 
    COMMENT Equivalence Class 18
	COMMENT
    COMMENT </TD>

    ELEMENT

        COMMENT INPUT SECTION:

            --Holds the GPIO pin input value(pin number)
            VAR gpio_pin,           	init = GPIO_PIN_3,           			ev = init

        COMMENT INPUT/OUTPUT SECTION:
            
            --Holds Gpio output data register content
            VAR gpio_x.ODR,       		init = (T_VLT_UINT32)0xFFFFFFFF,                     	ev = (T_VLT_UINT32)0xFFFFFFF7

        COMMENT OUTPUT SECTION:
                        
            --None
            
        --Stub Calls :
        SIMUL

            --No Stubs

        END SIMUL

        --Calling the Unit Under Test :
        #GpioToggleBits(&gpio_x, gpio_pin);
        
	END ELEMENT

END TEST -- TEST 4	
	
TEST 5
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT [hdulibstm32f4xxgpio-GpioToggleBits-CB-LLR-001]
    COMMENT 1.The function 'GpioToggleBits' toggles the received gpio pins in Gpio output data register (ODR).
    COMMENT 2.gpio_pin tested for value GPIO_PIN_4.
    COMMENT 3.ODR tested for maximum-1 value 0xFFFFFFFE
    COMMENT Equivalence Class 18
	COMMENT
    COMMENT </TD>

    ELEMENT

        COMMENT INPUT SECTION:

            --Holds the GPIO pin input value(pin number)
            VAR gpio_pin,           	init = GPIO_PIN_4,           			ev = init

        COMMENT INPUT/OUTPUT SECTION:
            
            --Holds Gpio output data register content
            VAR gpio_x.ODR,       		init = (T_VLT_UINT32)0xFFFFFFFE,                     	ev = (T_VLT_UINT32)0xFFFFFFEE

        COMMENT OUTPUT SECTION:
                        
            --None
            
        --Stub Calls :
        SIMUL

            --No Stubs

        END SIMUL

        --Calling the Unit Under Test :
        #GpioToggleBits(&gpio_x, gpio_pin);
        
	END ELEMENT

END TEST -- TEST 5
	
TEST 6
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT [hdulibstm32f4xxgpio-GpioToggleBits-CB-LLR-001]
    COMMENT 1.The function 'GpioToggleBits' toggles the received gpio pins in Gpio output data register (ODR).
    COMMENT 2.gpio_pin tested for value GPIO_PIN_5.
    COMMENT Equivalence Class 18
    COMMENT </TD>

    ELEMENT

        COMMENT INPUT SECTION:

            --Holds the GPIO pin input value(pin number)
            VAR gpio_pin,           		init = GPIO_PIN_5,           		ev = init

        COMMENT INPUT/OUTPUT SECTION:
            
            --Holds Gpio output data register content
            VAR gpio_x.ODR,       			init = 0x1,                     	ev = 0x21

        COMMENT OUTPUT SECTION:
                        
            --None
            
        --Stub Calls :
        SIMUL

            --No Stubs

        END SIMUL

        --Calling the Unit Under Test :
        #GpioToggleBits(&gpio_x, gpio_pin);
        
	END ELEMENT

END TEST -- TEST 6
	
TEST 7
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT [hdulibstm32f4xxgpio-GpioToggleBits-CB-LLR-001]
    COMMENT 1.The function 'GpioToggleBits' toggles the received gpio pins in Gpio output data register (ODR).
    COMMENT 2.gpio_pin tested for value GPIO_PIN_6.
    COMMENT Equivalence Class 18
    COMMENT </TD>

    ELEMENT

		COMMENT INPUT SECTION:

            --Holds the GPIO pin input value(pin number)
            VAR gpio_pin,           	init = GPIO_PIN_6,           		ev = init

        COMMENT INPUT/OUTPUT SECTION:
            
            --Holds Gpio output data register content
            VAR gpio_x.ODR,       		init = 0x1,                     	ev = 0x41

        COMMENT OUTPUT SECTION:
                        
            --None
            
        --Stub Calls :
        SIMUL

            --No Stubs

        END SIMUL

        --Calling the Unit Under Test :
        #GpioToggleBits(&gpio_x, gpio_pin);
        
	END ELEMENT

END TEST -- TEST 7
	
TEST 8
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT [hdulibstm32f4xxgpio-GpioToggleBits-CB-LLR-001]
    COMMENT 1.The function 'GpioToggleBits' toggles the received gpio pins in Gpio output data register (ODR).
    COMMENT 2.gpio_pin tested for value GPIO_PIN_7.
    COMMENT Equivalence Class 18
	COMMENT
    COMMENT </TD>

    ELEMENT

        COMMENT INPUT SECTION:

            --Holds the GPIO pin input value(pin number)
            VAR gpio_pin,           		init = GPIO_PIN_7,           	ev = init

        COMMENT INPUT/OUTPUT SECTION:
            
            --Holds Gpio output data register content
            VAR gpio_x.ODR,       			init = 0x1,                     ev = 0x81

        COMMENT OUTPUT SECTION:
                        
            --None
            
        --Stub Calls :
        SIMUL

            --No Stubs

        END SIMUL

        --Calling the Unit Under Test :
        #GpioToggleBits(&gpio_x, gpio_pin);
        
	END ELEMENT

END TEST -- TEST 8
	
TEST 9
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT [hdulibstm32f4xxgpio-GpioToggleBits-CB-LLR-001]
    COMMENT 1.The function 'GpioToggleBits' toggles the received gpio pins in Gpio output data register (ODR).
    COMMENT 2.gpio_pin tested for value GPIO_PIN_8.
    COMMENT Equivalence Class 18
	COMMENT
    COMMENT </TD>


    ELEMENT

        COMMENT INPUT SECTION:

            --Holds the GPIO pin input value(pin number)
            VAR gpio_pin,           	init = GPIO_PIN_8,           	ev = init

        COMMENT INPUT/OUTPUT SECTION:
            
            --Holds Gpio output data register content
            VAR gpio_x.ODR,       		init = 0x1,                     ev = 0x101

        COMMENT OUTPUT SECTION:
                        
            --None
            
        --Stub Calls :
        SIMUL

            --No Stubs

        END SIMUL

        --Calling the Unit Under Test :
        #GpioToggleBits(&gpio_x, gpio_pin);
        
	END ELEMENT

END TEST -- TEST 9
	
TEST 10
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT [hdulibstm32f4xxgpio-GpioToggleBits-CB-LLR-001]
    COMMENT 1.The function 'GpioToggleBits' toggles the received gpio pins in Gpio output data register (ODR).
    COMMENT 2.gpio_pin tested for value GPIO_PIN_9.
    COMMENT Equivalence Class 18
	COMMENT
    COMMENT </TD>
    
	ELEMENT

        COMMENT INPUT SECTION:

            --Holds the GPIO pin input value(pin number)
            VAR gpio_pin,           init = GPIO_PIN_9,           	ev = init

        COMMENT INPUT/OUTPUT SECTION:
            
            --Holds Gpio output data register content
            VAR gpio_x.ODR,       	init = 0x1,                     ev = 0x201

        COMMENT OUTPUT SECTION:
                        
            --None
            
        --Stub Calls :
        SIMUL

            --No Stubs

        END SIMUL

        --Calling the Unit Under Test :
        #GpioToggleBits(&gpio_x, gpio_pin);
        
	END ELEMENT

END TEST -- TEST 10

TEST 11
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT [hdulibstm32f4xxgpio-GpioToggleBits-CB-LLR-001]
    COMMENT 1.The function 'GpioToggleBits' toggles the received gpio pins in Gpio output data register (ODR).
    COMMENT 2.gpio_pin tested for value GPIO_PIN_10.
    COMMENT Equivalence Class 18
	COMMENT
    COMMENT </TD>

    ELEMENT

        COMMENT INPUT SECTION:

            --Holds the GPIO pin input value(pin number)
            VAR gpio_pin,           init = GPIO_PIN_10,           	ev = init

        COMMENT INPUT/OUTPUT SECTION:
            
            --Holds Gpio output data register content
            VAR gpio_x.ODR,       	init = 0x1,                     ev = 0x401

        COMMENT OUTPUT SECTION:
                        
            --None
            
        --Stub Calls :
        SIMUL

            --No Stubs

        END SIMUL

        --Calling the Unit Under Test :
        #GpioToggleBits(&gpio_x, gpio_pin);
        
	END ELEMENT

END TEST -- TEST 11	
	
TEST 12
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT [hdulibstm32f4xxgpio-GpioToggleBits-CB-LLR-001]
    COMMENT 1.The function 'GpioToggleBits' toggles the received gpio pins in Gpio output data register (ODR).
    COMMENT 2.gpio_pin tested for value GPIO_PIN_11.
    COMMENT Equivalence Class 18
	COMMENT
    COMMENT </TD>


     ELEMENT

        COMMENT INPUT SECTION:

            --Holds the GPIO pin input value(pin number)
            VAR gpio_pin,           init = GPIO_PIN_11,           	ev = init

        COMMENT INPUT/OUTPUT SECTION:
            
            --Holds Gpio output data register content
            VAR gpio_x.ODR,       	init = 0x1,                     ev = 0x801

        COMMENT OUTPUT SECTION:
                        
            --None
            
        --Stub Calls :
        SIMUL

            --No Stubs

        END SIMUL

        --Calling the Unit Under Test :
        #GpioToggleBits(&gpio_x, gpio_pin);
        
	END ELEMENT

END TEST -- TEST 12
	
TEST 13
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT [hdulibstm32f4xxgpio-GpioToggleBits-CB-LLR-001]
    COMMENT 1.The function 'GpioToggleBits' toggles the received gpio pins in Gpio output data register (ODR).
    COMMENT 2.gpio_pin tested for value GPIO_PIN_12.
    COMMENT Equivalence Class 18
	COMMENT
    COMMENT </TD>

    ELEMENT

        COMMENT INPUT SECTION:

            --Holds the GPIO pin input value(pin number)
            VAR gpio_pin,           init = GPIO_PIN_12,           	ev = init

        COMMENT INPUT/OUTPUT SECTION:
            
            --Holds Gpio output data register content
            VAR gpio_x.ODR,       	init = 0x1,                     ev = 0x1001

        COMMENT OUTPUT SECTION:
                        
            --None
            
        --Stub Calls :
        SIMUL

            --No Stubs

        END SIMUL

        --Calling the Unit Under Test :
        #GpioToggleBits(&gpio_x, gpio_pin);
        
	END ELEMENT

END TEST -- TEST 13
	
TEST 14
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT [hdulibstm32f4xxgpio-GpioToggleBits-CB-LLR-001]
    COMMENT 1.The function 'GpioToggleBits' toggles the received gpio pins in Gpio output data register (ODR).
    COMMENT 2.gpio_pin tested for value GPIO_PIN_13.
    COMMENT Equivalence Class 18
	COMMENT
    COMMENT </TD>

    ELEMENT

        COMMENT INPUT SECTION:

            --Holds the GPIO pin input value(pin number)
            VAR gpio_pin,           init = GPIO_PIN_13,           	ev = init

        COMMENT INPUT/OUTPUT SECTION:
            
            --Holds Gpio output data register content
            VAR gpio_x.ODR,       	init = 0x1,                     ev = 0x2001

        COMMENT OUTPUT SECTION:
                        
            --None
            
        --Stub Calls :
        SIMUL

            --No Stubs

        END SIMUL

        --Calling the Unit Under Test :
        #GpioToggleBits(&gpio_x, gpio_pin);
        
	END ELEMENT

END TEST -- TEST 14
	
TEST 15
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT [hdulibstm32f4xxgpio-GpioToggleBits-CB-LLR-001]
    COMMENT 1.The function 'GpioToggleBits' toggles the received gpio pins in Gpio output data register (ODR).
    COMMENT 2.gpio_pin tested for value GPIO_PIN_14.
    COMMENT Equivalence Class 18
    COMMENT </TD>

    ELEMENT

        COMMENT INPUT SECTION:

            --Holds the GPIO pin input value(pin number)
            VAR gpio_pin,           init = GPIO_PIN_14,           	ev = init

        COMMENT INPUT/OUTPUT SECTION:
            
            --Holds Gpio output data register content
            VAR gpio_x.ODR,       	init = 0x1,                     ev = 0x4001

        COMMENT OUTPUT SECTION:
                        
            --None
            
        --Stub Calls :
        SIMUL

            --No Stubs

        END SIMUL

        --Calling the Unit Under Test :
        #GpioToggleBits(&gpio_x, gpio_pin);
        
	END ELEMENT

END TEST -- TEST 15
	
TEST 16
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT [hdulibstm32f4xxgpio-GpioToggleBits-CB-LLR-001]
    COMMENT 1.The function 'GpioToggleBits' toggles the received gpio pins in Gpio output data register (ODR).
    COMMENT 2.gpio_pin tested for value GPIO_PIN_15.
    COMMENT Equivalence Class 18
	COMMENT
    COMMENT </TD>

    ELEMENT

        COMMENT INPUT SECTION:

            --Holds the GPIO pin input value(pin number)
            VAR gpio_pin,           init = GPIO_PIN_15,           	ev = init

        COMMENT INPUT/OUTPUT SECTION:
            
            --Holds Gpio output data register content
            VAR gpio_x.ODR,       	init = 0x1,                     ev = 0x8001

        COMMENT OUTPUT SECTION:
                        
            --None
            
        --Stub Calls :
        SIMUL

            --No Stubs

        END SIMUL

        --Calling the Unit Under Test :
        #GpioToggleBits(&gpio_x, gpio_pin);
        
	END ELEMENT

END TEST -- TEST 16

TEST 17
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT [hdulibstm32f4xxgpio-GpioToggleBits-CB-LLR-001]
    COMMENT 1.The function 'GpioToggleBits' toggles the received gpio pins in Gpio output data register (ODR).
    COMMENT 2.gpio_pin tested for value GPIO_PIN_ALL.
    COMMENT Equivalence Class 18
	COMMENT
    COMMENT </TD>

    ELEMENT

        COMMENT INPUT SECTION:

            --Holds the GPIO pin input value(pin number)
            VAR gpio_pin,           init = GPIO_PIN_ALL,           	ev = init

        COMMENT INPUT/OUTPUT SECTION:
            
            --Holds Gpio output data register content
            VAR gpio_x.ODR,       	init = 0x1,                     ev = 0xFFFE

        COMMENT OUTPUT SECTION:
                        
            --None
            
        --Stub Calls :
        SIMUL

            --No Stubs

        END SIMUL

        --Calling the Unit Under Test :
        #GpioToggleBits(&gpio_x, gpio_pin);
        
	END ELEMENT

END TEST -- TEST 17

--TEST 18
--FAMILY robustness
--
--    COMMENT Test Description
--    COMMENT <TD> 
--    COMMENT [hdulibstm32f4xxgpio-GpioToggleBits-CB-LLR-001]
--    COMMENT Since 'gpio_x' is passed as NULL, it shows abnormal behaviour and hence it is commented.
--    COMMENT Equivalence Class 14
--    COMMENT </TD>
--
--    ELEMENT
--
--        COMMENT INPUT SECTION:
--
--            --None
--
--        COMMENT OUTPUT SECTION:
--
--            --None
--
--        COMMENT INPUT/OUTPUT SECTION:
--
--            --None
--
--        --Stub Calls :
--        SIMUL
--
--            --No Stubs
--
--        END SIMUL
--
--        --Calling the Unit Under Test :
--        #GpioToggleBits(NULL,gpio_pin);
--
--    END ELEMENT
--   
--END TEST -- TEST 18

END SERVICE -- GpioToggleBits

--------------------------------------------------------------------------------
-- Declaration of the service GpioReadInputDataBit
--------------------------------------------------------------------------------
SERVICE GpioReadInputDataBit
SERVICE_TYPE extern

-- Tested service parameters declarations

    #T_GPIO_TYPE gpio_x;
    #T_UINT16 gpio_pin;
	
-- By function returned type declaration

    #T_UINT8 ret_GpioReadInputDataBit;

ENVIRONMENT ENV_GpioReadInputDataBit
    
	STRUCTURE gpio_x,		init = { MODER => 0, OTYPER => 0, OSPEEDR => 0, PUPDR => 0, IDR => 0, ODR => 0, BSRRL => 0, BSRRH => 0, LCKR => 0, AFR => { others => 0 } },
	&														ev = init
    
	VAR gpio_pin,						init = 0,			ev = init
   
    VAR ret_GpioReadInputDataBit,		init = 0,			ev = init
   
END ENVIRONMENT -- ENV_GpioReadInputDataBit
    
USE ENV_GpioReadInputDataBit

TEST 1
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT [hdulibstm32f4xxgpio-GpioReadInputDataBit-CB-LLR-002]
    COMMENT 1.The function 'GpioReadInputDataBit' returns BIT_RESET when gpio_pin in gpio_x input 
    COMMENT   data register(IDR) is RESET.
    COMMENT 2.Variable IDR value tested for minimum value 0x0 and 
    COMMENT   gpio_pin tested for value GPIO_PIN_1
    COMMENT Equivalence Class 8
	COMMENT
    COMMENT </TD>
	
    ELEMENT

        COMMENT INPUT SECTION:

            --Holds the GPIO pin input value(pin number)
            VAR gpio_pin,                       init =  GPIO_PIN_1 ,                ev = init

            --Holgs the GPIO input data register value
            VAR gpio_x.IDR,                     init = 0x0,                         ev = init

        COMMENT OUTPUT SECTION:

            --Holds the return value of function 'GpioReadInputDataBit'
            VAR ret_GpioReadInputDataBit,       init = BIT_SET ,                    ev = BIT_RESET 

        COMMENT INPUT/OUTPUT SECTION:
        
            --None
        
        --Stub Calls :
        SIMUL

            --No Stubs

        END SIMUL

        --Calling the Unit Under Test :
        #ret_GpioReadInputDataBit = GpioReadInputDataBit(&gpio_x,gpio_pin);

    END ELEMENT

END TEST -- TEST 1

TEST 2
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT [hdulibstm32f4xxgpio-GpioReadInputDataBit-CB-LLR-001]
    COMMENT 1.The function 'GpioReadInputDataBit' returns BIT_SET when gpio_pin in gpio_x input 
    COMMENT   data register(IDR) is SET.
    COMMENT 2.Variable IDR value tested for minimum+1 value 0x1 and 
    COMMENT   gpio_pin tested for value GPIO_PIN_0
    COMMENT Equivalence Class 7.
	COMMENT
    COMMENT </TD>

    ELEMENT

        COMMENT INPUT SECTION:

            --Holds the GPIO pin input value(pin number)
            VAR gpio_pin,                       init =  GPIO_PIN_0 ,               ev = init

            --Holgs the GPIO input data register value
            VAR gpio_x.IDR,                     init = 0x1,                        ev = init

        COMMENT OUTPUT SECTION:

            --Holds the return value of function 'GpioReadInputDataBit'
            VAR ret_GpioReadInputDataBit,       init = BIT_RESET ,                 ev = BIT_SET 

        COMMENT INPUT/OUTPUT SECTION:
        
            --None
        
        --Stub Calls :
        SIMUL

            --No Stubs

        END SIMUL

        --Calling the Unit Under Test :
        #ret_GpioReadInputDataBit = GpioReadInputDataBit(&gpio_x,gpio_pin);

    END ELEMENT

END TEST -- TEST 2

TEST 3
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT [hdulibstm32f4xxgpio-GpioReadInputDataBit-CB-LLR-001]
    COMMENT 1.The function 'GpioReadInputDataBit' returns BIT_SET when gpio_pin in gpio_x input 
    COMMENT   data register(IDR) is SET.
    COMMENT 2.Variable IDR value tested for nominal value 0x7FFFFFFF and 
    COMMENT   gpio_pin tested for value GPIO_PIN_2
    COMMENT Equivalence Class 7
	COMMENT
    COMMENT </TD>

    ELEMENT

        COMMENT INPUT SECTION:

            --Holds the GPIO pin input value(pin number)
            VAR gpio_pin,                       init =  GPIO_PIN_2,               			ev = init

            --Holgs the GPIO input data register value
            VAR gpio_x.IDR,                     init = (T_VLT_UINT32)0x7FFFFFFF,                         	ev = init

        COMMENT OUTPUT SECTION:

            --Holds the return value of function 'GpioReadInputDataBit'
            VAR ret_GpioReadInputDataBit,       init = BIT_RESET ,                    		ev = BIT_SET 

        COMMENT INPUT/OUTPUT SECTION:
        
            --None
        
        --Stub Calls :
        SIMUL

            --No Stubs

        END SIMUL

        --Calling the Unit Under Test :
        #ret_GpioReadInputDataBit = GpioReadInputDataBit(&gpio_x,gpio_pin);

    END ELEMENT

END TEST -- TEST 3

TEST 4
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT [hdulibstm32f4xxgpio-GpioReadInputDataBit-CB-LLR-001]
    COMMENT 1.The function 'GpioReadInputDataBit' returns BIT_SET when gpio_pin in gpio_x input 
    COMMENT   data register(IDR) is SET.
    COMMENT 2.Variable IDR value tested for maximum-1 value 0xFFFFFFFE and 
    COMMENT   gpio_pin tested for value GPIO_PIN_3
    COMMENT Equivalence Class 7
	COMMENT
    COMMENT </TD>

    ELEMENT

        COMMENT INPUT SECTION:

            --Holds the GPIO pin input value(pin number)
            VAR gpio_pin,                       init =  GPIO_PIN_3,               			ev = init

            --Holgs the GPIO input data register value
            VAR gpio_x.IDR,                     init = (T_VLT_UINT32)0xFFFFFFFE,                         	ev = init

        COMMENT OUTPUT SECTION:

            --Holds the return value of function 'GpioReadInputDataBit'
            VAR ret_GpioReadInputDataBit,       init = BIT_RESET ,                    		ev = BIT_SET 

        COMMENT INPUT/OUTPUT SECTION:
        
            --None
        
        --Stub Calls :
        SIMUL

            --No Stubs

        END SIMUL

        --Calling the Unit Under Test :
        #ret_GpioReadInputDataBit = GpioReadInputDataBit(&gpio_x,gpio_pin);

    END ELEMENT

END TEST -- TEST 4

TEST 5
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT [hdulibstm32f4xxgpio-GpioReadInputDataBit-CB-LLR-001]
    COMMENT 1.The function 'GpioReadInputDataBit' returns BIT_SET when gpio_pin in gpio_x input 
    COMMENT   data register(IDR) is SET.
    COMMENT 2.Variable IDR value tested for maximum value 0xFFFFFFFF and 
    COMMENT   gpio_pin tested for value GPIO_PIN_4
    COMMENT Equivalence Class 7
	COMMENT
    COMMENT </TD>

    ELEMENT

        COMMENT INPUT SECTION:

            --Holds the GPIO pin input value(pin number)
            VAR gpio_pin,                       init =  GPIO_PIN_4,              			 ev = init

            --Holgs the GPIO input data register value
            VAR gpio_x.IDR,                     init = (T_VLT_UINT32)0xFFFFFFFF,                         	 ev = init

        COMMENT OUTPUT SECTION:

            --Holds the return value of function 'GpioReadInputDataBit'
            VAR ret_GpioReadInputDataBit,       init = BIT_RESET ,                    		 ev = BIT_SET 

        COMMENT INPUT/OUTPUT SECTION:
        
            --None
        
        --Stub Calls :
        SIMUL

            --No Stubs

        END SIMUL

        --Calling the Unit Under Test :
        #ret_GpioReadInputDataBit = GpioReadInputDataBit(&gpio_x,gpio_pin);

    END ELEMENT

END TEST -- TEST 5

TEST 6
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT [hdulibstm32f4xxgpio-GpioReadInputDataBit-CB-LLR-002]
    COMMENT 1.The function 'GpioReadInputDataBit' returns BIT_RESET when gpio_pin in gpio_x input 
    COMMENT   data register(IDR) is RESET.
    COMMENT 2.In this test case IDR value tested for minimum value 0x0 and 
    COMMENT   gpio_pin tested for value GPIO_PIN_5
    COMMENT Equivalence Class 8
	COMMENT
    COMMENT </TD>

    ELEMENT

        COMMENT INPUT SECTION:

            --Holds the GPIO pin input value(pin number)
            VAR gpio_pin,                       init =  GPIO_PIN_5,               	ev = init

            --Holgs the GPIO input data register value
            VAR gpio_x.IDR,                     init = 0x0,                         ev = init

        COMMENT OUTPUT SECTION:

            --Holds the return value of function 'GpioReadInputDataBit'
            VAR ret_GpioReadInputDataBit,       init = BIT_SET ,                    ev = BIT_RESET 

        COMMENT INPUT/OUTPUT SECTION:
        
            --None
        
        --Stub Calls :
        SIMUL

            --No Stubs

        END SIMUL

        --Calling the Unit Under Test :
        #ret_GpioReadInputDataBit = GpioReadInputDataBit(&gpio_x,gpio_pin);

    END ELEMENT

END TEST -- TEST 6

TEST 7
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT [hdulibstm32f4xxgpio-GpioReadInputDataBit-CB-LLR-002]
    COMMENT 1.The function 'GpioReadInputDataBit' returns BIT_RESET when gpio_pin in gpio_x input 
    COMMENT   data register(IDR) is RESET.
    COMMENT 2.Variable IDR value tested for minimum+1 value 0x1 and 
    COMMENT   gpio_pin tested for value GPIO_PIN_6
    COMMENT Equivalence Class 8
	COMMENT
    COMMENT </TD>

    ELEMENT

        COMMENT INPUT SECTION:

            --Holds the GPIO pin input value(pin number)
            VAR gpio_pin,                       init =  GPIO_PIN_6,               	ev = init

            --Holgs the GPIO input data register value
            VAR gpio_x.IDR,                     init = 0x1,                         ev = init

        COMMENT OUTPUT SECTION:

            --Holds the return value of function 'GpioReadInputDataBit'
            VAR ret_GpioReadInputDataBit,       init = BIT_SET ,                    ev = BIT_RESET 

        COMMENT INPUT/OUTPUT SECTION:
        
            --None
        
        --Stub Calls :
        SIMUL

            --No Stubs

        END SIMUL

        --Calling the Unit Under Test :
        #ret_GpioReadInputDataBit = GpioReadInputDataBit(&gpio_x,gpio_pin);

    END ELEMENT

END TEST -- TEST 7

TEST 8
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT [hdulibstm32f4xxgpio-GpioReadInputDataBit-CB-LLR-001]
    COMMENT 1.The function 'GpioReadInputDataBit' returns BIT_SET when gpio_pin in gpio_x input 
    COMMENT   data register(IDR) is SET.
    COMMENT 2.Variable IDR value tested for nominal value 0x7FFFFFFF and 
    COMMENT   gpio_pin tested for value GPIO_PIN_7
    COMMENT Equivalence Class 7
	COMMENT
    COMMENT </TD>

    ELEMENT

        COMMENT INPUT SECTION:

            --Holds the GPIO pin input value(pin number)
            VAR gpio_pin,                       init =  GPIO_PIN_7,              		   ev = init

            --Holgs the GPIO input data register value
            VAR gpio_x.IDR,                     init = (T_VLT_UINT32)0x7FFFFFFF,                         ev = init

        COMMENT OUTPUT SECTION:

            --Holds the return value of function 'GpioReadInputDataBit'
            VAR ret_GpioReadInputDataBit,       init = BIT_RESET ,                   	   ev = BIT_SET 

        COMMENT INPUT/OUTPUT SECTION:
        
            --None
        
        --Stub Calls :
        SIMUL

            --No Stubs

        END SIMUL

        --Calling the Unit Under Test :
        #ret_GpioReadInputDataBit = GpioReadInputDataBit(&gpio_x,gpio_pin);

    END ELEMENT

END TEST -- TEST 8

TEST 9
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT [hdulibstm32f4xxgpio-GpioReadInputDataBit-CB-LLR-001]
    COMMENT 1.The function 'GpioReadInputDataBit' returns BIT_SET when gpio_pin in gpio_x input 
    COMMENT   data register(IDR) is SET.
    COMMENT 2.gpio_pin tested for value GPIO_PIN_8
    COMMENT Equivalence Class 7
	COMMENT
    COMMENT </TD>

    ELEMENT

        COMMENT INPUT SECTION:

            --Holds the GPIO pin input value(pin number)
            VAR gpio_pin,                       init =  GPIO_PIN_8,              		 ev = init

            --Holgs the GPIO input data register value
            VAR gpio_x.IDR,                     init = (T_VLT_UINT32)0xFFFE, 							 ev = init

        COMMENT OUTPUT SECTION:

            --Holds the return value of function 'GpioReadInputDataBit'
            VAR ret_GpioReadInputDataBit,       init = BIT_RESET ,          			 ev = BIT_SET 

        COMMENT INPUT/OUTPUT SECTION:
        
            --None
        
        --Stub Calls :
        SIMUL

            --No Stubs

        END SIMUL

        --Calling the Unit Under Test :
        #ret_GpioReadInputDataBit = GpioReadInputDataBit(&gpio_x,gpio_pin);

    END ELEMENT

END TEST -- TEST 9


TEST 10
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT [hdulibstm32f4xxgpio-GpioReadInputDataBit-CB-LLR-001]
    COMMENT 1.The function 'GpioReadInputDataBit' returns BIT_SET when gpio_pin in gpio_x input 
    COMMENT   data register(IDR) is SET.
    COMMENT 2.gpio_pin tested for value GPIO_PIN_9
    COMMENT Equivalence Class 7
	COMMENT
    COMMENT </TD>

    ELEMENT

        COMMENT INPUT SECTION:

            --Holds the GPIO pin input value(pin number)
            VAR gpio_pin,                       init =  GPIO_PIN_9,               		ev = init

            --Holgs the GPIO input data register value
           VAR gpio_x.IDR,                     init = (T_VLT_UINT32)0xFFFF,                  			ev = init

        COMMENT OUTPUT SECTION:

            --Holds the return value of function 'GpioReadInputDataBit'
            VAR ret_GpioReadInputDataBit,       init = BIT_RESET ,          			ev = BIT_SET 

        COMMENT INPUT/OUTPUT SECTION:
        
            --None
        
        --Stub Calls :
        SIMUL

            --No Stubs

        END SIMUL

        --Calling the Unit Under Test :
        #ret_GpioReadInputDataBit = GpioReadInputDataBit(&gpio_x,gpio_pin);

    END ELEMENT

END TEST -- TEST 10

TEST 11
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT [hdulibstm32f4xxgpio-GpioReadInputDataBit-CB-LLR-002]
    COMMENT 1.The function 'GpioReadInputDataBit' returns BIT_RESET when gpio_pin in gpio_x input 
    COMMENT   data register(IDR) is RESET.
    COMMENT 2.Variable IDR value tested for minimum value 0x0 and 
    COMMENT   gpio_pin tested for value GPIO_PIN_10
    COMMENT Equivalence Class 8
	COMMENT
    COMMENT </TD>

    ELEMENT

        COMMENT INPUT SECTION:

            --Holds the GPIO pin input value(pin number)
            VAR gpio_pin,                       init =  GPIO_PIN_10,				ev = init

            --Holgs the GPIO input data register value
           VAR gpio_x.IDR,                     	init = 0x0,        					ev = init

        COMMENT OUTPUT SECTION:

            --Holds the return value of function 'GpioReadInputDataBit'
            VAR ret_GpioReadInputDataBit,       init = BIT_SET ,   					ev = BIT_RESET 

        COMMENT INPUT/OUTPUT SECTION:
        
            --None
        
        --Stub Calls :
        SIMUL

            --No Stubs

        END SIMUL

        --Calling the Unit Under Test :
        #ret_GpioReadInputDataBit = GpioReadInputDataBit(&gpio_x,gpio_pin);

    END ELEMENT

END TEST -- TEST 11

TEST 12
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT [hdulibstm32f4xxgpio-GpioReadInputDataBit-CB-LLR-002]
    COMMENT 1.The function 'GpioReadInputDataBit' returns BIT_RESET when gpio_pin in gpio_x input 
    COMMENT   data register(IDR) is RESET.
    COMMENT 2.Variable IDR value tested for minimum+1 value 0x1 and 
    COMMENT   gpio_pin tested for value GPIO_PIN_11
    COMMENT Equivalence Class 8
	COMMENT
    COMMENT </TD>

    ELEMENT

        COMMENT INPUT SECTION:

            --Holds the GPIO pin input value(pin number)
            VAR gpio_pin,                      init =  GPIO_PIN_11,                 ev = init

            --Holgs the GPIO input data register value
           VAR gpio_x.IDR,                     	init = 0x1,                         ev = init

        COMMENT OUTPUT SECTION:

            --Holds the return value of function 'GpioReadInputDataBit'
            VAR ret_GpioReadInputDataBit,       init = BIT_SET ,                    ev = BIT_RESET 

        COMMENT INPUT/OUTPUT SECTION:
        
            --None
        
        --Stub Calls :
        SIMUL

            --No Stubs

        END SIMUL

        --Calling the Unit Under Test :
        #ret_GpioReadInputDataBit = GpioReadInputDataBit(&gpio_x,gpio_pin);

    END ELEMENT

END TEST -- TEST 12

TEST 13
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD>  
    COMMENT [hdulibstm32f4xxgpio-GpioReadInputDataBit-CB-LLR-001]
    COMMENT 1.The function 'GpioReadInputDataBit' returns BIT_SET when gpio_pin in gpio_x input 
    COMMENT   data register(IDR) is SET.
    COMMENT 2.In this test case IDR value tested for nominal value 0x7FFFFFFF and 
    COMMENT   gpio_pin tested for value GPIO_PIN_12
    COMMENT Equivalence Class 7
	COMMENT
    COMMENT </TD>

    ELEMENT

        COMMENT INPUT SECTION:

            --Holds the GPIO pin input value(pin number)
            VAR gpio_pin,                       init =  GPIO_PIN_12,                ev = init

            --Holgs the GPIO input data register value
           VAR gpio_x.IDR,                      init = (T_VLT_UINT32)0x7FFFFFFF,                 	ev = init

        COMMENT OUTPUT SECTION:

            --Holds the return value of function 'GpioReadInputDataBit'
            VAR ret_GpioReadInputDataBit,       init = BIT_RESET ,         			ev = BIT_SET 

        COMMENT INPUT/OUTPUT SECTION:
        
            --None
        
        --Stub Calls :
        SIMUL

            --No Stubs

        END SIMUL

        --Calling the Unit Under Test :
        #ret_GpioReadInputDataBit = GpioReadInputDataBit(&gpio_x,gpio_pin);

    END ELEMENT

END TEST -- TEST 13

TEST 14
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT [hdulibstm32f4xxgpio-GpioReadInputDataBit-CB-LLR-001]
    COMMENT 1.The function 'GpioReadInputDataBit' returns BIT_SET when gpio_pin in gpio_x input 
    COMMENT   data register(IDR) is SET.
    COMMENT 2.gpio_pin tested for value GPIO_PIN_13
    COMMENT Equivalence Class 7
	COMMENT
    COMMENT </TD>

    ELEMENT

        COMMENT INPUT SECTION:

            --Holds the GPIO pin input value(pin number)
            VAR gpio_pin,                       init =  GPIO_PIN_13,               		ev = init

            --Holgs the GPIO input data register value
           VAR gpio_x.IDR,                      init = (T_VLT_UINT32)0xFFFE,                         	ev = init

        COMMENT OUTPUT SECTION:

            --Holds the return value of function 'GpioReadInputDataBit'
            VAR ret_GpioReadInputDataBit,       init = BIT_RESET ,                    	ev = BIT_SET 

        COMMENT INPUT/OUTPUT SECTION:
        
            --None
        
        --Stub Calls :
        SIMUL

            --No Stubs

        END SIMUL

        --Calling the Unit Under Test :
        #ret_GpioReadInputDataBit = GpioReadInputDataBit(&gpio_x,gpio_pin);

    END ELEMENT

END TEST -- TEST 14

TEST 15
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD>  
    COMMENT [hdulibstm32f4xxgpio-GpioReadInputDataBit-CB-LLR-001]
    COMMENT 1.The function 'GpioReadInputDataBit' returns BIT_SET when gpio_pin in gpio_x input 
    COMMENT   data register(IDR) is SET.
    COMMENT 2.gpio_pin tested for value GPIO_PIN_14
    COMMENT Equivalence Class 7
	COMMENT
    COMMENT </TD>

    ELEMENT

        COMMENT INPUT SECTION:

            --Holds the GPIO pin input value(pin number)
            VAR gpio_pin,                       init =  GPIO_PIN_14,               		ev = init

            --Holgs the GPIO input data register value
           VAR gpio_x.IDR,                     	init = (T_VLT_UINT32)0xFFFF,                          ev = init

        COMMENT OUTPUT SECTION:

            --Holds the return value of function 'GpioReadInputDataBit'
            VAR ret_GpioReadInputDataBit,       init = BIT_RESET ,                    	ev = BIT_SET 

        COMMENT INPUT/OUTPUT SECTION:
        
            --None
        
        --Stub Calls :
        SIMUL

            --No Stubs

        END SIMUL

        --Calling the Unit Under Test :
        #ret_GpioReadInputDataBit = GpioReadInputDataBit(&gpio_x,gpio_pin);

    END ELEMENT

END TEST -- TEST 15

TEST 16
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT [hdulibstm32f4xxgpio-GpioReadInputDataBit-CB-LLR-002]
    COMMENT 1.The function 'GpioReadInputDataBit' returns BIT_RESET when gpio_pin in gpio_x input 
    COMMENT   data register(IDR) is RESET.
    COMMENT 2.Variable IDR value tested for minimum value 0x0 and 
    COMMENT   gpio_pin tested for value GPIO_PIN_15
    COMMENT Equivalence Class 8
	COMMENT
    COMMENT </TD>

    ELEMENT

        COMMENT INPUT SECTION:

            --Holds the GPIO pin input value(pin number)
            VAR gpio_pin,                       init =  GPIO_PIN_15,                ev = init

            --Holgs the GPIO input data register value
           VAR gpio_x.IDR,                      init = 0x0,                         ev = init

        COMMENT OUTPUT SECTION:

            --Holds the return value of function 'GpioReadInputDataBit'
            VAR ret_GpioReadInputDataBit,       init = BIT_SET,                     ev = BIT_RESET  

        COMMENT INPUT/OUTPUT SECTION:
        
            --None
        
        --Stub Calls :
        SIMUL

            --No Stubs

        END SIMUL

        --Calling the Unit Under Test :
        #ret_GpioReadInputDataBit = GpioReadInputDataBit(&gpio_x,gpio_pin);

    END ELEMENT

END TEST -- TEST 16

TEST 17
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT [hdulibstm32f4xxgpio-GpioReadInputDataBit-CB-LLR-001]
    COMMENT 1.The function 'GpioReadInputDataBit' returns BIT_SET when gpio_pin in gpio_x input 
    COMMENT   data register(IDR) is SET.
    COMMENT 2.Variable IDR value tested for minimum+1 value 0x1 and 
    COMMENT   gpio_pin tested for value GPIO_PIN_ALL
    COMMENT Equivalence Class 7
	COMMENT
    COMMENT </TD>

    ELEMENT

        COMMENT INPUT SECTION:

            --Holds the GPIO pin input value(pin number)
            VAR gpio_pin,                       init =  GPIO_PIN_ALL,                 ev = init

            --Holgs the GPIO input data register value
           VAR gpio_x.IDR,                      init = 0x1,                           ev = init

        COMMENT OUTPUT SECTION:

            --Holds the return value of function 'GpioReadInputDataBit'
            VAR ret_GpioReadInputDataBit,       init = BIT_RESET ,                    ev = BIT_SET 

        COMMENT INPUT/OUTPUT SECTION:
        
            --None
        
        --Stub Calls :
        SIMUL

            --No Stubs

        END SIMUL

        --Calling the Unit Under Test :
        #ret_GpioReadInputDataBit = GpioReadInputDataBit(&gpio_x,gpio_pin);

    END ELEMENT

END TEST -- TEST 17

--TEST 18
--FAMILY robustness
--
--    COMMENT Test Description
--    COMMENT <TD> 
--    COMMENT [hdulibstm32f4xxgpio-GpioReadInputDataBit-CB-LLR-001]
--    COMMENT Since 'gpio_x' is passed as NULL, it shows abnormal behaviour and hence it is commented.
--    COMMENT Equivalence Class 13
--    COMMENT </TD>
--     
--    ELEMENT
--
--        COMMENT INPUT SECTION:
--
--            --None
--
--        COMMENT OUTPUT SECTION:
--
--            --None
--
--        COMMENT INPUT/OUTPUT SECTION:
--
--            --None
--            
--        --Stub Calls :
--        SIMUL
--
--            --No Stubs
--
--        END SIMUL
--
--        --Calling the Unit Under Test :
--        #ret_GpioReadInputDataBit = GpioReadInputDataBit(NULL,gpio_pin);
--
--    END ELEMENT
--   
--END TEST -- TEST 18

END SERVICE -- GpioReadInputDataBit

--------------------------------------------------------------------------------
-- Declaration of the service GpioInit
--------------------------------------------------------------------------------
SERVICE GpioInit
SERVICE_TYPE extern

-- Tested service parameters declarations

    #T_GPIO_TYPE gpio_x;
    #T_GPIO_TYPE_INIT gpio_init_struct;

ENVIRONMENT ENV_GpioInit
    
	STRUCTURE gpio_x,				init = { MODER => 0, OTYPER => 0, OSPEEDR => 0, PUPDR => 0, IDR => 0, ODR => 0, BSRRL => 0, BSRRH => 0, 
	&		 								LCKR => 0, AFR => { others => 0 } },							ev = init
    
	STRUCTURE gpio_init_struct,		init = { GPIO_Pin => 0, GPIO_Mode => GPIO_MODE_IN, GPIO_Speed => GPIO_SPEED_2MHZ, 
	& 										GPIO_OType => GPIO_OTYPE_PP, GPIO_PuPd => GPIO_PUPD_NOPULL },   ev = init
    
END ENVIRONMENT -- ENV_GpioInit
    
USE ENV_GpioInit

TEST 1
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT [hdulibstm32f4xxgpio-GpioInit-CB-LLR-001]
    COMMENT The function 'GpioInit' Perform following actions:
    COMMENT a)For 1st iteration of GPIO Mode Configuration loop current pin is equal 
    COMMENT	to pin position then function does following
    COMMENT   1.Clears the GPIOx_MODER register in gpio_x for the current pin position.
    COMMENT   2 Sets the GPIOx_MODER register in gpio_x with the received gpio_mode of gpio_init_struct. 
    COMMENT   3 when the received gpio mode is not GPIO_MODE_OUT and GPIO_MODE_AF the function does nothing.
	COMMENT   4.Clears the GPIOx_PUPDR register in gpio_x for the current pin position.
	COMMENT   5.Sets the GPIOx_PUPDR register in gpio_x with the received gpio_pupd of gpio_init_struct.
    COMMENT b)For Remaining iterations(2..16) of GPIO Mode Configuration loop current pin is not equal
    COMMENT	to pin position then function does nothing.
    COMMENT c)variables tested for values as follows
    COMMENT   1 gpio_pin with a value GPIO_PIN_0,
    COMMENT   2 gpio_mode with a value GPIO_MODE_IN,
    COMMENT   3 gpio_speed with a value GPIO_SPEED_2MHZ,
    COMMENT   4 gpio_otype with a value GPIO_OTYPE_PP,
    COMMENT   5 gpio_pupd with a value GPIO_PUPD_NOPULL,
    COMMENT   6 moder with a value GPIO_MODER_MODER0,
    COMMENT   7 otyper with a value GPIO_OTYPER_OT_0,
    COMMENT   8 ospeedr with a value GPIO_OSPEEDER_OSPEEDR0,
    COMMENT   9 PUPDR with a value GPIO_PUPDR_PUPDR0  
    COMMENT Equivalence Class 1,4,6,2
	COMMENT
    COMMENT </TD>
    
	ELEMENT

        COMMENT INPUT SECTION:

            --Holds configuration information for the specified GPIO peripheral
            STRUCTURE gpio_init_struct,     init = { GPIO_Pin => GPIO_PIN_0, GPIO_Mode =>GPIO_MODE_IN,
            &                                        GPIO_Speed =>GPIO_SPEED_2MHZ,
            &                                        GPIO_OType =>GPIO_OTYPE_PP,GPIO_PuPd =>GPIO_PUPD_NOPULL },
            &                               ev = init 

            --Holds Output mode configuration content            
            VAR gpio_x.OTYPER,        init =  GPIO_OTYPER_OT_0,              ev = init

            --Holds Speed mode configuration content                
            VAR gpio_x.OSPEEDR,       init =  GPIO_OSPEEDER_OSPEEDR0,        ev = init

        COMMENT INPUT/OUTPUT SECTION:
        
            --Holds GPIO Mode Configuration content
            VAR gpio_x.MODER,         init =  GPIO_MODER_MODER0,             ev = 0x00000000
           

            --Holds Pull-up Pull down resistor configuration content                
            VAR gpio_x.PUPDR,         init =  GPIO_PUPDR_PUPDR0,             ev = 0x00000000
            
        COMMENT OUTPUT SECTION:
        
            --None

        --Stub Calls : 
        SIMUL

            --No Stubs

        END SIMUL

        --Calling the Unit Under Test :
        #GpioInit(&gpio_x,&gpio_init_struct);

    END ELEMENT
   
END TEST -- TEST 1

TEST 2
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD>  
    COMMENT [hdulibstm32f4xxgpio-GpioInit-CB-LLR-001]
    COMMENT The function 'GpioInit' Perform following actions:
    COMMENT a)For 2nd iteration of GPIO Mode Configuration loop current pin is equal
    COMMENT	to pin position then function does following
    COMMENT   1.Clears the GPIOx_MODER register in gpio_x for the current pin position.
    COMMENT   2 Sets the GPIOx_MODER register in gpio_x with the received gpio_mode of gpio_init_struct. 
    COMMENT   3 when the received gpio mode is equal to GPIO_MODE_OUT function does the following.
    COMMENT    a.Clears the GPIOx_OSPEEDR register in gpio_x for the current pin position.
    COMMENT    b.Sets the GPIOx_OSPEEDR register in gpio_x with the received gpio_speed of gpio_init_struct.
    COMMENT    c.Clears the GPIOx_OTYPER register in gpio_x for the current pin position.
    COMMENT    d.Sets the GPIOx_OTYPER register in gpio_x with the received gpio_otype of gpio_init_struct.
    COMMENT   4.Clears the GPIOx_PUPDR register in gpio_x for the current pin position.
    COMMENT   5.Sets the GPIOx_PUPDR register in gpio_x with the received gpio_pupd of gpio_init_struct.
    COMMENT b)For Remaining iterations(1,3..16) of GPIO Mode Configuration loop current pin is
    COMMENT	not equal to pin position then function does nothing.
    COMMENT c)variables tested for values as follows
    COMMENT   1 gpio_pin with a value GPIO_PIN_1,
    COMMENT   2 gpio_mode with a value GPIO_MODE_OUT,
    COMMENT   3 gpio_speed with a value GPIO_SPEED_25MHZ,
    COMMENT   4 gpio_otype with a value GPIO_OTYPE_OD,
    COMMENT   5 gpio_pupd with a value GPIO_PUPD_UP,
    COMMENT   6 moder with a value 0x00,
    COMMENT   7 otyper with a value 0x00,
    COMMENT   8 ospeedr with a value 0x00,
    COMMENT   9 PUPDR with a value 0x00.
    COMMENT Equivalence Class 1,3,6,2
	COMMENT
    COMMENT </TD>

    ELEMENT

        COMMENT INPUT SECTION:

            --Holds configuration information for the specified GPIO peripheral
            STRUCTURE gpio_init_struct,     init = { GPIO_Pin => GPIO_PIN_1, GPIO_Mode =>GPIO_MODE_OUT,
            &                                        GPIO_Speed =>GPIO_SPEED_25MHZ,
            &                                        GPIO_OType =>GPIO_OTYPE_OD,GPIO_PuPd =>GPIO_PUPD_UP },
            &                               							ev = init 

            --Holds Output mode configuration content            
            VAR gpio_x.OTYPER,        		init =  0x02,              	ev = init

        COMMENT INPUT/OUTPUT SECTION:
		
			--Holds Speed mode configuration content                
            VAR gpio_x.OSPEEDR,       		init =  0x00,        		ev = 0x00000004
        
            --Holds GPIO Mode Configuration content
            VAR gpio_x.MODER,         		init =  0x00,             	ev = 0x00000004
           

            --Holds Pull-up Pull down resistor configuration content                
            VAR gpio_x.PUPDR,         		init =  0x00,             	ev = 0x00000004
            
        COMMENT OUTPUT SECTION:
        
            --None

        --Stub Calls : 
        SIMUL

            --No Stubs

        END SIMUL

        --Calling the Unit Under Test :
        #GpioInit(&gpio_x,&gpio_init_struct);

    END ELEMENT
   
END TEST -- TEST 2

TEST 3
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT [hdulibstm32f4xxgpio-GpioInit-CB-LLR-001]
    COMMENT The function 'GpioInit' Perform following actions:
    COMMENT a)For 3nd iteration of GPIO Mode Configuration loop current pin is equal
    COMMENT	to pin position then function does following
    COMMENT   1.Clears the GPIOx_MODER register in gpio_x for the current pin position.
    COMMENT   2 Sets the GPIOx_MODER register in gpio_x with the received gpio_mode of gpio_init_struct. 
    COMMENT   3 when the received gpio mode is equal to GPIO_MODE_AF function does the following.
    COMMENT    a.Clears the GPIOx_OSPEEDR register in gpio_x for the current pin position.
    COMMENT    b.Sets the GPIOx_OSPEEDR register in gpio_x with the received gpio_speed of gpio_init_struct.
    COMMENT    c.Clears the GPIOx_OTYPER register in gpio_x for the current pin position.
    COMMENT    d.Sets the GPIOx_OTYPER register in gpio_x with the received gpio_otype of gpio_init_struct.
    COMMENT   4.Clears the GPIOx_PUPDR register in gpio_x for the current pin position.
    COMMENT   5.Sets the GPIOx_PUPDR register in gpio_x with the received gpio_pupd of gpio_init_struct.
    COMMENT b)For Remaining iterations(1..2,4..16) of GPIO Mode Configuration loop current pin
    COMMENT	is not equal to pin position then function does nothing.
    COMMENT c)variables tested for values as follows
    COMMENT   1 gpio_pin with a value GPIO_PIN_2,
    COMMENT   2 gpio_mode with a value GPIO_MODE_AF,
    COMMENT   3 gpio_speed with a value GPIO_SPEED_50MHZ,
    COMMENT   4 gpio_pupd with a value GPIO_PUPD_DOWN,
    COMMENT   5 moder with a value 0x01,
    COMMENT   6 otyper with a value 0x01,
    COMMENT   7 ospeedr with a value 0x01,
    COMMENT   8 PUPDR with a value 0x01. 
    COMMENT Equivalence Class 1,4,5,2
	COMMENT
    COMMENT </TD>
	

    ELEMENT

        COMMENT INPUT SECTION:

            --Holds configuration information for the specified GPIO peripheral
            STRUCTURE gpio_init_struct,     init = { GPIO_Pin => GPIO_PIN_2, GPIO_Mode =>GPIO_MODE_AF,
            &                                        GPIO_Speed =>GPIO_SPEED_50MHZ,
            &                                        GPIO_OType =>GPIO_OTYPE_PP,GPIO_PuPd =>GPIO_PUPD_DOWN },
            &                               							ev = init 

          

        COMMENT INPUT/OUTPUT SECTION:
			
			--Holds Output mode configuration content            
            VAR gpio_x.OTYPER,        		init =  0x01,               ev = 0x01
		
			--Holds Speed mode configuration content                
            VAR gpio_x.OSPEEDR,       		init =  0x01,        	 	ev = 0x00000021
        
            --Holds GPIO Mode Configuration content
            VAR gpio_x.MODER,         		init =  0x01,             	ev = 0x00000021
           

            --Holds Pull-up Pull down resistor configuration content                
            VAR gpio_x.PUPDR,         		init =  0x01,             	ev = 0x00000021
            
        COMMENT OUTPUT SECTION:
        
            --None

        --Stub Calls : 
        SIMUL

            --No Stubs

        END SIMUL

        --Calling the Unit Under Test :
        #GpioInit(&gpio_x,&gpio_init_struct);

    END ELEMENT
   
END TEST -- TEST 3

TEST 4
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD>  
    COMMENT [hdulibstm32f4xxgpio-GpioInit-CB-LLR-001]
    COMMENT The function 'GpioInit' Perform following actions:
    COMMENT a)For 4th iteration of GPIO Mode Configuration loop current pin is equal
    COMMENT	to pin position then function does following
    COMMENT   1.Clears the GPIOx_MODER register in gpio_x for the current pin position.
    COMMENT   2 Sets the GPIOx_MODER register in gpio_x with the received gpio_mode of gpio_init_struct. 
    COMMENT   3 when the received gpio mode is not GPIO_MODE_OUT and GPIO_MODE_AF the function does nothing.
    COMMENT   4.Clears the GPIOx_PUPDR register in gpio_x for the current pin position.
    COMMENT   5.Sets the GPIOx_PUPDR register in gpio_x with the received gpio_pupd of gpio_init_struct.
    COMMENT b)For Remaining iterations(1..3,5..16) of GPIO Mode Configuration loop current pin
    COMMENT	is not equal to pin position then function does nothing.    
    COMMENT c)variables tested for values as follows
    COMMENT   1 gpio_pin with a value GPIO_PIN_3,
    COMMENT   2 gpio_mode with a value GPIO_MODE_AN,
    COMMENT   3 gpio_speed with a value GPIO_SPEED_100MHZ,
    COMMENT   4 moder with a value 0x02,
    COMMENT   5 otyper with a value 0x00,
    COMMENT   6 ospeedr with a value 0x02,
    COMMENT   7 PUPDR with a value 0x02.
    COMMENT Equivalence Class 1,4,6,2
	COMMENT
    COMMENT </TD>

    ELEMENT

        COMMENT INPUT SECTION:

            --Holds configuration information for the specified GPIO peripheral
            STRUCTURE gpio_init_struct,     init = { GPIO_Pin => GPIO_PIN_3, GPIO_Mode =>GPIO_MODE_AN,
            &                                        GPIO_Speed =>GPIO_SPEED_100MHZ,
            &                                        GPIO_OType =>GPIO_OTYPE_PP,GPIO_PuPd =>GPIO_PUPD_DOWN },
            &                               							ev = init 

			--Holds Output mode configuration content            
            VAR gpio_x.OTYPER,        		init =  0x00,               ev = init
		
			--Holds Speed mode configuration content                
            VAR gpio_x.OSPEEDR,       		init =  0x02,        		ev = init
       

        COMMENT INPUT/OUTPUT SECTION:
		
            --Holds Pull-up Pull down resistor configuration content                
            VAR gpio_x.PUPDR,         		init =  0x02,             	ev = 0x00000082
            
              --Holds GPIO Mode Configuration content
            VAR gpio_x.MODER,         		init =  0x02,             	ev = 0xC2
            
        COMMENT OUTPUT SECTION:
        
            --None

        --Stub Calls : 
        SIMUL

            --No Stubs

        END SIMUL

        --Calling the Unit Under Test :
        #GpioInit(&gpio_x,&gpio_init_struct);

    END ELEMENT
   
END TEST -- TEST 4

TEST 5
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT [hdulibstm32f4xxgpio-GpioInit-CB-LLR-001]
    COMMENT The function 'GpioInit' Perform following actions:
    COMMENT a)For 5th iteration of GPIO Mode Configuration loop current pin is equal
    COMMENT	to pin position then function does following
    COMMENT   1.Clears the GPIOx_MODER register in gpio_x for the current pin position.
    COMMENT   2 Sets the GPIOx_MODER register in gpio_x with the received gpio_mode of gpio_init_struct. 
    COMMENT   3 when the received gpio mode is not GPIO_MODE_OUT and GPIO_MODE_AF the function does nothing.
    COMMENT   4.Clears the GPIOx_PUPDR register in gpio_x for the current pin position.
    COMMENT   5.Sets the GPIOx_PUPDR register in gpio_x with the received gpio_pupd of gpio_init_struct.
    COMMENT b)For Remaining iterations(1..4,6..16) of GPIO Mode Configuration loop current pin
    COMMENT	is not equal to pin position then function does nothing.
    COMMENT c)variables tested for values as follows
    COMMENT  1. gpio_pin with a value GPIO_PIN_4,
    COMMENT  2. moder with a value 0x03,
    COMMENT  3. otyper with a value 0x01,
    COMMENT  4. ospeedr with a value 0x03,
    COMMENT  5. PUPDR with a value 0x01. 
    COMMENT Equivalence Class 1,4,6,2
	COMMENT
    COMMENT </TD>


    ELEMENT

        COMMENT INPUT SECTION:

            --Holds configuration information for the specified GPIO peripheral
            STRUCTURE gpio_init_struct,     init = { GPIO_Pin => GPIO_PIN_4, GPIO_Mode =>GPIO_MODE_IN,
            &                                        GPIO_Speed =>GPIO_SPEED_2MHZ,
            &                                        GPIO_OType =>GPIO_OTYPE_PP,GPIO_PuPd =>GPIO_PUPD_NOPULL },
            &                               							ev = init 

			--Holds Output mode configuration content            
            VAR gpio_x.OTYPER,        		init =  0x01,              	ev = init
		
			--Holds Speed mode configuration content                
            VAR gpio_x.OSPEEDR,       		init =  0x03,        		ev = init
        
			--Holds GPIO Mode Configuration content
            VAR gpio_x.MODER,         		init =  0x03,             	ev = init

            --Holds Pull-up Pull down resistor configuration content                
            VAR gpio_x.PUPDR,         		init =  0x01,             	ev = init           

        COMMENT INPUT/OUTPUT SECTION:
			
			 --None
            
        COMMENT OUTPUT SECTION:
        
            --None

        --Stub Calls : 
        SIMUL

            --No Stubs

        END SIMUL

        --Calling the Unit Under Test :
        #GpioInit(&gpio_x,&gpio_init_struct);

    END ELEMENT
   
END TEST -- TEST 5

TEST 6
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT [hdulibstm32f4xxgpio-GpioInit-CB-LLR-001]
    COMMENT The function 'GpioInit' Perform following actions:
    COMMENT a)For 6th iteration of GPIO Mode Configuration loop current pin is equal
    COMMENT	to pin position then function does following
    COMMENT   1.Clears the GPIOx_MODER register in gpio_x for the current pin position.
    COMMENT   2 Sets the GPIOx_MODER register in gpio_x with the received gpio_mode of gpio_init_struct. 
    COMMENT   3 when the received gpio mode is equal to GPIO_MODE_OUT function does the following.
    COMMENT    a.Clears the GPIOx_OSPEEDR register in gpio_x for the current pin position.
    COMMENT    b.Sets the GPIOx_OSPEEDR register in gpio_x with the received gpio_speed of gpio_init_struct.
    COMMENT    c.Clears the GPIOx_OTYPER register in gpio_x for the current pin position.
    COMMENT    d.Sets the GPIOx_OTYPER register in gpio_x with the received gpio_otype of gpio_init_struct.
    COMMENT   4.Clears the GPIOx_PUPDR register in gpio_x for the current pin position.
    COMMENT   5.Sets the GPIOx_PUPDR register in gpio_x with the received gpio_pupd of gpio_init_struct.
    COMMENT b)For Remaining iterations(1..5,7..16) of GPIO Mode Configuration loop current pin
    COMMENT	is not equal to pin position then function does nothing.
    COMMENT c)variables tested for values as follows
    COMMENT  1. gpio_pin with a value GPIO_PIN_5,
    COMMENT  2. moder with a value 0x00,
    COMMENT  3. otyper with a value 0x00,
    COMMENT  4. ospeedr with a value 0x00,
    COMMENT  5. PUPDR with a value 0x00.
    COMMENT Equivalence Class 1,3,6,2
	COMMENT
    COMMENT </TD>

    ELEMENT

        COMMENT INPUT SECTION:

            --Holds configuration information for the specified GPIO peripheral
            STRUCTURE gpio_init_struct,     init = { GPIO_Pin => GPIO_PIN_5, GPIO_Mode =>GPIO_MODE_OUT,
            &                                        GPIO_Speed =>GPIO_SPEED_25MHZ,
            &                                        GPIO_OType =>GPIO_OTYPE_OD,GPIO_PuPd =>GPIO_PUPD_UP },
            &                               							ev = init 

			--Holds Output mode configuration content            
            VAR gpio_x.OTYPER,        		init =  0x20,               ev = init

        COMMENT INPUT/OUTPUT SECTION:
			
			--Holds Speed mode configuration content                
            VAR gpio_x.OSPEEDR,       		init =  0x00,        		ev = 0x00000400
			
			--Holds GPIO Mode Configuration content
            VAR gpio_x.MODER,         		init =  0x00,             	ev = 0x00000400

            --Holds Pull-up Pull down resistor configuration content                
            VAR gpio_x.PUPDR,         		init =  0x00,             	ev = 0x00000400
            
        COMMENT OUTPUT SECTION:
        
            --None

        --Stub Calls : 
        SIMUL

            --No Stubs

        END SIMUL

        --Calling the Unit Under Test :
        #GpioInit(&gpio_x,&gpio_init_struct);

    END ELEMENT
   
END TEST -- TEST 6

TEST 7
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT [hdulibstm32f4xxgpio-GpioInit-CB-LLR-001]
    COMMENT The function 'GpioInit' Perform following actions:
    COMMENT a)For 7th iteration of GPIO Mode Configuration loop current pin is equal
    COMMENT	to pin position then function does following
    COMMENT   1.Clears the GPIOx_MODER register in gpio_x for the current pin position.
    COMMENT   2 Sets the GPIOx_MODER register in gpio_x with the received gpio_mode of gpio_init_struct. 
    COMMENT   3 when the received gpio mode is equal to GPIO_MODE_AF function does the following.
    COMMENT    a.Clears the GPIOx_OSPEEDR register in gpio_x for the current pin position.
    COMMENT    b.Sets the GPIOx_OSPEEDR register in gpio_x with the received gpio_speed of gpio_init_struct.
    COMMENT    c.Clears the GPIOx_OTYPER register in gpio_x for the current pin position.
    COMMENT    d.Sets the GPIOx_OTYPER register in gpio_x with the received gpio_otype of gpio_init_struct.
    COMMENT   4.Clears the GPIOx_PUPDR register in gpio_x for the current pin position.
    COMMENT   5.Sets the GPIOx_PUPDR register in gpio_x with the received gpio_pupd of gpio_init_struct.
    COMMENT b)For Remaining iterations(1..6,8..16) of GPIO Mode Configuration loop current pin
    COMMENT	is not equal to pin position then function does nothing.
    COMMENT c)variables tested for values as follows
    COMMENT  1. gpio_pin with a value GPIO_PIN_6,
    COMMENT  2. moder with a value 0x01,
    COMMENT  3. otyper with a value 0x01,
    COMMENT  4. ospeedr with a value 0x01,
    COMMENT  5. PUPDR with a value 0x01.
    COMMENT Equivalence Class 1,4,5,2
	COMMENT
    COMMENT </TD>

    ELEMENT

        COMMENT INPUT SECTION:

			--Holds configuration information for the specified GPIO peripheral
            STRUCTURE gpio_init_struct,     init = { GPIO_Pin => GPIO_PIN_6, GPIO_Mode =>GPIO_MODE_AF,
            &                                        GPIO_Speed =>GPIO_SPEED_50MHZ,
            &                                        GPIO_OType =>GPIO_OTYPE_PP,GPIO_PuPd =>GPIO_PUPD_DOWN },
            &                               							ev = init 

         	--Holds Output mode configuration content            
            VAR gpio_x.OTYPER,        		init =  0x01,               ev = init
		
        COMMENT INPUT/OUTPUT SECTION:
			
			--Holds Speed mode configuration content                
            VAR gpio_x.OSPEEDR,       		init =  0x01,        		ev = 0x00002001
			
			--Holds GPIO Mode Configuration content
            VAR gpio_x.MODER,         		init =  0x01,             	ev = 0x00002001

            --Holds Pull-up Pull down resistor configuration content                
            VAR gpio_x.PUPDR,         		init =  0x01,             	ev = 0x00002001
            
        COMMENT OUTPUT SECTION:
        
            --None

        --Stub Calls : 
        SIMUL

            --No Stubs

        END SIMUL

        --Calling the Unit Under Test :
        #GpioInit(&gpio_x,&gpio_init_struct);

    END ELEMENT
   
END TEST -- TEST 7


TEST 8
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT [hdulibstm32f4xxgpio-GpioInit-CB-LLR-001]
    COMMENT The function 'GpioInit' Perform following actions:
    COMMENT a)For 8th iteration of GPIO Mode Configuration loop current pin is equal
    COMMENT	to pin position then function does following
    COMMENT   1.Clears the GPIOx_MODER register in gpio_x for the current pin position.
    COMMENT   2 Sets the GPIOx_MODER register in gpio_x with the received gpio_mode of gpio_init_struct. 
    COMMENT   3 when the received gpio mode is not GPIO_MODE_OUT and GPIO_MODE_AF the function does nothing.
    COMMENT   4.Clears the GPIOx_PUPDR register in gpio_x for the current pin position.
    COMMENT   5.Sets the GPIOx_PUPDR register in gpio_x with the received gpio_pupd of gpio_init_struct.
    COMMENT b)For Remaining iterations(1..7,9..16) of GPIO Mode Configuration loop current pin
    COMMENT	is not equal to pin position then function does nothing.
    COMMENT c)variables tested for values as follows
    COMMENT  1. gpio_pin with a value GPIO_PIN_7,
    COMMENT  2. moder with a value 0x02,
    COMMENT  3. otyper with a value 0x00,
    COMMENT  4. ospeedr with a value 0x02,
    COMMENT  5. PUPDR with a value 0x02.  
    COMMENT Equivalence Class 1,4,6,2
	COMMENT
    COMMENT </TD>

    ELEMENT

        COMMENT INPUT SECTION:

            --Holds configuration information for the specified GPIO peripheral
            STRUCTURE gpio_init_struct,     init = { GPIO_Pin => GPIO_PIN_7, GPIO_Mode =>GPIO_MODE_AN,
            &                                        GPIO_Speed =>GPIO_SPEED_100MHZ,
            &                                        GPIO_OType =>GPIO_OTYPE_PP,GPIO_PuPd =>GPIO_PUPD_DOWN },
            &                               							ev = init 

         
			--Holds Output mode configuration content            
            VAR gpio_x.OTYPER,        		init =  0x00,               ev = init
			
			--Holds Speed mode configuration content                
            VAR gpio_x.OSPEEDR,       		init =  0x02,        		ev = init
			
			--Holds GPIO Mode Configuration content
            VAR gpio_x.MODER,         		init =  0xC002,             ev = init
		
        COMMENT INPUT/OUTPUT SECTION:

            --Holds Pull-up Pull down resistor configuration content                
            VAR gpio_x.PUPDR,         		init =  0x02,             	ev = 0x00008002
            
        COMMENT OUTPUT SECTION:
        
            --None

        --Stub Calls : 
        SIMUL

            --No Stubs

        END SIMUL

        --Calling the Unit Under Test :
        #GpioInit(&gpio_x,&gpio_init_struct);

    END ELEMENT
   
END TEST -- TEST 8

TEST 9
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT [hdulibstm32f4xxgpio-GpioInit-CB-LLR-001]
    COMMENT The function 'GpioInit' Perform following actions:
    COMMENT a)For 9th iteration of GPIO Mode Configuration loop current pin is equal
    COMMENT	to pin position then function does following
    COMMENT   1.Clears the GPIOx_MODER register in gpio_x for the current pin position.
    COMMENT   2 Sets the GPIOx_MODER register in gpio_x with the received gpio_mode of gpio_init_struct. 
    COMMENT   3 when the received gpio mode is not GPIO_MODE_OUT and GPIO_MODE_AF the function does nothing.
    COMMENT   4.Clears the GPIOx_PUPDR register in gpio_x for the current pin position.
    COMMENT   5.Sets the GPIOx_PUPDR register in gpio_x with the received gpio_pupd of gpio_init_struct.
    COMMENT b)For Remaining iterations(1..8,10..16) of GPIO Mode Configuration loop current pin
    COMMENT	is not equal to pin position then function does nothing.
    COMMENT c)variables tested for values as follows
    COMMENT  1. gpio_pin with a value GPIO_PIN_8,
    COMMENT  2. moder with a value 0x03,
    COMMENT  3. otyper with a value 0x01,
    COMMENT  4. ospeedr with a value 0x03,
    COMMENT  5. PUPDR with a value 0x02.
    COMMENT Equivalence Class 1,4,6,2
	COMMENT
    COMMENT </TD>

    ELEMENT

        COMMENT INPUT SECTION:

            --Holds configuration information for the specified GPIO peripheral
            STRUCTURE gpio_init_struct,     init = { GPIO_Pin => GPIO_PIN_8, GPIO_Mode =>GPIO_MODE_IN,
            &                                        GPIO_Speed =>GPIO_SPEED_2MHZ,
            &                                        GPIO_OType =>GPIO_OTYPE_PP,GPIO_PuPd =>GPIO_PUPD_NOPULL },
            &                               							ev = init 

         
			--Holds Output mode configuration content            
            VAR gpio_x.OTYPER,        		init =  0x01,               ev = init
			
			--Holds Speed mode configuration content                
            VAR gpio_x.OSPEEDR,       		init =  0x03,        		ev = init
			
			--Holds GPIO Mode Configuration content
			VAR gpio_x.MODER,         		init =  0x03,             	ev = init
			            
			--Holds Pull-up Pull down resistor configuration content                
            VAR gpio_x.PUPDR,         		init =  0x02,             	ev = init

        COMMENT INPUT/OUTPUT SECTION:
		
			--None
            
        COMMENT OUTPUT SECTION:
        
            --None

        --Stub Calls : 
        SIMUL

            --No Stubs

        END SIMUL

        --Calling the Unit Under Test :
        #GpioInit(&gpio_x,&gpio_init_struct);

    END ELEMENT
   
END TEST -- TEST 9

TEST 10
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT [hdulibstm32f4xxgpio-GpioInit-CB-LLR-001]
    COMMENT The function 'GpioInit' Perform following actions:
    COMMENT a)For 10th iteration of GPIO Mode Configuration loop current pin is equal
    COMMENT  to pin position then function does following
    COMMENT   1.Clears the GPIOx_MODER register in gpio_x for the current pin position.
    COMMENT   2 Sets the GPIOx_MODER register in gpio_x with the received gpio_mode of gpio_init_struct. 
    COMMENT   3 when the received gpio mode is equal to GPIO_MODE_OUT function does the following.
    COMMENT    a.Clears the GPIOx_OSPEEDR register in gpio_x for the current pin position.
    COMMENT    b.Sets the GPIOx_OSPEEDR register in gpio_x with the received gpio_speed of gpio_init_struct.
    COMMENT    c.Clears the GPIOx_OTYPER register in gpio_x for the current pin position.
    COMMENT    d.Sets the GPIOx_OTYPER register in gpio_x with the received gpio_otype of gpio_init_struct.
    COMMENT   4.Clears the GPIOx_PUPDR register in gpio_x for the current pin position.
    COMMENT   5.Sets the GPIOx_PUPDR register in gpio_x with the received gpio_pupd of gpio_init_struct.
    COMMENT b)For Remaining iterations(1..9,11..16) of GPIO Mode Configuration loop current pin
    COMMENT	is not equal to pin position then function does nothing.
    COMMENT c)variables tested for values as follows
    COMMENT  1. gpio_pin with a value GPIO_PIN_9,
    COMMENT  2. moder with a value 0x00,
    COMMENT  3. otyper with a value 0x00,
    COMMENT  4. ospeedr with a value 0x00,
    COMMENT  5. PUPDR with a value 0x00.
    COMMENT Equivalence Class 1,3,6,2
	COMMENT
    COMMENT </TD>

    ELEMENT

        COMMENT INPUT SECTION:

            --Holds configuration information for the specified GPIO peripheral
            STRUCTURE gpio_init_struct,     init = { GPIO_Pin => GPIO_PIN_9, GPIO_Mode =>GPIO_MODE_OUT,
            &                                        GPIO_Speed =>GPIO_SPEED_25MHZ,
            &                                        GPIO_OType =>GPIO_OTYPE_OD,GPIO_PuPd =>GPIO_PUPD_UP },
            &                               							ev = init 

        COMMENT INPUT/OUTPUT SECTION:
        
        	--Holds Output mode configuration content            
            VAR gpio_x.OTYPER,        		init =  0x00,             	ev = 0x200
			
			--Holds Speed mode configuration content                
            VAR gpio_x.OSPEEDR,       		init =  0x00,        		ev = 0x00040000
			
			--Holds GPIO Mode Configuration content
            VAR gpio_x.MODER,         		init =  0x00,             	ev = 0x00040000
            
			--Holds Pull-up Pull down resistor configuration content                
            VAR gpio_x.PUPDR,         		init =  0x00,             	ev = 0x00040000
            
        COMMENT OUTPUT SECTION:
        
            --None

        --Stub Calls : 
        SIMUL

            --No Stubs

        END SIMUL

        --Calling the Unit Under Test :
        #GpioInit(&gpio_x,&gpio_init_struct);

    END ELEMENT
   
END TEST -- TEST 10

TEST 11
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT [hdulibstm32f4xxgpio-GpioInit-CB-LLR-001]
    COMMENT The function 'GpioInit' Perform following actions:
    COMMENT a)For 11th iteration of GPIO Mode Configuration loop current pin is equal
    COMMENT	to pin position then function does following
    COMMENT   1.Clears the GPIOx_MODER register in gpio_x for the current pin position.
    COMMENT   2 Sets the GPIOx_MODER register in gpio_x with the received gpio_mode of gpio_init_struct. 
    COMMENT   3 when the received gpio mode is equal to GPIO_MODE_AF function does the following.
    COMMENT    a.Clears the GPIOx_OSPEEDR register in gpio_x for the current pin position.
    COMMENT    b.Sets the GPIOx_OSPEEDR register in gpio_x with the received gpio_speed of gpio_init_struct.
    COMMENT    c.Clears the GPIOx_OTYPER register in gpio_x for the current pin position.
    COMMENT    d.Sets the GPIOx_OTYPER register in gpio_x with the received gpio_otype of gpio_init_struct.
    COMMENT   4.Clears the GPIOx_PUPDR register in gpio_x for the current pin position.
    COMMENT   5.Sets the GPIOx_PUPDR register in gpio_x with the received gpio_pupd of gpio_init_struct.
    COMMENT b)For Remaining iterations(1..10,12..16) of GPIO Mode Configuration loop current pin
    COMMENT	is not equal to pin position then function does nothing.  
    COMMENT c)variables tested for values as follows
    COMMENT  1. gpio_pin with a value GPIO_PIN_10,
    COMMENT  2. moder with a value 0x01,
    COMMENT  3. otyper with a value 0x01,
    COMMENT  4. ospeedr with a value 0x01,
    COMMENT  5. PUPDR with a value 0x01.
    COMMENT Equivalence Class 1,4,5,2
	COMMENT
    COMMENT </TD>

    ELEMENT

        COMMENT INPUT SECTION:

            --Holds configuration information for the specified GPIO peripheral
            STRUCTURE gpio_init_struct,     init = { GPIO_Pin => GPIO_PIN_10, GPIO_Mode =>GPIO_MODE_AF,
            &                                        GPIO_Speed =>GPIO_SPEED_50MHZ,
            &                                        GPIO_OType =>GPIO_OTYPE_PP,GPIO_PuPd =>GPIO_PUPD_DOWN },
            &                               							ev = init 

			--Holds Output mode configuration content            
            VAR gpio_x.OTYPER,        		init =  0x01,               ev = init
			
        COMMENT INPUT/OUTPUT SECTION:
			
			--Holds Speed mode configuration content                
            VAR gpio_x.OSPEEDR,       		init =  0x01,        		ev = 0x00200001
			
			--Holds GPIO Mode Configuration content
            VAR gpio_x.MODER,         		init =  0x01,             	ev = 0x00200001
            
			--Holds Pull-up Pull down resistor configuration content                
            VAR gpio_x.PUPDR,         		init =  0x01,             	ev = 0x00200001
            
        COMMENT OUTPUT SECTION:
        
            --None

        --Stub Calls : 
        SIMUL

            --No Stubs

        END SIMUL

        --Calling the Unit Under Test :
        #GpioInit(&gpio_x,&gpio_init_struct);

    END ELEMENT
   
END TEST -- TEST 11

TEST 12
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD>  
    COMMENT [hdulibstm32f4xxgpio-GpioInit-CB-LLR-001]
    COMMENT The function 'GpioInit' Perform following actions:
    COMMENT a)For 12th iteration of GPIO Mode Configuration loop current pin is equal
    COMMENT	 to pin position then function does following
    COMMENT   1.Clears the GPIOx_MODER register in gpio_x for the current pin position.
    COMMENT   2 Sets the GPIOx_MODER register in gpio_x with the received gpio_mode of gpio_init_struct. 
    COMMENT   3 when the received gpio mode is not GPIO_MODE_OUT and GPIO_MODE_AF the function does nothing.
    COMMENT   4.Clears the GPIOx_PUPDR register in gpio_x for the current pin position.
    COMMENT   5.Sets the GPIOx_PUPDR register in gpio_x with the received gpio_pupd of gpio_init_struct.
    COMMENT b)For Remaining iterations(1..11,13..16) of GPIO Mode Configuration loop
    COMMENT	current pin is not equal to pin position then function does nothing.
    COMMENT c)variables tested for values as follows
    COMMENT  1. gpio_pin with a value GPIO_PIN_11,
    COMMENT  2. moder with a value 0x01,
    COMMENT  3. otyper with a value 0x00,
    COMMENT  4. ospeedr with a value 0x01,
    COMMENT  5. PUPDR with a value 0x02.
    COMMENT Equivalence Class 1,4,6,2
	COMMENT
    COMMENT </TD>

    ELEMENT

        COMMENT INPUT SECTION:

            --Holds configuration information for the specified GPIO peripheral
            STRUCTURE gpio_init_struct,     init = { GPIO_Pin => GPIO_PIN_11, GPIO_Mode =>GPIO_MODE_AN,
            &                                        GPIO_Speed =>GPIO_SPEED_100MHZ,
            &                                        GPIO_OType =>GPIO_OTYPE_PP,GPIO_PuPd =>GPIO_PUPD_DOWN },
            &                               							ev = init 
		
			--Holds Output mode configuration content            
            VAR gpio_x.OTYPER,        		init =  0x00,               ev = init
			
			--Holds Speed mode configuration content                
            VAR gpio_x.OSPEEDR,       		init =  0x01,        		ev = init
			
		COMMENT INPUT/OUTPUT SECTION:
	
			--Holds Pull-up Pull down resistor configuration content                
            VAR gpio_x.PUPDR,         		init =  0x02,             	ev = 0x00800002
			
			--Holds GPIO Mode Configuration content
            VAR gpio_x.MODER,         		init =  0x01,             	ev = 0xC00001
            
        COMMENT OUTPUT SECTION:
        
            --None

        --Stub Calls : 
        SIMUL

            --No Stubs

        END SIMUL

        --Calling the Unit Under Test :
        #GpioInit(&gpio_x,&gpio_init_struct);

    END ELEMENT
   
END TEST -- TEST 12

TEST 13
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT [hdulibstm32f4xxgpio-GpioInit-CB-LLR-001]
    COMMENT The function 'GpioInit' Perform following actions:
    COMMENT a)For 13th iteration of GPIO Mode Configuration loop current pin is equal
    COMMENT	to pin position then function does following
    COMMENT   1.Clears the GPIOx_MODER register in gpio_x for the current pin position.
    COMMENT   2 Sets the GPIOx_MODER register in gpio_x with the received gpio_mode of gpio_init_struct. 
    COMMENT   3 when the received gpio mode is not GPIO_MODE_OUT and GPIO_MODE_AF the function does nothing.
    COMMENT   4.Clears the GPIOx_PUPDR register in gpio_x for the current pin position.
    COMMENT   5.Sets the GPIOx_PUPDR register in gpio_x with the received gpio_pupd of gpio_init_struct.
    COMMENT b)For Remaining iterations(1..12,14..16) of GPIO Mode Configuration loop current pin
    COMMENT	is not equal to pin position then function does nothing.
    COMMENT c)variables tested for values as follows
    COMMENT  1. gpio_pin with a value GPIO_PIN_12,
    COMMENT  2. moder with a value 0x01,
    COMMENT  3. otyper with a value 0x01,
    COMMENT  4. ospeedr with a value 0x01,
    COMMENT  5. PUPDR with a value 0x01. 
    COMMENT Equivalence Class 1,4,6,2
	COMMENT
    COMMENT </TD>

    ELEMENT

        COMMENT INPUT SECTION:

            --Holds configuration information for the specified GPIO peripheral
            STRUCTURE gpio_init_struct,     init = { GPIO_Pin => GPIO_PIN_12, GPIO_Mode =>GPIO_MODE_IN,
            &                                        GPIO_Speed =>GPIO_SPEED_2MHZ,
            &                                        GPIO_OType =>GPIO_OTYPE_PP,GPIO_PuPd =>GPIO_PUPD_NOPULL },
            &                               							ev = init 
		
			--Holds Output mode configuration content            
            VAR gpio_x.OTYPER,        		init =  0x01,               ev = init
			
			--Holds Speed mode configuration content                
            VAR gpio_x.OSPEEDR,       		init =  0x01,        		ev = init
			
			--Holds GPIO Mode Configuration content
            VAR gpio_x.MODER,         		init =  0x01,             	ev = init
	
			--Holds Pull-up Pull down resistor configuration content                
            VAR gpio_x.PUPDR,         		init =  0x01,             	ev = init
			
		COMMENT INPUT/OUTPUT SECTION:
		
			--None
            
        COMMENT OUTPUT SECTION:
        
            --None

        --Stub Calls : 
        SIMUL

            --No Stubs

        END SIMUL

        --Calling the Unit Under Test :
        #GpioInit(&gpio_x,&gpio_init_struct);

    END ELEMENT
   
END TEST -- TEST 13

TEST 14
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT [hdulibstm32f4xxgpio-GpioInit-CB-LLR-001]
    COMMENT The function 'GpioInit' Perform following actions:
    COMMENT a)For 14th iteration of GPIO Mode Configuration loop current pin is equal
    COMMENT	to pin position then function does following
    COMMENT   1.Clears the GPIOx_MODER register in gpio_x for the current pin position.
    COMMENT   2 Sets the GPIOx_MODER register in gpio_x with the received gpio_mode of gpio_init_struct. 
    COMMENT   3 when the received gpio mode is equal to GPIO_MODE_OUT function does the following.
    COMMENT    a.Clears the GPIOx_OSPEEDR register in gpio_x for the current pin position.
    COMMENT    b.Sets the GPIOx_OSPEEDR register in gpio_x with the received gpio_speed of gpio_init_struct.
    COMMENT    c.Clears the GPIOx_OTYPER register in gpio_x for the current pin position.
    COMMENT    d.Sets the GPIOx_OTYPER register in gpio_x with the received gpio_otype of gpio_init_struct.
    COMMENT   4.Clears the GPIOx_PUPDR register in gpio_x for the current pin position.
    COMMENT   5.Sets the GPIOx_PUPDR register in gpio_x with the received gpio_pupd of gpio_init_struct.
    COMMENT b)For Remaining iterations(1..13,15..16) of GPIO Mode Configuration loop current pin
    COMMENT is not equal to pin position then function does nothing.
    COMMENT c)variables tested for values as follows
    COMMENT  1. gpio_pin with a value GPIO_PIN_13,
    COMMENT  2. moder with a value 0x00,
    COMMENT  3. otyper with a value 0x01,
    COMMENT  4. ospeedr with a value 0x01,
    COMMENT  5. PUPDR with a value 0x01. 
    COMMENT Equivalence Class 1,3,6,2
	COMMENT
    COMMENT </TD>

    ELEMENT

        COMMENT INPUT SECTION:

            --Holds configuration information for the specified GPIO peripheral
            STRUCTURE gpio_init_struct,     init = { GPIO_Pin => GPIO_PIN_13, GPIO_Mode =>GPIO_MODE_OUT,
            &                                        GPIO_Speed =>GPIO_SPEED_25MHZ,
            &                                        GPIO_OType =>GPIO_OTYPE_OD,GPIO_PuPd =>GPIO_PUPD_UP },
            &                               							ev = init 
			
		COMMENT INPUT/OUTPUT SECTION:
		
			--Holds Speed mode configuration content                
            VAR gpio_x.OSPEEDR,       		init =  0x01,        		ev = 0x04000001
		
			--Holds GPIO Mode Configuration content
            VAR gpio_x.MODER,         		init =  0x00,             	ev = 0x04000000
	
			--Holds Pull-up Pull down resistor configuration content                
            VAR gpio_x.PUPDR,         		init =  0x01,             	ev = 0x04000001
			
			--Holds Output mode configuration content            
            VAR gpio_x.OTYPER,        		init =  0x01,               ev = 0x2001
            
        COMMENT OUTPUT SECTION:
        
            --None

        --Stub Calls : 
        SIMUL

            --No Stubs

        END SIMUL

        --Calling the Unit Under Test :
        #GpioInit(&gpio_x,&gpio_init_struct);

    END ELEMENT
   
END TEST -- TEST 14

TEST 15
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT [hdulibstm32f4xxgpio-GpioInit-CB-LLR-001]
    COMMENT The function 'GpioInit' Perform following actions:
    COMMENT a)For 15th iteration of GPIO Mode Configuration loop current pin is equal
    COMMENT  to pin position then function does following
    COMMENT   1.Clears the GPIOx_MODER register in gpio_x for the current pin position.
    COMMENT   2 Sets the GPIOx_MODER register in gpio_x with the received gpio_mode of gpio_init_struct. 
    COMMENT   3 when the received gpio mode is equal to GPIO_MODE_AF function does the following.
    COMMENT    a.Clears the GPIOx_OSPEEDR register in gpio_x for the current pin position.
    COMMENT    b.Sets the GPIOx_OSPEEDR register in gpio_x with the received gpio_speed of gpio_init_struct.
    COMMENT    c.Clears the GPIOx_OTYPER register in gpio_x for the current pin position.
    COMMENT    d.Sets the GPIOx_OTYPER register in gpio_x with the received gpio_otype of gpio_init_struct.
    COMMENT   4.Clears the GPIOx_PUPDR register in gpio_x for the current pin position.
    COMMENT   5.Sets the GPIOx_PUPDR register in gpio_x with the received gpio_pupd of gpio_init_struct.
    COMMENT b)For Remaining iterations(1..14,16) of GPIO Mode Configuration loop current pin
    COMMENT  is not equal to pin position then function does nothing.
    COMMENT c)variables tested for values as follows
    COMMENT  1. gpio_pin with a value GPIO_PIN_14,
    COMMENT  2. moder with a value 0x03,
    COMMENT  3. otyper with a value 0x00,
    COMMENT  4. ospeedr with a value 0x03,
    COMMENT  5. PUPDR with a value 0x02.
    COMMENT Equivalence Class 1,4,5,2
	COMMENT
    COMMENT </TD>

    ELEMENT

        COMMENT INPUT SECTION:

            --Holds configuration information for the specified GPIO peripheral
            STRUCTURE gpio_init_struct,     init = { GPIO_Pin => GPIO_PIN_14, GPIO_Mode =>GPIO_MODE_AF,
            &                                        GPIO_Speed =>GPIO_SPEED_50MHZ,
            &                                        GPIO_OType =>GPIO_OTYPE_PP,GPIO_PuPd =>GPIO_PUPD_DOWN },
            &                               							ev = init 
		
			
		COMMENT INPUT/OUTPUT SECTION:

			--Holds Output mode configuration content            
            VAR gpio_x.OTYPER,        		init =  0x00,              	ev = 0x00000000
		
			--Holds Speed mode configuration content                
            VAR gpio_x.OSPEEDR,       		init = 0x03,        		ev = 0x20000003
		
			--Holds GPIO Mode Configuration content
            VAR gpio_x.MODER,         		init =  0x03,             	ev = 0x20000003
	
			--Holds Pull-up Pull down resistor configuration content                
            VAR gpio_x.PUPDR,         		init =  0x02,             	ev = 0x20000002
            
        COMMENT OUTPUT SECTION:
        
            --None

        --Stub Calls : 
        SIMUL

            --No Stubs

        END SIMUL

        --Calling the Unit Under Test :
        #GpioInit(&gpio_x,&gpio_init_struct);

    END ELEMENT
   
END TEST -- TEST 15

TEST 16
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT [hdulibstm32f4xxgpio-GpioInit-CB-LLR-001]
    COMMENT The function 'GpioInit' Perform following actions:
    COMMENT a)For 16th iteration of GPIO Mode Configuration loop current pin is equal
    COMMENT to pin position then function does following
    COMMENT   1.Clears the GPIOx_MODER register in gpio_x for the current pin position.
    COMMENT   2 Sets the GPIOx_MODER register in gpio_x with the received gpio_mode of gpio_init_struct. 
    COMMENT   3 when the received gpio mode is not GPIO_MODE_OUT and GPIO_MODE_AF the function does nothing.
    COMMENT   4.Clears the GPIOx_PUPDR register in gpio_x for the current pin position.
    COMMENT   5.Sets the GPIOx_PUPDR register in gpio_x with the received gpio_pupd of gpio_init_struct.
    COMMENT b)For Remaining iterations(1..15) of GPIO Mode Configuration loop current pin
    COMMENT is not equal to pin position then function does nothing.
    COMMENT c)variables tested for values as follows
    COMMENT  1. gpio_pin with a value GPIO_PIN_15,
    COMMENT  2. moder with a value 0x00,
    COMMENT  3. otyper with a value 0x00,
    COMMENT  4. ospeedr with a value 0x00,
    COMMENT  5. PUPDR with a value 0x00. 
    COMMENT Equivalence Class 1,4,6,2
	COMMENT
    COMMENT </TD>

    ELEMENT

        COMMENT INPUT SECTION:

            --Holds configuration information for the specified GPIO peripheral
            STRUCTURE gpio_init_struct,     init = { GPIO_Pin => GPIO_PIN_15, GPIO_Mode =>GPIO_MODE_AN,
            &                                        GPIO_Speed =>GPIO_SPEED_100MHZ,
            &                                        GPIO_OType =>GPIO_OTYPE_PP,GPIO_PuPd =>GPIO_PUPD_DOWN },
            &                               							ev = init 
		
			--Holds Output mode configuration content            
            VAR gpio_x.OTYPER,        		init =  0x00,               ev = init
		
			--Holds Speed mode configuration content                
            VAR gpio_x.OSPEEDR,       		init =  0x00,        		ev = init
		
		COMMENT INPUT/OUTPUT SECTION:

			--Holds Pull-up Pull down resistor configuration content                
            VAR gpio_x.PUPDR,         		init =  0x00,             	ev = 0x80000000
			
			--Holds GPIO Mode Configuration content
            VAR gpio_x.MODER,         		init =  0x00,             	ev = 0xC0000000
            
        COMMENT OUTPUT SECTION:
        
            --None

        --Stub Calls : 
        SIMUL

            --No Stubs

        END SIMUL

        --Calling the Unit Under Test :
        #GpioInit(&gpio_x,&gpio_init_struct);

    END ELEMENT
   
END TEST -- TEST 16

TEST 17
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT [hdulibstm32f4xxgpio-GpioInit-CB-LLR-001]
    COMMENT The function 'GpioInit' Perform following actions:
    COMMENT a)For 1 to 16th iterations of GPIO Mode Configuration loop current pin is equal
    COMMENT to pin position then function does following
    COMMENT   1.Clears the GPIOx_MODER register in gpio_x for the current pin position.
    COMMENT   2 Sets the GPIOx_MODER register in gpio_x with the received gpio_mode of gpio_init_struct. 
    COMMENT   3 when the received gpio mode is not GPIO_MODE_OUT and GPIO_MODE_AF the function does nothing.
    COMMENT   4.Clears the GPIOx_PUPDR register in gpio_x for the current pin position.
    COMMENT   5.Sets the GPIOx_PUPDR register in gpio_x with the received gpio_pupd of gpio_init_struct.
    COMMENT b)variables tested for values as follows
    COMMENT  1. gpio_pin with a value GPIO_PIN_ALL,
    COMMENT  2. moder with a value GPIO_MODER_MODER0,
    COMMENT  3. otyper with a value GPIO_OTYPER_OT_0,
    COMMENT  4. ospeedr with a value GPIO_OSPEEDER_OSPEEDR0,
    COMMENT  5. PUPDR with a value GPIO_PUPDR_PUPDR0. 
    COMMENT Equivalence Class 1,4,6
	COMMENT
    COMMENT </TD>


    ELEMENT

        COMMENT INPUT SECTION:

            --Holds configuration information for the specified GPIO peripheral
            STRUCTURE gpio_init_struct,     init = { GPIO_Pin => GPIO_PIN_ALL, GPIO_Mode =>GPIO_MODE_IN,
            &                                        GPIO_Speed =>GPIO_SPEED_2MHZ,
            &                                        GPIO_OType =>GPIO_OTYPE_PP,GPIO_PuPd =>GPIO_PUPD_NOPULL },
            &                               					 					ev = init 
		
			--Holds Output mode configuration content            
            VAR gpio_x.OTYPER,        		init =  GPIO_OTYPER_OT_0,              	ev = init
		
			--Holds Speed mode configuration content                
            VAR gpio_x.OSPEEDR,       		init =  GPIO_OSPEEDER_OSPEEDR0,        	ev = init

		
		COMMENT INPUT/OUTPUT SECTION:
			
			--Holds GPIO Mode Configuration content
            VAR gpio_x.MODER,         		init =  GPIO_MODER_MODER0,             	ev = 0x0
			
			--Holds Pull-up Pull down resistor configuration content                
            VAR gpio_x.PUPDR,         		init =  GPIO_PUPDR_PUPDR0,             	ev = 0x0
            
        COMMENT OUTPUT SECTION:
        
            --None

        --Stub Calls : 
        SIMUL

            --No Stubs

        END SIMUL

        --Calling the Unit Under Test :
        #GpioInit(&gpio_x,&gpio_init_struct);

    END ELEMENT
   
END TEST -- TEST 17


--TEST 18
--FAMILY robustness
--
--    COMMENT Test Description
--    COMMENT <TD> 
--    COMMENT [hdulibstm32f4xxgpio-GpioInit-CB-LLR-001]
--    COMMENT Since 'gpio_x' is passed as NULL, it shows abnormal behaviour and hence it is commented. 
--    COMMENT Equivalence Class 9
--    COMMENT </TD>
--
--    ELEMENT
--
--        COMMENT INPUT SECTION:
--
--            --None
--
--        COMMENT OUTPUT SECTION:
--
--            --None
--
--        COMMENT INPUT/OUTPUT SECTION:
--
--            --None
--
--        --Stub Calls :
--        SIMUL
--
--            --No Stubs
--
--        END SIMUL
--
--        --Calling the Unit Under Test :
--        #GpioInit(NULL,&gpio_init_struct);
--
--    END ELEMENT
--   
--END TEST -- TEST 18

--TEST 19
--FAMILY robustness
--
--    COMMENT Test Description
--    COMMENT <TD> 
--    COMMENT [hdulibstm32f4xxgpio-GpioInit-CB-LLR-001]. 
--    COMMENT Since 'gpio_init_struct' is passed as NULL, it shows abnormal behaviour and hence it is commented.
--    COMMENT Equivalence Class 10
--    COMMENT </TD>
--
--    ELEMENT
--
--        COMMENT INPUT SECTION:
--
--            --None
--
--        COMMENT OUTPUT SECTION:
--
--            --None
--
--        COMMENT INPUT/OUTPUT SECTION:
--
--            --None
--
--        --Stub Calls :
--        SIMUL
--
--            --No Stubs
--
--        END SIMUL
--
--        --Calling the Unit Under Test :
--        #GpioInit(&gpio_x,NULL);
--
--    END ELEMENT
--   
--END TEST -- TEST 19

END SERVICE -- GpioInit

--------------------------------------------------------------------------------
-- Declaration of the service GpioResetBits
--------------------------------------------------------------------------------
SERVICE GpioResetBits
SERVICE_TYPE extern

-- Tested service parameters declarations

    #T_GPIO_TYPE gpio_x;
    #T_UINT16 gpio_pin;

ENVIRONMENT ENV_GpioResetBits

    STRUCTURE gpio_x,		init = { MODER => 0, OTYPER => 0, OSPEEDR => 0, PUPDR => 0, IDR => 0, ODR => 0, BSRRL => 0, BSRRH => 0, LCKR => 0,
	&								AFR => { others => 0 } },		ev = init
	
    VAR gpio_pin,			init = 0,								ev = init
    
END ENVIRONMENT -- ENV_GpioResetBits

USE ENV_GpioResetBits

TEST 1
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT [hdulibstm32f4xxgpio-GpioResetBits-CB-LLR-001]
    COMMENT The function 'GpioResetBits' resets GPIO port bit set/reset high register(BSRRH) with
    COMMENT the received Gpio pin value GPIO_PIN_0.
    COMMENT Equivalence Class 17
	COMMENT
    COMMENT </TD>

    ELEMENT

        COMMENT INPUT SECTION:

            --Holds the GPIO pin input value(pin number)
            VAR gpio_pin,           			init = GPIO_PIN_0 ,           	ev = init

        COMMENT OUTPUT SECTION:

            --Holds the GPIO port bit set/reset high register value
            VAR gpio_x.BSRRH,         			init = RESET,                 	ev = GPIO_PIN_0

        COMMENT INPUT/OUTPUT SECTION:
                        
            --None
            
        --Stub Calls :
        SIMUL

            --No Stubs

        END SIMUL

        --Calling the Unit Under Test :
        #GpioResetBits(&gpio_x, gpio_pin);
    
	END ELEMENT

END TEST -- TEST 1
	
TEST 2
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT [hdulibstm32f4xxgpio-GpioResetBits-CB-LLR-001]
    COMMENT The function 'GpioResetBits' resets GPIO port bit set/reset high register(BSRRH) with
    COMMENT the received Gpio pin value GPIO_PIN_1.
    COMMENT Equivalence Class 17
	COMMENT
    COMMENT </TD>

    ELEMENT

        COMMENT INPUT SECTION:

            --Holds the GPIO pin input value(pin number)
            VAR gpio_pin,           			init = GPIO_PIN_1 ,           			ev = init

        COMMENT OUTPUT SECTION:

            --Holds the GPIO port bit set/reset high register value
            VAR gpio_x.BSRRH,         			init = RESET,                 			ev = GPIO_PIN_1

        COMMENT INPUT/OUTPUT SECTION:
                        
            --None
            
        --Stub Calls :
        SIMUL

            --No Stubs

        END SIMUL

        --Calling the Unit Under Test :
        #GpioResetBits(&gpio_x, gpio_pin);
    
	END ELEMENT

END TEST -- TEST 2

TEST 3
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT [hdulibstm32f4xxgpio-GpioResetBits-CB-LLR-001]
    COMMENT The function 'GpioResetBits' resets GPIO port bit set/reset high register(BSRRH) with
    COMMENT the received Gpio pin value GPIO_PIN_2. 
    COMMENT Equivalence Class 17
	COMMENT
    COMMENT </TD>

    ELEMENT

        COMMENT INPUT SECTION:

            --Holds the GPIO pin input value(pin number)
            VAR gpio_pin,           				init = GPIO_PIN_2 ,           	ev = init

        COMMENT OUTPUT SECTION:

            --Holds the GPIO port bit set/reset high register value
            VAR gpio_x.BSRRH,         				init = RESET,                 	ev = GPIO_PIN_2

        COMMENT INPUT/OUTPUT SECTION:
                        
            --None
            
        --Stub Calls :
        SIMUL

            --No Stubs

        END SIMUL

        --Calling the Unit Under Test :
        #GpioResetBits(&gpio_x, gpio_pin);
    
	END ELEMENT

END TEST -- TEST 3

TEST 4
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT [hdulibstm32f4xxgpio-GpioResetBits-CB-LLR-001]
    COMMENT The function 'GpioResetBits' resets GPIO port bit set/reset high register(BSRRH) with
    COMMENT the received Gpio pin value GPIO_PIN_3.
    COMMENT Equivalence Class 17
	COMMENT
    COMMENT </TD>

    ELEMENT

        COMMENT INPUT SECTION:

            --Holds the GPIO pin input value(pin number)
            VAR gpio_pin,           			init = GPIO_PIN_3 ,           		ev = init

        COMMENT OUTPUT SECTION:

            --Holds the GPIO port bit set/reset high register value
            VAR gpio_x.BSRRH,         			init = RESET,                 		ev = GPIO_PIN_3

        COMMENT INPUT/OUTPUT SECTION:
                        
            --None
            
        --Stub Calls :
        SIMUL

            --No Stubs

        END SIMUL

        --Calling the Unit Under Test :
        #GpioResetBits(&gpio_x, gpio_pin);
    
	END ELEMENT

END TEST -- TEST 4

TEST 5
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT [hdulibstm32f4xxgpio-GpioResetBits-CB-LLR-001]
    COMMENT The function 'GpioResetBits' resets GPIO port bit set/reset high register(BSRRH) with
    COMMENT the received Gpio pin value GPIO_PIN_4.
    COMMENT Equivalence Class 17
	COMMENT
    COMMENT </TD>

    ELEMENT

        COMMENT INPUT SECTION:

            --Holds the GPIO pin input value(pin number)
            VAR gpio_pin,           			init = GPIO_PIN_4 ,           	ev = init

        COMMENT OUTPUT SECTION:

            --Holds the GPIO port bit set/reset high register value
            VAR gpio_x.BSRRH,         			init = RESET,                 	ev = GPIO_PIN_4

        COMMENT INPUT/OUTPUT SECTION:
                        
            --None
            
        --Stub Calls :
        SIMUL

            --No Stubs

        END SIMUL

        --Calling the Unit Under Test :
        #GpioResetBits(&gpio_x, gpio_pin);
    
	END ELEMENT

END TEST -- TEST 5

TEST 6
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT [hdulibstm32f4xxgpio-GpioResetBits-CB-LLR-001]
    COMMENT The function 'GpioResetBits' resets GPIO port bit set/reset high register(BSRRH) with
    COMMENT the received Gpio pin value GPIO_PIN_5.
    COMMENT Equivalence Class 17
	COMMENT
    COMMENT </TD>



    ELEMENT

        COMMENT INPUT SECTION:

            --Holds the GPIO pin input value(pin number)
            VAR gpio_pin,           		init = GPIO_PIN_5 ,           	ev = init

        COMMENT OUTPUT SECTION:

            --Holds the GPIO port bit set/reset high register value
            VAR gpio_x.BSRRH,         		init = RESET,                 	ev = GPIO_PIN_5

        COMMENT INPUT/OUTPUT SECTION:
                        
            --None
            
        --Stub Calls :
        SIMUL

            --No Stubs

        END SIMUL

        --Calling the Unit Under Test :
        #GpioResetBits(&gpio_x, gpio_pin);
    
	END ELEMENT

END TEST -- TEST 6

TEST 7
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT [hdulibstm32f4xxgpio-GpioResetBits-CB-LLR-001]
    COMMENT The function 'GpioResetBits' resets GPIO port bit set/reset high register(BSRRH) with
    COMMENT the received Gpio pin value GPIO_PIN_6.
    COMMENT Equivalence Class 17
	COMMENT
    COMMENT </TD>

    ELEMENT

        COMMENT INPUT SECTION:

            --Holds the GPIO pin input value(pin number)
            VAR gpio_pin,           		init = GPIO_PIN_6 ,           	ev = init

        COMMENT OUTPUT SECTION:

            --Holds the GPIO port bit set/reset high register value
            VAR gpio_x.BSRRH,         		init = RESET,                 	ev = GPIO_PIN_6

        COMMENT INPUT/OUTPUT SECTION:
                        
            --None
            
        --Stub Calls :
        SIMUL

            --No Stubs

        END SIMUL

        --Calling the Unit Under Test :
        #GpioResetBits(&gpio_x, gpio_pin);
    
	END ELEMENT

END TEST -- TEST 7

TEST 8
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT [hdulibstm32f4xxgpio-GpioResetBits-CB-LLR-001]
    COMMENT The function 'GpioResetBits' resets GPIO port bit set/reset high register(BSRRH) with
    COMMENT the received Gpio pin value GPIO_PIN_7.
    COMMENT Equivalence Class 17
	COMMENT
    COMMENT </TD>

    ELEMENT

        COMMENT INPUT SECTION:

            --Holds the GPIO pin input value(pin number)
            VAR gpio_pin,           		init = GPIO_PIN_7,           	ev = init

        COMMENT OUTPUT SECTION:

            --Holds the GPIO port bit set/reset high register value
            VAR gpio_x.BSRRH,         		init = RESET,                 	ev = GPIO_PIN_7

        COMMENT INPUT/OUTPUT SECTION:
                        
            --None
            
        --Stub Calls :
        SIMUL

            --No Stubs

        END SIMUL

        --Calling the Unit Under Test :
        #GpioResetBits(&gpio_x, gpio_pin);
    
	END ELEMENT

END TEST -- TEST 8

TEST 9
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT [hdulibstm32f4xxgpio-GpioResetBits-CB-LLR-001]
    COMMENT The function 'GpioResetBits' resets GPIO port bit set/reset high register(BSRRH) with
    COMMENT the received Gpio pin value GPIO_PIN_8.
    COMMENT Equivalence Class 17
	COMMENT
    COMMENT </TD>


    ELEMENT

        COMMENT INPUT SECTION:

            --Holds the GPIO pin input value(pin number)
            VAR gpio_pin,           		init = GPIO_PIN_8,           	ev = init

        COMMENT OUTPUT SECTION:

            --Holds the GPIO port bit set/reset high register value
            VAR gpio_x.BSRRH,         		init = RESET,                 	ev = GPIO_PIN_8

        COMMENT INPUT/OUTPUT SECTION:
                        
            --None
            
        --Stub Calls :
        SIMUL

            --No Stubs

        END SIMUL

        --Calling the Unit Under Test :
        #GpioResetBits(&gpio_x, gpio_pin);
    
	END ELEMENT

END TEST -- TEST 9

TEST 10
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT [hdulibstm32f4xxgpio-GpioResetBits-CB-LLR-001]
    COMMENT The function 'GpioResetBits' resets GPIO port bit set/reset high register(BSRRH) with
    COMMENT the received Gpio pin value GPIO_PIN_9.
    COMMENT Equivalence Class 17
	COMMENT
    COMMENT </TD>

    ELEMENT

        COMMENT INPUT SECTION:

            --Holds the GPIO pin input value(pin number)
            VAR gpio_pin,           	init = GPIO_PIN_9,           	ev = init

        COMMENT OUTPUT SECTION:

            --Holds the GPIO port bit set/reset high register value
            VAR gpio_x.BSRRH,         	init = RESET,                 	ev = GPIO_PIN_9

        COMMENT INPUT/OUTPUT SECTION:
                        
            --None
            
        --Stub Calls :
        SIMUL

            --No Stubs

        END SIMUL

        --Calling the Unit Under Test :
        #GpioResetBits(&gpio_x, gpio_pin);
    
	END ELEMENT

END TEST -- TEST 10

TEST 11
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT [hdulibstm32f4xxgpio-GpioResetBits-CB-LLR-001]
    COMMENT The function 'GpioResetBits' resets GPIO port bit set/reset high register(BSRRH) with
    COMMENT the received Gpio pin value GPIO_PIN_10.
    COMMENT Equivalence Class 17
	COMMENT
    COMMENT </TD>

    ELEMENT

        COMMENT INPUT SECTION:

            --Holds the GPIO pin input value(pin number)
            VAR gpio_pin,           	init = GPIO_PIN_10 ,           	ev = init

        COMMENT OUTPUT SECTION:

            --Holds the GPIO port bit set/reset high register value
            VAR gpio_x.BSRRH,         	init = RESET,                 	ev = GPIO_PIN_10

        COMMENT INPUT/OUTPUT SECTION:
                        
            --None
            
        --Stub Calls :
        SIMUL

            --No Stubs

        END SIMUL

        --Calling the Unit Under Test :
        #GpioResetBits(&gpio_x, gpio_pin);
    
	END ELEMENT

END TEST -- TEST 11

TEST 12
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT [hdulibstm32f4xxgpio-GpioResetBits-CB-LLR-001]
    COMMENT The function 'GpioResetBits' resets GPIO port bit set/reset high register(BSRRH) with
    COMMENT the received Gpio pin value GPIO_PIN_11.
    COMMENT Equivalence Class 17
	COMMENT
    COMMENT </TD>

    ELEMENT

        COMMENT INPUT SECTION:

            --Holds the GPIO pin input value(pin number)
            VAR gpio_pin,           	init = GPIO_PIN_11 ,          	 	ev = init

        COMMENT OUTPUT SECTION:

            --Holds the GPIO port bit set/reset high register value
            VAR gpio_x.BSRRH,         	init = RESET,                 		ev = GPIO_PIN_11

        COMMENT INPUT/OUTPUT SECTION:
                        
            --None
            
        --Stub Calls :
        SIMUL

            --No Stubs

        END SIMUL

        --Calling the Unit Under Test :
        #GpioResetBits(&gpio_x, gpio_pin);
    
	END ELEMENT

END TEST -- TEST 12

TEST 13
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT [hdulibstm32f4xxgpio-GpioResetBits-CB-LLR-001]
    COMMENT The function 'GpioResetBits' resets GPIO port bit set/reset high register(BSRRH) with
    COMMENT the received Gpio pin value GPIO_PIN_12.
    COMMENT Equivalence Class 17
	COMMENT
    COMMENT </TD>

    ELEMENT

        COMMENT INPUT SECTION:

            --Holds the GPIO pin input value(pin number)
            VAR gpio_pin,           		init = GPIO_PIN_12 ,           	ev = init

        COMMENT OUTPUT SECTION:

            --Holds the GPIO port bit set/reset high register value
            VAR gpio_x.BSRRH,         		init = RESET,                 	ev = GPIO_PIN_12

        COMMENT INPUT/OUTPUT SECTION:
                        
            --None
            
        --Stub Calls :
        SIMUL

            --No Stubs

        END SIMUL

        --Calling the Unit Under Test :
        #GpioResetBits(&gpio_x, gpio_pin);
    
	END ELEMENT

END TEST -- TEST 13

TEST 14
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT [hdulibstm32f4xxgpio-GpioResetBits-CB-LLR-001] 
    COMMENT The function 'GpioResetBits' resets GPIO port bit set/reset high register(BSRRH) with
    COMMENT the received Gpio pin value GPIO_PIN_13.
    COMMENT Equivalence Class 17
	COMMENT
    COMMENT </TD>

    ELEMENT

        COMMENT INPUT SECTION:

            --Holds the GPIO pin input value(pin number)
            VAR gpio_pin,           		init = GPIO_PIN_13 ,           	ev = init

        COMMENT OUTPUT SECTION:

            --Holds the GPIO port bit set/reset high register value
            VAR gpio_x.BSRRH,         		init = RESET,                 	ev = GPIO_PIN_13

        COMMENT INPUT/OUTPUT SECTION:
                        
            --None
            
        --Stub Calls :
        SIMUL

            --No Stubs

        END SIMUL

        --Calling the Unit Under Test :
        #GpioResetBits(&gpio_x, gpio_pin);
    
	END ELEMENT

END TEST -- TEST 14

TEST 15
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT [hdulibstm32f4xxgpio-GpioResetBits-CB-LLR-001]
    COMMENT The function 'GpioResetBits' resets GPIO port bit set/reset high register(BSRRH) with
    COMMENT the received Gpio pin value GPIO_PIN_14.
    COMMENT Equivalence Class 17
	COMMENT
    COMMENT </TD>

    ELEMENT

        COMMENT INPUT SECTION:

            --Holds the GPIO pin input value(pin number)
            VAR gpio_pin,           		init = GPIO_PIN_14 ,           	ev = init

        COMMENT OUTPUT SECTION:

            --Holds the GPIO port bit set/reset high register value
            VAR gpio_x.BSRRH,         		init = RESET,                 	ev = GPIO_PIN_14

        COMMENT INPUT/OUTPUT SECTION:
                        
            --None
            
        --Stub Calls :
        SIMUL

            --No Stubs

        END SIMUL

        --Calling the Unit Under Test :
        #GpioResetBits(&gpio_x, gpio_pin);
    
	END ELEMENT

END TEST -- TEST 15

TEST 16
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT [hdulibstm32f4xxgpio-GpioResetBits-CB-LLR-001]
    COMMENT The function 'GpioResetBits' resets GPIO port bit set/reset high register(BSRRH) with
    COMMENT the received Gpio pin value GPIO_PIN_15.
    COMMENT Equivalence Class 17
	COMMENT
    COMMENT </TD>

    ELEMENT

        COMMENT INPUT SECTION:

            --Holds the GPIO pin input value(pin number)
            VAR gpio_pin,           		init = GPIO_PIN_15 ,          	 	ev = init

        COMMENT OUTPUT SECTION:

            --Holds the GPIO port bit set/reset high register value
            VAR gpio_x.BSRRH,         		init = RESET,                 		ev = GPIO_PIN_15

        COMMENT INPUT/OUTPUT SECTION:
                        
            --None
            
        --Stub Calls :
        SIMUL

            --No Stubs

        END SIMUL

        --Calling the Unit Under Test :
        #GpioResetBits(&gpio_x, gpio_pin);
    
	END ELEMENT

END TEST -- TEST 16

TEST 17
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT [hdulibstm32f4xxgpio-GpioResetBits-CB-LLR-001]
    COMMENT The function 'GpioResetBits' resets GPIO port bit set/reset high register(BSRRH) with
    COMMENT the received Gpio pin value GPIO_PIN_ALL.
    COMMENT Equivalence Class 17
	COMMENT
    COMMENT </TD>
    
	ELEMENT

        COMMENT INPUT SECTION:

            --Holds the GPIO pin input value(pin number)
            VAR gpio_pin,           		init = GPIO_PIN_ALL ,           	ev = init

        COMMENT OUTPUT SECTION:

            --Holds the GPIO port bit set/reset high register value
            VAR gpio_x.BSRRH,         		init = RESET,                 		ev = GPIO_PIN_ALL

        COMMENT INPUT/OUTPUT SECTION:
                        
            --None
            
        --Stub Calls :
        SIMUL

            --No Stubs

        END SIMUL

        --Calling the Unit Under Test :
        #GpioResetBits(&gpio_x, gpio_pin);
    
	END ELEMENT

END TEST -- TEST 17

--TEST 18
--FAMILY robustness
--
--    COMMENT Test Description
--    COMMENT <TD> 
--    COMMENT [hduulibstm32f4xxgpio-GpioResetBits-CB-LLR-001]
--    COMMENT Since 'gpio_x' is passed as NULL, it shows abnormal behaviour and hence it is commented.
--    COMMENT Equivalence Class 12
--    COMMENT </TD>
--
--    ELEMENT
--
--        COMMENT INPUT SECTION:
--
--            --None
--
--        COMMENT OUTPUT SECTION:
--
--            --None
--
--        COMMENT INPUT/OUTPUT SECTION:
--
--            --None
--
--        --Stub Calls :
--        SIMUL
--
--            --No Stubs
--
--        END SIMUL
--
--         --Calling the Unit Under Test :
--        #GpioResetBits(NULL,gpio_pin);
--
--    END ELEMENT
--
--END TEST -- TEST 18

END SERVICE -- GpioResetBits

--------------------------------------------------------------------------------
-- Declaration of the service GpioPinAFConfig
--------------------------------------------------------------------------------
SERVICE GpioPinAFConfig
SERVICE_TYPE extern

-- Tested service parameters declarations

    #T_GPIO_TYPE gpio_x;
    #T_UINT16 gpio_pin_source;
    #T_UINT8 gpio_af;

ENVIRONMENT ENV_GpioPinAFConfig
	
    STRUCTURE gpio_x,		init = { MODER => 0, OTYPER => 0, OSPEEDR => 0, PUPDR => 0, IDR => 0, ODR => 0, BSRRL => 0, 
	&								BSRRH => 0, LCKR => 0,AFR => { others => 0 } },	ev = init	
	
    VAR gpio_pin_source,	init = 0,												ev = init
	
    VAR gpio_af,			init = 0,												ev = init
	
END ENVIRONMENT -- ENV_GpioPinAFConfig

USE ENV_GpioPinAFConfig

TEST 1
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT [hdulibstm32f4xxgpio-GpioPinAFConfig-CB-LLR-001]
    COMMENT 1.The function 'GpioPinAFConfig' change the mapping of specified pin gpio_pinsource to the
    COMMENT   alternate function in gpio_af by configuring the AFR register in gpio_x.
    COMMENT 2.gpio_pinsource is tested for value GPIO_PINSOURCE0.
    COMMENT 3.gpio_af is tested for value 0x0000.
	COMMENT 4.Variable AFR tested for minimum value 0x1
    COMMENT Equivalence Class 19
	COMMENT
    COMMENT </TD>
	
	ELEMENT

        COMMENT INPUT SECTION:

            --Specifies the pin for the Alternate function
            VAR gpio_pin_source,     			init = GPIO_PINSOURCE0,         	ev = init   
            
            --Selects the pin to be used as Alternate function
            VAR gpio_af,             			init = 0x0000,            			ev = init

        COMMENT INPUT/OUTPUT SECTION:

            --Holds GPIO alternate function registers content
            ARRAY gpio_x.AFR,      				init = { others =>0x01 } ,        	ev = {1=>0x1,others =>0x0 }

        COMMENT OUTPUT SECTION:
                        
            --None
            
        --Stub Calls :
        SIMUL

            --No Stubs

        END SIMUL

        --Calling the Unit Under Test :
        #GpioPinAFConfig(&gpio_x, gpio_pin_source, gpio_af);
        
	END ELEMENT

END TEST -- TEST 1
	
TEST 2
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT [hdulibstm32f4xxgpio-GpioPinAFConfig-CB-LLR-001]
    COMMENT 1.The function 'GpioPinAFConfig' change the mapping of specified pin gpio_pinsource to the
    COMMENT   alternate function in gpio_af by configuring the AFR register in gpio_x.
    COMMENT 2.gpio_pinsource is tested for value GPIO_PINSOURCE1.
    COMMENT 3.gpio_af is tested for value 0x1.
    COMMENT 4.Variable AFR tested for minimum value 0x0
    COMMENT Equivalence Class 19
	COMMENT
    COMMENT </TD>
	
	ELEMENT

        COMMENT INPUT SECTION:

            --Specifies the pin for the Alternate function
            VAR gpio_pin_source,     		init = GPIO_PINSOURCE1,          ev = init   
            
            --Selects the pin to be used as Alternate function
            VAR gpio_af,             		init = 0x1,            			 ev = init

        COMMENT INPUT/OUTPUT SECTION:

            --Holds GPIO alternate function registers content
            ARRAY gpio_x.AFR,      			init = { others =>0x0 } ,        ev = {0 => 0x10, others =>0x0 }

        COMMENT OUTPUT SECTION:
                        
            --None
            
        --Stub Calls :
        SIMUL

            --No Stubs

        END SIMUL

        --Calling the Unit Under Test :
        #GpioPinAFConfig(&gpio_x, gpio_pin_source, gpio_af);
       
	END ELEMENT

END TEST -- TEST 2
	
TEST 3
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT [hdulibstm32f4xxgpio-GpioPinAFConfig-CB-LLR-001]
    COMMENT 1.The function 'GpioPinAFConfig' change the mapping of specified pin gpio_pinsource to the
    COMMENT   alternate function in gpio_af by configuring the AFR register in gpio_x.
    COMMENT 2.gpio_pinsource is tested for value GPIO_PINSOURCE2.
    COMMENT 3.gpio_af is tested for value 0x2.
    COMMENT 4.Variable AFR tested for minimum+1 value 0x0
    COMMENT Equivalence Class 19
	COMMENT
    COMMENT </TD>
	
	ELEMENT

        COMMENT INPUT SECTION:

            --Specifies the pin for the Alternate function
            VAR gpio_pin_source,     	init = GPIO_PINSOURCE2,          ev = init   
            
            --Selects the pin to be used as Alternate function
            VAR gpio_af,             	init = 0x2,            			 ev = init

        COMMENT INPUT/OUTPUT SECTION:

            --Holds GPIO alternate function registers content
            ARRAY gpio_x.AFR,      		init = { others =>0x0 } ,        ev = {0 => 0x200, others =>0x0 }

        COMMENT OUTPUT SECTION:
                        
            --None
            
        --Stub Calls :
        SIMUL

            --No Stubs

        END SIMUL

        --Calling the Unit Under Test :
        #GpioPinAFConfig(&gpio_x, gpio_pin_source, gpio_af);
        
	END ELEMENT

END TEST -- TEST 3
	
TEST 4
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT [hdulibstm32f4xxgpio-GpioPinAFConfig-CB-LLR-001]
    COMMENT 1.The function 'GpioPinAFConfig' change the mapping of specified pin gpio_pinsource to the
    COMMENT   alternate function in gpio_af by configuring the AFR register in gpio_x.
    COMMENT 2.gpio_pinsource is tested for value GPIO_PINSOURCE3.
    COMMENT 3.gpio_af is tested for value 0x3.
    COMMENT 4.Variable AFR tested for nominal value 0xFFFF
    COMMENT Equivalence Class 19
	COMMENT
    COMMENT </TD>
	
	ELEMENT

        COMMENT INPUT SECTION:

            --Specifies the pin for the Alternate function
            VAR gpio_pin_source,     			init = GPIO_PINSOURCE3,          ev = init   
            
            --Selects the pin to be used as Alternate function
            VAR gpio_af,             			init = 0x3,           		 	 ev = init

        COMMENT INPUT/OUTPUT SECTION:

            --Holds GPIO alternate function registers content
            ARRAY gpio_x.AFR,      				init = { others =>0xFFFF } ,     ev = {0 => 0x3FFF, others =>0xFFFF }

        COMMENT OUTPUT SECTION:
                        
            --None
            
        --Stub Calls :
        SIMUL

            --No Stubs

        END SIMUL

        --Calling the Unit Under Test :
        #GpioPinAFConfig(&gpio_x, gpio_pin_source, gpio_af);
        
	END ELEMENT

END TEST -- TEST 4
	
TEST 5
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT [hdulibstm32f4xxgpio-GpioPinAFConfig-CB-LLR-001]
    COMMENT 1.The function 'GpioPinAFConfig' change the mapping of specified pin gpio_pinsource to the
    COMMENT   alternate function in gpio_af by configuring the AFR register in gpio_x.
    COMMENT 2.gpio_pinsource is tested for value GPIO_PINSOURCE4.
    COMMENT 3.gpio_af is tested for value 0x4.
    COMMENT 4.Variable AFR tested for maximum-1 value 0xFFFFFFFE
    COMMENT Equivalence Class 19
	COMMENT
    COMMENT </TD>
	
	ELEMENT

        COMMENT INPUT SECTION:

            --Specifies the pin for the Alternate function
            VAR gpio_pin_source,     		init = GPIO_PINSOURCE4,         		 ev = init   
            
            --Selects the pin to be used as Alternate function
            VAR gpio_af,             		init = 0x4,            					 ev = init

        COMMENT INPUT/OUTPUT SECTION:

            --Holds GPIO alternate function registers content
            ARRAY gpio_x.AFR,      			init = { others => (T_VLT_UINT32)0xFFFFFFFE } ,         ev = {0 => (T_VLT_UINT32)0xFFF4FFFE, others => (T_VLT_UINT32)0xFFFFFFFE }

        COMMENT OUTPUT SECTION:
                        
            --None
            
        --Stub Calls :
        SIMUL

            --No Stubs

        END SIMUL

        --Calling the Unit Under Test :
        #GpioPinAFConfig(&gpio_x, gpio_pin_source, gpio_af);
        
	END ELEMENT

END TEST -- TEST 5
	
TEST 6
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT [hdulibstm32f4xxgpio-GpioPinAFConfig-CB-LLR-001]
    COMMENT 1.The function 'GpioPinAFConfig' change the mapping of specified pin gpio_pinsource to the
    COMMENT   alternate function in gpio_af by configuring the AFR register in gpio_x.
    COMMENT 2.gpio_pinsource is tested for value GPIO_PINSOURCE5. 
    COMMENT 3.gpio_af is tested for value 0x5. 
    COMMENT 4.Variable AFR tested for maximum value 0xFFFFFFFF
    COMMENT Equivalence Class 19
	COMMENT
    COMMENT </TD>
	
	ELEMENT

        COMMENT INPUT SECTION:

            --Specifies the pin for the Alternate function
            VAR gpio_pin_source,     			init = GPIO_PINSOURCE5,         		 ev = init   
            
            --Selects the pin to be used as Alternate function
            VAR gpio_af,             			init = 0x5,            					 ev = init

        COMMENT INPUT/OUTPUT SECTION:

            --Holds GPIO alternate function registers content
            ARRAY gpio_x.AFR,      				init = { others =>(T_VLT_UINT32)0xFFFFFFFF } ,         ev = {0 => (T_VLT_UINT32)0xFF5FFFFF, others => (T_VLT_UINT32)0xFFFFFFFF }

        COMMENT OUTPUT SECTION:
                        
            --None
            
        --Stub Calls :
        SIMUL

            --No Stubs

        END SIMUL

        --Calling the Unit Under Test :
        #GpioPinAFConfig(&gpio_x, gpio_pin_source, gpio_af);
        
	END ELEMENT

END TEST -- TEST 6


TEST 7
FAMILY nominal

 COMMENT Test Description
 COMMENT <TD> 
 COMMENT [hdulibstm32f4xxgpio-GpioPinAFConfig-CB-LLR-001]
 COMMENT 1.The function 'GpioPinAFConfig' change the mapping of specified pin gpio_pinsource to the
 COMMENT   alternate function in gpio_af by configuring the AFR register in gpio_x.
 COMMENT 2.gpio_pinsource is tested for value GPIO_PINSOURCE6. 
 COMMENT 3.gpio_af is tested for value 0x6. 
 COMMENT 4.Variable AFR tested for maximum value 0xFFFFFFFF
 COMMENT Equivalence Class 19
 COMMENT
 COMMENT </TD>
	
	ELEMENT

       COMMENT INPUT SECTION:

         --Specifies the pin for the Alternate function
           VAR gpio_pin_source,     				init = GPIO_PINSOURCE6,         			ev = init   
         
         --Selects the pin to be used as Alternate function
           VAR gpio_af,             				init = 0x6,            						ev = init

       COMMENT INPUT/OUTPUT SECTION:

         --Holds GPIO alternate function registers content
           --ARRAY gpio_x.AFR,      				init = { others =>(T_VLT_UINT32)0xFFFFFFFF } ,         	ev = {0 => 0xFF9FFFFF, others =>(T_VLT_UINT32)0xFFFFFFFF }
           
           VAR gpio_x.AFR[0],      				init = (T_VLT_UINT32)0xFFFFFFFF  ,         	ev = 0xF6FFFFFF
           
           VAR gpio_x.AFR[1],      				init = (T_VLT_UINT32)0xFFFFFFFF  ,         	ev = (T_VLT_UINT32)0xFFFFFFFF 

       COMMENT OUTPUT SECTION:
                     
         --None
         
     --Stub Calls :
       SIMUL

         --No Stubs

       END SIMUL

     --Calling the Unit Under Test :
       #GpioPinAFConfig(&gpio_x, gpio_pin_source, gpio_af);
       
	END ELEMENT

END TEST -- TEST 7
	
	
TEST 8
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT [hdulibstm32f4xxgpio-GpioPinAFConfig-CB-LLR-001]
    COMMENT 1.The function 'GpioPinAFConfig' change the mapping of specified pin gpio_pinsource to the
    COMMENT   alternate function in gpio_af by configuring the AFR register in gpio_x.
    COMMENT 2.gpio_pinsource is tested for value GPIO_PINSOURCE7.
    COMMENT 3.gpio_af is tested for value 0x7.
    COMMENT Equivalence Class 19
	COMMENT
    COMMENT </TD>
	
	ELEMENT

        COMMENT INPUT SECTION:

            --Specifies the pin for the Alternate function
            VAR gpio_pin_source,     				init = GPIO_PINSOURCE7,         	ev = init   
            
            --Selects the pin to be used as Alternate function
            VAR gpio_af,             				init = 0x7,            				ev = init

        COMMENT INPUT/OUTPUT SECTION:

            --Holds GPIO alternate function registers content
            ARRAY gpio_x.AFR,      					init = { others =>0x0 } ,         	ev = {0 => 0x70000000, others =>0x0 }

        COMMENT OUTPUT SECTION:
                        
            --None
            
        --Stub Calls :
        SIMUL

            --No Stubs

        END SIMUL

        --Calling the Unit Under Test :
        #GpioPinAFConfig(&gpio_x, gpio_pin_source, gpio_af);
        
	END ELEMENT

END TEST -- TEST 8
	
TEST 9
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT [hdulibstm32f4xxgpio-GpioPinAFConfig-CB-LLR-001]
    COMMENT 1.The function 'GpioPinAFConfig' change the mapping of specified pin gpio_pinsource to the
    COMMENT   alternate function in gpio_af by configuring the AFR register in gpio_x.
    COMMENT 2.gpio_pinsource is tested for value GPIO_PINSOURCE8. 
    COMMENT 3.gpio_af is tested for value 0x8. 
    COMMENT Equivalence Class 19
	COMMENT
    COMMENT </TD>
	
	ELEMENT

        COMMENT INPUT SECTION:

            --Specifies the pin for the Alternate function
            VAR gpio_pin_source,     			init = GPIO_PINSOURCE8,         	ev = init   
            
            --Selects the pin to be used as Alternate function
            VAR gpio_af,             			init = 0x8,            				ev = init

        COMMENT INPUT/OUTPUT SECTION:

            --Holds GPIO alternate function registers content
            ARRAY gpio_x.AFR,      				init = { others =>0x0 } ,         	ev = {1 => 0x8, others =>0x0 }

        COMMENT OUTPUT SECTION:
                        
            --None
            
        --Stub Calls :
        SIMUL

            --No Stubs

        END SIMUL

        --Calling the Unit Under Test :
        #GpioPinAFConfig(&gpio_x, gpio_pin_source, gpio_af);
        
	END ELEMENT

END TEST -- TEST 9
	
TEST 10
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT [hdulibstm32f4xxgpio-GpioPinAFConfig-CB-LLR-001]
    COMMENT 1.The function 'GpioPinAFConfig' change the mapping of specified pin gpio_pinsource to the
    COMMENT   alternate function in gpio_af by configuring the AFR register in gpio_x.
    COMMENT 2.gpio_pinsource is tested for value GPIO_PINSOURCE9.
    COMMENT 3.gpio_af is tested for value 0x9.
    COMMENT Equivalence Class 19
	COMMENT
    COMMENT </TD>
	
	ELEMENT

        COMMENT INPUT SECTION:

            --Specifies the pin for the Alternate function
            VAR gpio_pin_source,     			init = GPIO_PINSOURCE9,         	ev = init   
            
            --Selects the pin to be used as Alternate function
            VAR gpio_af,             			init = 0x9,            				ev = init

        COMMENT INPUT/OUTPUT SECTION:

            --Holds GPIO alternate function registers content
            ARRAY gpio_x.AFR,      				init = { others =>0x0 } ,         	ev = {1 => 0x90, others =>0x0 }

        COMMENT OUTPUT SECTION:
                        
            --None
            
        --Stub Calls :
        SIMUL

            --No Stubs

        END SIMUL

        --Calling the Unit Under Test :
        #GpioPinAFConfig(&gpio_x, gpio_pin_source, gpio_af);
        
	END ELEMENT

END TEST -- TEST 10
	
TEST 11
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT [hdulibstm32f4xxgpio-GpioPinAFConfig-CB-LLR-001]
    COMMENT 1.The function 'GpioPinAFConfig' change the mapping of specified pin gpio_pinsource to the
    COMMENT   alternate function in gpio_af by configuring the AFR register in gpio_x.
    COMMENT 2.gpio_pinsource is tested for value GPIO_PINSOURCE10. 
    COMMENT 3.gpio_af is tested for value 0xA.
    COMMENT Equivalence Class 19
	COMMENT
    COMMENT </TD>
	
	ELEMENT

        COMMENT INPUT SECTION:

            --Specifies the pin for the Alternate function
            VAR gpio_pin_source,     			init = GPIO_PINSOURCE10,         	ev = init   
            
            --Selects the pin to be used as Alternate function
            VAR gpio_af,             			init = 0xA,            				ev = init

        COMMENT INPUT/OUTPUT SECTION:

            --Holds GPIO alternate function registers content
            ARRAY gpio_x.AFR,      				init = { others =>0x0 } ,         	ev = {1 => 0xA00, others =>0x00}

        COMMENT OUTPUT SECTION:
                        
            --None
            
        --Stub Calls :
        SIMUL

            --No Stubs

        END SIMUL

        --Calling the Unit Under Test :
        #GpioPinAFConfig(&gpio_x, gpio_pin_source, gpio_af);
        
	END ELEMENT

END TEST -- TEST 11
	
TEST 12
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT [hdulibstm32f4xxgpio-GpioPinAFConfig-CB-LLR-001]
    COMMENT 1.The function 'GpioPinAFConfig' change the mapping of specified pin gpio_pinsource to the
    COMMENT   alternate function in gpio_af by configuring the AFR register in gpio_x.
    COMMENT 2.gpio_pinsource is tested for value GPIO_PINSOURCE11.
    COMMENT 3.gpio_af is tested for value 0xB. 
    COMMENT Equivalence Class 19
	COMMENT
    COMMENT </TD>

	
	ELEMENT

        COMMENT INPUT SECTION:

            --Specifies the pin for the Alternate function
            VAR gpio_pin_source,     			init = GPIO_PINSOURCE11,         	ev = init   
            
            --Selects the pin to be used as Alternate function
            VAR gpio_af,             			init = 0xB,            				ev = init

        COMMENT INPUT/OUTPUT SECTION:

            --Holds GPIO alternate function registers content
            ARRAY gpio_x.AFR,      				init = { others =>0x0 } ,         	ev = {1 => 0xB000, others =>0x000 }

        COMMENT OUTPUT SECTION:
                        
            --None
            
        --Stub Calls :
        SIMUL

            --No Stubs

        END SIMUL

        --Calling the Unit Under Test :
        #GpioPinAFConfig(&gpio_x, gpio_pin_source, gpio_af);
        
	END ELEMENT

END TEST -- TEST 12
	
TEST 13
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT [hdulibstm32f4xxgpio-GpioPinAFConfig-CB-LLR-001]
    COMMENT 1.The function 'GpioPinAFConfig' change the mapping of specified pin gpio_pinsource to the
    COMMENT   alternate function in gpio_af by configuring the AFR register in gpio_x.
    COMMENT 2.gpio_pinsource is tested for value GPIO_PINSOURCE12.
    COMMENT 3.gpio_af is tested for value 0xC.
    COMMENT Equivalence Class 19
	COMMENT
    COMMENT </TD>
	
	ELEMENT

        COMMENT INPUT SECTION:

            --Specifies the pin for the Alternate function
            VAR gpio_pin_source,     			init = GPIO_PINSOURCE12,         	ev = init   
            
            --Selects the pin to be used as Alternate function
            VAR gpio_af,             			init = 0xC,            				ev = init

        COMMENT INPUT/OUTPUT SECTION:

            --Holds GPIO alternate function registers content
            ARRAY gpio_x.AFR,      				init = { others =>0x0 } ,         	ev = {0 => 0x0, others =>0xC0000 }

        COMMENT OUTPUT SECTION:
                        
            --None
            
        --Stub Calls :
        SIMUL

            --No Stubs

        END SIMUL

        --Calling the Unit Under Test :
        #GpioPinAFConfig(&gpio_x, gpio_pin_source, gpio_af);
        
	END ELEMENT

END TEST -- TEST 13
	
TEST 14
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT [hdulibstm32f4xxgpio-GpioPinAFConfig-CB-LLR-001]
    COMMENT 1.The function 'GpioPinAFConfig' change the mapping of specified pin gpio_pinsource to the
    COMMENT   alternate function in gpio_af by configuring the AFR register in gpio_x.
    COMMENT 2.gpio_pinsource is tested for value 0xD.
    COMMENT 3.gpio_af is tested for value GPIO_AF_FSMC.
    COMMENT Equivalence Class 19
	COMMENT
    COMMENT </TD>

	ELEMENT

        COMMENT INPUT SECTION:

            --Specifies the pin for the Alternate function
            VAR gpio_pin_source,     		init = GPIO_PINSOURCE13,         	ev = init   
            
            --Selects the pin to be used as Alternate function
            VAR gpio_af,             		init = 0xD,            				ev = init

        COMMENT INPUT/OUTPUT SECTION:

            --Holds GPIO alternate function registers content
            ARRAY gpio_x.AFR,      			init = { others =>0x0 } ,         	ev = {1 => 0xD00000, others =>0x000 }

        COMMENT OUTPUT SECTION:
                        
            --None
            
        --Stub Calls :
        SIMUL

            --No Stubs

        END SIMUL

        --Calling the Unit Under Test :
        #GpioPinAFConfig(&gpio_x, gpio_pin_source, gpio_af);
        
	END ELEMENT

END TEST -- TEST 14
	
TEST 15
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT [hdulibstm32f4xxgpio-GpioPinAFConfig-CB-LLR-001]
    COMMENT 1.The function 'GpioPinAFConfig' change the mapping of specified pin gpio_pinsource to the
    COMMENT alternate function in gpio_af by configuring the AFR register in gpio_x.
    COMMENT 2.gpio_pinsource is tested for value GPIO_PINSOURCE14.
    COMMENT 3.gpio_af is tested for value 0xE.
    COMMENT Equivalence Class 19
	COMMENT
    COMMENT </TD>
	
	ELEMENT

        COMMENT INPUT SECTION:

            --Specifies the pin for the Alternate function
            VAR gpio_pin_source,     			init = GPIO_PINSOURCE14,         	ev = init   
            
            --Selects the pin to be used as Alternate function
            VAR gpio_af,             			init = GPIO_AF_FSMC,            	ev = init

        COMMENT INPUT/OUTPUT SECTION:

            --Holds GPIO alternate function registers content
            ARRAY gpio_x.AFR,      				init = { others =>0x0 } ,         	ev = {0 => 0x0, others =>0xC000000 }

        COMMENT OUTPUT SECTION:
                        
            --None
            
        --Stub Calls :
        SIMUL

            --No Stubs

        END SIMUL

        --Calling the Unit Under Test :
        #GpioPinAFConfig(&gpio_x, gpio_pin_source, gpio_af);
        
	END ELEMENT

END TEST -- TEST 15
	
TEST 16
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT [hdulibstm32f4xxgpio-GpioPinAFConfig-CB-LLR-001]
    COMMENT 1.The function 'GpioPinAFConfig' change the mapping of specified pin gpio_pinsource to the
    COMMENT   alternate function in gpio_af by configuring the AFR register in gpio_x.
    COMMENT 2.gpio_pinsource is tested for value GPIO_PINSOURCE15.
    COMMENT 3.gpio_af is tested for value 0xF.
    COMMENT Equivalence Class 19
	COMMENT
    COMMENT </TD>
	
	ELEMENT

        COMMENT INPUT SECTION:

            --Specifies the pin for the Alternate function
            VAR gpio_pin_source,     			init = GPIO_PINSOURCE15,        ev = init   
            
            --Selects the pin to be used as Alternate function
            VAR gpio_af,             			init = 0xF,            			ev = init

        COMMENT INPUT/OUTPUT SECTION:

            --Holds GPIO alternate function registers content
            ARRAY gpio_x.AFR,      				init = { others =>0x0 } ,       ev = {1 =>0xF0000000 , others =>0x0000 }

        COMMENT OUTPUT SECTION:
                        
            --None
            
        --Stub Calls :
        SIMUL

            --No Stubs

        END SIMUL

        --Calling the Unit Under Test :
        #GpioPinAFConfig(&gpio_x, gpio_pin_source, gpio_af);
        
	END ELEMENT

END TEST -- TEST 16

--TEST 17
--FAMILY robustness
--
--    COMMENT Test Description
--    COMMENT <TD>   
--    COMMENT [hdulibstm32f4xxgpio-GpioPinAFConfig-CB-LLR-001]
--    COMMENT Since 'gpio_x' is passed as NULL, it shows abnormal behaviour and hence it is commented.
--    COMMENT Equivalence Class 15
--    COMMENT  </TD>
--
--    ELEMENT
--    
--        COMMENT INPUT SECTION:
--
--            --None
--
--        COMMENT OUTPUT SECTION:
--
--            --None
--
--        COMMENT INPUT/OUTPUT SECTION:
--
--            --None
--            
--        --Stub Calls :
--        SIMUL
--
--            --No Stubs
--
--        END SIMUL
--
--        --Calling the Unit Under Test :
--        #GpioPinAFConfig(NULL,gpio_pinsource,gpio_af);
--
--    END ELEMENT
--   
--END TEST -- TEST 17

END SERVICE -- GpioPinAFConfig

