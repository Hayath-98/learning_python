HEADER hdudispflookup, Source Code Ver : 1.4, TestScript Ver : 1.3
--------------------------------------------------------------------------------
-- Author Name         : Chaitra T N
--
-- File Name           : hdudispflookup.ptu
--
-- Test Creation Date  : 30.10.2017
--
-- Tested Functions    : LookupTableLookup
--
-- Version History     :
--
-- TEST-VERSION         TEST-DATE               TESTER NAME        MODIFICATIONS
-- ------------         ---------               -----------        -------------
--      1.1             30.10.2017              Chaitra T N        Created the ptu file
--      1.2             10.11.2017              Chaitra T N        Updated as per #PR100171
--      1.3             14.11.2017              Chaitra T N        Updated as per #PR100171
--------------------------------------------------------------------------------
--
-- TESTED FILE INCLUDE DIRECTIVES 
--
--------------------------------------------------------------------------------

#/*============================================================================*/
#/* Module specific includes                                                   */
#/*============================================================================*/

##include "hdudispflookup.h"   
##include "hdulibbasictypes.h" 

--------------------------------------------------------------------------------
--
-- TESTED FILE DECLARATIONS 
--
--------------------------------------------------------------------------------

-- Declarations of the global variables of the tested file

    -- None

-- Declarations of the temporary variables of the tested file

    -- None

--------------------------------------------------------------------------------


BEGIN

    COMMENT Author Name      : Chaitra T N
    COMMENT
    COMMENT File Name        : hdudispflookup.ptu
    COMMENT
    COMMENT Tested Functions : LookupTableLookup
    COMMENT
    COMMENT Assumptions and Constraints
    COMMENT <AC>
    COMMENT
    COMMENT Assumption(s):
    COMMENT None
    COMMENT
    COMMENT Constraint(s):
    COMMENT None
    COMMENT </AC>

	COMMENT Equivalence Class Description
    COMMENT <ECD>
    COMMENT
	COMMENT Valid Class(es)
	COMMENT
	COMMENT Class 1
	COMMENT In function 'LookupTableLookup', lookup table is empty 
	COMMENT
	COMMENT Class 2
	COMMENT In function 'LookupTableLookup', lookup table is not empty 
	COMMENT
	COMMENT Class 3
	COMMENT In function 'LookupTableLookup', lookup status is empty.
	COMMENT
	COMMENT Class 4
	COMMENT In function 'LookupTableLookup', lookup status is not empty.
	COMMENT
	COMMENT Class 5
	COMMENT In function 'LookupTableLookup', First value in the ADC table is lesser than last value in the ADC table
	COMMENT
	COMMENT Class 6
	COMMENT In function 'LookupTableLookup', First value in the ADC table is greater than last value in the ADC table
	COMMENT
	COMMENT Class 7
	COMMENT In function 'LookupTableLookup', First value in the ADC table is equal to last value in the ADC table
	COMMENT
	COMMENT Class 8
	COMMENT In function 'LookupTableLookup', ind_var is lesser than the lowest ADC value in the ADC table
	COMMENT
	COMMENT Class 9
	COMMENT In function 'LookupTableLookup', ind_var is greater than the lowest ADC value in the ADC table
	COMMENT
	COMMENT Class 10
	COMMENT In function 'LookupTableLookup', ind_var is equal to the lowest ADC value in the ADC table
	COMMENT
	COMMENT Class 11
	COMMENT In function 'LookupTableLookup', Highest ADC value in the ADC table is lesser than ind_var
	COMMENT
	COMMENT Class 12
	COMMENT In function 'LookupTableLookup', Highest ADC value in the ADC table is greater than ind_var
	COMMENT
	COMMENT Class 13
	COMMENT In function 'LookupTableLookup', Highest ADC value in the ADC table is equal to ind_var
	COMMENT
	COMMENT Class 14
	COMMENT In function 'LookupTableLookup', result is lesser than zero
	COMMENT
	COMMENT Class 15
	COMMENT In function 'LookupTableLookup', result is greater than zero
	COMMENT
	COMMENT Class 16
	COMMENT In function 'LookupTableLookup', result is equal to zero 
	COMMENT 
	COMMENT Class 17
	COMMENT In function 'LookupTableLookup',  negation flag is TRUE.
	COMMENT 
	COMMENT Class 18
	COMMENT In function 'LookupTableLookup',  negation flag is FALSE.
    COMMENT
    COMMENT Invalid Class(es)
	COMMENT Class 19
	COMMENT In function 'LookupTableLookup', function parameter table is passed invalid reference
    COMMENT </ECD>
    
--------------------------------------------------------------------------------
--
-- STUB DECLARATIONS OF THE TESTED OR INTEGRATED UNITS
--
--------------------------------------------------------------------------------

SIMUL

    DEFINE STUB hdudispflookup_c

        -- No stubs

    END DEFINE

ELSE_SIMUL

    -- No action defined as of now if the module is not simulated

END SIMUL    

--------------------------------------------------------------------------------
--
-- ENVIRONMENTS DECLARATIONS
--
--------------------------------------------------------------------------------

--IF HOST

-- No special things that have to be done on the host to run the test.

--ELSE

-- No action defined for the target execution as of now

--END IF 

--------------------------------------------------------------------------------
-- TESTED FILE ENVIRONMENT
--------------------------------------------------------------------------------

-- Environment of the file hdudispflookup_c

--ENVIRONMENT ENV_hdudispflookup_c

    -- None

--END ENVIRONMENT -- ENV_hdudispflookup_c

--USE ENV_hdudispflookup_c

--------------------------------------------------------------------------------
--
-- SERVICES DECLARATIONS
--
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
-- Declaration of the service LookupTableLookup
--------------------------------------------------------------------------------

SERVICE LookupTableLookup
SERVICE_TYPE extern

	-- Tested service parameters declarations
	#T_LOOKUP_TABLE table;
	#T_INT32 ind_var;
	#T_PARAM_STAT stat;

	-- By function returned type declaration
	#T_INT32 ret_LookupTableLookup;

	--Variables declared to pass valid address to members of structure
	#T_INT32  PTU_x[6];
	#T_INT32  PTU_y[6];
	
	ENVIRONMENT ENV_LookupTableLookup

		VAR ind_var,				init = 0,							ev = init
		VAR ret_LookupTableLookup,	init = 0,							ev = init
		
	END ENVIRONMENT -- ENV_LookupTableLookup

	USE ENV_LookupTableLookup

--TEST 1
--FAMILY robustness
--
--	COMMENT Test Description
--	COMMENT <TD> 
--	COMMENT [hdudispflookup-LookupTableLookup-DB-LLR-001]
--	COMMENT This test case is written to pass invalid reference to parameter table
--	COMMENT Equivalence Class 19
--  COMMENT </TD>
--
--	ELEMENT
--
--		COMMENT INPUT SECTION:
--
--			--Value to be searched in Lookup table
--			VAR ind_var,							init = 1,										ev = init
--
--		COMMENT INPUT/OUTPUT SECTION:
--
--			--None
--
--		COMMENT OUTPUT SECTION:
--
--			--None
--
--		-- Stub Calls :
--		SIMUL
--
--			--No Stubs
--
--		END SIMUL
--
--		--Calling unit under test
--		#ret_LookupTableLookup = LookupTableLookup(NULL, ind_var, &stat);
--
--	END ELEMENT
--
--END TEST -- TEST 1

TEST 2
FAMILY nominal

	COMMENT Test Description
	COMMENT <TD> 
	COMMENT [hdudispflookup-LookupTableLookup-DB-LLR-001]
	COMMENT The function 'LookupTableLookup' returns ZERO when lookup status is empty
	COMMENT This test case is written to pass invalid reference to parameter stat 
	COMMENT Tested for MCDC FFT
	COMMENT Equivalence Class 3
	COMMENT </TD>

	ELEMENT

		COMMENT INPUT SECTION:

			--Value to be searched in Lookup table
			VAR ind_var,							init = 1,										ev = init

			--Pointer to look up table
			STRUCTURE table,						init = { x => &PTU_x[0], y => &PTU_y[0] },		ev = init

		COMMENT INPUT/OUTPUT SECTION:

			--None

		COMMENT OUTPUT SECTION:

			--Holds the return value of 'LookupTableLookup'
			VAR ret_LookupTableLookup,				init = ONE,										ev = ZERO

		-- Stub Calls :
		SIMUL

			--No Stubs

		END SIMUL

		--Calling unit under test
		#ret_LookupTableLookup = LookupTableLookup(&table, ind_var, NULL);

	END ELEMENT

END TEST -- TEST 2

TEST 3
FAMILY nominal

	COMMENT Test Description
	COMMENT <TD> 
	COMMENT [hdudispflookup-LookupTableLookup-DB-LLR-001]
	COMMENT The function 'LookupTableLookup' returns ZERO when lookup table is empty
	COMMENT This test case is written to test for MCDC FTX
	COMMENT Equivalence Class 1
	COMMENT </TD>

	ELEMENT

		COMMENT INPUT SECTION:

			--Value to be searched in Lookup table
			VAR ind_var,							init = 2,										ev = init
			
			--Pointer to look up table
			STRUCTURE table,						init = { x => &PTU_x[0], y => NULL },			ev = init

			--Status parameter for lookup table
			VAR stat,								init = PARAM_BAD,								ev = init

		COMMENT INPUT/OUTPUT SECTION:

			--None

		COMMENT OUTPUT SECTION:

			--Holds the return value of 'LookupTableLookup'
			VAR ret_LookupTableLookup,				init = ONE,										ev = ZERO

		-- Stub Calls :
		SIMUL

			--No Stubs

		END SIMUL

		--Calling unit under test
		#ret_LookupTableLookup = LookupTableLookup(&table, ind_var, &stat);

	END ELEMENT

END TEST -- TEST 3

TEST 4
FAMILY nominal

	COMMENT Test Description
	COMMENT <TD> 
	COMMENT [hdudispflookup-LookupTableLookup-DB-LLR-001]
	COMMENT The function 'LookupTableLookup' returns ZERO when lookup table is empty
	COMMENT This test case is written to test for MCDC TXX
	COMMENT Equivalence Class 1
	COMMENT </TD>

	ELEMENT

		COMMENT INPUT SECTION:

			--Value to be searched in Lookup table
			VAR ind_var,							init = 2,										ev = init
			
			--Pointer to look up table
			STRUCTURE table,						init = { x => NULL, y => &PTU_y[0] },			ev = init

		COMMENT INPUT/OUTPUT SECTION:

			--None

		COMMENT OUTPUT SECTION:

			--Holds the return value of 'LookupTableLookup'
			VAR ret_LookupTableLookup,				init = ONE,										ev = ZERO

		-- Stub Calls :
		SIMUL

			--No Stubs

		END SIMUL

		--Calling unit under test
		#ret_LookupTableLookup = LookupTableLookup(&table, ind_var, &stat);

	END ELEMENT

END TEST -- TEST 4

TEST 5
FAMILY nominal

	COMMENT Test Description
	COMMENT <TD> 
	COMMENT [hdudispflookup-LookupTableLookup-DB-LLR-001]
	COMMENT The function 'LookupTableLookup' does nothing when lookup table is not empty and lookup status 
	COMMENT is not empty
	COMMENT This test case is written to test for MCDC FFF
	COMMENT Equivalence Class 2,4
	COMMENT 
	COMMENT [hdudispflookup-LookupTableLookup-DB-LLR-002]
	COMMENT The function 'LookupTableLookup' returns the lowest Sensor unit value from the sensor table and set 
	COMMENT the stat to RANGE_ERROR when 
	COMMENT a. First value in the ADC table is lesser than last value in the ADC table(55<85)
	COMMENT b. the lowest ADC value in the ADC table is greater than Actual ADC reading for the sensor (ind_var ) (55>29)
	COMMENT Equivalence Class 5,8
	COMMENT </TD>

	ELEMENT

		COMMENT INPUT SECTION:

			--Value to be searched in Lookup table
			VAR ind_var,							init = 29,										ev = init
			
			--Pointer to look up table
			STRUCTURE table,						init = { x => PTU_x, y => PTU_y },		ev = init
			
			--Holds the value of Sensor table(table.x)
			ARRAY PTU_x,							init = {0 => 5, 1 => 55, 2 => 65, 3 => 72, 
			&												4 => 73, 5 => 85},						ev = init

			--Holds the value of Sensor table(table.y)
			ARRAY PTU_y,							init = {0 => 5, 1 => -32768, 2 => -10000,
			&												3 => 100, 4 => 2500,5 => 3000},			ev = init
			
		COMMENT INPUT/OUTPUT SECTION:

			--Status parameter for lookup table
			VAR stat,								init = PARAM_BAD,								ev = RANGE_ERROR

		COMMENT OUTPUT SECTION:

			--Holds the return value of 'LookupTableLookup'
			VAR ret_LookupTableLookup,				init = 1,										ev = -32768

		-- Stub Calls :
		SIMUL

			--No Stubs

		END SIMUL

		--Calling unit under test
		#ret_LookupTableLookup = LookupTableLookup(&table, ind_var, &stat);

	END ELEMENT

END TEST -- TEST 5

TEST 6
FAMILY nominal

	COMMENT Test Description
	COMMENT <TD> 
	COMMENT [hdudispflookup-LookupTableLookup-DB-LLR-002]
	COMMENT The function 'LookupTableLookup' returns the lowest Sensor unit value from the sensor table and set the 
	COMMENT stat to RANGE_ERROR when 
	COMMENT a. First value in the ADC table is lesser than last value in the ADC table(91<95)
	COMMENT b. the lowest ADC value in the ADC table is equal to Actual ADC reading for the sensor (ind_var ) (91=91)
	COMMENT Equivalence Class 10
	COMMENT </TD>

	ELEMENT

		COMMENT INPUT SECTION:

			--Value to be searched in Lookup table
			VAR ind_var,							init = 91,										ev = init
			
			--Pointer to look up table
			STRUCTURE table,						init = { x => &PTU_x[0], y => &PTU_y[0]  },		ev = init
			
			--Holds the value of Sensor table(table.x)
			ARRAY PTU_x,							init = {0 => 5, 1 => 91, 2 => 92, 3 => 93, 
			&												4 => 94,5 => 95},						ev = init

			--Holds the value of Sensor table(table.y)
			ARRAY PTU_y,							init = {0 => 5, 1 => 171, 2 => 172, 3 => 173,
			&                                               4 => 174, 5 => 175},					ev = init

		COMMENT INPUT/OUTPUT SECTION:

			--Status parameter for lookup table
			VAR stat,								init = PARAM_BAD,								ev = RANGE_ERROR

		COMMENT OUTPUT SECTION:

			--Holds the return value of 'LookupTableLookup'
			VAR ret_LookupTableLookup,				init = 1,										ev = 171

		-- Stub Calls :
		SIMUL

			--No Stubs

		END SIMUL

		--Calling unit under test
		#ret_LookupTableLookup = LookupTableLookup(&table, ind_var, &stat);

	END ELEMENT

END TEST -- TEST 6

TEST 7
FAMILY nominal

	COMMENT Test Description
	COMMENT <TD> 
	COMMENT [hdudispflookup-LookupTableLookup-DB-LLR-002]
	COMMENT The function 'LookupTableLookup' does nothing when 
	COMMENT a. First value in the ADC table is lesser than the last value in the ADC table(89<93)
	COMMENT b. the lowest ADC value in the ADC table is lesser than Actual ADC reading for the sensor (ind_var ) (89<92)
	COMMENT Equivalence Class 9
	COMMENT </TD>

	ELEMENT

		COMMENT INPUT SECTION:

			--Value to be searched in Lookup table
			VAR ind_var,							init = 92,										ev = init
			
			--Pointer to look up table.x
			VAR table.x,							init = PTU_x,									ev = init

			--Pointer to look up table.y
			VAR table.y,							init = PTU_y,									ev = init
			
			--Holds the value of Sensor table(table.x)
			ARRAY PTU_x,							init = {0 => 5, 1 => 89, 2 => 90, 3 => 91,
			&                                               4 => 92, 5 => 93},						ev = init

			--Holds the value of Sensor table(table.y)
			ARRAY PTU_y,							init = {0 => 5, 1 => 171, 2 => 172, 3 => 173,
			&                                               4 => 174, 5 => 175},					ev = init

			--Status parameter for lookup table
			VAR stat,								init = PARAM_BAD,								ev = init

		COMMENT INPUT/OUTPUT SECTION:

			--None

		COMMENT OUTPUT SECTION:

			--Holds the return value of 'LookupTableLookup'
			VAR ret_LookupTableLookup,				init = 1,										ev = 174

		-- Stub Calls :
		SIMUL

			--No Stubs

		END SIMUL

		--Calling unit under test
		#ret_LookupTableLookup = LookupTableLookup(&table, ind_var, &stat);

	END ELEMENT

END TEST -- TEST 7

TEST 8
FAMILY nominal

	COMMENT Test Description
	COMMENT <TD> 
	COMMENT [hdudispflookup-LookupTableLookup-DB-LLR-003]
	COMMENT The function 'LookupTableLookup' returns Highest Sensor unit value from the sensor table  when 
	COMMENT a. First value in the ADC table is lesser than the last value in the ADC table(89<93)
	COMMENT b. the Highest ADC value in the ADC table is lesser than Actual ADC reading for the sensor (ind_var ) (93<100)
	COMMENT Equivalence Class 11
	COMMENT </TD>

	ELEMENT

		COMMENT INPUT SECTION:

			--Value to be searched in Lookup table
			VAR ind_var,							init = 100,										ev = init
			
			--Pointer to look up table.x
			VAR table.x,							init = &PTU_x[0],								ev = init

			--Pointer to look up table.y
			VAR table.y,							init = &PTU_y[0],								ev = init
			
			--Holds the value of Sensor table(table.x)
			ARRAY PTU_x,							init = {0 => 5, 1 => 89, 2 => 90, 3 => 91,
			&                                               4 => 92, 5 => 93},						ev = init

			--Holds the value of Sensor table(table.y)
			ARRAY PTU_y,							init = {0 => 5, 1 => 171, 2 => 172, 3 => 173,
			&                                               4 => 174, 5 => 175},					ev = init

		COMMENT INPUT/OUTPUT SECTION:

			--Status parameter for lookup table
			VAR stat,								init = PARAM_BAD,								ev = RANGE_ERROR

		COMMENT OUTPUT SECTION:

			--Holds the return value of 'LookupTableLookup'
			VAR ret_LookupTableLookup,				init = 1,										ev = 175

		-- Stub Calls :
		SIMUL

			--No Stubs

		END SIMUL

		--Calling unit under test
		#ret_LookupTableLookup = LookupTableLookup(&table, ind_var, &stat);

	END ELEMENT

END TEST -- TEST 8

TEST 9
FAMILY nominal

	COMMENT Test Description
	COMMENT <TD> 
	COMMENT [hdudispflookup-LookupTableLookup-DB-LLR-003]
	COMMENT The function 'LookupTableLookup' returns Highest Sensor unit value from the sensor table  when 
	COMMENT a. First value in the ADC table is lesser than the last value in the ADC table(89<100)
	COMMENT b. the Highest ADC value in the ADC table is equal to Actual ADC reading for the sensor (ind_var ) (100=100)
	COMMENT Equivalence Class 13
	COMMENT </TD>

	ELEMENT

		COMMENT INPUT SECTION:

			--Value to be searched in Lookup table
			VAR ind_var,							init = 100,										ev = init
			
			--Pointer to look up table.x
			VAR table.x,							init = &PTU_x[0],								ev = init

			--Pointer to look up table.y
			VAR table.y,							init = &PTU_y[0],								ev = init
			
			--Holds the value of Sensor table(table.x)
			ARRAY PTU_x,							init = {0 => 5, 1 => 89, 2 => 90, 3 => 91,
			&                                               4 => 92, 5 => 100},						ev = init

			--Holds the value of Sensor table(table.y)
			ARRAY PTU_y,							init = {0 => 5, 1 => 171, 2 => 172, 3 => 173,
			&                                               4 => 174, 5 => 175},					ev = init

		COMMENT INPUT/OUTPUT SECTION:

			--Status parameter for lookup table
			VAR stat,								init = PARAM_BAD,								ev = RANGE_ERROR

		COMMENT OUTPUT SECTION:

			--Holds the return value of 'LookupTableLookup'
			VAR ret_LookupTableLookup,				init = 1,										ev = 175

		-- Stub Calls :
		SIMUL

			--No Stubs

		END SIMUL

		--Calling unit under test
		#ret_LookupTableLookup = LookupTableLookup(&table, ind_var, &stat);

	END ELEMENT

END TEST -- TEST 9

TEST 10
FAMILY nominal

	COMMENT Test Description
	COMMENT <TD> 
	COMMENT [hdudispflookup-LookupTableLookup-DB-LLR-003]
	COMMENT The function 'LookupTableLookup' does nothing when 
	COMMENT a. First value in the ADC table is lesser than the last value in the ADC table(89<120)
	COMMENT b. the Highest ADC value in the ADC table is greater than Actual ADC reading for the sensor (ind_var ) (120>93)
	COMMENT Equivalence Class 12
	COMMENT
	COMMENT [hdudispflookup-LookupTableLookup-DB-LLR-004]
	COMMENT The function 'LookupTableLookup' searches for  the range of the Actual ADC reading in the 
	COMMENT ADC table and Sensor unit value table when:
	COMMENT a. First value in the ADC table lesser than the last value in the ADC table 
	COMMENT b. ADC reading for the sensor is not less than lowest ADC value and not greater than highest ADC value
	COMMENT    and not equal to the highest ADC value
	COMMENT MCDC covered FX when while loop loops for 1st time.
	COMMENT MCDC covered TT when while loop loops for 2nd and 3rd time.
	COMMENT While loop loops for 2 or more times
	COMMENT Equivalence Class 9,12
	COMMENT </TD>

	ELEMENT

		COMMENT INPUT SECTION:

			--Value to be searched in Lookup table
			VAR ind_var,							init = 93,										ev = init
			
			--Pointer to look up table.x
			VAR table.x,							init = &PTU_x[0],								ev = init

			--Pointer to look up table.y
			VAR table.y,							init = &PTU_y[0],								ev = init
			
			--Holds the value of Sensor table(table.x)
			ARRAY PTU_x,							init = {0 => 5, 1 => 89, 2 => 90, 3 => 91,
			&                                               4 => 92, 5 => 120},						ev = init

			--Holds the value of Sensor table(table.y)
			ARRAY PTU_y,							init = {0 => 5, 1 => 171, 2 => 172, 3 => 173,
			&                                               4 => 174, 5 => 175},					ev = init

			--Status parameter for lookup table
			VAR stat,								init = PARAM_BAD,								ev = init

		COMMENT INPUT/OUTPUT SECTION:

			--None

		COMMENT OUTPUT SECTION:

			--Holds the return value of 'LookupTableLookup'
			VAR ret_LookupTableLookup,				init = 1,										ev = 174

		-- Stub Calls :
		SIMUL

			--No Stubs

		END SIMUL

		--Calling unit under test
		#ret_LookupTableLookup = LookupTableLookup(&table, ind_var, &stat);

	END ELEMENT

END TEST -- TEST 10

--Element array decreasing
TEST 11
FAMILY nominal

	COMMENT Test Description
	COMMENT <TD> 
	COMMENT [hdudispflookup-LookupTableLookup-DB-LLR-005]
	COMMENT The function 'LookupTableLookup' return the Highest  Sensor unit value from the sensor table when 
	COMMENT a. First value in the ADC table is greater than last value in the ADC table(95>91)
	COMMENT b. the lowest ADC value in the ADC table is lesser than the Actual ADC reading for the sensor (ind_var ) (95<96)
	COMMENT Equivalence Class 6,9
	COMMENT </TD>

	ELEMENT

		COMMENT INPUT SECTION:

			--Value to be searched in Lookup table
			VAR ind_var,							init = 96,										ev = init
			
			--Pointer to look up table
			STRUCTURE table,						init = { x => &PTU_x[0], y => &PTU_y[0]  },		ev = init
			
			--Holds the value of Sensor table(table.x)
			ARRAY PTU_x,							init = {0 => 5, 1 => 95, 2 => 94, 3 => 93, 
			&												4 => 92,5 => 91},						ev = init

			--Holds the value of Sensor table(table.y)
			ARRAY PTU_y,							init = {0 => 5, 1 => 175, 2 => 174, 3 => 173,
			&                                               4 => 172, 5 => 171},					ev = init

			--Status parameter for lookup table
			VAR stat,								init = PARAM_BAD,								ev = init

		COMMENT INPUT/OUTPUT SECTION:

			--None

		COMMENT OUTPUT SECTION:

			--Holds the return value of 'LookupTableLookup'
			VAR ret_LookupTableLookup,				init = 1,										ev = 175

		-- Stub Calls :
		SIMUL

			--No Stubs

		END SIMUL

		--Calling unit under test
		#ret_LookupTableLookup = LookupTableLookup(&table, ind_var, &stat);

	END ELEMENT

END TEST -- TEST 11

TEST 12
FAMILY nominal

	COMMENT Test Description
	COMMENT <TD> 
	COMMENT [hdudispflookup-LookupTableLookup-DB-LLR-005]
	COMMENT The function 'LookupTableLookup' return the Highest  Sensor unit value from the sensor table when 
	COMMENT a. First value in the ADC table is greater than last value in the ADC table(96>91)
	COMMENT b. the lowest ADC value in the ADC table is equal to the Actual ADC reading for the sensor (ind_var ) (96=96)
	COMMENT Equivalence Class 10
	COMMENT </TD>

	ELEMENT

		COMMENT INPUT SECTION:

			--Value to be searched in Lookup table
			VAR ind_var,							init = 96,										ev = init
			
			--Pointer to look up table
			STRUCTURE table,						init = { x => &PTU_x[0], y => &PTU_y[0]  },		ev = init
			
			--Holds the value of Sensor table(table.x)
			ARRAY PTU_x,							init = {0 => 5, 1 => 96, 2 => 94, 3 => 93, 
			&												4 => 92,5 => 91},						ev = init

			--Holds the value of Sensor table(table.y)
			ARRAY PTU_y,							init = {0 => 5, 1 => 177, 2 => 174, 3 => 173,
			&                                               4 => 172, 5 => 171},					ev = init

			--Status parameter for lookup table
			VAR stat,								init = PARAM_BAD,								ev = init

		COMMENT INPUT/OUTPUT SECTION:

			--None

		COMMENT OUTPUT SECTION:

			--Holds the return value of 'LookupTableLookup'
			VAR ret_LookupTableLookup,				init = 1,										ev = 177

		-- Stub Calls :
		SIMUL

			--No Stubs

		END SIMUL

		--Calling unit under test
		#ret_LookupTableLookup = LookupTableLookup(&table, ind_var, &stat);

	END ELEMENT

END TEST -- TEST 12

TEST 13
FAMILY nominal

	COMMENT Test Description
	COMMENT <TD> 
	COMMENT [hdudispflookup-LookupTableLookup-DB-LLR-005]
	COMMENT The function 'LookupTableLookup' does nothing when 
	COMMENT a. First value in the ADC table is greater than last value in the ADC table(95>91)
	COMMENT b. the lowest ADC value in the ADC table is greater than Actual ADC reading for the sensor (ind_var ) (96>80)
	COMMENT Equivalence Class 8
	COMMENT
	COMMENT [hdudispflookup-LookupTableLookup-DB-LLR-006]
	COMMENT The function 'LookupTableLookup' returns the lowest Sensor unit value from the sensor table when:
	COMMENT a.First value in the ADC table greater than the last value in the ADC table
	COMMENT b.The highest ADC value in the ADC table is greater than Actual ADC reading for the sensor(ind_var)
	COMMENT Equivalence Class 12
	COMMENT </TD>

	ELEMENT

		COMMENT INPUT SECTION:

			--Value to be searched in Lookup table
			VAR ind_var,							init = 80,										ev = init
			
			--Pointer to look up table
			STRUCTURE table,						init = { x => &PTU_x[0], y => &PTU_y[0]  },		ev = init
			
			--Holds the value of Sensor table(table.x)
			ARRAY PTU_x,							init = {0 => 5, 1 => 96, 2 => 94, 3 => 93, 
			&												4 => 92,5 => 91},						ev = init

			--Holds the value of Sensor table(table.y)
			ARRAY PTU_y,							init = {0 => 5, 1 => 177, 2 => 174, 3 => 173,
			&                                               4 => 172, 5 => 171},					ev = init

			--Status parameter for lookup table
			VAR stat,								init = PARAM_BAD,								ev = init

		COMMENT INPUT/OUTPUT SECTION:

			--None

		COMMENT OUTPUT SECTION:

			--Holds the return value of 'LookupTableLookup'
			VAR ret_LookupTableLookup,				init = 1,										ev = 171

		-- Stub Calls :
		SIMUL

			--No Stubs

		END SIMUL

		--Calling unit under test
		#ret_LookupTableLookup = LookupTableLookup(&table, ind_var, &stat);

	END ELEMENT

END TEST -- TEST 13

TEST 14
FAMILY nominal

	COMMENT Test Description
	COMMENT <TD> 
	COMMENT [hdudispflookup-LookupTableLookup-DB-LLR-006]
	COMMENT The function 'LookupTableLookup' returns the lowest Sensor unit value from the sensor table when:
	COMMENT a.First value in the ADC table greater than the last value in the ADC table
	COMMENT b.The highest ADC value in the ADC table is equal to  Actual ADC reading for the sensor(ind_var)
	COMMENT Equivalence Class 6,13
	COMMENT </TD>

	ELEMENT

		COMMENT INPUT SECTION:

			--Value to be searched in Lookup table
			VAR ind_var,							init = 90,										ev = init
			
			--Pointer to look up table
			STRUCTURE table,						init = { x => &PTU_x[0], y => &PTU_y[0]  },		ev = init
			
			--Holds the value of Sensor table(table.x)
			ARRAY PTU_x,							init = {0 => 5, 1 => 97, 2 => 94, 3 => 93, 
			&												4 => 92,5 => 90},						ev = init

			--Holds the value of Sensor table(table.y)
			ARRAY PTU_y,							init = {0 => 5, 1 => 177, 2 => 174, 3 => 173,
			&                                               4 => 172, 5 => 171},					ev = init

			--Status parameter for lookup table
			VAR stat,								init = PARAM_BAD,								ev = init

		COMMENT INPUT/OUTPUT SECTION:

			--None

		COMMENT OUTPUT SECTION:

			--Holds the return value of 'LookupTableLookup'
			VAR ret_LookupTableLookup,				init = 1,										ev = 171

		-- Stub Calls :
		SIMUL

			--No Stubs

		END SIMUL

		--Calling unit under test
		#ret_LookupTableLookup = LookupTableLookup(&table, ind_var, &stat);

	END ELEMENT

END TEST -- TEST 14

TEST 15
FAMILY nominal

	COMMENT Test Description
	COMMENT <TD> 
	COMMENT [hdudispflookup-LookupTableLookup-DB-LLR-006]
	COMMENT The function 'LookupTableLookup' does nothing when:
	COMMENT a.First value in the ADC table greater than the last value in the ADC table
	COMMENT b.The highest ADC value in the ADC table is lesser than Actual ADC reading for the sensor(ind_var)
	COMMENT Equivalence Class 11
	COMMENT
	COMMENT [hdudispflookup-LookupTableLookup-DB-LLR-007]
	COMMENT The function 'LookupTableLookup' searches for the range of the Actual ADC reading in the ADC table
	COMMENT and Sensor unit value table when:
	COMMENT a.First value in the ADC table greater than the last value in the ADC table
	COMMENT b.ADC reading for the sensor is not greater than lowest ADC value and not equal to lowest ADC value and not less than
	COMMENT   the highest ADC value
	COMMENT MCDC TT Covered when while loop loops for 1st time and TF covered when while loop loops for 2nd time
	COMMENT while loop loops for 2 times
	COMMENT Equivalence Class 8,11
	COMMENT
	COMMENT [hdudispflookup-LookupTableLookup-DB-LLR-008]
	COMMENT The function 'LookupTableLookup' calculates the difference between Actual ADC reading(ind_var) and
	COMMENT ADC table entry[index ] where index is location of the ADC table entry and Sensor unit table
	COMMENT (index is calculated by performing the binary search) and calculates the Difference in ADC and sensor table entries 
	COMMENT as below:
	COMMENT Difference in ADC table entry = ADC table entry[index + 1] - ADC table entry[index ]
	COMMENT Difference in Sensor unit table = Sensor table entry[index + 1] - Sensor table entry[index ]
	COMMENT Equivalence Class None
	COMMENT
	COMMENT [hdudispflookup-LookupTableLookup-DB-LLR-009]
	COMMENT The function 'LookupTableLookup'  calculates the result by multiplying the result of difference
	COMMENT between Sensor unit table with TWO and divide the calculated result with difference in ADC table entry.
	COMMENT Equivalence Class None
	COMMENT
	COMMENT [hdudispflookup-LookupTableLookup-DB-LLR-010]
	COMMENT The function 'LookupTableLookup' makes the negation flag to TRUE and make the result positive when
	COMMENT the result is lesser than zero
	COMMENT Equivalence Class 14
	COMMENT
	COMMENT [hdudispflookup-LookupTableLookup-DB-LLR-011]
	COMMENT The function 'LookupTableLookup' adds ONE to the result and then the result is divided by two
	COMMENT Equivalence Class None
	COMMENT
	COMMENT [hdudispflookup-LookupTableLookup-DB-LLR-012]
	COMMENT The function 'LookupTableLookup' makes the result negative when negation flag is TRUE.
	COMMENT Equivalence Class 17
	COMMENT
	COMMENT [hdudispflookup-LookupTableLookup-DB-LLR-013]
	COMMENT The function 'LookupTableLookup' adds Sensor table entry[index] to the result, where index is 
	COMMENT location of the ADC table entry and Sensor unit table
	COMMENT Equivalence Class None
	COMMENT
	COMMENT [hdudispflookup-LookupTableLookup-DB-LLR-014]
	COMMENT The function 'LookupTableLookup' returns the Sensor unit value for the calculated 'indices'
	COMMENT Equivalence Class None
	COMMENT </TD>

	ELEMENT

		COMMENT INPUT SECTION:

			--Value to be searched in Lookup table
			VAR ind_var,							init = 95,										ev = init
			
			--Pointer to look up table
			STRUCTURE table,						init = { x => &PTU_x[0], y => &PTU_y[0]  },		ev = init
			
			--Holds the value of Sensor table(table.x)
			ARRAY PTU_x,							init = {0 => 5, 1 => 96, 2 => 94, 3 => 93, 
			&												4 => 92,5 => 91},						ev = init

			--Holds the value of Sensor table(table.y)
			ARRAY PTU_y,							init = {0 => 5, 1 => 177, 2 => 174, 3 => 173,
			&                                               4 => 172, 5 => 171},					ev = init

			--Status parameter for lookup table
			VAR stat,								init = PARAM_BAD,								ev = init

		COMMENT INPUT/OUTPUT SECTION:

			--None

		COMMENT OUTPUT SECTION:

			--Holds the return value of 'LookupTableLookup'
			VAR ret_LookupTableLookup,				init = 1,										ev = 175

		-- Stub Calls :
		SIMUL

			--No Stubs

		END SIMUL

		--Calling unit under test
		#ret_LookupTableLookup = LookupTableLookup(&table, ind_var, &stat);

	END ELEMENT

END TEST -- TEST 15

TEST 16
FAMILY nominal

	COMMENT Test Description
	COMMENT <TD> 
	COMMENT [hdudispflookup-LookupTableLookup-DB-LLR-004]
	COMMENT The function 'LookupTableLookup' searches for the range of the Actual ADC reading in the ADC table
	COMMENT and Sensor unit value table when:
	COMMENT a. First value in the ADC table lesser than than last value in the ADC table 
	COMMENT b. ADC reading for the sensor is greater than lowest ADC value and not equal to lowest ADC value and less than
	COMMENT    the highest ADC value
	COMMENT MCDC TF Covered when while loop loops for 1st time
	COMMENT while loop loops for 2 times
	COMMENT Equivalence Class 5,9,12
	COMMENT </TD>

	ELEMENT

		COMMENT INPUT SECTION:

			--Value to be searched in Lookup table
			VAR ind_var,							init = -28672,										ev = init
			
			--Pointer to look up table
			STRUCTURE table,						init = { x => &PTU_x[0], y => &PTU_y[0]  },			ev = init
			
			--Holds the value of Sensor table(table.x)
			ARRAY PTU_x,							init = {0=>5,1=>-32768,2=>-1,3=>0,4=>1,5=>253},		ev = init

			--Holds the value of Sensor table(table.y)
			ARRAY PTU_y,							init = {0=>5,1=>-3243,2=>1000,3=>4355,4=>5443,
			&												5=>9025},    								ev = init

			--Status parameter for lookup table
			VAR stat,								init = PARAM_BAD,									ev = init

		COMMENT INPUT/OUTPUT SECTION:

			--None

		COMMENT OUTPUT SECTION:

			--Holds the return value of 'LookupTableLookup'
			VAR ret_LookupTableLookup,				init = 1,											ev = -2713

		-- Stub Calls :
		SIMUL

			--No Stubs

		END SIMUL

		--Calling unit under test
		#ret_LookupTableLookup = LookupTableLookup(&table, ind_var, &stat);

	END ELEMENT

END TEST -- TEST 16

TEST 17
FAMILY nominal

	COMMENT Test Description
	COMMENT <TD> 
	COMMENT [hdudispflookup-LookupTableLookup-DB-LLR-004]
	COMMENT The function 'LookupTableLookup' searches for the range of the Actual ADC reading in the ADC table
	COMMENT and Sensor unit value table when:
	COMMENT a. First value in the ADC table lesser than than last value in the ADC table 
	COMMENT b. ADC reading for the sensor is greater than lowest ADC value and not equal to lowest ADC value and less than
	COMMENT   the highest ADC value
	COMMENT while loop loops for 1 time
	COMMENT Equivalence Class 5,9,12
	COMMENT </TD>

	ELEMENT

		COMMENT INPUT SECTION:

			--Value to be searched in Lookup table
			VAR ind_var,							init = -1,											ev = init
			
			--Pointer to look up table
			STRUCTURE table,						init = { x => &PTU_x[0], y => &PTU_y[0]  },			ev = init
			
			--Holds the value of Sensor table(table.x)
			ARRAY PTU_x,							init = {0=>5,1=>-32768,2=>-1,3=>0,4=>1,5=>253},	ev = init

			--Holds the value of Sensor table(table.y)
			ARRAY PTU_y,							init = {0=>5,1=>-3243,2=>1000,3=>4355,4=>5443,
			&												5=>9025},    								ev = init

			--Status parameter for lookup table
			VAR stat,								init = PARAM_BAD,									ev = init

		COMMENT INPUT/OUTPUT SECTION:

			--None

		COMMENT OUTPUT SECTION:

			--Holds the return value of 'LookupTableLookup'
			VAR ret_LookupTableLookup,				init = 1,											ev = 1000

		-- Stub Calls :
		SIMUL

			--No Stubs

		END SIMUL

		--Calling unit under test
		#ret_LookupTableLookup = LookupTableLookup(&table, ind_var, &stat);

	END ELEMENT

END TEST -- TEST 17

TEST 18
FAMILY nominal

	COMMENT Test Description
	COMMENT <TD> 
	COMMENT [hdudispflookup-LookupTableLookup-DB-LLR-007]
	COMMENT The function 'LookupTableLookup' searches for the range of the Actual ADC reading in the ADC table
	COMMENT and Sensor unit value table when:
	COMMENT a.First value in the ADC table greater than the last value in the ADC table
	COMMENT b.ADC reading for the sensor is not greater than or equal to lowest ADC value and not less than
	COMMENT   the highest ADC value
	COMMENT MCDC FX Covered when while loop loops for 1st time
	COMMENT while loop loops for 2 or more times
	COMMENT Equivalence Class 8,11
	COMMENT
	COMMENT [hdudispflookup-LookupTableLookup-DB-LLR-010]
	COMMENT The function 'LookupTableLookup' does nothing when the result is equal to zero
	COMMENT Equivalence Class 16
	COMMENT
	COMMENT [hdudispflookup-LookupTableLookup-DB-LLR-012]
	COMMENT The function 'LookupTableLookup' does nothing when negation flag is FALSE.
	COMMENT Equivalence Class 18
	COMMENT </TD>

	ELEMENT

		COMMENT INPUT SECTION:

			--Value to be searched in Lookup table
			VAR ind_var,							init = -1,											ev = init
			
			--Pointer to look up table
			STRUCTURE table,						init = { x => &PTU_x[0], y => &PTU_y[0]  },			ev = init
			
			--Holds the value of Sensor table(table.x)
			ARRAY PTU_x,							init = {0=>5,1=>253,2=>1,3=>0,4=>-1,5=>-32768},	ev = init

			--Holds the value of Sensor table(table.y)
			ARRAY PTU_y,							init = {0=>5,1=>9025,2=>5443,3=>4355,4=>1000,
			&												5=>-3243},    								ev = init

			--Status parameter for lookup table
			VAR stat,								init = PARAM_BAD,									ev = init

		COMMENT INPUT/OUTPUT SECTION:

			--None

		COMMENT OUTPUT SECTION:

			--Holds the return value of 'LookupTableLookup'
			VAR ret_LookupTableLookup,				init = 1,											ev = 1000

		-- Stub Calls :
		SIMUL

			--No Stubs

		END SIMUL

		--Calling unit under test
		#ret_LookupTableLookup = LookupTableLookup(&table, ind_var, &stat);

	END ELEMENT

END TEST -- TEST 18

TEST 19
FAMILY nominal

	COMMENT Test Description
	COMMENT <TD> 
	COMMENT [hdudispflookup-LookupTableLookup-DB-LLR-007]
	COMMENT The function 'LookupTableLookup' searches for the range of the Actual ADC reading in the ADC table
	COMMENT and Sensor unit value table when:
	COMMENT a.First value in the ADC table greater than the last value in the ADC table
	COMMENT b.ADC reading for the sensor is not greater than or equal to lowest ADC value and not less than
	COMMENT   the highest ADC value
	COMMENT while loop loops for 1 time
	COMMENT Equivalence Class 8,11
	COMMENT </TD>

	ELEMENT

		COMMENT INPUT SECTION:

			--Value to be searched in Lookup table
			VAR ind_var,							init = 252,											ev = init
			
			--Pointer to look up table
			STRUCTURE table,						init = { x => &PTU_x[0], y => &PTU_y[0]  },			ev = init
			
			--Holds the value of Sensor table(table.x)
			ARRAY PTU_x,							init = {0=>5,1=>253,2=>252,3=>251,4=>250,
			&												5=>249},									ev = init

			--Holds the value of Sensor table(table.y)
			ARRAY PTU_y,							init = {0=>5,1=>9025,2=>5443,3=>4355,4=>1000,
			&												5=>-3243},    								ev = init

			--Status parameter for lookup table
			VAR stat,								init = PARAM_BAD,									ev = init

		COMMENT INPUT/OUTPUT SECTION:

			--None

		COMMENT OUTPUT SECTION:

			--Holds the return value of 'LookupTableLookup'
			VAR ret_LookupTableLookup,				init = 1,											ev = 5443

		-- Stub Calls :
		SIMUL

			--No Stubs

		END SIMUL

		--Calling unit under test
		#ret_LookupTableLookup = LookupTableLookup(&table, ind_var, &stat);

	END ELEMENT

END TEST -- TEST 19

TEST 20
FAMILY nominal

	COMMENT Test Description
	COMMENT <TD> 
	COMMENT [hdudispflookup-LookupTableLookup-DB-LLR-002]
	COMMENT The function 'LookupTableLookup' returns the lowest Sensor unit value from the sensor table and set the 
	COMMENT stat to RANGE_ERROR when 
	COMMENT a. First value in the ADC table is equal to last value in the ADC table(91=91)
	COMMENT b. the lowest ADC value in the ADC table is equal to Actual ADC reading for the sensor (ind_var ) (91=91)
	COMMENT Equivalence Class 10,7
	COMMENT </TD>

	ELEMENT

		COMMENT INPUT SECTION:

			--Value to be searched in Lookup table
			VAR ind_var,							init = 91,										ev = init
			
			--Pointer to look up table
			STRUCTURE table,						init = { x => &PTU_x[0], y => &PTU_y[0]  },		ev = init
			
			--Holds the value of Sensor table(table.x)
			ARRAY PTU_x,							init = {0 => 5, 1 => 91, 2 => 91, 3 => 91, 
			&												4 => 91,5 => 91},						ev = init

			--Holds the value of Sensor table(table.y)
			ARRAY PTU_y,							init = {0 => 5, 1 => 171, 2 => 172, 3 => 173,
			&                                               4 => 174, 5 => 175},					ev = init

		COMMENT INPUT/OUTPUT SECTION:

			--Status parameter for lookup table
			VAR stat,								init = PARAM_BAD,								ev = RANGE_ERROR

		COMMENT OUTPUT SECTION:

			--Holds the return value of 'LookupTableLookup'
			VAR ret_LookupTableLookup,				init = 1,										ev = 171

		-- Stub Calls :
		SIMUL

			--No Stubs

		END SIMUL

		--Calling unit under test
		#ret_LookupTableLookup = LookupTableLookup(&table, ind_var, &stat);

	END ELEMENT

END TEST -- TEST 20

TEST 21
FAMILY nominal

	COMMENT Test Description
	COMMENT <TD> 
	COMMENT [hdudispflookup-LookupTableLookup-DB-LLR-010]
	COMMENT The function 'LookupTableLookup' does nothing when the result is greater than zero
	COMMENT Equivalence Class 15
	COMMENT
	COMMENT [hdudispflookup-LookupTableLookup-DB-LLR-012]
	COMMENT The function 'LookupTableLookup' does nothing when negation flag is FALSE.
	COMMENT Equivalence Class 18
	COMMENT </TD>

	ELEMENT

		COMMENT INPUT SECTION:

			--Value to be searched in Lookup table
			VAR ind_var,							init = 13,											ev = init
			
			--Pointer to look up table
			STRUCTURE table,						init = { x => &PTU_x[0], y => &PTU_y[0]  },			ev = init
			
			--Holds the value of Sensor table(table.x)
			ARRAY PTU_x,							init = {0=>5,1=>10,2=>20,3=>30,4=>40,5=>50},		ev = init

			--Holds the value of Sensor table(table.y)
			ARRAY PTU_y,							init = {0=>5,1=>15,2=>22,3=>28,4=>38,5=>40},		ev = init

			--Status parameter for lookup table
			VAR stat,								init = PARAM_BAD,									ev = init

		COMMENT INPUT/OUTPUT SECTION:

			--None

		COMMENT OUTPUT SECTION:

			--Holds the return value of 'LookupTableLookup'
			VAR ret_LookupTableLookup,				init = 1,											ev = 17

		-- Stub Calls :
		SIMUL

			--No Stubs

		END SIMUL

		--Calling unit under test
		#ret_LookupTableLookup = LookupTableLookup(&table, ind_var, &stat);

	END ELEMENT

END TEST -- TEST 21

END SERVICE -- LookupTableLookup




