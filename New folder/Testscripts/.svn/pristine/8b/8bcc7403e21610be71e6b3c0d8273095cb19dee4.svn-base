HEADER hdulibstm32f7xxhaldma, Source Code Ver : 1.2 , TestScript Ver : 1.3
--------------------------------------------------------------------------------
-- Author Name      	: Gowrima E
--
-- File Name        	: hdulibstm32f7xxhaldma.ptu
--
-- Test Creation Date  	: 31.10.2017
--
-- Tested Functions 	: HalDmaInit
--			  			  HALDmaDeInit		  
--			  			  HALDmaStartIT
--			  			  HALDmaIrqHandler
--			  			  HALDmaRegisterCallback
--			  			  DmaSetConfig
--			  			  DmaCalcBaseAndBitShift
--						  DmaCheckFifoParam
--
-- Version History      :
--
-- TEST-VERSION      TEST-DATE   	TESTER NAME   		MODIFICATIONS
-- ------------      ---------	    -----------	        -------------
-- 1.1               31.10.2017     Gowrima E         	Created the PTU file.
-- 1.2               10.11.2017     Gowrima E         	Updated as per PR100171
-- 1.3               14.11.2017     Gowrima E         	Updated as per PR100171
--------------------------------------------------------------------------------
--
-- TESTED FILE INCLUDE DIRECTIVES
--
--------------------------------------------------------------------------------

#/*============================================================================*/
#/* Module specific includes                                                   */
#/*============================================================================*/

##include "hdulibstm32f746xx.h"      
##include "hdulibstm32f7xxhal.h"   
##include "hdulibbasictypes.h"      
##include "hdulibstm32f7xxhaldma.h" 

##define DMA_FCR                  (T_UINT32)0x00000021U

##define CLR_IFCR                  0x3FU

--------------------------------------------------------------------------------
--
-- TESTED FILE DECLARATIONS
--
--------------------------------------------------------------------------------

-- Declarations of the global variables of the tested file

    #typedef struct {
    #	T_UINT32 ISR;
    #	T_UINT32 Reserved0;
    #	T_UINT32 IFCR;
    #	} T_DMA_BASE_REGISTERS;
    
    #T_UINT32 System_core_clock; 

-- Declarations of the temporary variable

	--To be used in structure "T_DMA_HANDLE" of functions "HalDmaInit", "HALDmaDeInit", 
	--"HALDmaStartIT", "HALDmaIrqHandler", and "HALDmaRegisterCallback" 
	#T_UINT32 PTU_Parent=0;
	
	--Variable to assign Instance member 
	#T_DMA_STREAM PTU_Instance;
	
--------------------------------------------------------------------------------

BEGIN

	COMMENT Author Name      : Gowrima E
    COMMENT
    COMMENT File Name        : hdulibstm32f7xxhaldma.c
    COMMENT
    COMMENT Tested Functions : HalDmaInit
	COMMENT	  			  	   HALDmaDeInit		  
	COMMENT	  			  	   HALDmaStartIT
	COMMENT	  			  	   HALDmaIrqHandler
	COMMENT	  			  	   HALDmaRegisterCallback
	COMMENT	  			  	   DmaSetConfig
	COMMENT	  			  	   DmaCalcBaseAndBitShift
	COMMENT				  	   DmaCheckFifoParam
    COMMENT
    COMMENT
    COMMENT Assumptions and Constraints
    COMMENT <AC>
    COMMENT
    COMMENT Assumption(s):
    COMMENT None
    COMMENT
    COMMENT Constraint(s):
    COMMENT 
    COMMENT 1.‘do-while’ loop present inside the macro __HAL_UNLOCK cannot be covered for TRUE condition and 
    COMMENT   ‘2 loops or more’ times since it is controlled by Macro ZERO in functions 'HalDmaInit', 'HALDmaDeInit', 
    COMMENT 'HALDmaStartIT', 'HALDmaIrqHandler', 'HALDmaRegisterCallback'.
    COMMENT
    COMMENT 2.‘do-while’ loop present inside the macro __HAL_LOCK cannot be covered for TRUE condition and 
    COMMENT   ‘2 loops or more’ times since it is controlled by Macro ZERO in functions 'HALDmaStartIT', HALDmaRegisterCallback'.
    COMMENT
	COMMENT 3.Following Test script related warnings are observed during Target Execution for volatile keyword member/variable:
	COMMENT   warning #191-D: type qualifier is meaningless on cast type
	COMMENT
    COMMENT </AC>

    COMMENT Equivalence Class Description
    COMMENT <ECD>
    COMMENT
    COMMENT Valid Class(es)
    COMMENT
	COMMENT Class 1
	COMMENT In function "HALDmaStartIT", macro " __HAL_LOCK" is called.
	COMMENT 
	COMMENT Class 2
	COMMENT In function "HALDmaStartIT", "State of h_dma" is equal to "HAL_DMA_STATE_READY".
	COMMENT 
	COMMENT Class 3
	COMMENT In function "HALDmaStartIT", "State of h_dma" is not equal to "HAL_DMA_STATE_READY".
	COMMENT 
	COMMENT Class 4
	COMMENT In function "HALDmaStartIT", "XferHalfCpltCallback of h_dma" is not equal to "NULL".
	COMMENT 
	COMMENT Class 5	
	COMMENT In function "HALDmaStartIT", "XferHalfCpltCallback of h_dma" is equal to "NULL".
	COMMENT 
	COMMENT Class 6
	COMMENT In function "DmaSetConfig", "Direction of Init of h_dma" is equal to "DMA_MEMORY_TO_PERIPH".
	COMMENT 
	COMMENT Class 7
	COMMENT In function "DmaSetConfig", " Direction of Init of h_dma" is not equal to 
	COMMENT "DMA_MEMORY_TO_PERIPH".
	COMMENT
	COMMENT Class 8
	COMMENT In function "HALDmaRegisterCallback", macro " __HAL_LOCK" is called.
	COMMENT 
	COMMENT Class 9
	COMMENT In function "HALDmaRegisterCallback", "State of h_dma" is equal to "HAL_DMA_STATE_READY"
	COMMENT 
	COMMENT Class 10		
	COMMENT In function "HALDmaRegisterCallback", "callback_id" is "HAL_DMA_XFER_CPLT_CB_ID".
	COMMENT 
	COMMENT Class 11
	COMMENT The function "HALDmaRegisterCallback", macro "__HAL_UNLOCK" is called.
	COMMENT 
	COMMENT Class 12
	COMMENT In function "HALDmaRegisterCallback", "callback_id" is "HAL_DMA_XFER_HALFCPLT_CB_ID".
	COMMENT 
	COMMENT Class 13
	COMMENT In function "HALDmaRegisterCallback", "callback_id" is "HAL_DMA_XFER_M1CPLT_CB_ID".
	COMMENT 
	COMMENT Class 14
	COMMENT In function "HALDmaRegisterCallback", "callback_id" is "HAL_DMA_XFER_M1HALFCPLT_CB_ID".
	COMMENT 
	COMMENT Class 15
	COMMENT In function "HALDmaRegisterCallback", "callback_id" is "HAL_DMA_XFER_ERROR_CB_ID".
	COMMENT 
	COMMENT Class 16
	COMMENT In function "HALDmaRegisterCallback", "callback_id" is "HAL_DMA_XFER_ABORT_CB_ID".
	COMMENT 
	COMMENT Class 17
	COMMENT In function "HALDmaRegisterCallback", "callback_id" is other than "HAL_DMA_XFER_CPLT_CB_ID",
	COMMENT "HAL_DMA_XFER_HALFCPLT_CB_ID", "HAL_DMA_XFER_HALFCPLT_CB_ID", "HAL_DMA_XFER_M1HALFCPLT_CB_ID", 
	COMMENT "HAL_DMA_XFER_ERROR_CB_ID", "HAL_DMA_XFER_ABORT_CB_ID".
	COMMENT 
	COMMENT Class 18
	COMMENT In function "HALDmaRegisterCallback", "State of h_dma" is not equal to "HAL_DMA_STATE_READY".
	COMMENT
	COMMENT Class 19
	COMMENT In function "HALDmaDeInit", "h_dma" is equal to "NULL"
	COMMENT 
	COMMENT Class 20
	COMMENT In function "HALDmaDeInit", "State of h_dma" is equal to "HAL_DMA_STATE_BUSY"
	COMMENT
	COMMENT Class 21
	COMMENT In function "HalDmaInit", function HALGetTick called and store the return value as start ticks.
	COMMENT 
	COMMENT Class 22
	COMMENT In function "HalDmaInit", "h_dma" is equal to "NULL".
	COMMENT 
	COMMENT Class 23
	COMMENT In function "HalDmaInit", "h_dma" is not equal to "NULL".
	COMMENT 
	COMMENT Class 24
	COMMENT In function "HalDmaInit", macro "__HAL_UNLOCK" is called.
	COMMENT 
	COMMENT Class 25
	COMMENT In function "HalDmaInit",  macro "__HAL_DMA_DISABLE" is called.
	COMMENT
	COMMENT Class 26
	COMMENT In function "HalDmaInit", "FIFOMode of Init of h_dma" is equal to "DMA_FIFOMODE_ENABLE"
	COMMENT
	COMMENT Class 27
	COMMENT In function "HalDmaInit", "FIFOMode of Init of h_dma" is not equal to "DMA_FIFOMODE_ENABLE"	
	COMMENT
	COMMENT Class 28
	COMMENT In function "HalDmaInit", return value of function "DmaCheckFifoParam" is not equal to "HAL_OK"
	COMMENT
	COMMENT Class 29
	COMMENT In function "HalDmaInit", return value of function "DmaCheckFifoParam" is equal to "HAL_OK"
	COMMENT
	COMMENT Class 30
	COMMENT In function "HalDmaInit", function "DmaCalcBaseAndBitShift" is called. 
	COMMENT
	COMMENT Class 31
	COMMENT In function "HALDmaDeInit", "h_dma" is not equal to "NULL"
	COMMENT 
	COMMENT Class 32
	COMMENT In function "HALDmaDeInit", "State of h_dma" is not equal to "HAL_DMA_STATE_BUSY"
	COMMENT
	COMMENT Class 33
	COMMENT The function "HALDmaStartIT", macro "__HAL_UNLOCK" is called.	
	COMMENT
	COMMENT Class 34
	COMMENT The function "HALDmaStartIT", macro "__HAL_DMA_ENABLE" is called.
	COMMENT 
	COMMENT Class 35
	COMMENT The function "HALDmaStartIT", function "DmaSetConfig" is called.	
	COMMENT 
	COMMENT Class 82
	COMMENT In function 'DmaCheckFifoParam', MemDataAlignment of Init of h_dma is equal 
	COMMENT to DMA_MDATAALIGN_BYTE.
	COMMENT 
	COMMENT Class 83
	COMMENT In function 'DmaCheckFifoParam', FIFOThreshold of Init of h_dma is equal to
	COMMENT DMA_FIFO_THRESHOLD_1QUARTERFULL.
	COMMENT 
	COMMENT Class 84
	COMMENT In function 'DmaCheckFifoParam', MemBurst of Init of h_dma value bitwise 
	COMMENT AND with DMA_SXCR_MBURST_1 is equal to DMA_SXCR_MBURST_1.
	COMMENT 
	COMMENT Class 85
	COMMENT In function 'DmaCheckFifoParam', MemBurst of Init of h_dma value bitwise 
	COMMENT AND with DMA_SXCR_MBURST_1 is not equal to DMA_SXCR_MBURST_1.
	COMMENT 
	COMMENT Class 86
	COMMENT In function 'DmaCheckFifoParam', FIFOThreshold of Init of h_dma is equal 
	COMMENT to DMA_FIFO_THRESHOLD_HALFFULL.
	COMMENT 
	COMMENT Class 87
	COMMENT In function 'DmaCheckFifoParam', MemBurst of Init of h_dma  is equal to DMA_MBURST_INC16.
	COMMENT 
	COMMENT Class 88
	COMMENT In function 'DmaCheckFifoParam', MemBurst of Init of h_dma  is not equal to DMA_MBURST_INC16.
	COMMENT 
	COMMENT Class 89
	COMMENT In function 'DmaCheckFifoParam', FIFOThreshold of Init of h_dma is equal to 
	COMMENT DMA_FIFO_THRESHOLD_3QUARTERSFULL.
	COMMENT 
	COMMENT Class 92
	COMMENT In function 'DmaCheckFifoParam', FIFO Threshold of Init of h_dma is equal to 
	COMMENT DMA_FIFO_THRESHOLD_FULL.
	COMMENT 
	COMMENT Class 93
	COMMENT In function 'DmaCheckFifoParam', FIFOThreshold of Init of h_dma is other than 
	COMMENT DMA_FIFO_THRESHOLD_1QUARTERFULL, DMA_FIFO_THRESHOLD_HALFFULL, 
	COMMENT DMA_FIFO_THRESHOLD_3QUARTERSFULL and DMA_FIFO_THRESHOLD_FULL.
	COMMENT 
	COMMENT Class 94
	COMMENT In function 'DmaCheckFifoParam', MemDataAlignment of Init of h_dma is equal to 
	COMMENT DMA_MDATAALIGN_HALFWORD.
	COMMENT 
	COMMENT Class 95
	COMMENT In function 'DmaCheckFifoParam', MemDataAlignment of Init of h_dma is other than 
	COMMENT DMA_MDATAALIGN_BYTE,DMA_MDATAALIGN_HALFWORD
	COMMENT
	COMMENT Class 96
	COMMENT In function "HALDmaDeInit", macro "__HAL_DMA_DISABLE" is called.
	COMMENT
	COMMENT Class 97
	COMMENT In function "HALDmaDeInit", function "DmaCalcBaseAndBitShift" is called. 
	COMMENT
	COMMENT Class 98
	COMMENT In function "HALDmaDeInit", macro "__HAL_UNLOCK" is called.  
	COMMENT
	COMMENT Class 99
	COMMENT In function "DmaCalcBaseAndBitShift", "Stream Number" is less than "THREE". 
	COMMENT
	COMMENT Class 100
	COMMENT In function "DmaCalcBaseAndBitShift", "Stream Number" is greater than "THREE".  
	COMMENT
    COMMENT
	COMMENT Class 110 
	COMMENT In function "HALDmaIrqHandler", temp isr value Bitwise AND with (left shifted value of 
	COMMENT DMA_FLAG_TEIF0_4 by StreamIndex of h_dma) is not equal to RESET
	COMMENT 
	COMMENT Class 111  
	COMMENT In function "HALDmaIrqHandler", temp isr value Bitwise AND with (left shifted value of 
	COMMENT DMA_FLAG_TEIF0_4 by StreamIndex of h_dma) is equal to RESET
	COMMENT 
	COMMENT Class 112 
	COMMENT In function "HALDmaIrqHandler", return value of macro __HAL_DMA_GET_IT_SOURCE with 
	COMMENT parameters h_dma and DMA_IT_TE is not equal to RESET
	COMMENT 
	COMMENT Class 113  
	COMMENT In function "HALDmaIrqHandler", return value of macro __HAL_DMA_GET_IT_SOURCE with 
	COMMENT parameters h_dma and DMA_IT_TE is equal to RESET
	COMMENT 
	COMMENT Class 114 	
	COMMENT In function "HALDmaIrqHandler", temp isr value Bitwise AND with (left shifted 
	COMMENT value of DMA_FLAG_FEIF0_4 by StreamIndex of h_dma) is not equal to RESET
	COMMENT 
	COMMENT Class 115 	
	COMMENT In function "HALDmaIrqHandler", temp isr value Bitwise AND with (left shifted 
	COMMENT value of DMA_FLAG_FEIF0_4 by StreamIndex of h_dma) is equal to RESET
	COMMENT 
	COMMENT Class 116 
	COMMENT In function "HALDmaIrqHandler", return value of macro __HAL_DMA_GET_IT_SOURCE 
	COMMENT with parameters h_dma and DMA_IT_FE is not equal to RESET
	COMMENT 
	COMMENT Class 117 
	COMMENT In function "HALDmaIrqHandler", return value of macro __HAL_DMA_GET_IT_SOURCE 
	COMMENT with parameters h_dma and DMA_IT_FE is equal to RESET
	COMMENT 
	COMMENT Class 118 	
	COMMENT In function "HALDmaIrqHandler", temp isr value Bitwise AND with (left shifted 
	COMMENT value of DMA_FLAG_DMEIF0_4 by StreamIndex of h_dma) is not equal to RESET
	COMMENT 
	COMMENT Class 119 	
	COMMENT In function "HALDmaIrqHandler", temp isr value Bitwise AND with (left shifted 
	COMMENT value of DMA_FLAG_DMEIF0_4 by StreamIndex of h_dma) is equal to RESET
	COMMENT 
	COMMENT Class 120  	
	COMMENT In function "HALDmaIrqHandler", return value of macro __HAL_DMA_GET_IT_SOURCE 
	COMMENT with parameters h_dma and DMA_IT_DME is not equal to RESET
	COMMENT 
	COMMENT Class 121 
	COMMENT In function "HALDmaIrqHandler", return value of macro __HAL_DMA_GET_IT_SOURCE 
	COMMENT with parameters h_dma and DMA_IT_DME is equal to RESET
	COMMENT 
	COMMENT Class 122 	
	COMMENT In function "HALDmaIrqHandler", temp isr value Bitwise AND with (left shifted
	COMMENT value of DMA_FLAG_HTIF0_4 by StreamIndex of h_dma) is not equal to RESET
	COMMENT 
	COMMENT Class 123 
	COMMENT In function "HALDmaIrqHandler", temp isr value Bitwise AND with (left shifted
	COMMENT value of DMA_FLAG_HTIF0_4 by StreamIndex of h_dma) is equal to RESET
	COMMENT 
	COMMENT Class 124
	COMMENT In function "HALDmaIrqHandler", return value of macro __HAL_DMA_GET_IT_SOURCE
	COMMENT with parameters h_dma and DMA_IT_HT is not equal to RESET
	COMMENT 
	COMMENT Class 125  	
	COMMENT In function "HALDmaIrqHandler", return value of macro __HAL_DMA_GET_IT_SOURCE
	COMMENT with parameters h_dma and DMA_IT_HT is equal to RESET
	COMMENT 
	COMMENT Class 126  	
	COMMENT In function "HALDmaIrqHandler", value from Bitwise AND of (CR of Instance of h_dma) 
	COMMENT with DMA_SXCR_DBM is not equal to RESET
	COMMENT 
	COMMENT Class 127 	
	COMMENT In function "HALDmaIrqHandler", value from Bitwise AND of (CR of Instance of h_dma) 
	COMMENT with DMA_SXCR_DBM is equal to RESET
	COMMENT 
	COMMENT Class 128 	
	COMMENT In function "HALDmaIrqHandler", Bitwise AND of (CR of Instance of h_dma) with 
	COMMENT DMA_SXCR_CT is equal to RESET
	COMMENT 
	COMMENT Class 129 		
	COMMENT In function "HALDmaIrqHandler", Bitwise AND of (CR of Instance of h_dma) with 
	COMMENT DMA_SXCR_CT is not equal to RESET
	COMMENT 
	COMMENT Class 130 
	COMMENT In function "HALDmaIrqHandler", XferHalfCpltCallback of h_dma is not equal to NULL
	COMMENT 
	COMMENT Class 131	
	COMMENT In function "HALDmaIrqHandler", XferHalfCpltCallback of h_dma is equal to NULL
	COMMENT 
	COMMENT Class 132	
	COMMENT In function "HALDmaIrqHandler",	XferM1HalfCpltCallback of h_dma is not equal to NULL
	COMMENT 
	COMMENT Class 133	
	COMMENT In function "HALDmaIrqHandler",	XferM1HalfCpltCallback of h_dma is equal to NULL
	COMMENT 
	COMMENT Class 134 	
	COMMENT In function "HALDmaIrqHandler", Bitwise AND of (CR of Instance of h_dma) with DMA_SXCR_CIRC 
	COMMENT is equal to RESET
	COMMENT 
	COMMENT Class 135		
	COMMENT In function "HALDmaIrqHandler", Bitwise AND of (CR of Instance of h_dma) with DMA_SXCR_CIRC 
	COMMENT is not equal to RESET 
	COMMENT 
	COMMENT Class 136 	
	COMMENT In function "HALDmaIrqHandler", XferHalfCpltCallback of h_dma is not equal to NULL
	COMMENT 
	COMMENT Class 137 	
	COMMENT In function "HALDmaIrqHandler", XferHalfCpltCallback of h_dma is equal to NULL
	COMMENT 
	COMMENT Class 138	
	COMMENT In function "HALDmaIrqHandler", temp isr value Bitwise AND with (left shifted value 
	COMMENT of DMA_FLAG_TCIF0_4 by StreamIndex of h_dma) is not equal to RESET
	COMMENT 
	COMMENT Class 139
	COMMENT In function "HALDmaIrqHandler", temp isr value Bitwise AND with (left shifted value 
	COMMENT of DMA_FLAG_TCIF0_4 by StreamIndex of h_dma) is equal to RESET
	COMMENT 
	COMMENT Class 140	
	COMMENT In function "HALDmaIrqHandler", State of h_dma is equal to HAL_DMA_STATE_ABORT
	COMMENT 
	COMMENT Class 141	
	COMMENT In function "HALDmaIrqHandler", State of h_dma is not equal to HAL_DMA_STATE_ABORT
	COMMENT 
	COMMENT Class 142	
	COMMENT In function "HALDmaIrqHandler", XferAbortCallback of h_dma is not equal to NULL
	COMMENT 
	COMMENT Class 143		
	COMMENT In function "HALDmaIrqHandler", XferAbortCallback of h_dma is equal to NULL
	COMMENT 
	COMMENT Class 144		
	COMMENT In function "HALDmaIrqHandler", XferM1CpltCallback of h_dma is not equal to NULL
	COMMENT 
	COMMENT Class 145	
	COMMENT In function "HALDmaIrqHandler", XferM1CpltCallback of h_dma is equal to NULL
	COMMENT 
	COMMENT Class 146		
	COMMENT In function "HALDmaIrqHandler", XferCpltCallback of h_dma is not equal to NULL
	COMMENT 
	COMMENT Class 147 	
	COMMENT In function "HALDmaIrqHandler", XferCpltCallback of h_dma is equal to NULL
	COMMENT 
	COMMENT Class 148 		
	COMMENT In function "HALDmaIrqHandler", ErrorCode of h_dma is not equal to HAL_DMA_ERROR_NONE
	COMMENT 
	COMMENT Class 149	
	COMMENT In function "HALDmaIrqHandler", ErrorCode of h_dma is equal to HAL_DMA_ERROR_NONE
	COMMENT 
	COMMENT Class 150	
	COMMENT In function "HALDmaIrqHandler", Bitwise AND of ErrorCode of h_dma with HAL_DMA_ERROR_TE 
	COMMENT is not equal to RESET
	COMMENT 
	COMMENT Class 151	
	COMMENT In function "HALDmaIrqHandler", Bitwise AND of ErrorCode of h_dma with HAL_DMA_ERROR_TE 
	COMMENT is equal to RESET
	COMMENT 
	COMMENT Class 152
	COMMENT In function "HALDmaIrqHandler", XferErrorCallback of h_dma is not equal to NULL
	COMMENT 
	COMMENT Class 153		
	COMMENT In function "HALDmaIrqHandler", XferErrorCallback of h_dma is equal to NULL
	COMMENT 
	COMMENT Class 155		
	COMMENT In function "HALDmaIrqHandler", Bitwise AND of (CR of Instance of h_dma) with 
	COMMENT DMA_SXCR_EN is not equal to RESET
	COMMENT 
	COMMENT Class 156		
	COMMENT In function "HALDmaIrqHandler", return value of macro __HAL_DMA_GET_IT_SOURCE 
	COMMENT with parameters h_dma and 
	COMMENT DMA_IT_TC is not equal to RESET 
	COMMENT 
	COMMENT Class 157		
	COMMENT In function "HALDmaIrqHandler", return value of macro __HAL_DMA_GET_IT_SOURCE 
	COMMENT with parameters h_dma and DMA_IT_TC is equal to RESET 
	COMMENT
	COMMENT Invalid class(es)
	COMMENT
	COMMENT Class 79
	COMMENT In function 'HALDmaRegisterCallback', Invalid Reference is passed to h_dma parameter
	COMMENT
	COMMENT Class 80
	COMMENT In function 'HALDmaStartIT', Invalid Reference is passed to h_dma parameter
	COMMENT
	COMMENT Class 81
	COMMENT In function 'HALDmaIrqHandler', Invalid Reference is passed to h_dma parameter
	COMMENT
	COMMENT Class 160
	COMMENT In function 'HALDmaRegisterCallback', Invalid Reference is passed to p_callback parameter
    COMMENT </ECD>
--------------------------------------------------------------------------------
--
-- STUB DECLARATIONS OF THE TESTED OR INTEGRATED UNITS
--
--------------------------------------------------------------------------------

	SIMUL
	
	DEFINE STUB hdulibstm32f7xxhaldma_c
	
		#void *XferErrorCallback(struct __T_DMA_HANDLE _no * hdma); 
		#void *XferCpltCallback(struct __T_DMA_HANDLE _no * hdma); 
		#void *XferM1CpltCallback(struct __T_DMA_HANDLE _no * hdma); 
		#void *XferAbortCallback(struct __T_DMA_HANDLE _no * hdma); 
		#void *XferM1HalfCpltCallback(struct __T_DMA_HANDLE _no * hdma); 
		#void *XferHalfCpltCallback(struct __T_DMA_HANDLE _no * hdma); 
		#T_UINT32 HALGetTick(void); 

		--Dummy function is created to use in function "HALDmaRegisterCallback"
		#void dummyfunction(void)
		#{
		# ;
    	#}
    	
	END DEFINE

	ELSE_SIMUL

    -- No action defined as of now if the module is not simulated

	END SIMUL
--------------------------------------------------------------------------------
--
-- ENVIRONMENTS DECLARATIONS
--
--------------------------------------------------------------------------------
--IF HOST

-- No special things that have to be done on the host to run the test.

--ELSE

-- No action defined for the target execution as of now

--END IF

--------------------------------------------------------------------------------
-- TESTED FILE ENVIRONMENT
--------------------------------------------------------------------------------

-- Environment of the file hdulibstm32f7xxhaldma.c
--ENVIRONMENT ENV_hdulibstm32f7xxhaldma_c

	--None

--END ENVIRONMENT -- ENV_hdulibstm32f7xxhaldma_c

--USE ENV_hdulibstm32f7xxhaldma_c

--------------------------------------------------------------------------------
--
-- SERVICES DECLARATIONS
--
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
-- Declaration of the service HALDmaStartIT
--------------------------------------------------------------------------------
SERVICE HALDmaStartIT
SERVICE_TYPE extern

    -- Tested service parameters declarations
    #T_DMA_HANDLE h_dma;
    #T_UINT32 src_address;
    #T_UINT32 dest_address;
    #T_UINT32 data_length;
    -- By function returned type declaration
    #T_HAL_STATUS ret_HALDmaStartIT;

	--Variable to assign function paramenter
    #T_UINT32 PTU_SDAddress[100];
    
    --Variable to assign StreamBaseAddress member
    #T_DMA_BASE_REGISTERS PTU_reg;
    
	-- Default Variables
	
	ENVIRONMENT ENV_HALDmaStartIT
	
		VAR PTU_Instance,				init = {others=>0},							ev = init
	
		STRUCTURE h_dma,				init = { Instance => &PTU_Instance, Init => { Channel => 0, 
		&								Direction => 0, PeriphInc => 0, MemInc => 0, PeriphDataAlignment => 0,
		& 								MemDataAlignment => 0, Mode => 0, Priority => 0, FIFOMode => 0, 
		&								FIFOThreshold => 0, MemBurst => 0, PeriphBurst => 0 }, Lock 
		&								=> HAL_UNLOCKED, State => HAL_DMA_STATE_RESET, Parent => &PTU_Parent, 
		&								XferCpltCallback => XferCpltCallback, XferHalfCpltCallback 
		&								=> XferHalfCpltCallback, XferM1CpltCallback => XferM1CpltCallback,
		&								XferM1HalfCpltCallback => XferM1HalfCpltCallback, XferErrorCallback 
		&								=> XferErrorCallback, XferAbortCallback => XferAbortCallback, 
		&								 ErrorCode => 0, StreamBaseAddress => 0, StreamIndex => 0 },	ev = init
		
		VAR src_address,				init = 0,														ev = init
		
		VAR dest_address,				init = 0,														ev = init
		
		VAR data_length,				init = 0,														ev = init
		
		VAR ret_HALDmaStartIT,			init = HAL_OK,													ev = init
			
	END ENVIRONMENT -- ENV_HALDmaStartIT

	USE ENV_HALDmaStartIT
 
TEST 1
FAMILY nominal
    
	COMMENT Test Description
    COMMENT <TD> 
    COMMENT	[hdulibstm32f7xxhaldma-HALDmaStartIT-DB-LLR-001]
    COMMENT	The function store value of the StreamBaseAddress of h_dma.
    COMMENT Equivalence Class None
    COMMENT
    COMMENT	[hdulibstm32f7xxhaldma-HALDmaStartIT-DB-LLR-002]
    COMMENT	The function calls the macro __HAL_LOCK with parameter h_dma to lock the process.
    COMMENT Equivalence Class 1
    COMMENT
    COMMENT	[hdulibstm32f7xxhaldma-HALDmaStartIT-DB-LLR-004]
    COMMENT The function does the following when State of h_dma is not equal to HAL_DMA_STATE_READY.
	COMMENT	a) Unlock the process by calling the macro __HAL_UNLOCK with parameter  h_dma
	COMMENT b) Set status to HAL_BUSY 
    COMMENT	Equivalence Class 3, 33
    COMMENT
    COMMENT	[hdulibstm32f7xxhaldma-HALDmaStartIT-DB-LLR-005]
    COMMENT	The function returns the HAL status as HAL_BUSY.
    COMMENT Equivalence Class None
    COMMENT
    COMMENT </TD>

    ELEMENT
    
    COMMENT INPUT SECTION:
    
    --Holds src_address value
    VAR src_address,						init = (T_UINT32)&PTU_SDAddress[0],			ev = init
    
    --Holds dest_address value
    VAR dest_address,						init = (T_UINT32)&PTU_SDAddress[99],		ev = init
    
    --Holds data_length value
    VAR data_length,						init = 0x10,								ev = init
    
    --Holds PTU_reg value
    VAR PTU_reg,							init = {others=>0},							ev = init
    
    --Holds StreamBaseAddress of h_dma value
    VAR h_dma.StreamBaseAddress,			init = (T_UINT32)&PTU_reg,					ev = init
     
	--Holds State of h_dma value
    VAR h_dma.State,						init = HAL_DMA_STATE_RESET,					ev = init
    
    COMMENT INPUT/OUTPUT SECTION:
        
    --Holds Lock of h_dma value
    -- Init and exopected value are same as in LLR 'hdulibstm32f7xxhaldma-HALDmaStartIT-DB-LLR-002'
	--Lock will be set to HAL_LOCKED and in LLR 'hdulibstm32f7xxhaldma-HALDmaStartIT-DB-LLR-004' 
	--Lock will be set to HAL_UNLOCKED
    VAR h_dma.Lock,							init = HAL_UNLOCKED,						ev = HAL_UNLOCKED
    
    COMMENT OUTPUT SECTION:
        
    --Return value of HALDmaStartIT
    VAR ret_HALDmaStartIT,					init = HAL_OK,								ev = HAL_BUSY
    
    -- Stub Calls :
		SIMUL
						
			--No stubs
			        		
		END SIMUL
			
	-- Calling the Unit Under Test :
	#ret_HALDmaStartIT = HALDmaStartIT(&h_dma, src_address, dest_address, data_length);
        
	END ELEMENT

END TEST -- TEST 1
    
TEST 2
FAMILY nominal

	COMMENT Test Description
    COMMENT <TD> 
    COMMENT	[hdulibstm32f7xxhaldma-HALDmaStartIT-DB-LLR-003]
    COMMENT	The function does the following when State of h_dma is equal to HAL_DMA_STATE_READY.
	COMMENT		a) Sets State of h_dma to HAL_DMA_STATE_BUSY
	COMMENT		b) Sets ErrorCode of h_dma to HAL_DMA_ERROR_NONE
	COMMENT		c) Calls the function DmaSetConfig with parmeters h_dma, src_address, dest_address
	COMMENT and data_length
	COMMENT		d) Clears all interrupt flags of IFCR register of StreamBaseAddress of h_dma.
	COMMENT		e) Enables the interrupts of CR of Instance of h_dma by bitwise OR with DMA_IT_TC, 
	COMMENT DMA_IT_TE and DMA_IT_DME
	COMMENT		f) Enables the interrupts of FCR of Instance of h_dma by bitwise OR with DMA_IT_FE
	COMMENT		g) Results of bitwise OR operation of CR of Instance of h_dma and DMA_IT_HT stored 
	COMMENT in CR  of Instance of h_dma when 
	COMMENT			XferHalfCpltCallback value of h_dma is not equal to NULL
	COMMENT		h) Enables the Peripheral by calling the macro __HAL_DMA_ENABLE with parameter to h_dma.
	COMMENT	Equivalence Class 2, 4, 34, 35
	COMMENT
    COMMENT [hdulibstm32f7xxhaldma-DmaSetConfig-DB-LLR-001]
    COMMENT	The function clears DBM bit in Control Register(CR ) of instance of h_dma.
    COMMENT Equivalence Class None
    COMMENT
    COMMENT [hdulibstm32f7xxhaldma-DmaSetConfig-DB-LLR-002]
    COMMENT	The function sets NDTR of Instance of h_dma to data_length.
    COMMENT Equivalence Class None
    COMMENT
    COMMENT [hdulibstm32f7xxhaldma-DmaSetConfig-DB-LLR-003]
    COMMENT The function does the following when Direction of Init of h_dma is equal to 
    COMMENT DMA_MEMORY_TO_PERIPH.
	COMMENT		a) Sets PAR of Instance of h_dma to dest_address.
	COMMENT		b) Sets M0AR of Instance of h_dma to src_address.
    COMMENT Equivalence Class 6
    COMMENT
    COMMENT	[hdulibstm32f7xxhaldma-HALDmaStartIT-DB-LLR-005]
    COMMENT The function returns the HAL status as HAL_OK
    COMMENT Equivalence Class None
    COMMENT </TD>
    
    ELEMENT
    
    COMMENT INPUT SECTION:
       
    --Holds src_address value
    VAR src_address,								init = (T_UINT32)&PTU_SDAddress[1],		ev = init
    
    --Holds dest_address value
    VAR dest_address,								init = (T_UINT32)&PTU_SDAddress[99],	ev = init
    
    --Holds data_length value
    VAR data_length,								init = 0x64,							ev = init
    
    --Holds StreamIndex of h_dma value	
    VAR h_dma.StreamIndex,							init = 0x6,								ev = init
    
    --Holds StreamBaseAddress of h_dma value
    VAR h_dma.StreamBaseAddress,					init = (T_UINT32)&PTU_reg,				ev = init
    
    --Holds Direction of Init of h_dma value
    VAR h_dma.Init.Direction,						init = DMA_MEMORY_TO_PERIPH,			ev = init
    
    --Holds XferHalfCpltCallback of h_dma value
    VAR h_dma.XferHalfCpltCallback,					init = XferHalfCpltCallback,			ev = init
    
    
    COMMENT INPUT/OUTPUT SECTION:
        
    --Holds PTU_reg value
    VAR PTU_reg.IFCR,								init = 0x3D,							ev = 0xFC0
    
    --Holds Lock of h_dma value
    VAR h_dma.Lock,									init = HAL_UNLOCKED,					ev = HAL_LOCKED
    
    --Holds State of h_dma value
    VAR h_dma.State,								init = HAL_DMA_STATE_READY,				ev = HAL_DMA_STATE_BUSY
    
    --Holds CR of Instance of h_dma value
    VAR PTU_Instance.CR, 							init = (T_UINT32)0x00040000,			ev = 0x1F
    
    --Holds FCR of Instance of h_dma value
    VAR PTU_Instance.FCR,  							init = 0x0,								ev = 0x80
    
    COMMENT OUTPUT SECTION:
    
    --Holds ErrorCode of h_dma value
    VAR h_dma.ErrorCode,							init = 0x100,							ev = HAL_DMA_ERROR_NONE
    
    --Holds NDTR of Instance of h_dma value
    VAR PTU_Instance.NDTR,							init = (T_UINT32)0x99,					ev = (T_UINT32)0x64
    
    --Holds PAR of Instance of h_dma value
    VAR PTU_Instance.PAR, 							init = (T_UINT32)0x99,					ev = (T_UINT32)&PTU_SDAddress[99]
    
    --Holds M0AR of Instance of h_dma value
    VAR PTU_Instance.M0AR,							init = (T_UINT32)0x99,					ev =(T_UINT32)&PTU_SDAddress[1]
    
    --Return value of HALDmaStartIT
    VAR ret_HALDmaStartIT,							init = HAL_BUSY,						ev = HAL_OK
    
    -- Stub Calls :
		SIMUL
					
			--No stubs
		        		
		END SIMUL
    
    -- Calling the Unit Under Test :
    #ret_HALDmaStartIT = HALDmaStartIT(&h_dma, src_address, dest_address, data_length);
    
    END ELEMENT

END TEST -- TEST 2
    
TEST 3
FAMILY nominal

	COMMENT Test Description
    COMMENT <TD> 
    COMMENT
    COMMENT	[hdulibstm32f7xxhaldma-HALDmaStartIT-DB-LLR-003]
    COMMENT	The function does the following when State of h_dma is equal to HAL_DMA_STATE_READY.
	COMMENT		a) Sets State of h_dma to HAL_DMA_STATE_BUSY
	COMMENT		b) Sets ErrorCode of h_dma to HAL_DMA_ERROR_NONE
	COMMENT		c) Calls the function DmaSetConfig with parmeters h_dma, src_address, dest_address and data_length
	COMMENT		d) Clears all interrupt flags of IFCR register of StreamBaseAddress of h_dma.
	COMMENT		e) Enables the interrupts of CR of Instance of h_dma by bitwise OR with DMA_IT_TC, DMA_IT_TE and DMA_IT_DME
	COMMENT		f) Enables the interrupts of FCR of Instance of h_dma by bitwise OR with DMA_IT_FE
	COMMENT		g) The function does nothing when XferHalfCpltCallback value of h_dma is equal to NULL
	COMMENT		h) Enables the Peripheral by calling the macro __HAL_DMA_ENABLE with parameter to h_dma.
	COMMENT	Equivalence Class 2, 5, 34, 35
	COMMENT
    COMMENT [hdulibstm32f7xxhaldma-DmaSetConfig-DB-LLR-004]
    COMMENT	The function does the following when Direction of Init of h_dma is not equal to DMA_MEMORY_TO_PERIPH.
	COMMENT		a) Sets PAR of Instance of h_dma to src_address.
	COMMENT		b) Set M0AR of Instance of h_dma to dest_address.
	COMMENT Equivalence Class 7
	COMMENT
    COMMENT	[hdulibstm32f7xxhaldma-HALDmaStartIT-DB-LLR-005]
    COMMENT The function returns the HAL status as HAL_OK
    COMMENT Equivalence Class None
    COMMENT 
    COMMENT </TD>
    
    ELEMENT
    
    COMMENT INPUT SECTION:
    
    --Holds src_address value
    VAR src_address,							init = (T_UINT32)&PTU_SDAddress[1],							ev = init
    
    --Holds dest_address value
    VAR dest_address,							init = (T_UINT32)&PTU_SDAddress[99],						ev = init
    
    --Holds data_length value
    VAR data_length,							init = 0x15,												ev = init
    
    --Holds StreamIndex of h_dma value	
    VAR h_dma.StreamIndex,						init = 0x6,													ev = init
        
    --Holds StreamBaseAddress of h_dma value
    VAR h_dma.StreamBaseAddress,				init = (T_UINT32)&PTU_reg,									ev = init
    
    --Holds Direction of Init of h_dma value
    VAR h_dma.Init.Direction,					init = 0xFF,												ev = init
    
    --Holds XferHalfCpltCallback of h_dma value
    VAR h_dma.XferHalfCpltCallback,				init = NULL,												ev = init
    
    COMMENT INPUT/OUTPUT SECTION:
    
	--Holds PTU_reg value
    VAR PTU_reg.IFCR,							init = 0x3D,												ev = 0xFC0
    
	--Holds Lock of h_dma value
    VAR h_dma.Lock,								init = HAL_UNLOCKED,										ev = HAL_LOCKED
    
    --Holds State of h_dma value
    VAR h_dma.State,							init = HAL_DMA_STATE_READY,									ev = HAL_DMA_STATE_BUSY
    
    --Holds CR of Instance of h_dma value
    VAR PTU_Instance.CR, 						init = 0x0,													ev = 0x17
    
    --Holds FCR of Instance of h_dma value
    VAR PTU_Instance.FCR,  						init = 0x0,													ev = 0x80
    
    
    COMMENT OUTPUT SECTION:
    
    --Holds ErrorCode of h_dma value
    VAR h_dma.ErrorCode,						init = 0xFF,												ev = HAL_DMA_ERROR_NONE
    
    --Holds NDTR of Instance of h_dma value
    VAR PTU_Instance.NDTR,						init = (T_UINT32)0x99,										ev = (T_UINT32)0x15
    
    --Holds PAR of Instance of h_dma value
    VAR PTU_Instance.PAR, 						init = (T_UINT32)0x256,										ev = (T_UINT32)&PTU_SDAddress[1]
    
    --Holds M0AR of Instance of h_dma value
    VAR PTU_Instance.M0AR,						init = (T_UINT32)0xFF,										ev = (T_UINT32)&PTU_SDAddress[99]
    
    --Return value of HALDmaStartIT
    VAR ret_HALDmaStartIT,						init = HAL_BUSY,											ev = HAL_OK
    
    -- Stub Calls :
		SIMUL
					
			--No stubs
		        		
		END SIMUL
		
    -- Calling the Unit Under Test :
    #ret_HALDmaStartIT = HALDmaStartIT(&h_dma, src_address, dest_address, data_length);
    
    END ELEMENT

END TEST -- TEST 3

TEST 4
FAMILY nominal
    
    COMMENT Test Description
    COMMENT <TD> 
    COMMENT	[hdulibstm32f7xxhaldma-HALDmaStartIT-DB-LLR-002]
    COMMENT	The function calls the macro __HAL_LOCK with parameter h_dma to lock the process.
    COMMENT Equivalence Class 1
    COMMENT </TD>

    ELEMENT
    
    COMMENT INPUT SECTION:
    
    --Holds src_address value
    VAR src_address,								init = (T_UINT32)&PTU_SDAddress[0],									ev = init
    
    --Holds dest_address value
    VAR dest_address,								init = (T_UINT32)&PTU_SDAddress[99],								ev = init
    
    --Holds data_length value
    VAR data_length,								init = 0x10,														ev = init
    
    --Holds PTU_reg value
    VAR PTU_reg,									init = {others=>0},													ev = init
    
    --Holds StreamBaseAddress of h_dma value
    VAR h_dma.StreamBaseAddress,					init = (T_UINT32)&PTU_reg,											ev = init
    
    --Holds Lock of h_dma value
    VAR h_dma.Lock,									init = HAL_LOCKED,													ev = init
    
    COMMENT INPUT/OUTPUT SECTION:

	--None
		
    COMMENT OUTPUT SECTION:
       
    --Return value of HALDmaStartIT
    VAR ret_HALDmaStartIT,							init = HAL_OK,														ev = HAL_BUSY
    
    -- Stub Calls :
		SIMUL
					
			--No stubs
		        		
		END SIMUL
		
    -- Calling the Unit Under Test :
    #ret_HALDmaStartIT = HALDmaStartIT(&h_dma, src_address, dest_address, data_length);
    
    END ELEMENT

END TEST -- TEST 4

--TEST 5
--FAMILY robustness
--    
--	COMMENT Test Description
--    COMMENT <TD> 
--    COMMENT [hdulibstm32f7xxhaldma-HALDmaStartIT-DB-LLR-001]
--    COMMENT This test case is evaluated by giving the invalid reference to input parameter h_dma
--    COMMENT Equivalence Class 80
--    COMMENT
--    COMMENT </TD>
--
--    ELEMENT
--    
--    COMMENT INPUT SECTION:
--    
--   	--None
--                   
--    COMMENT INPUT/OUTPUT SECTION:
--    
--    --None
--    
--    COMMENT OUTPUT SECTION:
--        
--    --None
--    
--    -- Stub Calls :
--		SIMUL
--						
--			--No stubs
--			        		
--		END SIMUL
--			
--	-- Calling the Unit Under Test :
--	#ret_HALDmaStartIT = HALDmaStartIT(NULL, src_address, dest_address, data_length);
--        
--	END ELEMENT
--
--END TEST -- TEST 5
    
END SERVICE -- HALDmaStartIT
 
--------------------------------------------------------------------------------
-- Declaration of the service HalDmaDeInit
--------------------------------------------------------------------------------
SERVICE HalDmaDeInit
SERVICE_TYPE extern

    -- Tested service parameters declarations
    #T_DMA_HANDLE h_dma;
    -- By function returned type declaration
    #T_HAL_STATUS ret_HalDmaDeInit;

    --Variable to assign StreamBaseAddress member
    #T_DMA_BASE_REGISTERS PTU_reg;
    
	-- Default Variables
	ENVIRONMENT ENV_HalDmaDeInit
	
		STRUCTURE h_dma,				init = { Instance => &PTU_Instance, Init => { Channel => 0, Direction => 0, PeriphInc => 0, MemInc => 0,
		& 								PeriphDataAlignment => 0, MemDataAlignment => 0, Mode => 0, Priority => 0, FIFOMode => 0, FIFOThreshold => 0, 
		&								MemBurst => 0, PeriphBurst => 0 }, Lock => HAL_UNLOCKED, State => HAL_DMA_STATE_RESET, Parent => &PTU_Parent, 
		&								XferCpltCallback => XferCpltCallback, XferHalfCpltCallback => XferHalfCpltCallback, XferM1CpltCallback => XferM1CpltCallback,
		&								XferM1HalfCpltCallback => XferM1HalfCpltCallback, XferErrorCallback => XferErrorCallback, XferAbortCallback =>  
		&								XferAbortCallback, ErrorCode => 0, StreamBaseAddress => 0, StreamIndex => 0 },			ev = init

		VAR PTU_Instance,				init = {others=>0},																		ev = init
	
        VAR ret_HalDmaDeInit,			init = HAL_OK,																			ev = init
        
    END ENVIRONMENT -- ENV_HalDmaDeInit
    
	USE ENV_HalDmaDeInit
	
TEST 1
FAMILY nominal
        
	COMMENT Test Description
    COMMENT <TD> 
    COMMENT	[hdulibstm32f7xxhaldma-HALDmaDeInit-DB-LLR-001]
    COMMENT	The function returns HAL_ERROR when h_dma is equal to NULL.
    COMMENT Equivalence Class 19
    COMMENT
    COMMENT	[hdulibstm32f7xxhaldma-HALDmaDeInit-DB-LLR-002]
    COMMENT	The function does nothing when State of h_dma is not equal to HAL_DMA_STATE_BUSY.
    COMMENT Equivalence Class 32
    COMMENT </TD>
    
    ELEMENT
    
    COMMENT INPUT SECTION:
		--None
    
    COMMENT INPUT/OUTPUT SECTION:
		--None
            
    COMMENT OUTPUT SECTION:
        
    --Return value of HalDmaDeInit
    VAR ret_HalDmaDeInit,				init = HAL_OK,																ev = HAL_ERROR
    
    -- Stub Calls :
		SIMUL
					
			--No stubs
		        		
		END SIMUL
		
    -- Calling the Unit Under Test :
    #ret_HalDmaDeInit = HalDmaDeInit(NULL);
    
    END ELEMENT

END TEST -- TEST 1
    
TEST 2
FAMILY nominal

	COMMENT Test Description
    COMMENT <TD> 
    COMMENT	[hdulibstm32f7xxhaldma-HALDmaDeInit-DB-LLR-001]
    COMMENT	The function does nothing when h_dma is not equal to NULL.
    COMMENT Equivalence Class 31
    COMMENT
    COMMENT	[hdulibstm32f7xxhaldma-HALDmaDeInit-DB-LLR-002]
    COMMENT	The function returns HAL_BUSY when State of h_dma is equal to HAL_DMA_STATE_BUSY.
    COMMENT Equivalence Class 20
    COMMENT </TD>
    
    ELEMENT
    
    COMMENT INPUT SECTION:

	VAR h_dma.State,					init = HAL_DMA_STATE_BUSY,													ev = init  				
	
    COMMENT INPUT/OUTPUT SECTION:
		--None
            		
    COMMENT OUTPUT SECTION: 
    
    --Return value of HalDmaDeInit
    VAR ret_HalDmaDeInit,				init = HAL_OK,																ev = HAL_BUSY
    
    -- Stub Calls :
		SIMUL
					
			--No stubs
		        		
		END SIMUL
		
    -- Calling the Unit Under Test :
    #ret_HalDmaDeInit = HalDmaDeInit(&h_dma);
    
    END ELEMENT

END TEST -- TEST 2
    
TEST 3
FAMILY nominal

	COMMENT Test Description
    COMMENT <TD> 
    COMMENT	[hdulibstm32f7xxhaldma-HALDmaDeInit-DB-LLR-003]
    COMMENT	The function calls macro __HAL_DMA_DISABLE with parameter h_dma.
    COMMENT Equivalence Class 96
    COMMENT
    COMMENT	[hdulibstm32f7xxhaldma-HALDmaDeInit-DB-LLR-004]
    COMMENT The function resets the registers of Instance of h_dma as below.
    COMMENT -CR to ZERO
    COMMENT -NDTR to ZERO
    COMMENT -PAR to ZERO
    COMMENT -M0AR to ZERO
    COMMENT -M1AR to ZERO
    COMMENT -FCR to DMA_FCR
    COMMENT Equivalence Class None
    COMMENT 
    COMMENT	[hdulibstm32f7xxhaldma-HALDmaDeInit-DB-LLR-005]
    COMMENT The function initialize the DMA stream Base Address as return value of the function 
    COMMENT DmaCalcBaseAndBitShift called with the parameter h_dma and clear the IFCR of DMA stream Base Address.
    COMMENT Equivalence Class 97
    COMMENT 
    COMMENT [hdulibstm32f7xxhaldma-DmaCalcBaseAndBitShift-DB-LLR-001]
    COMMENT The function sets Stream Number to result of Bitwise AND operation of Instance of h_dma and 
    COMMENT TWO_HUNDRED_FIFTY_FIVE subtracted by SIXTEEN divided by TWENTY_FOUR.
    COMMENT Equivalence Class None
    COMMENT
    COMMENT [hdulibstm32f7xxhaldma-DmaCalcBaseAndBitShift-DB-LLR-002]
	COMMENT The function sets StreamIndex of h_dma to Bit offset array with index Stream Number.
    COMMENT Equivalence Class None
    COMMENT
    COMMENT [hdulibstm32f7xxhaldma-DmaCalcBaseAndBitShift-DB-LLR-004]
	COMMENT The function sets StreamBaseAddress of h_dma to result of bitwise AND operation of Instance of h_dma and 
	COMMENT negation of  THOUSAND_TWENTY_THREE if Stream Number is less than THREE.
    COMMENT Equivalence Class 99   
    COMMENT
    COMMENT [hdulibstm32f7xxhaldma-DmaCalcBaseAndBitShift-DB-LLR-005]
	COMMENT The function returns StreamBaseAddress of h_dma.
    COMMENT Equivalence Class None
    COMMENT
    COMMENT	[hdulibstm32f7xxhaldma-HALDmaDeInit-DB-LLR-006]
    COMMENT The function updates the ErrorCode of h_dma as HAL_DMA_ERROR_NONE , State of h_dma 
    COMMENT to HAL_DMA_STATE_RESET ,release the lock by calling the macro __HAL_UNLOCK  with parameter h_dma  and return HAL_OK.
    COMMENT Equivalence Class 98
    COMMENT </TD>
    
    ELEMENT
    
    COMMENT INPUT SECTION:

	VAR h_dma.Instance ,                				init = DMA1_STREAM0_BASE,				ev = init
	
	
    COMMENT INPUT/OUTPUT SECTION:

	        
	--Holds StreamBaseAddress of h_dma value
	
    VAR h_dma.StreamBaseAddress,						init = (T_UINT32)&PTU_reg,				ev = 0x40026000
    
	
	--Holds PTU_reg value
	VAR ((T_DMA_BASE_REGISTERS*)0x40026000)->IFCR,		init = 0xFF,							ev =  0x0
    
    VAR h_dma.StreamIndex,          					init = 0x1,                        		ev = 0x0
    
    COMMENT OUTPUT SECTION:
    
    VAR h_dma.Instance->CR,								init = 0xFEFFFFF,						ev = ZERO
    
    VAR h_dma.Instance->NDTR, 							init = 0xFFFF,							ev = ZERO
    
    VAR h_dma.Instance->PAR,							init = (T_UINT32)0xFFFFFFFF,			ev = ZERO
    
    VAR h_dma.Instance->M0AR,							init = (T_UINT32)0xFFFFFFFF,			ev = ZERO
    
    VAR h_dma.Instance->M1AR,							init = (T_UINT32)0xFFFFFFFF,			ev = ZERO
    
    VAR h_dma.Instance->FCR,							init = 0x87,							ev = ZERO
    
    VAR h_dma.ErrorCode,  								init = 0x1,								ev = HAL_DMA_ERROR_NONE

  	VAR h_dma.State, 									init = HAL_DMA_STATE_RESET,								ev = HAL_DMA_STATE_RESET
  	
  	VAR h_dma.Lock,										init = HAL_LOCKED,						ev = HAL_UNLOCKED
  	
    --Return value of HalDmaDeInit
    VAR ret_HalDmaDeInit,								init = HAL_BUSY,						ev = HAL_OK
    
    -- Stub Calls :
		SIMUL
					
			--No stubs
		        		
		END SIMUL
		
    -- Calling the Unit Under Test :
    #ret_HalDmaDeInit = HalDmaDeInit(&h_dma);
    
    END ELEMENT

END TEST -- TEST 3

TEST 4
FAMILY nominal

	COMMENT Test Description
    COMMENT <TD> 
    COMMENT [hdulibstm32f7xxhaldma-DmaCalcBaseAndBitShift-DB-LLR-003]
	COMMENT The function sets StreamBaseAddress of h_dma to result of bitwise AND operation of Instance of h_dma and 
	COMMENT negation of  THOUSAND_TWENTY_THREE added with FOUR if Stream Number is greater than THREE.
    COMMENT Equivalence Class 100
    COMMENT </TD>
    
    ELEMENT
    
    COMMENT INPUT SECTION:

	VAR h_dma.Instance ,                				init = DMA1_STREAM7_BASE,				ev = init
	
	
    COMMENT INPUT/OUTPUT SECTION:

	        
	--Holds StreamBaseAddress of h_dma value
	
    VAR h_dma.StreamBaseAddress,						init = (T_UINT32)&PTU_reg,				ev = 0x40026004
    
	
	--Holds PTU_reg value
	VAR ((T_DMA_BASE_REGISTERS*)0x40026004)->IFCR,		init = 0xFF,							ev = 0x0
    
    VAR h_dma.StreamIndex,          					init = 0x1,                        		ev = 0x16
    
    COMMENT OUTPUT SECTION:
    
    VAR h_dma.Instance->CR,								init = 0xFEFFFFF,						ev = ZERO
    
    VAR h_dma.Instance->NDTR, 							init = 0xFFFF,							ev = ZERO
    
    VAR h_dma.Instance->PAR,							init = (T_UINT32)0xFFFFFFFF,			ev = ZERO
    
    VAR h_dma.Instance->M0AR,							init = (T_UINT32)0xFFFFFFFF,			ev = ZERO
    
    VAR h_dma.Instance->M1AR,							init = (T_UINT32)0xFFFFFFFF,			ev = ZERO
    
    VAR h_dma.Instance->FCR,							init = 0x87,							ev = ZERO
    
    VAR h_dma.ErrorCode,  								init = 0x1,								ev = HAL_DMA_ERROR_NONE

  	VAR h_dma.State, 									init = HAL_DMA_STATE_RESET,								ev = HAL_DMA_STATE_RESET
  	
  	VAR h_dma.Lock,										init = HAL_LOCKED,						ev = HAL_UNLOCKED
  	
    --Return value of HalDmaDeInit
    VAR ret_HalDmaDeInit,								init = HAL_BUSY,						ev = HAL_OK
    
    -- Stub Calls :
		SIMUL
					
			--No stubs
		        		
		END SIMUL
		
    -- Calling the Unit Under Test :
    #ret_HalDmaDeInit = HalDmaDeInit(&h_dma);
    
    END ELEMENT

END TEST -- TEST 4	

END SERVICE -- HalDmaDeInit

--------------------------------------------------------------------------------
-- Declaration of the service HalDmaInit
--------------------------------------------------------------------------------
SERVICE HalDmaInit
SERVICE_TYPE extern

    -- Tested service parameters declarations
    #T_DMA_HANDLE h_dma;
    -- By function returned type declaration
    #T_HAL_STATUS ret_HalDmaInit;

	--Variable to assign StreamBaseAddress member
	#T_DMA_BASE_REGISTERS PTU_reg;
	
	-- Default Variables
	ENVIRONMENT ENV_HalDmaInit

		STRUCTURE h_dma,				init = { Instance => &PTU_Instance, Init => { Channel => 0, Direction => 0, PeriphInc => 0, MemInc => 0,
		& 								PeriphDataAlignment => 0, MemDataAlignment => 0, Mode => 0, Priority => 0, FIFOMode => 0, FIFOThreshold => 0, 
		&								MemBurst => 0, PeriphBurst => 0 }, Lock => HAL_UNLOCKED, State => HAL_DMA_STATE_RESET, Parent => &PTU_Parent, 
		&								XferCpltCallback => XferCpltCallback, XferHalfCpltCallback => XferHalfCpltCallback, XferM1CpltCallback => XferM1CpltCallback,
		&								XferM1HalfCpltCallback => XferM1HalfCpltCallback, XferErrorCallback => XferErrorCallback, XferAbortCallback =>  
		&								XferAbortCallback, ErrorCode => 0, StreamBaseAddress => 0, StreamIndex => 0 },			ev = init
		
        VAR ret_HalDmaInit,		init = HAL_OK,		ev = init

	END ENVIRONMENT ENV_HalDmaInit

	USE ENV_HalDmaInit
	
TEST 1
FAMILY nominal

	COMMENT Test Description
    COMMENT <TD> 
	COMMENT	[hdulibstm32f7xxhaldma-HalDmaInit-DB-LLR-001]
	COMMENT	The function calls the function HALGetTick and store the returns value as start ticks.
	COMMENT	Equivalence Class 21
	COMMENT	
	COMMENT	[hdulibstm32f7xxhaldma-HalDmaInit-DB-LLR-002]
	COMMENT The function returns HAL_ERROR when h_dma is equal to NULL.
	COMMENT Equivalence Class 22
	COMMENT
	COMMENT </TD>
	
	ELEMENT
	
    COMMENT INPUT SECTION:
    
   	--None
    
    COMMENT INPUT/OUTPUT SECTION:
    
    --None
	
    COMMENT OUTPUT SECTION:
        
    --Return value of HalDmaInit
    VAR	ret_HalDmaInit,						init = HAL_TIMEOUT,													ev = HAL_ERROR
    
	-- Stub Calls :
		SIMUL
			
			--provides tick value in millisecond
	    	STUB HALGetTick() 0
	    		
	    END SIMUL
	    	
    -- Calling the Unit Under Test :
    #ret_HalDmaInit = HalDmaInit(NULL);
    
    END ELEMENT

END TEST -- TEST 1
       
TEST 2
FAMILY nominal

	COMMENT Test Description
    COMMENT <TD> 
	COMMENT	[hdulibstm32f7xxhaldma-HalDmaInit-DB-LLR-002]
	COMMENT The function does nothing when h_dma is not equal to NULL.
	COMMENT Equivalence Class 23
	COMMENT
	COMMENT	[hdulibstm32f7xxhaldma-HalDmaInit-DB-LLR-003]
	COMMENT The function calls the macro __HAL_UNLOCK with parameter h_dma to allocate lock resource.
	COMMENT Equivalence Class 24
	COMMENT
	COMMENT	[hdulibstm32f7xxhaldma-HalDmaInit-DB-LLR-004]
	COMMENT	The function sets the State of h_dma to HAL_DMA_STATE_BUSY.
	COMMENT Equivalence Class None
	COMMENT
	COMMENT	[hdulibstm32f7xxhaldma-HalDmaInit-DB-LLR-005]
	COMMENT	The function calls the macro __HAL_DMA_DISABLE with parameter h_dma.
	COMMENT Equivalence Class 25
	COMMENT
	COMMENT	[hdulibstm32f7xxhaldma-HalDmaInit-DB-LLR-006]	
	COMMENT The function does nothing when result of bitwise AND operation of DMA_SXCR_EN and CR of Instance of h_dma is equal to RESET
	COMMENT Equivalence Class None
	COMMENT 
	COMMENT	[hdulibstm32f7xxhaldma-HalDmaInit-DB-LLR-007]
	COMMENT	The function clear the CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, CT, DBM and 
	COMMENT	DIR bits of configuration register (CR) of Instance of h_dma and configure the same register with Channel, Direction,PeriphInc, 
	COMMENT	MemInc, PeriphDataAlignment, MemDataAlignment, Mode and Priority of Init of h_dma.
	COMMENT Equivalence Class None
	COMMENT
	COMMENT	[hdulibstm32f7xxhaldma-HalDmaInit-DB-LLR-008]
	COMMENT	The function configures CR of Instance of h_dma with MemBurst and PeriphBurst of Init of h_dma when FIFOMode of Init of 
	COMMENT h_dma is DMA_FIFOMODE_ENABLE.
	COMMENT Equivalence Class 26
	COMMENT
	COMMENT	[hdulibstm32f7xxhaldma-HalDmaInit-DB-LLR-009]
	COMMENT	The function clears Direct mode and FIFO threshold bits of FCR of Instance of h_dma and configure the same with FIFOMode of 
	COMMENT Init of dma.
	COMMENT Equivalence Class None
	COMMENT
	COMMENT	[hdulibstm32f7xxhaldma-HalDmaInit-DB-LLR-010]
	COMMENT	The function does the following when the FIFOMode of Init of h_dma is DMA_FIFOMODE_ENABLE.
	COMMENT 1. Get the FIFOThreshold of Init of h_dma.
	COMMENT 2. Update the ErrorCode of h_dma as HAL_DMA_ERROR_PARAM and State of h_dma to HAL_DMA_STATE_READY and returns HAL_ERROR when 
	COMMENT returns value of the function DmaCheckFifoParam called with parameter h_dma is not equal to HAL_OK.
	COMMENT 3. Write the FIFOThreshold of Init of h_dma to FCR of Instance of h_dma
	COMMENT Equivalence Class 26, 28
	COMMENT
	COMMENT	[hdulibstm32f7xxhaldma-DmaCheckFifoParam-DB-LLR-001]
	COMMENT	The function returns status as HAL_ERROR when the below conditions are met.
	COMMENT 1.	MemDataAlignment of Init of h_dma is equal to DMA_MDATAALIGN_BYTE.
	COMMENT 2.	FIFOThreshold of Init of h_dma is equal to DMA_FIFO_THRESHOLD_1QUARTERFULL.
	COMMENT 3. Result of bitwise AND operation of MemBurst of Init of h_dma and DMA_SXCR_MBURST_1 is equal to DMA_SXCR_MBURST_1.
	COMMENT Equivalence Class 82, 83, 84
	COMMENT
	COMMENT </TD>
	
	ELEMENT
	
	COMMENT INPUT SECTION:
	
	--Holds Channel of Init of h_dma value
	VAR h_dma.Init.Channel,					init = 0xFF,															ev = init
	
	--Holds Direction of Init of h_dma value
	VAR h_dma.Init.Direction,				init = 0xFF,															ev = init
	
	--Holds PeriphInc of Init of h_dma value
	VAR h_dma.Init.PeriphInc, 				init = 0xFF,															ev = init
	
	--Holds MemInc of Init of h_dma value
	VAR h_dma.Init.MemInc,					init = 0xFF,															ev = init
	
	--Holds PeriphDataAlignment of Init of h_dma value
	VAR h_dma.Init.PeriphDataAlignment,		init = 0xFF,															ev = init 
	
	--Holds MemDataAlignment of Init of h_dma value
	VAR h_dma.Init.MemDataAlignment,		init = DMA_MDATAALIGN_BYTE,												ev = init
	
	--Holds Mode of Init of h_dma value
	VAR h_dma.Init.Mode,					init = 0xFF,															ev = init
	
	--Holds Priority of Init of h_dma value
	VAR h_dma.Init.Priority,				init = 0xFF,															ev = init
	
	--Holds FIFOMode of Init of h_dma value
	VAR h_dma.Init.FIFOMode,				init = DMA_FIFOMODE_ENABLE,												ev = init
	
	--Holds MemBurst of Init of h_dma value
	VAR h_dma.Init.MemBurst,				init = DMA_SXCR_MBURST_1,												ev = init
	
	--Holds PeriphBurst of Init of h_dma value
	VAR h_dma.Init.PeriphBurst,				init = 0xFF,															ev = init
	
	--Holds FIFOThreshold of Init of h_dma value
	VAR h_dma.Init.FIFOThreshold,			init = DMA_FIFO_THRESHOLD_1QUARTERFULL,									ev = init
	
	--Holds FCR of Instance of h_dma value
	VAR h_dma.Instance->FCR,				init = 0x57,															ev = init
	
	COMMENT INPUT/OUTPUT SECTION:
	
	--Holds CR of Instance of h_dma value
	VAR h_dma.Instance->CR,					init = 0xFEF7F80,														ev = 0x10000FF
		
	COMMENT OUTPUT SECTION:
	
	VAR h_dma.Lock,							init = HAL_LOCKED,														ev = HAL_UNLOCKED
	
	--Holds State of h_dma value
	VAR h_dma.State,						init = HAL_DMA_STATE_RESET,												ev = HAL_DMA_STATE_READY
	
	--Holds ErrorCode of h_dma value
	VAR h_dma.ErrorCode,					init = 0x1,																ev = HAL_DMA_ERROR_PARAM
	
	--Return value of HalDmaInit
	VAR	ret_HalDmaInit,						init = HAL_OK,															ev = HAL_ERROR
	
	-- Stub Calls :
		SIMUL
		
			--provides tick value in millisecond
			STUB HALGetTick() 5
			
		END SIMUL
		
	-- Calling the Unit Under Test :
	#ret_HalDmaInit = HalDmaInit(&h_dma);
	
	END ELEMENT
	
END TEST -- TEST 2
    
TEST 3
FAMILY nominal

	COMMENT Test Description
    COMMENT <TD>		
	COMMENT	[hdulibstm32f7xxhaldma-HalDmaInit-DB-LLR-010]
	COMMENT	The function does the following when the FIFOMode of Init of h_dma is DMA_FIFOMODE_ENABLE.
	COMMENT 1. Get the FIFOThreshold of Init of h_dma.
	COMMENT 2. Do nothing when returns value of the function DmaCheckFifoParam called with parameter h_dma is equal to HAL_OK.
	COMMENT 3. Write the FIFOThreshold of Init of h_dma to FCR of Instance of h_dma
	COMMENT Equivalence Class 26, 29
	COMMENT
	COMMENT	[hdulibstm32f7xxhaldma-DmaCheckFifoParam-DB-LLR-001]
	COMMENT	The function does nothing when the below conditions are met.
	COMMENT 1.	MemDataAlignment of Init of h_dma is equal to DMA_MDATAALIGN_BYTE.
	COMMENT 2.	FIFOThreshold of Init of h_dma is equal to DMA_FIFO_THRESHOLD_1QUARTERFULL.
	COMMENT 3. Result of bitwise AND operation of MemBurst of Init of h_dma and DMA_SXCR_MBURST_1 is not equal to DMA_SXCR_MBURST_1.
	COMMENT Equivalence Class 82, 83, 85
	COMMENT 
	COMMENT [hdulibstm32f7xxhaldma-HalDmaInit-DB-LLR-011]
	COMMENT The function initialzes the DMA stream Base Address as returns value of the function DmaCalcBaseAndBitShift called with the 
	COMMENT parameter h_dma and clear the interrupt flags (IFCR) of DMA stream Base Address
	COMMENT Equivalence Class 30
	COMMENT 
	COMMENT [hdulibstm32f7xxhaldma-HalDmaInit-DB-LLR-012]
	COMMENT The function updates the ErrorCode of h_dma as HAL_DMA_ERROR_NONE and State of h_dma to HAL_DMA_STATE_READY and returns 
	COMMENT HAL_OK.
	COMMENT Equivalence Class None
	COMMENT			
    COMMENT [hdulibstm32f7xxhaldma-DmaCalcBaseAndBitShift-DB-LLR-001]
    COMMENT The function sets Stream Number to result of Bitwise AND operation of Instance of h_dma and 
    COMMENT TWO_HUNDRED_FIFTY_FIVE subtracted by SIXTEEN divided by TWENTY_FOUR.
    COMMENT Equivalence Class None
    COMMENT
    COMMENT [hdulibstm32f7xxhaldma-DmaCalcBaseAndBitShift-DB-LLR-002]
	COMMENT The function sets StreamIndex of h_dma to Bit offset array with index Stream Number.
    COMMENT Equivalence Class None
    COMMENT [hdulibstm32f7xxhaldma-DmaCalcBaseAndBitShift-DB-LLR-003]
	COMMENT The function sets StreamBaseAddress of h_dma to result of bitwise AND operation of Instance of h_dma and 
	COMMENT negation of  THOUSAND_TWENTY_THREE added with FOUR if Stream Number is greater than THREE.
    COMMENT Equivalence Class 100
    COMMENT
    COMMENT [hdulibstm32f7xxhaldma-DmaCalcBaseAndBitShift-DB-LLR-005]
	COMMENT The function returns StreamBaseAddress of h_dma.
    COMMENT Equivalence Class None
    COMMENT </TD>
    
    ELEMENT
    
	COMMENT INPUT SECTION:
		
	--Holds Channel of Init of h_dma value
	VAR h_dma.Init.Channel,					init = (T_UINT32)0xFFFFFFFF,											ev = init
		
	--Holds Direction of Init of h_dma value
	VAR h_dma.Init.Direction,				init = (T_UINT32)0xFFFFFFFF,											ev = init
	
	--Holds PeriphInc of Init of h_dma value
	VAR h_dma.Init.PeriphInc, 				init = (T_UINT32)0xFFFFFFFF,											ev = init
	
	--Holds MemInc of Init of h_dma value
	VAR h_dma.Init.MemInc,					init = (T_UINT32)0xFFFFFFFF,											ev = init
	
	--Holds PeriphDataAlignment of Init of h_dma value
	VAR h_dma.Init.PeriphDataAlignment,		init = (T_UINT32)0xFFFFFFFF,											ev = init 
	
	--Holds MemDataAlignment of Init of h_dma value
	VAR h_dma.Init.MemDataAlignment,		init = DMA_MDATAALIGN_BYTE,												ev = init
	
	--Holds Mode of Init of h_dma value
	VAR h_dma.Init.Mode,					init = (T_UINT32)0xFFFFFFFF,											ev = init
	
	--Holds Priority of Init of h_dma value
	VAR h_dma.Init.Priority,				init = (T_UINT32)0xFFFFFFFF,											ev = init
		
	--Holds FIFOMode of Init of h_dma value
	VAR h_dma.Init.FIFOMode,				init = DMA_FIFOMODE_ENABLE,												ev = init
	
	--Holds MemBurst of Init of h_dma value
	VAR h_dma.Init.MemBurst,				init = 0xFF,															ev = init
	
	--Holds PeriphBurst of Init of h_dma value
	VAR h_dma.Init.PeriphBurst,				init = (T_UINT32)0xFFFFFFFF,											ev = init
	
	--Holds FIFOThreshold of Init of h_dma value
	VAR h_dma.Init.FIFOThreshold,			init = DMA_FIFO_THRESHOLD_1QUARTERFULL,									ev = init
	
	VAR h_dma.Instance ,                	init = DMA1_STREAM7_BASE,												ev = init
	
	COMMENT INPUT/OUTPUT SECTION:
	
	VAR h_dma.StreamBaseAddress,			init = (T_UINT32)&PTU_reg,												ev = 0x40026004
	
	--Holds CR of Instance of h_dma value
	VAR h_dma.Instance->CR,					init = 0xFEF7F80,														ev = 0x0
	
	--Holds FCR of Instance of h_dma value
	VAR h_dma.Instance->FCR,				init = 0x57,															ev = 0x0
			
	COMMENT OUTPUT SECTION:
	
	VAR ((T_DMA_BASE_REGISTERS*)0x40026004)->IFCR,		init = 0xFF,												ev = 0x0
	    
    VAR h_dma.StreamIndex,          					init = 0x1,                        							ev = 0x16
	
	--Holds State of h_dma value
	VAR h_dma.State,						init = HAL_DMA_STATE_RESET,												ev = HAL_DMA_STATE_READY
		
	--Holds ErrorCode of h_dma value
	VAR h_dma.ErrorCode,					init = (T_UINT32)0xFFFFFFFF,											ev = HAL_DMA_ERROR_NONE
	
	--Return value of HalDmaInit
	VAR	ret_HalDmaInit,						init = HAL_ERROR,														ev = HAL_OK
	
	-- Stub Calls :
		SIMUL
		
			--provides tick value in millisecond
			STUB HALGetTick() 100
			
		END SIMUL
			
	-- Calling the Unit Under Test :
	#ret_HalDmaInit = HalDmaInit(&h_dma);
	
	END ELEMENT
		
END TEST -- TEST 3
    
TEST 4
FAMILY nominal

	COMMENT Test Description
    COMMENT <TD>		
	COMMENT	[hdulibstm32f7xxhaldma-HalDmaInit-DB-LLR-010]
	COMMENT	The function does the following when the FIFOMode of Init of h_dma is DMA_FIFOMODE_ENABLE.
	COMMENT 1. Get the FIFOThreshold of Init of h_dma.
	COMMENT 2. Update the ErrorCode of h_dma as HAL_DMA_ERROR_PARAM and State of h_dma to HAL_DMA_STATE_READY and returns HAL_ERROR when 
	COMMENT returns value of the function DmaCheckFifoParam called with parameter h_dma is not equal to HAL_OK.
	COMMENT 3. Write the FIFOThreshold of Init of h_dma to FCR of Instance of h_dma
	COMMENT Equivalence Class 26, 28
	COMMENT 
	COMMENT [hdulibstm32f7xxhaldma-DmaCheckFifoParam-DB-LLR-002] 
	COMMENT The function returns status as HAL_ERROR when the below conditions are met.
	COMMENT 1.	MemDataAlignment of Init of h_dma is equal to DMA_MDATAALIGN_BYTE.
	COMMENT 2.	FIFOThreshold of Init of h_dma is equal to DMA_FIFO_THRESHOLD_HALFFULL.
	COMMENT 3.	MemBurst of Init of h_dma  is equal to DMA_MBURST_INC16.
	COMMENT Equivalence Class 82, 86, 87
    COMMENT </TD>
    
    ELEMENT
    
	COMMENT INPUT SECTION:
	
	--Holds Channel of Init of h_dma value
	VAR h_dma.Init.Channel,					init = 0xFF,															ev = init
	
	--Holds Direction of Init of h_dma value
	VAR h_dma.Init.Direction,				init = 0xFF,															ev = init
	
	--Holds PeriphInc of Init of h_dma value
	VAR h_dma.Init.PeriphInc, 				init = 0xFF,															ev = init
	
	--Holds MemInc of Init of h_dma value
	VAR h_dma.Init.MemInc,					init = 0xFF,															ev = init
	
	--Holds PeriphDataAlignment of Init of h_dma value
	VAR h_dma.Init.PeriphDataAlignment,		init = 0xFF,															ev = init 
	
	--Holds MemDataAlignment of Init of h_dma value
	VAR h_dma.Init.MemDataAlignment,		init = DMA_MDATAALIGN_BYTE,												ev = init
	
	--Holds Mode of Init of h_dma value
	VAR h_dma.Init.Mode,					init = 0xFF,															ev = init
	
	--Holds Priority of Init of h_dma value
	VAR h_dma.Init.Priority,				init = 0xFF,															ev = init
	
	--Holds FIFOMode of Init of h_dma value
	VAR h_dma.Init.FIFOMode,				init = DMA_FIFOMODE_ENABLE,												ev = init
	
	--Holds MemBurst of Init of h_dma value
	VAR h_dma.Init.MemBurst,				init = DMA_MBURST_INC16,												ev = init
	
	--Holds PeriphBurst of Init of h_dma value
	VAR h_dma.Init.PeriphBurst,				init = 0xFF,															ev = init
	
	--Holds FIFOThreshold of Init of h_dma value
	VAR h_dma.Init.FIFOThreshold,			init = DMA_FIFO_THRESHOLD_HALFFULL,										ev = init
	
	COMMENT INPUT/OUTPUT SECTION:
	
	--Holds CR of Instance of h_dma value
	VAR h_dma.Instance->CR,					init = 0xFEF7F80,														ev = 0x18000FF
	
	--Holds FCR of Instance of h_dma value
	VAR h_dma.Instance->FCR,				init = 0x57,															ev = 0x57
		
	COMMENT OUTPUT SECTION:
	
	--Holds State of h_dma value
	VAR h_dma.State,						init = HAL_DMA_STATE_RESET,												ev = HAL_DMA_STATE_READY
	
	--Holds ErrorCode of h_dma value
	VAR h_dma.ErrorCode,					init = 0x1,																ev = HAL_DMA_ERROR_PARAM
	
	--Return value of HalDmaInit
	VAR	ret_HalDmaInit,						init = HAL_OK,															ev = HAL_ERROR
	
	-- Stub Calls :
		SIMUL
		
			--provides tick value in millisecond
			STUB HALGetTick() 5
			
		END SIMUL
		
	-- Calling the Unit Under Test :
	#ret_HalDmaInit = HalDmaInit(&h_dma);
	
	END ELEMENT
	
END TEST -- TEST 4

TEST 5
FAMILY nominal

	COMMENT Test Description
    COMMENT <TD>
	COMMENT	[hdulibstm32f7xxhaldma-HalDmaInit-DB-LLR-010]
	COMMENT	The function does the following when the FIFOMode of Init of h_dma is DMA_FIFOMODE_ENABLE.
	COMMENT 1. Get the FIFOThreshold of Init of h_dma.
	COMMENT 2. Do nothing when returns value of the function DmaCheckFifoParam called with parameter h_dma is equal to HAL_OK.
	COMMENT 3. Write the FIFOThreshold of Init of h_dma to FCR of Instance of h_dma
	COMMENT Equivalence Class 26, 29
	COMMENT 
	COMMENT [hdulibstm32f7xxhaldma-DmaCheckFifoParam-DB-LLR-002] 
	COMMENT The function does nothing when the below conditions are met.
	COMMENT 1.	MemDataAlignment of Init of h_dma is equal to DMA_MDATAALIGN_BYTE.
	COMMENT 2.	FIFOThreshold of Init of h_dma is equal to DMA_FIFO_THRESHOLD_HALFFULL.
	COMMENT 3.	MemBurst of Init of h_dma  is not equal to DMA_MBURST_INC16.
	COMMENT Equivalence Class 82, 86, 88
	COMMENT
	COMMENT [hdulibstm32f7xxhaldma-HalDmaInit-DB-LLR-011]
	COMMENT The function initialzes the DMA stream Base Address as returns value of the function DmaCalcBaseAndBitShift called with the
	COMMENT parameter h_dma and clear the interrupt flags (IFCR) of DMA stream Base Address
	COMMENT Equivalence Class 30
	COMMENT 
	COMMENT [hdulibstm32f7xxhaldma-HalDmaInit-DB-LLR-012]
	COMMENT The function updates the ErrorCode of h_dma as HAL_DMA_ERROR_NONE and State of h_dma to HAL_DMA_STATE_READY and returns 
	COMMENT HAL_OK.
	COMMENT Equivalence Class None	
    COMMENT </TD>
    
    ELEMENT
    
	COMMENT INPUT SECTION:
	
	--Holds Channel of Init of h_dma value
	VAR h_dma.Init.Channel,					init = 0xFF,															ev = init
	
	--Holds Direction of Init of h_dma value
	VAR h_dma.Init.Direction,				init = 0xFF,															ev = init
	
	--Holds PeriphInc of Init of h_dma value
	VAR h_dma.Init.PeriphInc, 				init = 0xFF,															ev = init
	
	--Holds MemInc of Init of h_dma value
	VAR h_dma.Init.MemInc,					init = 0xFF,															ev = init
	
	--Holds PeriphDataAlignment of Init of h_dma value
	VAR h_dma.Init.PeriphDataAlignment,		init = 0xFF,															ev = init 
	
	--Holds MemDataAlignment of Init of h_dma value
	VAR h_dma.Init.MemDataAlignment,		init = DMA_MDATAALIGN_BYTE,												ev = init
	
	--Holds Mode of Init of h_dma value
	VAR h_dma.Init.Mode,					init = 0xFF,															ev = init
	
	--Holds Priority of Init of h_dma value
	VAR h_dma.Init.Priority,				init = 0xFF,															ev = init
	
	--Holds FIFOMode of Init of h_dma value
	VAR h_dma.Init.FIFOMode,				init = DMA_FIFOMODE_ENABLE,												ev = init
	
	--Holds MemBurst of Init of h_dma value
	VAR h_dma.Init.MemBurst,				init = 0xFF,												ev = init
	
	--Holds PeriphBurst of Init of h_dma value
	VAR h_dma.Init.PeriphBurst,				init = 0xFF,															ev = init
	
	--Holds FIFOThreshold of Init of h_dma value
	VAR h_dma.Init.FIFOThreshold,			init = DMA_FIFO_THRESHOLD_HALFFULL,										ev = init
	
	VAR h_dma.Instance ,                	init = DMA1_STREAM7_BASE,												ev = init
	
	COMMENT INPUT/OUTPUT SECTION:
	
	--Holds CR of Instance of h_dma value
	VAR h_dma.Instance->CR,					init = 0xFEF7F80,														ev = 0x0
	
	--Holds FCR of Instance of h_dma value
	VAR h_dma.Instance->FCR,				init = 0x57,															ev = 0x0
	
	VAR h_dma.StreamBaseAddress,			init = (T_UINT32)&PTU_reg,												ev = 0x40026004
				
	COMMENT OUTPUT SECTION:
		
	VAR ((T_DMA_BASE_REGISTERS*)0x40026004)->IFCR,		init = 0xFF,												ev = 0x0
		    
    VAR h_dma.StreamIndex,          					init = 0x1,                        							ev = 0x16
	
	--Holds State of h_dma value
	VAR h_dma.State,						init = HAL_DMA_STATE_RESET,												ev = HAL_DMA_STATE_READY
	
	--Holds ErrorCode of h_dma value
	VAR h_dma.ErrorCode,					init = 0x1,																ev = HAL_DMA_ERROR_NONE
	
	--Return value of HalDmaInit
	VAR	ret_HalDmaInit,						init = HAL_ERROR,														ev = HAL_OK
	
	-- Stub Calls :
		SIMUL
		
			--provides tick value in millisecond
			STUB HALGetTick() 5
			
		END SIMUL
		
	-- Calling the Unit Under Test :
	#ret_HalDmaInit = HalDmaInit(&h_dma);
	
	END ELEMENT
	
END TEST -- TEST 5

TEST 6
FAMILY nominal

	COMMENT Test Description
    COMMENT <TD>		
	COMMENT	[hdulibstm32f7xxhaldma-HalDmaInit-DB-LLR-010]
	COMMENT	The function does the following when the FIFOMode of Init of h_dma is DMA_FIFOMODE_ENABLE.
	COMMENT 1. Get the FIFOThreshold of Init of h_dma.
	COMMENT 2. Do nothing when returns value of the function DmaCheckFifoParam called with parameter h_dma is equal to HAL_OK.
	COMMENT 3. Write the FIFOThreshold of Init of h_dma to FCR of Instance of h_dma
	COMMENT Equivalence Class 26, 29
	COMMENT 
	COMMENT [hdulibstm32f7xxhaldma-DmaCheckFifoParam-DB-LLR-003] 
	COMMENT The function does nothing when the below conditions are met.
	COMMENT 1.	MemDataAlignment of Init of h_dma is equal to DMA_MDATAALIGN_BYTE.
	COMMENT 2.	FIFOThreshold of Init of h_dma is equal to DMA_FIFO_THRESHOLD_3QUARTERSFULL.
	COMMENT 3.	Result of bitwise AND operation of MemBurst  of Init  of h_dma  and DMA_SXCR_MBURST_1 is not equal to DMA_SXCR_MBURST_1.
	COMMENT Equivalence Class 82, 89, 85
	COMMENT
	COMMENT [hdulibstm32f7xxhaldma-HalDmaInit-DB-LLR-011]
	COMMENT The function initialzes the DMA stream Base Address as returns value of the function DmaCalcBaseAndBitShift called with the
	COMMENT parameter h_dma and clear the interrupt flags (IFCR) of DMA stream Base Address
	COMMENT Equivalence Class 30
	COMMENT 
	COMMENT [hdulibstm32f7xxhaldma-HalDmaInit-DB-LLR-012]
	COMMENT The function updates the ErrorCode of h_dma as HAL_DMA_ERROR_NONE and State of h_dma to HAL_DMA_STATE_READY and returns
	COMMENT HAL_OK.
	COMMENT Equivalence Class None	
    COMMENT </TD>
    
    ELEMENT
    
	COMMENT INPUT SECTION:
	
	--Holds Channel of Init of h_dma value
	VAR h_dma.Init.Channel,					init = 0xFF,															ev = init
	
	--Holds Direction of Init of h_dma value
	VAR h_dma.Init.Direction,				init = 0xFF,															ev = init
	
	--Holds PeriphInc of Init of h_dma value
	VAR h_dma.Init.PeriphInc, 				init = 0xFF,															ev = init
	
	--Holds MemInc of Init of h_dma value
	VAR h_dma.Init.MemInc,					init = 0xFF,															ev = init
	
	--Holds PeriphDataAlignment of Init of h_dma value
	VAR h_dma.Init.PeriphDataAlignment,		init = 0xFF,															ev = init 
	
	--Holds MemDataAlignment of Init of h_dma value
	VAR h_dma.Init.MemDataAlignment,		init = DMA_MDATAALIGN_BYTE,												ev = init
	
	--Holds Mode of Init of h_dma value
	VAR h_dma.Init.Mode,					init = 0xFF,															ev = init
	
	--Holds Priority of Init of h_dma value
	VAR h_dma.Init.Priority,				init = 0xFF,															ev = init
	
	--Holds FIFOMode of Init of h_dma value
	VAR h_dma.Init.FIFOMode,				init = DMA_FIFOMODE_ENABLE,												ev = init
	
	--Holds MemBurst of Init of h_dma value
	VAR h_dma.Init.MemBurst,				init = 0xFF,												ev = init
	
	--Holds PeriphBurst of Init of h_dma value
	VAR h_dma.Init.PeriphBurst,				init = 0xFF,															ev = init
	
	--Holds FIFOThreshold of Init of h_dma value
	VAR h_dma.Init.FIFOThreshold,			init = DMA_FIFO_THRESHOLD_3QUARTERSFULL,								ev = init
			
	VAR h_dma.Instance ,                	init = DMA1_STREAM7_BASE,												ev = init
	
	COMMENT INPUT/OUTPUT SECTION:
	
	--Holds CR of Instance of h_dma value
	VAR h_dma.Instance->CR,					init = 0xFEF7F80,														ev = 0x0
		
	--Holds FCR of Instance of h_dma value
	VAR h_dma.Instance->FCR,				init = 0x57,															ev = 0x0
		
	VAR h_dma.StreamBaseAddress,			init = (T_UINT32)&PTU_reg,												ev = 0x40026004
				
	COMMENT OUTPUT SECTION:
			
	VAR ((T_DMA_BASE_REGISTERS*)0x40026004)->IFCR,		init = 0xFF,												ev = 0x0
			    
    VAR h_dma.StreamIndex,          					init = 0x1,                        							ev = 0x16
	
	--Holds State of h_dma value
	VAR h_dma.State,						init = HAL_DMA_STATE_RESET,												ev = HAL_DMA_STATE_READY
	
	--Holds ErrorCode of h_dma value
	VAR h_dma.ErrorCode,					init = 0x1,																ev = HAL_DMA_ERROR_NONE
	
	--Return value of HalDmaInit
	VAR	ret_HalDmaInit,						init = HAL_ERROR,														ev = HAL_OK
	
	-- Stub Calls :
		SIMUL
		
			--provides tick value in millisecond
			STUB HALGetTick() 5
			
		END SIMUL
		
	-- Calling the Unit Under Test :
	#ret_HalDmaInit = HalDmaInit(&h_dma);
	
	END ELEMENT
	
END TEST -- TEST 6

TEST 7
FAMILY nominal

	COMMENT Test Description
    COMMENT <TD>		
	COMMENT	[hdulibstm32f7xxhaldma-HalDmaInit-DB-LLR-010]
	COMMENT	The function does the following when the FIFOMode of Init of h_dma is DMA_FIFOMODE_ENABLE.
	COMMENT 1. Get the FIFOThreshold of Init of h_dma.
	COMMENT 2. Update the ErrorCode of h_dma as HAL_DMA_ERROR_PARAM and State of h_dma to HAL_DMA_STATE_READY and returns HAL_ERROR when 
	COMMENT returns value of the function DmaCheckFifoParam called with parameter h_dma is not equal to HAL_OK.
	COMMENT 3. Write the FIFOThreshold of Init of h_dma to FCR of Instance of h_dma
	COMMENT Equivalence Class 26, 28
	COMMENT 
	COMMENT [hdulibstm32f7xxhaldma-DmaCheckFifoParam-DB-LLR-003] 
	COMMENT The function returns status as HAL_ERROR when the below conditions are met.
	COMMENT 1.	MemDataAlignment of Init of h_dma is equal to DMA_MDATAALIGN_BYTE.
	COMMENT 2.	FIFOThreshold of Init of h_dma is equal to DMA_FIFO_THRESHOLD_3QUARTERSFULL.
	COMMENT 3.	Result of bitwise AND operation of MemBurst  of Init  of h_dma  and DMA_SXCR_MBURST_1 is equal to DMA_SXCR_MBURST_1.
	COMMENT Equivalence Class 82, 89, 84
    COMMENT </TD>
    
    ELEMENT
    
	COMMENT INPUT SECTION:
	
	--Holds Channel of Init of h_dma value
	VAR h_dma.Init.Channel,					init = 0xFF,															ev = init
	
	--Holds Direction of Init of h_dma value
	VAR h_dma.Init.Direction,				init = 0xFF,															ev = init
	
	--Holds PeriphInc of Init of h_dma value
	VAR h_dma.Init.PeriphInc, 				init = 0xFF,															ev = init
	
	--Holds MemInc of Init of h_dma value
	VAR h_dma.Init.MemInc,					init = 0xFF,															ev = init
	
	--Holds PeriphDataAlignment of Init of h_dma value
	VAR h_dma.Init.PeriphDataAlignment,		init = 0xFF,															ev = init 
	
	--Holds MemDataAlignment of Init of h_dma value
	VAR h_dma.Init.MemDataAlignment,		init = DMA_MDATAALIGN_BYTE,												ev = init
	
	--Holds Mode of Init of h_dma value
	VAR h_dma.Init.Mode,					init = 0xFF,															ev = init
	
	--Holds Priority of Init of h_dma value
	VAR h_dma.Init.Priority,				init = 0xFF,															ev = init
	
	--Holds FIFOMode of Init of h_dma value
	VAR h_dma.Init.FIFOMode,				init = DMA_FIFOMODE_ENABLE,												ev = init
	
	--Holds MemBurst of Init of h_dma value
	VAR h_dma.Init.MemBurst,				init = DMA_SXCR_MBURST_1,												ev = init
	
	--Holds PeriphBurst of Init of h_dma value
	VAR h_dma.Init.PeriphBurst,				init = 0xFF,															ev = init
	
	--Holds FIFOThreshold of Init of h_dma value
	VAR h_dma.Init.FIFOThreshold,			init = DMA_FIFO_THRESHOLD_3QUARTERSFULL,								ev = init
			
	--Holds FCR of Instance of h_dma value
	VAR h_dma.Instance->FCR,				init = 0x57,															ev = init
	
	COMMENT INPUT/OUTPUT SECTION:
	
	--Holds CR of Instance of h_dma value
	VAR h_dma.Instance->CR,					init = 0xFEF7F80,														ev = 0x10000FF
	
	COMMENT OUTPUT SECTION:
	
	--Holds State of h_dma value
	VAR h_dma.State,						init = HAL_DMA_STATE_RESET,												ev = HAL_DMA_STATE_READY
	
	--Holds ErrorCode of h_dma value
	VAR h_dma.ErrorCode,					init = 0x1,																ev = HAL_DMA_ERROR_PARAM
	
	--Return value of HalDmaInit
	VAR	ret_HalDmaInit,						init = HAL_OK,															ev = HAL_ERROR
	
	-- Stub Calls :
		SIMUL
			
			--provides tick value in millisecond
			STUB HALGetTick() 5
			
		END SIMUL
		
	-- Calling the Unit Under Test :
	#ret_HalDmaInit = HalDmaInit(&h_dma);
	
	END ELEMENT
	
END TEST -- TEST 7

TEST 8
FAMILY nominal

	COMMENT Test Description
    COMMENT <TD>		
	COMMENT	[hdulibstm32f7xxhaldma-HalDmaInit-DB-LLR-010]
	COMMENT	The function does the following when the FIFOMode of Init of h_dma is DMA_FIFOMODE_ENABLE.
	COMMENT 1. Get the FIFOThreshold of Init of h_dma.
	COMMENT 2. Do nothing when returns value of the function DmaCheckFifoParam called with parameter h_dma is equal to HAL_OK.
	COMMENT 3. Write the FIFOThreshold of Init of h_dma to FCR of Instance of h_dma
	COMMENT Equivalence Class 26, 29
	COMMENT 
	COMMENT [hdulibstm32f7xxhaldma-DmaCheckFifoParam-DB-LLR-004] 
	COMMENT The function returns HAL_OK when the below conditions are met.
	COMMENT 1. MemDataAlignment of Init of h_dma is equal to DMA_MDATAALIGN_BYTE.
    COMMENT 2. FIFO Threshold of Init of h_dma is equal to DMA_FIFO_THRESHOLD_FULL.
	COMMENT Equivalence Class 82, 92
	COMMENT
	COMMENT [hdulibstm32f7xxhaldma-HalDmaInit-DB-LLR-011]
	COMMENT The function initialzes the DMA stream Base Address as returns value of the function DmaCalcBaseAndBitShift called with the
	COMMENT parameter h_dma and clear the interrupt flags (IFCR) of DMA stream Base Address
	COMMENT Equivalence Class 30
	COMMENT 
	COMMENT [hdulibstm32f7xxhaldma-HalDmaInit-DB-LLR-012]
	COMMENT The function updates the ErrorCode of h_dma as HAL_DMA_ERROR_NONE and State of h_dma to HAL_DMA_STATE_READY and returns 
	COMMENT HAL_OK.
	COMMENT Equivalence Class None
    COMMENT </TD>
    
    ELEMENT
    
	COMMENT INPUT SECTION:
	
	--Holds Channel of Init of h_dma value
	VAR h_dma.Init.Channel,					init = 0xFF,															ev = init
	
	--Holds Direction of Init of h_dma value
	VAR h_dma.Init.Direction,				init = 0xFF,															ev = init
	
	--Holds PeriphInc of Init of h_dma value
	VAR h_dma.Init.PeriphInc, 				init = 0xFF,															ev = init
	
	--Holds MemInc of Init of h_dma value
	VAR h_dma.Init.MemInc,					init = 0xFF,															ev = init
	
	--Holds PeriphDataAlignment of Init of h_dma value
	VAR h_dma.Init.PeriphDataAlignment,		init = 0xFF,															ev = init 
	
	--Holds MemDataAlignment of Init of h_dma value
	VAR h_dma.Init.MemDataAlignment,		init = DMA_MDATAALIGN_BYTE,												ev = init
	
	--Holds Mode of Init of h_dma value
	VAR h_dma.Init.Mode,					init = 0xFF,															ev = init
	
	--Holds Priority of Init of h_dma value
	VAR h_dma.Init.Priority,				init = 0xFF,															ev = init
	
	--Holds FIFOMode of Init of h_dma value
	VAR h_dma.Init.FIFOMode,				init = DMA_FIFOMODE_ENABLE,												ev = init
	
	--Holds MemBurst of Init of h_dma value
	VAR h_dma.Init.MemBurst,				init = DMA_SXCR_MBURST_1,												ev = init
	
	--Holds PeriphBurst of Init of h_dma value
	VAR h_dma.Init.PeriphBurst,				init = 0xFF,															ev = init
	
	--Holds FIFOThreshold of Init of h_dma value
	VAR h_dma.Init.FIFOThreshold,			init = DMA_FIFO_THRESHOLD_FULL,											ev = init
			
	VAR h_dma.Instance ,                	init = DMA1_STREAM7_BASE,												ev = init
	
	COMMENT INPUT/OUTPUT SECTION:
	
	VAR h_dma.Instance->CR,					init = 0xFEF7F80,														ev = 0x0
		
	--Holds FCR of Instance of h_dma value
	VAR h_dma.Instance->FCR,				init = 0x57,															ev = 0x0
		
	VAR h_dma.StreamBaseAddress,			init = (T_UINT32)&PTU_reg,												ev = 0x40026004
				
	COMMENT OUTPUT SECTION:
			
	VAR ((T_DMA_BASE_REGISTERS*)0x40026004)->IFCR,		init = 0xFF,												ev = 0x0
			    
    VAR h_dma.StreamIndex,          					init = 0x1,                        							ev = 0x16
	
	--Holds State of h_dma value
	VAR h_dma.State,						init = HAL_DMA_STATE_RESET,												ev = HAL_DMA_STATE_READY
	
	--Holds ErrorCode of h_dma value
	VAR h_dma.ErrorCode,					init = 0x1,																ev = HAL_DMA_ERROR_NONE
	
	--Return value of HalDmaInit
	VAR	ret_HalDmaInit,						init = HAL_ERROR,														ev = HAL_OK
	
	-- Stub Calls :
		SIMUL
			
			--provides tick value in millisecond
			STUB HALGetTick() 5
			
		END SIMUL
		
	-- Calling the Unit Under Test :
	#ret_HalDmaInit = HalDmaInit(&h_dma);
	
	END ELEMENT
	
END TEST -- TEST 8

TEST 9
FAMILY nominal

	COMMENT Test Description
    COMMENT <TD>		
	COMMENT	[hdulibstm32f7xxhaldma-HalDmaInit-DB-LLR-010]
	COMMENT	The function does the following when the FIFOMode of Init of h_dma is DMA_FIFOMODE_ENABLE.
	COMMENT 1. Get the FIFOThreshold of Init of h_dma.
	COMMENT 2. Do nothing when returns value of the function DmaCheckFifoParam called with parameter h_dma is equal to HAL_OK.
	COMMENT 3. Write the FIFOThreshold of Init of h_dma to FCR of Instance of h_dma
	COMMENT Equivalence Class 26, 29
	COMMENT 
	COMMENT [hdulibstm32f7xxhaldma-DmaCheckFifoParam-DB-LLR-005] 
	COMMENT The function returns HAL_OK when the below conditions are met.
	COMMENT 1.	MemDataAlignment of Init of h_dma is equal to DMA_MDATAALIGN_BYTE.
	COMMENT 2.	FIFOThreshold of Init of h_dma is other than DMA_FIFO_THRESHOLD_1QUARTERFULL, DMA_FIFO_THRESHOLD_HALFFULL, 
	COMMENT DMA_FIFO_THRESHOLD_3QUARTERSFULL and DMA_FIFO_THRESHOLD_FULL.
	COMMENT Equivalence Class 82, 93
	COMMENT
	COMMENT [hdulibstm32f7xxhaldma-HalDmaInit-DB-LLR-011]
	COMMENT The function initialzes the DMA stream Base Address as returns value of the function DmaCalcBaseAndBitShift called with the
	COMMENT parameter h_dma and clear the interrupt flags (IFCR) of DMA stream Base Address
	COMMENT Equivalence Class 30
	COMMENT 
	COMMENT [hdulibstm32f7xxhaldma-HalDmaInit-DB-LLR-012]
	COMMENT The function updates the ErrorCode of h_dma as HAL_DMA_ERROR_NONE and State of h_dma to HAL_DMA_STATE_READY and returns 
	COMMENT HAL_OK.
	COMMENT Equivalence Class None
    COMMENT </TD>
    
    ELEMENT
    
	COMMENT INPUT SECTION:
	
	--Holds Channel of Init of h_dma value
	VAR h_dma.Init.Channel,					init = 0xFF,															ev = init
	
	--Holds Direction of Init of h_dma value
	VAR h_dma.Init.Direction,				init = 0xFF,															ev = init
	
	--Holds PeriphInc of Init of h_dma value
	VAR h_dma.Init.PeriphInc, 				init = 0xFF,															ev = init
	
	--Holds MemInc of Init of h_dma value
	VAR h_dma.Init.MemInc,					init = 0xFF,															ev = init
	
	--Holds PeriphDataAlignment of Init of h_dma value
	VAR h_dma.Init.PeriphDataAlignment,		init = 0xFF,															ev = init 
	
	--Holds MemDataAlignment of Init of h_dma value
	VAR h_dma.Init.MemDataAlignment,		init = DMA_MDATAALIGN_BYTE,												ev = init
	
	--Holds Mode of Init of h_dma value
	VAR h_dma.Init.Mode,					init = 0xFF,															ev = init
	
	--Holds Priority of Init of h_dma value
	VAR h_dma.Init.Priority,				init = 0xFF,															ev = init
	
	--Holds FIFOMode of Init of h_dma value
	VAR h_dma.Init.FIFOMode,				init = DMA_FIFOMODE_ENABLE,												ev = init
	
	--Holds MemBurst of Init of h_dma value
	VAR h_dma.Init.MemBurst,				init = DMA_SXCR_MBURST_1,												ev = init
	
	--Holds PeriphBurst of Init of h_dma value
	VAR h_dma.Init.PeriphBurst,				init = 0xFF,															ev = init
	
	--Holds FIFOThreshold of Init of h_dma value
	VAR h_dma.Init.FIFOThreshold,			init = 0xFF,																ev = init
			
	VAR h_dma.Instance ,                	init = DMA1_STREAM7_BASE,												ev = init
	
	COMMENT INPUT/OUTPUT SECTION:
	
	VAR h_dma.Instance->CR,					init = 0xFEF7F80,														ev = 0x0
		
	--Holds FCR of Instance of h_dma value
	VAR h_dma.Instance->FCR,				init = 0x57,															ev = 0x0
		
	VAR h_dma.StreamBaseAddress,			init = (T_UINT32)&PTU_reg,												ev = 0x40026004
				
	COMMENT OUTPUT SECTION:
			
	VAR ((T_DMA_BASE_REGISTERS*)0x40026004)->IFCR,		init = 0xFF,												ev = 0x0
			    
    VAR h_dma.StreamIndex,          					init = 0x1,                        							ev = 0x16
	
	--Holds State of h_dma value
	VAR h_dma.State,						init = HAL_DMA_STATE_RESET,												ev = HAL_DMA_STATE_READY
	
	--Holds ErrorCode of h_dma value
	VAR h_dma.ErrorCode,					init = 0x1,																ev = HAL_DMA_ERROR_NONE
	
	--Return value of HalDmaInit
	VAR	ret_HalDmaInit,						init = HAL_ERROR,															ev = HAL_OK
	
	-- Stub Calls :
		SIMUL
			
			--provides tick value in millisecond
			STUB HALGetTick() 5
			
		END SIMUL
		
	-- Calling the Unit Under Test :
	#ret_HalDmaInit = HalDmaInit(&h_dma);
	
	END ELEMENT
	
END TEST -- TEST 9
    
TEST 10
FAMILY nominal

	COMMENT Test Description
    COMMENT <TD>		
	COMMENT	[hdulibstm32f7xxhaldma-HalDmaInit-DB-LLR-010]
	COMMENT	The function does the following when the FIFOMode of Init of h_dma is DMA_FIFOMODE_ENABLE.
	COMMENT 1. Get the FIFOThreshold of Init of h_dma.
	COMMENT 2. Update the ErrorCode of h_dma as HAL_DMA_ERROR_PARAM and State of h_dma to HAL_DMA_STATE_READY and returns HAL_ERROR when 
	COMMENT returns value of the function DmaCheckFifoParam called with parameter h_dma is not equal to HAL_OK.
	COMMENT 3. Write the FIFOThreshold of Init of h_dma to FCR of Instance of h_dma
	COMMENT Equivalence Class 26, 28
	COMMENT 
	COMMENT [hdulibstm32f7xxhaldma-DmaCheckFifoParam-DB-LLR-006] 
	COMMENT The function returns status as HAL_ERROR when the below conditions are met.
	COMMENT 1.	MemDataAlignment of Init of h_dma is equal to DMA_MDATAALIGN_HALFWORD.
	COMMENT 2.	FIFOThreshold of Init of h_dma is equal to DMA_FIFO_THRESHOLD_1QUARTERFULL.
	COMMENT Equivalence Class 94, 83
    COMMENT </TD>
    
    ELEMENT
    
	COMMENT INPUT SECTION:
	
	--Holds Channel of Init of h_dma value
	VAR h_dma.Init.Channel,					init = 0xFF,															ev = init
	
	--Holds Direction of Init of h_dma value
	VAR h_dma.Init.Direction,				init = 0xFF,															ev = init
	
	--Holds PeriphInc of Init of h_dma value
	VAR h_dma.Init.PeriphInc, 				init = 0xFF,															ev = init
	
	--Holds MemInc of Init of h_dma value
	VAR h_dma.Init.MemInc,					init = 0xFF,															ev = init
	
	--Holds PeriphDataAlignment of Init of h_dma value
	VAR h_dma.Init.PeriphDataAlignment,		init = 0xFF,															ev = init 
	
	--Holds MemDataAlignment of Init of h_dma value
	VAR h_dma.Init.MemDataAlignment,		init = DMA_MDATAALIGN_HALFWORD,											ev = init
	
	--Holds Mode of Init of h_dma value
	VAR h_dma.Init.Mode,					init = 0xFF,															ev = init
	
	--Holds Priority of Init of h_dma value
	VAR h_dma.Init.Priority,				init = 0xFF,															ev = init
	
	--Holds FIFOMode of Init of h_dma value
	VAR h_dma.Init.FIFOMode,				init = DMA_FIFOMODE_ENABLE,												ev = init
	
	--Holds MemBurst of Init of h_dma value
	VAR h_dma.Init.MemBurst,				init = 0xFF,															ev = init
	
	--Holds PeriphBurst of Init of h_dma value
	VAR h_dma.Init.PeriphBurst,				init = 0xFF,															ev = init
	
	--Holds FIFOThreshold of Init of h_dma value
	VAR h_dma.Init.FIFOThreshold,			init = DMA_FIFO_THRESHOLD_1QUARTERFULL,										ev = init
			
	--Holds FCR of Instance of h_dma value
	VAR h_dma.Instance->FCR,				init = 0x57,															ev = init
	
	COMMENT INPUT/OUTPUT SECTION:
	
	--Holds CR of Instance of h_dma value
	VAR h_dma.Instance->CR,					init = 0xFEF7F80,														ev = 0x20FF
	
	COMMENT OUTPUT SECTION:
	
	--Holds State of h_dma value
	VAR h_dma.State,						init = HAL_DMA_STATE_RESET,												ev = HAL_DMA_STATE_READY
	
	--Holds ErrorCode of h_dma value
	VAR h_dma.ErrorCode,					init = 0x1,																ev = HAL_DMA_ERROR_PARAM
	
	--Return value of HalDmaInit
	VAR	ret_HalDmaInit,						init = HAL_OK,															ev = HAL_ERROR
	
	-- Stub Calls :
		SIMUL
		
			--provides tick value in millisecond
			STUB HALGetTick() 5
			
		END SIMUL
		
	-- Calling the Unit Under Test :
	#ret_HalDmaInit = HalDmaInit(&h_dma);
	
	END ELEMENT
	
END TEST -- TEST 10
 
TEST 11
FAMILY nominal

	COMMENT Test Description
    COMMENT <TD>		
	COMMENT	[hdulibstm32f7xxhaldma-HalDmaInit-DB-LLR-010]
	COMMENT	The function does the following when the FIFOMode of Init of h_dma is DMA_FIFOMODE_ENABLE.
	COMMENT 1. Get the FIFOThreshold of Init of h_dma.
	COMMENT 2. Update the ErrorCode of h_dma as HAL_DMA_ERROR_PARAM and State of h_dma to HAL_DMA_STATE_READY and returns HAL_ERROR when 
	COMMENT returns value of the function DmaCheckFifoParam called with parameter h_dma is not equal to HAL_OK.
	COMMENT 3. Write the FIFOThreshold of Init of h_dma to FCR of Instance of h_dma
	COMMENT Equivalence Class 26, 28
	COMMENT 
	COMMENT [hdulibstm32f7xxhaldma-DmaCheckFifoParam-DB-LLR-007] 
	COMMENT The function returns status as HAL_ERROR when the below conditions are met.
	COMMENT 1.	MemDataAlignment of Init of h_dma is equal to DMA_MDATAALIGN_HALFWORD.
	COMMENT 2.	FIFOThreshold of Init of h_dma is equal to DMA_FIFO_THRESHOLD_HALFFULL.
	COMMENT 3.Result of bitwise AND operation of MemBurst  of Init  of h_dma  and DMA_SXCR_MBURST_1 is equal to DMA_SXCR_MBURST_1
	COMMENT Equivalence Class 94, 86, 84
    COMMENT </TD>
    
    ELEMENT
    
	COMMENT INPUT SECTION:
	
	--Holds Channel of Init of h_dma value
	VAR h_dma.Init.Channel,					init = 0xFF,															ev = init
	
	--Holds Direction of Init of h_dma value
	VAR h_dma.Init.Direction,				init = 0xFF,															ev = init
	
	--Holds PeriphInc of Init of h_dma value
	VAR h_dma.Init.PeriphInc, 				init = 0xFF,															ev = init
	
	--Holds MemInc of Init of h_dma value
	VAR h_dma.Init.MemInc,					init = 0xFF,															ev = init
	
	--Holds PeriphDataAlignment of Init of h_dma value
	VAR h_dma.Init.PeriphDataAlignment,		init = 0xFF,															ev = init 
	
	--Holds MemDataAlignment of Init of h_dma value
	VAR h_dma.Init.MemDataAlignment,		init = DMA_MDATAALIGN_HALFWORD,											ev = init
	
	--Holds Mode of Init of h_dma value
	VAR h_dma.Init.Mode,					init = 0xFF,															ev = init
	
	--Holds Priority of Init of h_dma value
	VAR h_dma.Init.Priority,				init = 0xFF,															ev = init
	
	--Holds FIFOMode of Init of h_dma value
	VAR h_dma.Init.FIFOMode,				init = DMA_FIFOMODE_ENABLE,												ev = init
	
	--Holds MemBurst of Init of h_dma value
	VAR h_dma.Init.MemBurst,				init = DMA_SXCR_MBURST_1,												ev = init
	
	--Holds PeriphBurst of Init of h_dma value
	VAR h_dma.Init.PeriphBurst,				init = 0xFF,															ev = init
	
	--Holds FIFOThreshold of Init of h_dma value
	VAR h_dma.Init.FIFOThreshold,			init = DMA_FIFO_THRESHOLD_HALFFULL,										ev = init
		
	--Holds FCR of Instance of h_dma value
	VAR h_dma.Instance->FCR,				init = 0x57,															ev = init
	
	COMMENT INPUT/OUTPUT SECTION:
	
	--Holds CR of Instance of h_dma value
	VAR h_dma.Instance->CR,					init = 0xFEF7F80,														ev = 0x10020FF
	
	COMMENT OUTPUT SECTION:
	
	--Holds State of h_dma value
	VAR h_dma.State,						init = HAL_DMA_STATE_RESET,												ev = HAL_DMA_STATE_READY
	
	--Holds ErrorCode of h_dma value
	VAR h_dma.ErrorCode,					init = 0x1,																ev = HAL_DMA_ERROR_PARAM
	
	--Return value of HalDmaInit
	VAR	ret_HalDmaInit,						init = HAL_OK,															ev = HAL_ERROR
	
	-- Stub Calls :
		SIMUL
		
			--provides tick value in millisecond
			STUB HALGetTick() 5
			
		END SIMUL
		
	-- Calling the Unit Under Test :
	#ret_HalDmaInit = HalDmaInit(&h_dma);
	
	END ELEMENT
	
END TEST -- TEST 11
    
TEST 12
FAMILY nominal

	COMMENT Test Description
    COMMENT <TD>		
	COMMENT	[hdulibstm32f7xxhaldma-HalDmaInit-DB-LLR-010]
	COMMENT	The function does the following when the FIFOMode of Init of h_dma is DMA_FIFOMODE_ENABLE.
	COMMENT 1. Get the FIFOThreshold of Init of h_dma.
	COMMENT 2. Do nothing when returns value of the function DmaCheckFifoParam called with parameter h_dma is equal to HAL_OK.
	COMMENT 3. Write the FIFOThreshold of Init of h_dma to FCR of Instance of h_dma
	COMMENT Equivalence Class 26, 29
	COMMENT 
	COMMENT [hdulibstm32f7xxhaldma-DmaCheckFifoParam-DB-LLR-007] 
	COMMENT The function returns status as HAL_ERROR when the below conditions are met.
	COMMENT 1.	MemDataAlignment of Init of h_dma is equal to DMA_MDATAALIGN_HALFWORD.
	COMMENT 2.	FIFOThreshold of Init of h_dma is equal to DMA_FIFO_THRESHOLD_HALFFULL.
	COMMENT 3.Result of bitwise AND operation of MemBurst  of Init  of h_dma  and DMA_SXCR_MBURST_1 is not equal to DMA_SXCR_MBURST_1
	COMMENT Equivalence Class 94, 86, 85	
	COMMENT
	COMMENT [hdulibstm32f7xxhaldma-HalDmaInit-DB-LLR-011]
	COMMENT The function initialzes the DMA stream Base Address as returns value of the function DmaCalcBaseAndBitShift called with the
	COMMENT parameter h_dma and clear the interrupt flags (IFCR) of DMA stream Base Address
	COMMENT Equivalence Class 30
	COMMENT 
	COMMENT [hdulibstm32f7xxhaldma-HalDmaInit-DB-LLR-012]
	COMMENT The function updates the ErrorCode of h_dma as HAL_DMA_ERROR_NONE and State of h_dma to HAL_DMA_STATE_READY and returns 
	COMMENT HAL_OK.
	COMMENT Equivalence Class None
    COMMENT </TD>
    
    ELEMENT
    
	COMMENT INPUT SECTION:
	
	--Holds Channel of Init of h_dma value
	VAR h_dma.Init.Channel,					init = 0xFF,															ev = init
	
	--Holds Direction of Init of h_dma value
	VAR h_dma.Init.Direction,				init = 0xFF,															ev = init
	
	--Holds PeriphInc of Init of h_dma value
	VAR h_dma.Init.PeriphInc, 				init = 0xFF,															ev = init
	
	--Holds MemInc of Init of h_dma value
	VAR h_dma.Init.MemInc,					init = 0xFF,															ev = init
	
	--Holds PeriphDataAlignment of Init of h_dma value
	VAR h_dma.Init.PeriphDataAlignment,		init = 0xFF,															ev = init 
	
	--Holds MemDataAlignment of Init of h_dma value
	VAR h_dma.Init.MemDataAlignment,		init = DMA_MDATAALIGN_HALFWORD,											ev = init
	
	--Holds Mode of Init of h_dma value
	VAR h_dma.Init.Mode,					init = 0xFF,															ev = init
	
	--Holds Priority of Init of h_dma value
	VAR h_dma.Init.Priority,				init = 0xFF,															ev = init
	
	--Holds FIFOMode of Init of h_dma value
	VAR h_dma.Init.FIFOMode,				init = DMA_FIFOMODE_ENABLE,												ev = init
	
	--Holds MemBurst of Init of h_dma value
	VAR h_dma.Init.MemBurst,				init = 0xFF,															ev = init
	
	--Holds PeriphBurst of Init of h_dma value
	VAR h_dma.Init.PeriphBurst,				init = 0xFF,															ev = init
	
	--Holds FIFOThreshold of Init of h_dma value
	VAR h_dma.Init.FIFOThreshold,			init = DMA_FIFO_THRESHOLD_HALFFULL,										ev = init
	
	VAR h_dma.Instance ,                	init = DMA1_STREAM7_BASE,												ev = init
	
	COMMENT INPUT/OUTPUT SECTION:
	
	--Holds CR of Instance of h_dma value
	VAR h_dma.Instance->CR,					init = 0xFEF7F80,														ev = 0x0
	
	--Holds FCR of Instance of h_dma value
	VAR h_dma.Instance->FCR,				init = 0x57,															ev = 0x0
	
	VAR h_dma.StreamBaseAddress,			init = (T_UINT32)&PTU_reg,												ev = 0x40026004
			
	COMMENT OUTPUT SECTION:
		
	VAR ((T_DMA_BASE_REGISTERS*)0x40026004)->IFCR,		init = 0xFF,												ev = 0x0
		    
    VAR h_dma.StreamIndex,          					init = 0x1,                        							ev = 0x16
	
	--Holds State of h_dma value
	VAR h_dma.State,						init = HAL_DMA_STATE_RESET,												ev = HAL_DMA_STATE_READY
	
	--Holds ErrorCode of h_dma value
	VAR h_dma.ErrorCode,					init = 0x1,																ev = HAL_DMA_ERROR_NONE
	
	--Return value of HalDmaInit
	VAR	ret_HalDmaInit,						init = HAL_ERROR,														ev = HAL_OK
	
	-- Stub Calls :
		SIMUL
		
			--provides tick value in millisecond
			STUB HALGetTick() 5
			
		END SIMUL
		
	-- Calling the Unit Under Test :
	#ret_HalDmaInit = HalDmaInit(&h_dma);
	
	END ELEMENT
	
END TEST -- TEST 12
    
TEST 13
FAMILY nominal

	COMMENT Test Description
	COMMENT <TD>		
	COMMENT	[hdulibstm32f7xxhaldma-HalDmaInit-DB-LLR-010]
	COMMENT	The function does the following when the FIFOMode of Init of h_dma is DMA_FIFOMODE_ENABLE.
	COMMENT 1. Get the FIFOThreshold of Init of h_dma.
	COMMENT 2. Update the ErrorCode of h_dma as HAL_DMA_ERROR_PARAM and State of h_dma to HAL_DMA_STATE_READY and returns HAL_ERROR when 
	COMMENT returns value of the function DmaCheckFifoParam called with parameter h_dma is not equal to HAL_OK.
	COMMENT 3. Write the FIFOThreshold of Init of h_dma to FCR of Instance of h_dma
	COMMENT Equivalence Class 26, 28
	COMMENT 
	COMMENT [hdulibstm32f7xxhaldma-DmaCheckFifoParam-DB-LLR-008] 
	COMMENT The function returns status as HAL_ERROR when the below conditions are met.
	COMMENT 1.	MemDataAlignment of Init of h_dma is equal to DMA_MDATAALIGN_HALFWORD.
	COMMENT 2.	FIFOThreshold of Init of h_dma is equal to DMA_FIFO_THRESHOLD_3QUARTERSFULL.
	COMMENT Equivalence Class 94, 89
    COMMENT </TD>
    
    ELEMENT
    
	COMMENT INPUT SECTION:
	
	--Holds Channel of Init of h_dma value
	VAR h_dma.Init.Channel,					init = 0xFF,															ev = init
	
	--Holds Direction of Init of h_dma value
	VAR h_dma.Init.Direction,				init = 0xFF,															ev = init
	
	--Holds PeriphInc of Init of h_dma value
	VAR h_dma.Init.PeriphInc, 				init = 0xFF,															ev = init
	
	--Holds MemInc of Init of h_dma value
	VAR h_dma.Init.MemInc,					init = 0xFF,															ev = init
	
	--Holds PeriphDataAlignment of Init of h_dma value
	VAR h_dma.Init.PeriphDataAlignment,		init = 0xFF,															ev = init 
	
	--Holds MemDataAlignment of Init of h_dma value
	VAR h_dma.Init.MemDataAlignment,		init = DMA_MDATAALIGN_HALFWORD,											ev = init
	
	--Holds Mode of Init of h_dma value
	VAR h_dma.Init.Mode,					init = 0xFF,															ev = init
	
	--Holds Priority of Init of h_dma value
	VAR h_dma.Init.Priority,				init = 0xFF,															ev = init
	
	--Holds FIFOMode of Init of h_dma value
	VAR h_dma.Init.FIFOMode,				init = DMA_FIFOMODE_ENABLE,												ev = init
	
	--Holds MemBurst of Init of h_dma value
	VAR h_dma.Init.MemBurst,				init = DMA_SXCR_MBURST_1,												ev = init
	
	--Holds PeriphBurst of Init of h_dma value
	VAR h_dma.Init.PeriphBurst,				init = 0xFF,															ev = init
	
	--Holds FIFOThreshold of Init of h_dma value
	VAR h_dma.Init.FIFOThreshold,			init = DMA_FIFO_THRESHOLD_3QUARTERSFULL,								ev = init
		
	--Holds FCR of Instance of h_dma value
	VAR h_dma.Instance->FCR,				init = 0x57,															ev = init
	
	COMMENT INPUT/OUTPUT SECTION:
	
	--Holds CR of Instance of h_dma value
	VAR h_dma.Instance->CR,					init = 0xFEF7F80,														ev = 0x10020FF
	
	COMMENT OUTPUT SECTION:
	
	--Holds State of h_dma value
	VAR h_dma.State,						init = HAL_DMA_STATE_RESET,												ev = HAL_DMA_STATE_READY
	
	--Holds ErrorCode of h_dma value
	VAR h_dma.ErrorCode,					init = 0x1,																ev = HAL_DMA_ERROR_PARAM
	
	--Return value of HalDmaInit
	VAR	ret_HalDmaInit,						init = HAL_OK,															ev = HAL_ERROR
	
	-- Stub Calls :
		SIMUL
		
			--provides tick value in millisecond
			STUB HALGetTick() 5
			
		END SIMUL
		
	-- Calling the Unit Under Test :
	#ret_HalDmaInit = HalDmaInit(&h_dma);
	
	END ELEMENT
	
END TEST -- TEST 13
    
TEST 14
FAMILY nominal

	COMMENT Test Description
    COMMENT <TD>		
	COMMENT	[hdulibstm32f7xxhaldma-HalDmaInit-DB-LLR-010]
	COMMENT	The function does the following when the FIFOMode of Init of h_dma is DMA_FIFOMODE_ENABLE.
	COMMENT 1. Get the FIFOThreshold of Init of h_dma.
	COMMENT 2. Update the ErrorCode of h_dma as HAL_DMA_ERROR_PARAM and State of h_dma to HAL_DMA_STATE_READY and returns HAL_ERROR when 
	COMMENT returns value of the function DmaCheckFifoParam called with parameter h_dma is not equal to HAL_OK.
	COMMENT 3. Write the FIFOThreshold of Init of h_dma to FCR of Instance of h_dma
	COMMENT Equivalence Class 26,28
	COMMENT 
	COMMENT [hdulibstm32f7xxhaldma-DmaCheckFifoParam-DB-LLR-009] 
	COMMENT The function returns status as HAL_ERROR when the below conditions are met.
	COMMENT 1.	MemDataAlignment of Init of h_dma is equal to DMA_MDATAALIGN_HALFWORD.
	COMMENT 2.	FIFOThreshold of Init of h_dma is equal to DMA_FIFO_THRESHOLD_FULL.
	COMMENT 3.	MemBurst of Init of h_dma is equal to DMA_MBURST_INC16.
	COMMENT Equivalence Class 94, 92, 87
    COMMENT </TD>
    
    ELEMENT
    
	COMMENT INPUT SECTION:
	
	--Holds Channel of Init of h_dma value
	VAR h_dma.Init.Channel,					init = 0xFF,															ev = init
	
	--Holds Direction of Init of h_dma value
	VAR h_dma.Init.Direction,				init = 0xFF,															ev = init
	
	--Holds PeriphInc of Init of h_dma value
	VAR h_dma.Init.PeriphInc, 				init = 0xFF,															ev = init
	
	--Holds MemInc of Init of h_dma value
	VAR h_dma.Init.MemInc,					init = 0xFF,															ev = init
	
	--Holds PeriphDataAlignment of Init of h_dma value
	VAR h_dma.Init.PeriphDataAlignment,		init = 0xFF,															ev = init 
	
	--Holds MemDataAlignment of Init of h_dma value
	VAR h_dma.Init.MemDataAlignment,		init = DMA_MDATAALIGN_HALFWORD,											ev = init
	
	--Holds Mode of Init of h_dma value
	VAR h_dma.Init.Mode,					init = 0xFF,															ev = init
	
	--Holds Priority of Init of h_dma value
	VAR h_dma.Init.Priority,				init = 0xFF,															ev = init
	
	--Holds FIFOMode of Init of h_dma value
	VAR h_dma.Init.FIFOMode,				init = DMA_FIFOMODE_ENABLE,												ev = init
	
	--Holds MemBurst of Init of h_dma value
	VAR h_dma.Init.MemBurst,				init = DMA_MBURST_INC16,												ev = init
	
	--Holds PeriphBurst of Init of h_dma value
	VAR h_dma.Init.PeriphBurst,				init = 0xFF,															ev = init
	
	--Holds FIFOThreshold of Init of h_dma value
	VAR h_dma.Init.FIFOThreshold,			init = DMA_FIFO_THRESHOLD_FULL,										ev = init
		
	--Holds FCR of Instance of h_dma value
	VAR h_dma.Instance->FCR,				init = 0x57,															ev = init
	
	COMMENT INPUT/OUTPUT SECTION:
	
	--Holds CR of Instance of h_dma value
	VAR h_dma.Instance->CR,					init = 0xFEF7F80,														ev = 0x18020FF
	
	COMMENT OUTPUT SECTION:
	
	--Holds State of h_dma value
	VAR h_dma.State,						init = HAL_DMA_STATE_RESET,												ev = HAL_DMA_STATE_READY
	
	--Holds ErrorCode of h_dma value
	VAR h_dma.ErrorCode,					init = 0x1,																ev = HAL_DMA_ERROR_PARAM
	
	--Return value of HalDmaInit
	VAR	ret_HalDmaInit,						init = HAL_OK,															ev = HAL_ERROR
	
	-- Stub Calls :
		SIMUL
		
			--provides tick value in millisecond
			STUB HALGetTick() 5
			
		END SIMUL
		
	-- Calling the Unit Under Test :
	#ret_HalDmaInit = HalDmaInit(&h_dma);
	
	END ELEMENT
	
END TEST -- TEST 14
    
TEST 15
FAMILY nominal

	COMMENT Test Description
    COMMENT <TD>		
	COMMENT	[hdulibstm32f7xxhaldma-HalDmaInit-DB-LLR-010]
	COMMENT	The function does the following when the FIFOMode of Init of h_dma is DMA_FIFOMODE_ENABLE.
	COMMENT 1. Get the FIFOThreshold of Init of h_dma.
	COMMENT 2. Do nothing when returns value of the function DmaCheckFifoParam called with parameter h_dma is equal to HAL_OK.
	COMMENT 3. Write the FIFOThreshold of Init of h_dma to FCR of Instance of h_dma
	COMMENT Equivalence Class 26, 29
	COMMENT 
	COMMENT [hdulibstm32f7xxhaldma-DmaCheckFifoParam-DB-LLR-009] 
	COMMENT The function returns status as HAL_ERROR when the below conditions are met.
	COMMENT 1.	MemDataAlignment of Init of h_dma is equal to DMA_MDATAALIGN_HALFWORD.
	COMMENT 2.	FIFOThreshold of Init of h_dma is equal to DMA_FIFO_THRESHOLD_FULL.
	COMMENT 3.	MemBurst of Init of h_dma is not equal to DMA_MBURST_INC16.
	COMMENT Equivalence Class 94, 92, 88
	COMMENT
	COMMENT [hdulibstm32f7xxhaldma-HalDmaInit-DB-LLR-011]
	COMMENT The function initialzes the DMA stream Base Address as returns value of the function DmaCalcBaseAndBitShift called with the
	COMMENT parameter h_dma and clear the interrupt flags (IFCR) of DMA stream Base Address
	COMMENT Equivalence Class 30
	COMMENT 
	COMMENT [hdulibstm32f7xxhaldma-HalDmaInit-DB-LLR-012]
	COMMENT The function updates the ErrorCode of h_dma as HAL_DMA_ERROR_NONE and State of h_dma to HAL_DMA_STATE_READY and returns 
	COMMENT HAL_OK.
	COMMENT Equivalence Class None 
    COMMENT </TD>
    
    ELEMENT
    
	COMMENT INPUT SECTION:
	
	--Holds Channel of Init of h_dma value
	VAR h_dma.Init.Channel,					init = 0xFF,															ev = init
	
	--Holds Direction of Init of h_dma value
	VAR h_dma.Init.Direction,				init = 0xFF,															ev = init
	
	--Holds PeriphInc of Init of h_dma value
	VAR h_dma.Init.PeriphInc, 				init = 0xFF,															ev = init
	
	--Holds MemInc of Init of h_dma value
	VAR h_dma.Init.MemInc,					init = 0xFF,															ev = init
	
	--Holds PeriphDataAlignment of Init of h_dma value
	VAR h_dma.Init.PeriphDataAlignment,		init = 0xFF,															ev = init 
	
	--Holds MemDataAlignment of Init of h_dma value
	VAR h_dma.Init.MemDataAlignment,		init = DMA_MDATAALIGN_HALFWORD,											ev = init
	
	--Holds Mode of Init of h_dma value
	VAR h_dma.Init.Mode,					init = 0xFF,															ev = init
	
	--Holds Priority of Init of h_dma value
	VAR h_dma.Init.Priority,				init = 0xFF,															ev = init
	
	--Holds FIFOMode of Init of h_dma value
	VAR h_dma.Init.FIFOMode,				init = DMA_FIFOMODE_ENABLE,												ev = init
	
	--Holds MemBurst of Init of h_dma value
	VAR h_dma.Init.MemBurst,				init = 0xFF,															ev = init
	
	--Holds PeriphBurst of Init of h_dma value
	VAR h_dma.Init.PeriphBurst,				init = 0xFF,															ev = init
	
	--Holds FIFOThreshold of Init of h_dma value
	VAR h_dma.Init.FIFOThreshold,			init = DMA_FIFO_THRESHOLD_FULL,										ev = init
	
	VAR h_dma.Instance ,                	init = DMA1_STREAM7_BASE,												ev = init
	
	COMMENT INPUT/OUTPUT SECTION:
	
	--Holds CR of Instance of h_dma value
	VAR h_dma.Instance->CR,					init = 0xFEF7F80,														ev = 0x0
	
	--Holds FCR of Instance of h_dma value
	VAR h_dma.Instance->FCR,				init = 0x57,															ev = 0x0
	
	VAR h_dma.StreamBaseAddress,			init = (T_UINT32)&PTU_reg,												ev = 0x40026004
			
	COMMENT OUTPUT SECTION:
		
	VAR ((T_DMA_BASE_REGISTERS*)0x40026004)->IFCR,		init = 0xFF,												ev = 0x0
		    
    VAR h_dma.StreamIndex,          					init = 0x1,                        							ev = 0x16
	
	--Holds State of h_dma value
	VAR h_dma.State,						init = HAL_DMA_STATE_RESET,												ev = HAL_DMA_STATE_READY
	
	--Holds ErrorCode of h_dma value
	VAR h_dma.ErrorCode,					init = 0x1,																ev = HAL_DMA_ERROR_NONE
	
	--Return value of HalDmaInit
	VAR	ret_HalDmaInit,						init = HAL_ERROR,														ev = HAL_OK
	
	-- Stub Calls :
		SIMUL
		
			--provides tick value in millisecond
			STUB HALGetTick() 5
			
		END SIMUL
		
	-- Calling the Unit Under Test :
	#ret_HalDmaInit = HalDmaInit(&h_dma);
	
	END ELEMENT
	
END TEST -- TEST 15
    
TEST 16
FAMILY nominal

	COMMENT Test Description
    COMMENT <TD>		
	COMMENT	[hdulibstm32f7xxhaldma-HalDmaInit-DB-LLR-010]
	COMMENT	The function does the following when the FIFOMode of Init of h_dma is DMA_FIFOMODE_ENABLE.
	COMMENT 1. Get the FIFOThreshold of Init of h_dma.
	COMMENT 2. Do nothing when returns value of the function DmaCheckFifoParam called with parameter h_dma is equal to HAL_OK.
	COMMENT 3. Write the FIFOThreshold of Init of h_dma to FCR of Instance of h_dma
	COMMENT Equivalence Class 26, 29
	COMMENT 
	COMMENT [hdulibstm32f7xxhaldma-DmaCheckFifoParam-DB-LLR-010] 
	COMMENT The function  returns HAL_OK when the below conditions are met.
    COMMENT 1.	MemDataAlignment of Init of h_dma is equal to DMA_MDATAALIGN_HALFWORD.
	COMMENT 2.FIFOThreshold of Init of h_dma is other than DMA_FIFO_THRESHOLD_1QUARTERFULL, DMA_FIFO_THRESHOLD_HALFFULL, 
	COMMENT DMA_FIFO_THRESHOLD_3QUARTERSFULL and DMA_FIFO_THRESHOLD_FULL.
	COMMENT Equivalence Class 94, 93
	COMMENT
	COMMENT [hdulibstm32f7xxhaldma-HalDmaInit-DB-LLR-011]
	COMMENT The function initialzes the DMA stream Base Address as returns value of the function DmaCalcBaseAndBitShift called with the
	COMMENT parameter h_dma and clear the interrupt flags (IFCR) of DMA stream Base Address
	COMMENT Equivalence Class 30
	COMMENT 
	COMMENT [hdulibstm32f7xxhaldma-HalDmaInit-DB-LLR-012]
	COMMENT The function updates the ErrorCode of h_dma as HAL_DMA_ERROR_NONE and State of h_dma to HAL_DMA_STATE_READY and returns 
	COMMENT HAL_OK.
	COMMENT Equivalence Class None 
    COMMENT </TD>
    
    ELEMENT
    
	COMMENT INPUT SECTION:
	
	--Holds Channel of Init of h_dma value
	VAR h_dma.Init.Channel,					init = 0xFF,															ev = init
	
	--Holds Direction of Init of h_dma value
	VAR h_dma.Init.Direction,				init = 0xFF,															ev = init
	
	--Holds PeriphInc of Init of h_dma value
	VAR h_dma.Init.PeriphInc, 				init = 0xFF,															ev = init
	
	--Holds MemInc of Init of h_dma value
	VAR h_dma.Init.MemInc,					init = 0xFF,															ev = init
	
	--Holds PeriphDataAlignment of Init of h_dma value
	VAR h_dma.Init.PeriphDataAlignment,		init = 0xFF,															ev = init 
	
	--Holds MemDataAlignment of Init of h_dma value
	VAR h_dma.Init.MemDataAlignment,		init = DMA_MDATAALIGN_HALFWORD,											ev = init
	
	--Holds Mode of Init of h_dma value
	VAR h_dma.Init.Mode,					init = 0xFF,															ev = init
	
	--Holds Priority of Init of h_dma value
	VAR h_dma.Init.Priority,				init = 0xFF,															ev = init
	
	--Holds FIFOMode of Init of h_dma value
	VAR h_dma.Init.FIFOMode,				init = DMA_FIFOMODE_ENABLE,												ev = init
	
	--Holds MemBurst of Init of h_dma value
	VAR h_dma.Init.MemBurst,				init = 0xFF,															ev = init
	
	--Holds PeriphBurst of Init of h_dma value
	VAR h_dma.Init.PeriphBurst,				init = 0xFF,															ev = init
	
	--Holds FIFOThreshold of Init of h_dma value
	VAR h_dma.Init.FIFOThreshold,			init = 0xFF,															ev = init
	
	VAR h_dma.Instance ,                	init = DMA1_STREAM7_BASE,												ev = init
			
	COMMENT INPUT/OUTPUT SECTION:
	
	--Holds CR of Instance of h_dma value
	VAR h_dma.Instance->CR,					init = 0xFEF7F80,														ev = 0x0
	
	--Holds FCR of Instance of h_dma value
	VAR h_dma.Instance->FCR,				init = 0x57,															ev = 0x0
	
	VAR h_dma.StreamBaseAddress,			init = (T_UINT32)&PTU_reg,												ev = 0x40026004
	
	COMMENT OUTPUT SECTION:
		
	VAR ((T_DMA_BASE_REGISTERS*)0x40026004)->IFCR,		init = 0xFF,												ev = 0x0
		    
    VAR h_dma.StreamIndex,          					init = 0x1,                        							ev = 0x16
	
	--Holds State of h_dma value
	VAR h_dma.State,						init = HAL_DMA_STATE_RESET,												ev = HAL_DMA_STATE_READY
	
	--Holds ErrorCode of h_dma value
	VAR h_dma.ErrorCode,					init = 0x1,																ev = HAL_DMA_ERROR_NONE
	
	--Return value of HalDmaInit
	VAR	ret_HalDmaInit,						init = HAL_ERROR,														ev = HAL_OK
	
	-- Stub Calls :
		SIMUL
			
			--provides tick value in millisecond
			STUB HALGetTick() 5
			
		END SIMUL
		
	-- Calling the Unit Under Test :
	#ret_HalDmaInit = HalDmaInit(&h_dma);
	
	END ELEMENT
	
END TEST -- TEST 16	
    
TEST 17
FAMILY nominal

	COMMENT Test Description
    COMMENT <TD>		
	COMMENT	[hdulibstm32f7xxhaldma-HalDmaInit-DB-LLR-010]
	COMMENT	The function does the following when the FIFOMode of Init of h_dma is DMA_FIFOMODE_ENABLE.
	COMMENT 1. Get the FIFOThreshold of Init of h_dma.
	COMMENT 2. Update the ErrorCode of h_dma as HAL_DMA_ERROR_PARAM and State of h_dma to HAL_DMA_STATE_READY and returns HAL_ERROR when 
	COMMENT returns value of the function DmaCheckFifoParam called with parameter h_dma is not equal to HAL_OK.
	COMMENT 3. Write the FIFOThreshold of Init of h_dma to FCR of Instance of h_dma
	COMMENT Equivalence Class 26, 28
	COMMENT 
	COMMENT [hdulibstm32f7xxhaldma-DmaCheckFifoParam-DB-LLR-011] 
	COMMENT The function returns status as HAL_ERROR when the below conditions are met.
	COMMENT 1.	MemDataAlignment of Init of h_dma is other than DMA_MDATAALIGN_BYTE,DMA_MDATAALIGN_HALFWORD.
	COMMENT 2.	FIFOThreshold of Init of h_dma is equal to DMA_FIFO_THRESHOLD_1QUARTERFULL
	COMMENT Equivalence Class 95, 83
    COMMENT </TD>
    
    ELEMENT
    
	COMMENT INPUT SECTION:
	
	--Holds Channel of Init of h_dma value
	VAR h_dma.Init.Channel,					init = 0xFF,															ev = init
	
	--Holds Direction of Init of h_dma value
	VAR h_dma.Init.Direction,				init = 0xFF,															ev = init
	
	--Holds PeriphInc of Init of h_dma value
	VAR h_dma.Init.PeriphInc, 				init = 0xFF,															ev = init
	
	--Holds MemInc of Init of h_dma value
	VAR h_dma.Init.MemInc,					init = 0xFF,															ev = init
	
	--Holds PeriphDataAlignment of Init of h_dma value
	VAR h_dma.Init.PeriphDataAlignment,		init = 0xFF,															ev = init 
	
	--Holds MemDataAlignment of Init of h_dma value
	VAR h_dma.Init.MemDataAlignment,		init = 0xFF,															ev = init
	
	--Holds Mode of Init of h_dma value
	VAR h_dma.Init.Mode,					init = 0xFF,															ev = init
	
	--Holds Priority of Init of h_dma value
	VAR h_dma.Init.Priority,				init = 0xFF,															ev = init
	
	--Holds FIFOMode of Init of h_dma value
	VAR h_dma.Init.FIFOMode,				init = DMA_FIFOMODE_ENABLE,												ev = init
	
	--Holds MemBurst of Init of h_dma value
	VAR h_dma.Init.MemBurst,				init = 0xFF,															ev = init
	
	--Holds PeriphBurst of Init of h_dma value
	VAR h_dma.Init.PeriphBurst,				init = 0xFF,															ev = init
	
	--Holds FIFOThreshold of Init of h_dma value
	VAR h_dma.Init.FIFOThreshold,			init = DMA_FIFO_THRESHOLD_1QUARTERFULL,										ev = init
	
	--Holds FCR of Instance of h_dma value
	VAR h_dma.Instance->FCR,				init = 0x57,															ev = init
		
	COMMENT INPUT/OUTPUT SECTION:
	
	--Holds CR of Instance of h_dma value
	VAR h_dma.Instance->CR,					init = 0xFEF7F80,														ev = 0xFF

	COMMENT OUTPUT SECTION:
	
	--Holds State of h_dma value
	VAR h_dma.State,						init = HAL_DMA_STATE_RESET,												ev = HAL_DMA_STATE_READY
	
	--Holds ErrorCode of h_dma value
	VAR h_dma.ErrorCode,					init = 0x1,																ev = HAL_DMA_ERROR_PARAM
	
	--Return value of HalDmaInit
	VAR	ret_HalDmaInit,						init = HAL_OK,															ev = HAL_ERROR
	
	-- Stub Calls :
		SIMUL
		
			--provides tick value in millisecond
			STUB HALGetTick() 5
			
		END SIMUL
		
	-- Calling the Unit Under Test :
	#ret_HalDmaInit = HalDmaInit(&h_dma);
	
	END ELEMENT
	
END TEST -- TEST 17
    
TEST 18
FAMILY nominal

	COMMENT Test Description
    COMMENT <TD>		
	COMMENT	[hdulibstm32f7xxhaldma-HalDmaInit-DB-LLR-010]
	COMMENT	The function does the following when the FIFOMode of Init of h_dma is DMA_FIFOMODE_ENABLE.
	COMMENT 1. Get the FIFOThreshold of Init of h_dma.
	COMMENT 2. Update the ErrorCode of h_dma as HAL_DMA_ERROR_PARAM and State of h_dma to HAL_DMA_STATE_READY and returns HAL_ERROR when 
	COMMENT returns value of the function DmaCheckFifoParam called with parameter h_dma is not equal to HAL_OK.
	COMMENT 3. Write the FIFOThreshold of Init of h_dma to FCR of Instance of h_dma
	COMMENT Equivalence Class 26, 28
	COMMENT 
	COMMENT [hdulibstm32f7xxhaldma-DmaCheckFifoParam-DB-LLR-011] 
	COMMENT The function returns status as HAL_ERROR when the below conditions are met.
	COMMENT 1.	MemDataAlignment of Init of h_dma is other than DMA_MDATAALIGN_BYTE,DMA_MDATAALIGN_HALFWORD.
	COMMENT 2.	FIFOThreshold of Init of h_dma is equal to DMA_FIFO_THRESHOLD_HALFFULL.
	COMMENT Equivalence Class 95, 86
    COMMENT </TD>
    
    ELEMENT
    
	COMMENT INPUT SECTION:
	
	--Holds Channel of Init of h_dma value
	VAR h_dma.Init.Channel,					init = 0xFF,															ev = init
	
	--Holds Direction of Init of h_dma value
	VAR h_dma.Init.Direction,				init = 0xFF,															ev = init
	
	--Holds PeriphInc of Init of h_dma value
	VAR h_dma.Init.PeriphInc, 				init = 0xFF,															ev = init
	
	--Holds MemInc of Init of h_dma value
	VAR h_dma.Init.MemInc,					init = 0xFF,															ev = init
	
	--Holds PeriphDataAlignment of Init of h_dma value
	VAR h_dma.Init.PeriphDataAlignment,		init = 0xFF,															ev = init 
	
	--Holds MemDataAlignment of Init of h_dma value
	VAR h_dma.Init.MemDataAlignment,		init = 0xFF,															ev = init
	
	--Holds Mode of Init of h_dma value
	VAR h_dma.Init.Mode,					init = 0xFF,															ev = init
	
	--Holds Priority of Init of h_dma value
	VAR h_dma.Init.Priority,				init = 0xFF,															ev = init
	
	--Holds FIFOMode of Init of h_dma value
	VAR h_dma.Init.FIFOMode,				init = DMA_FIFOMODE_ENABLE,												ev = init
	
	--Holds MemBurst of Init of h_dma value
	VAR h_dma.Init.MemBurst,				init = 0xFF,															ev = init
	
	--Holds PeriphBurst of Init of h_dma value
	VAR h_dma.Init.PeriphBurst,				init = 0xFF,															ev = init
	
	--Holds FIFOThreshold of Init of h_dma value
	VAR h_dma.Init.FIFOThreshold,			init = DMA_FIFO_THRESHOLD_HALFFULL,										ev = init
	
	--Holds FCR of Instance of h_dma value
	VAR h_dma.Instance->FCR,				init = 0x57,															ev = init
		
	COMMENT INPUT/OUTPUT SECTION:
	
	--Holds CR of Instance of h_dma value
	VAR h_dma.Instance->CR,					init = 0xFEF7F80,														ev = 0xFF

	COMMENT OUTPUT SECTION:
	
	--Holds State of h_dma value
	VAR h_dma.State,						init = HAL_DMA_STATE_RESET,												ev = HAL_DMA_STATE_READY
	
	--Holds ErrorCode of h_dma value
	VAR h_dma.ErrorCode,					init = 0x1,																ev = HAL_DMA_ERROR_PARAM
	
	--Return value of HalDmaInit
	VAR	ret_HalDmaInit,						init = HAL_OK,															ev = HAL_ERROR
	
	-- Stub Calls :
		SIMUL
		
			--provides tick value in millisecond
			STUB HALGetTick() 5
			
		END SIMUL
		
	-- Calling the Unit Under Test :
	#ret_HalDmaInit = HalDmaInit(&h_dma);
	
	END ELEMENT
	
END TEST -- TEST 18    
    
TEST 19
FAMILY nominal

	COMMENT Test Description
    COMMENT <TD>		
	COMMENT	[hdulibstm32f7xxhaldma-HalDmaInit-DB-LLR-010]
	COMMENT	The function does the following when the FIFOMode of Init of h_dma is DMA_FIFOMODE_ENABLE.
	COMMENT 1. Get the FIFOThreshold of Init of h_dma.
	COMMENT 2. Update the ErrorCode of h_dma as HAL_DMA_ERROR_PARAM and State of h_dma to HAL_DMA_STATE_READY and returns HAL_ERROR when 
	COMMENT returns value of the function DmaCheckFifoParam called with parameter h_dma is not equal to HAL_OK.
	COMMENT 3. Write the FIFOThreshold of Init of h_dma to FCR of Instance of h_dma
	COMMENT Equivalence Class 26, 28
	COMMENT 
	COMMENT [hdulibstm32f7xxhaldma-DmaCheckFifoParam-DB-LLR-011] 
	COMMENT The function returns status as HAL_ERROR when the below conditions are met.
	COMMENT 1.	MemDataAlignment of Init of h_dma is other than DMA_MDATAALIGN_BYTE,DMA_MDATAALIGN_HALFWORD.
	COMMENT 2.	FIFOThreshold of Init of h_dma is equal to DMA_FIFO_THRESHOLD_3QUARTERSFULL.
	COMMENT Equivalence Class 95, 89
    COMMENT </TD>
    
    ELEMENT
    
	COMMENT INPUT SECTION:
	
	--Holds Channel of Init of h_dma value
	VAR h_dma.Init.Channel,					init = 0xFF,															ev = init
	
	--Holds Direction of Init of h_dma value
	VAR h_dma.Init.Direction,				init = 0xFF,															ev = init
	
	--Holds PeriphInc of Init of h_dma value
	VAR h_dma.Init.PeriphInc, 				init = 0xFF,															ev = init
	
	--Holds MemInc of Init of h_dma value
	VAR h_dma.Init.MemInc,					init = 0xFF,															ev = init
	
	--Holds PeriphDataAlignment of Init of h_dma value
	VAR h_dma.Init.PeriphDataAlignment,		init = 0xFF,															ev = init 
	
	--Holds MemDataAlignment of Init of h_dma value
	VAR h_dma.Init.MemDataAlignment,		init = 0xFF,															ev = init
	
	--Holds Mode of Init of h_dma value
	VAR h_dma.Init.Mode,					init = 0xFF,															ev = init
	
	--Holds Priority of Init of h_dma value
	VAR h_dma.Init.Priority,				init = 0xFF,															ev = init
	
	--Holds FIFOMode of Init of h_dma value
	VAR h_dma.Init.FIFOMode,				init = DMA_FIFOMODE_ENABLE,												ev = init
	
	--Holds MemBurst of Init of h_dma value
	VAR h_dma.Init.MemBurst,				init = 0xFF,															ev = init
	
	--Holds PeriphBurst of Init of h_dma value
	VAR h_dma.Init.PeriphBurst,				init = 0xFF,															ev = init
	
	--Holds FIFOThreshold of Init of h_dma value
	VAR h_dma.Init.FIFOThreshold,			init = DMA_FIFO_THRESHOLD_3QUARTERSFULL,										ev = init
	
	--Holds FCR of Instance of h_dma value
	VAR h_dma.Instance->FCR,				init = 0x57,															ev = init
		
	COMMENT INPUT/OUTPUT SECTION:
	
	--Holds CR of Instance of h_dma value
	VAR h_dma.Instance->CR,					init = 0xFEF7F80,														ev = 0xFF

	COMMENT OUTPUT SECTION:
	
	--Holds State of h_dma value
	VAR h_dma.State,						init = HAL_DMA_STATE_RESET,												ev = HAL_DMA_STATE_READY
	
	--Holds ErrorCode of h_dma value
	VAR h_dma.ErrorCode,					init = 0x1,																ev = HAL_DMA_ERROR_PARAM
	
	--Return value of HalDmaInit
	VAR	ret_HalDmaInit,						init = HAL_OK,															ev = HAL_ERROR
	
	-- Stub Calls :
		SIMUL
			
			--provides tick value in millisecond
			STUB HALGetTick() 5
			
		END SIMUL
		
	-- Calling the Unit Under Test :
	#ret_HalDmaInit = HalDmaInit(&h_dma);
	
	END ELEMENT
	
END TEST -- TEST 19
    
TEST 20
FAMILY nominal

	COMMENT Test Description
    COMMENT <TD>		
	COMMENT	[hdulibstm32f7xxhaldma-HalDmaInit-DB-LLR-010]
	COMMENT	The function does the following when the FIFOMode of Init of h_dma is DMA_FIFOMODE_ENABLE.
	COMMENT 1. Get the FIFOThreshold of Init of h_dma.
	COMMENT 2. Update the ErrorCode of h_dma as HAL_DMA_ERROR_PARAM and State of h_dma to HAL_DMA_STATE_READY and returns HAL_ERROR when 
	COMMENT returns value of the function DmaCheckFifoParam called with parameter h_dma is not equal to HAL_OK.
	COMMENT 3. Write the FIFOThreshold of Init of h_dma to FCR of Instance of h_dma
	COMMENT Equivalence Class 26, 28
	COMMENT 
	COMMENT [hdulibstm32f7xxhaldma-DmaCheckFifoParam-DB-LLR-012] 
	COMMENT The function returns status as HAL_ERROR when the below conditions are met.
	COMMENT 1.MemDataAlignment of Init of h_dma is other than DMA_MDATAALIGN_BYTE,DMA_MDATAALIGN_HALFWORD.
	COMMENT 2.FIFOThreshold of Init of h_dma is equal to DMA_FIFO_THRESHOLD_FULL
	COMMENT 3.Result of AND operation of MemBurst  of Init of h_dma and DMA_SXCR_MBURST_1 is equal to DMA_SXCR_MBURST_1.
	COMMENT Equivalence Class 95. 92, 84
    COMMENT </TD>
    
    ELEMENT
    
	COMMENT INPUT SECTION:
	
	--Holds Channel of Init of h_dma value
	VAR h_dma.Init.Channel,					init = 0xFF,															ev = init
	
	--Holds Direction of Init of h_dma value
	VAR h_dma.Init.Direction,				init = 0xFF,															ev = init
	
	--Holds PeriphInc of Init of h_dma value
	VAR h_dma.Init.PeriphInc, 				init = 0xFF,															ev = init
	
	--Holds MemInc of Init of h_dma value
	VAR h_dma.Init.MemInc,					init = 0xFF,															ev = init
	
	--Holds PeriphDataAlignment of Init of h_dma value
	VAR h_dma.Init.PeriphDataAlignment,		init = 0xFF,															ev = init 
	
	--Holds MemDataAlignment of Init of h_dma value
	VAR h_dma.Init.MemDataAlignment,		init = 0xFF,															ev = init
	
	--Holds Mode of Init of h_dma value
	VAR h_dma.Init.Mode,					init = 0xFF,															ev = init
	
	--Holds Priority of Init of h_dma value
	VAR h_dma.Init.Priority,				init = 0xFF,															ev = init
	
	--Holds FIFOMode of Init of h_dma value
	VAR h_dma.Init.FIFOMode,				init = DMA_FIFOMODE_ENABLE,												ev = init
	
	--Holds MemBurst of Init of h_dma value
	VAR h_dma.Init.MemBurst,				init = DMA_SXCR_MBURST_1,															ev = init
	
	--Holds PeriphBurst of Init of h_dma value
	VAR h_dma.Init.PeriphBurst,				init = 0xFF,															ev = init
	
	--Holds FIFOThreshold of Init of h_dma value
	VAR h_dma.Init.FIFOThreshold,			init = DMA_FIFO_THRESHOLD_FULL,										ev = init
	
	--Holds FCR of Instance of h_dma value
	VAR h_dma.Instance->FCR,				init = 0x57,															ev = init
		
	COMMENT INPUT/OUTPUT SECTION:
	
	--Holds CR of Instance of h_dma value
	VAR h_dma.Instance->CR,					init = 0xFEF7F80,														ev = 0x10000FF

	COMMENT OUTPUT SECTION:
	
	--Holds State of h_dma value
	VAR h_dma.State,						init = HAL_DMA_STATE_RESET,												ev = HAL_DMA_STATE_READY
	
	--Holds ErrorCode of h_dma value
	VAR h_dma.ErrorCode,					init = 0x1,																ev = HAL_DMA_ERROR_PARAM
	
	--Return value of HalDmaInit
	VAR	ret_HalDmaInit,						init = HAL_OK,															ev = HAL_ERROR
	
	-- Stub Calls :
		SIMUL
			
			--provides tick value in millisecond
			STUB HALGetTick() 5
			
		END SIMUL
		
	-- Calling the Unit Under Test :
	#ret_HalDmaInit = HalDmaInit(&h_dma);
	
	END ELEMENT
	
END TEST -- TEST 20

TEST 21
FAMILY nominal

	COMMENT Test Description
    COMMENT <TD>		
	COMMENT	[hdulibstm32f7xxhaldma-HalDmaInit-DB-LLR-010]
	COMMENT	The function does the following when the FIFOMode of Init of h_dma is DMA_FIFOMODE_ENABLE.
	COMMENT 1. Get the FIFOThreshold of Init of h_dma.
	COMMENT 2. Do nothing when returns value of the function DmaCheckFifoParam called with parameter h_dma is equal to HAL_OK.
	COMMENT 3. Write the FIFOThreshold of Init of h_dma to FCR of Instance of h_dma
	COMMENT Equivalence Class 26, 29
	COMMENT 
	COMMENT [hdulibstm32f7xxhaldma-DmaCheckFifoParam-DB-LLR-012] 
	COMMENT The function returns status as HAL_ERROR when the below conditions are met.
	COMMENT 1.MemDataAlignment of Init of h_dma is other than DMA_MDATAALIGN_BYTE,DMA_MDATAALIGN_HALFWORD.
	COMMENT 2.FIFOThreshold of Init of h_dma is equal to DMA_FIFO_THRESHOLD_FULL
	COMMENT 3.Result of AND operation of MemBurst  of Init of h_dma and DMA_SXCR_MBURST_1 is not equal to DMA_SXCR_MBURST_1.
	COMMENT Equivalence Class 95, 92, 85
	COMMENT
	COMMENT [hdulibstm32f7xxhaldma-HalDmaInit-DB-LLR-011]
	COMMENT The function initialzes the DMA stream Base Address as returns value of the function DmaCalcBaseAndBitShift called with the
	COMMENT parameter h_dma and clear the interrupt flags (IFCR) of DMA stream Base Address
	COMMENT Equivalence Class 30
	COMMENT 
	COMMENT [hdulibstm32f7xxhaldma-HalDmaInit-DB-LLR-012]
	COMMENT The function updates the ErrorCode of h_dma as HAL_DMA_ERROR_NONE and State of h_dma to HAL_DMA_STATE_READY and returns 
	COMMENT HAL_OK.
	COMMENT Equivalence Class None
    COMMENT </TD>
    
    ELEMENT
    
	COMMENT INPUT SECTION:
	
	--Holds Channel of Init of h_dma value
	VAR h_dma.Init.Channel,					init = 0xFF,															ev = init
	
	--Holds Direction of Init of h_dma value
	VAR h_dma.Init.Direction,				init = 0xFF,															ev = init
	
	--Holds PeriphInc of Init of h_dma value
	VAR h_dma.Init.PeriphInc, 				init = 0xFF,															ev = init
	
	--Holds MemInc of Init of h_dma value
	VAR h_dma.Init.MemInc,					init = 0xFF,															ev = init
	
	--Holds PeriphDataAlignment of Init of h_dma value
	VAR h_dma.Init.PeriphDataAlignment,		init = 0xFF,															ev = init 
	
	--Holds MemDataAlignment of Init of h_dma value
	VAR h_dma.Init.MemDataAlignment,		init = 0xFF,											ev = init
	
	--Holds Mode of Init of h_dma value
	VAR h_dma.Init.Mode,					init = 0xFF,															ev = init
	
	--Holds Priority of Init of h_dma value
	VAR h_dma.Init.Priority,				init = 0xFF,															ev = init
	
	--Holds FIFOMode of Init of h_dma value
	VAR h_dma.Init.FIFOMode,				init = DMA_FIFOMODE_ENABLE,												ev = init
	
	--Holds MemBurst of Init of h_dma value
	VAR h_dma.Init.MemBurst,				init = 0xFF,															ev = init
	
	--Holds PeriphBurst of Init of h_dma value
	VAR h_dma.Init.PeriphBurst,				init = 0xFF,															ev = init
	
	--Holds FIFOThreshold of Init of h_dma value
	VAR h_dma.Init.FIFOThreshold,			init = DMA_FIFO_THRESHOLD_FULL,											ev = init
	
	VAR h_dma.Instance ,                	init = DMA1_STREAM7_BASE,												ev = init
			
	COMMENT INPUT/OUTPUT SECTION:
	
	--Holds CR of Instance of h_dma value
	VAR h_dma.Instance->CR,					init = 0xFEF7F80,														ev = 0x0
	
	--Holds FCR of Instance of h_dma value
	VAR h_dma.Instance->FCR,				init = 0x57,															ev = 0x0
	
	VAR h_dma.StreamBaseAddress,			init = (T_UINT32)&PTU_reg,												ev = 0x40026004
	
	COMMENT OUTPUT SECTION:
		
	VAR ((T_DMA_BASE_REGISTERS*)0x40026004)->IFCR,		init = 0xFF,												ev = 0x0
		    
    VAR h_dma.StreamIndex,          					init = 0x1,                        							ev = 0x16
	
	--Holds State of h_dma value
	VAR h_dma.State,						init = HAL_DMA_STATE_RESET,												ev = HAL_DMA_STATE_READY
	
	--Holds ErrorCode of h_dma value
	VAR h_dma.ErrorCode,					init = 0x1,																ev = HAL_DMA_ERROR_NONE
	
	--Return value of HalDmaInit
	VAR	ret_HalDmaInit,						init = HAL_ERROR,														ev = HAL_OK
	
	-- Stub Calls :
		SIMUL
		
			--provides tick value in millisecond
			STUB HALGetTick() 5
			
		END SIMUL
		
	-- Calling the Unit Under Test :
	#ret_HalDmaInit = HalDmaInit(&h_dma);
	
	END ELEMENT
	
END TEST -- TEST 21

TEST 22
FAMILY nominal

	COMMENT Test Description
    COMMENT <TD>		
	COMMENT	[hdulibstm32f7xxhaldma-HalDmaInit-DB-LLR-010]
	COMMENT	The function does the following when the FIFOMode of Init of h_dma is DMA_FIFOMODE_ENABLE.
	COMMENT 1. Get the FIFOThreshold of Init of h_dma.
	COMMENT 2. Do nothing when returns value of the function DmaCheckFifoParam called with parameter h_dma is equal to HAL_OK.
	COMMENT 3. Write the FIFOThreshold of Init of h_dma to FCR of Instance of h_dma
	COMMENT Equivalence Class 26, 29
	COMMENT 
	COMMENT [hdulibstm32f7xxhaldma-DmaCheckFifoParam-DB-LLR-013] 
	COMMENT The function returns HAL_OK when the below conditions are met.
	COMMENT 1.MemDataAlignment of Init of h_dma is other than DMA_MDATAALIGN_BYTE,DMA_MDATAALIGN_HALFWORD.
	COMMENT 2.FIFOThreshold of Init of h_dma is other than DMA_FIFO_THRESHOLD_1QUARTERFULL, DMA_FIFO_THRESHOLD_HALFFULL, 
 	COMMENT  DMA_FIFO_THRESHOLD_3QUARTERSFULL and DMA_FIFO_THRESHOLD_FULL.
	COMMENT Equivalence Class 95, 93
	COMMENT
	COMMENT [hdulibstm32f7xxhaldma-HalDmaInit-DB-LLR-011]
	COMMENT The function initialzes the DMA stream Base Address as returns value of the function DmaCalcBaseAndBitShift called with the
	COMMENT parameter h_dma and clear the interrupt flags (IFCR) of DMA stream Base Address
	COMMENT Equivalence Class 30
	COMMENT 
	COMMENT [hdulibstm32f7xxhaldma-HalDmaInit-DB-LLR-012]
	COMMENT The function updates the ErrorCode of h_dma as HAL_DMA_ERROR_NONE and State of h_dma to HAL_DMA_STATE_READY and returns 
	COMMENT HAL_OK.
	COMMENT Equivalence Class None
    COMMENT </TD>
    
    ELEMENT
    
	COMMENT INPUT SECTION:
	
	--Holds Channel of Init of h_dma value
	VAR h_dma.Init.Channel,					init = 0xFF,															ev = init
	
	--Holds Direction of Init of h_dma value
	VAR h_dma.Init.Direction,				init = 0xFF,															ev = init
	
	--Holds PeriphInc of Init of h_dma value
	VAR h_dma.Init.PeriphInc, 				init = 0xFF,															ev = init
	
	--Holds MemInc of Init of h_dma value
	VAR h_dma.Init.MemInc,					init = 0xFF,															ev = init
	
	--Holds PeriphDataAlignment of Init of h_dma value
	VAR h_dma.Init.PeriphDataAlignment,		init = 0xFF,															ev = init 
	
	--Holds MemDataAlignment of Init of h_dma value
	VAR h_dma.Init.MemDataAlignment,		init = 0xFF,											ev = init
	
	--Holds Mode of Init of h_dma value
	VAR h_dma.Init.Mode,					init = 0xFF,															ev = init
	
	--Holds Priority of Init of h_dma value
	VAR h_dma.Init.Priority,				init = 0xFF,															ev = init
	
	--Holds FIFOMode of Init of h_dma value
	VAR h_dma.Init.FIFOMode,				init = DMA_FIFOMODE_ENABLE,												ev = init
	
	--Holds MemBurst of Init of h_dma value
	VAR h_dma.Init.MemBurst,				init = 0xFF,															ev = init
	
	--Holds PeriphBurst of Init of h_dma value
	VAR h_dma.Init.PeriphBurst,				init = 0xFF,															ev = init
	
	--Holds FIFOThreshold of Init of h_dma value
	VAR h_dma.Init.FIFOThreshold,			init = 0xFF,											ev = init
	
	VAR h_dma.Instance ,                	init = DMA1_STREAM7_BASE,												ev = init
			
	COMMENT INPUT/OUTPUT SECTION:
	
	--Holds CR of Instance of h_dma value
	VAR h_dma.Instance->CR,					init = 0xFEF7F80,														ev = 0x0
	
	--Holds FCR of Instance of h_dma value
	VAR h_dma.Instance->FCR,				init = 0x57,															ev = 0x0
	
	VAR h_dma.StreamBaseAddress,			init = (T_UINT32)&PTU_reg,												ev = 0x40026004
	
	COMMENT OUTPUT SECTION:
		
	VAR ((T_DMA_BASE_REGISTERS*)0x40026004)->IFCR,		init = 0xFF,												ev = 0x0
		    
    VAR h_dma.StreamIndex,          					init = 0x1,                        							ev = 0x16
	
	--Holds State of h_dma value
	VAR h_dma.State,						init = HAL_DMA_STATE_RESET,												ev = HAL_DMA_STATE_READY
	
	--Holds ErrorCode of h_dma value
	VAR h_dma.ErrorCode,					init = 0x1,																ev = HAL_DMA_ERROR_NONE
	
	--Return value of HalDmaInit
	VAR	ret_HalDmaInit,						init = HAL_ERROR,														ev = HAL_OK
	
	-- Stub Calls :
		SIMUL
			
			--provides tick value in millisecond
			STUB HALGetTick() 5
			
		END SIMUL
		
	-- Calling the Unit Under Test :
	#ret_HalDmaInit = HalDmaInit(&h_dma);
	
	END ELEMENT
	
END TEST -- TEST 22

TEST 23
FAMILY nominal

	COMMENT Test Description
    COMMENT <TD>		
	COMMENT	[hdulibstm32f7xxhaldma-HalDmaInit-DB-LLR-008]
	COMMENT	The function does nothing when FIFOMode of Init of h_dma is not equal to DMA_FIFOMODE_ENABLE.
	COMMENT	Equivalence Class 27
	COMMENT
	COMMENT	[hdulibstm32f7xxhaldma-HalDmaInit-DB-LLR-010]
	COMMENT The function does nothing when the FIFOMode of Init of h_dma is not equal to DMA_FIFOMODE_ENABLE.
	COMMENT  Equivalence Class 27
    COMMENT
    COMMENT [hdulibstm32f7xxhaldma-DmaCalcBaseAndBitShift-DB-LLR-004]
	COMMENT The function sets StreamBaseAddress of h_dma to result of bitwise AND operation of Instance of h_dma and 
	COMMENT negation of  THOUSAND_TWENTY_THREE if Stream Number is less than THREE.
    COMMENT Equivalence Class 99
    COMMENT </TD>
    
    ELEMENT
    
	COMMENT INPUT SECTION:
	
	--Holds Channel of Init of h_dma value
	VAR h_dma.Init.Channel,					init = 0xFF,															ev = init
	
	--Holds Direction of Init of h_dma value
	VAR h_dma.Init.Direction,				init = 0xFF,															ev = init
	
	--Holds PeriphInc of Init of h_dma value
	VAR h_dma.Init.PeriphInc, 				init = 0xFF,															ev = init
	
	--Holds MemInc of Init of h_dma value
	VAR h_dma.Init.MemInc,					init = 0xFF,															ev = init
	
	--Holds PeriphDataAlignment of Init of h_dma value
	VAR h_dma.Init.PeriphDataAlignment,		init = 0xFF,															ev = init 
	
	--Holds MemDataAlignment of Init of h_dma value
	VAR h_dma.Init.MemDataAlignment,		init = 0xFF,											ev = init
	
	--Holds Mode of Init of h_dma value
	VAR h_dma.Init.Mode,					init = 0xFF,															ev = init
	
	--Holds Priority of Init of h_dma value
	VAR h_dma.Init.Priority,				init = 0xFF,															ev = init
	
	--Holds FIFOMode of Init of h_dma value
	VAR h_dma.Init.FIFOMode,				init = 0xFF,												ev = init
	
	--Holds MemBurst of Init of h_dma value
	VAR h_dma.Init.MemBurst,				init = 0xFF,															ev = init
	
	--Holds PeriphBurst of Init of h_dma value
	VAR h_dma.Init.PeriphBurst,				init = 0xFF,															ev = init
	
	--Holds FIFOThreshold of Init of h_dma value
	VAR h_dma.Init.FIFOThreshold,			init = 0xFF,											ev = init
	
	VAR h_dma.Instance ,                	init = DMA1_STREAM0_BASE,												ev = init
				
	COMMENT INPUT/OUTPUT SECTION:
	
	--Holds CR of Instance of h_dma value
	VAR h_dma.Instance->CR,					init = 0xFEF7F80,														ev = 0x0
	
	--Holds FCR of Instance of h_dma value
	VAR h_dma.Instance->FCR,				init = 0x57,															ev = 0x0
	
	VAR h_dma.StreamBaseAddress,			init = (T_UINT32)&PTU_reg,												ev = 0x40026000

	COMMENT OUTPUT SECTION:
		
	VAR ((T_DMA_BASE_REGISTERS*)0x40026000)->IFCR,		init = 0xFF,												ev = 0x0
		    
    VAR h_dma.StreamIndex,          					init = 0x1,                        							ev = 0x0
	
	--Holds State of h_dma value
	VAR h_dma.State,						init = HAL_DMA_STATE_RESET,												ev = HAL_DMA_STATE_READY
	
	--Holds ErrorCode of h_dma value
	VAR h_dma.ErrorCode,					init = 0x1,																ev = HAL_DMA_ERROR_NONE
	
	--Return value of HalDmaInit
	VAR	ret_HalDmaInit,						init = HAL_ERROR,														ev = HAL_OK
	
	-- Stub Calls :
		SIMUL
			
			--provides tick value in millisecond
			STUB HALGetTick() 5
			
		END SIMUL
		
	-- Calling the Unit Under Test :
	#ret_HalDmaInit = HalDmaInit(&h_dma);
	
	END ELEMENT
	
END TEST -- TEST 23
    
END SERVICE -- HalDmaInit

--------------------------------------------------------------------------------
-- Declaration of the service HALDmaRegisterCallback
--------------------------------------------------------------------------------
SERVICE HALDmaRegisterCallback
SERVICE_TYPE extern

    -- Tested service parameters declarations
    #T_DMA_HANDLE h_dma;
    #T_HAL_DMA_CALLBACK_ID callback_id;
    #void ( *p_callback)(T_DMA_HANDLE* _h_dma);
    -- By function returned type declaration
    #T_HAL_STATUS ret_HALDmaRegisterCallback;

	-- Default Variables
	ENVIRONMENT ENV_HALDmaRegisterCallback

		STRUCTURE h_dma,				init = { Instance => &PTU_Instance, Init => { Channel => 0, Direction => 0, PeriphInc => 0, MemInc => 0,
		& 								PeriphDataAlignment => 0, MemDataAlignment => 0, Mode => 0, Priority => 0, FIFOMode => 0, FIFOThreshold => 0, 
		&								MemBurst => 0, PeriphBurst => 0 }, Lock => HAL_UNLOCKED, State => HAL_DMA_STATE_RESET, Parent => &PTU_Parent, 
		&								XferCpltCallback => XferCpltCallback, XferHalfCpltCallback => XferHalfCpltCallback, XferM1CpltCallback => XferM1CpltCallback,
		&								XferM1HalfCpltCallback => XferM1HalfCpltCallback, XferErrorCallback => XferErrorCallback, XferAbortCallback =>  
		&								XferAbortCallback, ErrorCode => 0, StreamBaseAddress => 0, StreamIndex => 0 },			ev = init
		
        VAR callback_id,				init = HAL_DMA_XFER_CPLT_CB_ID,															ev = init
        
        VAR p_callback,					init = &dummyfunction,																	ev = init
        
        VAR ret_HALDmaRegisterCallback,		init = HAL_OK,																		ev = init
        
	END ENVIRONMENT -- ENV_HALDmaRegisterCallback

	USE ENV_HALDmaRegisterCallback	
	
TEST 1
FAMILY nominal

	COMMENT Test Description
    COMMENT <TD> 
    COMMENT	[hdulibstm32f7xxhaldma-HALDmaRegisterCallback-DB-LLR-001]
    COMMENT	The function calls the macro __HAL_LOCK with h_dma as its parameter.
    COMMENT	Equivalence Class 8
    COMMENT
    COMMENT	[hdulibstm32f7xxhaldma-HALDmaRegisterCallback-DB-LLR-002]
    COMMENT	The function returns HAL_OK and sets XferCpltCallback of h_dma to p_callback when State of h_dma is 
    COMMENT	equal to HAL_DMA_STATE_READY and callback_id is HAL_DMA_XFER_CPLT_CB_ID.
    COMMENT Equivalence Class 9, 10
    COMMENT
    COMMENT	[hdulibstm32f7xxhaldma-HALDmaRegisterCallback-DB-LLR-010]
    COMMENT The function call the macro __HAL_UNLOCK with h_dma as its parameter.
	COMMENT	Equivalence Class 11
	COMMENT
    COMMENT </TD>
    
	ELEMENT
	
    COMMENT INPUT SECTION:
    
    --Holds callback_id value
    VAR callback_id,						init = HAL_DMA_XFER_CPLT_CB_ID,										ev = init
    
    --Holds p_callback value
    VAR p_callback,							init = &dummyfunction,												ev = init
    
    --Holds State of h_dma value
    VAR h_dma.State,						init = HAL_DMA_STATE_READY,											ev = init
     
    COMMENT INPUT/OUTPUT SECTION:
    
    --Holds Lock of h_dma value
    -- Init and exopected value are same as in LLR 'hdulibstm32f7xxhaldma-HALDmaRegisterCallback-DB-LLR-001'
	--Lock will be set to HAL_LOCKED and in LLR 'hdulibstm32f7xxhaldma-HALDmaRegisterCallback-DB-LLR-010' Lock will be set to HAL_UNLOCKED
	VAR h_dma.Lock,							init = HAL_UNLOCKED,												ev = HAL_UNLOCKED
    
    COMMENT OUTPUT SECTION:
    
    --Holds XferCpltCallback of h_dma value
    VAR h_dma.XferCpltCallback,				init = 0,															ev = &dummyfunction
                
    --Holds return value of function ret_HALDmaRegisterCallback
    VAR ret_HALDmaRegisterCallback,			init = HAL_ERROR,													ev = HAL_OK

    -- Stub Calls :
		SIMUL
					
			--No stubs
		        		
		END SIMUL
		
    -- Calling the Unit Under Test :
    #ret_HALDmaRegisterCallback = HALDmaRegisterCallback(&h_dma, callback_id, p_callback);
    
    END ELEMENT

END TEST -- TEST 1
    
TEST 2
FAMILY nominal

	COMMENT Test Description
    COMMENT <TD> 
    COMMENT	[hdulibstm32f7xxhaldma-HALDmaRegisterCallback-DB-LLR-003]
    COMMENT	The function returns HAL_OK and sets XferHalfCpltCallback of h_dma to p_callback when State of h_dma is equal 
    COMMENT	to HAL_DMA_STATE_READY and callback_id is HAL_DMA_XFER_HALFCPLT_CB_ID.
    COMMENT Equivalence Class 9, 12
    COMMENT </TD>
	
	ELEMENT 
	
	COMMENT INPUT SECTION:
	
	--Holds callback_id value
	VAR callback_id,						init = HAL_DMA_XFER_HALFCPLT_CB_ID,									ev = init
	
	--Holds p_callback value
	VAR p_callback,							init = &dummyfunction,												ev = init
	
	--Holds State of h_dma value
	VAR h_dma.State,						init = HAL_DMA_STATE_READY,											ev = init
	 
	COMMENT INPUT/OUTPUT SECTION:
	
    --Holds Lock of h_dma value
    -- Init and exopected value are same as in LLR 'hdulibstm32f7xxhaldma-HALDmaRegisterCallback-DB-LLR-001'
	--Lock will be set to HAL_LOCKED and in LLR 'hdulibstm32f7xxhaldma-HALDmaRegisterCallback-DB-LLR-010' Lock will be set to HAL_UNLOCKED
	VAR h_dma.Lock,							init = HAL_UNLOCKED,												ev = HAL_UNLOCKED
	
	COMMENT OUTPUT SECTION:
		        
	--Holds XferHalfCpltCallback of h_dma value
	VAR h_dma.XferHalfCpltCallback,			init = 0,															ev = &dummyfunction
	
	--Holds return value of function ret_HALDmaRegisterCallback
	VAR ret_HALDmaRegisterCallback,			init = HAL_ERROR,													ev = HAL_OK

    -- Stub Calls :
		SIMUL
					
			--No stubs
		        		
		END SIMUL
		
	-- Calling the Unit Under Test :
	#ret_HALDmaRegisterCallback = HALDmaRegisterCallback(&h_dma, callback_id, p_callback);
	
	END ELEMENT
	
END TEST -- TEST 2

TEST 3
FAMILY nominal
   
	COMMENT Test Description
    COMMENT <TD> 
    COMMENT	[hdulibstm32f7xxhaldma-HALDmaRegisterCallback-DB-LLR-004]
    COMMENT	The function returns HAL_OK and set XferM1CpltCallback of h_dma to p_callback when State of h_dma is equal 
    COMMENT to HAL_DMA_STATE_READY and callback_id is HAL_DMA_XFER_M1CPLT_CB_ID.
    COMMENT Equivalence Class 9, 13	
    COMMENT </TD>
	
	ELEMENT
	
	COMMENT INPUT SECTION:
	    
	--Holds callback_id value
	VAR callback_id,						init = HAL_DMA_XFER_M1CPLT_CB_ID,									ev = init
	    
	--Holds p_callback value
	VAR p_callback,							init = &dummyfunction,												ev = init
	    
	--Holds State of h_dma value
	VAR h_dma.State,						init = HAL_DMA_STATE_READY,											ev = init
	     
	COMMENT INPUT/OUTPUT SECTION:
	    
    --Holds Lock of h_dma value
    -- Init and exopected value are same as in LLR 'hdulibstm32f7xxhaldma-HALDmaRegisterCallback-DB-LLR-001'
	--Lock will be set to HAL_LOCKED and in LLR 'hdulibstm32f7xxhaldma-HALDmaRegisterCallback-DB-LLR-010' Lock will be set to HAL_UNLOCKED
	VAR h_dma.Lock,							init = HAL_UNLOCKED,												ev = HAL_UNLOCKED
	    
	COMMENT OUTPUT SECTION:
	        	
	--Holds XferM1CpltCallback of h_dma value
	VAR h_dma.XferM1CpltCallback,			init = 0,															ev = &dummyfunction
	
	--Holds return value of function ret_HALDmaRegisterCallback
	VAR ret_HALDmaRegisterCallback,			init = HAL_ERROR,													ev = HAL_OK

    -- Stub Calls :
		SIMUL
					
			--No stubs
		        		
		END SIMUL
		
	-- Calling the Unit Under Test :
	#ret_HALDmaRegisterCallback = HALDmaRegisterCallback(&h_dma, callback_id, p_callback);
	
	END ELEMENT
	
END TEST -- TEST 3

TEST 4
FAMILY nominal

	COMMENT Test Description
    COMMENT <TD> 
    COMMENT	[hdulibstm32f7xxhaldma-HALDmaRegisterCallback-DB-LLR-005]
    COMMENT	The function returns HAL_OK and set XferM1HalfCpltCallback of h_dma to p_callback when State of h_dma is equal 
    COMMENT to HAL_DMA_STATE_READY and callback_id is HAL_DMA_XFER_M1HALFCPLT_CB_ID. 
    COMMENT Equivalence Class 9, 14	
    COMMENT </TD>
    
    ELEMENT
    
	COMMENT INPUT SECTION:
	
	--Holds callback_id value
	VAR callback_id,						init = HAL_DMA_XFER_M1HALFCPLT_CB_ID,								ev = init
	
	--Holds p_callback value
	VAR p_callback,							init = &dummyfunction,												ev = init
	
	--Holds State of h_dma value
	VAR h_dma.State,						init = HAL_DMA_STATE_READY,											ev = init
	 
	COMMENT INPUT/OUTPUT SECTION:
	
    --Holds Lock of h_dma value
    -- Init and exopected value are same as in LLR 'hdulibstm32f7xxhaldma-HALDmaRegisterCallback-DB-LLR-001'
	--Lock will be set to HAL_LOCKED and in LLR 'hdulibstm32f7xxhaldma-HALDmaRegisterCallback-DB-LLR-010' Lock will be set to HAL_UNLOCKED
	VAR h_dma.Lock,							init = HAL_UNLOCKED,												ev = HAL_UNLOCKED
	
	COMMENT OUTPUT SECTION:
	
	--Holds XferM1HalfCpltCallback of h_dma value
	VAR h_dma.XferM1HalfCpltCallback,		init = 0,															ev = &dummyfunction
		
	--Holds return value of function ret_HALDmaRegisterCallback
	VAR ret_HALDmaRegisterCallback,			init = HAL_ERROR,													ev = HAL_OK

    -- Stub Calls :
		SIMUL
					
			--No stubs
		        		
		END SIMUL
		
	-- Calling the Unit Under Test :
	#ret_HALDmaRegisterCallback = HALDmaRegisterCallback(&h_dma, callback_id, p_callback);
	
	END ELEMENT
	
END TEST -- TEST 4

TEST 5
FAMILY nominal

	COMMENT Test Description
    COMMENT <TD> 
    COMMENT	[hdulibstm32f7xxhaldma-HALDmaRegisterCallback-DB-LLR-006]
    COMMENT	The function returns HAL_OK and set XferErrorCallback of h_dma to p_callback when State of h_dma is equal 
    COMMENT to HAL_DMA_STATE_READY and callback_id is HAL_DMA_XFER_ERROR_CB_ID.
    COMMENT Equivalence Class 9, 15	
    COMMENT </TD>
	
	ELEMENT
	
	COMMENT INPUT SECTION:
	
	--Holds callback_id value
	VAR callback_id,						init = HAL_DMA_XFER_ERROR_CB_ID,									ev = init
	
	--Holds p_callback value
	VAR p_callback,							init = &dummyfunction,												ev = init
	
	--Holds State of h_dma value
	VAR h_dma.State,						init = HAL_DMA_STATE_READY,											ev = init
	 
	COMMENT INPUT/OUTPUT SECTION:
	
	--None    --Holds Lock of h_dma value
	-- Init and exopected value are same as in LLR 'hdulibstm32f7xxhaldma-HALDmaRegisterCallback-DB-LLR-001'
	--Lock will be set to HAL_LOCKED and in LLR 'hdulibstm32f7xxhaldma-HALDmaRegisterCallback-DB-LLR-010' Lock will be set to HAL_UNLOCKED
	VAR h_dma.Lock,							init = HAL_UNLOCKED,												ev = HAL_UNLOCKED
	
	COMMENT OUTPUT SECTION:
	
	--Holds XferErrorCallback of h_dma value
	VAR h_dma.XferErrorCallback,			init = 0,															ev = &dummyfunction
	
	--Holds return value of function ret_HALDmaRegisterCallback
	VAR ret_HALDmaRegisterCallback,			init = HAL_ERROR,													ev = HAL_OK

    -- Stub Calls :
		SIMUL
					
			--No stubs
		        		
		END SIMUL
		
	-- Calling the Unit Under Test :
	#ret_HALDmaRegisterCallback = HALDmaRegisterCallback(&h_dma, callback_id, p_callback);
	
	END ELEMENT
	
END TEST -- TEST 5

TEST 6
FAMILY nominal
        
	COMMENT Test Description
    COMMENT <TD> 
    COMMENT	[hdulibstm32f7xxhaldma-HALDmaRegisterCallback-DB-LLR-007]
    COMMENT	The function returns HAL_OK and set XferAbortCallback of h_dma to p_callback when State of h_dma is equal 
    COMMENT to HAL_DMA_STATE_READY and callback_id is HAL_DMA_XFER_ABORT_CB_ID.
    COMMENT Equivalence Class 9, 16	
    COMMENT </TD>
	
	ELEMENT
	
	COMMENT INPUT SECTION:
	
	--Holds callback_id value
	VAR callback_id,						init = HAL_DMA_XFER_ABORT_CB_ID,									ev = init
	
	--Holds p_callback value
	VAR p_callback,							init = &dummyfunction,												ev = init
	
	--Holds State of h_dma value
	VAR h_dma.State,						init = HAL_DMA_STATE_READY,											ev = init
	 
	COMMENT INPUT/OUTPUT SECTION:
	
    --Holds Lock of h_dma value
    -- Init and exopected value are same as in LLR 'hdulibstm32f7xxhaldma-HALDmaRegisterCallback-DB-LLR-001'
	--Lock will be set to HAL_LOCKED and in LLR 'hdulibstm32f7xxhaldma-HALDmaRegisterCallback-DB-LLR-010' Lock will be set to HAL_UNLOCKED
	VAR h_dma.Lock,							init = HAL_UNLOCKED,												ev = HAL_UNLOCKED
	
	COMMENT OUTPUT SECTION:
	
	--Holds XferAbortCallback of h_dma value
	VAR h_dma.XferAbortCallback,			init = 0,															ev = &dummyfunction
	
	--Holds return value of function ret_HALDmaRegisterCallback
	VAR ret_HALDmaRegisterCallback,			init = HAL_ERROR,													ev = HAL_OK

    -- Stub Calls :
		SIMUL
					
			--No stubs
		        		
		END SIMUL
		
	-- Calling the Unit Under Test :
	#ret_HALDmaRegisterCallback = HALDmaRegisterCallback(&h_dma, callback_id, p_callback);
	
	END ELEMENT
	
END TEST -- TEST 6

TEST 7
FAMILY nominal
	
	COMMENT Test Description
    COMMENT <TD> 
    COMMENT	[hdulibstm32f7xxhaldma-HALDmaRegisterCallback-DB-LLR-008]
    COMMENT	The function returns HAL_OK when State of h_dma is equal to HAL_DMA_STATE_READY and callback_id is other than 
    COMMENT HAL_DMA_XFER_CPLT_CB_ID, HAL_DMA_XFER_HALFCPLT_CB_ID, HAL_DMA_XFER_M1CPLT_CB_ID, HAL_DMA_XFER_M1HALFCPLT_CB_ID, 
    COMMENT HAL_DMA_XFER_ERROR_CB_ID,HAL_DMA_XFER_ABORT_CB_ID.  
    COMMENT Equivalence Class 9, 17
    COMMENT </TD>
	
	ELEMENT
	
	COMMENT INPUT SECTION:
	
	--Holds callback_id value
	VAR callback_id,						init = HAL_DMA_XFER_ALL_CB_ID,										ev = init
	
	--Holds p_callback value
	VAR p_callback,							init = &dummyfunction,												ev = init
	
	--Holds State of h_dma value
	VAR h_dma.State,						init = HAL_DMA_STATE_READY,											ev = init
	 
	COMMENT INPUT/OUTPUT SECTION:
	
    --Holds Lock of h_dma value
    -- Init and exopected value are same as in LLR 'hdulibstm32f7xxhaldma-HALDmaRegisterCallback-DB-LLR-001'
	--Lock will be set to HAL_LOCKED and in LLR 'hdulibstm32f7xxhaldma-HALDmaRegisterCallback-DB-LLR-010' Lock will be set to HAL_UNLOCKED
	VAR h_dma.Lock,							init = HAL_UNLOCKED,												ev = HAL_UNLOCKED
	
	COMMENT OUTPUT SECTION:
	
	--Holds return value of function ret_HALDmaRegisterCallback
	VAR ret_HALDmaRegisterCallback,			init = HAL_ERROR,													ev = HAL_OK

    -- Stub Calls :
		SIMUL
					
			--No stubs
		        		
		END SIMUL
		
	-- Calling the Unit Under Test :
	#ret_HALDmaRegisterCallback = HALDmaRegisterCallback(&h_dma, callback_id, p_callback);
	
	END ELEMENT
	
END TEST -- TEST 7

TEST 8
FAMILY nominal		

	COMMENT Test Description
    COMMENT <TD> 
    COMMENT	[hdulibstm32f7xxhaldma-HALDmaRegisterCallback-DB-LLR-009]
    COMMENT	The function returns HAL_ERROR  when State of h_dma is not equal to HAL_DMA_STATE_READY.
    COMMENT Equivalence Class 18
    COMMENT </TD>
	
	ELEMENT
	
	COMMENT INPUT SECTION:
				        
	--Holds callback_id value
	VAR callback_id,						init = HAL_DMA_XFER_ALL_CB_ID,										ev = init
	
	--Holds p_callback value
	VAR p_callback,							init = &dummyfunction,												ev = init
	
	--Holds State of h_dma value
	VAR h_dma.State,						init = HAL_DMA_STATE_RESET,											ev = init
	 
	COMMENT INPUT/OUTPUT SECTION:
	
    --Holds Lock of h_dma value
    -- Init and exopected value are same as in LLR 'hdulibstm32f7xxhaldma-HALDmaRegisterCallback-DB-LLR-001'
	--Lock will be set to HAL_LOCKED and in LLR 'hdulibstm32f7xxhaldma-HALDmaRegisterCallback-DB-LLR-010' Lock will be set to HAL_UNLOCKED
	VAR h_dma.Lock,							init = HAL_UNLOCKED,												ev = HAL_UNLOCKED
	
	COMMENT OUTPUT SECTION:
	
	--Holds return value of function ret_HALDmaRegisterCallback
	VAR ret_HALDmaRegisterCallback,			init = HAL_OK,														ev = HAL_ERROR

    -- Stub Calls :
		SIMUL
					
			--No stubs
		        		
		END SIMUL
		
	-- Calling the Unit Under Test :
	#ret_HALDmaRegisterCallback = HALDmaRegisterCallback(&h_dma, callback_id, p_callback);
	
	END ELEMENT
	
END TEST -- TEST 8

TEST 9
FAMILY nominal

	COMMENT Test Description
    COMMENT <TD> 
    COMMENT	[hdulibstm32f7xxhaldma-HALDmaRegisterCallback-DB-LLR-001]
    COMMENT	The function calls the macro __HAL_LOCK with h_dma as its parameter.
    COMMENT	Equivalence Class 8
    COMMENT </TD>
    
    ELEMENT
    
	COMMENT INPUT SECTION:
				        
	--Holds callback_id value
	VAR callback_id,						init = HAL_DMA_XFER_ALL_CB_ID,										ev = init
	
	--Holds p_callback value
	VAR p_callback,							init = &dummyfunction,												ev = init
	
	--Holds State of h_dma value
	VAR h_dma.State,						init = HAL_DMA_STATE_RESET,											ev = init
		 
	COMMENT INPUT/OUTPUT SECTION:
	
	--Holds Lock of h_dma value
	VAR h_dma.Lock,							init = HAL_LOCKED,													ev = init
	
	COMMENT OUTPUT SECTION:
		
	--Holds return value of function ret_HALDmaRegisterCallback
	VAR ret_HALDmaRegisterCallback,			init = HAL_OK,														ev = HAL_BUSY

    -- Stub Calls :
		SIMUL
					
			--No stubs
		        		
		END SIMUL
		
	-- Calling the Unit Under Test :
	#ret_HALDmaRegisterCallback = HALDmaRegisterCallback(&h_dma, callback_id, p_callback);
	
	END ELEMENT
	
END TEST -- TEST 9

--TEST 10
--FAMILY robustness
--
--	  COMMENT Test Description
--    COMMENT <TD> 
--    COMMENT	[hdulibstm32f7xxhaldma-HALDmaRegisterCallback-DB-LLR-001]
--    COMMENT	This test case is evaluated by giving the invalid reference to input parameter h_dma.
--    COMMENT	Equivalence Class 79
--    COMMENT </TD>
--    
--    ELEMENT
--    
--	COMMENT INPUT SECTION:
--				        
--	--None
--	
--	COMMENT INPUT/OUTPUT SECTION:
--	
--	--None
--	
--	COMMENT OUTPUT SECTION:
--	
--	--None
--
--    -- Stub Calls :
--		SIMUL
--					
--			--No stubs
--		        		
--		END SIMUL
--		
--	-- Calling the Unit Under Test :
--	#ret_HALDmaRegisterCallback = HALDmaRegisterCallback(NULL, callback_id, p_callback);
--	
--	END ELEMENT
--	
--END TEST -- TEST 10

--TEST 11
--FAMILY robustness
--
--	  COMMENT Test Description
--    COMMENT <TD> 
--    COMMENT	[hdulibstm32f7xxhaldma-HALDmaRegisterCallback-DB-LLR-002]
--    COMMENT	This test case is evaluated by giving the invalid reference to input parameter p_callback.
--    COMMENT	Equivalence Class 160
--    COMMENT </TD>
--    
--    ELEMENT
--    
--	COMMENT INPUT SECTION:
--				        
--	--None
--	
--	COMMENT INPUT/OUTPUT SECTION:
--	
--	--None
--	
--	COMMENT OUTPUT SECTION:
--	
--	--None
--
--    -- Stub Calls :
--		SIMUL
--					
--			--No stubs
--		        		
--		END SIMUL
--		
--	-- Calling the Unit Under Test :
--	#ret_HALDmaRegisterCallback = HALDmaRegisterCallback( &h_dma, callback_id, NULL);
--	
--	END ELEMENT
--	
--END TEST -- TEST 11

END SERVICE -- HALDmaRegisterCallback

--------------------------------------------------------------------------------
-- Declaration of the service HALDmaIrqHandler
--------------------------------------------------------------------------------
SERVICE HALDmaIrqHandler
SERVICE_TYPE extern

    -- Tested service parameters declarations
    #T_DMA_HANDLE h_dma;

    --Variable to assign StreamBaseAddress member
    #T_DMA_BASE_REGISTERS PTU_reg;
    #T_UINT8 PTU_add;

	-- Default Variables
	ENVIRONMENT ENV_HALDmaIrqHandler
	
		STRUCTURE h_dma,				init = { Instance => &PTU_Instance, Init => { Channel => 0, Direction => 0, PeriphInc => 0, MemInc => 0,
		& 								PeriphDataAlignment => 0, MemDataAlignment => 0, Mode => 0, Priority => 0, 
		&								FIFOMode => 0, FIFOThreshold => 0, MemBurst => 0, PeriphBurst => 0 }, Lock => HAL_UNLOCKED, State => 
		&								HAL_DMA_STATE_RESET, Parent => PTU_Parent, XferCpltCallback => XferCpltCallback, XferHalfCpltCallback => 
		&								XferHalfCpltCallback, XferM1CpltCallback => XferM1CpltCallback,XferM1HalfCpltCallback => 
		&								XferM1HalfCpltCallback, XferErrorCallback => XferErrorCallback, XferAbortCallback =>  
		&								XferAbortCallback, ErrorCode => 0, StreamBaseAddress => 0, StreamIndex => 0 },			ev = init
	
		VAR PTU_reg,					init = {others=>0x00000000},						ev = {others=>0x00000000}
		
	END ENVIRONMENT -- ENV_HALDmaIrqHandler

	USE ENV_HALDmaIrqHandler

TEST 1
FAMILY nominal

	COMMENT Test Description
    COMMENT <TD>        
    COMMENT [hdulibstm32f7xxhaldma-HALDmaIrqHandler-DB-LLR-002]
	COMMENT	The function does the following,
	COMMENT	1.	Clears the FIFO error flag by setting IFCR of StreamBaseAddress of h_dma with left shifted value of DMA_FLAG_FEIF0_4 by 
	COMMENT	StreamIndex of h_dma.
	COMMENT	2.	Updates error code by setting ErrorCode of h_dma with value got from Bitwise OR with ErrorCode of h_dma and 
	COMMENT HAL_DMA_ERROR_FE.
	COMMENT when following conditions are met,
	COMMENT i) when temp isr value Bitwise AND with (left shifted value of DMA_FLAG_FEIF0_4 by StreamIndex of h_dma) is not equal to RESET 
	COMMENT and 
	COMMENT	ii) when returns value of macro __HAL_DMA_GET_IT_SOURCE with parameters h_dma and DMA_IT_FE is not equal to RESET
	COMMENT	Equivalence Class 114, 116
	COMMENT
    COMMENT </TD>
    
    ELEMENT
    
    COMMENT INPUT SECTION:
	
	--Holds XferErrorCallback of h_dma value
	VAR h_dma.XferErrorCallback,					init = NULL,														ev = init 
	
	--Holds PTU_reg value
	VAR PTU_reg.ISR,								init = 0x1000002,													ev = 0x1000002
	        
	--Holds StreamBaseAddress of h_dma value
    VAR h_dma.StreamBaseAddress,					init = (T_UINT32)&PTU_reg,											ev = init
    
    --Holds StreamIndex of h_dma value
    VAR h_dma.StreamIndex,							init = 0x1,															ev = init								
    
    --Holds FCR of Instance of h_dma value
    VAR PTU_Instance.FCR,							init = (T_UINT32)0x00000080,										ev = init
        
    COMMENT INPUT/OUTPUT SECTION:

    --Holds ErrorCode of h_dma value
    VAR h_dma.ErrorCode,							init = 0x0,															ev =  0x6
    
    COMMENT OUTPUT SECTION:
    
    --Holds IFCR of PTU_reg value
	VAR PTU_reg.IFCR,								init = 0x1,															ev = 0x1000008
    
    --Stub calls :
    	SIMUL

    		--No stubs

    	END SIMUL
    
	-- Calling the Unit Under Test :
    #HALDmaIrqHandler(&h_dma);
    END ELEMENT

END TEST -- TEST 1

TEST 2
FAMILY nominal

	COMMENT Test Description
    COMMENT <TD>        
    COMMENT [hdulibstm32f7xxhaldma-HALDmaIrqHandler-DB-LLR-001]
    COMMENT The function does the following,
	COMMENT		a) Disables the transfer error interrupt by setting CR of Instance of h_dma with the value got from CR of Instance of h_dma 
	COMMENT			Bitwise AND with negation of DMA_IT_TE.
	COMMENT		b) Clears the transfer error flag by setting IFCR of StreamBaseAddress of h_dma with left shifted value of DMA_FLAG_TEIF0_4 
	COMMENT			by StreamIndex of h_dma.
	COMMENT		c) Updates error code by setting ErrorCode of h_dma with value got from Bitwise OR with ErrorCode of h_dma and 	
	COMMENT 		HAL_DMA_ERROR_TE.
	COMMENT		when following conditions are met,
	COMMENT		i) when temp isr value Bitwise AND with (left shifted value of DMA_FLAG_TEIF0_4 by StreamIndex of h_dma) is not equal to 
	COMMENT 		RESET and 
	COMMENT		ii) when returns value of macro __HAL_DMA_GET_IT_SOURCE with parameters h_dma and DMA_IT_TE is not equal to RESET	
	COMMENT	Equivalence Class 110, 112
	COMMENT
    COMMENT [hdulibstm32f7xxhaldma-HALDmaIrqHandler-DB-LLR-002] 
	COMMENT	The function does nothing when following condition is met,
	COMMENT i) when temp isr value Bitwise AND with (left shifted value of DMA_FLAG_FEIF0_4 by StreamIndex of h_dma) is equal to RESET
	COMMENT	Equivalence Class 115
	COMMENT
    COMMENT [hdulibstm32f7xxhaldma-HALDmaIrqHandler-DB-LLR-003]
	COMMENT The function does nothing when following condition is met,
	COMMENT i) when temp isr value Bitwise AND with (left shifted value of DMA_FLAG_DMEIF0_4 by StreamIndex of h_dma) is equal to RESET 
	COMMENT Equivalence Class 119
	COMMENT 
    COMMENT [hdulibstm32f7xxhaldma-HALDmaIrqHandler-DB-LLR-004]
    COMMENT The function does nothing when following condition is met,
    COMMENT i) when temp isr value Bitwise AND with (left shifted value of DMA_FLAG_HTIF0_4 by StreamIndex of h_dma) is equal to RESET 
    COMMENT Equivalence Class 123
    COMMENT 
    COMMENT [hdulibstm32f7xxhaldma-HALDmaIrqHandler-DB-LLR-009]
    COMMENT The function does nothing when following condition is met,
    COMMENT when temp isr value Bitwise AND with (left shifted value of DMA_FLAG_TCIF0_4 by StreamIndex of h_dma) is equal to RESET
    COMMENT Equivalence Class 139
    COMMENT 
    COMMENT [hdulibstm32f7xxhaldma-HALDmaIrqHandler-DB-LLR-018]
    COMMENT		The function does the following,
	COMMENT		a)	Sets State of h_dma with HAL_DMA_STATE_ABORT
	COMMENT		b)	Disables the stream by calling macro __HAL_DMA_DISABLE with parameter h_dma.
	COMMENT		when following conditions are met,
	COMMENT		i) when ErrorCode of h_dma is not equal to HAL_DMA_ERROR_NONE and
	COMMENT		ii) when Bitwise AND of ErrorCode of h_dma with HAL_DMA_ERROR_TE is not equal to RESET.
	COMMENT	Equivalence Class 148, 150
	COMMENT
    COMMENT [hdulibstm32f7xxhaldma-HALDmaIrqHandler-DB-LLR-019]
    COMMENT 	The function  does the following,
	COMMENT 	1)	break when pre-incremented count value is greater than time out value.
	COMMENT 	2)	loop until Bitwise AND of (CR of Instance of h_dma) with DMA_SXCR_EN is not equal to RESET and the loop breaks when pre-
	COMMENT 	incremented count value is greater than time out value. 
	COMMENT 	3)	Unlock the process by calling macro __HAL_UNLOCK with parameter h_dma.
	COMMENT 	4)	Change the DMA state to HAL_DMA_STATE_READY.
	COMMENT 	when following conditions are met,
	COMMENT 	i) when ErrorCode of h_dma is not equal to HAL_DMA_ERROR_NONE 
	COMMENT 	ii)when Bitwise AND of ErrorCode of h_dma with HAL_DMA_ERROR_TE is not equal to RESET.
	COMMENT	Equivalence Class 148, 150, 155        
	COMMENT
    COMMENT [hdulibstm32f7xxhaldma-HALDmaIrqHandler-DB-LLR-020]
    COMMENT		The function calls function XferErrorCallback of h_dma with parameter as h_dma,
	COMMENT 	when following conditions are met,
	COMMENT		i) when ErrorCode of h_dma is not equal to HAL_DMA_ERROR_NONE and
	COMMENT		ii) when XferErrorCallback of h_dma is not NULL.
	COMMENT	Equivalence Class 148, 152	
	COMMENT
    COMMENT </TD>
    
    ELEMENT
    
    COMMENT INPUT SECTION:
    
    --Holds System_core_clock value
    VAR System_core_clock,							init = 0,												ev = init
	
	--Holds XferErrorCallback of h_dma value
	VAR h_dma.XferErrorCallback,					init = XferErrorCallback,								ev = init 

	--Holds PTU_reg value
	VAR PTU_reg.ISR,								init =0x80,												ev = init
		        
	--Holds StreamBaseAddress of h_dma value
    VAR h_dma.StreamBaseAddress,					init = (T_UINT32)&PTU_reg,								ev = init
    
    --Holds StreamIndex of h_dma value
    VAR h_dma.StreamIndex,							init = 0x4,												ev = init								
    
    COMMENT INPUT/OUTPUT SECTION:
        	
    --Holds PTU_Instance value
    VAR PTU_Instance.CR ,							init = 0x4,												ev=0x0
    
    --Holds ErrorCode of h_dma value
    VAR h_dma.ErrorCode,							init = 0x0,												ev = HAL_DMA_ERROR_TE

    COMMENT OUTPUT SECTION:
        
	--Holds PTU_reg value
	VAR PTU_reg.IFCR,								init =0x8,												ev = 0x80
	
    --Holds State of h_dma value
	VAR h_dma.State,								init = HAL_DMA_STATE_RESET,								ev = HAL_DMA_STATE_READY   
	
    --Stub calls :
    	SIMUL
			
			--DMA transfer error callback
    		STUB XferErrorCallback()&PTU_add

    	END SIMUL
    
	-- Calling the Unit Under Test :
    #HALDmaIrqHandler(&h_dma);
    
    END ELEMENT

END TEST -- TEST 2

TEST 3
FAMILY nominal

	COMMENT Test Description
    COMMENT <TD>        
    COMMENT [hdulibstm32f7xxhaldma-HALDmaIrqHandler-DB-LLR-001]
    COMMENT The function does nothing when following conditions are met,
	COMMENT		i) when temp isr value Bitwise AND with (left shifted value of DMA_FLAG_TEIF0_4 by StreamIndex of h_dma) is not equal to 
	COMMENT 		RESET and 
	COMMENT		ii) when returns value of macro __HAL_DMA_GET_IT_SOURCE with parameters h_dma and DMA_IT_TE is equal to RESET	
	COMMENT	Equivalence Class 110, 113
	COMMENT
	COMMENT [hdulibstm32f7xxhaldma-HALDmaIrqHandler-DB-LLR-018]
    COMMENT		The function does the following,
	COMMENT		a)	Sets State of h_dma with HAL_DMA_STATE_ABORT
	COMMENT		b)	Disables the stream by calling macro __HAL_DMA_DISABLE with parameter h_dma.
	COMMENT		when following conditions are met,
	COMMENT		i) when ErrorCode of h_dma is not equal to HAL_DMA_ERROR_NONE and
	COMMENT		ii) when Bitwise AND of ErrorCode of h_dma with HAL_DMA_ERROR_TE is not equal to RESET.
	COMMENT	Equivalence Class 148, 150, 155 
	COMMENT
	COMMENT [hdulibstm32f7xxhaldma-HALDmaIrqHandler-DB-LLR-019]
    COMMENT 	The function  does the following,
	COMMENT 	1)	break when pre-incremented count value is greater than time out value.
	COMMENT 	2)	loop until Bitwise AND of (CR of Instance of h_dma) with DMA_SXCR_EN is not equal to RESET and the loop breaks when pre-
	COMMENT 	incremented count value is greater than time out value. 
	COMMENT 	3)	Unlock the process by calling macro __HAL_UNLOCK with parameter h_dma.
	COMMENT 	4)	Change the DMA state to HAL_DMA_STATE_READY.
	COMMENT 	when following conditions are met,
	COMMENT 	i) when ErrorCode of h_dma is not equal to HAL_DMA_ERROR_NONE and 
	COMMENT		ii) when Bitwise AND of ErrorCode of h_dma with HAL_DMA_ERROR_TE is not equal to RESET.
	COMMENT	Equivalence Class  148, 152     
	COMMENT
    COMMENT [hdulibstm32f7xxhaldma-HALDmaIrqHandler-DB-LLR-020]
    COMMENT		The function does nithing	when following conditions are met,
	COMMENT		i) when ErrorCode of h_dma is not equal to HAL_DMA_ERROR_NONE and
	COMMENT		ii) when XferErrorCallback of h_dma is NULL.
	COMMENT	Equivalence Class 153
    COMMENT </TD>
    
    ELEMENT
    
    COMMENT INPUT SECTION:
	
	--Holds System_core_clock value
	VAR System_core_clock,							init = 19200,												ev = init
	
	--Holds XferErrorCallback of h_dma value
	VAR h_dma.XferErrorCallback,					init = NULL,												ev = init 
	
	--Holds PTU_reg value
	VAR PTU_reg,									init = 0x8,													ev = init
	        
	--Holds StreamBaseAddress of h_dma value
    VAR h_dma.StreamBaseAddress,					init = (T_UINT32)&PTU_reg,									ev = init
    
    --Holds StreamIndex of h_dma value
    VAR h_dma.StreamIndex,							init = 0x0,													ev = init								
        	
    --Holds PTU_Instance value
    VAR PTU_Instance,								init = 0x00000002U,											ev=init

    --Holds ErrorCode of h_dma value
    VAR h_dma.ErrorCode,							init = 0x1,													ev = init     
    COMMENT INPUT/OUTPUT SECTION:
    
    --Holds Lock of h_dma value
    VAR h_dma.Lock,									init = HAL_LOCKED,											ev = HAL_UNLOCKED
   
    COMMENT OUTPUT SECTION:

    --Holds State of h_dma value
	VAR h_dma.State,								init = HAL_DMA_STATE_RESET,									ev = HAL_DMA_STATE_READY
	
    --Stub calls :
    	SIMUL

    		--No stubs

    	END SIMUL

	-- Calling the Unit Under Test :
    #HALDmaIrqHandler(&h_dma);
    
    END ELEMENT

END TEST -- TEST 3

TEST 4
FAMILY nominal

	COMMENT Test Description
    COMMENT <TD>        
    COMMENT [hdulibstm32f7xxhaldma-HALDmaIrqHandler-DB-LLR-001] 
    COMMENT The function does nothing when following condition is met,
	COMMENT		when temp isr value Bitwise AND with (left shifted value of DMA_FLAG_TEIF0_4 by StreamIndex of h_dma) is equal to RESET		  
	COMMENT	Equivalence Class 111 	
	COMMENT
	COMMENT [hdulibstm32f7xxhaldma-HALDmaIrqHandler-DB-LLR-018]
    COMMENT		The function does nothing when following conditions are met,
	COMMENT		i) when ErrorCode of h_dma is not equal to HAL_DMA_ERROR_NONE and
	COMMENT		ii) when Bitwise AND of ErrorCode of h_dma with HAL_DMA_ERROR_TE is equal to RESET.
	COMMENT	Equivalence Class 148, 151
    COMMENT </TD>
    
    ELEMENT
    
    COMMENT INPUT SECTION:
	
	--Holds System_core_clock value
	VAR System_core_clock,							init = 19200,															ev = init
		
	--Holds XferErrorCallback of h_dma value	
	VAR h_dma.XferErrorCallback,					init = NULL,															ev = init 
	
	--Holds PTU_reg value
	VAR PTU_reg,									init = 0x0,																ev = init
	        
	--Holds StreamBaseAddress of h_dma value
    VAR h_dma.StreamBaseAddress,					init = (T_UINT32)&PTU_reg,												ev = init
    
    --Holds StreamIndex of h_dma value
    VAR h_dma.StreamIndex,							init = 0x0,																ev = init	
    
    --Holds CR of Instance of h_dma value
    VAR PTU_Instance,								init = 0xFFFFFFFF,														ev = init
    
    --Holds ErrorCode of h_dma value
    VAR h_dma.ErrorCode,							init = 0x2,																ev = init   
    
    COMMENT INPUT/OUTPUT SECTION:
    
		--None
    
    COMMENT OUTPUT SECTION:
    
    --None
    
    --Stub calls :
    	SIMUL

    		--No stubs

    	END SIMUL

	-- Calling the Unit Under Test :
    #HALDmaIrqHandler(&h_dma);
    
    END ELEMENT

END TEST -- TEST 4

TEST 5
FAMILY nominal

	COMMENT Test Description
    COMMENT <TD>        
    COMMENT [hdulibstm32f7xxhaldma-HALDmaIrqHandler-DB-LLR-002]
	COMMENT	The function does nothing when following conditions are met,
	COMMENT i) when temp isr value Bitwise AND with (left shifted value of DMA_FLAG_FEIF0_4 by StreamIndex of h_dma) is not equal to RESET 
	COMMENT and 
	COMMENT	ii) when returns value of macro __HAL_DMA_GET_IT_SOURCE with parameters h_dma and DMA_IT_FE is equal to RESET
	COMMENT	Equivalence Class 114, 117
	COMMENT		
    COMMENT [hdulibstm32f7xxhaldma-HALDmaIrqHandler-DB-LLR-018] 
    COMMENT		The function does nothing when following condition is met,
	COMMENT		i) when ErrorCode of h_dma is equal to HAL_DMA_ERROR_NONE         
	COMMENT	Equivalence Class 149
    COMMENT </TD>
    
    ELEMENT
    
    COMMENT INPUT SECTION:
	
	--Holds XferErrorCallback of h_dma value
	VAR h_dma.XferErrorCallback,					init = NULL,															ev = init 
	
	--Holds PTU_reg value
	VAR PTU_reg,									init = 0x00000400,														ev = init
	        
	--Holds StreamBaseAddress of h_dma value
    VAR h_dma.StreamBaseAddress,					init = (T_UINT32)&PTU_reg,												ev = init
    
    --Holds StreamIndex of h_dma value
    VAR h_dma.StreamIndex,							init = 0xA,																ev = init								
    
    --Holds CR of Instance of h_dma value
    VAR PTU_Instance,								init = 0x0,																ev = init
    
    --Holds ErrorCode of h_dma value
    VAR h_dma.ErrorCode,							init = 0x0,																ev = init
        
    COMMENT INPUT/OUTPUT SECTION:

		--None
		
    COMMENT OUTPUT SECTION:
    
    --Stub calls :
    	SIMUL

    		--No stubs

    	END SIMUL
    
	-- Calling the Unit Under Test :
    #HALDmaIrqHandler(&h_dma);
    
    END ELEMENT

END TEST -- TEST 5

TEST 6
FAMILY nominal

	COMMENT Test Description
    COMMENT <TD>        
    COMMENT [hdulibstm32f7xxhaldma-HALDmaIrqHandler-DB-LLR-003]
	COMMENT	The function does following,
	COMMENT 1.	Clears the direct mode error flag by setting IFCR of StreamBaseAddress of h_dma with left shifted value of 
	COMMENT DMA_FLAG_DMEIF0_4 by StreamIndex of h_dma.
	COMMENT	2.	Updates error code by setting ErrorCode of h_dma with value got from Bitwise OR with ErrorCode of h_dma and 
	COMMENT	HAL_DMA_ERROR_DME.
	COMMENT	when following conditions are met,
	COMMENT i) when temp isr value Bitwise AND with (left shifted value of DMA_FLAG_DMEIF0_4 by StreamIndex of h_dma) is not equal to RESET 
	COMMENT	and 
	COMMENT	ii) when returns value of macro __HAL_DMA_GET_IT_SOURCE with parameters h_dma and DMA_IT_DME is not equal to RESET
	COMMENT	Equivalence Class 118, 120
    COMMENT </TD>
    
    ELEMENT
    
    COMMENT INPUT SECTION:
	
	--Holds XferErrorCallback of h_dma value
	VAR h_dma.XferErrorCallback,					init = NULL,												ev = init
	
	--Holds PTU_reg value
	VAR PTU_reg.ISR,								init = 0x1000008,											ev = init
	        
	--Holds StreamBaseAddress of h_dma value
    VAR h_dma.StreamBaseAddress,					init = (T_UINT32)&PTU_reg,									ev = init
    
    --Holds StreamIndex of h_dma value
    VAR h_dma.StreamIndex,							init = 0x1,													ev = init								
    
    --Holds CR of Instance of h_dma value
    VAR PTU_Instance.CR,							init = 0x2,													ev = init
    
    COMMENT INPUT/OUTPUT SECTION:
         
    --Holds ErrorCode of h_dma value
    VAR h_dma.ErrorCode,							init = 0x0,													ev = HAL_DMA_ERROR_DME
    
    COMMENT OUTPUT SECTION:
    
    --Holds PTU_reg value
	VAR PTU_reg.IFCR,								init = 0x4,													ev = 0x1000008
	        
    --Stub calls :
    	SIMUL

    		--No stubs

    	END SIMUL
    
	-- Calling the Unit Under Test :
    #HALDmaIrqHandler(&h_dma);
    
    END ELEMENT

END TEST -- TEST 6

TEST 7
FAMILY nominal

	COMMENT Test Description
    COMMENT <TD>
    COMMENT [hdulibstm32f7xxhaldma-HALDmaIrqHandler-DB-LLR-003]
	COMMENT	The function does nothing when following conditions are met,
	COMMENT i) when temp isr value Bitwise AND with (left shifted value of DMA_FLAG_DMEIF0_4 by StreamIndex of h_dma) is not equal to RESET 
	COMMENT	and 
	COMMENT	ii) when returns value of macro __HAL_DMA_GET_IT_SOURCE with parameters h_dma and DMA_IT_DME is equal to RESET
	COMMENT	Equivalence Class 118, 121         
    COMMENT </TD>
    
    ELEMENT
    
    COMMENT INPUT SECTION:
	
	--Holds XferErrorCallback of h_dma value
	VAR h_dma.XferErrorCallback,					init = NULL,												ev = init
	
	--Holds PTU_reg value
	VAR PTU_reg,									init = 0x40000200,											ev = init
	        
	--Holds StreamBaseAddress of h_dma value
    VAR h_dma.StreamBaseAddress,					init = (T_UINT32)&PTU_reg,									ev = init
    
    --Holds StreamIndex of h_dma value
    VAR h_dma.StreamIndex,							init = 0x7,													ev = init								
    
    --Holds CR of Instance of h_dma value
    VAR PTU_Instance,								init = 0x00000000,											ev = init
         
    --Holds ErrorCode of h_dma value
    VAR h_dma.ErrorCode,							init = 0x0,													ev = init
    
    COMMENT INPUT/OUTPUT SECTION:

    
    COMMENT OUTPUT SECTION:
    
    --Stub calls :
    	SIMUL

    		--No stubs

    	END SIMUL
    
	-- Calling the Unit Under Test :
    #HALDmaIrqHandler(&h_dma);
    
    END ELEMENT

END TEST -- TEST 7
 
TEST 8
FAMILY nominal

	COMMENT Test Description
    COMMENT <TD>        
    COMMENT [hdulibstm32f7xxhaldma-HALDmaIrqHandler-DB-LLR-004]
	COMMENT The function  Clears the half transfer complete flag by setting IFCR of StreamBaseAddress of h_dma with left shifted value of 
	COMMENT DMA_FLAG_HTIF0_4 by StreamIndex of h_dma.
	COMMENT when following conditions are met,
	COMMENT i) when temp isr value Bitwise AND with (left shifted value of DMA_FLAG_HTIF0_4 by StreamIndex of h_dma) is not equal to RESET 
	COMMENT and 
	COMMENT ii) when returns value of macro __HAL_DMA_GET_IT_SOURCE with parameters h_dma and DMA_IT_HT is not equal to RESET.
	COMMENT Equivalence Class 122, 124	
	COMMENT
	COMMENT	[hdulibstm32f7xxhaldma-HALDmaIrqHandler-DB-LLR-007]
	COMMENT The function Disables the half transfer interrupt by setting (CR of Instance of h_dma) with value got from Bitwise AND of (CR 
	COMMENT of Instance of h_dma) with negation of DMA_IT_HT.
	COMMENT when following conditions are met,
	COMMENT i)  when temp isr value Bitwise AND with (left shifted value of DMA_FLAG_HTIF0_4 by StreamIndex of h_dma) is not equal to RESET 
	COMMENT and 
	COMMENT ii) when returns value of macro __HAL_DMA_GET_IT_SOURCE with parameters h_dma and DMA_IT_HT is not equal to RESET and
	COMMENT iii) when value from Bitwise AND of (CR of Instance of h_dma) with DMA_SXCR_DBM is equal to RESET and
	COMMENT iv) when Bitwise AND of (CR of Instance of h_dma) with DMA_SXCR_CIRC is equal to RESET.
    COMMENT Equivalence Class 122, 124, 127, 134
    COMMENT 
 	COMMENT	[hdulibstm32f7xxhaldma-HALDmaIrqHandler-DB-LLR-008]       
    COMMENT The function calls function XferHalfCpltCallback of h_dma with parameter as h_dma,
	COMMENT when following conditions are met,
	COMMENT i)  when temp isr value Bitwise AND with (left shifted value of DMA_FLAG_HTIF0_4 by StreamIndex of h_dma) is not equal to RESET 
	COMMENT and 
	COMMENT ii) when returns value of macro __HAL_DMA_GET_IT_SOURCE with parameters h_dma and DMA_IT_HT is not equal to RESET and
	COMMENT iii) when value from Bitwise AND of (CR of Instance of h_dma) with DMA_SXCR_DBM is equal to RESET and
	COMMENT iv) when XferHalfCpltCallback of h_dma is not NULL.
    COMMENT Equivalence Class 122, 124, 127, 136
    COMMENT 		
    COMMENT </TD>
    
    ELEMENT
    
    COMMENT INPUT SECTION:
    
	--Holds PTU_reg value
	VAR PTU_reg.ISR,								init = 0x10,										ev = init
	        
	--Holds StreamBaseAddress of h_dma value
    VAR h_dma.StreamBaseAddress,					init = (T_UINT32)&PTU_reg,							ev = init
    
    --Holds StreamIndex of h_dma value
    VAR h_dma.StreamIndex,							init = 0x0,											ev = init								
    
    VAR h_dma.XferHalfCpltCallback,					init = XferHalfCpltCallback,						ev = init

          
    --Holds ErrorCode of h_dma value
    VAR h_dma.ErrorCode,							init = 0x0,											ev = init
    
    COMMENT INPUT/OUTPUT SECTION:
    
    --Holds CR of Instance of h_dma value
    VAR PTU_Instance.CR,							init = 0x00000008,									ev = 0x0			    
    
    COMMENT OUTPUT SECTION:
    
    --Holds PTU_reg value
	VAR PTU_reg.IFCR,								init = 0x00,										ev = 0x10
    
    --Stub calls :
    	SIMUL
    		
			--DMA Half transfer complete callback
    		STUB XferHalfCpltCallback()&PTU_add

    	END SIMUL
    
	-- Calling the Unit Under Test :
    #HALDmaIrqHandler(&h_dma);
    
    END ELEMENT

END TEST -- TEST 8
 
TEST 9
FAMILY nominal

	COMMENT Test Description
    COMMENT <TD>        
	COMMENT	[hdulibstm32f7xxhaldma-HALDmaIrqHandler-DB-LLR-007]
	COMMENT The function Disables the half transfer interrupt by setting (CR of Instance of h_dma) with value got from Bitwise AND of (CR 
	COMMENT of Instance of h_dma) with negation of DMA_IT_HT.
	COMMENT when following conditions are met,
	COMMENT i)  when temp isr value Bitwise AND with (left shifted value of DMA_FLAG_HTIF0_4 by StreamIndex of h_dma) is not equal to RESET 
	COMMENT and 
	COMMENT ii) when returns value of macro __HAL_DMA_GET_IT_SOURCE with parameters h_dma and DMA_IT_HT is not equal to RESET and
	COMMENT iii) when value from Bitwise AND of (CR of Instance of h_dma) with DMA_SXCR_DBM is equal to RESET and
	COMMENT iv) when Bitwise AND of (CR of Instance of h_dma) with DMA_SXCR_CIRC is not equal to RESET.
    COMMENT Equivalence Class 122, 124, 127, 135
	COMMENT 
 	COMMENT	[hdulibstm32f7xxhaldma-HALDmaIrqHandler-DB-LLR-008]       
    COMMENT The function calls function XferHalfCpltCallback of h_dma with parameter as h_dma,
	COMMENT when following conditions are met,
	COMMENT i)  when temp isr value Bitwise AND with (left shifted value of DMA_FLAG_HTIF0_4 by StreamIndex of h_dma) is not equal to RESET 
	COMMENT and 
	COMMENT ii) when returns value of macro __HAL_DMA_GET_IT_SOURCE with parameters h_dma and DMA_IT_HT is not equal to RESET and
	COMMENT iii) when value from Bitwise AND of (CR of Instance of h_dma) with DMA_SXCR_DBM is equal to RESET and
	COMMENT iv) when XferHalfCpltCallback of h_dma is NULL.
    COMMENT Equivalence Class 122, 124, 127, 137 
    COMMENT 
    COMMENT </TD>
    
    ELEMENT
    
    COMMENT INPUT SECTION:
		
	--Holds PTU_reg value
	VAR PTU_reg.ISR,								init = 0x10,									ev = init
	        
	--Holds StreamBaseAddress of h_dma value
    VAR h_dma.StreamBaseAddress,					init = (T_UINT32)&PTU_reg,						ev = init
    
    --Holds StreamIndex of h_dma value
    VAR h_dma.StreamIndex,							init = 0x0,										ev = init								
    
    VAR h_dma.XferHalfCpltCallback,					init = NULL,									ev = init
    
    --Holds CR of Instance of h_dma value
    VAR PTU_Instance.CR,							init = 0x00000108,								ev = init			    
          
    --Holds ErrorCode of h_dma value
    VAR h_dma.ErrorCode,							init = 0x0,										ev = init
    
    COMMENT INPUT/OUTPUT SECTION:

		--None
    
    COMMENT OUTPUT SECTION:
    
	--Holds PTU_reg value
	VAR PTU_reg.IFCR,								init = 0x0,										ev = 0x10
    
    --Stub calls :
    	SIMUL

    		--No stubs

    	END SIMUL
    	
	-- Calling the Unit Under Test :
    #HALDmaIrqHandler(&h_dma);
    
    END ELEMENT

END TEST -- TEST 9
    
TEST 10
FAMILY nominal

	COMMENT Test Description
    COMMENT <TD>        
    COMMENT [hdulibstm32f7xxhaldma-HALDmaIrqHandler-DB-LLR-004]
    COMMENT The function  do nothing when following conditions are met,
	COMMENT i) when temp isr value Bitwise AND with (left shifted value of DMA_FLAG_HTIF0_4 by StreamIndex of h_dma) is not equal to RESET 
	COMMENT and 
	COMMENT ii) when returns value of macro __HAL_DMA_GET_IT_SOURCE with parameters h_dma and DMA_IT_HT is equal to RESET.
	COMMENT Equivalence Class 122, 125
    COMMENT </TD>
    
    ELEMENT
    
    COMMENT INPUT SECTION:
		
	--Holds PTU_reg value
	VAR PTU_reg,									init = 0x200,										ev = init
	        
	--Holds StreamBaseAddress of h_dma value
    VAR h_dma.StreamBaseAddress,					init = (T_UINT32)&PTU_reg,							ev = init
    
    --Holds StreamIndex of h_dma value
    VAR h_dma.StreamIndex,							init = 0x5,											ev = init								
    
    VAR h_dma.XferHalfCpltCallback,					init = NULL,										ev = init
    
    --Holds CR of Instance of h_dma value
    VAR PTU_Instance.CR,							init = 0x0,											ev = init			    
          
    --Holds ErrorCode of h_dma value
    VAR h_dma.ErrorCode,							init = 0x0,											ev = init
    
    COMMENT INPUT/OUTPUT SECTION:

		--None
    
    COMMENT OUTPUT SECTION:
    
    --Stub calls :
    	SIMUL

    		--No stubs

    	END SIMUL
    
	-- Calling the Unit Under Test :
    #HALDmaIrqHandler(&h_dma);
    
    END ELEMENT

END TEST -- TEST 10

TEST 11
FAMILY nominal

	COMMENT Test Description
	COMMENT <TD>        
    COMMENT [hdulibstm32f7xxhaldma-HALDmaIrqHandler-DB-LLR-009]
    COMMENT The function clears the transfer complete flag by setting IFCR of StreamBaseAddress of h_dma with left shifted value of 
    COMMENT DMA_FLAG_TCIF0_4 by StreamIndex of h_dma. 
	COMMENT when following conditions are met,
	COMMENT i)  when temp isr value Bitwise AND with (left shifted value of DMA_FLAG_TCIF0_4 by StreamIndex of h_dma) is not equal to RESET 
	COMMENT and 
	COMMENT ii) when returns value of macro __HAL_DMA_GET_IT_SOURCE with parameters h_dma and DMA_IT_TC is not equal to RESET 
    COMMENT Equivalence Class 138, 156
    COMMENT 
    COMMENT [hdulibstm32f7xxhaldma-HALDmaIrqHandler-DB-LLR-010]
    COMMENT The function sets,
	COMMENT a)	CR of Instance of h_dma with Bitwise AND of (CR of Instance of h_dma ) with (negation of (DMA_IT_TC Bitwise OR DMA_IT_TE 
	COMMENT Bitwise  OR DMA_IT_DME)) and
	COMMENT b)	FCR of Instance of h_dma with Bitwise AND of (FCR of Instance of h_dma ) with negation of DMA_IT_FE.
	COMMENT when following conditions are met,
	COMMENT i)  when temp isr value Bitwise AND with (left shifted value of DMA_FLAG_TCIF0_4 by StreamIndex of h_dma) is not equal to RESET 
	COMMENT and 
	COMMENT ii) when returns value of macro __HAL_DMA_GET_IT_SOURCE with parameters h_dma and DMA_IT_TC is not equal to RESET and
	COMMENT iii) when State of h_dma is equal to HAL_DMA_STATE_ABORT.
	COMMENT Equivalence Class 138, 156, 140
    COMMENT 
    COMMENT [hdulibstm32f7xxhaldma-HALDmaIrqHandler-DB-LLR-011]
    COMMENT The function sets,
	COMMENT a)	CR of Instance of h_dma with Bitwise AND of (CR of Instance of h_dma ) with (negation of DMA_IT_HT)
	COMMENT when following conditions are met,
	COMMENT i)  when temp isr value Bitwise AND with (left shifted value of DMA_FLAG_TCIF0_4 by StreamIndex of h_dma) is not equal to RESET 
	COMMENT and 
	COMMENT ii) when returns value of macro __HAL_DMA_GET_IT_SOURCE with parameters h_dma and DMA_IT_TC is not equal to RESET  and
	COMMENT iii) when State of h_dma is equal to HAL_DMA_STATE_ABORT and
	COMMENT iv) when XferHalfCpltCallback of h_dma is not NULL OR XferM1HalfCpltCallback of h_dma is NULL.
	COMMENT MC/DC condition TRUE and FALSE are covered
    COMMENT Equivalence Class 138, 156, 140, 136, 133
    COMMENT 
    COMMENT [hdulibstm32f7xxhaldma-HALDmaIrqHandler-DB-LLR-012]
    COMMENT The function does the following,
	COMMENT a)	Clear all interrupt flags at correct offset within the register by setting IFCR of StreamBaseAddress of h_dma with left 
	COMMENT shifted value of CLR_IFCR by StreamIndex of h_dma.
	COMMENT b)	Unlock the process by calling macro __HAL_UNLOCK with parameter h_dma.
	COMMENT c)	Change the State of h_dma to HAL_DMA_STATE_READY.
	COMMENT when following conditions are met,
	COMMENT i)  when temp isr value Bitwise AND with (left shifted value of DMA_FLAG_TCIF0_4 by StreamIndex of h_dma) is not equal to RESET 
	COMMENT and 
	COMMENT ii) when returns value of macro __HAL_DMA_GET_IT_SOURCE with parameters h_dma and DMA_IT_TC is not equal to RESET and
	COMMENT iii) when State of h_dma is equal to HAL_DMA_STATE_ABORT.
    COMMENT Equivalence Class 138, 156, 140
    COMMENT 
    COMMENT [hdulibstm32f7xxhaldma-HALDmaIrqHandler-DB-LLR-013]
	COMMENT The function calls function XferAbortCallback of h_dma with parameter as h_dma,
	COMMENT when following conditions are met,
	COMMENT i) when temp isr value Bitwise AND with (left shifted value of DMA_FLAG_TCIF0_4 by StreamIndex of h_dma) is not equal to RESET 
	COMMENT and 
	COMMENT ii) when returns value of macro __HAL_DMA_GET_IT_SOURCE with parameters h_dma and DMA_IT_TC is not equal to RESET and
	COMMENT iii) when State of h_dma is equal to HAL_DMA_STATE_ABORT and
	COMMENT iv) when XferAbortCallback of h_dma is not NULL.
    COMMENT Equivalence Class 138, 156, 140, 142 
    COMMENT </TD>
    
    ELEMENT
    
    COMMENT INPUT SECTION:
		
	--Holds PTU_reg value
	VAR PTU_reg.ISR,									init = 0x20,												ev = init
	        
	--Holds StreamBaseAddress of h_dma value
    VAR h_dma.StreamBaseAddress,					init = (T_UINT32)&PTU_reg,									ev = init
    
    --Holds StreamIndex of h_dma value
    VAR h_dma.StreamIndex,							init = 0x0,													ev = init								
    
    VAR h_dma.XferHalfCpltCallback,					init = XferHalfCpltCallback,								ev = init
    
    VAR h_dma.XferM1HalfCpltCallback,				init = XferHalfCpltCallback,								ev = init  
    
    VAR h_dma.XferAbortCallback,					init = XferAbortCallback,									ev = init 
          
    --Holds ErrorCode of h_dma value
    VAR h_dma.ErrorCode,							init = 0x0,													ev = init
    
    COMMENT INPUT/OUTPUT SECTION:
    
    --Holds CR of Instance of h_dma value
    VAR PTU_Instance.CR,							init =0x10,													ev = 0x0	
    
    --Holds FCR of Instance of h_dma value
    VAR PTU_Instance.FCR,							init =0x80,													ev = 0x0
    
    VAR h_dma.State,								init = HAL_DMA_STATE_ABORT,									ev =  HAL_DMA_STATE_READY
    
    COMMENT OUTPUT SECTION:
    
    --Holds PTU_reg value
	VAR PTU_reg.IFCR,								init = 0x0,													ev = 0x3F
		
         --Stub calls :
	     	SIMUL
				
				--DMA transfer Abort callback
				STUB XferAbortCallback()&PTU_add
	
    	END SIMUL
    	
	-- Calling the Unit Under Test :
    #HALDmaIrqHandler(&h_dma);
    
    END ELEMENT

END TEST -- TEST 11
    
TEST 12
FAMILY nominal

	COMMENT Test Description
    COMMENT <TD>        
    COMMENT 
    COMMENT [hdulibstm32f7xxhaldma-HALDmaIrqHandler-DB-LLR-011]
    COMMENT The function sets,
	COMMENT a)	CR of Instance of h_dma with Bitwise AND of (CR of Instance of h_dma ) with (negation of DMA_IT_HT)
	COMMENT when following conditions are met,
	COMMENT i)  when temp isr value Bitwise AND with (left shifted value of DMA_FLAG_TCIF0_4 by StreamIndex of h_dma) is not equal to RESET 
	COMMENT and 
	COMMENT ii) when return value of macro __HAL_DMA_GET_IT_SOURCE with parameters h_dma and DMA_IT_TC is not equal to RESET  and
	COMMENT iii) when State of h_dma is equal to HAL_DMA_STATE_ABORT and
	COMMENT iv) when XferHalfCpltCallback of h_dma is NULL OR XferM1HalfCpltCallback of h_dma is not NULL.
	COMMENT MC/DC condition FALSE and TRUE are covered
    COMMENT Equivalence Class 138, 156, 140, 137, 132
    COMMENT 
    COMMENT [hdulibstm32f7xxhaldma-HALDmaIrqHandler-DB-LLR-013]
	COMMENT The function does nothing when following conditions are met,
	COMMENT i) when temp isr value Bitwise AND with (left shifted value of DMA_FLAG_TCIF0_4 by StreamIndex of h_dma) is not equal to RESET 
	COMMENT and 
	COMMENT ii) when return value of macro __HAL_DMA_GET_IT_SOURCE with parameters h_dma and DMA_IT_TC is not equal to RESET and
	COMMENT iii) when State of h_dma is equal to HAL_DMA_STATE_ABORT and
	COMMENT iv) when XferAbortCallback of h_dma is NULL.
    COMMENT Equivalence Class 138, 156, 140, 143
    COMMENT </TD>       
    
    ELEMENT
    
    COMMENT INPUT SECTION:
		
	--Holds PTU_reg value
	VAR PTU_reg.ISR,								init = 0x20,										ev = init
	        
	--Holds StreamBaseAddress of h_dma value
    VAR h_dma.StreamBaseAddress,					init = (T_UINT32)&PTU_reg,							ev = init
    
    --Holds StreamIndex of h_dma value
    VAR h_dma.StreamIndex,							init = 0x0,											ev = init								
    
    VAR h_dma.XferHalfCpltCallback,					init = NULL,										ev = init
    
    VAR h_dma.XferM1HalfCpltCallback,				init = XferHalfCpltCallback,						ev = init  
    
    VAR h_dma.XferAbortCallback,					init = NULL,										ev = init 
          
    --Holds ErrorCode of h_dma value
    VAR h_dma.ErrorCode,							init = 0x0,											ev = init
    
    COMMENT INPUT/OUTPUT SECTION:
    
    --Holds CR of Instance of h_dma value
    VAR PTU_Instance.CR,							init = 0x00000010,									ev = 0x0			    
    
    VAR h_dma.State,								init = HAL_DMA_STATE_ABORT,							ev =  HAL_DMA_STATE_READY
    
    COMMENT OUTPUT SECTION:
    
    --Holds FCR of Instance of h_dma value
    VAR PTU_Instance.FCR,							init =0x80,											ev = 0x0

	--Holds PTU_reg value
	VAR PTU_reg.IFCR,								init = 0x0,											ev = 0x3F
	
    --Stub calls :
		SIMUL
				
			--No stubs
	
    	END SIMUL
    	
	-- Calling the Unit Under Test :
    #HALDmaIrqHandler(&h_dma);
    
    END ELEMENT

END TEST -- TEST 12
    
TEST 13
FAMILY nominal

	COMMENT Test Description
    COMMENT <TD>        
    COMMENT 
    COMMENT [hdulibstm32f7xxhaldma-HALDmaIrqHandler-DB-LLR-010]
    COMMENT The function sets,
	COMMENT a)	CR of Instance of h_dma with Bitwise AND of (CR of Instance of h_dma ) with (negation of (DMA_IT_TC Bitwise OR DMA_IT_TE 
	COMMENT Bitwise  OR DMA_IT_DME)) and
	COMMENT b)	FCR of Instance of h_dma with Bitwise AND of (FCR of Instance of h_dma ) with negation of DMA_IT_FE.
	COMMENT when following conditions are met,
	COMMENT i)  when temp isr value Bitwise AND with (left shifted value of DMA_FLAG_TCIF0_4 by StreamIndex of h_dma) is not equal to RESET 
	COMMENT and 
	COMMENT ii) when returns value of macro __HAL_DMA_GET_IT_SOURCE with parameters h_dma and DMA_IT_TC is not equal to RESET and
	COMMENT iii) when State of h_dma is not equal to HAL_DMA_STATE_ABORT.
	COMMENT Equivalence Class 138, 156, 141
	COMMENT
    COMMENT [hdulibstm32f7xxhaldma-HALDmaIrqHandler-DB-LLR-011]
    COMMENT The function do nothing when following conditions are met,
	COMMENT i)  when temp isr value Bitwise AND with (left shifted value of DMA_FLAG_TCIF0_4 by StreamIndex of h_dma) is not equal to RESET 
	COMMENT and 
	COMMENT ii) when return value of macro __HAL_DMA_GET_IT_SOURCE with parameters h_dma and DMA_IT_TC is not equal to RESET  and
	COMMENT iii) when State of h_dma is equal to HAL_DMA_STATE_ABORT and
	COMMENT iv) when XferHalfCpltCallback of h_dma is NULL OR XferM1HalfCpltCallback of h_dma is NULL.
	COMMENT MC/DC condition FALSE and FALSE are covered
    COMMENT Equivalence Class 138, 156, 140, 137, 133
    COMMENT 
    COMMENT </TD>
    
    ELEMENT
    
    COMMENT INPUT SECTION:
		
	--Holds PTU_reg value
	VAR PTU_reg.ISR,								init = 0x20,								ev = init
	        
	--Holds StreamBaseAddress of h_dma value
    VAR h_dma.StreamBaseAddress,					init = (T_UINT32)&PTU_reg,					ev = init
    
    --Holds StreamIndex of h_dma value
    VAR h_dma.StreamIndex,							init = 0x0,									ev = init								
   
    VAR h_dma.XferHalfCpltCallback,					init = NULL,								ev = init
    
    VAR h_dma.XferM1HalfCpltCallback,				init = NULL,								ev = init  
    
    VAR h_dma.XferAbortCallback,					init = NULL,								ev = init 
          
    --Holds ErrorCode of h_dma value
    VAR h_dma.ErrorCode,							init = 0x0,									ev = init
    
    COMMENT INPUT/OUTPUT SECTION:
    
    --Holds CR of Instance of h_dma value
    VAR PTU_Instance.CR,							init = 0x00000010,							ev = 0x0			    
    
    VAR h_dma.State,								init = HAL_DMA_STATE_ABORT,					ev =  HAL_DMA_STATE_READY
    
    COMMENT OUTPUT SECTION:
    
    --Holds FCR of Instance of h_dma value
    VAR PTU_Instance.FCR,							init =0x80,									ev = 0x0
    
	--Holds PTU_reg value
	VAR PTU_reg.IFCR,								init = 0x00,							ev = 0x3F
    
    --Stub calls :
	     SIMUL
				
			--No stubs
	
    	END SIMUL
    
	-- Calling the Unit Under Test :
    #HALDmaIrqHandler(&h_dma);
    
    END ELEMENT

END TEST -- TEST 13
    
TEST 14
FAMILY nominal

	COMMENT Test Description
    COMMENT <TD>        
    COMMENT 
    COMMENT [hdulibstm32f7xxhaldma-HALDmaIrqHandler-DB-LLR-016]	
    COMMENT The function does the following,
	COMMENT a)	Disable the transfer complete interrupt by setting CR of Instance of h_dma with value got from Bitwise AND of CR of
	COMMENT Instance of h_dma  with negation of DMA_IT_TC.
	COMMENT b)	Unlock the process by calling macro __HAL_UNLOCK with parameter h_dma.
	COMMENT c)	Change the State of h_dma to HAL_DMA_STATE_READY.
	COMMENT when following conditions are met,
	COMMENT i) when temp isr value Bitwise AND with (left shifted value of DMA_FLAG_TCIF0_4 by StreamIndex of h_dma) is not equal to RESET
	COMMENT and 
	COMMENT ii) when return value of macro __HAL_DMA_GET_IT_SOURCE with parameters h_dma and DMA_IT_TC is not equal to RESET and
	COMMENT iii) when Bitwise AND of (CR of Instance of h_dma) with DMA_SXCR_DBM is equal to RESET and
	COMMENT iv) when Bitwise AND of (CR of Instance of h_dma) with DMA_SXCR_CIRC is equal to RESET.
    COMMENT Equivalence Class 138, 156, 127, 134
    COMMENT 
    COMMENT [hdulibstm32f7xxhaldma-HALDmaIrqHandler-DB-LLR-017]	 
    COMMENT The function calls function XferCpltCallback of h_dma with parameter as h_dma,
	COMMENT when following conditions are met,
	COMMENT i) when temp isr value Bitwise AND with (left shifted value of DMA_FLAG_TCIF0_4 by StreamIndex of h_dma) is not equal to RESET
	COMMENT and 
	COMMENT ii) when return value of macro __HAL_DMA_GET_IT_SOURCE with parameters h_dma and DMA_IT_TC is not equal to RESET and
	COMMENT iii) when Bitwise AND of (CR of Instance of h_dma) with DMA_SXCR_DBM is equal to RESET and
	COMMENT iv) when XferCpltCallback of h_dma is not equal to NULL
    COMMENT Equivalence Class 138, 156, 127, 146         
    COMMENT </TD>        
    
    ELEMENT
    
    COMMENT INPUT SECTION:
		
	--Holds PTU_reg value
	VAR PTU_reg.ISR,								init = 0x20,								ev = init
	        
	--Holds StreamBaseAddress of h_dma value
    VAR h_dma.StreamBaseAddress,					init = (T_UINT32)&PTU_reg,					ev = init
    
    --Holds StreamIndex of h_dma value
    VAR h_dma.StreamIndex,							init = 0x0,									ev = init								
    
    VAR h_dma.XferHalfCpltCallback,					init = NULL,								ev = init
    
    VAR h_dma.XferM1HalfCpltCallback,				init = NULL,								ev = init  
    
    VAR h_dma.XferAbortCallback,					init = NULL,								ev = init 
          
    --Holds ErrorCode of h_dma value
    VAR h_dma.ErrorCode,							init = 0x0,									ev = init
    
    COMMENT INPUT/OUTPUT SECTION:
    
    --Holds CR of Instance of h_dma value
    VAR PTU_Instance.CR,							init = 0x00000010,							ev = 0x0			    
    
    VAR h_dma.State,								init = HAL_DMA_STATE_RESET,					ev =  HAL_DMA_STATE_READY
    
    COMMENT OUTPUT SECTION:
    
	--Holds PTU_reg value
	VAR PTU_reg.IFCR,								init = 0x0,									ev = 0x20
    
    --Stub calls :
		SIMUL
			
			--DMA transfer complete callback
			STUB XferCpltCallback()&PTU_add
	
    	END SIMUL
    	
	-- Calling the Unit Under Test :
    #HALDmaIrqHandler(&h_dma);
    
    END ELEMENT

END TEST -- TEST 14
   
TEST 15
FAMILY nominal

	COMMENT Test Description
    COMMENT <TD>        
    COMMENT 
    COMMENT [hdulibstm32f7xxhaldma-HALDmaIrqHandler-DB-LLR-016]	
    COMMENT The function does nothing
	COMMENT when following conditions are met,
	COMMENT i) when temp isr value Bitwise AND with (left shifted value of DMA_FLAG_TCIF0_4 by StreamIndex of h_dma) is not equal to RESET
	COMMENT and 
	COMMENT ii) when return value of macro __HAL_DMA_GET_IT_SOURCE with parameters h_dma and DMA_IT_TC is not equal to RESET and
	COMMENT iii) when Bitwise AND of (CR of Instance of h_dma) with DMA_SXCR_DBM is equal to RESET and
	COMMENT iv) when Bitwise AND of (CR of Instance of h_dma) with DMA_SXCR_CIRC is not equal to RESET.
    COMMENT Equivalence Class 138, 156, 127, 135
    COMMENT 
    COMMENT [hdulibstm32f7xxhaldma-HALDmaIrqHandler-DB-LLR-017]	 
    COMMENT The function does nothing when following conditions are met,
	COMMENT i) when temp isr value Bitwise AND with (left shifted value of DMA_FLAG_TCIF0_4 by StreamIndex of h_dma) is not equal to RESET
	COMMENT and 
	COMMENT ii) when return value of macro __HAL_DMA_GET_IT_SOURCE with parameters h_dma and DMA_IT_TC is not equal to RESET and
	COMMENT iii) when Bitwise AND of (CR of Instance of h_dma) with DMA_SXCR_DBM is equal to RESET and
	COMMENT iv) when XferCpltCallback of h_dma is equal to NULL
    COMMENT Equivalence Class 138, 156, 127, 147   
    COMMENT </TD>
    
    ELEMENT
    
    COMMENT INPUT SECTION:
		
	--Holds PTU_reg value
	VAR PTU_reg.ISR,								init = 0x40,									ev = init
	        
	--Holds StreamBaseAddress of h_dma value
    VAR h_dma.StreamBaseAddress,					init = (T_UINT32)&PTU_reg,						ev = init
    
    --Holds StreamIndex of h_dma value
    VAR h_dma.StreamIndex,							init = 0x1,										ev = init								
    
   
    VAR h_dma.XferCpltCallback,						init = NULL,									ev = init
          	
    --Holds ErrorCode of h_dma value
    VAR h_dma.ErrorCode,							init = 0x0,										ev = init
    
    COMMENT INPUT/OUTPUT SECTION:
    
    --Holds CR of Instance of h_dma value
    VAR PTU_Instance.CR,							init =0x110,									ev = 0x110			    
    
    VAR h_dma.State,								init = HAL_DMA_STATE_RESET,						ev =  HAL_DMA_STATE_RESET
    
    COMMENT OUTPUT SECTION:
    
	--Holds PTU_reg value
	VAR PTU_reg.IFCR,								init = 0x0,										ev = 0x40
    
    -- Stub Calls :
		SIMUL
					
			--No stubs
		        		
		END SIMUL
		
	-- Calling the Unit Under Test :
    #HALDmaIrqHandler(&h_dma);
    
    END ELEMENT

END TEST -- TEST 15
    
TEST 16
FAMILY nominal

	COMMENT Test Description
    COMMENT <TD>        
    COMMENT [hdulibstm32f7xxhaldma-HALDmaIrqHandler-DB-LLR-009]
    COMMENT The function does nothing when following conditions are met,
	COMMENT i)  when temp isr value Bitwise AND with (left shifted value of DMA_FLAG_TCIF0_4 by StreamIndex of h_dma) is not equal to RESET
	COMMENT and 
	COMMENT ii) when return value of macro __HAL_DMA_GET_IT_SOURCE with parameters h_dma and DMA_IT_TC is equal to RESET 
    COMMENT Equivalence Class 138, 157
    COMMENT </TD>
    
    ELEMENT
    
    COMMENT INPUT SECTION:
		
	--Holds PTU_reg value
	VAR PTU_reg,									init = {others=>0x40},							ev = init
	        
	--Holds StreamBaseAddress of h_dma value
    VAR h_dma.StreamBaseAddress,					init = (T_UINT32)&PTU_reg,						ev = init
    
    --Holds StreamIndex of h_dma value
    VAR h_dma.StreamIndex,							init = 0x1,										ev = init
    
    --Holds CR of Instance of h_dma value
    VAR PTU_Instance.CR,							init = 0x00000100,								ev = init			    
          
    COMMENT INPUT/OUTPUT SECTION:

		--None
		
    COMMENT OUTPUT SECTION:
    
    --None
    
    -- Stub Calls :
		SIMUL
					
			--No stubs
		        		
		END SIMUL
		
	-- Calling the Unit Under Test :
    #HALDmaIrqHandler(&h_dma);
    
    END ELEMENT

END TEST -- TEST 16

TEST 17
FAMILY nominal

	COMMENT Test Description
    COMMENT <TD>     
	COMMENT	[hdulibstm32f7xxhaldma-HALDmaIrqHandler-DB-LLR-005]
	COMMENT The function calls function XferHalfCpltCallback of h_dma with parameter as h_dma,
	COMMENT	when following conditions are met,
	COMMENT	i) when temp isr value Bitwise AND with (left shifted value of DMA_FLAG_HTIF0_4 by StreamIndex of h_dma) is not equal to RESET and 
	COMMENT	ii) when return value of macro __HAL_DMA_GET_IT_SOURCE with parameters h_dma and DMA_IT_HT is not equal to RESET and
	COMMENT	iii) when value from Bitwise AND of (CR of Instance of h_dma) with DMA_SXCR_DBM is not equal to RESET and
	COMMENT	iv) when Bitwise AND of (CR of Instance of h_dma) with DMA_SXCR_CT is equal to RESET and
	COMMENT	v) when XferHalfCpltCallback of h_dma is not NULL.
	COMMENT	Equivalence Class 122, 124, 126, 128, 130
    COMMENT </TD>
    
    ELEMENT
    
    COMMENT INPUT SECTION:
    
    --Holds ISR of PTU_reg value
	VAR PTU_reg.ISR,								init = 0x10,													ev = init
	        
	--Holds StreamBaseAddress of h_dma value
    VAR h_dma.StreamBaseAddress,					init = (T_UINT32)&PTU_reg,										ev = init
   
    --Holds StreamIndex of h_dma value
    VAR h_dma.StreamIndex,							init = 0x0,														ev = init								
    
    --Holds XferHalfCpltCallback of h_dma value
    VAR h_dma.XferHalfCpltCallback,					init = XferHalfCpltCallback,									ev = init
    
    --Holds CR of Instance of h_dma value
    VAR PTU_Instance.CR,							init = (T_UINT32)0x00040008,									ev = init			    
          
    --Holds ErrorCode of h_dma value
    VAR h_dma.ErrorCode,							init = 0x0,													 	ev = init
            
    COMMENT INPUT/OUTPUT SECTION:

		--None
		
    COMMENT OUTPUT SECTION:
    		
	--Holds IFCR of PTU_reg value
	VAR PTU_reg.IFCR,								init = 0x0,														ev = 0x10
    
    --Stub calls :
    	SIMUL
			
			--DMA Half transfer complete callback
    		STUB XferHalfCpltCallback()&PTU_add

    	END SIMUL
    
	-- Calling the Unit Under Test :
    #HALDmaIrqHandler(&h_dma);
    
    END ELEMENT

END TEST -- TEST 17

TEST 18
FAMILY nominal

	COMMENT Test Description
    COMMENT <TD> 
	COMMENT	[hdulibstm32f7xxhaldma-HALDmaIrqHandler-DB-LLR-005]
	COMMENT The function does nothing,
	COMMENT	when following conditions are met,
	COMMENT	i) when temp isr value Bitwise AND with (left shifted value of DMA_FLAG_HTIF0_4 by StreamIndex of h_dma) is not equal to RESET and 
	COMMENT	ii) when return value of macro __HAL_DMA_GET_IT_SOURCE with parameters h_dma and DMA_IT_HT is not equal to RESET and
	COMMENT	iii) when value from Bitwise AND of (CR of Instance of h_dma) with DMA_SXCR_DBM is not equal to RESET and
	COMMENT	iv) when Bitwise AND of (CR of Instance of h_dma) with DMA_SXCR_CT is equal to RESET and
	COMMENT	v) when XferHalfCpltCallback of h_dma is NULL.
	COMMENT	Equivalence Class 122, 124, 126, 128, 131
    COMMENT </TD>
    
    ELEMENT
    
    COMMENT INPUT SECTION:
    
    --Holds ISR of PTU_reg value
	VAR PTU_reg.ISR,								init = 0x10,													ev = init
	        
	--Holds StreamBaseAddress of h_dma value
    VAR h_dma.StreamBaseAddress,					init = (T_UINT32)&PTU_reg,										ev = init
   
    --Holds StreamIndex of h_dma value
    VAR h_dma.StreamIndex,							init = 0x0,														ev = init								
    
    --Holds XferHalfCpltCallback of h_dma value
    VAR h_dma.XferHalfCpltCallback,					init = NULL,													ev = init
    
    --Holds CR of Instance of h_dma value
    VAR PTU_Instance.CR,							init = (T_UINT32)0x00040008,									ev = init			    
          
    --Holds ErrorCode of h_dma value
    VAR h_dma.ErrorCode,							init = 0x0,													 	ev = init
    
    COMMENT INPUT/OUTPUT SECTION:

		--None
        
    COMMENT OUTPUT SECTION:
    		
	--Holds IFCR of PTU_reg value
	VAR PTU_reg.IFCR,								init = 0x0,														ev = 0x10
    
    --Stub calls :
    	SIMUL

    		--No stubs

    	END SIMUL
    
	-- Calling the Unit Under Test :
    #HALDmaIrqHandler(&h_dma);
    
    END ELEMENT

END TEST -- TEST 18

TEST 19
FAMILY nominal

	COMMENT Test Description
    COMMENT <TD> 
	COMMENT	[hdulibstm32f7xxhaldma-HALDmaIrqHandler-DB-LLR-006]
	COMMENT The function calls function XferM1HalfCpltCallback of h_dma with parameter as h_dma,
	COMMENT when following conditions are met,
	COMMENT when temp isr value Bitwise AND with (left shifted value of DMA_FLAG_HTIF0_4 by StreamIndex of h_dma) is not equal to RESET and 
	COMMENT when return value of macro __HAL_DMA_GET_IT_SOURCE with parameters h_dma and DMA_IT_HT is not equal to RESET and
	COMMENT when value from Bitwise AND of (CR of Instance of h_dma) with DMA_SXCR_DBM is not equal to RESET and
	COMMENT when Bitwise AND of (CR of Instance of h_dma) with DMA_SXCR_CT is not equal to RESET and
	COMMENT when XferM1HalfCpltCallback of h_dma is not NULL.
	COMMENT	Equivalence Class 122, 124, 126, 129, 132
    COMMENT </TD>
    
    ELEMENT
    
    COMMENT INPUT SECTION:
    
    --Holds ISR of PTU_reg value
	VAR PTU_reg.ISR,								init = 0x10,													ev = init
	        
	--Holds StreamBaseAddress of h_dma value
    VAR h_dma.StreamBaseAddress,					init = (T_UINT32)&PTU_reg,										ev = init
   
    --Holds StreamIndex of h_dma value
    VAR h_dma.StreamIndex,							init = 0x0,														ev = init								
    
    --Holds XferM1HalfCpltCallback of h_dma value
    VAR h_dma.XferM1HalfCpltCallback,				init = XferM1HalfCpltCallback,									ev = init
    
    --Holds CR of Instance of h_dma value
    VAR PTU_Instance.CR,							init = (T_UINT32)0x000C0008,									ev = init			    
          
    --Holds ErrorCode of h_dma value
    VAR h_dma.ErrorCode,							init = 0x0,													 	ev = init
            
    COMMENT INPUT/OUTPUT SECTION:

		--None
		
    COMMENT OUTPUT SECTION:
    		
	--Holds IFCR of PTU_reg value
	VAR PTU_reg.IFCR,								init = 0x00,													ev = 0x10
    
    --Stub calls :
    	SIMUL
			
			--DMA transfer Half complete Memory1 callback
    		STUB XferM1HalfCpltCallback()&PTU_add

    	END SIMUL
    
	-- Calling the Unit Under Test :
    #HALDmaIrqHandler(&h_dma);
    
    END ELEMENT

END TEST -- TEST 19

TEST 20
FAMILY nominal

	COMMENT Test Description
    COMMENT <TD> 
	COMMENT	[hdulibstm32f7xxhaldma-HALDmaIrqHandler-DB-LLR-006]
	COMMENT The function does nothing,
	COMMENT when following conditions are met,
	COMMENT when temp isr value Bitwise AND with (left shifted value of DMA_FLAG_HTIF0_4 by StreamIndex of h_dma) is not equal to RESET and 
	COMMENT when return value of macro __HAL_DMA_GET_IT_SOURCE with parameters h_dma and DMA_IT_HT is not equal to RESET and
	COMMENT when value from Bitwise AND of (CR of Instance of h_dma) with DMA_SXCR_DBM is not equal to RESET and
	COMMENT when Bitwise AND of (CR of Instance of h_dma) with DMA_SXCR_CT is not equal to RESET and
	COMMENT when XferM1HalfCpltCallback of h_dma is NULL.
	COMMENT	Equivalence Class 122, 124, 126, 139, 133
    COMMENT </TD>
    
    ELEMENT
    
    COMMENT INPUT SECTION:
    
    --Holds ISR of PTU_reg value
	VAR PTU_reg.ISR,								init = 0x10,													ev = init
	        
	--Holds StreamBaseAddress of h_dma value
    VAR h_dma.StreamBaseAddress,					init = (T_UINT32)&PTU_reg,										ev = init
   
    --Holds StreamIndex of h_dma value
    VAR h_dma.StreamIndex,							init = 0x0,														ev = init								
    
    --Holds XferM1HalfCpltCallback of h_dma value
    VAR h_dma.XferM1HalfCpltCallback,				init = NULL,													ev = init
    
    --Holds CR of Instance of h_dma value
    VAR PTU_Instance.CR,							init = (T_UINT32)0x000C0008,									ev = init			    
          
    --Holds ErrorCode of h_dma value
    VAR h_dma.ErrorCode,							init = 0x0,													 	ev = init
          
    COMMENT INPUT/OUTPUT SECTION:

		--None
		
    COMMENT OUTPUT SECTION:
    		
	--Holds IFCR of PTU_reg value
	VAR PTU_reg.IFCR,								init = 0x0,														ev = 0x10
    
    --Stub calls :
    	SIMUL

    		--No stubs

    	END SIMUL
    
	-- Calling the Unit Under Test :
    #HALDmaIrqHandler(&h_dma);
    
    END ELEMENT

END TEST -- TEST 20

TEST 21
FAMILY nominal

	COMMENT Test Description
    COMMENT <TD>        
    COMMENT [hdulibstm32f7xxhaldma-HALDmaIrqHandler-DB-LLR-014]
    COMMENT The function calls function XferM1CpltCallback of h_dma parameter as h_dma,
	COMMENT when following conditions are met,
	COMMENT when temp isr value Bitwise AND with (left shifted value of DMA_FLAG_TCIF0_4 by StreamIndex of h_dma) is not equal to RESET and 
	COMMENT when return value of macro __HAL_DMA_GET_IT_SOURCE with parameters h_dma and DMA_IT_TC is not equal to RESET and
	COMMENT when Bitwise AND of (CR of Instance of h_dma) with DMA_SXCR_DBM is not equal to RESET and
	COMMENT when Bitwise AND of (CR of Instance of h_dma) with DMA_SXCR_CT  is equal to RESET and
	COMMENT when XferM1CpltCallback of h_dma is not equal to NULL.
	COMMENT Equivalence Class 138, 156, 126, 128, 144
    COMMENT </TD>       
    
    ELEMENT
    
    COMMENT INPUT SECTION:
		
	--Holds PTU_reg value
	VAR PTU_reg.ISR,								init = 0x20,										ev = init
	

	--Holds StreamBaseAddress of h_dma value
    VAR h_dma.StreamBaseAddress,					init = (T_UINT32)&PTU_reg,							ev = init
    
    --Holds StreamIndex of h_dma value
    VAR h_dma.StreamIndex,							init = 0x0,											ev = init								
    
    --Holds XferM1CpltCallback of h_dma value
    VAR h_dma.XferM1CpltCallback,					init = XferM1CpltCallback,							ev = init  
    
    --Holds CR of Instance of h_dma value
    VAR PTU_Instance.CR,							init = (T_UINT32)0x00040010,						ev = init			    
          
    --Holds ErrorCode of h_dma value
    VAR h_dma.ErrorCode,							init = 0x0,											ev = init
    
    --Holds State of h_dma value
    VAR h_dma.State,								init = HAL_DMA_STATE_RESET,							ev =  init
    
    COMMENT INPUT/OUTPUT SECTION:

    	--None
    		
    COMMENT OUTPUT SECTION:
    
    --Holds PTU_reg value
	VAR PTU_reg.IFCR,								init = 0x0,											ev = 0x20
	
    --Stub calls :
		SIMUL
			
			--DMA transfer complete Memory1 callback
			STUB XferM1CpltCallback()&PTU_add
	
    	END SIMUL
    	
	-- Calling the Unit Under Test :
    #HALDmaIrqHandler(&h_dma);
    
    END ELEMENT

END TEST -- TEST 21

TEST 22
FAMILY nominal

	COMMENT Test Description
    COMMENT <TD>        
    COMMENT [hdulibstm32f7xxhaldma-HALDmaIrqHandler-DB-LLR-014]
    COMMENT The function does nothing,
	COMMENT when following conditions are met,
	COMMENT when temp isr value Bitwise AND with (left shifted value of DMA_FLAG_TCIF0_4 by StreamIndex of h_dma) is not equal to RESET and 
	COMMENT when return value of macro __HAL_DMA_GET_IT_SOURCE with parameters h_dma and DMA_IT_TC is not equal to RESET and
	COMMENT when Bitwise AND of (CR of Instance of h_dma) with DMA_SXCR_DBM is not equal to RESET and
	COMMENT when Bitwise AND of (CR of Instance of h_dma) with DMA_SXCR_CT  is equal to RESET and
	COMMENT when XferM1CpltCallback of h_dma is equal to NULL.
	COMMENT Equivalence Class 138, 156, 126, 128, 145
    COMMENT </TD>       
    
    ELEMENT
    
    COMMENT INPUT SECTION:
		
	--Holds PTU_reg value
	VAR PTU_reg.ISR,								init = 0x20,										ev = init
	

	--Holds StreamBaseAddress of h_dma value
    VAR h_dma.StreamBaseAddress,					init = (T_UINT32)&PTU_reg,							ev = init
    
    --Holds StreamIndex of h_dma value
    VAR h_dma.StreamIndex,							init = 0x0,											ev = init								
    
    --Holds XferM1CpltCallback of h_dma value
    VAR h_dma.XferM1CpltCallback,					init = NULL,										ev = init  

    --Holds CR of Instance of h_dma value
    VAR PTU_Instance.CR,							init = (T_UINT32)0x00040010,						ev = init			    
          
    --Holds ErrorCode of h_dma value
    VAR h_dma.ErrorCode,							init = 0x0,											ev = init
    
    --Holds State of h_dma value
    VAR h_dma.State,								init = HAL_DMA_STATE_RESET,							ev =  init
    
    COMMENT INPUT/OUTPUT SECTION:
    
		--None
    
    COMMENT OUTPUT SECTION:
    
    --Holds PTU_reg value
	VAR PTU_reg.IFCR,								init = 0x0,											ev = 0x20
	
    --Stub calls :
		SIMUL
				
			--No stubs
	
    	END SIMUL
    	
	-- Calling the Unit Under Test :
    #HALDmaIrqHandler(&h_dma);
    
    END ELEMENT

END TEST -- TEST 22

TEST 23
FAMILY nominal

	COMMENT Test Description
    COMMENT <TD>        
    COMMENT [hdulibstm32f7xxhaldma-HALDmaIrqHandler-DB-LLR-015]
    COMMENT The function calls XferCpltCallback of h_dma with parameter as h_dma,
	COMMENT when following conditions are met,
	COMMENT when temp isr value Bitwise AND with (left shifted value of DMA_FLAG_TCIF0_4 by StreamIndex of h_dma) is not equal to RESET and 
	COMMENT when return value of macro __HAL_DMA_GET_IT_SOURCE with parameters h_dma and DMA_IT_TC is not equal to RESET and
	COMMENT when Bitwise AND of (CR of Instance of h_dma) with DMA_SXCR_DBM is not equal to RESET and
	COMMENT when Bitwise AND of (CR of Instance of h_dma) with DMA_SXCR_CT  is not equal to RESET and
	COMMENT when XferCpltCallback of h_dma is not equal to NULL.
	COMMENT Equivalence Class 138, 156, 126, 128, 146
    COMMENT </TD>       
    
    ELEMENT
    
    COMMENT INPUT SECTION:
		
	--Holds PTU_reg value
	VAR PTU_reg.ISR,								init = 0x20,										ev = init
	

	--Holds StreamBaseAddress of h_dma value
    VAR h_dma.StreamBaseAddress,					init = (T_UINT32)&PTU_reg,							ev = init
    
    --Holds StreamIndex of h_dma value
    VAR h_dma.StreamIndex,							init = 0x0,											ev = init								
    
    --Holds XferM1CpltCallback of h_dma value
    VAR h_dma.XferCpltCallback,						init = XferCpltCallback,							ev = init  
    
    --Holds CR of Instance of h_dma value
    VAR PTU_Instance.CR,							init = (T_UINT32)0x000C0010,						ev = init			    
          
    --Holds ErrorCode of h_dma value
    VAR h_dma.ErrorCode,							init = 0x0,											ev = init
    
    --Holds State of h_dma value
    VAR h_dma.State,								init = HAL_DMA_STATE_RESET,							ev =  init
            
    COMMENT INPUT/OUTPUT SECTION:

		--None
		
    COMMENT OUTPUT SECTION:
    
    --Holds PTU_reg value
	VAR PTU_reg.IFCR,								init = 0x0,											ev = 0x20
	
    --Stub calls :
		SIMUL
			
			--DMA transfer complete callback
			STUB XferCpltCallback()&PTU_add
	
    	END SIMUL
    	
	-- Calling the Unit Under Test :
    #HALDmaIrqHandler(&h_dma);
    
    END ELEMENT

END TEST -- TEST 23

TEST 24
FAMILY nominal

	COMMENT Test Description
    COMMENT <TD>        
    COMMENT [hdulibstm32f7xxhaldma-HALDmaIrqHandler-DB-LLR-015]
    COMMENT The function does nothing,
	COMMENT when following conditions are met,
	COMMENT when temp isr value Bitwise AND with (left shifted value of DMA_FLAG_TCIF0_4 by StreamIndex of h_dma) is not equal to RESET and 
	COMMENT when return value of macro __HAL_DMA_GET_IT_SOURCE with parameters h_dma and DMA_IT_TC is not equal to RESET and
	COMMENT when Bitwise AND of (CR of Instance of h_dma) with DMA_SXCR_DBM is not equal to RESET and
	COMMENT when Bitwise AND of (CR of Instance of h_dma) with DMA_SXCR_CT  is not equal to RESET and
	COMMENT when XferCpltCallback of h_dma is equal to NULL.
	COMMENT Equivalence Class 138, 156, 126, 128, 147
    COMMENT </TD>       
    
    ELEMENT
    
    COMMENT INPUT SECTION:
		
	--Holds PTU_reg value
	VAR PTU_reg.ISR,								init = 0x20,										ev = init
	

	--Holds StreamBaseAddress of h_dma value
    VAR h_dma.StreamBaseAddress,					init = (T_UINT32)&PTU_reg,							ev = init
    
    --Holds StreamIndex of h_dma value
    VAR h_dma.StreamIndex,							init = 0x0,											ev = init								
    
    --Holds XferM1CpltCallback of h_dma value
    VAR h_dma.XferCpltCallback,						init = NULL,										ev = init  
    
    --Holds CR of Instance of h_dma value
    VAR PTU_Instance.CR,							init = (T_UINT32)0x000C0010,	 					ev = init			    
          
    --Holds ErrorCode of h_dma value
    VAR h_dma.ErrorCode,							init = 0x0,											ev = init
    
    --Holds State of h_dma value
    VAR h_dma.State,								init = HAL_DMA_STATE_RESET,							ev =  init
            
    COMMENT INPUT/OUTPUT SECTION:

		--None
		
    COMMENT OUTPUT SECTION:
    
    --Holds PTU_reg value
	VAR PTU_reg.IFCR,								init = 0x0,											ev = 0x20
	
    --Stub calls :
		SIMUL
				
			--No stubs
	
    	END SIMUL
    	
	-- Calling the Unit Under Test :
    #HALDmaIrqHandler(&h_dma);
    
    END ELEMENT

END TEST -- TEST 24

--TEST 25
--FAMILY robustness
--
--	COMMENT Test Description
--  COMMENT <TD>        
--  COMMENT [hdulibstm32f7xxhaldma-HALDmaIrqHandler-DB-LLR-001]
--  COMMENT This test case is evaluated by giving the invalid reference to input parameter h_dma
--	COMMENT Equivalence Class 81
--    COMMENT </TD>       
--    
--    ELEMENT
--    
--    COMMENT INPUT SECTION:
--		
--	--None
--        
--    COMMENT INPUT/OUTPUT SECTION:
--    
--    --None
--    
--    COMMENT OUTPUT SECTION:
--    
--    --None
--    
--    --Stub calls :
--		SIMUL
--				
--			--No stubs
--	
--    	END SIMUL
--    	
--	-- Calling the Unit Under Test :
--    #HALDmaIrqHandler(NULL);
--    
--    END ELEMENT
--
--END TEST -- TEST 25

END SERVICE -- HALDmaIrqHandler

