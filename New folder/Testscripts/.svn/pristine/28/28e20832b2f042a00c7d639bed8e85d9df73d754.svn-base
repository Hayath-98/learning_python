HEADER Tested hdudispfapp, Source Code Ver : 1.10 , TestScript Ver : 1.7
--------------------------------------------------------------------------------
-- Author Name          : Manju Kiran M
--
-- File Name            : hdudispfapp_2.ptu
--
-- Test Creation Date   : 25.10.2017
--
-- Tested Functions     : CheckMsgCtrlArea
--                        AppTask
--
-- Version History      :
--
-- TEST-VERSION         TEST-DATE           TESTER NAME         MODIFICATIONS
--  ------------        ---------           -----------         -------------
--      1.1             25.10.2017         Manju Kiran M        Created the PTU file.
--      1.2             10.11.2017         Manju Kiran M        Updated as per #PR100171
--      1.3             14.11.2017         Manju Kiran M        Updated as per #PR100171
--      1.4             10.04.2018         Hemalatha S          Updated as per #PR100201
--      1.5             27.07.2020         Vignesh Sunil        Updated as per #PR100267
--      1.6             15.09.2020         Vignesh Sunil        Updated as per #PR100281
--      1.7             28.04.2021         Vignesh Sunil        Updated as per #PR100338
--------------------------------------------------------------------------------
--
-- TESTED FILE INCLUDE DIRECTIVES
--
--------------------------------------------------------------------------------

#/*============================================================================*/
#/* Module specific includes                                                   */
#/*============================================================================*/

##include "hdudispfa429.h"            /* Routines for arinc 429 */
##include "hdudispfapp.h"             /* contains Engine Information System application */
##include "hdudispfbspnor.h" /* contains the common defines and functions prototypes bspnor*/
##include "hdudispfcas.h"             /* defines and functions prototypes for CAS */
##include "hdudispfdma2.h"   /* contains the common defines and functions prototypes for dma */
##include "hdudispfdma2d.h"  /* contains the common defines and functions prototypes for dma2d */
##include "hdudispfglobalsettings.h"  /* contains prototype for Global settings module*/
##include "hdudispfgrapp.h"           /* routines for all graph */
##include "hdudispfmenu.h"            /* contains prototype for menu module*/
##include "hdudispfoffside.h"         /* contains prototype for offside modules*/
##include "hdudispfpbit.h"            /* contains prototypes for PBIT test. */
##include "hdudispfpbs.h"             /* Contains functions prototypes of pbs.*/
##include "hdudispfresource.h"        /* provides central location to use of On Chip Peripherals*/
##include "hdudispfstandard.h"        /* Standard definitions */
##include "hdudispfucos.h"            /* uC/OS routines for the real-time kernel */
##include "hdulibbasictypes.h"      /* Standard basic data type definitions */
##include "hdudispfpara.h"     /* prototype for builds faults, message and system information */
##include "hdudispfpanel.h"           /* Contains functions prototypes of panel.*/
##include "hdudispfrtd.h"             /* Provide mapping for all A825 incoming parameters */
##include "hdudispfforeground.h"     /* contains the routines for foreground layer of the display */
##include "hdudispfarinc825.h"        /* Define the structure for an ARINC 825 Message. */
##include "hdudispfa825comm.h"        /* Routines for arinc 825 communication */
##include "hdudispfoscpu.h"           /* OS function declarations */
##include "hdudispfparams.h"     /* provides the tags for various parameters and parameter units */

#/* Updated as per PR100083*/
##include "hdudispfwdog.h"            /* Watch dog timer declarations */
##include "hdudispfdauprofile.h"   /* defines the constants for ARINC 825  Message Traffic.*/
##include "hdudispfpdidata.h" /* provides pdi declarations */
##include "hdulibcorecm7.h"  /* Cortex-M7 processor and core peripherals */
##include "hdudispfpdicheck.h" /* Provides PDI check declarations */
##include "hdudispfrterror.h"       /*provides stub routine for run time errors.*/
##include "hdudispfmdff.h"            /*  Description contains Fuel flow functionalities */
##include "hdudispflmsscu.h"  /* SCU rtd processing and error codes  */

##define STK_DEF_VAL   0xDEADDEADU
##define ZERO_TIME_OUT 0U
##define SEM_CNT_VAL   0U
##define MAX_FRAME_VAL 25U
##define BIT_15_SET    16384U
##define DU_POSITION_SFC 49169U
--------------------------------------------------------------------------------
--
-- TESTED FILE DECLARATIONS 
--
--------------------------------------------------------------------------------

-- Declarations of the global variables of the tested file

    #extern T_UINT8 Engine_count_app;
    
    #T_STEXTBOXDATA *Top_menu[10];
    #T_BOOL New_message;
    #T_UINT32 Can1_msg_cntr;
    #T_BOOL Both_dau_fail;
    #T_UINT16 Port1_label_count;
    #T_EIU Active_eiu;
    #T_BOOL Cool_down_select;
    #T_EPAGE_NUM Page_num;
    #T_UINT8 Splash_done;
    #T_BOOL Du_identified;
    #T_UINT16 U16_message_words[3]; 
    #T_UINT16 Pbit_test_result;
    #T_BOOL Data_received;
    #T_UINT8 Du_position;
    #T_BOOL Long_press;
    # volatile  T_INT32 Itm_rx_buffer;
    #T_BOOL Demo_mode;
	#T_BOOL Fuel_flow_select;

-- Declarations of the temporary variable

    --Variable created to verify function OsSemPend    
    #T_OS_EVENT *PTU_ps_semaphore;    
    #T_UINT8 PTU_err;
    
    --Variable created to verify function OsSemAccept
    #T_OS_EVENT PTU_param_event;
    
    --Variable created to verify function RTDGetParam
    #T_PARAM_READING PTU_ps_dest[10];
    #T_UINT32 PTU_index =0;
    
    --Variable created to verify function OffsideProcessA825NSC
    #T_A825_MESSAGE PTU1_s_mess;
    
    --Variable created to verify function GlobalSettingsProcessNSC
    #T_A825_MESSAGE PTU2_s_mess;
    
    --Variable created to verify function OffsideProcessA825NOC
    #T_A825_MESSAGE PTU3_s_mess;
    
    --Variable created to verify function A429ProcessA825
    #T_A825_MESSAGE PTU4_s_mess;
    
    #T_PARAM_READING PTU_psdest;
    #T_STEXTBOXDATA PTU_ps_this_box;
    #T_A825_MESSAGE PTU_ps_xm;
    #T_UINT32 PTU_i = 0;
--------------------------------------------------------------------------------

BEGIN

    COMMENT Author Name      : Manju Kiran M
    COMMENT
    COMMENT File Name        : hdudispfapp_2.ptu
    COMMENT
    COMMENT Tested Functions : CheckMsgCtrlArea
    COMMENT                    AppTask
    COMMENT
    COMMENT Assumptions and Constraints
    COMMENT <AC>
    COMMENT
    COMMENT Assumption(s):
    COMMENT None
    COMMENT
    COMMENT Constraint(s):
    COMMENT
    COMMENT 1. Source file "hdudispfapp.c" is modified for testing LLR "hdudispfapp-AppTask-DB-LLR-009". 
    COMMENT The while(TRUE) is modified for terminating the infinite loop.
    COMMENT 
    COMMENT Snippet of code is added in function 'AppTask':
    COMMENT
    COMMENT T_UINT16 PTU_count =0; /*local variable declared for testing purpose*/
    COMMENT ....
    COMMENT while(TRUE)
    COMMENT {
    COMMENT     .................
    COMMENT
    COMMENT   /*Modified for testing purpose to terminate infinite loop*/
    COMMENT   PTU_count++;
    COMMENT   if(PTU_count == 4)
    COMMENT   {
    COMMENT    break;
    COMMENT   } 
    COMMENT   else
    COMMENT   {
    COMMENT                                /*nothing*/
    COMMENT   }
    COMMENT     .................
    COMMENT     
    COMMENT }/*End of while loop*/
    COMMENT hence the loop cannot be verified for 0 and 1 time and FALSE condition.
    COMMENT
    COMMENT 2. Header file "hdulibcorecm7.h" is modified for testing "hdudispfapp-AppTask-DB-LLR-010".
    COMMENT The for(;;) is modified for terminating the infinite loop as "__NOP" is commented.
    COMMENT
    COMMENT Snippet of code is added in function 'NVICSystemReset':
    COMMENT 
    COMMENT T_UINT16 PTU_count =0; /*local variable declared for testing purpose*/
    COMMENT ....
    COMMENT  for(;;)      /*wait until reset */
    COMMENT  {
    COMMENT     /*__NOP();*/
    COMMENT     /*Modified for testing purpose to terminate infinite loop*/
    COMMENT     PTU_count++;
    COMMENT     if(PTU_count == 4)
    COMMENT      {
    COMMENT       break;
    COMMENT      } 
    COMMENT      else
    COMMENT      {
    COMMENT              /*nothing*/
    COMMENT      }
    COMMENT ....
    COMMENT
    COMMENT 3. The for loop in function 'AppInit' cannot be covered for 0 and 1 loops as it is controlled
    COMMENT   by macros 'ZERO' and 'APP_TASK_STK_SIZE'
    COMMENT
    COMMENT 4. The ptu is split into 4 parts due to static dependency.
    COMMENT
    COMMENT 5. Header file "hdulibcorecm7.h" is modified for stubbing hardware address
    COMMENT     /*Commented for testing purpose*/
    COMMENT     /*#define SCB                 ((T_SCB       *)     SCB_BASE      ) */
    COMMENT     /* modified macro by stubbing hardware address for testing purpose*/
    COMMENT     T_SCB PTU_SCB;
    COMMENT </AC>

    COMMENT Equivalence Class Description
    COMMENT <ECD>
    COMMENT
    COMMENT Valid Class(es)
    COMMENT
    COMMENT Class 1
    COMMENT The function 'AppInit', calls the function 'OsSemCreate'.
    COMMENT
    COMMENT Class 2
    COMMENT The function 'AppInit', calls the function 'OsTaskCreate', to create a semaphore.
    COMMENT
    COMMENT Class 3
    COMMENT The function 'AppTask', calls the function 'Dma2dInit' to 
    COMMENT initialize the DMA2D.
    COMMENT
    COMMENT Class 4
    COMMENT The function 'AppTask', calls the function 'Dma2Init' to 
    COMMENT initialize the DMA2.
    COMMENT
    COMMENT Class 5
    COMMENT The function 'AppTask', calls the function 'ForegroundInit' to
    COMMENT initialize foreground draw routines.
    COMMENT
    COMMENT Class 6
    COMMENT The function 'AppTask', calls the function 'GrappInit' to
    COMMENT initialize the graphic draw routines.
    COMMENT
    COMMENT Class 7
    COMMENT The function 'AppTask', calls the function 'PdiDataInit' to
    COMMENT initialize the Pdi Data routines.
    COMMENT
    COMMENT Class 8
    COMMENT The function 'AppTask', calls the function 'CasInit' to
    COMMENT initialize the CAS draw routines.
    COMMENT
    COMMENT Class 9
    COMMENT In function 'AppTask', Pbit_Test_result is equal to ZERO.
    COMMENT
    COMMENT Class 10
    COMMENT In function 'AppTask', Pbit_Test_result is not equal to ZERO.
    COMMENT
    COMMENT Class 11
    COMMENT The function 'AppTask', calls the function 'OsSemAccept' to check the semaphore.
    COMMENT
    COMMENT Class 12
    COMMENT The function 'OsSemAccept', returns ZERO.
    COMMENT
    COMMENT Class 13
    COMMENT The function 'OsSemAccept', returns other than ZERO.
    COMMENT
    COMMENT Class 14
    COMMENT The function 'AppTask', calls the function 'OsSemPend' to 
    COMMENT pend on semaphore.
    COMMENT
    COMMENT Class 15
    COMMENT In function 'AppTask', toggle is equal to ZERO.
    COMMENT
    COMMENT Class 16
    COMMENT In function 'AppTask', toggle is not equal to ZERO.
    COMMENT
    COMMENT Class 17
    COMMENT The function 'AppTask', calls the function 'ForegroundReDraw1' to
    COMMENT re-draw the foreground.
    COMMENT 
    COMMENT Class 18
    COMMENT The function 'AppTask', calls the function 'PbsGet' to
    COMMENT update the PBS reading.
    COMMENT
    COMMENT Class 19
    COMMENT The function 'AppTask', calls the function 'GrappApp' to
    COMMENT execute graphic application.
    COMMENT
    COMMENT Class 20
    COMMENT The function 'AppTask', calls the function 'ForegroundReDraw2' to
    COMMENT update all widget positions and draw the widgets.
    COMMENT
    COMMENT Class 21
    COMMENT The function 'AppTask', calls the function 'ForegroundReDraw3' to
    COMMENT update all widget positions and draw the widgets.
    COMMENT
    COMMENT Class 22
    COMMENT In function 'AppTask', Data_received is equal to ZERO.
    COMMENT
    COMMENT Class 23
    COMMENT In function 'AppTask', Data_received is not equal to ZERO.
    COMMENT
    COMMENT Class 24
    COMMENT The function 'AppTask', calls the function 'GlobalSettingsPush' to
    COMMENT to backup any global setting changes.
    COMMENT
    COMMENT Class 25
    COMMENT The function 'AppTask', calls the function 'OffsideHeartBeat' to
    COMMENT send the heartbeat message.
    COMMENT
    COMMENT Class 28
    COMMENT The function 'AppTask', calls the function 'CheckMsgCtrlArea' to
    COMMENT check for Message Control area.
    COMMENT
    COMMENT Class 29
    COMMENT The function 'CheckMsgCtrlArea',calls the function 'RTDGetParam' to read
    COMMENT the message from RTD.
    COMMENT
    COMMENT Class 30
    COMMENT In function 'CheckMsgCtrlArea',stat of T_PARAM_READING variable is equal
    COMMENT to MISSING.
    COMMENT
    COMMENT Class 31
    COMMENT In function 'CheckMsgCtrlArea',stat of T_PARAM_READING variable is not 
    COMMENT equal to MISSING.
    COMMENT
    COMMENT Class 33
    COMMENT The function 'CheckMsgCtrlArea',calls the function 'RTDGetParamDdw'
    COMMENT
    COMMENT Class 34
    COMMENT The function 'CheckMsgCtrlArea',calls the function 'OffsideSwitchScreen'
    COMMENT
    COMMENT Class 35
    COMMENT The function 'CheckMsgCtrlArea',calls the function 'TextBoxOn'
    COMMENT
    COMMENT Class 36
    COMMENT In function 'CheckMsgCtrlArea',count value is not equal to Port1_label_count.
    COMMENT
    COMMENT Class 37
    COMMENT In function 'CheckMsgCtrlArea',count value is equal to Port1_label_count.
    COMMENT 
    COMMENT Class 40
    COMMENT In function 'CheckMsgCtrlArea',heartbeat status is equal to TRUE.
    COMMENT
    COMMENT Class 41
    COMMENT In function 'CheckMsgCtrlArea',heartbeat status is equal to FALSE.
    COMMENT
    COMMENT Class 42
    COMMENT In function 'CheckMsgCtrlArea',Du_identified is equal to TRUE.
    COMMENT
    COMMENT Class 43
    COMMENT In function 'CheckMsgCtrlArea',Du_identified is equal to FALSE.
    COMMENT
    COMMENT Class 44
    COMMENT The function 'AppTask', calls 'WdogKickWatchDog'.
    COMMENT 
    COMMENT Class 45
    COMMENT In function 'AppU32NOC', a825_bus is equal to A825_1.
    COMMENT
    COMMENT Class 46
    COMMENT In function 'AppU32NOC', a825_bus is not equal to A825_1.
    COMMENT
    COMMENT Class 47
    COMMENT The function 'AppU32NOC', calls the function 'A429ProcessA825'.
    COMMENT
    COMMENT Class 48
    COMMENT The function 'AppU32NOC', calls the function 'OffsideProcessA825NOC'.
    COMMENT
    COMMENT Class 49
    COMMENT In function 'AppU32NSC', a825_bus is equal to A825_1.
    COMMENT
    COMMENT Class 50
    COMMENT In function 'AppU32NSC', a825_bus is not equal to A825_1.
    COMMENT
    COMMENT Class 51
    COMMENT The function 'AppU32NSC', calls the function 'OffsideProcessA825NSC'.
    COMMENT
    COMMENT Class 52
    COMMENT The function 'AppU32NSC', calls the function 'GlobalSettingsProcessNSC'.
    COMMENT
    COMMENT Class 53
    COMMENT In function 'CheckMsgCtrlArea',Data_received is equal to zero.
    COMMENT
    COMMENT Class 54
    COMMENT In function 'CheckMsgCtrlArea',Data_received is not equal to zero.
    COMMENT
    COMMENT Class 55
    COMMENT In function 'CheckMsgCtrlArea',Splash_done is equal to TRUE.
    COMMENT
    COMMENT Class 56
    COMMENT In function 'CheckMsgCtrlArea',Splash_done is equal to FALSE.
    COMMENT
    COMMENT Class 57
    COMMENT In function 'CheckMsgCtrlArea',Du_position is equal to one.
    COMMENT
    COMMENT Class 58
    COMMENT In function 'CheckMsgCtrlArea',Du_position is equal to other than one.
    COMMENT
    COMMENT Class 59
    COMMENT In function 'CheckMsgCtrlArea',Both_dau_fail is equal to TRUE.
    COMMENT
    COMMENT Class 60
    COMMENT In function 'CheckMsgCtrlArea',Both_dau_fail is equal to FALSE.
    COMMENT
    COMMENT Class 61
    COMMENT In function 'CheckMsgCtrlArea',Can1_msg_cntr is equal to four.
    COMMENT
    COMMENT Class 62
    COMMENT In function 'CheckMsgCtrlArea',Can1_msg_cntr is greater than four.
    COMMENT
    COMMENT Class 63
    COMMENT In function 'CheckMsgCtrlArea',Can1_msg_cntr is less than four.
    COMMENT
    COMMENT Class 64
    COMMENT The function 'CheckMsgCtrlArea',calls 'CheckforNewMessages'.
    COMMENT
    COMMENT Class 65
    COMMENT In the function 'CheckMsgCtrlArea', function 'CheckforNewMessages' returns zero.
    COMMENT
    COMMENT Class 66
    COMMENT In the function 'CheckMsgCtrlArea', function 'CheckforNewMessages' returns other than zero.
    COMMENT
    COMMENT Class 67
    COMMENT The function 'AppTask', calls 'A429Init'.
    COMMENT 
    COMMENT Class 68
    COMMENT In function 'AppTask', Long_press is equal to TRUE.
    COMMENT 
    COMMENT Class 69
    COMMENT In function 'AppTask', Long_press is equal to FALSE.
    COMMENT 
    COMMENT Class 70
    COMMENT The function 'AppTask', calls 'A8251Xmit'.
    COMMENT 
    COMMENT Class 71
    COMMENT The function 'AppTask', calls 'OsTimeDly'.
    COMMENT 
    COMMENT Class 72
    COMMENT The function 'AppTask', calls 'NVICSystemReset'.
    COMMENT 
    COMMENT Class 73
    COMMENT In function 'AppTask', frame counter is equal to MAX_FRAME_VAL.
    COMMENT 
    COMMENT Class 74
    COMMENT In function 'AppTask', frame counter is not equal to MAX_FRAME_VAL.
    COMMENT
    COMMENT Class 75
    COMMENT The function 'AppTask', calls 'A8251Init'.
    COMMENT
    COMMENT Class 76
    COMMENT The function 'AppTask', calls 'A8252Init'.
    COMMENT
    COMMENT Class 77
    COMMENT The function 'AppTask', calls 'A825CommInit1'.
    COMMENT
    COMMENT Class 78
    COMMENT The function 'AppTask', calls 'A825CommInit2'.
    COMMENT
    COMMENT Class 79
    COMMENT The function 'AppTask', calls 'GlobalSettingsPull'.
    COMMENT
    COMMENT Class 82
    COMMENT The function 'CheckMsgCtrlArea', calls 'OffsideCoolTimer'.
    COMMENT
    COMMENT Class 83
    COMMENT The function 'CheckMsgCtrlArea', calls 'GlobalSettingsSetEIU'
    COMMENT
    COMMENT Class 84
    COMMENT In function 'CheckMsgCtrlArea',counter value is greater than Port1_label_count.
    COMMENT
    COMMENT Class 85
    COMMENT In function 'CheckMsgCtrlArea',counter value is equal to Port1_label_count.
    COMMENT
    COMMENT Class 86
    COMMENT In function 'CheckMsgCtrlArea',counter value is less than Port1_label_count.
    COMMENT
    COMMENT Class 87
    COMMENT In function 'AppTask', 'GlobalSettingsCheckTrig' is called
    COMMENT
    COMMENT Class 88
    COMMENT In function 'AppTask', 'GlobalSettingsPushPeakLog' is called
    COMMENT
    COMMENT Class 89
    COMMENT In function "AppTask", Demo_mode is equal to TRUE 
    COMMENT
    COMMENT Class 90
    COMMENT In function "AppTask", Demo_mode is equal to FALSE 
    COMMENT    
    COMMENT Class 91
    COMMENT In function "AppTask", toggle log value is equal to PEAK_PICKER_RATE 
    COMMENT
    COMMENT Class 92
    COMMENT In function "AppTask", toggle log value is not equal to PEAK_PICKER_RATE
    COMMENT
    COMMENT Class 93
    COMMENT In function "AppTask", re pull counter is less than TEN
    COMMENT    
    COMMENT Class 94
    COMMENT In function "AppTask",  re pull counter is greater than TEN
    COMMENT 
    COMMENT Invalid Class(es)
    COMMENT Class 80
    COMMENT In function 'AppU32NSC', NULL is passed as parameter for s_mess.
    COMMENT
    COMMENT Class 81
    COMMENT In function 'AppU32NOC', NULL is passed as parameter for s_mess.
    COMMENT
    COMMENT Class 95
    COMMENT The function 'AppTask', calls the function 'MenuInitialize' to Initialize the Menu Items
    COMMENT
    COMMENT Class 96
    COMMENT The function 'AppTask', calls the function 'PdiDataCheck' Function to check PDI parameters 
    COMMENT
    COMMENT Class 97
    COMMENT The function 'AppTask', calls the function 'CalibrationLabels' Calibration labels conversion
    COMMENT 
    COMMENT Class 98
    COMMENT The function 'AppTask', calls the function 'OffsideCalibration'
    COMMENT
    COMMENT Class 99
    COMMENT The function 'AppTask', Engine_count_app greaterthan (NUMBEROFENGINES-1)
    COMMENT
    COMMENT Class 100
    COMMENT The function 'AppTask', Engine_count_app equal to (NUMBEROFENGINES-1)
    COMMENT
    COMMENT Class 101
    COMMENT The function 'AppTask', Engine_count_app lessthan (NUMBEROFENGINES-1)  
    COMMENT 
    COMMENT Class 102
    COMMENT The function 'CheckMsgCtrlArea', calls 'OffsideFuelFlow'.
    COMMENT 
    COMMENT Class 103
    COMMENT The function 'AppTask', calls 'PushFaultLog'.		
    COMMENT	
    COMMENT </ECD>

--------------------------------------------------------------------------------
--
-- STUB DECLARATIONS OF THE TESTED OR INTEGRATED UNITS
--
--------------------------------------------------------------------------------
SIMUL

    DEFINE STUB hdudispfapp_c 20
        
        -- Parameter *task is made _no since address of static function cannot be expected
        #T_UBYTE OsTaskCreate(void _no(  *task)(void* pd), void _in *pdata, void _in *pstk, T_UBYTE _in prio)
        #{
        #   (*task)(pdata);
        #}
        
        #T_OS_EVENT* OsSemCreate(T_UWORD _in count);
    
        #void OffsideProcessA825NSC(T_A825_MESSAGE _no *s_mess)
        #{
        #   PTU1_s_mess = *s_mess;
        #}
        
        #void GlobalSettingsProcessNSC(T_A825_MESSAGE _no *s_mess)
        #{
        #   PTU2_s_mess = *s_mess;
        #}
            
        #void OffsideProcessA825NOC(T_A825_MESSAGE _no *s_mess)
        #{
        #   PTU3_s_mess = *s_mess;
        #}
            
        #void A429ProcessA825(T_A825_MESSAGE _no *s_mess)
        #{
        #   PTU4_s_mess = *s_mess;
        #}
            
        #void TextBoxOn(T_STEXTBOXDATA _no *ps_this_box)
        #{
        #   PTU_ps_this_box = *ps_this_box;
        #}
        
        #T_UINT32 CheckforNewMessages(void);
        
        --Parameter '*ps_dest' is made _no since it is address of a Local variable
        #void RTDGetParam(T_UINT16 _in a429_tag, T_PARAM_READING _no *ps_dest)
        #{
        #   *ps_dest = PTU_ps_dest[PTU_index++];
        #}
            
        #void GlobalSettingsSetEIU(T_EIU  _in eiu);
        #void OffsideCoolTimer(T_UINT8  _in cool_timer_state);
        #void OffsideSwitchScreen(T_UINT8 _in u8_page_num);
        #void GlobalSettingsCheckTrig(void);
        #void GlobalSettingsPushPeakLog(void);
        
        --Parameter '*ps_dest' is made _no since it is address of a Local variable
        #void RTDGetParamDdw(T_UINT16 _in a429_tag, T_PARAM_READING _no *ps_dest)
        #{
        #   *ps_dest = PTU_psdest;
        #}
        
        #void OffsideHeartBeat(void);
        #void GlobalSettingsPush(void);
        #void ForegroundReDraw3(void);
        #void ForegroundReDraw2(void);
        #void GrappApp(void);
        #void OsTimeDly(T_UWORD _in ticks);
        
        --Parameter '*ps_xm' is made _no since it is address of a Local variable
        #T_A825_XMITRESULT A8251Xmit(T_A825_MESSAGE _no *ps_xm)
        #{
        #   PTU_ps_xm = *ps_xm;
        #}
        
        #void PbsGet(void);
        #void ForegroundReDraw1(void);
        
        --Parameter '*p_event' is made _no since it is address of a Local variable
        --Parameter '*error' is made _no since it is address of a Local variable 
        #void OsSemPend(T_OS_EVENT _no *p_event, T_UWORD _in time_out, T_UBYTE _no *error)
        #{
        #   PTU_ps_semaphore = p_event;
        #   PTU_err = *error;
        #}
            
        #T_INT16 OsSemAccept(T_OS_EVENT _no *param_event)
        #{
        #   PTU_param_event = *param_event; 
        #}
            
        #void GlobalSettingsPull(void);
        #void A825CommInit2(void);
        #void A825CommInit1(void);
        #void A8252Init(void);
        #void A8251Init(void);
        #void CasInit(void);
        #void PdiDataInit();
        #void A429Init();
        #void GrappInit(void);
        #void ForegroundInit(void);
        #void Dma2Init(void);
        #void WdogKickWatchDog(void);
        #void Dma2dInit(void);
		#void CalibrationLabels(); 
		#void PdiDataCheck();
		#void MenuInitialize(); 		
	    #void OffsideCalibration(T_UINT8  _in loop_i); 
        #void PushFaultLog(void);		
        #void OffsideFuelFlow(T_UINT8  _in Fuel_flow_state);		
    
    END DEFINE
    
ELSE_SIMUL

    -- No action defined as of now if the module is not simulated

END SIMUL

--------------------------------------------------------------------------------
--
-- ENVIRONMENTS DECLARATIONS
--
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
-- TESTED FILE ENVIRONNEMENT
--------------------------------------------------------------------------------

-- Environment of the file hdudispfapp.c
ENVIRONMENT ENV_hdudispfapp_c

  ARRAY App_task_stk,       init = { others => 0 },     ev = init

  VAR Sem_app_task,         init = NIL,                 ev = init

END ENVIRONMENT -- ENV_hdudispfapp_c

USE ENV_hdudispfapp_c

--------------------------------------------------------------------------------
--
-- SERVICES DECLARATIONS
--
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
-- Declaration of the service AppInit
--------------------------------------------------------------------------------
SERVICE AppInit
SERVICE_TYPE extern

TEST 11
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD>
    COMMENT
    COMMENT [hdudispfapp-CheckMsgCtrlArea-DB-LLR-016]
    COMMENT The function 'CheckMsgCtrlArea' does the following when stat of T_PARAM_READING variable is not equal to MISSING
    COMMENT i. sets previous heartbeat status to FALSE when previous heartbeat status is TRUE AND Du_identified is TRUE AND 
    COMMENT Data_received is not equal to zero AND Splash_done is TRUE.
    COMMENT ii.Does nothing when Du_position is other than ONE.
    COMMENT iii.sets U16_message_words with index zero to U16_message_words with index zero bitwise AND with negation of one
    COMMENT (MCDC TTTT for 1st iteration and FXXX for next iterations)
    COMMENT Equivalence Class 31,42,54,55,58,40
    COMMENT 
    COMMENT </TD>

    ELEMENT

        COMMENT INPUT SECTION:
        
            --sets the value of 'Data_received'
            VAR Data_received,                              init = TRUE,                    ev = init
            
            --sets the value of global variable 'Long_press'
            VAR Long_press,                                 init = FALSE,                   ev = init
            
            --sets the value of global variable 'Pbit_test_result'
            VAR Pbit_test_result,                           init = 0,                       ev = init
            
            --variable 'PTU_psdest'is used to verify 'ps_dest' of function 'RTDGetParamDdw'
            VAR PTU_psdest.stat,                            init = PARAM_OK,                ev = init
            
            --sets the value of global variable 'Port1_label_count'
            VAR Port1_label_count,                          init = 0,                       ev = init
            
            --sets the value of global variable 'Both_dau_fail'
            VAR Both_dau_fail,                              init = FALSE,                   ev = init
            
            --sets the value of global variable 'Can1_msg_cntr'
            VAR Can1_msg_cntr,                              init = 2,                       ev = init
            
            --sets the value of global variable 'Du_identified'
            VAR Du_identified,                              init = TRUE,                    ev = init
            
            --sets the value of global variable 'Splash_done'
            VAR Splash_done,                                init = TRUE,                    ev = init
            
            --sets the value of global variable 'Du_position'
            VAR Du_position,                                init = 2,                       ev = init
            
        COMMENT INPUT/OUTPUT SECTION:
        
            --sets the value of global variable 'Engine_count_app'
			VAR Engine_count_app,								init = 1,						ev = 3
        
        COMMENT OUTPUT SECTION:
        
            --holds the address of 'ps_semaphore'
            VAR Sem_app_task,                               init = NULL,                    ev = &PTU_ps_semaphore

            --holds the value of 'App_task_stk'
            ARRAY App_task_stk,                             init = { others => 0 },         ev = { others => STK_DEF_VAL }
            
            --holds the value of global array 'U16_message_words'
            VAR U16_message_words[0],                       init = 0,                       ev = 2
            VAR U16_message_words[1],                       init = 0,                       ev = 0
            
        -- Stub Calls :
        SIMUL
            
            --Creates a Semaphore
            STUB OsSemCreate (SEM_CNT_VAL) &PTU_ps_semaphore
            
            --Creates the application Task
            STUB OsTaskCreate (NULL, &App_task_stk[APP_TASK_STK_SIZE], APP_TASK_PRIO) OS_NO_ERR
            
            --Initializes the DMA2D
            STUB Dma2dInit()
            
            --reloads watchdog counter
            STUB WdogKickWatchDog 1..17 => ()
            
            -- To check exceedance log trigger condition
            STUB GlobalSettingsCheckTrig 1..4 => ()
            
            --Initializes the DMA2
            STUB Dma2Init()
            
            --Initializes foreground draw routines
            STUB ForegroundInit()
            
            --Initializes the graphic draw routines
            STUB GrappInit()
            
            --creates the ARINC 429 task
            STUB A429Init ()
            
            --initializes the Pdi Data routines
            STUB PdiDataInit()
            
            --Initializes the CAS draw routines
            STUB CasInit()
            
            --Initializes ARINC 825 communication
            STUB A8251Init ()
            STUB  A8252Init ()
            
            --Initializes the task to handle commands coming across the arinc 825 bus
            STUB A825CommInit1 ()
            STUB A825CommInit2()
            
			--Initialize the Menu Items
			STUB MenuInitialize()
			
			--Function to check PDI parameters
			STUB PdiDataCheck()
			
			--Calibration labels conversion
			STUB CalibrationLabels()
			
            --checks the semaphore
            STUB OsSemAccept() ONE
            STUB OsSemAccept() ONE
            STUB OsSemAccept() ZERO
            
            --pends an semaphore
            STUB OsSemPend 1..4 => (ZERO_TIME_OUT)
            
            --Triggers the transmission of global settings from 429 board
            STUB GlobalSettingsPull ()
			
			--Calibration
			STUB OffsideCalibration 1 => (Engine_count_app)
			STUB OffsideCalibration 2 => (2)
            
            --toggles active frame buffer
            STUB ForegroundReDraw1 1..2 =>()
            
            --Update the PBS reading
            STUB PbsGet 1..2 => ()
            
            --copies the global settings to backup structure
            STUB GlobalSettingsPush 1..2 => ()
            
            --Execute graphic application
            STUB GrappApp 1..2 => ()
            
            --Update all widget positions
            STUB ForegroundReDraw2 1..2 => ()
            
            --Draw the widgets
            STUB ForegroundReDraw3 1..2 => ()
        
            --reads the discrete word
            STUB RTDGetParamDdw 1..2 => (0)
            
            --checks for new messages
            STUB CheckforNewMessages 1..2 => () 0
            
            --checks the semaphore
            STUB OsSemAccept 4..5  => () ZERO
            
        END SIMUL
                
        -- Calling the Unit Under Test :
        #AppInit();
    
    END ELEMENT

END TEST -- TEST 11

TEST 12
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD>
    COMMENT [hdudispfapp-AppTask-DB-LLR-009]
    COMMENT The function "AppTask" loops forever and in each loop does the following
    COMMENT a) pend on semaphore by calling OsSemPend with the following parameters
    COMMENT  - Sem_app_task
    COMMENT  - pend timeout value as ZERO_TIME_OUT
    COMMENT  - Address of local error code.
    COMMENT b) Call the function WdogKickWatchDog  
    COMMENT c) Call the function GlobalSettingsCheckTrig
    COMMENT d) Toggle log value is incremented by one.
    COMMENT In the first iteration,
    COMMENT e) It does nothing when Data_received is not equal to ZERO and Demo_mode is  
    COMMENT equal to FALSE and toggle log value is not equal to PEAK_PICKER_RATE.
    COMMENT   This checks TTF MCDC coverage.
    COMMENT In the next iterations,
    COMMENT e) Toggle log value is set to zero and GlobalSettingsPushPeakLog is called 
    COMMENT 7.Call the function PushFaultLog
    COMMENT when Data_received is not equal to ZERO and Demo_mode is equal to FALSE and 
    COMMENT toggle log value is equal to PEAK_PICKER_RATE 
    COMMENT   This checks TTT MCDC coverage.
    COMMENT Equivalance class 88,91,92,44,87,90,23,103
    COMMENT </TD>

    ELEMENT

        COMMENT INPUT SECTION:
        
            --sets the value of 'Data_received'
            VAR Data_received,                              init = TRUE,                    ev = init
            
            --sets the value of 'Data_mode'
            VAR Demo_mode,                                  init = FALSE,                    ev = init
            
            --sets the value of global variable 'Long_press'
            VAR Long_press,                                 init = FALSE,                   ev = init
            
            --sets the value of global variable 'Pbit_test_result'
            VAR Pbit_test_result,                           init = 0,                       ev = init
            
            --variable 'PTU_psdest'is used to verify 'ps_dest' of function 'RTDGetParamDdw'
            VAR PTU_psdest.stat,                            init = PARAM_OK,                ev = init
            
            --sets the value of global variable 'Port1_label_count'
            VAR Port1_label_count,                          init = 0,                       ev = init
            
            --sets the value of global variable 'Both_dau_fail'
            VAR Both_dau_fail,                              init = FALSE,                   ev = init
            
            --sets the value of global variable 'Can1_msg_cntr'
            VAR Can1_msg_cntr,                              init = 2,                       ev = init
            
            --sets the value of global variable 'Du_identified'
            VAR Du_identified,                              init = TRUE,                    ev = init
            
            --sets the value of global variable 'Splash_done'
            VAR Splash_done,                                init = TRUE,                    ev = init
            
            --sets the value of global variable 'Du_position'
            VAR Du_position,                                init = 2,                       ev = init
            
        COMMENT INPUT/OUTPUT SECTION:
        
            --sets the value of global variable 'Engine_count_app'
			VAR Engine_count_app,								init = 1,						ev = 3
        
        COMMENT OUTPUT SECTION:
        
            --holds the address of 'ps_semaphore'
            VAR Sem_app_task,                               init = NULL,                    ev = &PTU_ps_semaphore

            --holds the value of 'App_task_stk'
            ARRAY App_task_stk,                             init = { others => 0 },         ev = { others => STK_DEF_VAL }
            
            --holds the value of global array 'U16_message_words'
            VAR U16_message_words[0],                       init = 0,                       ev = 2
            VAR U16_message_words[1],                       init = 0,                       ev = 0
            
        -- Stub Calls :
        SIMUL
            
            --Creates a Semaphore
            STUB OsSemCreate 1..5 => (SEM_CNT_VAL) &PTU_ps_semaphore
            
            --Creates the application Task
            STUB OsTaskCreate 1..5 => (NULL, &App_task_stk[APP_TASK_STK_SIZE], APP_TASK_PRIO) OS_NO_ERR
            
            --Initializes the DMA2D
            STUB Dma2dInit 1..5 => ()
            
            --reloads watchdog counter
            STUB WdogKickWatchDog 1..75 => ()
            
            --Initializes the DMA2
            STUB Dma2Init 1..5 => ()
            
            --Initializes foreground draw routines
            STUB ForegroundInit 1..5 => ()
            
            --Initializes the graphic draw routines
            STUB GrappInit 1..5 =>()
            
            --creates the ARINC 429 task
            STUB A429Init 1..5 => ()
            
            --initializes the Pdi Data routines
            STUB PdiDataInit 1..5 => ()
            
            --Initializes the CAS draw routines
            STUB CasInit 1..5 => ()
            
            --Initializes ARINC 825 communication
            STUB A8251Init 1..5 => ()
            STUB  A8252Init 1..5 => ()
            
            --Initializes the task to handle commands coming across the arinc 825 bus
            STUB A825CommInit1 1..5 => ()
            STUB A825CommInit2 1..5 => ()
			
			--Initialize the Menu Items
			STUB MenuInitialize 1..5 => ()
			
			--Function to check PDI parameters
			STUB PdiDataCheck 1..5 => ()
			
			--Calibration labels conversion
			STUB CalibrationLabels 1..5 => ()
            
            --checks the semaphore
            STUB OsSemAccept 1..15 => () ZERO
            
            --pends an semaphore
            STUB OsSemPend 1..20 => (ZERO_TIME_OUT)
            
            --Triggers the transmission of global settings from 429 board
            STUB GlobalSettingsPull 1..5 => ()
			
			--Calibration
			STUB OffsideCalibration 1 => (1)
			STUB OffsideCalibration 2 => (2)
			STUB OffsideCalibration 3 => (3)
			STUB OffsideCalibration 4 => (0)
			STUB OffsideCalibration 5 => (1)
			STUB OffsideCalibration 6 => (2)
			STUB OffsideCalibration 7 => (3)
			STUB OffsideCalibration 8 => (0)
			STUB OffsideCalibration 9 => (1)
			STUB OffsideCalibration 10 => (2)
            
            --toggles active frame buffer
            STUB ForegroundReDraw1 1..10 =>()
            
            --Update the PBS reading
            STUB PbsGet 1..10 => ()
            
            --copies the global settings to backup structure
            STUB GlobalSettingsPush 1..10 => ()
            
            -- To Transmit and save peak log data in NVRAM.
            STUB GlobalSettingsPushPeakLog 1..4 => ()
            
            --Execute graphic application
            STUB GrappApp 1..10 => ()
            
            -- To check exceedance log trigger condition
            STUB GlobalSettingsCheckTrig 1..20 =>()
            
            --Update all widget positions
            STUB ForegroundReDraw2 1..10 => ()
            
            --Draw the widgets
            STUB ForegroundReDraw3 1..10 => ()
        
            --reads the discrete word
            STUB RTDGetParamDdw 1..10 => (0)
            
            --checks for new messages
            STUB CheckforNewMessages 1..10 => () 0
			
            STUB PushFaultLog 1..4 => () 0
            
        END SIMUL
                
        -- Calling the Unit Under Test 
        --the unit under test is called for 13 times to make frame counter equal to 'MAX_FRAME_VAL'
        #for(PTU_i=0;PTU_i<5;PTU_i++)
        #{
        #   AppInit();
        #}
    
    END ELEMENT

END TEST -- TEST 12

TEST 13
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD>
    COMMENT [hdudispfapp-AppTask-DB-LLR-009]
    COMMENT The function "AppTask" loops forever and in each loop does the following
    COMMENT a) pend on semaphore by calling OsSemPend with the following parameters
    COMMENT  - Sem_app_task
    COMMENT  - pend timeout value as ZERO_TIME_OUT
    COMMENT  - Address of local error code.
    COMMENT b) Call the function WdogKickWatchDog  
    COMMENT c) Call the function GlobalSettingsCheckTrig
    COMMENT d) Toggle log value is incremented by one.
    COMMENT e) It does nothing when Data_received is not equal to ZERO and Demo_mode is  
    COMMENT not equal to FALSE.
    COMMENT   This checks TFX MCDC coverage.
    COMMENT Equivalance class 44,87,89,23
    COMMENT </TD>

    ELEMENT

        COMMENT INPUT SECTION:
        
            --sets the value of 'Data_received'
            VAR Data_received,                              init = TRUE,                    ev = init
            
            --sets the value of 'Data_mode'
            VAR Demo_mode,                                  init = TRUE,                    ev = init
            
            --sets the value of global variable 'Long_press'
            VAR Long_press,                                 init = FALSE,                   ev = init
            
            --sets the value of global variable 'Pbit_test_result'
            VAR Pbit_test_result,                           init = 0,                       ev = init
            
            --variable 'PTU_psdest'is used to verify 'ps_dest' of function 'RTDGetParamDdw'
            VAR PTU_psdest.stat,                            init = PARAM_OK,                ev = init
            
            --sets the value of global variable 'Port1_label_count'
            VAR Port1_label_count,                          init = 0,                       ev = init
            
            --sets the value of global variable 'Both_dau_fail'
            VAR Both_dau_fail,                              init = FALSE,                   ev = init
            
            --sets the value of global variable 'Can1_msg_cntr'
            VAR Can1_msg_cntr,                              init = 2,                       ev = init
            
            --sets the value of global variable 'Du_identified'
            VAR Du_identified,                              init = TRUE,                    ev = init
            
            --sets the value of global variable 'Splash_done'
            VAR Splash_done,                                init = TRUE,                    ev = init
            
            --sets the value of global variable 'Du_position'
            VAR Du_position,                                init = 2,                       ev = init
            
        COMMENT INPUT/OUTPUT SECTION:
        
            --sets the value of global variable 'Engine_count_app'
			VAR Engine_count_app,								init = 1,						ev = 3
        
        COMMENT OUTPUT SECTION:
        
            --holds the address of 'ps_semaphore'
            VAR Sem_app_task,                               init = NULL,                    ev = &PTU_ps_semaphore

            --holds the value of 'App_task_stk'
            ARRAY App_task_stk,                             init = { others => 0 },         ev = { others => STK_DEF_VAL }
            
            --holds the value of global array 'U16_message_words'
            VAR U16_message_words[0],                       init = 0,                       ev = 2
            VAR U16_message_words[1],                       init = 0,                       ev = 0
            
        -- Stub Calls :
        SIMUL
            
            --Creates a Semaphore
            STUB OsSemCreate (SEM_CNT_VAL) &PTU_ps_semaphore
            
            --Creates the application Task
            STUB OsTaskCreate (NULL, &App_task_stk[APP_TASK_STK_SIZE], APP_TASK_PRIO) OS_NO_ERR
            
            --Initializes the DMA2D
            STUB Dma2dInit()
            
            --reloads watchdog counter
            STUB WdogKickWatchDog 1..17 => ()
            
            --Initializes the DMA2
            STUB Dma2Init()
            
            --Initializes foreground draw routines
            STUB ForegroundInit()

		STUB GlobalSettingsPush 1..2 => ()
            
            --Initializes the graphic draw routines
            STUB GrappInit()
            
            --creates the ARINC 429 task
            STUB A429Init ()
            
            --initializes the Pdi Data routines
            STUB PdiDataInit()
            
            --Initializes the CAS draw routines
            STUB CasInit()
            
            --Initializes ARINC 825 communication
            STUB A8251Init ()
            STUB  A8252Init ()
            
            --Initializes the task to handle commands coming across the arinc 825 bus
            STUB A825CommInit1()
            STUB A825CommInit2()
			
			--Initialize the Menu Items
			STUB MenuInitialize()
			
			--Function to check PDI parameters
			STUB PdiDataCheck()
			
			--Calibration labels conversion
			STUB CalibrationLabels()
            
            --checks the semaphore
            STUB OsSemAccept() ONE
            STUB OsSemAccept() ONE
            STUB OsSemAccept() ZERO
            
            --pends an semaphore
            STUB OsSemPend 1..4 => (ZERO_TIME_OUT)
            
            --Triggers the transmission of global settings from 429 board
            STUB GlobalSettingsPull ()
            
            -- To check exceedance log trigger condition
            STUB GlobalSettingsCheckTrig 1..4 =>()
			
			--Calibration
			STUB OffsideCalibration 1 => (Engine_count_app)
			STUB OffsideCalibration 2 => (2)
            
            --toggles active frame buffer
            STUB ForegroundReDraw1 1..2 =>()
            
            --Update the PBS reading
            STUB PbsGet 1..2 => ()
            
            --Execute graphic application
            STUB GrappApp 1..2 => ()
            
            --Update all widget positions
            STUB ForegroundReDraw2 1..2 => ()
            
            --Draw the widgets
            STUB ForegroundReDraw3 1..2 => ()
        
            --reads the discrete word
            STUB RTDGetParamDdw 1..2 => (0)
            
            --checks for new messages
            STUB CheckforNewMessages 1..2 => () 0
            
            --checks the semaphore
            STUB OsSemAccept 4..5  => () ZERO
            
        END SIMUL
                
        -- Calling the Unit Under Test 
        #AppInit();
    
    END ELEMENT

END TEST -- TEST 13

TEST 14
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD>
    COMMENT [hdudispfapp-AppTask-DB-LLR-009]
    COMMENT The function "AppTask" loops forever and in each loop does the following
    COMMENT a) pend on semaphore by calling OsSemPend with the following parameters
    COMMENT  - Sem_app_task
    COMMENT  - pend timeout value as ZERO_TIME_OUT
    COMMENT  - Address of local error code.
    COMMENT b) Call the function WdogKickWatchDog  
    COMMENT c) Call the function GlobalSettingsCheckTrig
    COMMENT d) Toggle log value is incremented by one.
    COMMENT f) Toggle log value is reset when PEAK_PICKER_RATE is equal to toggle log value 
    COMMENT   This checks FXX MCDC coverage
    COMMENT Equivalance class 44,87,91,23
    COMMENT </TD>

    ELEMENT

        COMMENT INPUT SECTION:
        
            --sets the value of 'Data_received'
            VAR Data_received,                              init = FALSE,                    ev = init
            
            --sets the value of global variable 'Long_press'
            VAR Long_press,                                 init = FALSE,                   ev = init
            
            --sets the value of global variable 'Pbit_test_result'
            VAR Pbit_test_result,                           init = 0,                       ev = init
            
            --variable 'PTU_psdest'is used to verify 'ps_dest' of function 'RTDGetParamDdw'
            VAR PTU_psdest.stat,                            init = PARAM_OK,                ev = init
            
            --sets the value of global variable 'Port1_label_count'
            VAR Port1_label_count,                          init = 0,                       ev = init
            
            --sets the value of global variable 'Both_dau_fail'
            VAR Both_dau_fail,                              init = FALSE,                   ev = init
            
            --sets the value of global variable 'Can1_msg_cntr'
            VAR Can1_msg_cntr,                              init = 2,                       ev = init
            
            --sets the value of global variable 'Du_identified'
            VAR Du_identified,                              init = TRUE,                    ev = init
            
            --sets the value of global variable 'Splash_done'
            VAR Splash_done,                                init = TRUE,                    ev = init
            
            --sets the value of global variable 'Du_position'
            VAR Du_position,                                init = 2,                       ev = init
            
        COMMENT INPUT/OUTPUT SECTION:
        
            --sets the value of global variable 'Engine_count_app'
			VAR Engine_count_app,								init = 1,						ev = 3
        
        COMMENT OUTPUT SECTION:
        
            --holds the address of 'ps_semaphore'
            VAR Sem_app_task,                               init = NULL,                    ev = &PTU_ps_semaphore

            --holds the value of 'App_task_stk'
            ARRAY App_task_stk,                             init = { others => 0 },         ev = { others => STK_DEF_VAL }
            
            --holds the value of global array 'U16_message_words'
            VAR U16_message_words[0],                       init = 0,                       ev = 2
            VAR U16_message_words[1],                       init = 0,                       ev = 0
            
        -- Stub Calls :
        SIMUL
            
            --Creates a Semaphore
            STUB OsSemCreate (SEM_CNT_VAL) &PTU_ps_semaphore
            
            --Creates the application Task
            STUB OsTaskCreate (NULL, &App_task_stk[APP_TASK_STK_SIZE], APP_TASK_PRIO) OS_NO_ERR
            
            --Initializes the DMA2D
            STUB Dma2dInit()
            
            --reloads watchdog counter
            STUB WdogKickWatchDog 1..17 => ()
            
            --Initializes the DMA2
            STUB Dma2Init()
            
            --Initializes foreground draw routines
            STUB ForegroundInit()
            
            --Initializes the graphic draw routines
            STUB GrappInit()
            
            --creates the ARINC 429 task
            STUB A429Init ()
            
            --initializes the Pdi Data routines
            STUB PdiDataInit()
            
            --Initializes the CAS draw routines
            STUB CasInit()
            
            --Initializes ARINC 825 communication
            STUB A8251Init ()
            STUB  A8252Init ()
            
            --Initializes the task to handle commands coming across the arinc 825 bus
            STUB A825CommInit1 ()
            STUB A825CommInit2()
			
			--Initialize the Menu Items
			STUB MenuInitialize()
			
			--Function to check PDI parameters
			STUB PdiDataCheck()
			
			--Calibration labels conversion
			STUB CalibrationLabels()
            
            --checks the semaphore
            STUB OsSemAccept() ONE
            STUB OsSemAccept() ONE
            STUB OsSemAccept() ZERO
            
            --pends an semaphore
            STUB OsSemPend 1..4 => (ZERO_TIME_OUT)
            
            --Triggers the transmission of global settings from 429 board
            STUB GlobalSettingsPull ()
            
            -- To check exceedance log trigger condition
            STUB GlobalSettingsCheckTrig 1..4 =>()
			
			--Calibration
			STUB OffsideCalibration 1 => (Engine_count_app)
			STUB OffsideCalibration 2 => (2)
            
            --toggles active frame buffer
            STUB ForegroundReDraw1 1..2 =>()
            
            --Update the PBS reading
            STUB PbsGet 1..2 => ()
            
            --Execute graphic application
            STUB GrappApp 1..2 => ()
            
            --Update all widget positions
            STUB ForegroundReDraw2 1..2 => ()
            
            --Draw the widgets
            STUB ForegroundReDraw3 1..2 => ()
        
            --reads the discrete word
            STUB RTDGetParamDdw 1..2 => (0)
            
            --checks for new messages
            STUB CheckforNewMessages 1..2 => () 0
            
            --checks the semaphore
            STUB OsSemAccept 4..5  => () ZERO
            
        END SIMUL
                
        -- Calling the Unit Under Test 
        #AppInit();
    
    END ELEMENT

END TEST -- TEST 14

TEST 16
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD>
    COMMENT
    COMMENT [hdudispfapp-AppTask-DB-LLR-010]
    COMMENT In function 'AppTask',
    COMMENT - Does nothing when Data_received is not equal to zero ,
    COMMENT - Calls the function OffsideHeartBeat to send the heartbeat message and set frame counter to 0 
    COMMENT   when frame counter is equal to MAX_FRAME_VAL.
    COMMENT - Does nothing when Pbit_test_result is not equal to ZERO.
    COMMENT   This checks TFX MCDC coverage.
    COMMENT Equivalence Class 17,18,19,20,21,22,25,10,69,71,72,73,87
    COMMENT </TD>

    ELEMENT

        COMMENT INPUT SECTION:
        
            --sets the value of 'Data_received'
            VAR Data_received,                              init = TRUE,                   ev = init
            
            --sets the value of 'Data_mode'
            VAR Demo_mode,                                  init = TRUE,                    ev = init
            
            --sets the value of global variable 'Long_press'
            VAR Long_press,                                 init = FALSE,                   ev = init
            
            --sets the value of global variable 'Pbit_test_result'
            VAR Pbit_test_result,                           init = 5,                       ev = init
            
        COMMENT INPUT/OUTPUT SECTION:
        
            --sets the value of global variable 'Engine_count_app'
			VAR Engine_count_app,								init = 1,						ev = 3
        
        COMMENT OUTPUT SECTION:
        
            --holds the address of 'ps_semaphore'
            VAR Sem_app_task,                               init = NULL,                    ev = &PTU_ps_semaphore

            --holds the value of 'App_task_stk'
            ARRAY App_task_stk,                             init = { others => 0 },         ev = { others => STK_DEF_VAL }
                
        -- Stub Calls :
        SIMUL
            
            --Creates a Semaphore
            STUB OsSemCreate 1..13 => (SEM_CNT_VAL) &PTU_ps_semaphore
            
            --Creates the application Task
            STUB OsTaskCreate 1..13=> (NULL, &App_task_stk[APP_TASK_STK_SIZE], APP_TASK_PRIO) OS_NO_ERR
            
            --Initializes the DMA2D
            STUB Dma2dInit 1..13 => ()

		STUB GlobalSettingsPush 1..26=> ()
            
            --reloads watchdog counter
            STUB WdogKickWatchDog 1..195 => ()
            
            -- To check exceedance log trigger condition
            STUB GlobalSettingsCheckTrig 1..52 => ()
            
            --Initializes the DMA2
            STUB Dma2Init 1..13 => ()
            
            --Initializes foreground draw routines
            STUB ForegroundInit 1..13 => ()
            
            --Initializes the graphic draw routines
            STUB GrappInit 1..13 =>()
            
            --creates the ARINC 429 task
            STUB A429Init 1..13 =>()
            
            --initializes the Pdi Data routines
            STUB PdiDataInit 1..13 => ()
            
            --Initializes the CAS draw routines
            STUB CasInit 1..13 => ()
            
            --Initializes ARINC 825 communication
            STUB A8251Init 1..13 => ()
            STUB  A8252Init 1..13 => ()
            
            --Initializes the task to handle commands coming across the arinc 825 bus
            STUB A825CommInit1 1..13 => ()
            STUB A825CommInit2 1..13 =>()
			
			--Initialize the Menu Items
			STUB MenuInitialize 1..13 => ()
			
			--Function to check PDI parameters
			STUB PdiDataCheck 1..13 => ()
			
			--Calibration labels conversion
			STUB CalibrationLabels 1..13 => ()
            
            --checks the semaphore
            STUB OsSemAccept 1..39 => () ZERO
            
            --pends an semaphore
            STUB OsSemPend 1..52 => (ZERO_TIME_OUT)
			
			--Calibration
			STUB OffsideCalibration 1 => (1)
			STUB OffsideCalibration 2 => (2)
			STUB OffsideCalibration 3 => (3)
			STUB OffsideCalibration 4 => (0)
			STUB OffsideCalibration 5 => (1)
			STUB OffsideCalibration 6 => (2)
			STUB OffsideCalibration 7 => (3)
			STUB OffsideCalibration 8 => (0)
			STUB OffsideCalibration 9 => (1)
			STUB OffsideCalibration 10 => (2)
			STUB OffsideCalibration 11 => (3)
			STUB OffsideCalibration 12 => (0)
			STUB OffsideCalibration 13 => (1)
			STUB OffsideCalibration 14 => (2)
			STUB OffsideCalibration 15 => (3)
			STUB OffsideCalibration 16 => (0)
			STUB OffsideCalibration 17 => (1)
			STUB OffsideCalibration 18 => (2)
			STUB OffsideCalibration 19 => (3)
			STUB OffsideCalibration 20 => (0)
			STUB OffsideCalibration 21 => (1)
			STUB OffsideCalibration 22 => (2)
			STUB OffsideCalibration 23 => (3)
			STUB OffsideCalibration 24 => (0)
			STUB OffsideCalibration 25 => (1)
			STUB OffsideCalibration 26 => (2)
            
            --toggles active frame buffer
            STUB ForegroundReDraw1 1..26 =>()
            
            --Update the PBS reading
            STUB PbsGet 1..26 => ()
            
            --Triggers the transmission of global settings from 429 board
            STUB GlobalSettingsPull 1..13 => ()
            
            --Execute graphic application
            STUB GrappApp 1..26 => ()
            
            --Update all widget positions
            STUB ForegroundReDraw2 1..26 => ()
            
            --Draw the widgets
            STUB ForegroundReDraw3 1..26 => ()
        
            --triggers the transmission of heart beat
            STUB OffsideHeartBeat()
            
        END SIMUL
                
        -- Calling the Unit Under Test 
        --the unit under test is called for 13 times to make frame counter equal to 'MAX_FRAME_VAL'
        #for(PTU_i=0;PTU_i<13;PTU_i++)
        #{
        #   AppInit();
        #}
        
    END ELEMENT

END TEST -- TEST 16

END SERVICE -- AppInit


