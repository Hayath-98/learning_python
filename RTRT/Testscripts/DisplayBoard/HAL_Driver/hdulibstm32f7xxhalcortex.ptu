HEADER hdulibstm32f7xxhalcortex,Source Code Ver :  1.2 ,TestScript Ver : 1.3
--------------------------------------------------------------------------------
-- Author Name         : Soumya Patil
--
-- File Name           : hdulibstm32f7xxhalcortex.ptu
--
-- Test Creation Date  : 31.10.2017
--
-- Tested Functions    : HALNvicSetPriorityGrouping 
--                       HalNvicSetPriority             
--                       HalNvicEnableIrq
--                       HALSysTickConfig
--                       HalMpuDisable
--                       HalMpuEnable
--                       HalMpuConfigRegion
--
-- Version History     :
--
-- TEST-VERSION           TEST-DATE      TESTER NAME        MODIFICATIONS
-- ------------           ---------      -----------        -------------
--    1.1                 31.10.2017     Soumya Patil       Created the PTU file.
--    1.2                 10.11.2017     Soumya Patil       Updated as per #PR100171
--    1.3                 14.11.2017     Soumya Patil       Updated as per #PR100171
--   
--------------------------------------------------------------------------------
--
-- TESTED FILE INCLUDE DIRECTIVES 
--
--------------------------------------------------------------------------------
#/*============================================================================*/
#/* Module specific includes                                                   */
#/*============================================================================*/

##include "hdulibstm32f746xx.h"            /* CMSIS STM32F7xx Device Peripheral Access Layer file*/
##include "hdulibstm32f7xxhal.h"           /* Header files for HAL driver*/
##include "hdulibbasictypes.h"             /* Conatins the basic data types*/
##include "hdulibstm32f7xxhalcortex.h"     /* Header files for CORTEX HAL driver*/
##include "hdulibcorecm7.h"                /* CMSIS Cortex-M7 Core Peripheral Access Layer File*/
##include "hdulibstm32f7xxhalconf.h"       /* Header files for HAL Configuration driver*/
##include "hdulibstm32f7xx.h"              /* CMSIS STM32F7xx Device Peripheral Access Layer File*/
##include "hdulibcmsisgcc.h"               /* CMSIS Cortex-M Core Function/Instruction */
--------------------------------------------------------------------------------
--
-- TESTED FILE DECLARATIONS 
--
--------------------------------------------------------------------------------

-- Declarations of the global variables of the tested file
-- None
 
-- Declarations of the temporary variable
-- None

--------------------------------------------------------------------------------

BEGIN
   COMMENT Author Name         : Soumya Patil
   COMMENT
   COMMENT File Name           : hdulibstm32f7xxhalcortex.ptu
   COMMENT
   COMMENT Tested Functions    : HALNvicSetPriorityGrouping 
   COMMENT                       HalNvicSetPriority             
   COMMENT                       HalNvicEnableIrq
   COMMENT                       HALSysTickConfig
   COMMENT                       HalMpuDisable
   COMMENT                       HalMpuEnable
   COMMENT                       HalMpuConfigRegion
   COMMENT
   COMMENT Assumptions and Constraints
   COMMENT <AC>
   COMMENT
   COMMENT Assumption(s):
   COMMENT None
   COMMENT
   COMMENT Constraint(s):
   COMMENT 1.Header file 'hdulibcorecm7.h' is modified for testing purpose.
   COMMENT  /*Commented for testing purpose*/
   COMMENT  //#define SCB                 ((T_SCB       *)     SCB_BASE      )  /* SCB configuration struct */
   COMMENT  /* Modified for stubbing hardware address */
   COMMENT  T_SCB PTU_SCB_BASE;
   COMMENT  #define SCB                 ((T_SCB       *)     &PTU_SCB_BASE      ) 
   COMMENT
   COMMENT  /*Commented for testing purpose*/
   COMMENT  /* SysTick configuration struct */
   COMMENT  //#define SYSTICK             ((T_SYSTICK   *)     SYSTICK_BASE  )
   COMMENT  /* Modified for stubbing hardware address */
   COMMENT  T_SYSTICK PTU_SYSTICK_BASE;
   COMMENT  #define SYSTICK             ((T_SYSTICK   *)     &PTU_SYSTICK_BASE  )
   COMMENT
   COMMENT  /*Commented for testing purpose*/
   COMMENT  //#define NVIC                ((T_NVIC      *)     NVIC_BASE     )  /* NVIC configuration struct*/
   COMMENT  /* Modified for stubbing hardware address */
   COMMENT  T_NVIC PTU_NVIC_BASE;
   COMMENT  #define NVIC                ((T_NVIC      *)     &PTU_NVIC_BASE     )
   COMMENT
   COMMENT  /*Commented for testing purpose*/
   COMMENT  //#define MPU               ((T_MPU       *)     MPU_BASE      )  /* Memory Protection Unit */
   COMMENT  /* Modified for stubbing hardware address */
   COMMENT  T_MPU PTU_MPU_BASE;
   COMMENT  #define MPU               ((T_MPU       *)     &PTU_MPU_BASE      )
   COMMENT
   COMMENT 2. Following Test script related warnings are observed during Target Execution for volatile keyword member/variable:
   COMMENT    warning #191-D: type qualifier is meaningless on cast type
   COMMENT 
   COMMENT </AC>
   COMMENT Equivalence Class Description
   COMMENT <ECD>
   COMMENT
   COMMENT Valid Class(es)
   COMMENT Class 1
   COMMENT The function 'HalNvicEnableIrq', calls the function 'NVICEnableIRQ'.
   COMMENT
   COMMENT Class 2
   COMMENT The function 'HalNvicSetPriority', calls the function 'NVICGetPriorityGrouping' and stores the return value as priority group.
   COMMENT
   COMMENT Class 3
   COMMENT The function 'HalNvicSetPriority', calls the function 'NVICSetPriority'.
   COMMENT
   COMMENT Class 4
   COMMENT The function 'HALNvicSetPriorityGrouping', calls the function 'NVICSetPriorityGrouping'.
   COMMENT
   COMMENT Class 5
   COMMENT The function 'HALSysTickConfig', calls the function 'SysTickConfig'.
   COMMENT
   COMMENT Class 6
   COMMENT In function 'HalMpuConfigRegion', Enable of mpu_init is not equal to RESET.
   COMMENT
   COMMENT Class 7
   COMMENT In function 'HalMpuConfigRegion', Enable of mpu_init is equal to RESET.
   COMMENT
   COMMENT Class 8
   COMMENT The function 'HalMpuDisable', Disables fault exceptions and clear the control register.
   COMMENT
   COMMENT Class 9
   COMMENT The function 'HalMpuEnable', Enable fault exceptions
   COMMENT
   COMMENT Class 10
   COMMENT The function 'HalNvicSetPriority', calls the function 'NVICEncodePriority'.
   COMMENT
   COMMENT Invalid class(es)
   COMMENT Class 11
   COMMENT The function 'HalMpuConfigRegion', Parameter mpu_init with invalid reference.
   COMMENT
   COMMENT</ECD>
   
--------------------------------------------------------------------------------
--
-- STUB DECLARATIONS OF THE TESTED OR INTEGRATED UNITS
--
--------------------------------------------------------------------------------
SIMUL

    DEFINE STUB hdulibstm32f7xxhalcortex_c

    -- No stubs
    
    END DEFINE

ELSE_SIMUL

    -- No action defined as of now if the module is not simulated

END SIMUL
--------------------------------------------------------------------------------
--
-- ENVIRONMENTS DECLARATIONS
--
--------------------------------------------------------------------------------
--IF HOST

-- No special things that have to be done on the host to run the test.

--ELSE

-- No action defined for the target execution as of now

--END IF

--------------------------------------------------------------------------------
-- TESTED FILE ENVIRONNEMENT
--------------------------------------------------------------------------------
-- Environment of the file hdulibstm32f7xxhalcortex.c

-- ENVIRONMENT ENV_hdulibstm32f7xxhalcortex_c

-- None

-- END ENVIRONMENT -- ENV_hdulibstm32f7xxhalcortex_c

-- USE ENV_hdulibstm32f7xxhalcortex_c

--------------------------------------------------------------------------------
--
-- SERVICES DECLARATIONS
--
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
-- Declaration of the service HalNvicEnableIrq
--------------------------------------------------------------------------------
SERVICE HalNvicEnableIrq
SERVICE_TYPE extern

    -- Tested service parameters declarations
    #T_IRQN_TYPE irq_n;

    ENVIRONMENT ENV_HalNvicEnableIrq
    
    --Initialization of External interrupt number
    VAR irq_n,    init = NONMASKABLEINT_IRQN,      ev = init
    
    END ENVIRONMENT -- ENV_HalNvicEnableIrq
    
    USE ENV_HalNvicEnableIrq

TEST 1
FAMILY nominal

        COMMENT Test Description 
        COMMENT <TD>
        COMMENT [hdulibstm32f7xxhalcortex-HalNvicEnableIrq-DB-LLR-001]
        COMMENT The function 'HalNvicEnableIrq' calls the function 'NVICEnableIRQ'
        COMMENT to enable interrupt with parameter irq_n set to a value 'WWDG_IRQN'.
        COMMENT Equivalence Class 1
        COMMENT </TD>

        ELEMENT
        
            COMMENT INPUT SECTION:
            
                --Holds the value of External interrupt number
                VAR irq_n,          init = WWDG_IRQN,       ev = init

            COMMENT INPUT/OUTPUT SECTION:
                --NONE      
            
            COMMENT OUTPUT SECTION:  
            
                --Holds the value of Interrupt Set Enable Register
                VAR NVIC->ISER[0], init = 0,                ev = 0x1
        
            -- Stub Calls :
            SIMUL
        
                --No Stubs
        
            END SIMUL
        
        -- Calling the Unit Under Test :
        #HalNvicEnableIrq(irq_n);
        
        END ELEMENT

END TEST -- TEST 1

TEST 2
FAMILY nominal

        COMMENT Test Description 
        COMMENT <TD>
        COMMENT [hdulibstm32f7xxhalcortex-HalNvicEnableIrq-DB-LLR-001]
        COMMENT The function 'HalNvicEnableIrq' calls the function 'NVICEnableIRQ'
        COMMENT to enable interrupt with parameter irq_n set to a value 'SPDIF_RX_IRQN'.
        COMMENT Equivalence Class 1
        COMMENT </TD>

        ELEMENT
        
            COMMENT INPUT SECTION:
                --Holds the value of External interrupt number
                VAR irq_n,          init = SPDIF_RX_IRQN,       ev = init

            COMMENT INPUT/OUTPUT SECTION:
            --NONE      
            
            COMMENT OUTPUT SECTION:
                --Holds the value of Interrupt Set Enable Register
                VAR NVIC->ISER[3], init = 0,                    ev = 0x2
        
            -- Stub Calls :
            SIMUL
        
                --No Stubs
        
            END SIMUL
        
        -- Calling the Unit Under Test :
        #HalNvicEnableIrq(irq_n);
        
        END ELEMENT

END TEST -- TEST 2
    
--    TEST 3
--    FAMILY nominal
--
--        COMMENT Test Description 
--        COMMENT <TD>
--        COMMENT [hdulibstm32f7xxhalcortex-HalNvicEnableIrq-DB-LLR-001]
--        COMMENT The function 'HalNvicEnableIrq' calls the function 'NVICEnableIRQ'to enable interrupt with parameter
--        COMMENT irq_n set to a value 'NONMASKABLEINT_IRQN'.
--        COMMENT Equivalence Class 1
--        COMMENT </TD>
--
--        ELEMENT
--
--            COMMENT INPUT SECTION:
--                --Holds the value of External interrupt number
--                VAR irq_n,                init = NONMASKABLEINT_IRQN,         ev = init
--
--            COMMENT INPUT/OUTPUT SECTION:
--            --NONE      
--            
--            COMMENT OUTPUT SECTION:        
--                --Holds the value of Interrupt Set Enable Register
--                VAR NVIC->ISER[134217727], init = 0,                          ev = 0x40000
--        
--            -- Stub Calls :
--            SIMUL
--        
--                --No Stubs
--        
--            END SIMUL
--        
--        -- Calling the Unit Under Test :
--        #HalNvicEnableIrq(irq_n);
--
--        END ELEMENT
--
--    END TEST -- TEST 3
END SERVICE -- HalNvicEnableIrq

--------------------------------------------------------------------------------
-- Declaration of the service HalNvicSetPriority
--------------------------------------------------------------------------------
SERVICE HalNvicSetPriority
SERVICE_TYPE extern

    -- Tested service parameters declarations
    #T_IRQN_TYPE irq_n;
    #T_UINT32 preempt_priority;
    #T_UINT32 sub_priority;

    ENVIRONMENT ENV_HalNvicSetPriority
    
    VAR irq_n,    init = NONMASKABLEINT_IRQN,      ev = init
    
    VAR preempt_priority,     init = 0,      ev = init
    
    VAR sub_priority,      init = 0,      ev = init
    
    END ENVIRONMENT -- ENV_HalNvicSetPriority
    
    USE ENV_HalNvicSetPriority

TEST 1
FAMILY nominal

        COMMENT Test Description 
        COMMENT <TD>
        COMMENT [hdulibstm32f7xxhalcortex-HalNvicSetPriority-DB-LLR-001]
        COMMENT The function 'HalNvicSetPriority' calls the function 'NVICGetPriorityGrouping' and stores the return value as priority group.
        COMMENT Equivalence Class 2
        COMMENT
        COMMENT [hdulibstm32f7xxhalcortex-HalNvicSetPriority-DB-LLR-002]
        COMMENT The function 'HalNvicSetPriority' calls the function 'NVICSetPriority' with parameters irq_n and return value of the function 
        COMMENT 'NVICEncodePriority' called with the parameters priority group, preempt_priority and sub_priority .
        COMMENT Note: Parameters preempt_priority, sub_priority and irq_n are excercised for negative(-1) and negative values respectively.
        COMMENT Equivalence Class 3, 10
        COMMENT </TD>

        ELEMENT
            COMMENT INPUT SECTION: 
               --Holds the value of External interrupt number              
               VAR irq_n,                   init = SYSTICK_IRQN,     ev = init
               
               --Holds the value of preemption priority for the IRQn channel               
               VAR preempt_priority,        init = 0,                ev = init
               
               --Holds the value of sub priority level for the IRQ channel                  
               VAR sub_priority,            init = 0,                ev = init
               
               --Holds the value of Application Interrupt and Reset Control Register
               VAR SCB->AIRCR,              init = 0,                ev = init
        
            COMMENT INPUT/OUTPUT SECTION:
            --NONE      
            
            COMMENT OUTPUT SECTION:
               --Holds the value of System Handlers Priority Registers
               VAR SCB->SHPR[11],           init = 0x1,              ev = 0
        
            -- Stub Calls :
            SIMUL
        
                --No Stubs
        
            END SIMUL
        
        -- Calling the Unit Under Test :        
        #HalNvicSetPriority(irq_n, preempt_priority, sub_priority);
        
        END ELEMENT

END TEST -- TEST 1

TEST 2
FAMILY nominal

        COMMENT Test Description 
        COMMENT <TD>
        COMMENT [hdulibstm32f7xxhalcortex-HalNvicSetPriority-DB-LLR-002]
        COMMENT The function 'HalNvicSetPriority' calls the function 'NVICSetPriority' with parameters irq_n and return value of the function 
        COMMENT 'NVICEncodePriority' called with the parameters priority group, preempt_priority and sub_priority .
        COMMENT Note: Parameters preempt_priority, sub_priority and irq_n are excercised for nominal and min(0) values respectively.
        COMMENT Equivalence Class 3, 10
        COMMENT </TD>

        ELEMENT
        
            COMMENT INPUT SECTION: 
               --Holds the value of External interrupt number              
               VAR irq_n,               init = WWDG_IRQN,       ev = init
               
               --Holds the value of preemption priority for the IRQn channel                  
               VAR preempt_priority,    init = 1,               ev = init
               
               --Holds the value of sub priority level for the IRQ channel                 
               VAR sub_priority,        init = 15,               ev = init
               
               --Holds the value of Application Interrupt and Reset Control Register               
               VAR SCB->AIRCR,          init = 0x700,            ev = init
        
            COMMENT INPUT/OUTPUT SECTION:
            --NONE      
            
            COMMENT OUTPUT SECTION:
               --Holds the value of Interrupt Priority Register
               VAR NVIC->IP[0],         init = 1,               ev = 0xF0
        
            -- Stub Calls :
            SIMUL
        
                --No Stubs
        
            END SIMUL
        
        -- Calling the Unit Under Test :        
        #HalNvicSetPriority(irq_n, preempt_priority, sub_priority);
        
        END ELEMENT

END TEST -- TEST 2

TEST 3
FAMILY nominal

        COMMENT Test Description 
        COMMENT <TD>
        COMMENT [hdulibstm32f7xxhalcortex-HalNvicSetPriority-DB-LLR-002]
        COMMENT The function 'HalNvicSetPriority' calls the function 'NVICSetPriority' with parameters irq_n and return value of the function 
        COMMENT 'NVICEncodePriority' called with the parameters priority group, preempt_priority and sub_priority .
        COMMENT Note: Parameters preempt_priority, sub_priority and irq_n are excercised for max(4294967295) and positive(1) values respectively.
        COMMENT Equivalence Class 3, 10
        COMMENT </TD>

        ELEMENT
            COMMENT INPUT SECTION:
            
               --Holds the value of External interrupt number                
               VAR irq_n,               init = PVD_IRQN,        ev = init
               
               --Holds the value of preemption priority for the IRQn channel                  
               VAR preempt_priority,    init = 4294967295,      ev = init
               
               --Holds the value of sub priority level for the IRQ channel                
               VAR sub_priority,        init = 4294967295,      ev = init
               
               --Holds the value of Application Interrupt and Reset Control Register                 
               VAR SCB->AIRCR,          init = 0x700,           ev = init
        
            COMMENT INPUT/OUTPUT SECTION:
            --NONE      
            
            COMMENT OUTPUT SECTION:
            
               --Holds the value of Interrupt Priority Register
               VAR NVIC->IP[1],         init = 1,               ev = 0xF0
        
            -- Stub Calls :
            SIMUL
        
                --No Stubs
        
            END SIMUL
        
        -- Calling the Unit Under Test :       
        #HalNvicSetPriority(irq_n, preempt_priority, sub_priority);
        
        END ELEMENT

END TEST -- TEST 3

END SERVICE -- HalNvicSetPriority


--------------------------------------------------------------------------------
-- Declaration of the service HALNvicSetPriorityGrouping
--------------------------------------------------------------------------------
SERVICE HALNvicSetPriorityGrouping
SERVICE_TYPE extern

    -- Tested service parameters declarations
    #T_UINT32 priority_group;

    ENVIRONMENT ENV_HALNvicSetPriorityGrouping
    
    VAR priority_group,    init = 0,      ev = init
    
    END ENVIRONMENT -- ENV_HALNvicSetPriorityGrouping
    
    USE ENV_HALNvicSetPriorityGrouping

TEST 1
FAMILY nominal

        COMMENT Test Description 
        COMMENT <TD>
        COMMENT [hdulibstm32f7xxhalcortex-HALNvicSetPriorityGrouping-DB-LLR-001]
        COMMENT The function 'HALNvicSetPriorityGrouping' calls the function NVICSetPriorityGrouping 
        COMMENT with parameter 
        COMMENT priority_group (min value: 0) and sets the priority group bits (10:8 as 000) according to the priority_group parameter value.
        COMMENT Equivalence Class 4
        COMMENT </TD>

        ELEMENT
        
            COMMENT INPUT SECTION:
            
               --Holds the value of priority grouping bits length
               VAR priority_group,      init = 0,      ev = init

            COMMENT INPUT/OUTPUT SECTION:
            
               --Holds the value of priority grouping bits length
               VAR SCB->AIRCR,          init = 0,      ev = 0x5FA0000  
            
            COMMENT OUTPUT SECTION:
            --NONE                  
        
            -- Stub Calls :
            SIMUL
        
                --No Stubs
        
            END SIMUL
            
        -- Calling the Unit Under Test :
        #HALNvicSetPriorityGrouping(priority_group);
        
        END ELEMENT

END TEST -- TEST 1
    
TEST 2
FAMILY nominal

        COMMENT Test Description 
        COMMENT <TD>
        COMMENT [hdulibstm32f7xxhalcortex-HALNvicSetPriorityGrouping-DB-LLR-001]
        COMMENT The function 'HALNvicSetPriorityGrouping' calls the function NVICSetPriorityGrouping with parameter 
        COMMENT priority_group (max value: 4294967295) and sets the priority group bits (10:8 as 111) according to the priority_group parameter value.
        COMMENT Equivalence Class 4
        COMMENT </TD>


        ELEMENT
        
            COMMENT INPUT SECTION:
            
               --Holds the value of priority grouping bits length
               VAR priority_group,      init = 4294967295,              ev = init

            COMMENT INPUT/OUTPUT SECTION:
            
               --Holds the value of priority grouping bits length
               VAR SCB->AIRCR,          init = (T_UINT32)0xFFFFFFFF,    ev = (T_UINT32)0x5FAFFFF  
            
            COMMENT OUTPUT SECTION:
            --NONE                  
        
            -- Stub Calls :
            SIMUL
        
                --No Stubs
        
            END SIMUL

        -- Calling the Unit Under Test :       
        #HALNvicSetPriorityGrouping(priority_group);
        
        END ELEMENT

END TEST -- TEST 2
    
TEST 3
FAMILY nominal

        COMMENT Test Description 
        COMMENT <TD>
        COMMENT [hdulibstm32f7xxhalcortex-HALNvicSetPriorityGrouping-DB-LLR-001]
        COMMENT The function 'HALNvicSetPriorityGrouping' calls the function NVICSetPriorityGrouping with parameter 
        COMMENT priority_group (nominal value) and sets the priority group bits according to the priority_group parameter value.
        COMMENT Equivalence Class 4
        COMMENT </TD> 

        ELEMENT
        
            COMMENT INPUT SECTION:
            
               --Holds the value of priority grouping bits length
               VAR priority_group,      init = 1,       ev = init

            COMMENT INPUT/OUTPUT SECTION:
            
               --Holds the value of priority grouping bits length
               VAR SCB->AIRCR,          init = 0x1,      ev = (T_UINT32)0x5FA0101  
            
            COMMENT OUTPUT SECTION:
            --NONE                  
        
            -- Stub Calls :
            SIMUL
        
                --No Stubs
        
            END SIMUL

        -- Calling the Unit Under Test :       
        #HALNvicSetPriorityGrouping(priority_group);
        
        END ELEMENT

END TEST -- TEST 3

END SERVICE -- HALNvicSetPriorityGrouping


--------------------------------------------------------------------------------
-- Declaration of the service HalMpuConfigRegion
--------------------------------------------------------------------------------
SERVICE HalMpuConfigRegion
SERVICE_TYPE extern

    -- Tested service parameters declarations
    #T_MPU_REGION_INIT mpu_init;

    ENVIRONMENT ENV_HalMpuConfigRegion
    
    STRUCTURE mpu_init,    init = { Enable => 0, Number => 0, BaseAddress => 0, Size => 0, SubRegionDisable => 0, TypeExtField => 0, 
    &AccessPermission => 0, DisableExec => 0, IsShareable => 0, IsCacheable => 0, IsBufferable => 0 },    ev = init
    
    END ENVIRONMENT -- ENV_HalMpuConfigRegion
    
    USE ENV_HalMpuConfigRegion

TEST 1
FAMILY nominal

        COMMENT Test Description 
        COMMENT <TD>
        COMMENT [hdulibstm32f7xxhalcortex-HalMpuConfigRegion-DB-LLR-001]
        COMMENT The function 'HalMpuConfigRegion' sets the Region number by setting RNR of MPU to Number of mpu_init(set for min value 0).
        COMMENT Equivalence Class None
        COMMENT         
        COMMENT [hdulibstm32f7xxhalcortex-HalMpuConfigRegion-DB-LLR-002]
        COMMENT The function 'HalMpuConfigRegion' does the following thus Enable of mpu_init is not equal to RESET.
        COMMENT 1.Sets RBAR of MPU to BaseAddress of mpu_init.
        COMMENT 2.Sets RASR of MPU to result of (DisableExec of mpu_init left shift by MPU_RASR_XN_POS bitwise or 
        COMMENT   AccessPermission of mpu_init left shift by MPU_RASR_AP_POS bitwise or 
        COMMENT   TypeExtField of mpu_init left shift by MPU_RASR_TEX_POS bitwise or IsShareable of mpu_init left shift by MPU_RASR_S_POS 
        COMMENT   bitwise or IsCacheable of mpu_init left shift by MPU_RASR_C_POS bitwise or 
        COMMENT   IsBufferable of mpu_init left shift by MPU_RASR_B_POS bitwise or SubRegionDisable of mpu_init left shift by MPU_RASR_SRD_POS 
        COMMENT   bitwise or Size of mpu_init left shift by MPU_RASR_SIZE_POS bitwise or Enable of mpu_init left shift by MPU_RASR_ENABLE_POS)
        COMMENT Equivalence Class 6         
        COMMENT </TD>

        ELEMENT
        
        COMMENT INPUT SECTION:
        
            --Holds the values of mpu_init structure
            STRUCTURE mpu_init, init = { Enable => SET, Number => 0, BaseAddress => 0, Size => 0, SubRegionDisable => 0, TypeExtField => 0, 
            &AccessPermission => 0, DisableExec => 0, IsShareable => 0, IsCacheable => 0, IsBufferable => 0 }, ev = init
        
        COMMENT INPUT/OUTPUT SECTION:
        --NONE      
            
        COMMENT OUTPUT SECTION:
            --Holds the values of MPU Region RNRber Register
            VAR MPU->RNR,   init = 0x1,     ev = 0
            
            --Holds the values of MPU Region Base Address Register          
            VAR MPU->RBAR,  init = 0x1,     ev = 0
            
            --Holds the values of MPU Region Attribute and Size Register            
            VAR MPU->RASR,  init = 0,       ev = 0x1
        
        -- Stub Calls :
        SIMUL
        
            --No Stubs
        
        END SIMUL
  
        -- Calling the Unit Under Test :
        #HalMpuConfigRegion(&mpu_init);
        
        END ELEMENT

END TEST -- TEST 1

TEST 2
FAMILY nominal

        COMMENT Test Description 
        COMMENT <TD>
        COMMENT [hdulibstm32f7xxhalcortex-HalMpuConfigRegion-DB-LLR-001]
        COMMENT The function 'HalMpuConfigRegion' sets the Region number by setting RNR of MPU to Number of mpu_init(set for max value 255).
        COMMENT Equivalence Class None
        COMMENT         
        COMMENT [hdulibstm32f7xxhalcortex-HalMpuConfigRegion-DB-LLR-002]
        COMMENT The function 'HalMpuConfigRegion' does the following thus Enable of mpu_init is not equal to RESET.
        COMMENT 1.Sets RBAR of MPU to BaseAddress of mpu_init.
        COMMENT 2.Sets RASR of MPU to result of (DisableExec of mpu_init left shift by MPU_RASR_XN_POS bitwise or 
        COMMENT   AccessPermission of mpu_init left shift by MPU_RASR_AP_POS bitwise or 
        COMMENT   TypeExtField of mpu_init left shift by MPU_RASR_TEX_POS bitwise or IsShareable of mpu_init left shift by MPU_RASR_S_POS 
        COMMENT   bitwise or IsCacheable of mpu_init left shift by MPU_RASR_C_POS bitwise or 
        COMMENT   IsBufferable of mpu_init left shift by MPU_RASR_B_POS bitwise or SubRegionDisable of mpu_init left shift by MPU_RASR_SRD_POS 
        COMMENT   bitwise or Size of mpu_init left shift by MPU_RASR_SIZE_POS bitwise or Enable of mpu_init left shift by MPU_RASR_ENABLE_POS)
        COMMENT Equivalence Class 6         
        COMMENT </TD>

        ELEMENT
        
        COMMENT INPUT SECTION:
        
            --Holds the values of mpu_init structure
            STRUCTURE mpu_init, init = { Enable => SET, Number =>255, BaseAddress => 4294967295, Size => 255, SubRegionDisable => 255, 
            &TypeExtField => 255, AccessPermission => 255, DisableExec => 255, IsShareable => 255, IsCacheable => 255, IsBufferable => 255 }, ev = init
        
        COMMENT INPUT/OUTPUT SECTION:
        --NONE      
            
        COMMENT OUTPUT SECTION:
            --Holds the values of MPU Region RNRber Register
            VAR MPU->RNR,   init = 0x1,     ev = 0xFF
            
            --Holds the values of MPU Region Base Address Register              
            VAR MPU->RBAR,  init = 0x1,     ev = 0xFFFFFFFF
            
            --Holds the values of MPU Region Attribute and Size Register            
            VAR MPU->RASR,  init = 0,       ev = 0xFFFFFFFF
        
        -- Stub Calls :
        SIMUL
        
            --No Stubs
        
        END SIMUL

        -- Calling the Unit Under Test :        
        #HalMpuConfigRegion(&mpu_init);
        
        END ELEMENT

END TEST -- TEST 2

TEST 3
FAMILY nominal

        COMMENT Test Description 
        COMMENT <TD>
        COMMENT [hdulibstm32f7xxhalcortex-HalMpuConfigRegion-DB-LLR-001]
        COMMENT The function 'HalMpuConfigRegion' sets the Region number by setting RNR of MPU to Number of mpu_init(set for nominal value 1).
        COMMENT Equivalence Class None
        COMMENT         
        COMMENT [hdulibstm32f7xxhalcortex-HalMpuConfigRegion-DB-LLR-002]
        COMMENT The function 'HalMpuConfigRegion' does the following thus Enable of mpu_init is not equal to RESET.
        COMMENT 1.Sets RBAR of MPU to BaseAddress of mpu_init.
        COMMENT 2.Sets RASR of MPU to result of (DisableExec of mpu_init left shift by MPU_RASR_XN_POS bitwise or 
        COMMENT   AccessPermission of mpu_init left shift by MPU_RASR_AP_POS bitwise or 
        COMMENT   TypeExtField of mpu_init left shift by MPU_RASR_TEX_POS bitwise or IsShareable of mpu_init left shift by MPU_RASR_S_POS 
        COMMENT   bitwise or IsCacheable of mpu_init left shift by MPU_RASR_C_POS bitwise or 
        COMMENT   IsBufferable of mpu_init left shift by MPU_RASR_B_POS bitwise or SubRegionDisable of mpu_init left shift by MPU_RASR_SRD_POS 
        COMMENT   bitwise or Size of mpu_init left shift by MPU_RASR_SIZE_POS bitwise or Enable of mpu_init left shift by MPU_RASR_ENABLE_POS)
        COMMENT Equivalence Class 6         
        COMMENT </TD>

        ELEMENT
        
        COMMENT INPUT SECTION:
        
            --Holds the values of mpu_init structure
            STRUCTURE mpu_init, init = { Enable => SET, Number =>1, BaseAddress => 1, Size => 1, SubRegionDisable => 1, 
            &TypeExtField => 1, AccessPermission => 1, DisableExec => 1, IsShareable => 1, IsCacheable => 1, IsBufferable => 1 }, ev = init
        
        COMMENT INPUT/OUTPUT SECTION:
        --NONE      
            
        COMMENT OUTPUT SECTION:
            --Holds the values of MPU Region RNRber Register
            VAR MPU->RNR,   init = 0,   ev = 0x1
            
            --Holds the values of MPU Region Base Address Register              
            VAR MPU->RBAR,  init = 0,   ev = 0x1
            
            --Holds the values of MPU Region Attribute and Size Register            
            VAR MPU->RASR,  init = 0,   ev = 0x110F0103
        
        -- Stub Calls :
        SIMUL
        
            --No Stubs
        
        END SIMUL

        -- Calling the Unit Under Test :        
        #HalMpuConfigRegion(&mpu_init);
        
        END ELEMENT

END TEST -- TEST 3

TEST 4
FAMILY nominal

        COMMENT Test Description 
        COMMENT <TD>
        COMMENT [hdulibstm32f7xxhalcortex-HalMpuConfigRegion-DB-LLR-001]
        COMMENT The function 'HalMpuConfigRegion' sets the Region number by setting RNR of MPU to Number of mpu_init(set for nominal value 254).
        COMMENT Equivalence Class None
        COMMENT         
        COMMENT [hdulibstm32f7xxhalcortex-HalMpuConfigRegion-DB-LLR-002]
        COMMENT The function 'HalMpuConfigRegion' sets RBAR and RASR of MPU to ZERO thus Enable of mpu_init is equal to RESET.
        COMMENT Equivalence Class 7   
        COMMENT </TD>

        ELEMENT
        
        COMMENT INPUT SECTION:
        
            --Holds the values of mpu_init members
            VAR mpu_init.Number, init=254, ev=init            
            VAR mpu_init.Enable, init=RESET, ev=init

        COMMENT INPUT/OUTPUT SECTION:
        --NONE      
            
        COMMENT OUTPUT SECTION:
            --Holds the values of MPU Region RNRber Register
            VAR MPU->RNR,   init = 0,       ev = 0xFE
            
            --Holds the values of MPU Region Base Address Register            
            VAR MPU->RBAR,  init = 0x1,     ev = 0
            
            --Holds the values of MPU Region Attribute and Size Register            
            VAR MPU->RASR,  init = 0x1,     ev = 0
        
        -- Stub Calls :
        SIMUL
        
            --No Stubs
        
        END SIMUL

        -- Calling the Unit Under Test :        
        #HalMpuConfigRegion(&mpu_init);
        
        END ELEMENT

END TEST -- TEST 4

--    TEST 5
--    FAMILY robustness
--
--        COMMENT Test Description 
--        COMMENT <TD>
--        COMMENT [hdulibstm32f7xxhalcortex-HalMpuConfigRegion-DB-LLR-001]
--        COMMENT The function 'HalMpuConfigRegion' sets the Region number by 
--        COMMENT setting RNR of MPU to Number of mpu_init.
--        COMMENT Note: Parameter mpu_init is tested for NULL pointer.
--        COMMENT Equivalence Class 11
--        COMMENT      
--        COMMENT </TD>
--
--
--        ELEMENT
--        
--        COMMENT INPUT SECTION:
--        --NONE              
--
--        COMMENT INPUT/OUTPUT SECTION:
--        --NONE      
--            
--        COMMENT OUTPUT SECTION:
--        --NONE      
--        
--        -- Stub Calls :
--        SIMUL
--        
--            --No Stubs
--        
--        END SIMUL
--
--        -- Calling the Unit Under Test :        
--        #HalMpuConfigRegion(NULL);
--        
--        END ELEMENT
--
--    END TEST -- TEST 5

END SERVICE -- HalMpuConfigRegion


--------------------------------------------------------------------------------
-- Declaration of the service HalMpuDisable
--------------------------------------------------------------------------------
SERVICE HalMpuDisable
SERVICE_TYPE extern


TEST 1
FAMILY nominal

        COMMENT Test Description 
        COMMENT <TD>
        COMMENT [hdulibstm32f7xxhalcortex-HalMpuDisable-DB-LLR-001]
        COMMENT The function 'HalMpuDisable' Disables fault exceptions by making the value of SHCSR register of SCB(value as 65536) bitwise and 
        COMMENT with negated value of SCB_SHCSR_MEMFAULTENA_MSK.
        COMMENT Equivalence Class 8
        COMMENT         
        COMMENT [hdulibstm32f7xxhalcortex-HalMpuDisable-DB-LLR-002]
        COMMENT The function 'HalMpuDisable' Disables the MPU and clears the control register by setting CTRL of MPU to ZERO.
        COMMENT Equivalence Class 8 
        COMMENT </TD>

        ELEMENT
        
        COMMENT INPUT SECTION:
        --NONE   

        COMMENT INPUT/OUTPUT SECTION:
            --Holds the value of System Handler Control and State Register
            VAR SCB->SHCSR,     init = 0x10000,     ev = 0    

            
        COMMENT OUTPUT SECTION:
            --Holds the value of MPU Control Register
            VAR MPU->CTRL,      init = 0x1,         ev = 0
        
        -- Stub Calls :
        SIMUL
        
            --No Stubs
        
        END SIMUL

        #HalMpuDisable();
        END ELEMENT

END TEST -- TEST 1

TEST 2
FAMILY nominal

        COMMENT Test Description 
        COMMENT <TD>
        COMMENT [hdulibstm32f7xxhalcortex-HalMpuDisable-DB-LLR-001]
        COMMENT The function 'HalMpuDisable' Disables fault exceptions by making the value of SHCSR register of SCB(value as 4294967295) bitwise and 
        COMMENT with negated value of SCB_SHCSR_MEMFAULTENA_MSK.
        COMMENT Equivalence Class 8
        COMMENT         
        COMMENT [hdulibstm32f7xxhalcortex-HalMpuDisable-DB-LLR-002]
        COMMENT The function 'HalMpuDisable' Disables the MPU and clears the control register by setting CTRL of MPU to ZERO.
        COMMENT Equivalence Class 8
        COMMENT </TD>

        ELEMENT
        
        COMMENT INPUT SECTION:
        --NONE   

        COMMENT INPUT/OUTPUT SECTION:
            --Holds the value of System Handler Control and State Register
            VAR SCB->SHCSR,     init = (T_UINT32)0xFFFFFFFF,  ev = (T_UINT32)0xFFFEFFFF   

            
        COMMENT OUTPUT SECTION:
            --Holds the value of MPU Control Register
            VAR MPU->CTRL,      init = 0x2,         ev = 0
        
        -- Stub Calls :
        SIMUL
        
            --No Stubs
        
        END SIMUL

        -- Calling the Unit Under Test :        
        #HalMpuDisable();
        
        END ELEMENT

END TEST -- TEST 2

END SERVICE -- HalMpuDisable


--------------------------------------------------------------------------------
-- Declaration of the service HALSysTickConfig
--------------------------------------------------------------------------------
SERVICE HALSysTickConfig
SERVICE_TYPE extern

    -- Tested service parameters declarations
    #T_UINT32 ticks_numb;
    -- By function returned type declaration
    #T_UINT32 ret_HALSysTickConfig;

    ENVIRONMENT ENV_HALSysTickConfig
    
    VAR ticks_numb,     init = 0,      ev = init
    
    VAR ret_HALSysTickConfig,    init = 0,      ev = init
    
    END ENVIRONMENT -- ENV_HALSysTickConfig
    
    USE ENV_HALSysTickConfig

TEST 1
FAMILY nominal

        COMMENT Test Description 
        COMMENT <TD>
        COMMENT [hdulibstm32f7xxhalcortex-HALSysTickConfig-DB-LLR-001]
        COMMENT The function 'HALSysTickConfig' returns the completion status as failed by calling the function SysTickConfig 
        COMMENT with parameter ticks_numb(value as 0x1000001).
        COMMENT Equivalence Class 5
        COMMENT </TD>


        ELEMENT
        
        COMMENT INPUT SECTION:
        
            --Holds the value of ticks Number of ticksticks 
            VAR ticks_numb,     init = (T_UINT32)0x1000001,       ev = init

        COMMENT INPUT/OUTPUT SECTION:
        --NONE   

        COMMENT OUTPUT SECTION:
        
            --Holds the value of completion status
            VAR ret_HALSysTickConfig,       init = 0,       ev = 1
        
        -- Stub Calls :
        SIMUL
        
            --No Stubs
        
        END SIMUL

        -- Calling the Unit Under Test :     
        #ret_HALSysTickConfig = HALSysTickConfig(ticks_numb);
        
        END ELEMENT

END TEST -- TEST 1

TEST 2
FAMILY nominal

        COMMENT Test Description 
        COMMENT <TD>
        COMMENT [hdulibstm32f7xxhalcortex-HALSysTickConfig-DB-LLR-001]
        COMMENT The function 'HALSysTickConfig' returns the completion status as failed by calling the function SysTickConfig 
        COMMENT with parameter ticks_numb(value as 0x1000000).
        COMMENT Equivalence Class 5
        COMMENT </TD>

        ELEMENT
        
        COMMENT INPUT SECTION:
        
            --Holds the value of ticks Number of ticks
            VAR ticks_numb,             init = 0x1000000,       ev = init

        COMMENT INPUT/OUTPUT SECTION:
        --NONE   

        COMMENT OUTPUT SECTION:
            --Holds the value of SysTick Reload Value Register
            VAR SYSTICK->LOAD,          init = 1,               ev = 0xFFFFFF
            
            --Holds the value of System Handlers Priority Registers
            VAR SCB->SHPR[11],          init = 1,               ev = 0xF0
            
            --Holds the value of  SysTick Current Value Register
            VAR SYSTICK->VAL,           init = 0x2,             ev = 0
            
            --Holds the value of SysTick Control and Status Register
            VAR SYSTICK->CTRL,          init = 0x2,             ev = 0x7
            
            --Holds the value of completion status            
            VAR ret_HALSysTickConfig,   init = 2,               ev = 0
        
        -- Stub Calls :
        SIMUL
        
            --No Stubs
        
        END SIMUL

        -- Calling the Unit Under Test :     
        #ret_HALSysTickConfig = HALSysTickConfig(ticks_numb);
        
        END ELEMENT

END TEST -- TEST 2

TEST 3
FAMILY nominal

        COMMENT Test Description 
        COMMENT <TD>
        COMMENT [hdulibstm32f7xxhalcortex-HALSysTickConfig-DB-LLR-001]
        COMMENT The function 'HALSysTickConfig' returns the completion status as succeeded by calling the function SysTickConfig 
        COMMENT with parameter ticks_numb(value as 0xFFFFF).
        COMMENT Equivalence Class 5
        COMMENT </TD>

        ELEMENT
        COMMENT INPUT SECTION:
        
            --Holds the value of ticks Number of ticks
            VAR ticks_numb,         init = 0xFFFFF,         ev = init

        COMMENT INPUT/OUTPUT SECTION:
        --NONE   

        COMMENT OUTPUT SECTION:
            --Holds the value of SysTick Reload Value Register            
            VAR SYSTICK->LOAD,      init = 0,               ev = 0xFFFFE
            
            --Holds the value of System Handlers Priority Registers            
            VAR SCB->SHPR[11],      init = 0,               ev=0xF0
            
            --Holds the value of  SysTick Current Value Register            
            VAR SYSTICK->VAL,       init = 0x1,             ev = 0
            
            --Holds the value of SysTick Control and Status Register            
            VAR SYSTICK->CTRL,      init = 0x1,             ev = 0x7
            
            --Holds the value of completion status    
            VAR ret_HALSysTickConfig, init = 1,             ev = 0
        
        -- Stub Calls :
        SIMUL
        
            --No Stubs
        
        END SIMUL

        -- Calling the Unit Under Test :     
        #ret_HALSysTickConfig = HALSysTickConfig(ticks_numb);
        
        END ELEMENT

END TEST -- TEST 3

END SERVICE -- HALSysTickConfig


--------------------------------------------------------------------------------
-- Declaration of the service HalMpuEnable
--------------------------------------------------------------------------------
SERVICE HalMpuEnable
SERVICE_TYPE extern

    -- Tested service parameters declarations
    #T_UINT32 mpu_control;

    ENVIRONMENT ENV_HalMpuEnable
    
    VAR mpu_control,    init = 0,      ev = init
    
    END ENVIRONMENT -- ENV_HalMpuEnable
    
    USE ENV_HalMpuEnable

TEST 1
FAMILY nominal

        COMMENT Test Description 
        COMMENT <TD>
        COMMENT [hdulibstm32f7xxhalcortex-HalMpuEnable-DB-LLR-001]
        COMMENT The function 'HalMpuEnable' enables the MPU by setting CTRL of MPU to result of bitwise or 
        COMMENT operation of mpu_control(value given as min 0) and MPU_CTRL_ENABLE_MSK.
        COMMENT Equivalence Class None
        COMMENT
        COMMENT [hdulibstm32f7xxhalcortex-HalMpuEnable-DB-LLR-002]
        COMMENT The function 'HalMpuEnable' enables fault exceptions by setting  the value of SHCSR register of SCB 
        COMMENT to the result of bitwise or operation of SHCSR of SCB(value given as min 0) and value of SCB_SHCSR_MEMFAULTENA_MSK.
        COMMENT Equivalence Class 9
        COMMENT </TD>

        ELEMENT
        
        COMMENT INPUT SECTION:
            --Holds the value of the control mode
            VAR mpu_control,            init = 0,       ev = init

        COMMENT INPUT/OUTPUT SECTION:
            --Holds the value of System Handler Control and State Register 
            VAR SCB->SHCSR,             init = 0,       ev = 0x10000

        COMMENT OUTPUT SECTION:
            --Holds the value of MPU Control Register
            VAR MPU->CTRL,              init = 0,       ev = 0x1
        
        -- Stub Calls :
        SIMUL
        
            --No Stubs
        
        END SIMUL

        -- Calling the Unit Under Test :             
        #HalMpuEnable(mpu_control);
        
        END ELEMENT

END TEST -- TEST 1

TEST 2
FAMILY nominal

        COMMENT Test Description 
        COMMENT <TD>
        COMMENT [hdulibstm32f7xxhalcortex-HalMpuEnable-DB-LLR-001]
        COMMENT The function 'HalMpuEnable' enables the MPU by setting CTRL of MPU to result of bitwise or 
        COMMENT operation of mpu_control(value given as max 4294967295) and MPU_CTRL_ENABLE_MSK.
        COMMENT Equivalence Class None
        COMMENT
        COMMENT [hdulibstm32f7xxhalcortex-HalMpuEnable-DB-LLR-002]
        COMMENT The function 'HalMpuEnable' enables fault exceptions by setting  the value of SHCSR register of SCB 
        COMMENT to the result of bitwise or operation of SHCSR of SCB and value of SCB_SHCSR_MEMFAULTENA_MSK.
        COMMENT Equivalence Class 9
        COMMENT </TD>

        ELEMENT
        COMMENT INPUT SECTION:
            --Holds the value of the control mode
            VAR mpu_control,            init = 4294967295,           ev = init

        COMMENT INPUT/OUTPUT SECTION:
            --Holds the value of System Handler Control and State Register 
            VAR SCB->SHCSR,             init = (T_UINT32)0xFFFF,   ev = (T_UINT32)0x1FFFF

        COMMENT OUTPUT SECTION:
            --Holds the value of MPU Control Register
            VAR MPU->CTRL,              init = 1,                    ev = (T_UINT32)0xFFFFFFFF
        
        -- Stub Calls :
        SIMUL
        
            --No Stubs
        
        END SIMUL

        -- Calling the Unit Under Test :             
        #HalMpuEnable(mpu_control);
        
        END ELEMENT

END TEST -- TEST 2

TEST 3
FAMILY nominal

        COMMENT Test Description 
        COMMENT <TD>
        COMMENT [hdulibstm32f7xxhalcortex-HalMpuEnable-DB-LLR-001]
        COMMENT The function 'HalMpuEnable' enables the MPU by setting CTRL of MPU to result of bitwise or 
        COMMENT operation of mpu_control(value given as nominal 1) and MPU_CTRL_ENABLE_MSK.
        COMMENT Equivalence Class None
        COMMENT
        COMMENT [hdulibstm32f7xxhalcortex-HalMpuEnable-DB-LLR-002]
        COMMENT The function 'HalMpuEnable' enables fault exceptions by setting  the value of SHCSR register of SCB 
        COMMENT to the result of bitwise or operation of SHCSR of SCB(value given as nominal 1) and value of SCB_SHCSR_MEMFAULTENA_MSK.
        COMMENT Equivalence Class 9
        COMMENT </TD>

        ELEMENT
        COMMENT INPUT SECTION:
            --Holds the value of the control mode
            VAR mpu_control,        init = 1,       ev = init

        COMMENT INPUT/OUTPUT SECTION:
            --Holds the value of System Handler Control and State Register
            VAR SCB->SHCSR,         init = 0x1,     ev = 0x10001

        COMMENT OUTPUT SECTION:
            --Holds the value of MPU Control Register
            VAR MPU->CTRL,          init = 0x2,     ev = 0x1
        
        -- Stub Calls :
        SIMUL
        
            --No Stubs
        
        END SIMUL

        -- Calling the Unit Under Test :             
        #HalMpuEnable(mpu_control);
        
        END ELEMENT

END TEST -- TEST 3

END SERVICE -- HalMpuEnable

