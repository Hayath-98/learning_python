HEADER hdudispfoscpu,Source Code Ver : 1.1 , TestScript Ver :1.2
--------------------------------------------------------------------------------
-- Author Name         : Santosh Mithari
--
-- File Name           : hdudispfoscpu.ptu
--
-- Test Creation Date  : 10.10.2017
--
-- Tested Functions    : OsTaskCreate

-- Version History     :
--
-- TEST-VERSION         TEST-DATE         TESTER NAME           MODIFICATIONS
-- ------------        -----------        -----------           -------------
--    1.1                10.10.2017      Santosh Mithari       Created the PTU file.
--    1.2                10.11.2017      Santosh Mithari       Updated as per #PR100171
--------------------------------------------------------------------------------
--
-- TESTED FILE INCLUDE DIRECTIVES
--
--------------------------------------------------------------------------------

#/*============================================================================*/
#/* Module specific includes*/
#/*============================================================================*/

##include "hdudispfoscpu.h"              
##include "hdudispfucos.h"               
##include "hdulibbasictypes.h"           

##define FPCCR           0x80000000UL    
##define FPSCR           0x00000000UL    
##define XPSR            0x01000000UL    
##define R14_LR          0xFFFFFFFEUL    
##define NO_OF_REM_REG   24U             

--------------------------------------------------------------------------------
--
-- TESTED FILE DECLARATIONS 
--
--------------------------------------------------------------------------------

-- Declarations of the global variables of the tested file
	
	#T_OS_TCB *Os_tcb_prio_tbl[64]; 
	#T_BOOLEAN Os_running; 

-- Declarations of the temporary variable

	--Variables created to access the pointer variables.
	#T_UINT8 PTU_p_data;
	#T_UINT8 *PTU_pt_os[100];
	
	-- Dummy function is created to assign address to function pointer 'p_task'
	#void DummyFunction(void *d_ptr);
	
	--Temporary variable to hold the value of the pointer in the 'OsTcbInit' and 'DummyFunction'.
	#T_UINT32 *PTU_stk,*PTU_d_ptr;
	
	--Temporary variable used to assign address to TCB priority table 'Os_tcb_prio_tbl' 
	#T_OS_TCB PTU_Os_tcb_prio_tbl;
	
	--Temporary variable used to handle the pointer member of the structure T_OS_TCB.
	#void *PTU_OSTCBStkPtr;
	#T_OS_EVENT *PTU_OSTCBEventPtr;
	#T_UINT32 *PTU_OSTCBNext;
	#T_UINT32 *PTU_OSTCBPrev;	
--------------------------------------------------------------------------------

BEGIN

	COMMENT Author Name         : 	Santosh Mithari 
	COMMENT
	COMMENT File Name           : 	hdudispfoscpu.ptu
	COMMENT 
	COMMENT Tested Functions    :  	OsTaskCreate
	COMMENT
	COMMENT 
	COMMENT Assumptions and Constraints
	COMMENT <AC>
	COMMENT 
	COMMENT Assumption(s): 
	COMMENT None
	COMMENT
	COMMENT Constraint(s):
	COMMENT 
	COMMENT
	COMMENT </AC>

	COMMENT Equivalence Class Description
	COMMENT <ECD>
	COMMENT
	COMMENT Valid Class(es)
	COMMENT Class 1
	COMMENT In function 'OsTaskCreate', 'SaveStatusReg' stub is called.
	COMMENT
	COMMENT Class 2
	COMMENT In function 'OsTaskCreate', 'RestoreStatusReg' stub is called.
	COMMENT 
	COMMENT Class 3
	COMMENT In function 'OsTaskCreate', 'Os_tcb_prio_tbl[u8_prio]' is equal to ZERO.
	COMMENT
	COMMENT Class 4
	COMMENT In function 'OsTaskCreate', 'Os_tcb_prio_tbl[u8_prio]' is not equal to ZERO.
	COMMENT
	COMMENT Class 5
	COMMENT In function 'OsTaskCreate', 'OsTcbInit' returns 'OS_NO_ERR'.
	COMMENT
	COMMENT Class 6
	COMMENT In function 'OsTaskCreate', 'OsTcbInit' returns other than 'OS_NO_ERR'.
	COMMENT
	COMMENT Class 7
	COMMENT In function 'OsTaskCreate', 'OsSched' stub is called.
	COMMENT
	COMMENT Class 8
	COMMENT In function 'OsTaskCreate', 'Os_running' is not equal to TRUE
	COMMENT
	COMMENT Class 9
	COMMENT In function 'OsTaskCreate', 'Os_running' is not equal to TRUE
	COMMENT
	COMMENT Invalid Class(es)
	COMMENT
	COMMENT Class 10
	COMMENT In function 'OsTaskCreate', 'p_task' parameter is passed with invalid reference.
	COMMENT
	COMMENT Class 11
	COMMENT In function 'OsTaskCreate', 'p_data' parameter is passed with invalid reference.
	COMMENT
	COMMENT Class 12
	COMMENT In function 'OsTaskCreate', 'pt_os' parameter is passed with invalid reference.
	COMMENT
	COMMENT </ECD>

--------------------------------------------------------------------------------
--
-- STUB DECLARATIONS OF THE TESTED OR INTEGRATED UNITS
--
--------------------------------------------------------------------------------

SIMUL

	DEFINE STUB hdudispfoscpu_c
		
		#void OsSched(void);
		
		--Parameter 'stk' is made _no since local address is passed.
		#T_UBYTE OsTcbInit(T_UBYTE _in prio, void _no *stk)
		#{
		#	PTU_stk	= stk;
		#}
		
		#void RestoreStatusReg(T_UINT32 _in U32_critical_sr); 

		#T_UINT32 SaveStatusReg(void);     	
		
		
		--Parameter 'stk' is made _no since local address is passed.
		#void DummyFunction(void *d_ptr)
		#{
		#	PTU_d_ptr = d_ptr;
		#}
    	
	END DEFINE

ELSE_SIMUL

    --No action defined as of now if the module is not simulated

END SIMUL

--------------------------------------------------------------------------------
--
-- ENVIRONMENTS DECLARATIONS
--
--------------------------------------------------------------------------------
--IF HOST

--No special things that have to be done on the host to run the test.

--ELSE

--No action defined for the target execution as of now

--END IF
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
-- TESTED FILE ENVIRONNEMENT
--------------------------------------------------------------------------------

-- Environment of the file hdudispfoscpu.c
ENVIRONMENT ENV_hdudispfoscpu_c

  VAR U32_critical_sr,		init = 0,		ev = init
  
END ENVIRONMENT -- ENV_hdudispfoscpu_c

USE ENV_hdudispfoscpu_c
	
--------------------------------------------------------------------------------
--
-- SERVICES DECLARATIONS
--
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
-- Declaration of the service OsTaskCreate
--------------------------------------------------------------------------------
SERVICE OsTaskCreate
SERVICE_TYPE extern

    -- Tested service parameters declarations
    #void ( *p_task)(void* d_ptr);
    #void *p_data;
    #void *pt_os;
    #T_UINT8 u8_prio;
    -- By function returned type declaration
    #T_UINT8 ret_OsTaskCreate;

    ENVIRONMENT ENV_OsTaskCreate
    VAR p_task,						init = NIL,					ev = init
    VAR p_data,						init = 0,					ev = init
    VAR pt_os,						init = 0,					ev = init
    VAR u8_prio,					init = 0,					ev = init
    VAR ret_OsTaskCreate,			init = 0,					ev = init
    
    VAR U32_critical_sr,			init = 0,					ev = init
   
    STRUCTURE PTU_Os_tcb_prio_tbl,			init ={	 OSTCBStkPtr =>PTU_OSTCBEventPtr,
    &												   OSTCBStat => 0,
    &												   OSTCBPrio => 60, 
    &												   OSTCBDly  => 0, 
    &												   OSTCBX    => 6,
    &												   OSTCBY    => 1,  
    &												   OSTCBBitX => 00,  
    &												   OSTCBBitY => 00,  
    &												   OSTCBEventPtr => PTU_OSTCBEventPtr,
    &												   OSTCBNext  => NULL,
    &												   OSTCBPrev =>NULL },     ev =init
    
    END ENVIRONMENT -- ENV_OsTaskCreate
    USE ENV_OsTaskCreate

TEST 1
FAMILY nominal
 
 	COMMENT Test Description
    COMMENT <TD> 
    COMMENT [hdudispfoscpu-OsTaskCreate-DB-LLR-001]
    COMMENT The function returns with OS_PRIO_EXIST if the task priority to be created already exists
    COMMENT or return with OS_NO_ERR on successful creation of the task or return with OS_NO_MORE_TCB 
    COMMENT when there is no free TCB to initialize after creation of the task.
    COMMENT Equivalence Class None
    COMMENT
    COMMENT [hdudispfoscpu-OsTaskCreate-DB-LLR-002]
    COMMENT The function sets the return value of "SaveStatusReg" to U32_critical_sr. "SaveStatusReg"
    COMMENT is called to disable interrupts using OS_ENTER_CRITICAL before checking when the task to be 
    COMMENT created already exists.
    COMMENT Equivalence Class 1
    COMMENT
    COMMENT [hdudispfoscpu-OsTaskCreate-DB-LLR-003]
    COMMENT The function perform the following operations when the requested task priority 'u8_prio'
    COMMENT is available in the TCB priority table 'Os_tcb_prio_tbl' 
	COMMENT a) RestoreStatusReg function is called to enable the interrupt using OS_EXIT_CRITICAL
	COMMENT b) Set local stack variable to top of stack pointer (pt_os)
	COMMENT c) Set (Stack top - 1) with FPCCR.
	COMMENT d) Set (Stack top - 2) with FPSCR. 
	COMMENT e) Set (Stack top - 19) with XPSR.
	COMMENT f) Set (Stack top - 20) with 'p_task'.
	COMMENT g) Set (Stack top - 21) with R14_LR.
	COMMENT h) Set (Stack top - 26) with 'p_data'. 
	COMMENT i) Decrement the stack pointer stack top further by size (24) required to save the remaining
	COMMENT 	registers on process stack. 
	COMMENT j) Call function OsTcbInit with the parameters u8_prio and reference to OS task stack to 
	COMMENT 	initialize the TCB. 
	COMMENT k) Call function OsSched to find highest priority task when the call to function OsTcbInit 
	COMMENT    returned OS_NO_ERR and flag indicating that Kernel is running (Os_running) is TRUE otherwise do nothing.
    COMMENT Equivalence Class 3,5,7,8.
    COMMENT </TD> 
 
     ELEMENT
 
 		COMMENT INPUT SECTION:
 			
 			--function pointer to the task
 			VAR p_task,				init = &DummyFunction,						ev = init
 		
 			--temporary variable initialized to zero
 			VAR PTU_p_data,			init = 0,     			   					ev = init
 			
 			--pointer to task parameters
			VAR p_data,				init = (T_UINT32 *)&PTU_p_data,				ev = init
			
			--pointer to top of stack
			VAR pt_os,				init = (T_UINT32 *)&PTU_pt_os[100],			ev = init
    
    		--Formal parameter acts as Index for global variable 'Os_tcb_prio_tbl' ranges from [0,63]
    		VAR u8_prio,			init = 63,									ev = init
    		
    		--Global variable of boolean datatype
    		VAR Os_running,			init = TRUE,								ev = init	
    		
    		--Global Array with index 'u8_prio' range from [0,63]
    		ARRAY Os_tcb_prio_tbl, init = { 0..62 =>&PTU_Os_tcb_prio_tbl,others => NULL }, ev = init
 		
        COMMENT OUTPUT SECTION:
 
 			--Verifies return value of the function 'OsTaskCreate'
 			VAR ret_OsTaskCreate,	init = 0,						ev = OS_NO_ERR
 
         COMMENT INPUT/OUTPUT SECTION:
            
            --Temporary variable to verify stack.
 			ARRAY PTU_pt_os,		init = { others => 2 },			ev = {0..73=>2,74=>(T_UINT32)&PTU_p_data,75..78=>2,79=>(T_UINT32)R14_LR,80=>(T_UINT32)p_task,
        		&													81=>(T_UINT32)XPSR,82..97=>2,98=>(T_UINT32)FPSCR,99=>(T_UINT32)FPCCR}
        	
        	--temporary variable to verify	parameter 'stk' of stub OsTcbInit
       		VAR PTU_stk,			init = 0x0,						ev = &PTU_pt_os[50]
       		
       		--Global variable holds status register value.
       		VAR U32_critical_sr,		init = 63,						ev = init
         
         -- Stub Calls:
         SIMUL
            
            --To disable interrupts.
 			STUB SaveStatusReg() U32_critical_sr
 			
 			--To enable the interrupt using 
 			STUB RestoreStatusReg(U32_critical_sr)
 			
 			--To Get and initialize a TCB
 			STUB OsTcbInit(63) OS_NO_ERR
 			
 			--TO Find highest priority task if multitasking has started
 			STUB OsSched()
     
         END SIMUL
 
         -- Calling the Unit Under Test :
      	#ret_OsTaskCreate = OsTaskCreate(p_task, p_data, pt_os, u8_prio);
 
     END ELEMENT
 
END TEST -- TEST 1   

 TEST 2
 FAMILY nominal
 
 	COMMENT Test Description
     COMMENT <TD> 
     COMMENT
     COMMENT [hdudispfoscpu-OsTaskCreate-DB-LLR-004]
     COMMENT The function does the following 
	 COMMENT a) set the return value of "RestoreStatusReg" to U32_critical_sr. "RestoreStatusReg" is called
	 COMMENT to enable the interrupt using OS_EXIT_CRITICAL macro when the task to be created already exists.
	 COMMENT b) return with OS_PRIO_EXIST when the task priority to be created already exist.
     COMMENT Equivalence Class 2,4
     COMMENT
     COMMENT </TD> 
 
     ELEMENT
 
 		COMMENT INPUT SECTION:
 			
 			--function pointer to the task
 			VAR p_task,					init = &DummyFunction,			ev = init
 			
 			--temporary variable initialized to zero
 			VAR PTU_p_data,			init = 0,     			   			ev = init
 			
 			--pointer to task parameters
			VAR p_data,					init = &PTU_p_data,				ev = init
			
			--Temporary variable to verify stack.
			ARRAY PTU_pt_os,			init = {others => 0x10},		ev = {others => 0x10}
			
			--pointer to top of stack
			VAR pt_os,					init = &PTU_pt_os,				ev = init
    
    		--Formal parameter acts as Index for global variable 'Os_tcb_prio_tbl' ranges from [0,63]
    		VAR u8_prio,				init = 1,						ev = init
 			
 			--Global Array with index 'u8_prio' range from [0,63]
 			VAR Os_tcb_prio_tbl[1],		init =0x2,						ev = init
 			
 		
        COMMENT OUTPUT SECTION:
 
 			--Verifies return value of the function 'OsTaskCreate'
 			VAR ret_OsTaskCreate,		init = 0,					ev = OS_PRIO_EXIST
 
         COMMENT INPUT/OUTPUT SECTION:
             
            --Global variable holds status register value.
 			VAR U32_critical_sr,		init = 63,						ev = init
         
         -- Stub Calls:
         SIMUL
            
            --To disable interrupts.
 			STUB SaveStatusReg() U32_critical_sr
 			
 			--To enable the interrupt using 
 			STUB RestoreStatusReg(U32_critical_sr)
 			
     
         END SIMUL
 
         -- Calling the Unit Under Test :
      	#ret_OsTaskCreate = OsTaskCreate(p_task, p_data, pt_os, u8_prio);
 
     END ELEMENT
 
END TEST -- TEST 2

 TEST 3
 FAMILY nominal
 
 	COMMENT Test Description
    COMMENT <TD> 
    COMMENT [hdudispfoscpu-OsTaskCreate-DB-LLR-003]
    COMMENT The function perform the following operations when the requested task priority 'u8_prio'
    COMMENT is available in the TCB priority table 'Os_tcb_prio_tbl' 
	COMMENT a) RestoreStatusReg function is called to enable the interrupt using OS_EXIT_CRITICAL
	COMMENT b) Set local stack variable to top of stack pointer (pt_os)
	COMMENT c) Set (Stack top - 1) with FPCCR.
	COMMENT d) Set (Stack top - 2) with FPSCR. 
	COMMENT e) Set (Stack top - 19) with XPSR.
	COMMENT f) Set (Stack top - 20) with 'p_task'.
	COMMENT g) Set (Stack top - 21) with R14_LR.
	COMMENT h) Set (Stack top - 26) with 'p_data'. 
	COMMENT i) Decrement the stack pointer stack top further by size (24) required to save the remaining
	COMMENT 	registers on process stack. 
	COMMENT j) Call function OsTcbInit with the parameters u8_prio and reference to OS task stack to 
	COMMENT 	initialize the TCB. 
	COMMENT k) does nothing when the call to function OsTcbInit returned OS_NO_MORE_TCB    
    COMMENT Equivalence Class 3,6.
    COMMENT </TD> 
 
     ELEMENT
 
 		COMMENT INPUT SECTION:
 			
 			--function pointer to the task
 			VAR p_task,				init = &DummyFunction,						ev = init
 			
 			--pointer to task parameters
			VAR p_data,				init = (T_UINT32 *)&PTU_p_data,				ev = init
			
			VAR PTU_p_data,			init = 0,     			   					ev = init
			
			--pointer to top of stack
			VAR pt_os,				init = (T_UINT32 *)&PTU_pt_os[100],			ev = init
    
    		--Formal parameter acts as Index for global variable 'Os_tcb_prio_tbl' ranges from [0,63]
    		VAR u8_prio,			init = 63,									ev = init
    		
    		--Global Array with index 'u8_prio' range from [0,63]
    		ARRAY Os_tcb_prio_tbl, init = { 0..62 =>&PTU_Os_tcb_prio_tbl,others => NULL }, ev = init
 		
        COMMENT OUTPUT SECTION:
 			
 			--Verifies return value of the function 'OsTaskCreate'
 			VAR ret_OsTaskCreate,	init = 0,						ev = OS_NO_MORE_TCB
 
         COMMENT INPUT/OUTPUT SECTION:
             
            --Temporary variable to verify stack.
 			ARRAY PTU_pt_os,		init = { others => 2 },			ev = {0..73=>2,74=>(T_UINT32)&PTU_p_data,75..78=>2,79=>(T_UINT32)R14_LR,80=>(T_UINT32)p_task,
        		&													81=>(T_UINT32)XPSR,82..97=>2,98=>(T_UINT32)FPSCR,99=>(T_UINT32)FPCCR}
        	
        	--temporary variable to verify	parameter 'stk' of stub OsTcbInit
       		VAR PTU_stk,			init = 0x0,						ev = &PTU_pt_os[50]
       		
       		--Global variable holds status register value.
       		VAR U32_critical_sr,		init = 63,						ev = init
         
         -- Stub Calls:
         SIMUL
             
            --To disable interrupts.
 			STUB SaveStatusReg() U32_critical_sr
 			
 			--To enable the interrupt using 
 			STUB RestoreStatusReg(U32_critical_sr)
 			
 			--To Get and initialize a TCB
 			STUB OsTcbInit(63) OS_NO_MORE_TCB
 			
     
         END SIMUL
 
         -- Calling the Unit Under Test :
      	#ret_OsTaskCreate = OsTaskCreate(p_task, p_data, pt_os, u8_prio);
 
     END ELEMENT
 
END TEST -- TEST 3

 TEST 4
 FAMILY nominal
 
 	COMMENT Test Description
     COMMENT <TD> 
    COMMENT [hdudispfoscpu-OsTaskCreate-DB-LLR-003]
    COMMENT The function perform the following operations when the requested task priority 'u8_prio'
    COMMENT is available in the TCB priority table 'Os_tcb_prio_tbl' 
	COMMENT a) RestoreStatusReg function is called to enable the interrupt using OS_EXIT_CRITICAL
	COMMENT b) Set local stack variable to top of stack pointer (pt_os)
	COMMENT c) Set (Stack top - 1) with FPCCR.
	COMMENT d) Set (Stack top - 2) with FPSCR. 
	COMMENT e) Set (Stack top - 19) with XPSR.
	COMMENT f) Set (Stack top - 20) with 'p_task'.
	COMMENT g) Set (Stack top - 21) with R14_LR.
	COMMENT h) Set (Stack top - 26) with 'p_data'. 
	COMMENT i) Decrement the stack pointer stack top further by size (24) required to save the remaining
	COMMENT 	registers on process stack. 
	COMMENT j) Call function OsTcbInit with the parameters u8_prio and reference to OS task stack to 
	COMMENT 	initialize the TCB. 
	COMMENT k) Does nothig when the call to function OsTcbInit 
	COMMENT    returned OS_NO_ERR and flag indicating that Kernel is running (Os_running) is Fasse.
    COMMENT Equivalence Class 3,5,9.
     COMMENT </TD> 
 
     ELEMENT
 
 		COMMENT INPUT SECTION:
 			
 			--function pointer to the task
 			VAR p_task,				init = &DummyFunction,						ev = init
 			
 			--pointer to task parameters
			VAR p_data,				init = (T_UINT32 *)&PTU_p_data,				ev = init
			
			VAR PTU_p_data,			init = 0,     			   					ev = init
			
			--pointer to top of stack
			VAR pt_os,				init = (T_UINT32 *)&PTU_pt_os[100],			ev = init
    
    		--Formal parameter acts as Index for global variable 'Os_tcb_prio_tbl' ranges from [0,63]
    		VAR u8_prio,			init = 63,									ev = init
    		
    		--Global variable of boolean datatype
    		VAR Os_running,			init = FALSE,								ev = init	
    		
    		--Global Array with index 'u8_prio' range from [0,63]
    		ARRAY Os_tcb_prio_tbl, init = { 0..62 =>&PTU_Os_tcb_prio_tbl,others => NULL }, ev = init
 		
        COMMENT OUTPUT SECTION:
 
 			--Verifies return value of the function 'OsTaskCreate'
 			VAR ret_OsTaskCreate,	init = 0,						ev = OS_NO_ERR
 
         COMMENT INPUT/OUTPUT SECTION:
            
            --Temporary variable to verify stack. 
 			ARRAY PTU_pt_os,		init = { others => 2 },			ev = {0..73=>2,74=>(T_UINT32)&PTU_p_data,75..78=>2,79=>(T_UINT32)R14_LR,80=>(T_UINT32)p_task,
        		&													81=>(T_UINT32)XPSR,82..97=>2,98=>(T_UINT32)FPSCR,99=>(T_UINT32)FPCCR}
        	--temporary variable to verify	parameter 'stk' of stub OsTcbInit	
       		VAR PTU_stk,			init = 0x0,						ev = &PTU_pt_os[50]
       		
       		--Global variable holds status register value.
       		VAR U32_critical_sr,		init = 63,						ev = init
         
         -- Stub Calls:
         SIMUL
             
            --To disable interrupts.
 			STUB SaveStatusReg() U32_critical_sr
 			
 			--To enable the interrupt using 
 			STUB RestoreStatusReg(U32_critical_sr)
 			
 			--To Get and initialize a TCB
 			STUB OsTcbInit(63) OS_NO_ERR
     
         END SIMUL
 
         -- Calling the Unit Under Test :
      	#ret_OsTaskCreate = OsTaskCreate(p_task, p_data, pt_os, u8_prio);
 
     END ELEMENT
 
END TEST -- TEST 4

-- TEST 5
-- FAMILY robustness
-- 
-- 	COMMENT Test Description
--     COMMENT <TD> 
--     COMMENT [hdudispfoscpu-OsTaskCreate-DB-LLR-003]
--     COMMENT The function perform the following operations when the requested task priority 'u8_prio'
--     COMMENT is available in the TCB priority table 'Os_tcb_prio_tbl' 
--     COMMENT a) RestoreStatusReg function is called to enable the interrupt using OS_EXIT_CRITICAL
--     COMMENT b) Set local stack variable to top of stack pointer (pt_os).(Null value is passed to 'pt_os'.to test robust case)
--     COMMENT c) Set (Stack top - 1) with FPCCR.
--     COMMENT d) Set (Stack top - 2) with FPSCR. 
--     COMMENT e) Set (Stack top - 19) with XPSR.
--     COMMENT f) Set (Stack top - 20) with 'p_task'.  
--     COMMENT g) Set (Stack top - 21) with R14_LR.
--     COMMENT h) Set (Stack top - 26) with 'p_data'. 
--     COMMENT i) Decrement the stack pointer stack top further by size (24) required to save the remaining
--     COMMENT 	registers on process stack. 
--	 COMMENT j) Call function OsTcbInit with the parameters u8_prio and reference to OS task stack to 
--	 COMMENT 	initialize the TCB. 
--	 COMMENT k) Call function OsSched to find highest priority task when the call to function OsTcbInit 
--     COMMENT    returned OS_NO_ERR and flag indicating that Kernel is running (Os_running) is TRUE otherwise do nothing.Equivalence Class 2,4,
--     COMMENT Equivalence Class 	12
--     COMMENT
--     COMMENT </TD> 
-- 
--     ELEMENT
-- 
-- 		COMMENT INPUT SECTION:
-- 			
-- 			--function pointer to the task
-- 			VAR p_task,					init = &DummyFunction,			ev = init
-- 			
-- 			--pointer to task parameters
--			VAR p_data,					init = &PTU_p_data,				ev = init
--    
--    		--Formal parameter acts as Index for global variable 'Os_tcb_prio_tbl' ranges from [0,63]
--    		VAR u8_prio,				init = 1,						ev = init
-- 			
-- 			--Global Array with index 'u8_prio' range from [0,63]
-- 			VAR Os_tcb_prio_tbl[1],		init =NULL,						ev = init
-- 			
-- 		
--        COMMENT OUTPUT SECTION:
-- 
-- 			--Verifies return value of the function 'OsTaskCreate'
-- 			VAR ret_OsTaskCreate,		init = 0,					ev = OS_PRIO_EXIST
-- 
--         COMMENT INPUT/OUTPUT SECTION:
--             
--            --Global variable holds status register value.
-- 			VAR U32_critical_sr,		init = 63,						ev = init
--         
--         -- Stub Calls:
--         SIMUL
--             
--            --To disable interrupts.
-- 			STUB SaveStatusReg() U32_critical_sr
-- 			
-- 			--To enable the interrupt using 
-- 			STUB RestoreStatusReg(U32_critical_sr)
-- 			
--     
--         END SIMUL
-- 
--         -- Calling the Unit Under Test :
--      	#ret_OsTaskCreate = OsTaskCreate(p_task, p_data, NULL, u8_prio);
-- 
--     END ELEMENT
-- 
--END TEST -- TEST 5

 TEST 6
 FAMILY robustness
 
 	COMMENT Test Description
     COMMENT <TD> 
     COMMENT [hdudispfoscpu-OsTaskCreate-DB-LLR-003]
     COMMENT The function perform the following operations when the requested task priority 'u8_prio'
     COMMENT is available in the TCB priority table 'Os_tcb_prio_tbl' 
     COMMENT a) RestoreStatusReg function is called to enable the interrupt using OS_EXIT_CRITICAL
     COMMENT b) Set local stack variable to top of stack pointer (pt_os)
     COMMENT c) Set (Stack top - 1) with FPCCR.
     COMMENT d) Set (Stack top - 2) with FPSCR. 
     COMMENT e) Set (Stack top - 19) with XPSR.
     COMMENT f) Set (Stack top - 20) with 'p_task'.  
     COMMENT g) Set (Stack top - 21) with R14_LR.
     COMMENT h) Set (Stack top - 26) with 'p_data'. (Null value is passed to 'p_data'.to test robust case)
     COMMENT i) Decrement the stack pointer stack top further by size (24) required to save the remaining
     COMMENT 	registers on process stack. 
	 COMMENT j) Call function OsTcbInit with the parameters u8_prio and reference to OS task stack to 
	 COMMENT 	initialize the TCB. 
	 COMMENT k) Call function OsSched to find highest priority task when the call to function OsTcbInit 
     COMMENT    returned OS_NO_ERR and flag indicating that Kernel is running (Os_running) is TRUE otherwise do nothing.Equivalence Class 2,4,
     COMMENT Equivalence Class 	11
     COMMENT
     COMMENT </TD> 
 
     ELEMENT
 
 		COMMENT INPUT SECTION:
 			
 			--function pointer to the task
 			VAR p_task,					init = &DummyFunction,			ev = init
			
			--pointer to top of stack
			VAR pt_os,					init = &PTU_pt_os,				ev = init
    
    		--Formal parameter acts as Index for global variable 'Os_tcb_prio_tbl' ranges from [0,63]
    		VAR u8_prio,				init = 1,						ev = init
 			
 			--Global Array with index 'u8_prio' range from [0,63]
 			VAR Os_tcb_prio_tbl[1],		init = NULL,						ev = init
 			
 			
        COMMENT OUTPUT SECTION:
 			
 			--Verifies return value of the function 'OsTaskCreate'
 			VAR ret_OsTaskCreate,		init = 0,					ev = OS_NO_ERR
 
         COMMENT INPUT/OUTPUT SECTION:
             
            --Global variable holds status register value.
 			VAR U32_critical_sr,		init = 63,						ev = init
 			   
         -- Stub Calls:
         SIMUL
            
            --To disable interrupts.
 			STUB SaveStatusReg() U32_critical_sr
 			
 			--To enable the interrupt using 
 			STUB RestoreStatusReg(U32_critical_sr)
 			
 			--To Get and initialize a TCB
 			STUB OsTcbInit(u8_prio) OS_NO_ERR
     
         END SIMUL
 
         -- Calling the Unit Under Test :
      	#ret_OsTaskCreate = OsTaskCreate(p_task, NULL, pt_os, u8_prio);
 
     END ELEMENT
 
END TEST -- TEST 6

 TEST 7
 FAMILY robustness
 
 	COMMENT Test Description
     COMMENT <TD> 
     COMMENT [hdudispfoscpu-OsTaskCreate-DB-LLR-003]
     COMMENT The function perform the following operations when the requested task priority 'u8_prio'
     COMMENT is available in the TCB priority table 'Os_tcb_prio_tbl' 
     COMMENT a) RestoreStatusReg function is called to enable the interrupt using OS_EXIT_CRITICAL
     COMMENT b) Set local stack variable to top of stack pointer (pt_os)
     COMMENT c) Set (Stack top - 1) with FPCCR.
     COMMENT d) Set (Stack top - 2) with FPSCR. 
     COMMENT e) Set (Stack top - 19) with XPSR.
     COMMENT f) Set (Stack top - 20) with 'p_task'. (Null value is passed to 'p_task'.to test robust case)
     COMMENT g) Set (Stack top - 21) with R14_LR.
     COMMENT h) Set (Stack top - 26) with 'p_data'. 
     COMMENT i) Decrement the stack pointer stack top further by size (24) required to save the remaining
     COMMENT 	registers on process stack. 
	 COMMENT j) Call function OsTcbInit with the parameters u8_prio and reference to OS task stack to 
	 COMMENT 	initialize the TCB. 
	 COMMENT k) Call function OsSched to find highest priority task when the call to function OsTcbInit 
     COMMENT    returned OS_NO_ERR and flag indicating that Kernel is running (Os_running) is TRUE otherwise do nothing.Equivalence Class 2,4,
     COMMENT Equivalence Class 10	
     COMMENT </TD> 
 
     ELEMENT
 
 		COMMENT INPUT SECTION:
 			
 			--pointer to task parameters
			VAR p_data,					init = &PTU_p_data,				ev = init
			
			--pointer to top of stack
			VAR pt_os,					init = &PTU_pt_os,				ev = init
    
    		--Formal parameter acts as Index for global variable 'Os_tcb_prio_tbl' ranges from [0,63]
    		VAR u8_prio,				init = 1,						ev = init
 			
 			--Global Array with index 'u8_prio' range from [0,63]
 			VAR Os_tcb_prio_tbl[1],		init = NULL,						ev = init
 					
        COMMENT OUTPUT SECTION:
 
 			--Verifies return value of the function 'OsTaskCreate'
 			VAR ret_OsTaskCreate,		init = 0,					ev = OS_NO_ERR
 
         COMMENT INPUT/OUTPUT SECTION:
             
            --Global variable holds status register value.
 			VAR U32_critical_sr,		init = 63,						ev = init
         
         -- Stub Calls:
         SIMUL
             
            --To disable interrupts.
 			STUB SaveStatusReg() U32_critical_sr
 			
 			--To enable the interrupt using 
 			STUB RestoreStatusReg(U32_critical_sr)
 			
 			--To Get and initialize a TCB
			STUB OsTcbInit(u8_prio) OS_NO_ERR
			
         END SIMUL
 
         -- Calling the Unit Under Test :
      	#ret_OsTaskCreate = OsTaskCreate(NULL, p_data, pt_os, u8_prio);
 
     END ELEMENT
 
END TEST -- TEST 7

END SERVICE -- OsTaskCreate

