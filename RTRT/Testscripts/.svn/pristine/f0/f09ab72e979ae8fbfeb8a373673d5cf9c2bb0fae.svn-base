HEADER hdudispfpbs,Source Code Ver : 1.5 ,TestScript Ver : 1.4 
--------------------------------------------------------------------------------
-- Author Name         : Soumya Patil
--                       Manu K M
--
-- File Name           : hdudispfpbs_2.ptu
--
-- Test Creation Date  : 09.10.2017 
--
-- Tested Functions    : HwPbsGet
--                       EncoderDriverL          
--                       EncoderDriverR
--                       PbsDriver 
--
-- Version History     :
--
--  TEST-VERSION           TEST-DATE      TESTER NAME        MODIFICATIONS
--  ------------           ---------      -----------        -------------
--    1.1                  09.10.2017     Soumya Patil       Created the PTU file.
--                                        Manu K M
--    1.2                  10.11.2017     Soumya Patil       Updated as per #PR100171
--                                        Manu K M
--    1.3                  14.11.2017     Soumya Patil       Updated as per #PR100171
--                                        Manu K M
--    1.4				   29.07.2020	  Harshitha R		 Updated as per #PR100267

--   
--------------------------------------------------------------------------------
--
-- TESTED FILE INCLUDE DIRECTIVES 
--
--------------------------------------------------------------------------------

##include "hdudispfpbs.h"       
##include "hdudispfpolygon1.h" 
##include "hdudispfstandard.h"   
##include "hdudispftimer.h"     
##include "hdulibstm32f7xxhalrccex.h" 
##include "hdudispfucos.h"       
##include "hdulibstm32f7xxhalgpio.h" 
##include "hdulibstm32f7xxhal.h" 
##include "hdulibstm32hallegacy.h" 
##include "hdulibbasictypes.h" 
##include "hdudispfgrapp.h" 
--------------------------------------------------------------------------------
--
-- TESTED FILE DECLARATIONS 
--
--------------------------------------------------------------------------------

-- Declarations of the global variables of the tested file

# T_UINT32 U32_critical_sr;
# T_UINT8 Splash_b1_press;
# T_UINT8 Splash_done;
    
-- Declarations of the temporary variable    
--Temporary variable to hold gpio_init_struct
#T_GPIO_INIT PTU_gpio_init_struct, PTU_gpio_init_struct2;

--Temporary variable to hold timer
#T_TIMER PTU_timer, PTU_timer_in = 0;

--Temporary variable for condition check 
#T_UINT8 PTU_count;
--------------------------------------------------------------------------------

BEGIN

    COMMENT Author Names     : Soumya Patil,
    COMMENT                    Manu K M
    COMMENT
    COMMENT File Name        : hdudispfpbs_2.ptu
    COMMENT
    COMMENT Tested Functions : HwPbsGet
    COMMENT                    EncoderDriverL 
    COMMENT                    EncoderDriverR
    COMMENT                    PbsDriver 
    COMMENT
    COMMENT Assumptions and Constraints
    COMMENT <AC>
    COMMENT Assumption(s):
    COMMENT None
    COMMENT 
    COMMENT Constraint(s):
    COMMENT 1. Header file 'hdulibstm32f4xx.h' is modified for testing purpose.
    COMMENT /*Commented for testing purpose*/
    COMMENT /*#define GPIOA               ((T_GPIO *) GPIOA_BASE)*/
    COMMENT /* Modified for stubbing hardware address */
    COMMENT T_GPIO PTU_GPIOA;
    COMMENT #define GPIOA               ((T_GPIO *) &PTU_GPIOA)
    COMMENT
    COMMENT /*Commented for testing purpose*/
    COMMENT /*#define GPIOB               ((T_GPIO *) GPIOB_BASE)*/
    COMMENT /* Modified for stubbing hardware address */
    COMMENT T_GPIO PTU_GPIOB;
    COMMENT #define GPIOB               ((T_GPIO *) &PTU_GPIOB)
    COMMENT
    COMMENT /*Commented for testing purpose*/
    COMMENT /*#define GPIOC               ((T_GPIO *) GPIOC_BASE)*/
    COMMENT /* Modified for stubbing hardware address */
    COMMENT T_GPIO PTU_GPIOC;
    COMMENT #define GPIOC               ((T_GPIO *) &PTU_GPIOC)
    COMMENT 
    COMMENT /*Commented for testing purpose*/
    COMMENT /*#define RCC                 ((T_RCC *) RCC_BASE)*/
    COMMENT /* Modified for stubbing hardware address */
    COMMENT T_RCC PTU_RCC;
    COMMENT 
    COMMENT 2. Due to a static variable dependency test script is split into hdudispfpbs_1, hdudispfpbs_2 and hdudispfpbs_3
    COMMENT
    COMMENT 4.In Source file "hdudispfpbs.c" for LLRs hdudispfpbs-BspSwitchesInit-DB-LLR-001, 
    COMMENT   hdudispfpbs-BspSwitchesInit-DB-LLR-002, hdudispfpbs-PbsInit-DB-LLR-001, hdudispfpbs-PbsInit-DB-LLR-002
    COMMENT   and hdudispfpbs-PbsInit-DB-LLR-003 coverage cannot be 
    COMMENT   obtained for do while loop two or more times and TRUE condition. 
    COMMENT   Since while(0) is mentioned which loops for only one time in the below snippets:
    COMMENT   a. #define __HAL_RCC_GPIOB_CLK_ENABLE()\
    COMMENT                              do { \
    COMMENT                                  __IO T_UINT32 tmpreg; \
    COMMENT                                 SET_BIT(RCC->AHB1ENR, RCC_AHB1ENR_GPIOBEN);\
    COMMENT                                 /* Delay after an RCC peripheral clock enabling */ \
    COMMENT                                tmpreg = READ_BIT(RCC->AHB1ENR, RCC_AHB1ENR_GPIOBEN);\
    COMMENT                                 UNUSED(tmpreg); \
    COMMENT                               } while(0)
    COMMENT      
    COMMENT  b.  #define __HAL_RCC_GPIOC_CLK_ENABLE() \
    COMMENT                             do { \
    COMMENT                              __IO T_UINT32 tmpreg; \
    COMMENT                              SET_BIT(RCC->AHB1ENR, RCC_AHB1ENR_GPIOCEN);\
    COMMENT                              /* Delay after an RCC peripheral clock enabling */ \
    COMMENT                              tmpreg = READ_BIT(RCC->AHB1ENR, RCC_AHB1ENR_GPIOCEN);\
    COMMENT                              UNUSED(tmpreg); \
    COMMENT                             } while(0)
    COMMENT
    COMMENT  c. #define __HAL_RCC_GPIOA_CLK_ENABLE()\
    COMMENT                             do { \
    COMMENT                                    __IO T_UINT32 tmpreg; \
    COMMENT                                    SET_BIT(RCC->AHB1ENR, RCC_AHB1ENR_GPIOAEN);\
    COMMENT                                   /* Delay after an RCC peripheral clock enabling */ \
    COMMENT                                   tmpreg = READ_BIT(RCC->AHB1ENR, RCC_AHB1ENR_GPIOAEN);\
    COMMENT                                   UNUSED(tmpreg); \
    COMMENT                                  } while(0)
    COMMENT 
    COMMENT 5. Following Test script related warnings are observed during Target Execution for volatile keyword member/variable:
    COMMENT warning #191-D: type qualifier is meaningless on cast type
    COMMENT 
    COMMENT </AC>
    
    COMMENT Equivalence Class Description
    COMMENT <ECD>
    COMMENT 
    COMMENT Valid Class(es)
    COMMENT Class 1
    COMMENT The function 'BspSwitchesInit', calls the macro __HAL_RCC_GPIOB_CLK_ENABLE.
    COMMENT
    COMMENT Class 2
    COMMENT The function 'BspSwitchesInit', calls the macro __HAL_RCC_GPIOC_CLK_ENABLE.
    COMMENT
    COMMENT Class 3
    COMMENT The function 'BspSwitchesInit', calls the function HalGpioInit.
    COMMENT
    COMMENT Class 4
    COMMENT The function 'EncoderDriverL', result of new encoder value  is equal to ZERO. 
    COMMENT
    COMMENT Class 5
    COMMENT The function 'EncoderDriverL', result of new encoder value  is not equal to ZERO.
    COMMENT
    COMMENT Class 6
    COMMENT The function 'EncoderDriverL', Result of bitwise AND of new encoder value and CHA_MASK is equal to ZERO.
    COMMENT
    COMMENT Class 7
    COMMENT The function 'EncoderDriverL', Result of bitwise AND of new encoder value and CHA_MASK is not equal to ZERO.
    COMMENT
    COMMENT Class 8
    COMMENT The function 'EncoderDriverL', Result of bitwise AND of extracted value and CHA_MASK is equal to ZERO.
    COMMENT
    COMMENT Class 9
    COMMENT The function 'EncoderDriverL', Result of bitwise AND of extracted value and CHA_MASK is not equal to ZERO.
    COMMENT
    COMMENT Class 10
    COMMENT The function 'EncoderDriverL', Result of bitwise AND of extracted value and CHB_MASK is not equal to ZERO.
    COMMENT
    COMMENT Class 11
    COMMENT The function 'PbsClear' resets all Switches to not pressed.
    COMMENT
    COMMENT Class 12
    COMMENT The function 'PbsInit'  call the macro __HAL_RCC_GPIOA_CLK_ENABLE.
    COMMENT
    COMMENT Class 13
    COMMENT The function 'PbsInit'  call the macro __HAL_RCC_GPIOB_CLK_ENABLE.
    COMMENT
    COMMENT Class 14
    COMMENT The function 'PbsInit'  call the macro __HAL_RCC_GPIOC_CLK_ENABLE.
    COMMENT
    COMMENT Class 15
    COMMENT The function 'PbsInit'  call the function BspSwitchesInit.
    COMMENT
    COMMENT Class 16
    COMMENT The function 'PbsInit'  call the function TimerInstall.
    COMMENT
    COMMENT Class 17
    COMMENT The function 'PbsInit'  call the function EncoderDriverL.
    COMMENT
    COMMENT Class 18
    COMMENT The function 'PbsInit'  call the function EncoderDriverR.
    COMMENT
    COMMENT Class 19
    COMMENT The function 'EncoderDriverL', Result of bitwise AND of extracted value and CHB_MASK is equal to ZERO.
    COMMENT
    COMMENT Class 20
    COMMENT The function 'PbsDriver' calls the function EncoderDriverL.
    COMMENT
    COMMENT Class 21
    COMMENT The function 'PbsDriver' calls the function EncoderDriverR.
    COMMENT
    COMMENT Class 22
    COMMENT The function 'PbsDriver' calls the function HwPbsGet.
    COMMENT
    COMMENT Class 23
    COMMENT In the function 'PbsDriver' New switches is set to ZERO.
    COMMENT
    COMMENT Class 24
    COMMENT In the function 'PbsDriver' New switches is not set to ZERO.
    COMMENT
    COMMENT Class 25
    COMMENT In the function 'PbsDriver' Switches_fetched is set to ZERO.
    COMMENT
    COMMENT Class 26
    COMMENT In the function 'PbsDriver' Switches_fetched is not set to ZERO.
    COMMENT
    COMMENT Class 27
    COMMENT In the function 'PbsDriver' New switches is set to Old_switches.
    COMMENT
    COMMENT Class 28
    COMMENT In the function 'PbsDriver' New switches is not set to Old_switches.
    COMMENT
    COMMENT Class 32
    COMMENT In the function 'PbsDriver' Result of bitwise AND operation of Value of most recent raw pbs, Switch Mask and REPEAT_MASK 
    COMMENT is not set to ZERO.
    COMMENT
    COMMENT Class 34
    COMMENT In the function 'PbsDriver' first_press is set to ZERO.
    COMMENT
    COMMENT Class 35
    COMMENT In the function 'PbsDriver' first_press is not set to ZERO.
    COMMENT
    COMMENT Class 36
    COMMENT In the function 'PbsDriver' Switches_used is set to ZERO.
    COMMENT
    COMMENT Class 37
    COMMENT In the function 'PbsDriver' Switches_used is not set to ZERO.
    COMMENT
    COMMENT Class 38
    COMMENT The function 'PbsGet' calls the function OS_ENTER_CRITICAL.
    COMMENT
    COMMENT Class 39
    COMMENT The function 'PbsGet' calls the function OS_EXIT_CRITICAL.
    COMMENT
    COMMENT Class 40
    COMMENT In the function 'PbsGet' S8_position_l is set to ZERO.
    COMMENT
    COMMENT Class 41
    COMMENT In the function 'PbsGet' S8_position_l is not set to ZERO.
    COMMENT
    COMMENT Class 42
    COMMENT In the function 'PbsGet' S8_position_r is set to ZERO.
    COMMENT
    COMMENT Class 43
    COMMENT In the function 'PbsGet' S8_position_r is not set to ZERO.
    COMMENT
    COMMENT Class 44
    COMMENT The function 'PbsGet' calls the function HwPbsGet.
    COMMENT
    COMMENT Class 45
    COMMENT In the function 'PbsGet' return value of HwPbsGet is set to ZERO.
    COMMENT
    COMMENT Class 46
    COMMENT In the function 'PbsGet' return value of HwPbsGet is not set to ZERO.
    COMMENT
    COMMENT Class 47
    COMMENT The function 'HwPbsGet' returns the Pbs value.
    COMMENT
    COMMENT Class 48
    COMMENT In the function 'EncoderDriverR',new_encoder_val is set to ZERO.
    COMMENT
    COMMENT Class 49
    COMMENT In the function 'EncoderDriverR',new_encoder_val is not set to ZERO.
    COMMENT
    COMMENT Class 50
    COMMENT In the function 'EncoderDriverR',result of bitwise AND of new encoder value and CHA_MASK is set to ZERO.
    COMMENT
    COMMENT Class 51
    COMMENT In the function 'EncoderDriverR',result of bitwise AND of new encoder value and CHA_MASK is not set to ZERO.
    COMMENT
    COMMENT Class 52
    COMMENT In the function 'EncoderDriverR',result of bitwise AND of extracted value and CHA_MASK is set to ZERO.
    COMMENT
    COMMENT Class 53
    COMMENT In the function 'EncoderDriverR',result of bitwise AND of extracted value and CHA_MASK is not set to ZERO.
    COMMENT
    COMMENT Class 54
    COMMENT In the function 'EncoderDriverR',result of bitwise AND of extracted value and CHB_MASK is set to ZERO.
    COMMENT
    COMMENT Class 55
    COMMENT In the function 'EncoderDriverR',result of bitwise AND of extracted value and CHB_MASK is not set to ZERO.  
    COMMENT
    COMMENT Class 58
    COMMENT In the function 'PbsDriver' switch timer value is greater or set to zero.
    COMMENT
    COMMENT Class 59
    COMMENT In the function 'PbsDriver' switch timer value is not greater than or set to zero.
    COMMENT     
    COMMENT Class 60
    COMMENT In the function 'PbsDriver' Button 1 switch used is FALSE 
    COMMENT     
    COMMENT Class 61
    COMMENT In the function 'PbsDriver' Button 1 switch used is TRUE
    COMMENT      
    COMMENT Class 62
    COMMENT In the function 'PbsDriver', first time flag is equal to TRUE 
    COMMENT     
    COMMENT Class 63
    COMMENT In the function 'PbsDriver', first time flag is not equal to TRUE 
    COMMENT      
    COMMENT Class 64
    COMMENT In the function 'PbsDriver', Splash_done is not equal to ONE 
    COMMENT       
    COMMENT Class 65
    COMMENT In the function 'PbsDriver', Splash_done is equal to ONE 
    COMMENT       
    COMMENT Class 66
    COMMENT In the function 'PbsDriver', Splash_b1_press is not equal to ZERO
    COMMENT         
    COMMENT Class 67
    COMMENT In the function 'PbsDriver', Splash_b1_press is equal to ZERO
    COMMENT           
    COMMENT Class 68
    COMMENT In the function 'PbsDriver', most recent raw pbs is not equal to ZERO
    COMMENT           
    COMMENT Class 69
    COMMENT In the function 'PbsDriver', Splash_b1_press is equal to ONE
    COMMENT            
    COMMENT Class 70
    COMMENT In the function 'PbsDriver', Splash_b1_press is not equal to ONE
    COMMENT            
    COMMENT Class 71
    COMMENT In the function 'PbsDriver', most recent raw pbs is equal to ZERO
    COMMENT  
    COMMENT Invalid Class(es)
    COMMENT None
    COMMENT
    COMMENT </ECD>

--------------------------------------------------------------------------------
--
-- STUB DECLARATIONS OF THE TESTED OR INTEGRATED UNITS
--
--------------------------------------------------------------------------------
SIMUL

DEFINE STUB hdudispfpbs_c

    --In stub TimerInstall, 'timer' variable made as _no because local varible address cannot be expected. 
    #void TimerInstall( volatile  T_TIMER _no *timer)
    #{
    #  PTU_timer = *timer;
    #  *timer = PTU_timer_in;
    #}

    #void RestoreStatusReg(T_UINT32 _in U32_critical_sr); 
    #T_UINT32 SaveStatusReg(void);

    --In stub HalGpioInit, 'GPIO_Init' variable made as _no because local varible address cannot be expected. 
    #void HalGpioInit(T_GPIO _in *GPIOx, T_GPIO_INIT _no *GPIO_Init)    
    #{
    # PTU_count++;
    # if(PTU_count==1)
    # {
    #   PTU_gpio_init_struct = *GPIO_Init;
    # }
    # else
    # {
    #  PTU_gpio_init_struct2 = *GPIO_Init;
    # }
    #}   
    
END DEFINE

ELSE_SIMUL

 -- No action defined as of now if the module is not simulated
 
END SIMUL
--------------------------------------------------------------------------------
--
-- ENVIRONMENTS DECLARATIONS
--
--------------------------------------------------------------------------------
--IF HOST

-- No special things that have to be done on the host to run the test.

--ELSE

-- No action defined for the target execution as of now

--END IF
--------------------------------------------------------------------------------
-- TESTED FILE ENVIRONNEMENT
--------------------------------------------------------------------------------

-- Environment of the file hdudispfpbs.c
ENVIRONMENT ENV_hdudispfpbs_c

  STRUCTURE Switches,   init = { activity => 0, pressed => 0, raw => 0, b1 => 0, b2 => 0, b3 => 0, b4 => 0, b5 => 0, b6 => 0,
  &                              b7 => 0, b8 => 0, c1 => 0, c2 => 0, c3 => 0, sLE => { pressed => 0, twist => 0 }, 
  &                              sRE => { pressed => 0, twist => 0 } }, ev = init
  
END ENVIRONMENT -- ENV_hdudispfpbs_c

USE ENV_hdudispfpbs_c


--------------------------------------------------------------------------------
--
-- SERVICES DECLARATIONS
--
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
-- Declaration of the service PbsDriver
--------------------------------------------------------------------------------
SERVICE PbsDriver
SERVICE_TYPE extern    

    ENVIRONMENT ENV_PbsDriver
    
    VAR Splash_b1_press,                  init = 0,             ev = init
    
    VAR Splash_done,                      init = 0,             ev = init
    
    END ENVIRONMENT -- ENV_PbsDriver
    
    USE ENV_PbsDriver

TEST 1
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD>
    COMMENT [hdudispfpbs-PbsDriver-DB-LLR-001]
    COMMENT The function calls the function EncoderDriverL.
    COMMENT Equivalence Class 20
    COMMENT
    COMMENT [hdudispfpbs-PbsDriver-DB-LLR-002]
    COMMENT The function calls the function EncoderDriverR. 
    COMMENT Equivalence Class 21
    COMMENT
    COMMENT [hdudispfpbs-EncoderDriverR-DB-LLR-001]
    COMMENT The function does the following.
    COMMENT 1.Stores the value of most recent raw pbs of right encoder to new encoder value .
    COMMENT 2.Performs bitwise AND operation with value of IDR of GPIOA and THREE and stores it to extracted value.
    COMMENT 3.Extracted value is stored to value of most recent raw pbs of right encoder.
    COMMENT 4.Sets new encoder value  to result of XOR operation of new encoder value and extracted value.
    COMMENT 5.Return from the function when result of new encoder value  is set to ZERO.
    COMMENT Equivalence Class 48
    COMMENT
    COMMENT [hdudispfpbs-HwPbsGet-DB-LLR-001]
    COMMENT The function does the following.
    COMMENT 1.Pbs value is set to result of bitwise OR operation of Pbs value  and result of bitwise AND operation of IDR of GPIOB
    COMMENT and RESET_1_AND_2.
    COMMENT 2. Pbs value is set to result of bitwise OR operation of Pbs value and result of bitwise AND operation of IDR of GPIOB
    COMMENT and RESET_5 right shifted by TWO.
    COMMENT 3. Pbs value is set to result of bitwise OR operation of Pbs value and result of bitwise AND operation of IDR of GPIOB
    COMMENT and RESET_8 right shifted by FOUR.
    COMMENT 4.Pbs value is set to result of bitwise OR operation of Pbs value  and result of bitwise AND operation of IDR of GPIOB 
    COMMENT and RESET_11_TO_16 right shifted by SIX.
    COMMENT 5.Pbs value is set to result of bitwise OR operation of Pbs value  and result of bitwise AND operation of IDR of GPIOC
    COMMENT and RESET_3_TO_8 left  shifted by EIGHT.
    COMMENT 6. Pbs value is set to result of XOR operation of Pbs value and MAX_16_BIT.
    COMMENT 7. Pbs value is set to result of Bitwise AND operation of Pbs value and RESET_1_TO_13.
    COMMENT 8.Return the Pbs value from the function.
    COMMENT Equivalence Class 47 
    COMMENT
    COMMENT [hdudispfpbs-PbsDriver-DB-LLR-003]
    COMMENT The function sets value of most recent raw pbs to result of bitwise AND of return value of HwPbsGet and Switch Mask.
    COMMENT Equivalence Class 22  
    COMMENT
    COMMENT [hdudispfpbs-PbsDriver-DB-LLR-004]
    COMMENT The function does nothing when value of most recent raw pbs is not set to ZERO. 
    COMMENT Equivalence Class 24
    COMMENT
    COMMENT [hdudispfpbs-PbsDriver-DB-LLR-005]
    COMMENT The function returns when Flag for last software used by app is set to ZERO.
    COMMENT Equivalence Class 25
    COMMENT
    COMMENT </TD>

    ELEMENT
    
        COMMENT INPUT SECTION:
        
            --Holds the value of IDR of GPIOA
            VAR GPIOA->IDR,             init = 0,               ev = init
        
            --Holds the value of IDR of GPIOB
            VAR GPIOB->IDR,             init = 0,               ev = init
        
            --Holds the value of IDR of GPIOC
            VAR GPIOC->IDR ,             init = 0,               ev = init
      
        COMMENT INPUT/OUTPUT SECTION:
      
            --None
      
        COMMENT OUTPUT SECTION:
      
            --None
  
        -- Stub Calls :
        SIMUL

            --None   

        END SIMUL
      
        -- Calling the Unit Under Test :
        #PbsDriver();
        
    END ELEMENT

END TEST -- TEST 1

TEST 2
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD>
    COMMENT
    COMMENT [hdudispfpbs-EncoderDriverR-DB-LLR-001]
    COMMENT The function does the following.
    COMMENT 1.Stores the value of most recent raw pbs of right encoder to new encoder value .
    COMMENT 2.Performs bitwise AND operation with value of IDR of GPIOA and THREE and stores it to extracted value.
    COMMENT 3.Extracted value is stored to value of most recent raw pbs of right encoder.
    COMMENT 4.Sets new encoder value  to result of XOR operation of new encoder value and extracted value.
    COMMENT 5.The function does nothing when result of new encoder value  is not set to ZERO.
    COMMENT Equivalence Class 49  
    COMMENT
    COMMENT [hdudispfpbs-EncoderDriverR-DB-LLR-002]
    COMMENT The function decrements right position by ONE when
    COMMENT 1.Result of bitwise AND of new encoder value and CHA_MASK is set to ZERO.
    COMMENT 2.Result of bitwise AND of extracted value and CHA_MASK is set to ZERO.
    COMMENT 3.Result of bitwise AND of extracted value and CHB_MASK is not set to ZERO 
    COMMENT Equivalence Class 50,52,55
    COMMENT
    COMMENT </TD>
    

    ELEMENT
    
        COMMENT INPUT SECTION:
        
            --Holds the value of IDR of GPIOA
            VAR GPIOA->IDR,             init = 2,               ev = init
        
            --Holds the value of IDR of GPIOB
            VAR GPIOB->IDR,             init = 1,               ev = init
        
            --Holds the value of IDR of GPIOC
            VAR GPIOC->IDR ,             init = 0,               ev = init
      
        COMMENT INPUT/OUTPUT SECTION:
      
            --None
      
        COMMENT OUTPUT SECTION:
      
            --None
  
        -- Stub Calls :
        SIMUL

            --None   

        END SIMUL
      
        -- Calling the Unit Under Test :    
        #PbsDriver();
        
    END ELEMENT

END TEST -- TEST 2

TEST 3
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD>
    COMMENT
    COMMENT [hdudispfpbs-EncoderDriverR-DB-LLR-006]
    COMMENT The function increments right position by ONE when
    COMMENT 1.Result of bitwise AND of new encoder value and CHA_MASK is not set to ZERO.
    COMMENT 2.Result of bitwise AND of extracted value and CHB_MASK is set to ZERO.
    COMMENT 3.Result of bitwise AND of extracted value and CHA_MASK is not set to ZERO.
    COMMENT Equivalence Class 51,54,53
    COMMENT
    COMMENT </TD>
    
    ELEMENT
    
        COMMENT INPUT SECTION:
        
            --Holds the value of IDR of GPIOA
            VAR GPIOA->IDR,             init = 1,               ev = init
        
            --Holds the value of IDR of GPIOB
            VAR GPIOB->IDR,             init = 2,               ev = init
        
            --Holds the value of IDR of GPIOC
            VAR GPIOC->IDR ,             init = 0,               ev = init
      
        COMMENT INPUT/OUTPUT SECTION:
      
            --None
      
        COMMENT OUTPUT SECTION:
      
            --None
  
        -- Stub Calls :
        SIMUL

            --None   

        END SIMUL
      
        -- Calling the Unit Under Test :
        #PbsDriver();
        
    END ELEMENT

END TEST -- TEST 3

TEST 4
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD>
    COMMENT
    COMMENT [hdudispfpbs-EncoderDriverR-DB-LLR-008]
    COMMENT The function decrements right position by ONE when
    COMMENT 1.Result of bitwise AND of new encoder value and CHA_MASK is not set to ZERO.
    COMMENT 2.Result of bitwise AND of extracted value and CHB_MASK is not set to ZERO.
    COMMENT 3.Result of bitwise AND of extracted value and CHA_MASK is not set to ZERO 
    COMMENT Equivalence Class 51,55,53
    COMMENT
    COMMENT </TD>
    

    ELEMENT
    
        COMMENT INPUT SECTION:
        
            --Holds the value of IDR of GPIOA
            VAR GPIOA->IDR,             init = 3,               ev = init
        
            --Holds the value of IDR of GPIOB
            VAR GPIOB->IDR,             init = 3,               ev = init
        
            --Holds the value of IDR of GPIOC
            VAR GPIOC->IDR ,             init = 0,               ev = init
      
        COMMENT INPUT/OUTPUT SECTION:
      
            --None
      
        COMMENT OUTPUT SECTION:
        
            --None
  
        -- Stub Calls :
        SIMUL

            --None   

        END SIMUL
      
        -- Calling the Unit Under Test :
        #PbsDriver();
        
    END ELEMENT

END TEST -- TEST 4

TEST 5
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD>
    COMMENT
    COMMENT [hdudispfpbs-EncoderDriverR-DB-LLR-009]
    COMMENT The function increment right position by ONE when
    COMMENT 1.Result of bitwise AND of new encoder value and CHA_MASK is not set to ZERO.
    COMMENT 2.Result of bitwise AND of extracted value and CHB_MASK is not set to ZERO.
    COMMENT 3.Result of bitwise AND of extracted value and CHA_MASK is set to ZERO.
    COMMENT Equivalence Class 51,55,52
    COMMENT
    COMMENT </TD>
    

    ELEMENT
    
        COMMENT INPUT SECTION:
        
            --Holds the value of IDR of GPIOA
            VAR GPIOA->IDR,             init = 3,               ev = init
        
            --Holds the value of IDR of GPIOB
            VAR GPIOB->IDR,             init = 0,               ev = init
        
            --Holds the value of IDR of GPIOC
            VAR GPIOC->IDR ,             init = 0,               ev = init
      
        COMMENT INPUT/OUTPUT SECTION:
      
            --None
      
        COMMENT OUTPUT SECTION:
      
            --None
  
        -- Stub Calls :
        SIMUL

            --None   

        END SIMUL
      
        -- Calling the Unit Under Test :
        #PbsDriver();
        
    END ELEMENT
    
    #GPIOA->IDR =2;
    #PbsDriver();
    
    ELEMENT
    
        COMMENT INPUT SECTION:
        
            --Holds the value of IDR of GPIOA
            VAR GPIOA->IDR,             init = 3,               ev = init
        
            --Holds the value of IDR of GPIOB
            VAR GPIOB->IDR,             init = 0,               ev = init
        
            --Holds the value of IDR of GPIOC
            VAR GPIOC->IDR ,             init = 0,               ev = init
      
        COMMENT INPUT/OUTPUT SECTION:
      
            --None
      
        COMMENT OUTPUT SECTION:
      
            --None
  
        -- Stub Calls :
        SIMUL

            --None   

        END SIMUL
      
        -- Calling the Unit Under Test :
        #PbsDriver();
        
    END ELEMENT

END TEST -- TEST 5

TEST 6
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD>
    COMMENT
    COMMENT [hdudispfpbs-EncoderDriverR-DB-LLR-004]
    COMMENT The function increments right position by ONE when
    COMMENT 1.Result of bitwise AND of new encoder value and CHA_MASK is set to ZERO.
    COMMENT 2.Result of bitwise AND of extracted value and CHA_MASK is not set to ZERO.
    COMMENT 3.Result of bitwise AND of extracted value and CHB_MASK is not set to ZERO.
    COMMENT Equivalence Class 50,53,55  
    COMMENT
    COMMENT </TD>
    

    ELEMENT
    
        COMMENT INPUT SECTION:
        
            --Holds the value of IDR of GPIOA
            VAR GPIOA->IDR,             init = 1,               ev = init
        
            --Holds the value of IDR of GPIOB
            VAR GPIOB->IDR,             init = 0,               ev = init
        
            --Holds the value of IDR of GPIOC
            VAR GPIOC->IDR ,             init = 0,               ev = init
      
        COMMENT INPUT/OUTPUT SECTION:
      
            --None
      
        COMMENT OUTPUT SECTION:
      
            --None
    
        -- Stub Calls :
        SIMUL

            --None   

        END SIMUL
      
        -- Calling the Unit Under Test :
        #PbsDriver();
        
    END ELEMENT
    
    #GPIOA->IDR =3;
    #PbsDriver();
    
    ELEMENT
    
        COMMENT INPUT SECTION:
        
            --Holds the value of IDR of GPIOA
            VAR GPIOA->IDR,             init = 3,               ev = init
        
            --Holds the value of IDR of GPIOB
            VAR GPIOB->IDR,             init = 0,               ev = init
      
        COMMENT INPUT/OUTPUT SECTION:
      
            --None
      
        COMMENT OUTPUT SECTION:
      
            --None
  
        -- Stub Calls :
        SIMUL

            --None   

        END SIMUL
      
        -- Calling the Unit Under Test :
        #PbsDriver();
        
    END ELEMENT

END TEST -- TEST 6

TEST 7
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD>
    COMMENT
    COMMENT [hdudispfpbs-EncoderDriverR-DB-LLR-005]
    COMMENT The function decrements right  position by ONE when
    COMMENT 1.Result of bitwise AND of new encoder value and CHA_MASK is set to ZERO.
    COMMENT 2.Result of bitwise AND of extracted value and CHA_MASK is not set to ZERO.
    COMMENT 3.Result of bitwise AND of extracted value and CHB_MASK is set to ZERO. 
    COMMENT Equivalence Class 50,53,54
    COMMENT
    COMMENT </TD>
    

    ELEMENT
    
        COMMENT INPUT SECTION:
        
            --Holds the value of IDR of GPIOA
            VAR GPIOA->IDR,             init = 3,               ev = init
        
            --Holds the value of IDR of GPIOB
            VAR GPIOB->IDR,             init = 0,               ev = init
        
            --Holds the value of IDR of GPIOC
            VAR GPIOC->IDR ,             init = 0,               ev = init
      
        COMMENT INPUT/OUTPUT SECTION:
      
            --None
      
        COMMENT OUTPUT SECTION:
      
            --None
  
        -- Stub Calls :
        SIMUL

            --None   

        END SIMUL
      
        -- Calling the Unit Under Test :
        #PbsDriver();
        
    END ELEMENT
    
    #GPIOA->IDR =1;
    #PbsDriver();

    ELEMENT
    
        COMMENT INPUT SECTION:
        
            --Holds the value of IDR of GPIOA
            VAR GPIOA->IDR,             init = 2,               ev = init
        
            --Holds the value of IDR of GPIOB
            VAR GPIOB->IDR,             init = 0,               ev = init
      
        COMMENT INPUT/OUTPUT SECTION:
      
            --None
      
        COMMENT OUTPUT SECTION:
      
            --None
  
        -- Stub Calls :
        SIMUL

            --None   

        END SIMUL
      
        -- Calling the Unit Under Test :
        #PbsDriver();
        
    END ELEMENT

END TEST -- TEST 7

TEST 8
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD>
    COMMENT
    COMMENT [hdudispfpbs-EncoderDriverR-DB-LLR-007]
    COMMENT The function decrements right position by ONE when
    COMMENT 1.Result of bitwise AND of new encoder value and CHA_MASK is not set to ZERO.
    COMMENT 2.Result of bitwise AND of extracted value and CHB_MASK is set to ZERO.
    COMMENT 3.Result of bitwise AND of extracted value and CHA_MASK is set to ZERO.
    COMMENT Equivalence Class 51,54,52
    COMMENT
    COMMENT </TD>
    

    ELEMENT
    
        COMMENT INPUT SECTION:
        
            --Holds the value of IDR of GPIOA
            VAR GPIOA->IDR,             init = 1,               ev = init
        
            --Holds the value of IDR of GPIOB
            VAR GPIOB->IDR,             init = 0,               ev = init
        
            --Holds the value of IDR of GPIOC
            VAR GPIOC->IDR ,             init = 0,               ev = init
      
        COMMENT INPUT/OUTPUT SECTION:
      
            --None
      
        COMMENT OUTPUT SECTION:
      
            --None
  
        -- Stub Calls :
        SIMUL

            --None   

        END SIMUL
      
        -- Calling the Unit Under Test :
        #PbsDriver();
        
    END ELEMENT

    #GPIOA->IDR =1;
    #PbsDriver();
    
    ELEMENT
    
        COMMENT INPUT SECTION:
        
            --Holds the value of IDR of GPIOA
            VAR GPIOA->IDR,             init =4,                ev = init
        
            --Holds the value of IDR of GPIOB
            VAR GPIOB->IDR,             init = 0,               ev = init
        
            --Holds the value of IDR of GPIOC
            VAR GPIOC->IDR ,             init = 0,               ev = init
      
        COMMENT INPUT/OUTPUT SECTION:
      
            --None
      
        COMMENT OUTPUT SECTION:
      
            --None
  
        -- Stub Calls :
        SIMUL

            --None   

        END SIMUL
      
        -- Calling the Unit Under Test :
        #PbsDriver();
        
    END ELEMENT

END TEST -- TEST 8

TEST 9
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD>
    COMMENT
    COMMENT [hdudispfpbs-EncoderDriverR-DB-LLR-003]
    COMMENT The function increments right position by ONE when
    COMMENT 1.Result of bitwise AND of new encoder value and CHA_MASK is set to ZERO.
    COMMENT 2.Result of bitwise AND of extracted value and CHA_MASK is set to ZERO.
    COMMENT 3.Result of bitwise AND of extracted value and CHB_MASK is set to ZERO.
    COMMENT Equivalence Class 50,52,54 
    COMMENT
    COMMENT </TD>
    

    ELEMENT
    
        COMMENT INPUT SECTION:
        
            --Holds the value of IDR of GPIOA
            VAR GPIOA->IDR,             init = 4,               ev = init
        
            --Holds the value of IDR of GPIOB
            VAR GPIOB->IDR,             init = 0,               ev = init
        
            --Holds the value of IDR of GPIOC
            VAR GPIOC->IDR ,             init = 0,               ev = init
      
        COMMENT INPUT/OUTPUT SECTION:
      
            --None
      
        COMMENT OUTPUT SECTION:
      
            --None
  
        -- Stub Calls :
        SIMUL

            --None   

        END SIMUL
      
        -- Calling the Unit Under Test :
        #PbsDriver();
        
    END ELEMENT

    #GPIOA->IDR =2;
    #PbsDriver();
    
    ELEMENT
    
        COMMENT INPUT SECTION:
        
            --Holds the value of IDR of GPIOA
            VAR GPIOA->IDR,             init =4,                ev = init
        
            --Holds the value of IDR of GPIOB
            VAR GPIOB->IDR,             init = 0,               ev = init
        
            --Holds the value of IDR of GPIOC
            VAR GPIOC->IDR ,             init = 0,               ev = init
      
        COMMENT INPUT/OUTPUT SECTION:
      
            --None
      
        COMMENT OUTPUT SECTION:
      
            --None
  
        -- Stub Calls :
        SIMUL

            --None   

        END SIMUL
      
        -- Calling the Unit Under Test :
        #PbsDriver();
        
    END ELEMENT

END TEST -- TEST 9

TEST 10
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD>
    COMMENT
    COMMENT [hdudispfpbs-PbsDriver-DB-LLR-004]
    COMMENT The function sets Value of last raw pbs to ZERO, Splash_b1_press to ZERO and return from the function  
    COMMENT  when value of most recent raw pbs is equal to ZERO 
    COMMENT Equivalence Class 23 
    COMMENT
    COMMENT </TD>
    
    ELEMENT
    
        COMMENT INPUT SECTION:
        
            --Holds the value of IDR of GPIOA
            VAR GPIOA->IDR,             init =4,                         ev = init  
            
            --Holds the value of IDR of GPIOB
            VAR GPIOB->IDR,             init = (T_UINT32)4294967295,              ev = init
      
            --Holds the value of IDR of GPIOC
            VAR GPIOC->IDR,             init = (T_UINT32)4294967295,              ev = init

        COMMENT INPUT/OUTPUT SECTION:
      
            --None
      
        COMMENT OUTPUT SECTION:
      
            VAR Splash_b1_press,        init = 1,                        ev = ZERO
  
        -- Stub Calls :
        SIMUL

            --None   

        END SIMUL
   
        --Calling the Unit Under Test :
       #PbsDriver();
        
    END ELEMENT

END TEST -- TEST 10

TEST 11
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD>
    COMMENT
    COMMENT [hdudispfpbs-PbsDriver-DB-LLR-005]
    COMMENT The function does nothing when Flag for last software used by app is not set to ZERO.
    COMMENT Equivalence Class 26   
    COMMENT
    COMMENT [hdudispfpbs-PbsDriver-DB-LLR-006]
    COMMENT The function does the following when Value of most recent raw pbs is not set to Value of last raw pbs.
    COMMENT 1.Sets the debounce timer to negative value of DEBOUNCE.
    COMMENT 2.Sets Flag for last valid software used to FALSE.
    COMMENT 3.Sets first press value to TRUE.
    COMMENT 4.Sets Value of last raw pbs to Value of most recent raw pbs.
    COMMENT Equivalence Class 28 
    COMMENT
    COMMENT [hdudispfpbs-PbsDriver-DB-LLR-011]
    COMMENT The function does the following when switch timer value is greater than zero.
    COMMENT 1.Set Button 1 switch used to TRUE when first bit of Value of most recent raw pbs is set to zero.
    COMMENT 2.Set Long_press to FALSE when Button 1 switch used is TRUE.
    COMMENT Equivalence Class 58
    COMMENT
    COMMENT </TD>

    ELEMENT
    
        COMMENT INPUT SECTION:
        
            --Holds the value of IDR of GPIOA
            VAR GPIOA->IDR,             init =4,                         ev = init
        
            --Holds the value of IDR of GPIOB
            VAR GPIOB->IDR,                 init = 1,                   ev = init
      
            --Holds the value of IDR of GPIOC
            VAR GPIOC->IDR,                 init = 2,                   ev = init

        COMMENT INPUT/OUTPUT SECTION:
      
            --None
      
        COMMENT OUTPUT SECTION:
      
            --Value of push button Switches are set
            VAR Switches.b1,                init = TRUE,               ev = FALSE
            VAR Switches.b2,                init = TRUE,               ev = FALSE
            VAR Switches.b3,                init = TRUE,               ev = FALSE
            VAR Switches.b4,                init = TRUE,               ev = FALSE
            VAR Switches.b5,                init = TRUE,               ev = FALSE
            VAR Switches.b6,                init = TRUE,               ev = FALSE
            VAR Switches.b7,                init = TRUE,               ev = FALSE
            VAR Switches.b8,                init = TRUE,               ev = FALSE
            VAR Switches.c1,                init = TRUE,               ev = FALSE
            VAR Switches.c2,                init = TRUE,               ev = FALSE
            VAR Switches.c3,                init = TRUE,                ev = FALSE
            VAR Switches.sLE.pressed,       init = TRUE,                ev = FALSE              
            VAR Switches.sLE.twist,         init = ONE,                 ev = ZERO               
            VAR Switches.sRE.pressed,       init = TRUE,               ev = FALSE          
            VAR  Switches.sRE.twist,        init = ZERO,                ev = ONE            
            VAR Switches.activity,          init = ZERO,                ev = ONE            
            VAR Switches.pressed ,          init = FALSE,               ev = TRUE               
            VAR Switches.raw,               init = 12,                  ev = 8190
                
            --Holds the Critical status register value
            VAR U32_critical_sr,            init = 0,                   ev = 10
  
        -- Stub Calls :
        SIMUL

            --Calls SaveStatusReg to disable interrupts
           STUB SaveStatusReg()10
           
           --Calls RestoreStatusReg to Restore Priority mask register
           STUB RestoreStatusReg(10)
           
           --Calls SaveStatusReg to disable interrupts
           STUB SaveStatusReg()10
           
           --Calls RestoreStatusReg to Restore Priority mask register
           STUB RestoreStatusReg(10)

        END SIMUL
        
        -- Switches_fetched is set to TRUE
        #PbsGet();
 
        --Calling the Unit Under Test :
        #PbsDriver();
        
    END ELEMENT
    
END TEST -- TEST 11

TEST 12
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD>
    COMMENT [hdudispfpbs-PbsDriver-DB-LLR-006]
    COMMENT The function does nothing when Value of most recent raw pbs is set to Value of last raw pbs.
    COMMENT Equivalence Class 27
    COMMENT
    COMMENT [hdudispfpbs-PbsDriver-DB-LLR-008]
    COMMENT The function does the following when first press is not set to ZERO.
    COMMENT 1.Sets first press to FALSE.
    COMMENT 2.Sets Debounce timer to negative value of DELAY_UNTIL_REPEAT.
    COMMENT Equivalence Class 35
    COMMENT
    COMMENT [hdudispfpbs-PbsDriver-DB-LLR-010]
    COMMENT The function does the following when Flag for last valid software used is set to ZERO and Debounce timer is greater than or equal to ZERO.
    COMMENT 1.Sets Value to be returned to application to Value of most recent raw pbs.
    COMMENT 2.Sets Flag for last valid software used to TRUE.
    COMMENT 3.Sets Flag for last software used by application to FALSE.
    COMMENT Equivalence Class 36
    COMMENT
    COMMENT [hdudispfpbs-PbsDriver-DB-LLR-011]
    COMMENT The function does the following when switch timer value is not greater than zero.
    COMMENT 1. Sets Button 1 switch used to FALSE when first bit of Value of most recent raw pbs is not set to zero.
    COMMENT 2. Sets Long_press to TRUE and Sets Button 1 switch used to TRUE if Button 1 switch used is  FALSE.
    COMMENT Equivalence Class 59,60
    COMMENT
    COMMENT </TD>

    ELEMENT
    
        COMMENT INPUT SECTION:
        
            --Holds the value of IDR of GPIOA
            VAR GPIOA->IDR,                 init = 1,                  ev = init
        
            --Holds the value of IDR of GPIOB
            VAR GPIOB->IDR,                 init = 0,                  ev = init
        
            --Holds the value of IDR of GPIOC
            VAR GPIOC->IDR ,             init = 0,               ev = init
      
        COMMENT INPUT/OUTPUT SECTION:
      
            --None
      
        COMMENT OUTPUT SECTION:
      
            --Value of push button Switches are set
            VAR Switches.b1,                init = TRUE,               ev = FALSE
            VAR Switches.b2,                init = TRUE,               ev = FALSE
            VAR Switches.b3,                init = TRUE,               ev = FALSE
            VAR Switches.b4,                init = TRUE,               ev = FALSE
            VAR Switches.b5,                init = TRUE,               ev = FALSE
            VAR Switches.b6,                init = TRUE,               ev = FALSE
            VAR Switches.b7,                init = TRUE,               ev = FALSE
            VAR Switches.b8,                init = TRUE,               ev = FALSE
            VAR Switches.c1,                init = TRUE,               ev = FALSE
            VAR Switches.c2,                init = TRUE,               ev = FALSE
            VAR Switches.c3,                init = TRUE,               ev = FALSE
            VAR Switches.sLE.pressed,       init = TRUE,               ev = FALSE              
            VAR Switches.sLE.twist,         init = ONE,                ev = ZERO               
            VAR Switches.sRE.pressed,       init =  TRUE,              ev = FALSE          
            VAR  Switches.sRE.twist,        init = ONE,                ev = ZERO            
            VAR Switches.activity,          init = ZERO,               ev = ONE            
            VAR Switches.pressed ,          init = TRUE,               ev = FALSE               
            VAR Switches.raw,               init = 12,                 ev = 8191
                       
            --Holds the Critical status register value
            VAR U32_critical_sr,            init = 0,                  ev = 10
               
         
            -- Stub Calls :
            SIMUL
       
            --Calls SaveStatusReg to disable interrupts
            STUB SaveStatusReg()10
                  
            --Calls RestoreStatusReg to Restore Priority mask register
            STUB RestoreStatusReg(10)
                  
            --Calls SaveStatusReg to disable interrupts
            STUB SaveStatusReg()10
                  
            --Calls RestoreStatusReg to Restore Priority mask register
            STUB RestoreStatusReg(10)
            
        END SIMUL
      
            -- Calling the Unit Under Test :
            #PbsGet();
        
    END ELEMENT

   #GPIOA->IDR =1;
   #PbsDriver();
    
    ELEMENT
    
        COMMENT INPUT SECTION:
        
            --Holds the value of IDR of GPIOA
            VAR GPIOA->IDR,             init =4,                ev = init
        
            --Holds the value of IDR of GPIOB
            VAR GPIOB->IDR,             init = 0,               ev = init
        
            --Holds the value of IDR of GPIOC
            VAR GPIOC->IDR ,             init = 0,               ev = init
      
        COMMENT INPUT/OUTPUT SECTION:
        
            --Holds the value of PTU_timer
            VAR PTU_timer,              init = 0,               ev=4294962296
           
      
        COMMENT OUTPUT SECTION:
      
            --None
  
        -- Stub Calls :
        SIMUL

            -- configure the GPIOB 
            STUB HalGpioInit(GPIOB)
            
            -- configure the GPIOC
            STUB HalGpioInit(GPIOC)
            
            --debounce the timer 
            STUB TimerInstall 1..2=>() 

        END SIMUL
      
        -- Sw_timer is set to non negative number
        #PbsInit();
        
        -- Calling the Unit Under Test :
        #PbsDriver();
        
    END ELEMENT

END TEST -- TEST 12

TEST 13
FAMILY nominal

    COMMENT Test Description
    COMMENT
    COMMENT <TD>
    COMMENT [hdudispfpbs-PbsDriver-DB-LLR-009]
    COMMENT The function sets Debounce timer to negative value of  REP_RATE when first press is set to ZERO and
    COMMENT Debounce timer is greater than or equal to ZERO.
    COMMENT Equivalence Class 34
    COMMENT
    COMMENT [hdudispfpbs-PbsDriver-DB-LLR-010]
    COMMENT The function does nothing when the Flag for last valid software used is not set to ZERO and Debounce timer is greater than or equal to ZERO.
    COMMENT Equivalence Class 37
    COMMENT
    COMMENT [hdudispfpbs-PbsDriver-DB-LLR-011]
    COMMENT The function does the following when switch timer value is greater than zero.
    COMMENT 1.Sets Button 1 switch used to TRUE when first bit of Value of most recent raw pbs is set to zero.
    COMMENT 2.Sets Long_press to FALSE when Button 1 switch used is TRUE.
    COMMENT Equivalence Class 61
    COMMENT
    COMMENT In Second Element Block
    COMMENT [hdudispfpbs-PbsDriver-DB-LLR-012] 
    COMMENT Finction does nothing when 
    COMMENT first time flag is equal to TRUE AND Splash_done is equal to ONE AND Splash_b1_press is not equal to ZERO
    COMMENT MCDC covered: TFX
    COMMENT Equivalence Class 62, 65
    COMMENT
    COMMENT </TD>
    

    ELEMENT
    
        COMMENT INPUT SECTION:
        
            --Holds the value of IDR of GPIOA
            VAR GPIOA->IDR,                 init = 1,                   ev = init
        
            --Holds the value of IDR of GPIOB
            VAR GPIOB->IDR,                 init = 0,                   ev = init
        
            --Holds the value of IDR of GPIOC
            VAR GPIOC->IDR ,             init = 0,               ev = init
      
        COMMENT INPUT/OUTPUT SECTION:
            
            --Holds the value of PTU_timer
            VAR PTU_timer,                  init = 1,                   ev=0
            
      
        COMMENT OUTPUT SECTION:
      
            --Value of push button Switches are set
            VAR Switches.b1,                init = TRUE,               ev = FALSE
            VAR Switches.b2,                init = TRUE,               ev = FALSE
            VAR Switches.b3,                init = TRUE,               ev = FALSE
            VAR Switches.b4,                init = TRUE,               ev = FALSE
            VAR Switches.b5,                init = TRUE,               ev = FALSE
            VAR Switches.b6,                init = TRUE,               ev = FALSE
            VAR Switches.b7,                init = TRUE,               ev = FALSE
            VAR Switches.b8,                init = TRUE,               ev = FALSE
            VAR Switches.c1,                init = TRUE,               ev = FALSE
            VAR Switches.c2,                init = TRUE,               ev = FALSE
            VAR Switches.c3,                init = TRUE,               ev = FALSE
            VAR Switches.sLE.pressed,       init = TRUE,               ev = FALSE              
            VAR Switches.sLE.twist,         init = ONE,                ev = ZERO               
            VAR Switches.sRE.pressed,       init =  TRUE,              ev = FALSE          
            VAR  Switches.sRE.twist,        init = ONE,                ev = ZERO            
            VAR Switches.activity,          init = ZERO,               ev = ONE            
            VAR Switches.pressed ,          init = TRUE,               ev = FALSE               
            VAR Switches.raw,               init = 12,                 ev = 8191
                       
            --Holds the Critical status register value
            VAR U32_critical_sr,            init = 0,                   ev = 10
               
         
            -- Stub Calls :
            SIMUL
       
            --Calls SaveStatusReg to disable interrupts
            STUB SaveStatusReg()10
           
            --Calls RestoreStatusReg to Restore Priority mask register
            STUB RestoreStatusReg(10)
           
            --Calls SaveStatusReg to disable interrupts
            STUB SaveStatusReg()10
           
            --Calls RestoreStatusReg to Restore Priority mask register
            STUB RestoreStatusReg(10)
            
            --Calls SaveStatusReg to disable interrupts
            STUB SaveStatusReg()10
                          
            --Calls RestoreStatusReg to Restore Priority mask register
            STUB RestoreStatusReg(10)
            
            --Calls SaveStatusReg to disable interrupts
            STUB SaveStatusReg()10
                          
            --Calls RestoreStatusReg to Restore Priority mask register
            STUB RestoreStatusReg(10)
            
            -- configure the GPIOB 
            STUB HalGpioInit(GPIOB)
             
            -- configure the GPIOC
            STUB HalGpioInit(GPIOC)
             
            --debounce the timer 
            STUB TimerInstall 1..2=>()
            
        END SIMUL
      
        -- Switches_fetched is set to TRUE
        #PbsGet();
        
        --To set Old_switches to New switches
        #PbsDriver();
        
        -- Sw_timer is set to non negative number
        #PbsInit();
        #PbsDriver();
        
        -- Switches_fetched is set to TRUE
        #PbsGet();
          
        -- Calling the Unit Under Test :
        #PbsDriver();
         
    END ELEMENT
    
    ELEMENT
    
        COMMENT INPUT SECTION:
        
            --Holds the value of IDR of GPIOA
            VAR GPIOA->IDR,             init =4,                ev = init
        
            --Holds the value of IDR of GPIOB
            VAR GPIOB->IDR,             init = 0,               ev = init
      
            --Initialized a value for Splash_done
            VAR Splash_done,            init = ONE,               ev = init
      
        COMMENT INPUT/OUTPUT SECTION:
        
            --None  
           
        COMMENT OUTPUT SECTION:
      
            --None
  
        -- Stub Calls :
        SIMUL

        -- configure the GPIOB 
        STUB HalGpioInit(GPIOB)
                    
        -- configure the GPIOC
        STUB HalGpioInit(GPIOC)
                    
        --debounce the timer 
        STUB TimerInstall 1..2=>()  

        END SIMUL
      
        -- Sw_timer is set to non negative number
        #PbsInit();
        
        -- Calling the Unit Under Test :
        #PbsDriver();
        
    END ELEMENT
 
END TEST -- TEST 13

TEST 14
FAMILY nominal

    COMMENT Test Description
    COMMENT
    COMMENT <TD>
    COMMENT [hdudispfpbs-PbsDriver-DB-LLR-012] 
    COMMENT The function does the following,
    COMMENT 1.  Set Splash_b1_press to ONE when the following conditions are satisfied
    COMMENT a.  first time flag is equal to TRUE AND Splash_done is not equal to ONE AND Splash_b1_press is not equal to ZERO
    COMMENT     MCDC Covered: TTT
    COMMENT b.  most recent raw pbs is not equal to ZERO
    COMMENT 2.  Set first time flag to FALSE when first time flag is equal to TRUE AND Splash_done is not equal to ONE AND Splash_b1_press is not equal to ZERO.
    COMMENT 3.  Does nothing when the following conditions are satisfied
    COMMENT a.  Splash_b1_press is equal to ONE
    COMMENT b.  most recent raw pbs is not equal to ZERO.
    COMMENT when the function is called for second time:
    COMMENT Function does nothing when first time flag is equal to TRUE AND Splash_done is not equal to ONE AND 
    COMMENT Splash_b1_press is equal to ZERO    
    COMMENT Equivalence Class 62, 64, 66, 68, 69, 70, 67
    COMMENT
    COMMENT In Second Element Block
    COMMENT [hdudispfpbs-PbsDriver-DB-LLR-012] 
    COMMENT Finction does nothing when 
    COMMENT first time flag is not equal to TRUE AND Splash_done is not equal to ONE AND Splash_b1_press is not equal to ZERO
    COMMENT MCDC covered: FTT
    COMMENT Equivalence Class 63
    COMMENT
    COMMENT </TD>
    

    ELEMENT
    
        COMMENT INPUT SECTION:
        
            --Holds the value of IDR of GPIOA
            VAR GPIOA->IDR,                 init = 1,                   ev = init
        
            --Holds the value of IDR of GPIOB
            VAR GPIOB->IDR,                 init = 0,                   ev = init
        
            --Holds the value of IDR of GPIOC
            VAR GPIOC->IDR ,             init = 0,                      ev = init
      
            --Initialized a value for Splash_done
            VAR Splash_done,             init = 0,                      ev = init
      
        COMMENT INPUT/OUTPUT SECTION:
            
            --Holds the value of PTU_timer
            VAR PTU_timer,               init = 1,                      ev = 0
            
            --Holds the value of Splash_b1_press
            VAR Splash_b1_press,         init = 2,                      ev = 1
            
      
        COMMENT OUTPUT SECTION:
      
            --Value of push button Switches are set
            VAR Switches.b1,                init = TRUE,               ev = FALSE
            VAR Switches.b2,                init = TRUE,               ev = FALSE
            VAR Switches.b3,                init = TRUE,               ev = FALSE
            VAR Switches.b4,                init = TRUE,               ev = FALSE
            VAR Switches.b5,                init = TRUE,               ev = FALSE
            VAR Switches.b6,                init = TRUE,               ev = FALSE
            VAR Switches.b7,                init = TRUE,               ev = FALSE
            VAR Switches.b8,                init = TRUE,               ev = FALSE
            VAR Switches.c1,                init = TRUE,               ev = FALSE
            VAR Switches.c2,                init = TRUE,               ev = FALSE
            VAR Switches.c3,                init = TRUE,               ev = FALSE
            VAR Switches.sLE.pressed,       init = TRUE,               ev = FALSE              
            VAR Switches.sLE.twist,         init = ONE,                ev = ZERO               
            VAR Switches.sRE.pressed,       init =  TRUE,              ev = FALSE          
            VAR Switches.sRE.twist,         init = ONE,                ev = ZERO            
            VAR Switches.activity,          init = ZERO,               ev = ONE            
            VAR Switches.pressed ,          init = TRUE,               ev = FALSE               
            VAR Switches.raw,               init = 12,                 ev = 8191
                       
            --Holds the Critical status register value
            VAR U32_critical_sr,            init = 0,                   ev = 10
               
         
            -- Stub Calls :
            SIMUL
       
            --Calls SaveStatusReg to disable interrupts
            STUB SaveStatusReg()10
           
            --Calls RestoreStatusReg to Restore Priority mask register
            STUB RestoreStatusReg(10)
           
            --Calls SaveStatusReg to disable interrupts
            STUB SaveStatusReg()10
           
            --Calls RestoreStatusReg to Restore Priority mask register
            STUB RestoreStatusReg(10)
            
            --Calls SaveStatusReg to disable interrupts
            STUB SaveStatusReg()10
                          
            --Calls RestoreStatusReg to Restore Priority mask register
            STUB RestoreStatusReg(10)
            
            --Calls SaveStatusReg to disable interrupts
            STUB SaveStatusReg()10
                          
            --Calls RestoreStatusReg to Restore Priority mask register
            STUB RestoreStatusReg(10)
            
            -- configure the GPIOB 
            STUB HalGpioInit(GPIOB)
             
            -- configure the GPIOC
            STUB HalGpioInit(GPIOC)
             
            --debounce the timer 
            STUB TimerInstall 1..2=>()
            
        END SIMUL
      
        -- Switches_fetched is set to TRUE
        #PbsGet();
        
        --To set Old_switches to New switches
        #PbsDriver();
        
        -- Sw_timer is set to non negative number
        #PbsInit();
        #PbsDriver();
        
        -- Switches_fetched is set to TRUE
        #PbsGet();
          
        -- Calling the Unit Under Test :
        #PbsDriver();
         
    END ELEMENT
    
    ELEMENT
    
        COMMENT INPUT SECTION:
        
            --Holds the value of IDR of GPIOA
            VAR GPIOA->IDR,             init =4,                ev = init
        
            --Holds the value of IDR of GPIOB
            VAR GPIOB->IDR,             init = 0,               ev = init
      
            --Initialized a value for Splash_done
            VAR Splash_done, init = 1, ev = init

            --Initialized a value for Splash_b1_press
            VAR Splash_b1_press, init = 0, ev = init

        COMMENT INPUT/OUTPUT SECTION:
        
            --None  
           
        COMMENT OUTPUT SECTION:
      
            --None
  
        -- Stub Calls :
        SIMUL

        -- configure the GPIOB 
        STUB HalGpioInit(GPIOB)
                    
        -- configure the GPIOC
        STUB HalGpioInit(GPIOC)
                    
        --debounce the timer 
        STUB TimerInstall 1..2=>()  

        END SIMUL
      
        -- Sw_timer is set to non negative number
        #PbsInit();
        
        -- Calling the Unit Under Test :
        #PbsDriver();
        
    END ELEMENT
 
END TEST -- TEST 14

END SERVICE -- PbsDriver
