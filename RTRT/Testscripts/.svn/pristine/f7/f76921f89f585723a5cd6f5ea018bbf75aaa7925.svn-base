HEADER hdudispfglobalsettings,Source Code Ver :1.14,TestScript Ver : 1.3
--------------------------------------------------------------------------------
-- Author Name         : Swaroopa N
--
-- File Name           : hdudispfglobalsettings_28.ptu
--
-- Test Creation Date  : 27.07.2020
--
-- Tested Functions    : GlobalSettingsCheckTrig
--
-- Version History     :
--
--  TEST-VERSION        TEST-DATE       TESTER NAME        MODIFICATIONS
--  ------------        ---------       -----------        -------------
--      1.1             27.07.2020      Swaroopa N         Created the ptu file 
--      1.2				03.10.2020		Vignesh Sunil		Updated as per #PR100281
--      1.3				12.04.2021		Vignesh Sunil		Updated as per #PR100338
--------------------------------------------------------------------------------
--
-- TESTED FILE INCLUDE DIRECTIVES 
--
--------------------------------------------------------------------------------

#/*============================================================================*/
#/* Module specific includes                                                   */
#/*============================================================================*/

##include "hdudispfpdidata.h"         /* contains routines for PDI data */
##include "hdudispfdemo.h"           /* provides demo functionalities */
##include "hdudispfa429.h"           /* Routines for arinc 429 */
##include "hdudispfcrc.h"            /* Contains functions prototypes of hdudispbcrc*/
##include "hdudispfdauprofile.h"     /* defines the constants for ARINC 825  Message Traffic.*/
##include "hdudispfglobalsettings.h" /* Routines to read and write data to NVRAM  */
##include "hdudispfgrapp.h"          /* routines for all graph */
##include "hdudispfarinc825.h"      /* Define the structure for an ARINC 825 Message. */
##include "hdudispfpara.h"       /* prototype for builds faults, message and system information*/
##include "hdulibbasictypes.h"   /* Standard basic data type definitions */
##include "hdudispfoscpu.h"      /* OS function declarations */
##include "hdudispfmenu.h" /* contains prototype for menu module*/
##include "hdudispftimer.h"         /* Consistency Check*/
##include "hdudispfresource.h"/* provides resources */
##include "hdudispfucos.h" /* provides ucos functionalities */
##include "hdudispfgrapp.h"           /* routines for all graph */
##include "hdudispfpbit.h"        /* contains prototypes for PBIT test. */
##include "hdudispfmenu.h"            /* contains prototype for menu module*/		
##include "hdudispflmsscu.h"  /* SCU rtd processing and error codes  */		

--------------------------------------------------------------------------------
--
-- TESTED FILE DECLARATIONS 
--
--------------------------------------------------------------------------------

-- Declarations of the global variables of the tested file

	--Flight exceedances timer values.
	#extern T_TIMER Flight_timer_exceed[7];

	--Exceedence log of trigger condition
	#T_ELOG_TRIG_STRUCT Elog_trig[5]; 

	--Condition count value
	#T_UINT8 Cond_cnt[5]; 

	--Exceedence log of label 
	#T_ELOG_LABEL_STRUCT Elog_label[5]; 

	--A429 data strucutre
	#T_A429_DATA_STRUCT A429_data[2][256]; 

	--Port1 label count value
	#T_UINT16 Port1_label_count; 

	--Critical status register value
	#T_UINT32 U32_critical_sr; 

	--Position value of Display Unit 
	#T_UINT8 Du_position; 

	--Toggle screen value
	#T_EPAGE_NUM Toggle_screen;

	--Page number value
	#T_EPAGE_NUM Page_num;

	--Cool_down_select
	#T_BOOL Cool_down_select;

	--Exceedance logged
	#T_GLOBAL_EXCEED Exceedance_log[EXCEED_LOG_SIZE]; 

	#T_GLOBAL_SETTINGSTRIG Trig_Setting[5] ;

	#T_BOOL  Exceedance_startup_check[5] ;

	--#T_GLOBAL_SETTINGSTRIG Trig_setting[5].Engine_timer[5];
	
	#T_BOOL Bitmap_crc_check_bit[20];		
	
	#T_BOOL Fault_log_adv; 
	
    #T_UINT16 Flt_id_count; 
	
    #T_BOOL Fuel_flow_select; 
	


-- Declarations of the temporary variable

	--temporary variable to verify ps_xm of stub 'A8251Xmit'
	#T_A825_MESSAGE PTU_ps_xm_out,PTU_ps_xm_out_2;
    #T_UINT8 PTU_COUNT,PTU_COUNT_1=0;

    --Created to verify the ps_dest of function RTDGetParamDdw
    #T_PARAM_READING PTU_ps_dest_in_Ddw;

    --Created to verify the ps_dest of function RTDGetParam
    #T_PARAM_READING PTU_ps_dest_in_Param[6];
    #T_UINT8 Ptu_Count_param;

    --Created to verify the u32_buffer of function CrcCalculate
    #T_UINT32 PTU_IN_u32_buffer[NV_SIZE];
    
    #T_TIMER PTU_timer_1[10],PTU_timer_2[10], PTU_timer_Preset[10];
	#T_UINT32 PTU_i,PTU_j, PTU_x;



--------------------------------------------------------------------------------

BEGIN

    COMMENT Author name      : Swaroopa N
    COMMENT
    COMMENT File name        : hdudispfglobalsettings_28.ptu
    COMMENT
    COMMENT Tested functions : GlobalSettingsCheckTrig
    COMMENT
    COMMENT Assumptions and Constraints
    COMMENT <AC>
    COMMENT Assumption(s):
    COMMENT None
    COMMENT
    COMMENT Constraint(s):
    COMMENT
    COMMENT 1) The testscript is split into 28 due to static dependency.
    COMMENT
    COMMENT 2) In function 'GlobalSettingsPush', for loop cannot be covered for 0 or 1 loop since it is controlled by a macro NV_SIZE.
    COMMENT
    COMMENT code snippet:
    COMMENT    for(u16_sequence = ZERO; u16_sequence <= NV_SIZE; u16_sequence++, pu32_vn_ptr++)
    COMMENT {
    COMMENT       *((T_UINT16 *)&(s_xm.u8PayLoad[2])) = u16_sequence;
    COMMENT       *((T_UINT32 *)(&(s_xm.u8PayLoad[4]))) = *pu32_vn_ptr;
    COMMENT       test_res = A8251Xmit(&s_xm);
    COMMENT     ...
    COMMENT 3) Warning "enumerated type mixed with another type" is obtained when parameter 
    COMMENT    '(enum T_A825_XMITRESULT)type' of return value of function 'A8251Xmit'
    COMMENT    is exercised with value "A825_XM_NOT_IMPLEMENTED+1" to test LLR 
    COMMENT    "hdudispfglobalsettings-GlobalSettingsPush-DB-LLR-006" and
    COMMENT    '(enum T_EIU)type' of Active_eiu
    COMMENT    '(enum T_BRIGHTNESS_MODE)type' of Brightness_mode 
    COMMENT    '(enum T_COOLDOWN_STATE)type' of Cool_down_state
    COMMENT    is exercised with value "EIU1+1","EBRIGHTNESS_AUTO+1" and "ECOOLDOWN_OFF+1" to test LLR 
    COMMENT    hdudispfglobalsettings-GlobalSettingsPush-DB-LLR-001
    COMMENT    in PTU "hdudispfglobalsettings_2.ptu" .
    COMMENT
 	COMMENT 4) In the function 'GlobalSettingsPushPeakLog' for loop cannot be covered for 0 and 1 times
 	COMMENT since it is controlled by the macro "EXCEED_LOG_SIZE" 
 	COMMENT
 	COMMENT 5)Header file "hdudispftimer.h" is modified for testing purpose. The 'volatile' keyword is removed from parameter of function 
	COMMENT 'TimerInstall' and 'TimerPreset' declarations.	
	COMMENT
	COMMENT 6) In the function 'GlobalSettingsCheckExParam' for loop cannot be covered for 0 and 1 times
	COMMENT since it is controlled by the macros "FIVE" and "MAX_ELOG_PARAM".
    COMMENT </AC>
    COMMENT Equivalence Class Description
    COMMENT <ECD>
    COMMENT
    COMMENT Valid Class(es)
    COMMENT 
    COMMENT Class 1
    COMMENT In function 'GlobalSettingsSetSysInfo', macro INIT_NOC_MESSAGE is called.
    COMMENT
    COMMENT Class 2
    COMMENT In function 'GlobalSettingsSetSysInfo', function A8251Xmit is called.
    COMMENT
    COMMENT Class 3
    COMMENT In function 'GlobalSettingsPull', function A8251Xmit is called.
    COMMENT
    COMMENT Class 4
    COMMENT In function 'GlobalSettingsPull', macro INIT_NSC_REQUEST is called.
    COMMENT
    COMMENT Class 5
    COMMENT In function 'GlobalSettingsProcessNSC', node service code is not equal to NSC_NVS,NSC_PULL_MEM,NSC_PULL_RESEND.
    COMMENT
    COMMENT Class 9
    COMMENT In function 'GlobalSettingsProcessNSC', node service code is equal to NSC_NVS.
    COMMENT
    COMMENT Class 10
    COMMENT In function 'GlobalSettingsProcessNSC', node service code is equal to NSC_PULL_MEM.
    COMMENT
    COMMENT Class 12
    COMMENT In function 'GlobalSettingsProcessNSC', node service code is equal to NSC_PULL_RESEND.
    COMMENT
    COMMENT Class 13
    COMMENT In function 'GlobalSettingsProcessNSC', location sequence is less than NV_SIZE.
    COMMENT
    COMMENT Class 14
    COMMENT In function 'GlobalSettingsProcessNSC', location sequence is equal to NV_SIZE.
    COMMENT
    COMMENT Class 15
    COMMENT In function 'GlobalSettingsProcessNSC', location sequence is greater than NV_SIZE.
    COMMENT
    COMMENT Class 16
    COMMENT In function 'GlobalSettingsProcessNSC', return value of CrcCalculate is not equal to u32CRC of storage structure.
    COMMENT
    COMMENT Class 17
    COMMENT In function 'GlobalSettingsProcessNSC', return value of CrcCalculate is equal to u32CRC of storage structure.
    COMMENT
    COMMENT Class 18
    COMMENT In function 'GlobalSettingsProcessNSC', macro OS_ENTER_CRITICAL is called.
    COMMENT
    COMMENT Class 19
    COMMENT In function 'GlobalSettingsProcessNSC', macro OS_EXIT_CRITICAL is called.
    COMMENT
    COMMENT Class 22
    COMMENT In function 'GlobalSettingsProcessNSC', GlobalSettingsPull is called.
    COMMENT
    COMMENT Class 23
    COMMENT In function 'GlobalSettingsProcessNSC', OsTimeDly is called.
    COMMENT
    COMMENT Class 24
    COMMENT In function 'GlobalSettingsSetEIU', RTDGetParamDdw is called.
    COMMENT
    COMMENT Class 25
    COMMENT In function 'GlobalSettingsSetEIU', status of heartbeat message is not MISSING.
    COMMENT
    COMMENT Class 26
    COMMENT In function 'GlobalSettingsSetEIU', status of heartbeat message is MISSING.
    COMMENT
    COMMENT Class 27
    COMMENT In function 'GlobalSettingsSetEIU', macro INIT_NSC_REQUEST is called.
    COMMENT
    COMMENT Class 28
    COMMENT In function 'GlobalSettingsSetEIU', A8252Xmit is called.
    COMMENT
    COMMENT Class 29
    COMMENT In function 'GlobalSettingsPush', macro INIT_NSC_REQUEST is called.
    COMMENT
    COMMENT Class 30
    COMMENT In function 'GlobalSettingsPush', CrcCalculate is called.
    COMMENT
    COMMENT Class 31
    COMMENT In function 'GlobalSettingsPush', A8251Xmit is called.
    COMMENT
    COMMENT Class 32
    COMMENT In function 'GlobalSettingsPush', return value of A8251Xmit is equal to A825_XM_OK.
    COMMENT
    COMMENT Class 33
    COMMENT In function 'GlobalSettingsPush', return value of A8251Xmit is not equal to A825_XM_OK.
    COMMENT
    COMMENT Class 34
    COMMENT In function 'GlobalSettingsProcessNSC', Cool_down_select is equal to TRUE.
    COMMENT
    COMMENT Class 35
    COMMENT In function 'GlobalSettingsProcessNSC', Cool_down_select is not equal to TRUE.
    COMMENT
    COMMENT
    COMMENT Class 36	
    COMMENT In function 'GlobalSettingsPushPeakLog', C macro INIT_NOC_MESSAGE is called.
    COMMENT
    COMMENT Class 37	
    COMMENT In function 'GlobalSettingsPushPeakLog', Exceedance_index of Exceedance_log with sequence as index is greater than ZERO 
    COMMENT
    COMMENT Class 38	
    COMMENT In function 'GlobalSettingsPushPeakLog', Exceedance_index of Exceedance_log with sequence as index is lesser than ZERO
    COMMENT
    COMMENT Class 39	
    COMMENT In function 'GlobalSettingsPushPeakLog', Exceedance_index of Exceedance_log with sequence as index is equal to ZERO
    COMMENT
    COMMENT Class 40	
    COMMENT In function 'GlobalSettingsPushPeakLog', End_transmission of Exceedance_log with sequence as index is equal to FALSE
    COMMENT
    COMMENT Class 41	
    COMMENT In function 'GlobalSettingsPushPeakLog', End_transmission of Exceedance_log with sequence as index is not equal to FALSE
    COMMENT
    COMMENT Class 42	
    COMMENT In function 'GlobalSettingsPushPeakLog', Fst_log_rec_stat of Exceedance_log with sequence as index is equal to TRUE 
    COMMENT
    COMMENT Class 43
    COMMENT In function 'GlobalSettingsPushPeakLog', Fst_log_rec_stat of Exceedance_log with sequence as index is not equal to TRUE 
    COMMENT
    COMMENT Class 44
    COMMENT In function 'GlobalSettingsPushPeakLog', function 'A8251Xmit' is called.
    COMMENT
    COMMENT Class 45
    COMMENT In function 'GlobalSettingsPushPeakLog', function 'OsTimeDly' is called.
    COMMENT
    COMMENT Class 46
    COMMENT In function 'GlobalSettingsPushPeakLog', test result is not equal to A825_XM_OK
    COMMENT
    COMMENT Class 47
    COMMENT In function 'GlobalSettingsPushPeakLog', test result is equal to A825_XM_OK
    COMMENT
    COMMENT Class 48
    COMMENT In function 'GlobalSettingsPushPeakLog', Data_log_rec_stat of Exceedance_log with sequence as index is equal to TRUE 
    COMMENT
    COMMENT Class 49
    COMMENT In function 'GlobalSettingsPushPeakLog', Data_log_rec_stat of Exceedance_log with sequence as index is not equal to TRUE      
    COMMENT
    COMMENT Class 50
    COMMENT In function 'GlobalSettingsPushPeakLog', Flght_log_rec_stat of Exceedance_log with sequence as index is equal to TRUE 
    COMMENT
    COMMENT Class 51
    COMMENT In function 'GlobalSettingsPushPeakLog', Flght_log_rec_stat of Exceedance_log with sequence as index is not equal to TRUE 
    COMMENT
    COMMENT Class 52
    COMMENT In function 'GlobalSettingsPushPeakLog', Lst_log_rec of Exceedance_log with sequence as index is equal to TRUE
    COMMENT
    COMMENT Class 53
    COMMENT In function 'GlobalSettingsPushPeakLog', Lst_log_rec of Exceedance_log with sequence as index is not equal to TRUE      
    COMMENT
    COMMENT Class 54
    COMMENT In function 'GlobalSettingsCheckExParam', elog_label of Elog_label with loop1 index as index is equal to
    COMMENT label of A429_data with zero and loop2 index as indices 
    COMMENT
    COMMENT Class 55
    COMMENT In function 'GlobalSettingsCheckExParam', elog_label of Elog_label with loop1 index as index is not equal to
    COMMENT label of A429_data with zero and loop2 index as indices  
    COMMENT
    COMMENT Class 56
    COMMENT In function 'GlobalSettingsCheckExParam', function is 'RTDGetParamDdw' called 
    COMMENT
    COMMENT Class 57
    COMMENT In function 'GlobalSettingsCheckExParam', stat of exceedance read is equal to PARAM_OK 
    COMMENT
    COMMENT Class 58
    COMMENT In function 'GlobalSettingsCheckExParam', stat of exceedance read is not equal to PARAM_OK 
    COMMENT
    COMMENT Class 59
    COMMENT In function 'GlobalSettingsCheckExParam', label of A429_data with zero and loop2 index as indices
    COMMENT is equal to elog_bit_label with loop3 index as index of Elog_label with loop1 index  
    COMMENT
    COMMENT Class 60
    COMMENT In function 'GlobalSettingsCheckExParam', label of A429_data with zero 	and loop2 index as indices
    COMMENT is not equal to elog_bit_label with loop3 index as index of Elog_label with loop1 index
    COMMENT
    COMMENT Class 61
    COMMENT In function 'GlobalSettingsCheckExParam', function 'RTDGetParam' is called.
    COMMENT
    COMMENT Class 62
    COMMENT In function 'GlobalSettingsCheckExParam', log parameter is equal to TRUE    
    COMMENT
    COMMENT Class 63
    COMMENT In function 'GlobalSettingsCheckExParam', log parameter is not equal to TRUE 
    COMMENT
    COMMENT Class 65
    COMMENT In function 'GlobalSettingsCheckExParam', init exceed id with loop1 index and loop3 index as indices is equal to TRUE 
    COMMENT
    COMMENT Class 66
    COMMENT In function 'GlobalSettingsCheckExParam', init exceed id with loop1 index and loop3 index as indices is not equal to TRUE 
    COMMENT
    COMMENT Class 67
    COMMENT In function 'GlobalSettingsCheckExParam', stat of param reading data is equal to PARAM_OK 
    COMMENT
    COMMENT Class 68
    COMMENT In function 'GlobalSettingsCheckExParam', stat of param reading data is not equal to PARAM_OK        
    COMMENT
    COMMENT Class 69
    COMMENT In function 'GlobalSettingsCheckExParam', timer reset state with exceed log index as index is equal to FALSE
    COMMENT
    COMMENT Class 70
    COMMENT In function 'GlobalSettingsCheckExParam', timer reset state with exceed log index as index is not equal to FALSE
    COMMENT
    COMMENT Class 71
    COMMENT In function 'GlobalSettingsCheckExParam', return value of function FlightTimerStartExceed 
    COMMENT with exceed log index as parameter is TRUE
    COMMENT
    COMMENT Class 72
    COMMENT In function 'GlobalSettingsCheckExParam', return value of function FlightTimerStartExceed 
    COMMENT with exceed log index as parameter not is TRUE
    COMMENT
    COMMENT Class 73
    COMMENT In function 'GlobalSettingsCheckExParam', init duration loop1 index and loop3 index as indicies is equal to TRUE  
    COMMENT
    COMMENT Class 74
    COMMENT In function 'GlobalSettingsCheckExParam', init duration loop1 index and loop3 index as indicies is not equal to TRUE 
    COMMENT
    COMMENT Class 75
    COMMENT In function 'GlobalSettingsCheckExParam', flight old status with exceed log index as index is equal to TRUE 
    COMMENT
    COMMENT Class 76
    COMMENT In function 'GlobalSettingsCheckExParam', flight old status with exceed log index as index is not equal to TRUE    
    COMMENT
    COMMENT Class 77
    COMMENT In function 'GlobalSettingsCheckExParam', init peak value with loop1 index and loop3 index as indices is equal to TRUE 
    COMMENT
    COMMENT Class 78
    COMMENT In function 'GlobalSettingsCheckExParam', init peak value with loop1 index and loop3 index as indices is not equal to TRUE 
    COMMENT
    COMMENT Class 79
    COMMENT In function 'GlobalSettingsCheckExParam', Peak_value of Exceedance_log with exceed log index as index
    COMMENT is less than 'r' of  param reading data 
    COMMENT
    COMMENT Class 80
    COMMENT In function 'GlobalSettingsCheckExParam', Peak_value of Exceedance_log with exceed log index as index
    COMMENT is greater than 'r' of  param reading data 
    COMMENT
    COMMENT Class 81
    COMMENT In function 'GlobalSettingsCheckExParam', Peak_value of Exceedance_log with exceed log index as index
    COMMENT is equal to'r' of  param reading data 
    COMMENT
    COMMENT Class 82
    COMMENT In function 'GlobalSettingsCheckExParam', Flight_number of Exceedance_log with exceed log index as index 
    COMMENT is equal to Flight_count
    COMMENT
    COMMENT Class 83
    COMMENT In function 'GlobalSettingsCheckExParam', Flight_number of Exceedance_log with exceed log index as index 
    COMMENT is not equal to Flight_count
    COMMENT
    COMMENT Class 86
    COMMENT In function 'GlobalSettingsCheckExParam', Ex_id_count is greater than EXCEED_LOG_SIZE
    COMMENT
    COMMENT Class 87	
    COMMENT In function 'GlobalSettingsCheckExParam', Ex_id_count is lesser than EXCEED_LOG_SIZE
    COMMENT
    COMMENT Class 88
    COMMENT In function 'GlobalSettingsCheckExParam', Ex_id_count is equal to EXCEED_LOG_SIZE
    COMMENT
    COMMENT Class 89	
    COMMENT In function 'GlobalSettingsCheckTrig', NV ram read is equal to TRUE
    COMMENT
    COMMENT Class 90	
    COMMENT In function 'GlobalSettingsCheckTrig', NV ram read is not equal to TRUE
    COMMENT
    COMMENT Class 91	
    COMMENT In function 'GlobalSettingsCheckTrig', init value is equal to TRUE 
    COMMENT
    COMMENT Class 92	
    COMMENT In function 'GlobalSettingsCheckTrig', init value is not equal to TRUE 
    COMMENT
    COMMENT Class 93	
    COMMENT In function 'GlobalSettingsCheckTrig', label of A429_data with 0 and loop index as indices is equal to
    COMMENT elog_trig_label value with index 0 of Elog_trig
    COMMENT
    COMMENT Class 94	
    COMMENT In function 'GlobalSettingsCheckTrig', label of A429_data with 0 and loop index as indices is not equal to
    COMMENT elog_trig_label value with index 0 of Elog_trig
    COMMENT
    COMMENT Class 95	
    COMMENT In function 'GlobalSettingsCheckTrig', function 'RTDGetParam' is called
    COMMENT
    COMMENT Class 96
    COMMENT In function 'GlobalSettingsCheckTrig', return value of function 'CompareLimit' with 'r' of param reading structure
    COMMENT with loop index as index, elog_trig_start_val with loop index as index of Elog_trig multiplied with 10
    COMMENT and elog_trig_start_type with loop index as index of Elog_trig as parameters is equal to ONE 
    COMMENT
    COMMENT Class 97
    COMMENT In function 'GlobalSettingsCheckTrig', return value of function 'CompareLimit' with 'r' of param reading structure
    COMMENT with loop index as index, elog_trig_start_val with loop index as index of Elog_trig multiplied with 10
    COMMENT and elog_trig_start_type with loop index as index of Elog_trig as parameters is not equal to ONE 
    COMMENT
    COMMENT Class 98
    COMMENT In function 'GlobalSettingsCheckTrig', init start with loop index as index is equal to TRUE
    COMMENT
    COMMENT Class 99
    COMMENT In function 'GlobalSettingsCheckTrig', init start with loop index as index is not equal to TRUE
    COMMENT
    COMMENT Class 100
    COMMENT In function 'GlobalSettingsCheckTrig', stat of param reading data with loop index as index is equal to PARAM_OK.
    COMMENT
    COMMENT Class 101
    COMMENT In function 'GlobalSettingsCheckTrig', stat of param reading data with loop index as index is not equal to PARAM_OK. 
    COMMENT
    COMMENT Class 102
    COMMENT In function 'GlobalSettingsCheckTrig', return value of function 'CompareLimit' with 'r' of param reading structure 
    COMMENT with loop index as index, elog_trig_cross_val with loop index as index of Elog_trig multiplied with TEN
    COMMENT and elog_trig_cross_type with loop index as index of Elog_trig as parameters is equal to ONE     
    COMMENT
    COMMENT Class 103
    COMMENT In function 'GlobalSettingsCheckTrig', return value of function 'CompareLimit' with 'r' of param reading structure 
    COMMENT with loop index as index, elog_trig_cross_val with loop index as index of Elog_trig multiplied with TEN
    COMMENT and elog_trig_cross_type with loop index as index of Elog_trig as parameters is not equal to ONE   
    COMMENT
    COMMENT Class 104
    COMMENT In function 'GlobalSettingsCheckTrig', state variable with loop index as index is equal to FALSE
    COMMENT
    COMMENT Class 105
    COMMENT In function 'GlobalSettingsCheckTrig', state variable with loop index as index is not equal to FALSE  
    COMMENT
    COMMENT Class 106
    COMMENT In function 'GlobalSettingsCheckTrig', init cross with loop index as index is equal to TRUE
    COMMENT
    COMMENT Class 107
    COMMENT In function 'GlobalSettingsCheckTrig', init cross with loop index as index is not equal to TRUE 
    COMMENT    
    COMMENT Class 108
    COMMENT In function 'GlobalSettingsCheckTrig', flight started with loop index as index is equal to TRUE 
    COMMENT
    COMMENT Class 109
    COMMENT In function 'GlobalSettingsCheckTrig', flight started with loop index as index is not equal to TRUE 
    COMMENT
    COMMENT Class 110
    COMMENT In function 'GlobalSettingsCheckTrig', loop index is equal to condition count minus one 
    COMMENT
    COMMENT Class 111
    COMMENT In function 'GlobalSettingsCheckTrig', loop index is not equal to condition count minus one  
    COMMENT
    COMMENT Class 112
    COMMENT In function 'GlobalSettingsCheckTrig', target flight condition is equal to condition count 
    COMMENT
    COMMENT Class 113
    COMMENT In function 'GlobalSettingsCheckTrig', target flight condition is not equal to condition count 
    COMMENT
    COMMENT Class 114
    COMMENT In function 'GlobalSettingsCheckTrig', check trigger condition is equal to 1 
    COMMENT
    COMMENT Class 115
    COMMENT In function 'GlobalSettingsCheckTrig', check trigger condition is not equal to 1    
    COMMENT
    COMMENT Class 116
    COMMENT In function 'GlobalSettingsCheckTrig', Exceedance_startup_check is equal to TRUE
    COMMENT
    COMMENT Class 117
    COMMENT In function 'GlobalSettingsCheckTrig', Exceedance_startup_check is not equal to TRUE
    COMMENT
    COMMENT Class 118
    COMMENT In function 'GlobalSettingsCheckTrig', function 'GlobalSettingsCheckExParam' is called
    COMMENT
    COMMENT Class 119
    COMMENT In function 'GlobalSettingsCheckTrig', re entry with loop index as index is TRUE 
    COMMENT
    COMMENT Class 120
    COMMENT In function 'GlobalSettingsCheckTrig', re entry with loop index as index is not TRUE 
    COMMENT
    COMMENT Class 121
    COMMENT In function 'GlobalSettingsCheckTrig', target flight re entry is equal to condition count 
    COMMENT
    COMMENT Class 122
    COMMENT In function 'GlobalSettingsCheckTrig', target flight re entry is not equal to condition count 
    COMMENT
    COMMENT Class 123
    COMMENT In function 'FlightTimerStart', init variable is TRUE
    COMMENT
    COMMENT Class 124
    COMMENT In function 'FlightTimerStart', init variable is FALSE
    COMMENT
    COMMENT Class 125
    COMMENT In function 'FlightTimerStart', function 'TimerInstall' is called
    COMMENT
    COMMENT Class 126
    COMMENT In function 'FlightTimerStart', function 'Flight_timer' is called   
    COMMENT
    COMMENT Class 127
    COMMENT In function 'FlightTimerStart', function 'TimerPreset' is called
    COMMENT
    COMMENT Class 128
    COMMENT In function 'FlightTimerStart', Flight_timer with flight index as index is greater than flight down  
    COMMENT
    COMMENT Class 129
    COMMENT In function 'FlightTimerStart', Flight_timer with flight index as index is lesser than flight down
    COMMENT
    COMMENT Class 130
    COMMENT In function 'FlightTimerStart', Flight_timer with flight index as index is equal to flight down 
    COMMENT
    COMMENT Class 131
    COMMENT In function 'FlightTimerStartExceed', init variable is TRUE
    COMMENT
    COMMENT Class 132
    COMMENT In function 'FlightTimerStartExceed', init variable is FALSE
    COMMENT
    COMMENT Class 133
    COMMENT In function 'FlightTimerStartExceed', function 'TimerInstall' is called
    COMMENT
    COMMENT Class 134
    COMMENT In function 'FlightTimerStartExceed', function 'Flight_timer_exceed' is called   
    COMMENT
    COMMENT Class 135
    COMMENT In function 'FlightTimerStartExceed', function 'TimerPreset' is called    
    COMMENT
    COMMENT Class 136
    COMMENT In function 'FlightTimerStartExceed', Flight_timer_exceed with flight index as index is greater than TIME_FRAME 
    COMMENT
    COMMENT Class 137
    COMMENT In function 'FlightTimerStartExceed', Flight_timer_exceed with flight index as index is lesser than TIME_FRAME
    COMMENT
    COMMENT Class 138
    COMMENT In function 'FlightTimerStartExceed', Flight_timer_exceed with flight index as index is equal to TIME_FRAME    
    COMMENT
    COMMENT Class 139
    COMMENT The function 'FlightTimerStart', returns 'TRUE'
    COMMENT
    COMMENT Class 140
    COMMENT The function 'FlightTimerStart', returns 'FALSE'
    COMMENT
    COMMENT Class 141
    COMMENT The function 'FlightTimerStartExceed', returns 'TRUE'
    COMMENT
    COMMENT Class 142
    COMMENT The function 'FlightTimerStartExceed', returns 'FALSE'
    COMMENT
    COMMENT Class 143
    COMMENT In the function 'FlightTimerStartExceed', Demo_mode is TRUE
    COMMENT
    COMMENT Class 144	
    COMMENT In the function 'FlightTimerStartExceed', Demo_mode is FALSE
    COMMENT
    COMMENT Class 145
    COMMENT In the function 'GlobalSettingsProcessNSC', Demo_mode is TRUE
    COMMENT
    COMMENT Class 146
    COMMENT In the function 'GlobalSettingsProcessNSC', Demo_mode is FALSE    
    COMMENT
    COMMENT Class 147
    COMMENT In the function 'GlobalSettingsProcessNSC', function 'GlobalSettingsSetSysInfo'is called  
    COMMENT
    COMMENT Class 148
    COMMENT In the function 'GlobalSettingsProcessNSC', function 'GlobalSettingsPush'is called       
    COMMENT
    COMMENT Class 149	
    COMMENT In function 'GlobalSettingsCheckTrig', sdi of Trig_setting is equal to TRUE 
    COMMENT
    COMMENT Class 150	
    COMMENT In function 'GlobalSettingsCheckTrig', sdi of Trig_setting is not equal to TRUE 
    COMMENT
    COMMENT Class 151	
    COMMENT In function 'GlobalSettingsCheckTrig', Engine_started of Trig_setting is not equal to TRUE 
    COMMENT
    COMMENT Class 152
    COMMENT In function 'GlobalSettingsCheckTrig', Engine_started of Trig_setting is equal to TRUE 	
    COMMENT
    COMMENT Class 153
    COMMENT In function 'GlobalSettingsCheckTrig', tgr_fgt_cond of Trig_setting is equal to condition count 
    COMMENT
    COMMENT Class 154
    COMMENT In function 'GlobalSettingsCheckTrig', tgr_fgt_cond of Trig_setting is not equal to condition count
    COMMENT
    COMMENT Class 155
    COMMENT In function 'GlobalSettingsCheckTrig', tgr_fgt_reentry of Trig_setting is equal to condition count 
    COMMENT
    COMMENT Class 156
    COMMENT In function 'GlobalSettingsCheckTrig', tgr_fgt_reentry of Trig_setting is not equal to condition count 	 	
    COMMENT 
    COMMENT   
    COMMENT </ECD>

--------------------------------------------------------------------------------
--
-- STUB DECLARATIONS OF THE TESTED OR INTEGRATED UNITS
--
--------------------------------------------------------------------------------
SIMUL

	DEFINE STUB hdudispfglobalsettings_c

		#void TimerPreset(T_TIMER  _no *timer, T_INT32  _in s32_set_val)
		# {
        #  	 		PTU_timer_Preset[PTU_x++] = *timer;
   		# }

		#void TimerInstall(T_TIMER  _no *timer)
        # {
 		#   if(PTU_COUNT_1==0)
		#   {
        #  	 		PTU_timer_1[PTU_i++] = *timer;
 		#  
		#   }
		#   else
		#   {
        #  	 		PTU_timer_2[PTU_j++] = *timer;
        #   }
		#PTU_COUNT_1++; 
   		# }

		#T_UINT8 CompareLimit(T_FLOAT _in val, T_FLOAT  _in range, T_UINT8  _in operator);

		#void RTDGetParam(T_UINT16 _in a429_tag, T_PARAM_READING  _no *ps_dest)
		#{
        #		*ps_dest = *PTU_ps_dest_in_Param;
        #}		

		#T_A825_XMITRESULT A8252Xmit(T_A825_MESSAGE  _in ps_xm);

        --Parameter ps_dest is made as _no and is verified explicitly
		#void RTDGetParamDdw(T_UINT16  _in a429_tag, T_PARAM_READING _no *ps_dest)
		#{
        #		*ps_dest = PTU_ps_dest_in_Ddw;
        #}

		#void OsTimeDly(T_UWORD _in ticks); 

		#void RestoreStatusReg(T_UINT32  _in U32_critical_sr);

		#T_UINT32 SaveStatusReg(void);

        --Parameter ps_xm is made as _no and is verified explicitly
		#T_A825_XMITRESULT A8251Xmit(T_A825_MESSAGE  _no *ps_xm)
		#{
		#
		#   if(PTU_COUNT==0)
		#   {
		#       PTU_ps_xm_out = *ps_xm;
		#   }
		#   else
		#   {
		#       PTU_ps_xm_out_2 = *ps_xm;
		#   }
		#PTU_COUNT++;
		#
		#}

        --Parameter u32_buffer is made as _no and is verified explicitly
        #T_UINT32 CrcCalculate(T_UINT32 _no *u32_buffer, T_UINT32 _in u32_buffer_length)
        #{
        #   *u32_buffer = *PTU_IN_u32_buffer;
        #
        #}
		#void CrcPages(T_EPAGE_NUM  _in page_count);

	END DEFINE
    
ELSE_SIMUL

        -- No action defined as of now if the module is not simulated

END SIMUL

--------------------------------------------------------------------------------
--
-- ENVIRONMENTS DECLARATIONS
--
--------------------------------------------------------------------------------
--IF HOST

-- No special things that have to be done on the host to run the test.

--ELSE

-- No action defined for the targetexecution as of now

--END IF
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
-- TESTED FILE ENVIRONMENT
--------------------------------------------------------------------------------

-- Environment of the file hdudispfglobalsettings.c
ENVIRONMENT ENV_hdudispfglobalsettings_c

  VAR Nv_crc_fail,								init = FALSE,				ev = init
  VAR Active_eiu,								init = EIU1,				ev = init
  VAR Data_received,							init = FALSE,				ev = init
  VAR Cool_down_state,							init = ECOOLDOWN_ON,		ev = init
  VAR Manual_brightness,						init = 0,					ev = init
  ARRAY Flight_timer_exceed,					init = { others => 0 },		ev = init
  --VAR Flight_count,								init = 0,					ev = init

  VAR Exceedance_log[0..89].Exceedance_index,	init = 0,					ev = init
  VAR Exceedance_log[0..89].Param_name,			init = {others=>0},			ev = init
  VAR Exceedance_log[0..89].Peak_value,			init = 0,					ev = init
  VAR Exceedance_log[0..89].Duration,			init = 0,					ev = init
  VAR Exceedance_log[0..89].Flight_number,		init = 0,					ev = init
  VAR Exceedance_log[0..89].Fst_log_rec_stat,	init = FALSE,				ev = init
  VAR Exceedance_log[0..89].Lst_log_rec,		init = FALSE,				ev = init
  VAR Exceedance_log[0..89].End_transmission,	init = FALSE,				ev = init
  VAR Exceedance_log[0..89].Data_log_rec_stat,	init = FALSE,				ev = init
  VAR Exceedance_log[0..89].Flght_log_rec_stat,	init = FALSE,				ev = init
 
  VAR Brightness_mode,							init = EBRIGHTNESS_MANUAL,	ev = init
  VAR Auto_brightness,							init = 0,					ev = init
  VAR Demo_mode,								init = FALSE,				ev = init
  --ARRAY Flight_timer,							init = { others => 0 },		ev = init
  VAR S32_data_exceed,							init = 0,					ev = init
  VAR Ex_id_count,								init = 0,					ev = init
  VAR Pull_flag,								init = FALSE,				ev = init
  VAR Log_overflow,								init = FALSE,				ev = init
  VAR Demo_mode_activate,						init = FALSE,				ev = init
  
  VAR U32_critical_sr,							init = 0,					ev = init

  VAR Trig_Setting[0..4].init_value,				init = TRUE,				ev = init
  VAR Trig_Setting[0..4].port_index,				init = 0,					ev = init
  VAR Trig_Setting[0..4].Engine_started[0..4],		init = TRUE,				ev = init 
  --VAR Trig_Setting[0..4].s32_data[0..4],		init = {others=>0},			ev = init
  --VAR Cond_cnt[0..4],							init = 0,				ev = init
  VAR Trig_Setting[0..4].Engine_timer[0..4],	init = {others=>0},				ev = init
END ENVIRONMENT -- ENV_hdudispfglobalsettings_c
USE ENV_hdudispfglobalsettings_c

--------------------------------------------------------------------------------
--
-- SERVICES DECLARATIONS
--
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
-- Declaration of the service GlobalSettingsCheckTrig
--------------------------------------------------------------------------------
SERVICE GlobalSettingsCheckTrig
SERVICE_TYPE extern

-- Tested service parameters declarations
#T_A825_MESSAGE s_mess;

TEST 1
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT [hdudispfglobalsettings-GlobalSettingsCheckTrig-DB-LLR-001]
    COMMENT The function 'GlobalSettingsCheckTrig' returns from function when NV ram read is not equal to TRUE.
    COMMENT Equivalence Class 90
    COMMENT
    COMMENT </TD> 

	ELEMENT

		COMMENT INPUT SECTION:
	
			--None
		
		COMMENT OUTPUT SECTION:

			--None

		COMMENT INPUT/OUTPUT SECTION:

			--None

		--Stub Calls:
		SIMUL

			--None

		END SIMUL
		
		-- Calling the Unit Under Test 
		#GlobalSettingsCheckTrig();
	
	END ELEMENT

END TEST -- TEST 1


TEST 2
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT [hdudispfglobalsettings-GlobalSettingsProcessNSC-DB-LLR-002]
    COMMENT The function 'GlobalSettingsProcessNSC' Set NV ram read to true and calls 'CrcCalculate' to calculate CRC with parameters 
    COMMENT au32RawStorage of storage structure,NV_SIZE when node service code is NSC_PULL_MEM.
    COMMENT Equivalence Class 10
    COMMENT
    COMMENT [hdudispfglobalsettings-GlobalSettingsCheckTrig-DB-LLR-001]
    COMMENT The function 'GlobalSettingsCheckTrig' does nothing when NV ram read is equal to TRUE.
    COMMENT (this verifies setting of NV ram read to true in LLR 'hdudispfglobalsettings-GlobalSettingsProcessNSC-DB-LLR-002')
    COMMENT Equivalence Class 89
    COMMENT
    COMMENT [hdudispfglobalsettings-GlobalSettingsCheckTrig-DB-LLR-002]
    COMMENT The function 'GlobalSettingsCheckTrig' does the following,
	COMMENT  1.	Set Cond_cnt value to condition count.
	COMMENT  2.	When init value is equal to TRUE then does the following
	COMMENT     a.loops from zero to condition count-1 and does the following, 
	COMMENT       loops from zero to Port1_label_count-1 and does the following,
	COMMENT       Set port index with loop index plus 1 and break from loop when label of A429_data
	COMMENT       with 0 and loop index as indices is equal to elog_trig_label value with index 0 of Elog_trig.
    COMMENT Equivalence Class 91,93(TT-coverd)
    COMMENT
    COMMENT [hdudispfglobalsettings-GlobalSettingsCheckTrig-DB-LLR-003]	
	COMMENT The function 'GlobalSettingsCheckTrig' loops from zero to condition count-1 when init value is equal
	COMMENT to TRUE then call 'RTDGetParam' function with port index and reference of param reading structure 
	COMMENT with loop index as index as parameters.	
    COMMENT Equivalence Class 91,95
    COMMENT
    COMMENT [hdudispfglobalsettings-GlobalSettingsCheckTrig-DB-LLR-004]
	COMMENT The function 'GlobalSettingsCheckTrig' loops from zero to condition count-1 when init value is equal to TRUE and
	COMMENT -Set init start with loop index as index to TRUE and
	COMMENT -Set Exceedance_startup_check to FALSE 
	COMMENT when return value of function 'CompareLimit' with 'r' of  param reading structure with 
	COMMENT loop index as index, elog_trig_start_val with loop index as index of Elog_trig multiplied with 10 and
	COMMENT elog_trig_start_type with loop index as index of Elog_trig as parameters is equal to ONE AND init start
	COMMENT with loop index as index is not equal to TRUE AND stat of param reading data with loop index as index is equal to PARAM_OK.  
	COMMENT (MCDC TTT)
    COMMENT Equivalence Class 91,96,99,100
    COMMENT
    COMMENT [hdudispfglobalsettings-GlobalSettingsCheckTrig-DB-LLR-005]
	COMMENT The function 'GlobalSettingsCheckTrig' loops from zero to condition count-1 when init value is equal to TRUE and does
	COMMENT the following, when return value of function 'CompareLimit' with 'r' of param reading structure with loop index as index,
	COMMENT elog_trig_cross_val with loop index as index of Elog_trig multiplied with TEN and
	COMMENT elog_trig_cross_type with loop index as index of Elog_trig as parameters is equal to ONE AND
	COMMENT init start with loop index as index is equal to TRUE.(MCDC TT)
	COMMENT (this verifies setting of init start with loop index as index is equal to TRUE in LLR
	COMMENT  'hdudispfglobalsettings-GlobalSettingsCheckTrig-DB-LLR-004')
	COMMENT 1.	Set init start with loop index as index to FALSE
	COMMENT 2.	Set init cross with loop index as index to TRUE
	COMMENT 3.	Does nothing when state variable with loop index as index is equal to TRUE.
	COMMENT 4.	Set state variable with loop index as index is equal to TRUE.    
	COMMENT (MCDC TTT)
    COMMENT Equivalence Class 91,102,98,105
    COMMENT
    COMMENT [hdudispfglobalsettings-GlobalSettingsCheckTrig-DB-LLR-006]
    COMMENT The function 'GlobalSettingsCheckTrig' loops from zero to condition count-1,when init value is equal to TRUE 
    COMMENT and Set the return value of function 'FlightTimerStart' with elog_trig_time with loop index as index of 
    COMMENT Elog_trig and loop index as parameters to flight started with loop index as index when
    COMMENT init cross with loop index as index is equal to TRUE.
    COMMENT Equivalence Class 91,108
    COMMENT
    COMMENT [hdudispfglobalsettings-GlobalSettingsCheckTrig-DB-LLR-007]
    COMMENT The function 'GlobalSettingsCheckTrig' loops from zero to condition count-1,when init value is equal to TRUE
    COMMENT and does the following when flight started with loop index as index is equal to TRUE AND return 
    COMMENT value of function 'CompareLimit' with 'r' of  param reading structure with loop index as index,
    COMMENT elog_trig_cross_val with loop index as index of Elog_trig multiplied with TEN
    COMMENT and elog_trig_cross_type with loop index as index of Elog_trig as parameters is equal to ONE
	COMMENT  1. Increments target flight condition value by 1.
	COMMENT  2. For first 4 calls
	COMMENT       -Function does nothing when loop index is not equal to condition count minus one (MCDC FX)
	COMMENT     For 5th call
	COMMENT  .    -Set target flight condition to zero when loop index is equal to condition count minus one.AND
	COMMENT         target flight condition is not equal to condition count(MCDC TF)
	COMMENT     For 6th call
	COMMENT        -Function does following when loop index is equal to condition count minus one AND
	COMMENT         target flight condition is equal to condition count(MCDC TT)
	COMMENT     	a. Set target flight condition to zero
	COMMENT     	b. Set init value to FALSE
	COMMENT     	c. Increments Flight_count by 1
	COMMENT     	d. Set check trigger condition to 1
	COMMENT     	e. Set Exceedance_startup_check to TRUE.
    COMMENT Equivalence Class 91,108,102,111,110,112,113
    COMMENT
    COMMENT [hdudispfglobalsettings-GlobalSettingsCheckTrig-DB-LLR-008]
    COMMENT The function 'GlobalSettingsCheckTrig' does following when init value is equal to TRUE and 
    COMMENT 	-calls function 'GlobalSettingsCheckExParam' when check trigger condition is equal to 1(MCDC TX For 5th call)
    COMMENT 	-Function does nothing when	check trigger condition is not equal to 1 or
    COMMENT 	 Exceedance_startup_check is not equal to TRUE (MCDC FF From 1st to 4th call)
    COMMENT Equivalence Class 91,118,114,115,117
    COMMENT
    COMMENT [hdudispfglobalsettings-GlobalSettingsCheckTrig-DB-LLR-009]   
    COMMENT The function 'GlobalSettingsCheckTrig' calls function 'GlobalSettingsCheckExParam' when init value is not equal to TRUE.
    COMMENT (this verfies setting of init_value to FALSE in LLR 'hdudispfglobalsettings-GlobalSettingsCheckTrig-DB-LLR-007')
    COMMENT Equivalence Class 118,92
    COMMENT
    COMMENT [hdudispfglobalsettings-GlobalSettingsCheckTrig-DB-LLR-010]
	COMMENT The function 'GlobalSettingsCheckTrig' loops from 0 to condition count-1 and does the following,
	COMMENT the function loops from 0 to Port1_label_count-1 and does the following when label of A429_data with 0 and 
	COMMENT second loop index as indices is equal to elog_trig_label with first loop index as index of Elog_trig,
	COMMENT 1)	Set port index  to second loop index plus 1
	COMMENT 2)	Breaks from the loop.
    COMMENT Equivalence Class 93
    COMMENT
    COMMENT [hdudispfglobalsettings-GlobalSettingsCheckTrig-DB-LLR-011]	
	COMMENT The function 'GlobalSettingsCheckTrig' loops from zero to condition count-1 and calls function 'RTDGetParam'
	COMMENT with port index and reference of param reading strucutre with loop index as index as parameters.	
    COMMENT Equivalence Class 95
    COMMENT
    COMMENT [hdudispfglobalsettings-GlobalSettingsCheckTrig-DB-LLR-012]	
    COMMENT The function 'GlobalSettingsCheckTrig' loops from 0 to condition count-1 and does following when
    COMMENT the following conditions are satisfied,
	COMMENT a)	For the 1st call
	COMMENT       Function does nothing when Init cross with loop index as index is TRUE AND
	COMMENT       flight started with loop index as index is FALSE(MCDC TT)
	COMMENT a)	From 2nd call onwards, function does following when
	COMMENT 	   Init cross with loop index as index is TRUE AND flight started with loop index as index is TRUE(MCDC TF)
	COMMENT b)	Does nothing when return value of function 'CompareLimit' with 'r' of param reading structure with loop index as index,
	COMMENT     elog_trig_cross_val with loop index as index of Elog_trig multiplied with TEN and
	COMMENT     elog_trig_cross_type with loop index as index of Elog_trig as parameters is equal to ONE.
    COMMENT Equivalence Class 106,108,109,102
    COMMENT
    COMMENT [hdudispfglobalsettings-GlobalSettingsCheckTrig-DB-LLR-013]	
    COMMENT The function 'GlobalSettingsCheckTrig' loops from 0 to condition count-1 and does nothing when re entry with 
    COMMENT loop index as index is not TRUE(MCDC FX)
    COMMENT Equivalence Class 120
    COMMENT </TD>

	ELEMENT

		COMMENT INPUT SECTION:
		
        STRUCTURE s_mess,       init = { lcc => EEC, sID => { BID => { sfid => 0, rsd => 0, lcl => 0, pvt => 0, doc => 0, rci => 0 } },
                                            &   u8PaySize => 0, u8PayLoad => { 0 => 0x08, 1 => 0xC0 ,others => 0 } },     ev = init		
		

		VAR Cond_cnt[0..4],										init = 2,								ev = init
		VAR Port1_label_count,									init = 2,								ev = init
		VAR Exceedance_startup_check[0],						init = FALSE,							ev = FALSE		

		COMMENT INPUT/OUTPUT SECTION:
		
		VAR A429_data[0][0..1].label,							init = 1,								ev = init
		VAR A429_data[0][0..1].sdi,								init = 1,								ev = init

		VAR Elog_trig[0..4].elog_trig_label[0..1],					init = 1,								ev = init
		VAR Elog_trig[0..4].elog_trig_sdi[0..1],					init = 0,								ev = init
		VAR Elog_trig[0..4].elog_trig_start_val[0..1],				init = 1,								ev = init
		VAR Elog_trig[0..4].elog_trig_start_type[0..1],				init = 1,								ev = init
		VAR Elog_trig[0..4].elog_trig_cross_val[0..1],				init = 1,								ev = init
		VAR Elog_trig[0..4].elog_trig_cross_type[0..1],				init = 1,								ev = init
		VAR Elog_trig[0..4].elog_trig_time[0..1],					init = 0,								ev = init		
		
		VAR Elog_label[0..4].elog_label,						init = 1,								ev = init
		VAR Elog_label[0..4].elog_sdi,							init = 0,								ev = init
        	
		COMMENT OUTPUT SECTION:

		VAR Trig_setting[0].init_value,								init = TRUE,							ev = TRUE
		VAR Trig_setting[1..4].init_value,							init = FALSE,							ev = init
		VAR Trig_setting[0..4].port_index,							init = 1,								ev = init
		VAR Trig_setting[0..4].s32_data[0..1].r,					init = 1,								ev = 0
		VAR Trig_setting[0..4].init_start[0..1],					init = FALSE,							ev = FALSE
		VAR Trig_setting[0..4].s32_data[0..1].stat,					init = PARAM_OK,						ev = init
		VAR Trig_setting[0..4].init_cross[0..1],					init = TRUE,							ev = FALSE
		VAR Trig_setting[0].state_var[0..1],						init = FALSE,							ev = TRUE
		VAR Trig_setting[1..4].state_var[0..1],						init = FALSE,							ev = init
		VAR Trig_setting[0..4].Engine_timer[0..1],					init = ZERO,							ev = init
		VAR Trig_setting[0..4].Engine_started[0..1],				init = FALSE,							ev = init
		VAR Trig_setting[0..4].chck_trg_cnd,						init = 0,								ev = init
		VAR Trig_setting[0..4].re_entry[0..1],						init = TRUE,							ev = FALSE
		VAR Trig_setting[0..4].tgr_fgt_reentry,						init = 1,								ev = 0
		
		VAR PTU_ps_dest_in_Param[0..4].r,							init = 0,				ev = init
		VAR PTU_ps_dest_in_Param[0..4].stat,						init = PARAM_OK,		ev = init		
 		VAR PTU_COUNT_1,            					init = 0,           	ev = 4

		VAR PTU_timer_1[0],								init = 1,				ev = 0

		VAR PTU_timer_2[0],								init = 1,				ev = 0		
		
		VAR PTU_timer_Preset[0],						init = 1,				ev = 0	
		
		VAR PTU_x,										init = 0,				ev = 2

		VAR PTU_i,										init = 0,				ev = 1

		VAR PTU_j,										init = 0,				ev = 3		
		
		--Holds NV RAM CRC fail check value
			VAR Nv_crc_fail,								init = FALSE,			ev = TRUE

		--Holds the data received state
			VAR Data_received,								init = FALSE,			ev = TRUE		


		--Stub Calls:
		SIMUL

			--Reads the message from RTD
			STUB RTDGetParam 1..12 => (1)	
			
			--Compares value with the range values
			STUB CompareLimit 1 => (0,10,1)ONE
			STUB CompareLimit 2 => (0,10,1)ONE			
			STUB CompareLimit 3..10 => (0,10,1)ONE			
			STUB CompareLimit 11..14 => (0,10,1)ONE			


            --TimerInstall is called to increment the timer
			STUB TimerInstall 1..4=> ()

			--Set the given timer 0
			STUB TimerPreset(0)
			STUB TimerPreset(0)

			--Calculates the CRCs
            STUB CrcCalculate(46) 100			
			
		END SIMUL

        -- Calling this function for 'Nv_ram_read' to be TRUE       
        #GlobalSettingsProcessNSC(&s_mess);

		-- Calling the Unit Under Test 
		#GlobalSettingsCheckTrig();

	END ELEMENT

END TEST -- TEST 2	




TEST 3
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT
    COMMENT
    COMMENT [hdudispfglobalsettings-GlobalSettingsCheckTrig-DB-LLR-012]	
    COMMENT The function 'GlobalSettingsCheckTrig' loops from 0 to condition count-1 and does following when
    COMMENT the following conditions are satisfied,
	COMMENT a)	For the 1st call
	COMMENT       Function does nothing when Init cross with loop index as index is TRUE AND
	COMMENT       flight started with loop index as index is FALSE(MCDC TT)
	COMMENT a)	From 2nd call onwards, function does following when
	COMMENT 	   Init cross with loop index as index is TRUE AND flight started with loop index as index is TRUE(MCDC TF)
	COMMENT b)	Does nothing when return value of function 'CompareLimit' with 'r' of param reading structure with loop index as index,
	COMMENT     elog_trig_cross_val with loop index as index of Elog_trig multiplied with TEN and
	COMMENT     elog_trig_cross_type with loop index as index of Elog_trig as parameters is equal to ONE.
    COMMENT Equivalence Class 106,108,109,102
    COMMENT
    COMMENT [hdudispfglobalsettings-GlobalSettingsCheckTrig-DB-LLR-013]	
    COMMENT The function 'GlobalSettingsCheckTrig' loops from 0 to condition count-1 and does nothing when re entry with 
    COMMENT loop index as index is not TRUE(MCDC FX)
    COMMENT Equivalence Class 120
    COMMENT </TD> 

	ELEMENT

		COMMENT INPUT SECTION:

		VAR Cond_cnt[0..4],										init = 1,								ev = init
		VAR Port1_label_count,									init = 1,								ev = init
		VAR Exceedance_startup_check[0],						init = FALSE,							ev = TRUE		

		COMMENT INPUT/OUTPUT SECTION:
		
		VAR A429_data[0][0].label,								init = 0,								ev = init
		VAR A429_data[0][0].sdi,								init = 1,								ev = init

		VAR Elog_trig[0..4].elog_trig_label[0],					init = 1,								ev = init
		VAR Elog_trig[0..4].elog_trig_sdi[0],					init = 0,								ev = init
		VAR Elog_trig[0..4].elog_trig_start_val[0],				init = 1,								ev = init
		VAR Elog_trig[0..4].elog_trig_start_type[0],			init = 1,								ev = init
		VAR Elog_trig[0..4].elog_trig_cross_val[0],				init = 1,								ev = init
		VAR Elog_trig[0..4].elog_trig_cross_type[0],			init = 1,								ev = init
		VAR Elog_trig[0..4].elog_trig_time[0],					init = 0,								ev = init		
		
		VAR Elog_label[0..4].elog_label,						init = 1,								ev = init
		VAR Elog_label[0..4].elog_sdi,							init = 0,								ev = init
        	
		COMMENT OUTPUT SECTION:

		VAR Trig_setting[0].init_value,							init = TRUE,							ev = FALSE
		VAR Trig_setting[1..4].init_value,							init = TRUE,							ev = init
		VAR Trig_setting[0..4].port_index,							init = 1,								ev = init
		VAR Trig_setting[0..4].s32_data[0].r,						init = 1,								ev = 0
		VAR Trig_setting[0..4].init_start[0],						init = FALSE,							ev = FALSE
		VAR Trig_setting[0..4].s32_data[0].stat,					init = PARAM_OK,						ev = init
		VAR Trig_setting[0..4].init_cross[0],						init = TRUE,							ev = FALSE
		VAR Trig_setting[0..4].state_var[0],						init = TRUE,							ev = TRUE
		VAR Trig_setting[0].Engine_timer[0],						init = 100,								ev = 100
		VAR Trig_setting[1..4].Engine_timer[0],						init = 100,								ev = 0
		VAR Trig_setting[0].Engine_started[0],					init = TRUE,							ev = init
		VAR Trig_setting[1..4].Engine_started[0],					init = TRUE,							ev = FALSE
		VAR Trig_setting[0..4].chck_trg_cnd,						init = 1,								ev = init
		VAR Trig_setting[0..4].re_entry[0],							init = TRUE,							ev = FALSE
		VAR Trig_setting[0..4].tgr_fgt_reentry,						init = 1,								ev = 0
		VAR Trig_setting[0..4].tgr_fgt_cond,						init = 0,								ev = 0
		
		VAR PTU_ps_dest_in_Param[0..4].r,							init = 0,				ev = init
		VAR PTU_ps_dest_in_Param[0..4].stat,						init = PARAM_OK,		ev = init	


		
		--Stub Calls:
		SIMUL

			--Reads the message from RTD
			STUB RTDGetParam 1..10 => (1)	
			
			--Compares value with the range values
			STUB CompareLimit 1..5 => (0,10,1)ONE
			STUB CompareLimit 6..10 => (0,10,1)ONE			
			STUB CompareLimit 11..17 => (0,10,1)ONE						
			
			STUB TimerPreset 1..4 =>(0)		

            --TimerInstall is called to increment the timer
			STUB TimerInstall 1..8=> ()			


		END SIMUL


		-- Calling the Unit Under Test 
		#GlobalSettingsCheckTrig();

	END ELEMENT

END TEST -- TEST 3



TEST 4
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT	[hdudispfglobalsettings-GlobalSettingsCheckTrig-DB-LLR-006]
    COMMENT	The function shall loop from zero to (MAX_ELOG_EVENT minus one) and do the following,
    COMMENT	The function shall loop from zero to (condition count with index as loop counter – 1) 
    COMMENT	if init_value of Trig_setting with index as loop counter is equal to TRUE and set the return 
    COMMENT	value of function FlightTimerStart elog_trig_time with loop index as index of Elog_trig with index as 
    COMMENT	loop counter and loop index and loop index as parameters to Engine started with loop index as index of 
    COMMENT	Trig_setting with index as loop counter if init_cross with loop index as index of Trig_setting with index 
    COMMENT	as loop counter is equal to TRUE.
    COMMENT	Equivalence Class 106
	COMMENT 
    COMMENT [hdudispfglobalsettings-GlobalSettingsCheckTrig-DB-LLR-007]
    COMMENT 1.	Increment target flight condition value by 1.
    COMMENT 2.	If loop index is equal to (condition count with index as loop counter minus one) AND target flight condition of Trig_setting
    COMMENT  with index as loop counter is equal to condition count with index as loop counter then do the following,
    COMMENT a.	Set target flight condition of Trig_setting with index as loop counter to zero
    COMMENT b.	Set init value of Trig_setting with index as loop counter to FALSE
    COMMENT c.	Increment Flight_count by 1 if Exceedance_startup_check with index zero is equal to FALSE 
    COMMENT AND Exceedance_startup_check with index one is equal to FALSE AND Exceedance_startup_check with index two 
    COMMENT is equal to FALSE AND Exceedance_startup_check with index three is equal to FALSE AND Exceedance_startup_check 
    COMMENT with index four is equal to FALSE
    COMMENT d.	Set chck_trg_cnd of Trig_setting with index as loop counter to 1
    COMMENT e.   Set Exceedance_startup_check with index as loop counter to TRUE.
    COMMENT Equivalence Class 110,155 (FXXX)
    COMMENT </TD> 

	ELEMENT

		COMMENT INPUT SECTION:

		VAR Cond_cnt[0..4],										init = 1,								ev = init
		VAR Port1_label_count,									init = 1,								ev = init
		VAR Exceedance_startup_check[0],						init = FALSE,							ev = init		
		VAR Exceedance_startup_check[1],						init = FALSE,							ev = TRUE		
		VAR Exceedance_startup_check[2],						init = FALSE,							ev = TRUE		
		VAR Exceedance_startup_check[3],						init = FALSE,							ev = TRUE		
		VAR Exceedance_startup_check[4],						init = TRUE,							ev = TRUE		

		COMMENT INPUT/OUTPUT SECTION:
		
		VAR A429_data[0][0].label,								init = 0,								ev = init
		VAR A429_data[0][0].sdi,								init = 1,								ev = init

		VAR Elog_trig[0..4].elog_trig_label[0],					init = 1,								ev = init
		VAR Elog_trig[0..4].elog_trig_sdi[0],					init = 0,								ev = init
		VAR Elog_trig[0..4].elog_trig_start_val[0],				init = 1,								ev = init
		VAR Elog_trig[0..4].elog_trig_start_type[0],			init = 0,								ev = init
		VAR Elog_trig[0..4].elog_trig_cross_val[0],				init = 1,								ev = init
		VAR Elog_trig[0..4].elog_trig_cross_type[0],			init = 1,								ev = init
		VAR Elog_trig[0..4].elog_trig_time[0],					init = 0,								ev = init		
		
		VAR Elog_label[0..4].elog_label,						init = 1,								ev = init
		VAR Elog_label[0..4].elog_sdi,							init = 0,								ev = init
        	
		COMMENT OUTPUT SECTION:

		VAR Trig_setting[0].init_value,							init = TRUE,							ev = init
		VAR Trig_setting[1..4].init_value,							init = TRUE,							ev = FALSE
		VAR Trig_setting[0..4].port_index,							init = 1,								ev = init
		VAR Trig_setting[0..4].s32_data[0].r,						init = 1,								ev = init
		VAR Trig_setting[0].init_start[0],						init = TRUE,							ev = init
		VAR Trig_setting[1..4].init_start[0],						init = TRUE,							ev = FALSE
		VAR Trig_setting[0..4].s32_data[0].stat,					init = PARAM_OK,						ev = init
		VAR Trig_setting[0..4].init_cross[0],						init = TRUE,							ev = FALSE
		VAR Trig_setting[0..4].state_var[0],						init = TRUE,							ev = TRUE
		VAR Trig_setting[0..4].Engine_timer[0],						init = 100,								ev = init
		VAR Trig_setting[0..4].Engine_started[0],					init = TRUE,							ev = init
		VAR Trig_setting[0..4].chck_trg_cnd,						init = 1,								ev = init
		VAR Trig_setting[0..4].re_entry[0],							init = TRUE,							ev = FALSE
		VAR Trig_setting[0..4].tgr_fgt_reentry,						init = 1,								ev = 0
		VAR Trig_setting[0..4].tgr_fgt_cond,						init = 0,								ev = 0
		
		VAR PTU_ps_dest_in_Param[0..4].r,							init = 1,				ev = init
		VAR PTU_ps_dest_in_Param[0..4].stat,						init = PARAM_OK,		ev = init			


			
		
		--Stub Calls:
		SIMUL

			--Reads the message from RTD
			STUB RTDGetParam 1..10 => (1)	
			
			--Compares value with the range values
			STUB CompareLimit 1 => (1,10,0)0
			STUB CompareLimit 2..3 => (1,10,1)0
			STUB CompareLimit 4 => (1,10,0)0
			STUB CompareLimit 5..6 => (1,10,1)ONE
			STUB CompareLimit 7 => (1,10,0)0		
			STUB CompareLimit 8..9 => (1,10,1)ONE
			STUB CompareLimit 10 => (1,10,0)0	
			STUB CompareLimit 11..12 => (1,10,1)ONE	
			STUB CompareLimit 13 => (1,10,0)ONE		
			STUB CompareLimit 14..15=> (1,10,1)ONE		
			STUB CompareLimit 16 => (1,10,1)ONE	
			STUB CompareLimit 17 => (1,10,0)ONE	
			STUB CompareLimit 18 => (1,10,1)ONE		
			STUB CompareLimit 19 => (1,10,0)ONE
			STUB CompareLimit 20 => (1,10,1)ONE
			STUB CompareLimit 21 => (1,10,0)ONE
			STUB CompareLimit 22 => (1,10,1)ONE
			STUB CompareLimit 23 => (1,10,0)ONE
			STUB CompareLimit 24 => (1,10,1)ONE	
			STUB CompareLimit 25 => (1,10,0)ONE			


		END SIMUL


		-- Calling the Unit Under Test 
		#GlobalSettingsCheckTrig();

	END ELEMENT

END TEST -- TEST 4



TEST 5
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT
    COMMENT	[hdudispfglobalsettings-GlobalSettingsCheckTrig-DB-LLR-006]
    COMMENT	The function shall loop from zero to (MAX_ELOG_EVENT minus one) and do the following,
    COMMENT	The function shall loop from zero to (condition count with index as loop counter – 1) 
    COMMENT	if init_value of Trig_setting with index as loop counter is equal to TRUE and set the return 
    COMMENT	value of function FlightTimerStart elog_trig_time with loop index as index of Elog_trig with index as 
    COMMENT	loop counter and loop index and loop index as parameters to Engine started with loop index as index of 
    COMMENT	Trig_setting with index as loop counter if init_cross with loop index as index of Trig_setting with index 
    COMMENT	as loop counter is equal to TRUE.
    COMMENT	Equivalence Class 106
	COMMENT 
    COMMENT [hdudispfglobalsettings-GlobalSettingsCheckTrig-DB-LLR-007]
    COMMENT 1.	Increment target flight condition value by 1.
    COMMENT 2.	If loop index is equal to (condition count with index as loop counter minus one) AND target flight condition of Trig_setting
    COMMENT  with index as loop counter is equal to condition count with index as loop counter then do the following,
    COMMENT a.	Set target flight condition of Trig_setting with index as loop counter to zero
    COMMENT b.	Set init value of Trig_setting with index as loop counter to FALSE
    COMMENT c.	Increment Flight_count by 1 if Exceedance_startup_check with index zero is equal to FALSE 
    COMMENT AND Exceedance_startup_check with index one is equal to FALSE AND Exceedance_startup_check with index two 
    COMMENT is equal to FALSE AND Exceedance_startup_check with index three is equal to FALSE AND Exceedance_startup_check 
    COMMENT with index four is equal to FALSE
    COMMENT d.	Set chck_trg_cnd of Trig_setting with index as loop counter to 1
    COMMENT e.   Set Exceedance_startup_check with index as loop counter to TRUE.
    COMMENT Equivalence Class 110,155
    COMMENT </TD> 

	ELEMENT

		COMMENT INPUT SECTION:

		VAR Cond_cnt[0..4],										init = 1,								ev = init
		VAR Port1_label_count,									init = 1,								ev = init
		VAR Exceedance_startup_check[0],						init = FALSE,							ev = init		
		VAR Exceedance_startup_check[1],						init = FALSE,							ev = TRUE		
		VAR Exceedance_startup_check[2],						init = FALSE,							ev = TRUE		
		VAR Exceedance_startup_check[3],						init = TRUE,							ev = TRUE		
		VAR Exceedance_startup_check[4],						init = TRUE,							ev = TRUE		

		COMMENT INPUT/OUTPUT SECTION:
		
		VAR A429_data[0][0].label,								init = 0,								ev = init
		VAR A429_data[0][0].sdi,								init = 1,								ev = init

		VAR Elog_trig[0..4].elog_trig_label[0],					init = 1,								ev = init
		VAR Elog_trig[0..4].elog_trig_sdi[0],					init = 0,								ev = init
		VAR Elog_trig[0..4].elog_trig_start_val[0],				init = 1,								ev = init
		VAR Elog_trig[0..4].elog_trig_start_type[0],			init = 0,								ev = init
		VAR Elog_trig[0..4].elog_trig_cross_val[0],				init = 1,								ev = init
		VAR Elog_trig[0..4].elog_trig_cross_type[0],			init = 1,								ev = init
		VAR Elog_trig[0..4].elog_trig_time[0],					init = 0,								ev = init		
		
		VAR Elog_label[0..4].elog_label,						init = 1,								ev = init
		VAR Elog_label[0..4].elog_sdi,							init = 0,								ev = init
        	
		COMMENT OUTPUT SECTION:

		VAR Trig_setting[0].init_value,							init = TRUE,							ev = init
		VAR Trig_setting[1..4].init_value,							init = TRUE,							ev = FALSE
		VAR Trig_setting[0..4].port_index,							init = 1,								ev = init
		VAR Trig_setting[0..4].s32_data[0].r,						init = 1,								ev = init
		VAR Trig_setting[0].init_start[0],						init = TRUE,							ev = init
		VAR Trig_setting[1..4].init_start[0],						init = TRUE,							ev = FALSE
		VAR Trig_setting[0..4].s32_data[0].stat,					init = PARAM_OK,						ev = init
		VAR Trig_setting[0..4].init_cross[0],						init = TRUE,							ev = FALSE
		VAR Trig_setting[0..4].state_var[0],						init = TRUE,							ev = TRUE
		VAR Trig_setting[0..4].Engine_timer[0],						init = 100,								ev = init
		VAR Trig_setting[0..4].Engine_started[0],					init = TRUE,							ev = init
		VAR Trig_setting[0..4].chck_trg_cnd,						init = 1,								ev = init
		VAR Trig_setting[0..4].re_entry[0],							init = TRUE,							ev = FALSE
		VAR Trig_setting[0..4].tgr_fgt_reentry,						init = 1,								ev = 0
		VAR Trig_setting[0..4].tgr_fgt_cond,						init = 0,								ev = 0
		
		VAR PTU_ps_dest_in_Param[0..4].r,							init = 1,				ev = init
		VAR PTU_ps_dest_in_Param[0..4].stat,						init = PARAM_OK,		ev = init			


		

		--Stub Calls:
		SIMUL

			--Reads the message from RTD
			STUB RTDGetParam 1..10 => (1)	
			
			--Compares value with the range values
			STUB CompareLimit 1 => (1,10,0)0
			STUB CompareLimit 2..3 => (1,10,1)0
			STUB CompareLimit 4 => (1,10,0)0
			STUB CompareLimit 5..6 => (1,10,1)ONE
			STUB CompareLimit 7 => (1,10,0)0		
			STUB CompareLimit 8..9 => (1,10,1)ONE
			STUB CompareLimit 10 => (1,10,0)0	
			STUB CompareLimit 11..12 => (1,10,1)ONE	
			STUB CompareLimit 13 => (1,10,0)ONE		
			STUB CompareLimit 14..15=> (1,10,1)ONE		
			STUB CompareLimit 16 => (1,10,1)ONE	
			STUB CompareLimit 17 => (1,10,0)ONE	
			STUB CompareLimit 18 => (1,10,1)ONE		
			STUB CompareLimit 19 => (1,10,0)ONE
			STUB CompareLimit 20 => (1,10,1)ONE
			STUB CompareLimit 21 => (1,10,0)ONE			
			STUB CompareLimit 22 => (1,10,1)ONE	
			STUB CompareLimit 23 => (1,10,0)ONE
			STUB CompareLimit 24 => (1,10,1)ONE	
			STUB CompareLimit 25 => (1,10,0)ONE		


		END SIMUL


		-- Calling the Unit Under Test 
		#GlobalSettingsCheckTrig();

	END ELEMENT

END TEST -- TEST 5

TEST 6
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT	[hdudispfglobalsettings-GlobalSettingsCheckTrig-DB-LLR-006]
    COMMENT	The function shall loop from zero to (MAX_ELOG_EVENT minus one) and do the following,
    COMMENT	The function shall loop from zero to (condition count with index as loop counter – 1) 
    COMMENT	if init_value of Trig_setting with index as loop counter is equal to TRUE and set the return 
    COMMENT	value of function FlightTimerStart elog_trig_time with loop index as index of Elog_trig with index as 
    COMMENT	loop counter and loop index and loop index as parameters to Engine started with loop index as index of 
    COMMENT	Trig_setting with index as loop counter if init_cross with loop index as index of Trig_setting with index 
    COMMENT	as loop counter is equal to TRUE.
    COMMENT	Equivalence Class 106
	COMMENT 
    COMMENT [hdudispfglobalsettings-GlobalSettingsCheckTrig-DB-LLR-007]
    COMMENT 1.	Increment target flight condition value by 1.
    COMMENT 2.	If loop index is equal to (condition count with index as loop counter minus one) AND target flight condition of Trig_setting
    COMMENT  with index as loop counter is equal to condition count with index as loop counter then do the following,
    COMMENT a.	Set target flight condition of Trig_setting with index as loop counter to zero
    COMMENT b.	Set init value of Trig_setting with index as loop counter to FALSE
    COMMENT c.	Increment Flight_count by 1 if Exceedance_startup_check with index zero is equal to FALSE 
    COMMENT AND Exceedance_startup_check with index one is equal to FALSE AND Exceedance_startup_check with index two 
    COMMENT is equal to FALSE AND Exceedance_startup_check with index three is equal to FALSE AND Exceedance_startup_check 
    COMMENT with index four is equal to FALSE
    COMMENT d.	Set chck_trg_cnd of Trig_setting with index as loop counter to 1
    COMMENT e.   Set Exceedance_startup_check with index as loop counter to TRUE.
    COMMENT Equivalence Class 110,155 ()
    COMMENT </TD> 

	ELEMENT

		COMMENT INPUT SECTION:

		VAR Cond_cnt[0..4],										init = 1,								ev = init
		VAR Port1_label_count,									init = 1,								ev = init
		VAR Exceedance_startup_check[0],						init = FALSE,							ev = init		
		VAR Exceedance_startup_check[1],						init = FALSE,							ev = TRUE		
		VAR Exceedance_startup_check[2],						init = TRUE,							ev = TRUE		
		VAR Exceedance_startup_check[3],						init = TRUE,							ev = TRUE		
		VAR Exceedance_startup_check[4],						init = TRUE,							ev = TRUE		

		COMMENT INPUT/OUTPUT SECTION:
		
		VAR A429_data[0][0].label,								init = 0,								ev = init
		VAR A429_data[0][0].sdi,								init = 1,								ev = init

		VAR Elog_trig[0..4].elog_trig_label[0],					init = 1,								ev = init
		VAR Elog_trig[0..4].elog_trig_sdi[0],					init = 0,								ev = init
		VAR Elog_trig[0..4].elog_trig_start_val[0],				init = 1,								ev = init
		VAR Elog_trig[0..4].elog_trig_start_type[0],			init = 0,								ev = init
		VAR Elog_trig[0..4].elog_trig_cross_val[0],				init = 1,								ev = init
		VAR Elog_trig[0..4].elog_trig_cross_type[0],			init = 1,								ev = init
		VAR Elog_trig[0..4].elog_trig_time[0],					init = 0,								ev = init		
		
		VAR Elog_label[0..4].elog_label,						init = 1,								ev = init
		VAR Elog_label[0..4].elog_sdi,							init = 0,								ev = init
        	
		COMMENT OUTPUT SECTION:

		VAR Trig_setting[0].init_value,							init = TRUE,							ev = init
		VAR Trig_setting[1..4].init_value,							init = TRUE,							ev = FALSE
		VAR Trig_setting[0..4].port_index,							init = 1,								ev = init
		VAR Trig_setting[0..4].s32_data[0].r,						init = 1,								ev = init
		VAR Trig_setting[0].init_start[0],						init = TRUE,							ev = init
		VAR Trig_setting[1..4].init_start[0],						init = TRUE,							ev = FALSE
		VAR Trig_setting[0..4].s32_data[0].stat,					init = PARAM_OK,						ev = init
		VAR Trig_setting[0..4].init_cross[0],						init = TRUE,							ev = FALSE
		VAR Trig_setting[0..4].state_var[0],						init = TRUE,							ev = TRUE
		VAR Trig_setting[0..4].Engine_timer[0],						init = 100,								ev = init
		VAR Trig_setting[0..4].Engine_started[0],					init = TRUE,							ev = init
		VAR Trig_setting[0..4].chck_trg_cnd,						init = 1,								ev = init
		VAR Trig_setting[0..4].re_entry[0],							init = TRUE,							ev = FALSE
		VAR Trig_setting[0..4].tgr_fgt_reentry,						init = 1,								ev = 0
		VAR Trig_setting[0..4].tgr_fgt_cond,						init = 0,								ev = 0
		
		VAR PTU_ps_dest_in_Param[0..4].r,							init = 1,				ev = init
		VAR PTU_ps_dest_in_Param[0..4].stat,						init = PARAM_OK,		ev = init			
	
		

		--Stub Calls:
		SIMUL

			--Reads the message from RTD
			STUB RTDGetParam 1..10 => (1)	
			
			--Compares value with the range values
			STUB CompareLimit 1 => (1,10,0)0
			STUB CompareLimit 2..3 => (1,10,1)0
			STUB CompareLimit 4 => (1,10,0)0
			STUB CompareLimit 5..6 => (1,10,1)ONE
			STUB CompareLimit 7 => (1,10,0)0		
			STUB CompareLimit 8..9 => (1,10,1)ONE
			STUB CompareLimit 10 => (1,10,0)0	
			STUB CompareLimit 11..12 => (1,10,1)ONE	
			STUB CompareLimit 13 => (1,10,0)ONE		
			STUB CompareLimit 14..15=> (1,10,1)ONE		
			STUB CompareLimit 16 => (1,10,1)ONE	
			STUB CompareLimit 17 => (1,10,0)ONE	
			STUB CompareLimit 18 => (1,10,1)ONE		
			STUB CompareLimit 19 => (1,10,0)ONE
			STUB CompareLimit 20 => (1,10,1)ONE
			STUB CompareLimit 21 => (1,10,0)ONE			
			STUB CompareLimit 22 => (1,10,1)ONE	
			STUB CompareLimit 23 => (1,10,0)ONE
			STUB CompareLimit 24 => (1,10,1)ONE	
			STUB CompareLimit 25 => (1,10,0)ONE			


		END SIMUL


		-- Calling the Unit Under Test 
		#GlobalSettingsCheckTrig();

	END ELEMENT

END TEST -- TEST 6

TEST 7
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT
    COMMENT	[hdudispfglobalsettings-GlobalSettingsCheckTrig-DB-LLR-006]
    COMMENT	The function shall loop from zero to (MAX_ELOG_EVENT minus one) and do the following,
    COMMENT	The function shall loop from zero to (condition count with index as loop counter – 1) 
    COMMENT	if init_value of Trig_setting with index as loop counter is equal to TRUE and set the return 
    COMMENT	value of function FlightTimerStart elog_trig_time with loop index as index of Elog_trig with index as 
    COMMENT	loop counter and loop index and loop index as parameters to Engine started with loop index as index of 
    COMMENT	Trig_setting with index as loop counter if init_cross with loop index as index of Trig_setting with index 
    COMMENT	as loop counter is equal to TRUE.
    COMMENT	Equivalence Class 106
	COMMENT 
    COMMENT [hdudispfglobalsettings-GlobalSettingsCheckTrig-DB-LLR-007]
    COMMENT 1.	Increment target flight condition value by 1.
    COMMENT 2.	If loop index is equal to (condition count with index as loop counter minus one) AND target flight condition of Trig_setting
    COMMENT  with index as loop counter is equal to condition count with index as loop counter then do the following,
    COMMENT a.	Set target flight condition of Trig_setting with index as loop counter to zero
    COMMENT b.	Set init value of Trig_setting with index as loop counter to FALSE
    COMMENT c.	Increment Flight_count by 1 if Exceedance_startup_check with index zero is equal to FALSE 
    COMMENT AND Exceedance_startup_check with index one is equal to FALSE AND Exceedance_startup_check with index two 
    COMMENT is equal to FALSE AND Exceedance_startup_check with index three is equal to FALSE AND Exceedance_startup_check 
    COMMENT with index four is equal to FALSE
    COMMENT d.	Set chck_trg_cnd of Trig_setting with index as loop counter to 1
    COMMENT e.   Set Exceedance_startup_check with index as loop counter to TRUE.
    COMMENT Equivalence Class 110,155
    COMMENT </TD> 

	ELEMENT

		COMMENT INPUT SECTION:

		VAR Cond_cnt[0..4],										init = 1,								ev = init
		VAR Port1_label_count,									init = 1,								ev = init
		VAR Exceedance_startup_check[0],						init = FALSE,							ev = init		
		VAR Exceedance_startup_check[1],						init = TRUE,							ev = TRUE		
		VAR Exceedance_startup_check[2],						init = TRUE,							ev = TRUE		
		VAR Exceedance_startup_check[3],						init = TRUE,							ev = TRUE		
		VAR Exceedance_startup_check[4],						init = TRUE,							ev = TRUE		

		COMMENT INPUT/OUTPUT SECTION:
		
		VAR A429_data[0][0].label,								init = 0,								ev = init
		VAR A429_data[0][0].sdi,								init = 1,								ev = init

		VAR Elog_trig[0..4].elog_trig_label[0],					init = 1,								ev = init
		VAR Elog_trig[0..4].elog_trig_sdi[0],					init = 0,								ev = init
		VAR Elog_trig[0..4].elog_trig_start_val[0],				init = 1,								ev = init
		VAR Elog_trig[0..4].elog_trig_start_type[0],			init = 0,								ev = init
		VAR Elog_trig[0..4].elog_trig_cross_val[0],				init = 1,								ev = init
		VAR Elog_trig[0..4].elog_trig_cross_type[0],			init = 1,								ev = init
		VAR Elog_trig[0..4].elog_trig_time[0],					init = 0,								ev = init		
		
		VAR Elog_label[0..4].elog_label,						init = 1,								ev = init
		VAR Elog_label[0..4].elog_sdi,							init = 0,								ev = init
        	
		COMMENT OUTPUT SECTION:

		VAR Trig_setting[0].init_value,							init = TRUE,							ev = init
		VAR Trig_setting[1..4].init_value,							init = TRUE,							ev = FALSE
		VAR Trig_setting[0..4].port_index,							init = 1,								ev = init
		VAR Trig_setting[0..4].s32_data[0].r,						init = 1,								ev = init
		VAR Trig_setting[0].init_start[0],						init = TRUE,							ev = init
		VAR Trig_setting[1..4].init_start[0],						init = TRUE,							ev = FALSE
		VAR Trig_setting[0..4].s32_data[0].stat,					init = PARAM_OK,						ev = init
		VAR Trig_setting[0..4].init_cross[0],						init = TRUE,							ev = FALSE
		VAR Trig_setting[0..4].state_var[0],						init = TRUE,							ev = TRUE
		VAR Trig_setting[0..4].Engine_timer[0],						init = 100,								ev = init
		VAR Trig_setting[0..4].Engine_started[0],					init = TRUE,							ev = init
		VAR Trig_setting[0..4].chck_trg_cnd,						init = 1,								ev = init
		VAR Trig_setting[0..4].re_entry[0],							init = TRUE,							ev = FALSE
		VAR Trig_setting[0..4].tgr_fgt_reentry,						init = 1,								ev = 0
		VAR Trig_setting[0..4].tgr_fgt_cond,						init = 0,								ev = 0
		
		VAR PTU_ps_dest_in_Param[0..4].r,							init = 1,				ev = init
		VAR PTU_ps_dest_in_Param[0..4].stat,						init = PARAM_OK,		ev = init			
	
		

		--Stub Calls:
		SIMUL

			--Reads the message from RTD
			STUB RTDGetParam 1..10 => (1)	
			
			--Compares value with the range values
			STUB CompareLimit 1 => (1,10,0)0
			STUB CompareLimit 2..3 => (1,10,1)0
			STUB CompareLimit 4 => (1,10,0)0
			STUB CompareLimit 5..6 => (1,10,1)ONE
			STUB CompareLimit 7 => (1,10,0)0		
			STUB CompareLimit 8..9 => (1,10,1)ONE
			STUB CompareLimit 10 => (1,10,0)0	
			STUB CompareLimit 11..12 => (1,10,1)ONE	
			STUB CompareLimit 13 => (1,10,0)ONE		
			STUB CompareLimit 14..15=> (1,10,1)ONE		
			STUB CompareLimit 16 => (1,10,1)ONE	
			STUB CompareLimit 17 => (1,10,0)ONE	
			STUB CompareLimit 18 => (1,10,1)ONE		
			STUB CompareLimit 19 => (1,10,0)ONE
			STUB CompareLimit 20 => (1,10,1)ONE
			STUB CompareLimit 21 => (1,10,0)ONE			
			STUB CompareLimit 22 => (1,10,1)ONE		
			STUB CompareLimit 23 => (1,10,0)ONE
			STUB CompareLimit 24 => (1,10,1)ONE	
			STUB CompareLimit 25 => (1,10,0)ONE		


		END SIMUL


		-- Calling the Unit Under Test 
		#GlobalSettingsCheckTrig();

	END ELEMENT

END TEST -- TEST 7


TEST 8
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT
    COMMENT	[hdudispfglobalsettings-GlobalSettingsCheckTrig-DB-LLR-006]
    COMMENT	The function shall loop from zero to (MAX_ELOG_EVENT minus one) and do the following,
    COMMENT	The function shall loop from zero to (condition count with index as loop counter – 1) 
    COMMENT	if init_value of Trig_setting with index as loop counter is equal to TRUE and set the return 
    COMMENT	value of function FlightTimerStart elog_trig_time with loop index as index of Elog_trig with index as 
    COMMENT	loop counter and loop index and loop index as parameters to Engine started with loop index as index of 
    COMMENT	Trig_setting with index as loop counter if init_cross with loop index as index of Trig_setting with index 
    COMMENT	as loop counter is equal to TRUE.
    COMMENT	Equivalence Class 106
	COMMENT 
    COMMENT [hdudispfglobalsettings-GlobalSettingsCheckTrig-DB-LLR-007]
    COMMENT 1.	Increment target flight condition value by 1.
    COMMENT 2.	If loop index is equal to (condition count with index as loop counter minus one) AND target flight condition of Trig_setting
    COMMENT  with index as loop counter is equal to condition count with index as loop counter then do the following,
    COMMENT a.	Set target flight condition of Trig_setting with index as loop counter to zero
    COMMENT b.	Set init value of Trig_setting with index as loop counter to FALSE
    COMMENT c.	Increment Flight_count by 1 if Exceedance_startup_check with index zero is equal to FALSE 
    COMMENT AND Exceedance_startup_check with index one is equal to FALSE AND Exceedance_startup_check with index two 
    COMMENT is equal to FALSE AND Exceedance_startup_check with index three is equal to FALSE AND Exceedance_startup_check 
    COMMENT with index four is equal to FALSE
    COMMENT d.	Set chck_trg_cnd of Trig_setting with index as loop counter to 1
    COMMENT e.   Set Exceedance_startup_check with index as loop counter to TRUE.
    COMMENT Equivalence Class 110,155 ()
    COMMENT Equivalence Class 120
    COMMENT </TD>  

	ELEMENT

		COMMENT INPUT SECTION:

		VAR Cond_cnt[0..4],										init = 1,								ev = init
		VAR Port1_label_count,									init = 1,								ev = init
		VAR Exceedance_startup_check[0],						init = TRUE,							ev = TRUE		
		VAR Exceedance_startup_check[1],						init = TRUE,							ev = TRUE		
		VAR Exceedance_startup_check[2],						init = TRUE,							ev = TRUE		
		VAR Exceedance_startup_check[3],						init = TRUE,							ev = TRUE		
		VAR Exceedance_startup_check[4],						init = TRUE,							ev = TRUE		

		COMMENT INPUT/OUTPUT SECTION:
		
		VAR A429_data[0][0].label,								init = 0,								ev = init
		VAR A429_data[0][0].sdi,								init = 1,								ev = init

		VAR Elog_trig[0..4].elog_trig_label[0],					init = 1,								ev = init
		VAR Elog_trig[0..4].elog_trig_sdi[0],					init = 0,								ev = init
		VAR Elog_trig[0..4].elog_trig_start_val[0],				init = 1,								ev = init
		VAR Elog_trig[0..4].elog_trig_start_type[0],			init = 0,								ev = init
		VAR Elog_trig[0..4].elog_trig_cross_val[0],				init = 1,								ev = init
		VAR Elog_trig[0..4].elog_trig_cross_type[0],			init = 1,								ev = init
		VAR Elog_trig[0..4].elog_trig_time[0],					init = 0,								ev = init		
		
		VAR Elog_label[0..4].elog_label,						init = 1,								ev = init
		VAR Elog_label[0..4].elog_sdi,							init = 0,								ev = init
        	
		COMMENT OUTPUT SECTION:

		VAR Trig_setting[0].init_value,							init = TRUE,							ev = init
		VAR Trig_setting[1..4].init_value,							init = TRUE,							ev = FALSE
		VAR Trig_setting[0..4].port_index,							init = 1,								ev = init
		VAR Trig_setting[0..4].s32_data[0].r,						init = 1,								ev = init
		VAR Trig_setting[0].init_start[0],						init = TRUE,							ev = init
		VAR Trig_setting[1..4].init_start[0],						init = TRUE,							ev = FALSE
		VAR Trig_setting[0..4].s32_data[0].stat,					init = PARAM_OK,						ev = init
		VAR Trig_setting[1..4].init_cross[0],						init = TRUE,							ev = FALSE
		VAR Trig_setting[0..4].state_var[0],						init = TRUE,							ev = TRUE
		VAR Trig_setting[0..4].Engine_timer[0],						init = 100,								ev = init
		VAR Trig_setting[0..4].Engine_started[0],					init = TRUE,							ev = init
		VAR Trig_setting[0..4].chck_trg_cnd,						init = 1,								ev = init
		VAR Trig_setting[0..4].re_entry[0],							init = TRUE,							ev = FALSE
		VAR Trig_setting[0..4].tgr_fgt_reentry,						init = 1,								ev = 0
		VAR Trig_setting[0..4].tgr_fgt_cond,						init = 0,								ev = 0
		
		VAR PTU_ps_dest_in_Param[0..4].r,							init = 1,				ev = init
		VAR PTU_ps_dest_in_Param[0..4].stat,						init = PARAM_OK,		ev = init			
	
		

		--Stub Calls:
		SIMUL

			--Reads the message from RTD
			STUB RTDGetParam 1..10 => (1)	
			
			--Compares value with the range values
			STUB CompareLimit 1 => (1,10,0)0
			STUB CompareLimit 2..3 => (1,10,1)0
			STUB CompareLimit 4 => (1,10,0)0
			STUB CompareLimit 5..6 => (1,10,1)ONE
			STUB CompareLimit 7 => (1,10,0)0		
			STUB CompareLimit 8..9 => (1,10,1)ONE
			STUB CompareLimit 10 => (1,10,0)0	
			STUB CompareLimit 11..12 => (1,10,1)ONE	
			STUB CompareLimit 13 => (1,10,0)ONE		
			STUB CompareLimit 14..15=> (1,10,1)ONE		
			STUB CompareLimit 16 => (1,10,0)ONE	
			STUB CompareLimit 17 => (1,10,1)ONE	
			STUB CompareLimit 18 => (1,10,0)ONE		
			STUB CompareLimit 19 => (1,10,1)ONE
			STUB CompareLimit 20 => (1,10,0)ONE
			STUB CompareLimit 21 => (1,10,1)ONE	
			STUB CompareLimit 22 => (1,10,0)ONE	
			STUB CompareLimit 23 => (1,10,1)ONE
			STUB CompareLimit 24 => (1,10,0)ONE		


		END SIMUL


		-- Calling the Unit Under Test 
		#GlobalSettingsCheckTrig();

	END ELEMENT

END TEST -- TEST 8


TEST 9
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT
    COMMENT [hdudispfglobalsettings-GlobalSettingsCheckTrig-DB-LLR-009]	
    COMMENT The function shall loop from zero to (MAX_ELOG_EVENT minus one) and do the following,
    COMMENT Call function GlobalSettingsCheckExParam and set check exceedence parameter variable to 
	COMMENT TRUE if init_value of Trig_setting with index as loop counter is not equal to TRUE and 
	COMMENT if check exceedence parameter variable is equal to FALSE
    COMMENT Equivalence Class 92,117,118
    COMMENT
    COMMENT [hdudispfglobalsettings-GlobalSettingsCheckTrig-DB-LLR-010]	
    COMMENT do nothing if label of A429_data with
    COMMENT  0 and second loop index as indices is  not equal to elog_trig_label with first loop index as index of
    COMMENT  Elog_trig with index as loop counter AND sdi of A429_data with 0 and second loop index as indices i
    COMMENT  equal to elog_trig_sdi with first loop index as index of Elog_trig with index as loop counter
    COMMENT Equivalence Class 94,149
    COMMENT 
    COMMENT [hdudispfglobalsettings-GlobalSettingsCheckTrig-DB-LLR-012]
    COMMENT a)	do nothing when init_cross with loop index as index of Trig_setting with index as loop counter is not TRUE AND 
    COMMENT Engine_started with loop index as index of Trig_setting with index as loop counter is TRUE
    COMMENT Equivalence Class 107,152
    COMMENT 
    COMMENT [hdudispfglobalsettings-GlobalSettingsCheckTrig-DB-LLR-013]
    COMMENT do nothing
    COMMENT do nothing if re_entry with loop index as index of Trig_setting with index as loop counter is not TRUE
    COMMENT Equivalence Class  120
    COMMENT  
    COMMENT [hdudispfglobalsettings-GlobalSettingsCheckTrig-DB-LLR-014]
    COMMENT 1.	If loop index is equal to (condition count with index as loop counter minus one) AND tgr_fgt_reentry of Trig_setting with index as loop counter 
    COMMENT is equal to condition count with index as loop counter then do the following, 
    COMMENT a)	Set init_value of Trig_setting with index as loop counter to TRUE 
    COMMENT b)   Set Exceedance_startup_check with index as loop counter to FALSE. 
    COMMENT c)	Set state_var with second loop index as index of Trig_setting with index as loop counter to FALSE 
    COMMENT d)	Set chck_trg_cnd of Trig_setting with index as loop counter to 0 
    COMMENT             e)	Set tgr_fgt_reentry of Trig_setting with index as loop counter to 0 
    COMMENT 2.	Else if loop index is equal to (condition count with index as loop counter minus one) 
    COMMENT a)	Set tgr_fgt_reentry of Trig_setting with index as loop counter to 0 
    COMMENT  Equivalence Class 110,157
    COMMENT </TD>  

	ELEMENT

		COMMENT INPUT SECTION:

		VAR Cond_cnt[0..4],										init = 1,								ev = init
		VAR Port1_label_count,									init = 1,								ev = init
		VAR Exceedance_startup_check[0],						init = FALSE,							ev = init		

		COMMENT INPUT/OUTPUT SECTION:
		
		VAR A429_data[0][0].label,								init = 0,								ev = init
		VAR A429_data[0][0].sdi,								init = 1,								ev = init

		VAR Elog_trig[0..4].elog_trig_label[0],					init = 1,								ev = init
		VAR Elog_trig[0..4].elog_trig_sdi[0],					init = 0,								ev = init
		VAR Elog_trig[0..4].elog_trig_start_val[0],				init = 1,								ev = init
		VAR Elog_trig[0..4].elog_trig_start_type[0],			init = 0,								ev = init
		VAR Elog_trig[0..4].elog_trig_cross_val[0],				init = 1,								ev = init
		VAR Elog_trig[0..4].elog_trig_cross_type[0],			init = 0,								ev = init
		VAR Elog_trig[0..4].elog_trig_time[0],					init = 0,								ev = init		
		
		VAR Elog_label[0..4].elog_label,						init = 1,								ev = init
		VAR Elog_label[0..4].elog_sdi,							init = 0,								ev = init
        	
		COMMENT OUTPUT SECTION:

		VAR Trig_setting[0..4].init_value,							init = FALSE,							ev = FALSE
		VAR Trig_setting[0..4].port_index,							init = 1,								ev = init
		VAR Trig_setting[0..4].s32_data[0].r,						init = 1,								ev = init
		VAR Trig_setting[0..4].init_start[0],						init = FALSE,							ev = FALSE
		VAR Trig_setting[0..4].s32_data[0].stat,					init = PARAM_OK,						ev = init
		VAR Trig_setting[0..4].init_cross[0],						init = TRUE,							ev = FALSE
		VAR Trig_setting[0..4].state_var[0],						init = TRUE,							ev = TRUE
		VAR Trig_setting[0..4].Engine_timer[0],						init = 100,								ev = init
		VAR Trig_setting[0..4].Engine_started[0],					init = TRUE,							ev = init
		VAR Trig_setting[0..4].chck_trg_cnd,						init = 1,								ev = init
		VAR Trig_setting[0..4].re_entry[0],							init = TRUE,							ev = FALSE
		VAR Trig_setting[0..4].tgr_fgt_reentry,						init = 1,								ev = 0
		VAR Trig_setting[0..4].tgr_fgt_cond,						init = 0,								ev = 0
		
		VAR PTU_ps_dest_in_Param[0..4].r,							init = 1,				ev = init
		VAR PTU_ps_dest_in_Param[0..4].stat,						init = PARAM_OK,		ev = init			
	
		

		--Stub Calls:
		SIMUL

			--Reads the message from RTD
			STUB RTDGetParam 1..5 => (1)	
			
			--Compares value with the range values
			STUB CompareLimit 1..5 => (1,10,0)ONE
			STUB CompareLimit 6..10 => (1,10,0)ONE					


		END SIMUL


		-- Calling the Unit Under Test 
		#GlobalSettingsCheckTrig();

	END ELEMENT

END TEST -- TEST 9


TEST 10
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT
    COMMENT [hdudispfglobalsettings-GlobalSettingsCheckTrig-DB-LLR-009]	
    COMMENT The function shall loop from zero to (MAX_ELOG_EVENT minus one) and do the following,
    COMMENT Call function GlobalSettingsCheckExParam and set check exceedence parameter variable to 
	COMMENT TRUE if init_value of Trig_setting with index as loop counter is not equal to TRUE and 
	COMMENT if check exceedence parameter variable is equal to FALSE
    COMMENT Equivalence Class 92,117,118
    COMMENT
    COMMENT [hdudispfglobalsettings-GlobalSettingsCheckTrig-DB-LLR-010]	
    COMMENT do nothing if label of A429_data with
    COMMENT  0 and second loop index as indices is  not equal to elog_trig_label with first loop index as index of
    COMMENT  Elog_trig with index as loop counter AND sdi of A429_data with 0 and second loop index as indices i
    COMMENT  equal to elog_trig_sdi with first loop index as index of Elog_trig with index as loop counter
    COMMENT Equivalence Class 94,149
    COMMENT 
    COMMENT [hdudispfglobalsettings-GlobalSettingsCheckTrig-DB-LLR-012]
    COMMENT a)	do nothing when init_cross with loop index as index of Trig_setting with index as loop counter is TRUE AND 
    COMMENT Engine_started with loop index as index of Trig_setting with index as loop counter is not TRUE
    COMMENT Equivalence Class 106,151 
    COMMENT 
    COMMENT [hdudispfglobalsettings-GlobalSettingsCheckTrig-DB-LLR-013]
    COMMENT do nothing
    COMMENT do nothing if re_entry with loop index as index of Trig_setting with index as loop counter is not TRUE
    COMMENT Equivalence Class  120
    COMMENT  
    COMMENT [hdudispfglobalsettings-GlobalSettingsCheckTrig-DB-LLR-014]
    COMMENT 1.	If loop index is equal to (condition count with index as loop counter minus one) AND tgr_fgt_reentry of Trig_setting with index as loop counter 
    COMMENT is equal to condition count with index as loop counter then do the following, 
    COMMENT a)	Set init_value of Trig_setting with index as loop counter to TRUE 
    COMMENT b)   Set Exceedance_startup_check with index as loop counter to FALSE. 
    COMMENT c)	Set state_var with second loop index as index of Trig_setting with index as loop counter to FALSE 
    COMMENT d)	Set chck_trg_cnd of Trig_setting with index as loop counter to 0 
    COMMENT             e)	Set tgr_fgt_reentry of Trig_setting with index as loop counter to 0 
    COMMENT 2.	Else if loop index is equal to (condition count with index as loop counter minus one) 
    COMMENT a)	Set tgr_fgt_reentry of Trig_setting with index as loop counter to 0 
    COMMENT  Equivalence Class 110,157
    COMMENT </TD>

	ELEMENT

		COMMENT INPUT SECTION:

		VAR Cond_cnt[0..4],										init = 1,								ev = init
		VAR Port1_label_count,									init = 1,								ev = init
		VAR Exceedance_startup_check[0],						init = FALSE,							ev = init		

		COMMENT INPUT/OUTPUT SECTION:
		
		VAR A429_data[0][0].label,								init = 0,								ev = init
		VAR A429_data[0][0].sdi,								init = 1,								ev = init

		VAR Elog_trig[0..4].elog_trig_label[0],					init = 1,								ev = init
		VAR Elog_trig[0..4].elog_trig_sdi[0],					init = 0,								ev = init
		VAR Elog_trig[0..4].elog_trig_start_val[0],				init = 1,								ev = init
		VAR Elog_trig[0..4].elog_trig_start_type[0],			init = 0,								ev = init
		VAR Elog_trig[0..4].elog_trig_cross_val[0],				init = 1,								ev = init
		VAR Elog_trig[0..4].elog_trig_cross_type[0],			init = 0,								ev = init
		VAR Elog_trig[0..4].elog_trig_time[0],					init = 0,								ev = init		
		
		VAR Elog_label[0..4].elog_label,						init = 1,								ev = init
		VAR Elog_label[0..4].elog_sdi,							init = 0,								ev = init
        	
		COMMENT OUTPUT SECTION:

		VAR Trig_setting[0..4].init_value,							init = FALSE,							ev = FALSE
		VAR Trig_setting[0..4].port_index,							init = 1,								ev = init
		VAR Trig_setting[0..4].s32_data[0].r,						init = 1,								ev = init
		VAR Trig_setting[0..4].init_start[0],						init = FALSE,							ev = FALSE
		VAR Trig_setting[0..4].s32_data[0].stat,					init = PARAM_OK,						ev = init
		VAR Trig_setting[0..4].init_cross[0],						init = TRUE,							ev = init
		VAR Trig_setting[0..4].state_var[0],						init = TRUE,							ev = TRUE
		VAR Trig_setting[0..4].Engine_timer[0],						init = 100,								ev = init
		VAR Trig_setting[0..4].Engine_started[0],					init = FALSE,							ev = init
		VAR Trig_setting[0..4].chck_trg_cnd,						init = 1,								ev = init
		VAR Trig_setting[0..4].re_entry[0],							init = FALSE,							ev = FALSE
		VAR Trig_setting[0..4].tgr_fgt_reentry,						init = 1,								ev = init
		VAR Trig_setting[0..4].tgr_fgt_cond,						init = 0,								ev = 0

		VAR PTU_ps_dest_in_Param[0..4].r,							init = 1,				ev = init
		VAR PTU_ps_dest_in_Param[0..4].stat,						init = PARAM_OK,		ev = init			

				
		
		--Stub Calls:
		SIMUL

			--Reads the message from RTD
			STUB RTDGetParam 1..5 => (1)	
					

		END SIMUL


		-- Calling the Unit Under Test 
		#GlobalSettingsCheckTrig();

	END ELEMENT

END TEST -- TEST 10

TEST 11
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT
    COMMENT [hdudispfglobalsettings-GlobalSettingsCheckTrig-DB-LLR-009]	
    COMMENT The function shall loop from zero to (MAX_ELOG_EVENT minus one) and do the following,
    COMMENT Call function GlobalSettingsCheckExParam and set check exceedence parameter variable to 
	COMMENT TRUE if init_value of Trig_setting with index as loop counter is not equal to TRUE and 
	COMMENT if check exceedence parameter variable is equal to FALSE
    COMMENT Equivalence Class 92,117,118
    COMMENT
    COMMENT [hdudispfglobalsettings-GlobalSettingsCheckTrig-DB-LLR-010]	
    COMMENT do nothing if label of A429_data with
    COMMENT  0 and second loop index as indices is  not equal to elog_trig_label with first loop index as index of
    COMMENT  Elog_trig with index as loop counter AND sdi of A429_data with 0 and second loop index as indices i
    COMMENT  equal to elog_trig_sdi with first loop index as index of Elog_trig with index as loop counter
    COMMENT Equivalence Class 94,149
    COMMENT 
    COMMENT [hdudispfglobalsettings-GlobalSettingsCheckTrig-DB-LLR-012]
    COMMENT a)	do nothing when init_cross with loop index as index of Trig_setting with index as loop counter is not TRUE AND 
    COMMENT Engine_started with loop index as index of Trig_setting with index as loop counter is not TRUE
    COMMENT Equivalence Class 107,151 
    COMMENT 
    COMMENT [hdudispfglobalsettings-GlobalSettingsCheckTrig-DB-LLR-013]
    COMMENT do nothing
    COMMENT do nothing if re_entry with loop index as index of Trig_setting with index as loop counter is not TRUE
    COMMENT Equivalence Class  120
    COMMENT  
    COMMENT [hdudispfglobalsettings-GlobalSettingsCheckTrig-DB-LLR-014]
    COMMENT 1.	If loop index is equal to (condition count with index as loop counter minus one) AND tgr_fgt_reentry of Trig_setting with index as loop counter 
    COMMENT is equal to condition count with index as loop counter then do the following, 
    COMMENT a)	Set init_value of Trig_setting with index as loop counter to TRUE 
    COMMENT b)   Set Exceedance_startup_check with index as loop counter to FALSE. 
    COMMENT c)	Set state_var with second loop index as index of Trig_setting with index as loop counter to FALSE 
    COMMENT d)	Set chck_trg_cnd of Trig_setting with index as loop counter to 0 
    COMMENT             e)	Set tgr_fgt_reentry of Trig_setting with index as loop counter to 0 
    COMMENT 2.	Else if loop index is equal to (condition count with index as loop counter minus one) 
    COMMENT a)	Set tgr_fgt_reentry of Trig_setting with index as loop counter to 0 
    COMMENT  Equivalence Class 110,157
    COMMENT </TD>  

	ELEMENT

		COMMENT INPUT SECTION:

		VAR Cond_cnt[0..4],										init = 1,								ev = init
		VAR Port1_label_count,									init = 1,								ev = init
		VAR Exceedance_startup_check[0],						init = FALSE,							ev = init		

		COMMENT INPUT/OUTPUT SECTION:
		
		VAR A429_data[0][0].label,								init = 0,								ev = init
		VAR A429_data[0][0].sdi,								init = 1,								ev = init

		VAR Elog_trig[0..4].elog_trig_label[0],					init = 1,								ev = init
		VAR Elog_trig[0..4].elog_trig_sdi[0],					init = 0,								ev = init
		VAR Elog_trig[0..4].elog_trig_start_val[0],				init = 1,								ev = init
		VAR Elog_trig[0..4].elog_trig_start_type[0],			init = 0,								ev = init
		VAR Elog_trig[0..4].elog_trig_cross_val[0],				init = 1,								ev = init
		VAR Elog_trig[0..4].elog_trig_cross_type[0],			init = 0,								ev = init
		VAR Elog_trig[0..4].elog_trig_time[0],					init = 0,								ev = init		
		
		VAR Elog_label[0..4].elog_label,						init = 1,								ev = init
		VAR Elog_label[0..4].elog_sdi,							init = 0,								ev = init
        	
		COMMENT OUTPUT SECTION:

		VAR Trig_setting[0..4].init_value,							init = FALSE,							ev = FALSE
		VAR Trig_setting[0..4].port_index,							init = 1,								ev = init
		VAR Trig_setting[0..4].s32_data[0].r,						init = 1,								ev = init
		VAR Trig_setting[0..4].init_start[0],						init = FALSE,							ev = FALSE
		VAR Trig_setting[0..4].s32_data[0].stat,					init = PARAM_OK,						ev = init
		VAR Trig_setting[0..4].init_cross[0],						init = FALSE,							ev = FALSE
		VAR Trig_setting[0..4].state_var[0],						init = TRUE,							ev = TRUE
		VAR Trig_setting[0..4].Engine_timer[0],						init = 100,								ev = init
		VAR Trig_setting[0..4].Engine_started[0],					init = FALSE,							ev = init
		VAR Trig_setting[0..4].chck_trg_cnd,						init = 1,								ev = init
		VAR Trig_setting[0..4].re_entry[0],							init = FALSE,							ev = FALSE
		VAR Trig_setting[0..4].tgr_fgt_reentry,						init = 1,								ev = init
		VAR Trig_setting[0..4].tgr_fgt_cond,						init = 0,								ev = 0

		
		VAR PTU_ps_dest_in_Param[0..4].r,							init = 1,				ev = init
		VAR PTU_ps_dest_in_Param[0..4].stat,						init = PARAM_OK,		ev = init			

		--Stub Calls:
		SIMUL

			--Reads the message from RTD
			STUB RTDGetParam 1..5 => (1)			


		END SIMUL


		-- Calling the Unit Under Test 
		#GlobalSettingsCheckTrig();

	END ELEMENT

END TEST -- TEST 11


TEST 12
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT
    COMMENT [hdudispfglobalsettings-GlobalSettingsCheckTrig-DB-LLR-004]	
    COMMENT The function shall loop from zero to (MAX_ELOG_EVENT minus one) and do the following,
    COMMENT The function shall loop from zero to (condition count with index as loop counter – 1)
	COMMENT if init_value of Trig_setting with index as loop counter is equal to TRUE and 
	COMMENT do nothing if return value of function CompareLimit with  “r” of  param reading structure with loop 
	COMMENT index as index of Trig_setting with index as loop counter,  elog_trig_start_val with loop index as index of Elog_trig 
	COMMENT with index as loop counter multiplied with 10 and elog_trig_start_type with loop index as index of Elog_trig with index
	COMMENT as loop counter as parameters is equal to ONE AND init_start with loop index of Trig_setting with index as loop counter 
	COMMENT is not equal to TRUE AND stat of param reading data with loop index as index  of Trig_setting with index as loop counter 
	COMMENT is equal to PARAM_ADVISORY. 
    COMMENT Equivalence Class 98,101,96
    COMMENT </TD>

	ELEMENT

		COMMENT INPUT SECTION:

		VAR Cond_cnt[0..4],										init = 1,								ev = init
		VAR Port1_label_count,									init = 1,								ev = init
		VAR Exceedance_startup_check[0..4],						init = TRUE,							ev = FALSE		

		COMMENT INPUT/OUTPUT SECTION:
		
		VAR A429_data[0][0].label,								init = 1,								ev = init
		VAR A429_data[0][0].sdi,								init = 1,								ev = init

		VAR Elog_trig[0..4].elog_trig_label[0],					init = 1,								ev = init
		VAR Elog_trig[0..4].elog_trig_sdi[0],					init = 1,								ev = init
		VAR Elog_trig[0..4].elog_trig_start_val[0],				init = 1,								ev = init
		VAR Elog_trig[0..4].elog_trig_start_type[0],			init = 1,								ev = init
		VAR Elog_trig[0..4].elog_trig_cross_val[0],				init = 1,								ev = init
		VAR Elog_trig[0..4].elog_trig_cross_type[0],			init = 1,								ev = init
		VAR Elog_trig[0..4].elog_trig_time[0],					init = 0,								ev = init		
		
		VAR Elog_label[0..4].elog_label,						init = 0,								ev = init
		VAR Elog_label[0..4].elog_sdi,							init = 0,								ev = init
        	
		COMMENT OUTPUT SECTION:

		VAR Trig_setting[0..4].init_value,							init = TRUE,							ev = init
		VAR Trig_setting[0..4].port_index,							init = 1,								ev = init
		VAR Trig_setting[0..4].s32_data[0].r,						init = 1,								ev = init
		VAR Trig_setting[0..4].init_start[0],						init = FALSE,							ev = FALSE
		VAR Trig_setting[0..4].s32_data[0].stat,					init = PARAM_ADVISORY,						ev = 0
		VAR Trig_setting[0..4].init_cross[0],						init = FALSE,							ev = FALSE
		VAR Trig_setting[0..4].state_var[0],						init = TRUE,							ev = FALSE
		VAR Trig_setting[0..4].Engine_timer[0],						init = 100,								ev = init
		VAR Trig_setting[0..4].Engine_started[0],					init = TRUE,							ev = init
		VAR Trig_setting[0..4].chck_trg_cnd,						init = 1,								ev = 0
		VAR Trig_setting[0..4].re_entry[0],							init = TRUE,							ev = FALSE
		VAR Trig_setting[0..4].tgr_fgt_reentry,						init = 0,								ev = 0
		VAR Trig_setting[0..4].tgr_fgt_cond,						init = 2,								ev = 0

		VAR PTU_ps_dest_in_Param[0..4].r,							init = 1,				ev = init
		VAR PTU_ps_dest_in_Param[0..4].stat,						init = PARAM_OK,		ev = init			

		--Stub Calls:
		SIMUL

			--Reads the message from RTD
			STUB RTDGetParam 1..10 => (1)	
			
			--Compares value with the range values
			STUB CompareLimit 1..5 => (1,10,1)ONE
			STUB CompareLimit 6..10 => (1,10,1)ONE			
			STUB CompareLimit 11..15 => (1,10,1)ONE			
			STUB CompareLimit 16..20 => (1,10,1)ONE			
			STUB CompareLimit 21..25 => (1,10,1)ONE			


		END SIMUL


		-- Calling the Unit Under Test 
		#GlobalSettingsCheckTrig();

	END ELEMENT

END TEST -- TEST 12



TEST 13
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT [hdudispfglobalsettings-GlobalSettingsCheckTrig-DB-LLR-004]	
    COMMENT The function shall loop from zero to (MAX_ELOG_EVENT minus one) and do the following,
    COMMENT The function shall loop from zero to (condition count with index as loop counter – 1)
	COMMENT if init_value of Trig_setting with index as loop counter is equal to TRUE and 
	COMMENT do nothing if return value of function CompareLimit with  “r” of  param reading structure with loop 
	COMMENT index as index of Trig_setting with index as loop counter,  elog_trig_start_val with loop index as index of Elog_trig 
	COMMENT with index as loop counter multiplied with 10 and elog_trig_start_type with loop index as index of Elog_trig with index
	COMMENT as loop counter as parameters is equal to ONE AND init_start with loop index of Trig_setting with index as loop counter 
	COMMENT is not equal to TRUE AND stat of param reading data with loop index as index  of Trig_setting with index as loop counter 
	COMMENT is equal to PARAM_ADVISORY. 
    COMMENT Equivalence Class 98,101,96
    COMMENT
    COMMENT [hdudispfglobalsettings-GlobalSettingsCheckTrig-DB-LLR-013]
    COMMENT do nothing if re_entry with loop index as index of Trig_setting with index as loop counter is TRUE
	COMMENT AND return value of function CompareLimit with “r” of  param reading structure with loop index as index of Trig_setting with index as loop counter,  
	COMMENT elog_trig_start_val with loop index as index of Elog_trig with index as loop counter multiplied with TEN and elog_trig_start_type with loop index as index of 
	COMMENT Elog_trig with index as loop counter as parameters is not equal to ONE.
    COMMENT Equivalence Class  120,97
    COMMENT </TD> 

	ELEMENT

		COMMENT INPUT SECTION:

		VAR Cond_cnt[0..4],										init = 1,								ev = init
		VAR Port1_label_count,									init = 1,								ev = init
		VAR Exceedance_startup_check[0..4],						init = TRUE,							ev = TRUE		

		COMMENT INPUT/OUTPUT SECTION:
		
		VAR A429_data[0][0].label,								init = 1,								ev = init
		VAR A429_data[0][0].sdi,								init = 1,								ev = init

		VAR Elog_trig[0..4].elog_trig_label[0],					init = 1,								ev = init
		VAR Elog_trig[0..4].elog_trig_sdi[0],					init = 1,								ev = init
		VAR Elog_trig[0..4].elog_trig_start_val[0],				init = 1,								ev = init
		VAR Elog_trig[0..4].elog_trig_start_type[0],			init = 1,								ev = init
		VAR Elog_trig[0..4].elog_trig_cross_val[0],				init = 0,								ev = init
		VAR Elog_trig[0..4].elog_trig_cross_type[0],			init = 1,								ev = init
		VAR Elog_trig[0..4].elog_trig_time[0],					init = 0,								ev = init		
		
		VAR Elog_label[0..4].elog_label,						init = 0,								ev = init
		VAR Elog_label[0..4].elog_sdi,							init = 0,								ev = init
        	
		COMMENT OUTPUT SECTION:

		VAR Trig_setting[0..4].init_value,							init = FALSE,							ev = FALSE
		VAR Trig_setting[0..4].port_index,							init = 1,								ev = init
		VAR Trig_setting[0..4].s32_data[0].r,						init = 1,								ev = init
		VAR Trig_setting[0..4].init_start[0],						init = FALSE,							ev = FALSE
		VAR Trig_setting[0..4].s32_data[0].stat,					init = PARAM_ADVISORY,						ev = PARAM_OK
		VAR Trig_setting[0..4].init_cross[0],						init = TRUE,							ev = FALSE
		VAR Trig_setting[0..4].state_var[0],						init = TRUE,							ev = TRUE
		VAR Trig_setting[0..4].Engine_timer[0],						init = 100,								ev = init
		VAR Trig_setting[0..4].Engine_started[0],					init = TRUE,							ev = init
		VAR Trig_setting[0..4].chck_trg_cnd,						init = 1,								ev = init
		VAR Trig_setting[0..4].re_entry[0],							init = TRUE,							ev = FALSE
		VAR Trig_setting[0..4].tgr_fgt_reentry,						init = 2,								ev = 0
		VAR Trig_setting[0..4].tgr_fgt_cond,						init = 2,								ev = init

		VAR PTU_ps_dest_in_Param[0..4].r,							init = 1,				ev = init
		VAR PTU_ps_dest_in_Param[0..4].stat,						init = PARAM_OK,		ev = init			

		--Stub Calls:
		SIMUL

			--Reads the message from RTD
			STUB RTDGetParam 1..5 => (1)	
			
			--Compares value with the range values
			STUB CompareLimit 1 => (1,0,1)ONE
			STUB CompareLimit 2 => (1,10,1)ONE	
			STUB CompareLimit 3 => (1,0,1)ONE
			STUB CompareLimit 4 => (1,10,1)ONE
			STUB CompareLimit 5 => (1,0,1)ONE
			STUB CompareLimit 6 => (1,10,1)ONE
			STUB CompareLimit 7 => (1,0,1)ONE
			STUB CompareLimit 8 => (1,10,1)ONE
			STUB CompareLimit 9 => (1,0,1)ONE
			STUB CompareLimit 10 => (1,10,1)ONE
		


		END SIMUL


		-- Calling the Unit Under Test 
		#GlobalSettingsCheckTrig();

	END ELEMENT

END TEST -- TEST 13




TEST 14
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT
    COMMENT
    COMMENT
    COMMENT [hdudispfglobalsettings-GlobalSettingsCheckTrig-DB-LLR-004]	
	COMMENT do nothing when
    COMMENT return value of function CompareLimit with  “r” of  param reading structure with loop 
    COMMENT index as index of Trig_setting with index as loop counter,  elog_trig_start_val with loop index as index of Elog_trig 
	COMMENT with index as loop counter multiplied with 10 and elog_trig_start_type with loop index as index of Elog_trig with index
	COMMENT as loop counter as parameters is not equal to ONE AND init_start with loop index of Trig_setting with index as loop counter 
	COMMENT is not equal to TRUE AND stat of param reading data with loop index as index  of Trig_setting with index as loop counter 
    COMMENT Equivalence Class 97,99,101
	COMMENT 
	COMMENT [hdudispfglobalsettings-GlobalSettingsCheckTrig-DB-LLR-005]
	COMMENT if return value of function CompareLimit with  “r” of  param reading 
	COMMENT structure with loop index as index of Trig_setting with index as loop counter,  elog_trig_cross_val with loop index as index 
    COMMENT of Elog_trig with index as loop counter multiplied with TEN and elog_trig_cross_type with loop index as index of Elog_trig iwth index 
    COMMENT as loop counter as parameters is equal to ONE AND init start with loop index as index of Trig_setting  with index as loop counter is
    COMMENT equal to TRUE.
    COMMENT Equivalence Class 103
    COMMENT </TD> 

	ELEMENT

		COMMENT INPUT SECTION:

		VAR Cond_cnt[0..4],										init = 1,								ev = init
		VAR Port1_label_count,									init = 0,								ev = init
		VAR Exceedance_startup_check[0..4],						init = TRUE,							ev = FALSE		

		COMMENT INPUT/OUTPUT SECTION:
		
		VAR A429_data[0][0].label,								init = 1,								ev = init
		VAR A429_data[0][0].sdi,								init = 1,								ev = init

		VAR Elog_trig[0..4].elog_trig_label[0],					init = 1,								ev = init
		VAR Elog_trig[0..4].elog_trig_sdi[0],					init = 1,								ev = init
		VAR Elog_trig[0..4].elog_trig_start_val[0],				init = 1,								ev = init
		VAR Elog_trig[0..4].elog_trig_start_type[0],			init = 1,								ev = init
		VAR Elog_trig[0..4].elog_trig_cross_val[0],				init = 0,								ev = init
		VAR Elog_trig[0..4].elog_trig_cross_type[0],			init = 1,								ev = init
		VAR Elog_trig[0..4].elog_trig_time[0],					init = 0,								ev = init		
		
		VAR Elog_label[0..4].elog_label,						init = 0,								ev = init
		VAR Elog_label[0..4].elog_sdi,							init = 0,								ev = init
        	
		COMMENT OUTPUT SECTION:

		VAR Trig_setting[0..4].init_value,							init = TRUE,							ev = TRUE
		VAR Trig_setting[0..4].port_index,							init = 1,								ev = init
		VAR Trig_setting[0..4].s32_data[0].r,						init = 1,								ev = init
		VAR Trig_setting[0..4].init_start[0],						init = FALSE,							ev = FALSE
		VAR Trig_setting[0..4].s32_data[0].stat,					init = PARAM_ADVISORY,						ev = PARAM_OK
		VAR Trig_setting[0..1].init_cross[0],						init = TRUE,							ev = FALSE
		VAR Trig_setting[2].init_cross[0],						init = TRUE,							ev = init
		VAR Trig_setting[3..4].init_cross[0],						init = TRUE,							ev = FALSE
		VAR Trig_setting[0..4].state_var[0],						init = TRUE,							ev = TRUE
		VAR Trig_setting[0..4].Engine_timer[0],						init = 100,								ev = init
		VAR Trig_setting[0..4].Engine_started[0],					init = TRUE,							ev = init
		VAR Trig_setting[0..4].chck_trg_cnd,						init = 1,								ev = init
		VAR Trig_setting[0..1].re_entry[0],							init = TRUE,							ev = FALSE
		VAR Trig_setting[2].re_entry[0],							init = TRUE,							ev = init
		VAR Trig_setting[3..4].re_entry[0],							init = TRUE,							ev = FALSE
		VAR Trig_setting[0..1].tgr_fgt_reentry,						init = 2,								ev = 0
		VAR Trig_setting[2].tgr_fgt_reentry,						init = 2,								ev = 2
		VAR Trig_setting[3..4].tgr_fgt_reentry,						init = 2,								ev = 0
		VAR Trig_setting[0..4].tgr_fgt_cond,						init = 2,								ev = 0

		VAR PTU_ps_dest_in_Param[0..4].r,							init = 1,				ev = init
		VAR PTU_ps_dest_in_Param[0..4].stat,						init = PARAM_OK,		ev = init	
		
		--Stub Calls:
		SIMUL

			--Reads the message from RTD
			STUB RTDGetParam 1..10 => (1)	
			
			--Compares value with the range values
			STUB CompareLimit 1 => (1,10,1)ONE
			STUB CompareLimit 2..3 => (1,0,1)ONE
			STUB CompareLimit 4 => (1,10,1)ONE
			STUB CompareLimit 5..6 => (1,0,1)ONE
			STUB CompareLimit 7 => (1,10,1)ONE		
			STUB CompareLimit 8..9 => (1,0,1)ONE	
			STUB CompareLimit 10 => (1,10,1)ONE	
			STUB CompareLimit 11..12 => (1,0,1)ONE	
			STUB CompareLimit 13 => (1,10,1)ONE		
			STUB CompareLimit 14..15 => (1,0,1)ONE
			STUB CompareLimit 16 => (1,0,1)0		
			STUB CompareLimit 17 => (1,10,1)ONE	
			STUB CompareLimit 18 => (1,0,1)ONE	
			STUB CompareLimit 19 => (1,10,1)ONE	
			STUB CompareLimit 20 => (1,0,1)0	
			STUB CompareLimit 21 => (1,10,1)0	
			STUB CompareLimit 22 => (1,0,1)ONE
			STUB CompareLimit 23 => (1,10,1)ONE	
			STUB CompareLimit 24 => (1,0,1)ONE
			STUB CompareLimit 25 => (1,10,1)ONE			


		END SIMUL


		-- Calling the Unit Under Test 
		#GlobalSettingsCheckTrig();

	END ELEMENT

END TEST -- TEST 14



TEST 15
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT
    COMMENT
    COMMENT [hdudispfglobalsettings-GlobalSettingsCheckTrig-DB-LLR-006]	
    COMMENT do nothing when
    COMMENT if init_cross with loop index as index of Trig_setting with index 
	COMMENT as loop counter is equal to TRUE.
    COMMENT Equivalence Class 107
    COMMENT </TD>  

	ELEMENT

		COMMENT INPUT SECTION:

		VAR Cond_cnt[0..4],										init = 0,								ev = init
		VAR Port1_label_count,									init = 0,								ev = init
		VAR Exceedance_startup_check[0..4],						init = FALSE,							ev = init		

		COMMENT INPUT/OUTPUT SECTION:
		
		VAR A429_data[0][0].label,								init = 1,								ev = init
		VAR A429_data[0][0].sdi,								init = 1,								ev = init

		VAR Elog_trig[0..4].elog_trig_label[0],					init = 1,								ev = init
		VAR Elog_trig[0..4].elog_trig_sdi[0],					init = 1,								ev = init
		VAR Elog_trig[0..4].elog_trig_start_val[0],				init = 1,								ev = init
		VAR Elog_trig[0..4].elog_trig_start_type[0],			init = 1,								ev = init
		VAR Elog_trig[0..4].elog_trig_cross_val[0],				init = 0,								ev = init
		VAR Elog_trig[0..4].elog_trig_cross_type[0],			init = 1,								ev = init
		VAR Elog_trig[0..4].elog_trig_time[0],					init = 0,								ev = init		
		
		VAR Elog_label[0..4].elog_label,						init = 0,								ev = init
		VAR Elog_label[0..4].elog_sdi,							init = 0,								ev = init
        	
		COMMENT OUTPUT SECTION:

		VAR Trig_setting[0..4].init_value,							init = TRUE,							ev = TRUE
		VAR Trig_setting[0..4].port_index,							init = 1,								ev = init
		--VAR Trig_setting[0..4].s32_data[0],						init = 1,								ev = init
		VAR Trig_setting[0..4].s32_data[0].r,						init = 1,								ev = init
		VAR Trig_setting[0..4].init_start[0],						init = FALSE,							ev = FALSE
		VAR Trig_setting[0..4].s32_data[0].stat,					init = PARAM_ADVISORY,						ev = init
		VAR Trig_setting[0..4].init_cross[0],						init = TRUE,							ev = init
		VAR Trig_setting[0..4].state_var[0],						init = TRUE,							ev = TRUE
		VAR Trig_setting[0..4].Engine_timer[0],						init = 100,								ev = init
		VAR Trig_setting[0..4].Engine_started[0],					init = TRUE,							ev = init
		VAR Trig_setting[0..4].chck_trg_cnd,						init = 1,								ev = init
		VAR Trig_setting[0..4].re_entry[0],							init = TRUE,							ev = init
		VAR Trig_setting[0..4].tgr_fgt_reentry,						init = 2,								ev = init
		VAR Trig_setting[0..4].tgr_fgt_cond,						init = 1,								ev = init
		
		VAR PTU_ps_dest_in_Param[0..4].r,							init = 1,				ev = init
		VAR PTU_ps_dest_in_Param[0..4].stat,						init = PARAM_OK,		ev = init			


		--Stub Calls:
		SIMUL

		--none

		END SIMUL


		-- Calling the Unit Under Test 
		#GlobalSettingsCheckTrig();

	END ELEMENT

END TEST -- TEST 15

TEST 16
FAMILY nominal

    COMMENT Test Description
    COMMENT <TD> 
    COMMENT [hdudispfglobalsettings-GlobalSettingsCheckTrig-DB-LLR-007]
    COMMENT do nothing when loop index is not equal to (condition count with index as loop counter minus one) AND target flight condition of Trig_setting
    COMMENT  with index as loop counter is equal to condition count with index as loop counter
    COMMENT Equivalence Class 111
    COMMENT </TD> 

	ELEMENT

		COMMENT INPUT SECTION:
		
        STRUCTURE s_mess,       init = { lcc => EEC, sID => { BID => { sfid => 0, rsd => 0, lcl => 0, pvt => 0, doc => 0, rci => 0 } },
                                            &   u8PaySize => 0, u8PayLoad => { 0 => 0x08, 1 => 0xC0 ,others => 0 } },     ev = init		
		

		VAR Cond_cnt[0..4],										init = 2,								ev = init
		VAR Port1_label_count,									init = 0,								ev = init
		VAR Exceedance_startup_check[0],						init = TRUE,							ev = init		

		COMMENT INPUT/OUTPUT SECTION:
		
		VAR A429_data[0][0..1].label,							init = 1,								ev = init
		VAR A429_data[0][0..1].sdi,								init = 1,								ev = init

		VAR Elog_trig[0..4].elog_trig_label[0..1],					init = 1,								ev = init
		VAR Elog_trig[0..4].elog_trig_sdi[0..1],					init = 0,								ev = init
		VAR Elog_trig[0..4].elog_trig_start_val[0..1],				init = 1,								ev = init
		VAR Elog_trig[0..4].elog_trig_start_type[0..1],				init = 1,								ev = init
		VAR Elog_trig[0..4].elog_trig_cross_val[0..1],				init = 1,								ev = init
		VAR Elog_trig[0..4].elog_trig_cross_type[0..1],				init = 1,								ev = init
		VAR Elog_trig[0..4].elog_trig_time[0..1],					init = 0,								ev = init		
		
		VAR Elog_label[0..4].elog_label,						init = 1,								ev = init
		VAR Elog_label[0..4].elog_sdi,							init = 0,								ev = init
        	
		COMMENT OUTPUT SECTION:

		VAR Trig_setting[0].init_value,								init = TRUE,							ev = TRUE
		VAR Trig_setting[1..4].init_value,							init = FALSE,							ev = init
		VAR Trig_setting[0..4].port_index,							init = 1,								ev = init
		VAR Trig_setting[0..4].s32_data[0..1].r,					init = 1,								ev = 0
		VAR Trig_setting[0..4].init_start[0..1],					init = FALSE,							ev = FALSE
		VAR Trig_setting[0..4].s32_data[0..1].stat,					init = 5,						ev = init
		VAR Trig_setting[0..4].init_cross[0..1],					init = FALSE,							ev = FALSE
		VAR Trig_setting[0..4].state_var[0..1],						init = FALSE,							ev = init
		VAR Trig_setting[0..4].Engine_timer[0..1],					init = ZERO,							ev = init
		VAR Trig_setting[0..4].Engine_started[0..1],				init = TRUE,							ev = init
		VAR Trig_setting[0..4].chck_trg_cnd,						init = 0,								ev = init
		VAR Trig_setting[0..4].re_entry[0..1],						init = TRUE,							ev = FALSE
		VAR Trig_setting[0..4].tgr_fgt_reentry,						init = 1,								ev = 0
		
		VAR PTU_ps_dest_in_Param[0..4].r,							init = 0,				ev = init
		VAR PTU_ps_dest_in_Param[0..4].stat,						init = 5,		ev = init		
 		VAR PTU_COUNT_1,            					init = 0,           	ev = 0

		VAR PTU_timer_1[0],								init = 1,				ev = init

		VAR PTU_timer_2[0],								init = 1,				ev = init	
		
		VAR PTU_timer_Preset[0],						init = 1,				ev = init
		
		VAR PTU_x,										init = 0,				ev = init

		VAR PTU_i,										init = 0,				ev = init

		VAR PTU_j,										init = 0,				ev = init	
		
		--Holds NV RAM CRC fail check value
			VAR Nv_crc_fail,								init = FALSE,			ev = TRUE

		--Holds the data received state
			VAR Data_received,								init = FALSE,			ev = TRUE		


		--Stub Calls:
		SIMUL

			--Reads the message from RTD
			STUB RTDGetParam 1..12 => (1)	
			
			--Compares value with the range values
			STUB CompareLimit 1 => (0,10,1)ONE
			STUB CompareLimit 2 => (0,10,1)ONE			
			STUB CompareLimit 3..10 => (0,10,1)ONE			
			STUB CompareLimit 11..16 => (0,10,1)ONE			


			--Calculates the CRCs
            STUB CrcCalculate(46) 100			
			
		END SIMUL

        -- Calling this function for 'Nv_ram_read' to be TRUE       
        #GlobalSettingsProcessNSC(&s_mess);

		-- Calling the Unit Under Test 
		#GlobalSettingsCheckTrig();

	END ELEMENT

END TEST -- TEST 16	

END SERVICE  GlobalSettingsCheckTrig









