HEADER hdudispfpbs,Source Code Ver : 1.5 ,TestScript Ver : 1.4  
--------------------------------------------------------------------------------
-- Author Name         : Soumya Patil
--                       Manu K M
--
-- File Name           : hdudispfpbs_1.ptu
--
-- Test Creation Date  : 09.10.2017
--
-- Tested Functions    : BspSwitchesInit
--                       EncoderDriverL          
--                       EncoderDriverR
--                       PbsClear
--                       PbsInit 
--
-- Version History     :
--
--  TEST-VERSION           TEST-DATE      TESTER NAME        MODIFICATIONS
--  ------------           ---------      -----------        -------------
--    1.1                  09.10.2017     Soumya Patil       Created the PTU file.
--                                        Manu K M
--    1.2                  10.11.2017     Soumya Patil       Updated as per #PR100171
--                                        Manu K M
--    1.3                  14.11.2017     Soumya Patil       Updated to synchronise PTU version.
--                                        Manu K M 
--    1.4				   29.07.2020	  Harshitha R		 Updated as per #PR100267

--------------------------------------------------------------------------------
--
-- TESTED FILE INCLUDE DIRECTIVES 
--
--------------------------------------------------------------------------------

##include "hdudispfpbs.h"       
##include "hdudispfpolygon1.h" 
##include "hdudispfstandard.h"   
##include "hdudispftimer.h"     
##include "hdulibstm32f7xxhalrccex.h" 
##include "hdudispfucos.h"       
##include "hdulibstm32f7xxhalgpio.h" 
##include "hdulibstm32f7xxhal.h" 
##include "hdulibstm32hallegacy.h" 
##include "hdulibbasictypes.h"
##include "hdudispfgrapp.h" 
--------------------------------------------------------------------------------
--
-- TESTED FILE DECLARATIONS 
--
--------------------------------------------------------------------------------

-- Declarations of the global variables of the tested file

# T_UINT32 U32_critical_sr;
# T_UINT8 Splash_b1_press;
# T_UINT8 Splash_done;
    
-- Declarations of the temporary variable    
--Temporary variable to hold gpio_init_struct
#T_GPIO_INIT PTU_gpio_init_struct, PTU_gpio_init_struct2;

--Temporary variable to hold timer
#T_TIMER PTU_timer, PTU_timer_in = 0;

--Temporary variable for condition check 
#T_UINT8 PTU_count;
--------------------------------------------------------------------------------

BEGIN

    COMMENT Author Names     : Soumya Patil,
    COMMENT                    Manu K M
    COMMENT
    COMMENT File Name        : hdudispfpbs_1.ptu
    COMMENT
    COMMENT Tested Functions : BspSwitchesInit
    COMMENT                    EncoderDriverL 
    COMMENT                    EncoderDriverR
    COMMENT                    PbsClear
    COMMENT                    PbsInit 
    COMMENT
    COMMENT Assumptions and Constraints
    COMMENT <AC>
    COMMENT Assumption(s):
    COMMENT None
    COMMENT 
    COMMENT Constraint(s):
    COMMENT 1. Header file 'hdulibstm32f4xx.h' is modified for testing purpose.
    COMMENT /*Commented for testing purpose*/
    COMMENT /*#define GPIOA               ((T_GPIO *) GPIOA_BASE)*/
    COMMENT /* Modified for stubbing hardware address */
    COMMENT T_GPIO PTU_GPIOA;
    COMMENT #define GPIOA               ((T_GPIO *) &PTU_GPIOA)
    COMMENT
    COMMENT /*Commented for testing purpose*/
    COMMENT /*#define GPIOB               ((T_GPIO *) GPIOB_BASE)*/
    COMMENT /* Modified for stubbing hardware address */
    COMMENT T_GPIO PTU_GPIOB;
    COMMENT #define GPIOB               ((T_GPIO *) &PTU_GPIOB)
    COMMENT
    COMMENT /*Commented for testing purpose*/
    COMMENT /*#define GPIOC               ((T_GPIO *) GPIOC_BASE)*/
    COMMENT /* Modified for stubbing hardware address */
    COMMENT T_GPIO PTU_GPIOC;
    COMMENT #define GPIOC               ((T_GPIO *) &PTU_GPIOC)
    COMMENT 
    COMMENT /*Commented for testing purpose*/
    COMMENT /*#define RCC                 ((T_RCC *) RCC_BASE)*/
    COMMENT /* Modified for stubbing hardware address */
    COMMENT T_RCC PTU_RCC;
    COMMENT 
    COMMENT 2. Due to a static variable dependency test script is split into hdudispfpbs_1, hdudispfpbs_2 and hdudispfpbs_3
    COMMENT
    COMMENT 4.In Source file "hdudispfpbs.c" for LLRs hdudispfpbs-BspSwitchesInit-DB-LLR-001, 
    COMMENT   hdudispfpbs-BspSwitchesInit-DB-LLR-002, hdudispfpbs-PbsInit-DB-LLR-001, hdudispfpbs-PbsInit-DB-LLR-002
    COMMENT   and hdudispfpbs-PbsInit-DB-LLR-003 coverage cannot be 
    COMMENT   obtained for do while loop two or more times and TRUE condition. 
    COMMENT   Since while(0) is mentioned which loops for only one time in the below snippets:
    COMMENT   a. #define __HAL_RCC_GPIOB_CLK_ENABLE()\
    COMMENT                              do { \
    COMMENT                                  __IO T_UINT32 tmpreg; \
    COMMENT                                 SET_BIT(RCC->AHB1ENR, RCC_AHB1ENR_GPIOBEN);\
    COMMENT                                 /* Delay after an RCC peripheral clock enabling */ \
    COMMENT                                tmpreg = READ_BIT(RCC->AHB1ENR, RCC_AHB1ENR_GPIOBEN);\
    COMMENT                                 UNUSED(tmpreg); \
    COMMENT                               } while(0)
    COMMENT      
    COMMENT  b.  #define __HAL_RCC_GPIOC_CLK_ENABLE() \
    COMMENT                             do { \
    COMMENT                              __IO T_UINT32 tmpreg; \
    COMMENT                              SET_BIT(RCC->AHB1ENR, RCC_AHB1ENR_GPIOCEN);\
    COMMENT                              /* Delay after an RCC peripheral clock enabling */ \
    COMMENT                              tmpreg = READ_BIT(RCC->AHB1ENR, RCC_AHB1ENR_GPIOCEN);\
    COMMENT                              UNUSED(tmpreg); \
    COMMENT                             } while(0)
    COMMENT
    COMMENT  c. #define __HAL_RCC_GPIOA_CLK_ENABLE()\
    COMMENT                             do { \
    COMMENT                                    __IO T_UINT32 tmpreg; \
    COMMENT                                    SET_BIT(RCC->AHB1ENR, RCC_AHB1ENR_GPIOAEN);\
    COMMENT                                   /* Delay after an RCC peripheral clock enabling */ \
    COMMENT                                   tmpreg = READ_BIT(RCC->AHB1ENR, RCC_AHB1ENR_GPIOAEN);\
    COMMENT                                   UNUSED(tmpreg); \
    COMMENT                                  } while(0)
    COMMENT 
    COMMENT 5. Following Test script related warnings are observed during Target Execution for volatile keyword member/variable:
    COMMENT warning #191-D: type qualifier is meaningless on cast type
    COMMENT 
    COMMENT </AC>
    
    COMMENT Equivalence Class Description
    COMMENT <ECD>
    COMMENT 
    COMMENT Valid Class(es)
    COMMENT Class 1
    COMMENT The function 'BspSwitchesInit', calls the macro __HAL_RCC_GPIOB_CLK_ENABLE.
    COMMENT
    COMMENT Class 2
    COMMENT The function 'BspSwitchesInit', calls the macro __HAL_RCC_GPIOC_CLK_ENABLE.
    COMMENT
    COMMENT Class 3
    COMMENT The function 'BspSwitchesInit', calls the function HalGpioInit.
    COMMENT
    COMMENT Class 4
    COMMENT The function 'EncoderDriverL', result of new encoder value  is equal to ZERO. 
    COMMENT
    COMMENT Class 5
    COMMENT The function 'EncoderDriverL', result of new encoder value  is not equal to ZERO.
    COMMENT
    COMMENT Class 6
    COMMENT The function 'EncoderDriverL', Result of bitwise AND of new encoder value and CHA_MASK is equal to ZERO.
    COMMENT
    COMMENT Class 7
    COMMENT The function 'EncoderDriverL', Result of bitwise AND of new encoder value and CHA_MASK is not equal to ZERO.
    COMMENT
    COMMENT Class 8
    COMMENT The function 'EncoderDriverL', Result of bitwise AND of extracted value and CHA_MASK is equal to ZERO.
    COMMENT
    COMMENT Class 9
    COMMENT The function 'EncoderDriverL', Result of bitwise AND of extracted value and CHA_MASK is not equal to ZERO.
    COMMENT
    COMMENT Class 10
    COMMENT The function 'EncoderDriverL', Result of bitwise AND of extracted value and CHB_MASK is not equal to ZERO.
    COMMENT
    COMMENT Class 11
    COMMENT The function 'PbsClear' resets all Switches to not pressed.
    COMMENT
    COMMENT Class 12
    COMMENT The function 'PbsInit'  call the macro __HAL_RCC_GPIOA_CLK_ENABLE.
    COMMENT
    COMMENT Class 13
    COMMENT The function 'PbsInit'  call the macro __HAL_RCC_GPIOB_CLK_ENABLE.
    COMMENT
    COMMENT Class 14
    COMMENT The function 'PbsInit'  call the macro __HAL_RCC_GPIOC_CLK_ENABLE.
    COMMENT
    COMMENT Class 15
    COMMENT The function 'PbsInit'  call the function BspSwitchesInit.
    COMMENT
    COMMENT Class 16
    COMMENT The function 'PbsInit'  call the function TimerInstall.
    COMMENT
    COMMENT Class 17
    COMMENT The function 'PbsInit'  call the function EncoderDriverL.
    COMMENT
    COMMENT Class 18
    COMMENT The function 'PbsInit'  call the function EncoderDriverR.
    COMMENT
    COMMENT Class 19
    COMMENT The function 'EncoderDriverL', Result of bitwise AND of extracted value and CHB_MASK is equal to ZERO.
    COMMENT
    COMMENT Class 20
    COMMENT The function 'PbsDriver' calls the function EncoderDriverL.
    COMMENT
    COMMENT Class 21
    COMMENT The function 'PbsDriver' calls the function EncoderDriverR.
    COMMENT
    COMMENT Class 22
    COMMENT The function 'PbsDriver' calls the function HwPbsGet.
    COMMENT
    COMMENT Class 23
    COMMENT In the function 'PbsDriver' New switches is set to ZERO.
    COMMENT
    COMMENT Class 24
    COMMENT In the function 'PbsDriver' New switches is not set to ZERO.
    COMMENT
    COMMENT Class 25
    COMMENT In the function 'PbsDriver' Switches_fetched is set to ZERO.
    COMMENT
    COMMENT Class 26
    COMMENT In the function 'PbsDriver' Switches_fetched is not set to ZERO.
    COMMENT
    COMMENT Class 27
    COMMENT In the function 'PbsDriver' New switches is set to Old_switches.
    COMMENT
    COMMENT Class 28
    COMMENT In the function 'PbsDriver' New switches is not set to Old_switches.
    COMMENT
    COMMENT Class 32
    COMMENT In the function 'PbsDriver' Result of bitwise AND operation of Value of most recent raw pbs, Switch Mask and REPEAT_MASK 
    COMMENT is not set to ZERO.
    COMMENT
    COMMENT Class 34
    COMMENT In the function 'PbsDriver' first_press is set to ZERO.
    COMMENT
    COMMENT Class 35
    COMMENT In the function 'PbsDriver' first_press is not set to ZERO.
    COMMENT
    COMMENT Class 36
    COMMENT In the function 'PbsDriver' Switches_used is set to ZERO.
    COMMENT
    COMMENT Class 37
    COMMENT In the function 'PbsDriver' Switches_used is not set to ZERO.
    COMMENT
    COMMENT Class 38
    COMMENT The function 'PbsGet' calls the function OS_ENTER_CRITICAL.
    COMMENT
    COMMENT Class 39
    COMMENT The function 'PbsGet' calls the function OS_EXIT_CRITICAL.
    COMMENT
    COMMENT Class 40
    COMMENT In the function 'PbsGet' S8_position_l is set to ZERO.
    COMMENT
    COMMENT Class 41
    COMMENT In the function 'PbsGet' S8_position_l is not set to ZERO.
    COMMENT
    COMMENT Class 42
    COMMENT In the function 'PbsGet' S8_position_r is set to ZERO.
    COMMENT
    COMMENT Class 43
    COMMENT In the function 'PbsGet' S8_position_r is not set to ZERO.
    COMMENT
    COMMENT Class 44
    COMMENT The function 'PbsGet' calls the function HwPbsGet.
    COMMENT
    COMMENT Class 45
    COMMENT In the function 'PbsGet' return value of HwPbsGet is set to ZERO.
    COMMENT
    COMMENT Class 46
    COMMENT In the function 'PbsGet' return value of HwPbsGet is not set to ZERO.
    COMMENT
    COMMENT Class 47
    COMMENT The function 'HwPbsGet' returns the Pbs value.
    COMMENT
    COMMENT Class 48
    COMMENT In the function 'EncoderDriverR',new_encoder_val is set to ZERO.
    COMMENT
    COMMENT Class 49
    COMMENT In the function 'EncoderDriverR',new_encoder_val is not set to ZERO.
    COMMENT
    COMMENT Class 50
    COMMENT In the function 'EncoderDriverR',result of bitwise AND of new encoder value and CHA_MASK is set to ZERO.
    COMMENT
    COMMENT Class 51
    COMMENT In the function 'EncoderDriverR',result of bitwise AND of new encoder value and CHA_MASK is not set to ZERO.
    COMMENT
    COMMENT Class 52
    COMMENT In the function 'EncoderDriverR',result of bitwise AND of extracted value and CHA_MASK is set to ZERO.
    COMMENT
    COMMENT Class 53
    COMMENT In the function 'EncoderDriverR',result of bitwise AND of extracted value and CHA_MASK is not set to ZERO.
    COMMENT
    COMMENT Class 54
    COMMENT In the function 'EncoderDriverR',result of bitwise AND of extracted value and CHB_MASK is set to ZERO.
    COMMENT
    COMMENT Class 55
    COMMENT In the function 'EncoderDriverR',result of bitwise AND of extracted value and CHB_MASK is not set to ZERO.  
    COMMENT
    COMMENT Class 58
    COMMENT In the function 'PbsDriver' switch timer value is greater or set to zero.
    COMMENT
    COMMENT Class 59
    COMMENT In the function 'PbsDriver' switch timer value is not greater than or set to zero.
    COMMENT     
    COMMENT Class 60
    COMMENT In the function 'PbsDriver' Button 1 switch used is FALSE 
    COMMENT     
    COMMENT Class 61
    COMMENT In the function 'PbsDriver' Button 1 switch used is TRUE
    COMMENT      
    COMMENT Class 62
    COMMENT In the function 'PbsDriver', first time flag is equal to TRUE 
    COMMENT     
    COMMENT Class 63
    COMMENT In the function 'PbsDriver', first time flag is not equal to TRUE 
    COMMENT      
    COMMENT Class 64
    COMMENT In the function 'PbsDriver', Splash_done is not equal to ONE 
    COMMENT       
    COMMENT Class 65
    COMMENT In the function 'PbsDriver', Splash_done is equal to ONE 
    COMMENT       
    COMMENT Class 66
    COMMENT In the function 'PbsDriver', Splash_b1_press is not equal to ZERO
    COMMENT         
    COMMENT Class 67
    COMMENT In the function 'PbsDriver', Splash_b1_press is equal to ZERO
    COMMENT           
    COMMENT Class 68
    COMMENT In the function 'PbsDriver', most recent raw pbs is not equal to ZERO
    COMMENT           
    COMMENT Class 69
    COMMENT In the function 'PbsDriver', Splash_b1_press is equal to ONE
    COMMENT            
    COMMENT Class 70
    COMMENT In the function 'PbsDriver', Splash_b1_press is not equal to ONE
    COMMENT            
    COMMENT Class 71
    COMMENT In the function 'PbsDriver', most recent raw pbs is equal to ZERO
    COMMENT  
    COMMENT Invalid Class(es)
    COMMENT None
    COMMENT
    COMMENT </ECD>

--------------------------------------------------------------------------------
--
-- STUB DECLARATIONS OF THE TESTED OR INTEGRATED UNITS
--
--------------------------------------------------------------------------------
SIMUL

DEFINE STUB hdudispfpbs_c

    --In stub TimerInstall, 'timer' variable made as _no because local varible address cannot be expected. 
    #void TimerInstall( volatile  T_TIMER _no *timer)
    #{
    #  PTU_timer = *timer;
    #  *timer = PTU_timer_in;
    #}

    #void RestoreStatusReg(T_UINT32 _in U32_critical_sr); 
    #T_UINT32 SaveStatusReg(void);

    --In stub HalGpioInit, 'GPIO_Init' variable made as _no because local varible address cannot be expected. 
    #void HalGpioInit(T_GPIO _in *GPIOx, T_GPIO_INIT _no *GPIO_Init)    
    #{
    # PTU_count++;
    # if(PTU_count==1)
    # {
    #   PTU_gpio_init_struct = *GPIO_Init;
    # }
    # else
    # {
    #  PTU_gpio_init_struct2 = *GPIO_Init;
    # }
    #}   
    
END DEFINE

ELSE_SIMUL

 -- No action defined as of now if the module is not simulated
 
END SIMUL
--------------------------------------------------------------------------------
--
-- ENVIRONMENTS DECLARATIONS
--
--------------------------------------------------------------------------------
--IF HOST

-- No special things that have to be done on the host to run the test.

--ELSE

-- No action defined for the target execution as of now

--END IF
--------------------------------------------------------------------------------
-- TESTED FILE ENVIRONNEMENT
--------------------------------------------------------------------------------

-- Environment of the file hdudispfpbs.c
ENVIRONMENT ENV_hdudispfpbs_c

  STRUCTURE Switches,   init = { activity => 0, pressed => 0, raw => 0, b1 => 0, b2 => 0, b3 => 0, b4 => 0, b5 => 0, b6 => 0,
  &                              b7 => 0, b8 => 0, c1 => 0, c2 => 0, c3 => 0, sLE => { pressed => 0, twist => 0 }, 
  &                              sRE => { pressed => 0, twist => 0 } }, ev = init
  
END ENVIRONMENT -- ENV_hdudispfpbs_c

USE ENV_hdudispfpbs_c


--------------------------------------------------------------------------------
--
-- SERVICES DECLARATIONS
--
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
-- Declaration of the service PbsClear
--------------------------------------------------------------------------------
SERVICE PbsClear
SERVICE_TYPE extern

    TEST 1
    FAMILY nominal

        COMMENT Test Description 
        COMMENT <TD>
        COMMENT [hdudispfpbs-PbsClear-DB-LLR-001]
        COMMENT PbsClear function resets all Switches to not pressed.
        COMMENT Equivalence Class 11
        COMMENT </TD>    
        
        ELEMENT
        
            COMMENT INPUT SECTION:
            --None

            COMMENT INPUT/OUTPUT SECTION:
            --NONE      
            
            COMMENT OUTPUT SECTION:
            
                --Resets all Switches to not pressed
                STRUCTURE Switches, init = { activity => ONE, pressed => ONE, raw => ONE, b1 => ONE, b2 => ONE, 
                &                       b3 => ONE, b4 => ONE, b5 => ONE, b6 => ONE, b7 => ONE, b8 => ONE, c1 => ONE, c2 => ONE,
                &                       c3 => ONE, sLE => { pressed => ONE, twist => ONE }, sRE => { pressed => ONE, twist => ONE } },
                &                       ev = { activity => ZERO, pressed => ZERO, raw => ZERO, b1 => ZERO, b2 => ZERO, 
                &                       b3 => ZERO, b4 => ZERO, b5 => ZERO,b6 => ZERO, b7 => ZERO, b8 => ZERO, c1 => ZERO, c2 => ZERO,  
                &                       c3 => ZERO, sLE => { pressed => ZERO, twist => ZERO }, sRE => { pressed => ZERO, twist => ZERO} }  
            
            SIMUL
            
                --NONE      
            
            END SIMUL
            
        -- Calling the Unit Under Test :
        #PbsClear();
        
        END ELEMENT

    END TEST -- TEST 1

END SERVICE -- PbsClear

--------------------------------------------------------------------------------
-- Declaration of the service PbsInit
--------------------------------------------------------------------------------
SERVICE PbsInit
SERVICE_TYPE extern

    TEST 1
    FAMILY nominal

        COMMENT Test Description 
        COMMENT <TD>
        COMMENT [hdudispfpbs-EncoderDriverL-DB-LLR-002]
        COMMENT The function decrements left position by ONE when
        COMMENT 1.Result of bitwise AND of new encoder value and CHA_MASK is equal to ZERO.
        COMMENT 2.Result of bitwise AND of extracted value and CHA_MASK is equal to ZERO.
        COMMENT 3.Result of bitwise AND of extracted value and CHB_MASK is not equal to ZERO.
        COMMENT Equivalence Class 6,8,10
        COMMENT
        COMMENT </TD>       

        ELEMENT
        
            COMMENT INPUT SECTION:
             VAR GPIOA->IDR, init=1536, ev=init
             
            COMMENT INPUT/OUTPUT SECTION:
            --None      
            
            COMMENT OUTPUT SECTION:
            --None                 

        SIMUL
        
            -- configure the GPIOB 
            STUB HalGpioInit(GPIOB)
            
            -- configure the GPIOC
            STUB HalGpioInit(GPIOC)
            
            --debounce the timer 
            STUB TimerInstall 1..2=>()
            
        END SIMUL

        -- Calling the Unit Under Test : 
        #PbsInit();
        
        END ELEMENT

    END TEST -- TEST 1

    TEST 2
    FAMILY nominal

        COMMENT Test Description 
        COMMENT <TD>
        COMMENT [hdudispfpbs-EncoderDriverL-DB-LLR-006]
        COMMENT The function increments left position by ONE when
        COMMENT 1.Result of bitwise AND of new encoder value and CHA_MASK is not equal to ZERO.
        COMMENT 2.Result of bitwise AND of extracted value and CHB_MASK is equal to ZERO.
        COMMENT 3.Result of bitwise AND of extracted value and CHA_MASK is not equal to ZERO.
        COMMENT Equivalence Class 7,19,9
        COMMENT
        COMMENT </TD>   

        ELEMENT
        
            COMMENT INPUT SECTION:

            VAR GPIOA->IDR, init=2304, ev=init

            COMMENT INPUT/OUTPUT SECTION:
            --None      
            
            COMMENT OUTPUT SECTION:
            --None      

        SIMUL
        
            -- configure the GPIOB 
            STUB HalGpioInit(GPIOB)
            
            -- configure the GPIOC
            STUB HalGpioInit(GPIOC)
            
            --debounce the timer 
            STUB TimerInstall 1..2=>()
            
        END SIMUL

        -- Calling the Unit Under Test :
        #PbsInit();
        
        END ELEMENT

    END TEST -- TEST 2

    TEST 3
    FAMILY nominal

        COMMENT Test Description 
        COMMENT <TD>
        COMMENT [hdudispfpbs-EncoderDriverL-DB-LLR-009]
        COMMENT The function increments left position by ONE when
        COMMENT 1.Result of bitwise AND of new encoder value and CHA_MASK is not equal to ZERO.
        COMMENT 2.Result of bitwise AND of extracted value and CHB_MASK is not equal to ZERO.
        COMMENT 3.Result of bitwise AND of extracted value and CHA_MASK is equal to ZERO.
        COMMENT Equivalence Class 7,10,8
        COMMENT
        COMMENT </TD>   

        ELEMENT
        
            COMMENT INPUT SECTION:
            VAR GPIOA->IDR, init=1536, ev=init

            COMMENT INPUT/OUTPUT SECTION:
            --None      
            
            COMMENT OUTPUT SECTION:
            --None                  

        SIMUL
        
            -- configure the GPIOB 
            STUB HalGpioInit(GPIOB)
            
            -- configure the GPIOC
            STUB HalGpioInit(GPIOC)
            
            --debounce the timer 
            STUB TimerInstall 1..2=>()
            
        END SIMUL

        -- Calling the Unit Under Test : 
        #PbsInit();
        
        END ELEMENT
        
        --To make (extract_value & CHA_MASK) equal to ZERO
        #GPIOA->IDR=2304;
        #PbsInit();

        ELEMENT
        
            COMMENT INPUT SECTION:
            VAR GPIOA->IDR, init=1536, ev=init

            COMMENT INPUT/OUTPUT SECTION:
            --None      
            
            COMMENT OUTPUT SECTION:
            --None      

        SIMUL
        
            -- configure the GPIOB 
            STUB HalGpioInit(GPIOB)
            
            -- configure the GPIOC
            STUB HalGpioInit(GPIOC)
            
            --debounce the timer 
            STUB TimerInstall 1..2=>()
            
        END SIMUL

        -- Calling the Unit Under Test : 
        #PbsInit();
        
        END ELEMENT
        
    END TEST -- TEST 3

    TEST 4
    FAMILY nominal

        COMMENT Test Description 
        COMMENT <TD>
        COMMENT [hdudispfpbs-EncoderDriverL-DB-LLR-007]
        COMMENT The function increments  left position by ONE when
        COMMENT 1.Result of bitwise AND of new encoder value and CHA_MASK is not equal to ZERO.
        COMMENT 2.Result of bitwise AND of extracted value and CHB_MASK is equal to ZERO.
        COMMENT 3.Result of bitwise AND of extracted value and CHA_MASK is equal to ZERO.
        COMMENT Equivalence Class 7,19,8
        COMMENT </TD>  

        ELEMENT
        
            COMMENT INPUT SECTION:
            VAR GPIOA->IDR, init=5376, ev=init

            COMMENT INPUT/OUTPUT SECTION:
            --None      
            
            COMMENT OUTPUT SECTION:
            --None                  

        SIMUL
        
            -- configure the GPIOB 
            STUB HalGpioInit(GPIOB)
            
            -- configure the GPIOC
            STUB HalGpioInit(GPIOC)
            
            --debounce the timer 
            STUB TimerInstall 1..2=>()
            
        END SIMUL

        -- Calling the Unit Under Test : 

        #PbsInit();
        END ELEMENT
        
        --To make (extract_value & CHA_MASK) equal to zero
        #GPIOA->IDR=2304;
        #PbsInit();

        ELEMENT
        
            COMMENT INPUT SECTION:
            VAR GPIOA->IDR, init=1, ev=init

            COMMENT INPUT/OUTPUT SECTION:
            --None      
            
            COMMENT OUTPUT SECTION:
            --None      

        SIMUL
        
            -- configure the GPIOB 
            STUB HalGpioInit(GPIOB)
            
            -- configure the GPIOC
            STUB HalGpioInit(GPIOC)
            
            --debounce the timer 
            STUB TimerInstall 1..2=>()
            
        END SIMUL

        -- Calling the Unit Under Test :
        #PbsInit();
        
        END ELEMENT
        
    END TEST -- TEST 4

    TEST 5
    FAMILY nominal

        COMMENT Test Description 
        COMMENT <TD>
        COMMENT [hdudispfpbs-EncoderDriverL-DB-LLR-005]
        COMMENT The function decrements  left position by ONE when
        COMMENT 1.Result of bitwise AND of new encoder value and CHA_MASK is equal to ZERO.
        COMMENT 2.Result of bitwise AND of extracted value and CHA_MASK is not equal to ZERO.
        COMMENT 3.Result of bitwise AND of extracted value and CHB_MASK is equal to ZERO.
        COMMENT Equivalence Class 6,9,19
        COMMENT </TD>        

        ELEMENT
        
            COMMENT INPUT SECTION:
            VAR GPIOA->IDR, init=768, ev=init

            COMMENT INPUT/OUTPUT SECTION:
            --None      
            
            COMMENT OUTPUT SECTION:
            --None      

        SIMUL
        
            -- configure the GPIOB 
            STUB HalGpioInit(GPIOB)
            
            -- configure the GPIOC
            STUB HalGpioInit(GPIOC)
            
            --debounce the timer 
            STUB TimerInstall 1..2=>()
            
        END SIMUL

        -- Calling the Unit Under Test : 
        #PbsInit();
        
        END ELEMENT
        
        --To make (extract_value & CHB_MASK) equal to zero
        #GPIOA->IDR=2304;
        #PbsInit();

        ELEMENT
        
            COMMENT INPUT SECTION:
            VAR GPIOA->IDR, init=1, ev=init

            COMMENT INPUT/OUTPUT SECTION:
            --None      
            
            COMMENT OUTPUT SECTION:
            --None      

        SIMUL
        
            -- configure the GPIOB 
            STUB HalGpioInit(GPIOB)
            
            -- configure the GPIOC
            STUB HalGpioInit(GPIOC)
            
            --debounce the timer 
            STUB TimerInstall 1..2=>()
            
        END SIMUL

        -- Calling the Unit Under Test : 
        #PbsInit();
        
        END ELEMENT
        
    END TEST -- TEST 5

    TEST 6
    FAMILY nominal
    
        COMMENT Test Description 
        COMMENT <TD>
        COMMENT [hdudispfpbs-EncoderDriverL-DB-LLR-004]
        COMMENT The function increments left position by ONE when
        COMMENT 1.Result of bitwise AND of new encoder value and CHA_MASK is equal to ZERO.
        COMMENT 2.Result of bitwise AND of extracted value and CHA_MASK is not equal to ZERO.
        COMMENT 3.Result of bitwise AND of extracted value and CHB_MASK is not equal to ZERO.
        COMMENT Equivalence Class 6,9,10
        COMMENT </TD>   


        ELEMENT
        
            COMMENT INPUT SECTION:
            VAR GPIOA->IDR, init=2304, ev=init

            COMMENT INPUT/OUTPUT SECTION:
            --None      
            
            COMMENT OUTPUT SECTION:
            --None      

        SIMUL
        
            -- configure the GPIOB 
            STUB HalGpioInit(GPIOB)
            
            -- configure the GPIOC
            STUB HalGpioInit(GPIOC)
            
            --debounce the timer 
            STUB TimerInstall 1..2=>()
            
        END SIMUL

        -- Calling the Unit Under Test :
        #PbsInit();
        
        END ELEMENT

        --To set (extract_value & CHB_MASK) not equal to Zero
        #GPIOA->IDR=768;
        #PbsInit();

        ELEMENT
        
            COMMENT INPUT SECTION:
            VAR GPIOA->IDR, init=1, ev=init

            COMMENT INPUT/OUTPUT SECTION:
            --None      
            
            COMMENT OUTPUT SECTION:
            --None      


        SIMUL
        
            -- configure the GPIOB 
            STUB HalGpioInit(GPIOB)
            
            -- configure the GPIOC
            STUB HalGpioInit(GPIOC)
            
            --debounce the timer 
            STUB TimerInstall 1..2=>()
            
        END SIMUL

        -- Calling the Unit Under Test : 
        #PbsInit();
        
        END ELEMENT
        
    END TEST -- TEST 6

    TEST 7
    FAMILY nominal
    
        COMMENT Test Description 
        COMMENT <TD>
        COMMENT [hdudispfpbs-EncoderDriverL-DB-LLR-003]
        COMMENT The function increments left position by ONE when
        COMMENT 1.Result of bitwise AND of new encoder value and CHA_MASK is equal to ZERO.
        COMMENT 2.Result of bitwise AND of extracted value and CHA_MASK is equal to ZERO.
        COMMENT 3.Result of bitwise AND of extracted value and CHB_MASK is equal to ZERO.
        COMMENT Equivalence Class 6,8,19
        COMMENT </TD>   

        ELEMENT
        
            COMMENT INPUT SECTION:
            VAR GPIOA->IDR, init=5376, ev=init

            COMMENT INPUT/OUTPUT SECTION:
            --None      
            
            COMMENT OUTPUT SECTION:
            --None      

        SIMUL
        
            -- configure the GPIOB 
            STUB HalGpioInit(GPIOB)
            
            -- configure the GPIOC
            STUB HalGpioInit(GPIOC)
            
            --debounce the timer 
            STUB TimerInstall 1..2=>()
            
        END SIMUL

        -- Calling the Unit Under Test : 

        #PbsInit();
        END ELEMENT
        
        --To set (extract_value & CHB_MASK) equal to Zero
        #GPIOA->IDR=1536;
        #PbsInit();

        ELEMENT
        
            COMMENT INPUT SECTION:
            --None

            COMMENT INPUT/OUTPUT SECTION:
            --None      
            
            COMMENT OUTPUT SECTION:
            VAR GPIOA->IDR, init=1, ev=init
            
        SIMUL
        
            -- configure the GPIOB 
            STUB HalGpioInit(GPIOB)
            
            -- configure the GPIOC
            STUB HalGpioInit(GPIOC)
            
            --debounce the timer 
            STUB TimerInstall 1..2=>()
            
        END SIMUL

        -- Calling the Unit Under Test : 
        #PbsInit();
        
        END ELEMENT
        
    END TEST -- TEST 7
    
    TEST 8
    FAMILY nominal

        COMMENT Test Description 
        COMMENT <TD>
        COMMENT [hdudispfpbs-PbsInit-DB-LLR-001]
        COMMENT The function calls the macro __HAL_RCC_GPIOA_CLK_ENABLE.
        COMMENT Equivalence Class 12
        COMMENT
        COMMENT [hdudispfpbs-PbsInit-DB-LLR-002]
        COMMENT The function calls the macro __HAL_RCC_GPIOB_CLK_ENABLE.
        COMMENT Equivalence Class 13
        COMMENT
        COMMENT [hdudispfpbs-PbsInit-DB-LLR-003]
        COMMENT The function calls the macro __HAL_RCC_GPIOC_CLK_ENABLE.
        COMMENT Equivalence Class 14
        COMMENT
        COMMENT [hdudispfpbs-PbsInit-DB-LLR-004]
        COMMENT The function calls the function BspSwitchesInit.
        COMMENT Equivalence Class 15
        COMMENT
        COMMENT [hdudispfpbs-BspSwitchesInit-DB-LLR-001]
        COMMENT The function calls the macro __HAL_RCC_GPIOB_CLK_ENABLE.
        COMMENT Equivalence Class 1
        COMMENT
        COMMENT [hdudispfpbs-BspSwitchesInit-DB-LLR-002]
        COMMENT The function calls the macro __HAL_RCC_GPIOC_CLK_ENABLE.
        COMMENT Equivalence Class 2
        COMMENT
        COMMENT [hdudispfpbs-BspSwitchesInit-DB-LLR-003]
        COMMENT The function configures the GPIOB peripheral as follows.
        COMMENT 1.Sets Mode of Gpio Initialization Structure to GPIO_MODE_INPUT.
        COMMENT 2.Sets Pin of  Gpio Initialization Structure to result of bitwise OR of GPIO_PIN_0, GPIO_PIN_1, GPIO_PIN_4,
        COMMENT   GPIO_PIN_7, GPIO_PIN_10, GPIO_PIN_11, GPIO_PIN_12, GPIO_PIN_13, GPIO_PIN_14 and GPIO_PIN_15.
        COMMENT 3.Sets Speed of Gpio Initialization Structure to GPIO_SPEED_FAST.
        COMMENT 4.Sets Pull of Gpio Initialization Structure to GPIO_PULLUP.
        COMMENT 5.Calls the function HalGpioInit with GPIOB and reference to of Gpio Initialization Structure as parameter.
        COMMENT Equivalence Class 3
        COMMENT
        COMMENT [hdudispfpbs-BspSwitchesInit-DB-LLR-004]
        COMMENT The function configures the GPIOC peripheral as follows.
        COMMENT 1.Sets Pin of  Gpio Initialization Structure to result of bitwise OR of GPIO_PIN_2, GPIO_PIN_3, GPIO_PIN_4,
        COMMENT   GPIO_PIN_5, GPIO_PIN_6 and GPIO_PIN_7.
        COMMENT 2.Calls the function HalGpioInit with GPIOC and reference to of Gpio Initialization Structure as parameter.
        COMMENT Equivalence Class 3
        COMMENT
        COMMENT [hdudispfpbs-PbsInit-DB-LLR-005]
        COMMENT The function calls the function TimerInstall with debounce timer as its parameter.
        COMMENT Equivalence Class 16
        COMMENT
        COMMENT [hdudispfpbs-PbsInit-DB-LLR-006]
        COMMENT The function calls the function EncoderDriverL.
        COMMENT Equivalence Class 17
        COMMENT
        COMMENT [hdudispfpbs-EncoderDriverL-DB-LLR-001]
        COMMENT The function does the following.
        COMMENT 1.Stores the value of most recent raw pbs of left encoder to new encoder value .
        COMMENT 2.Performs bitwise AND operation with value of IDR of GPIOA and RESET_9_AND_10 and result is right
        COMMENT   Shifted by EIGHT and stores it to extracted value.
        COMMENT 3.Extracted value is stored to value of most recent raw pbs of left encoder.
        COMMENT 3.Sets new encoder value  to result of XOR operation of new encoder value and extracted value.
        COMMENT 4.Return from the function if result of new encoder value  is equal to ZERO
        COMMENT Equivalence Class 4
        COMMENT
        COMMENT [hdudispfpbs-PbsInit-DB-LLR-007]
        COMMENT The function calls the function EncoderDriverR.
        COMMENT Equivalence Class 18
        COMMENT
        COMMENT [hdudispfpbs-PbsInit-DB-LLR-008]
        COMMENT The function does the following.
        COMMENT 1.Sets left postion value and right position value to 0.
        COMMENT Equivalence Class None
        COMMENT </TD>     
    

        ELEMENT
        
            COMMENT INPUT SECTION:
                --Initialized the value for debounce timer 
                VAR PTU_timer_in, init=0, ev=init

            COMMENT INPUT/OUTPUT SECTION:
            --None      
            
            COMMENT OUTPUT SECTION:
                --Holds the value of RCC AHB1 peripheral clock register
                VAR RCC->AHB1ENR, init = 0, ev = 7
        

                -- Temporary count
                VAR PTU_count,   init=0, ev = 2

                -- Holds Mode of Gpio Initialization Structure 
                VAR PTU_gpio_init_struct.Mode, init=1, ev=GPIO_MODE_INPUT
                
                --Holds value of Pin of  Gpio Initialization Structure 
                VAR PTU_gpio_init_struct.Pin, init=0, ev=64659
                VAR PTU_gpio_init_struct2.Pin, init=0, ev=252
                
                --Holds value of Speed of Gpio Initialization Structure 
                VAR PTU_gpio_init_struct.Speed, init=GPIO_SPEED_LOW, ev=GPIO_SPEED_FAST
                
                --Holds value of Pull of Gpio Initialization Structure 
                VAR PTU_gpio_init_struct.Pull, init=0, ev=GPIO_PULLUP
                
                --Holds the value of debounce timer 
                VAR PTU_timer, init=1, ev=0
                
        SIMUL
        
            -- configure the GPIOB 
            STUB HalGpioInit(GPIOB)
            
            -- configure the GPIOC
            STUB HalGpioInit(GPIOC)
            
            --debounce the timer 
            STUB TimerInstall 1..2=>()
            
        END SIMUL
        
        -- Calling the Unit Under Test :        
        #PbsInit();
        
        END ELEMENT

    END TEST -- TEST 8

    TEST 9
    FAMILY nominal

        COMMENT Test Description 
        COMMENT <TD>
        COMMENT [hdudispfpbs-EncoderDriverL-DB-LLR-001]
        COMMENT The function does the following.
        COMMENT 1.Stores the value of most recent raw pbs of left encoder to new encoder value .
        COMMENT 2.Performs bitwise AND operation with value of IDR of GPIOA and RESET_9_AND_10 and result is right
        COMMENT   Shifted by EIGHT and stores it to extracted value.
        COMMENT 3.Extracted value is stored to value of most recent raw pbs of left encoder.
        COMMENT 3.Sets new encoder value  to result of XOR operation of new encoder value and extracted value.
        COMMENT 4.Does nothing when result of new encoder value  is not equal to ZERO.
        COMMENT Equivalence Class 5
        COMMENT
        COMMENT [hdudispfpbs-EncoderDriverL-DB-LLR-008]
        COMMENT The function decrements left position by ONE when
        COMMENT 1.Result of bitwise AND of new encoder value and CHA_MASK is not equal to ZERO.
        COMMENT 2.Result of bitwise AND of extracted value and CHB_MASK is not equal to ZERO.
        COMMENT 3.Result of bitwise AND of extracted value and CHA_MASK is not equal to ZERO.
        COMMENT Equivalence Class 7,10,9
        COMMENT
        COMMENT </TD>       

        ELEMENT
        
            COMMENT INPUT SECTION:
            VAR GPIOA->IDR, init=768, ev=init
            
            COMMENT INPUT/OUTPUT SECTION:
            --None      
            
            COMMENT OUTPUT SECTION:
            --None                  
        
        SIMUL
        
            -- configure the GPIOB 
            STUB HalGpioInit(GPIOB)
            
            -- configure the GPIOC
            STUB HalGpioInit(GPIOC)
            
            --debounce the timer 
            STUB TimerInstall 1..2=>()
            
        END SIMUL

        -- Calling the Unit Under Test :   
        #PbsInit();
        
        END ELEMENT

    END TEST -- TEST 9
    
END SERVICE -- PbsInit


